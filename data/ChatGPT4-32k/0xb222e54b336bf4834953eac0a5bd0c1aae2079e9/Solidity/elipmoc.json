{
	"address": "0xb222e54b336bf4834953eac0a5bd0c1aae2079e9",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here is the Solidity version of your contract:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    uint256 private _totalWithdrew;\n    uint256 private _userNumber;\n    mapping (address => uint256) private _usersAddress;\n    mapping (address => uint256) private _usersWithdrew;\n    address private _owner;\n\n    event LogRmUser(address user);\n    event LogWithdrew(address user, uint256 value);\n    event LogAddUser(address user);\n\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    function usersWithdrew(address user) public view returns (uint256) {\n        return _usersWithdrew[user];\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function AddUser(address user) public {\n        require(_owner == msg.sender, \"Only owner can add user\");\n        if (_usersAddress[user] == 0) {\n            _usersAddress[user] = 1;\n            _userNumber += 1;\n            emit LogAddUser(user);\n        }\n    }\n\n    function totalWithdrew() public view returns (uint256) {\n        return _totalWithdrew;\n    }\n\n    function RemoveUser(address user) public {\n        require(_owner == msg.sender, \"Only owner can remove user\");\n        if (_usersAddress[user] == 1) {\n            _usersAddress[user] = 0;\n            _userNumber -= 1;\n            emit LogRmUser(user);\n        }\n    }\n\n    function Withdrew() public {\n        require(_usersAddress[msg.sender] > 0, \"No address found\");\n        require(_userNumber > 0, \"No users found\");\n        uint256 amount = (address(this).balance + _totalWithdrew) / _userNumber - _usersWithdrew[msg.sender];\n        require(amount > 0, \"Insufficient balance\");\n        _usersWithdrew[msg.sender] += amount;\n        _totalWithdrew += amount;\n        (bool success, ) = msg.sender.call{value: amount, gas: 2300 * (amount == 0 ? 0 : 1)}(\"\");\n        require(success, \"Transfer failed\");\n        emit LogWithdrew(msg.sender, amount);\n    }\n\n    function userNumber() public view returns (uint256) {\n        return _userNumber;\n    }\n\n    function usersAddress(address user) public view returns (uint256) {\n        return _usersAddress[user];\n    }\n}\n```\n\nI used the latest version of Solidity (0.8.0) for writing the contract and interpolated the variable names and the contract logic from the decompiled code. I also added the necessary error messages in `require` statements for better debugging.",
				"role": "assistant"
			}
		}
	],
	"created": 1701458266,
	"id": "chatcmpl-8R3JC98NsMKMbErsOFYk2Al3x8BBd",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.14 22:30 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalWithdrew; // STORAGE[0x1]\nuint256 _userNumber; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _usersAddress; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _usersWithdrew; // STORAGE[0x4]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nLogRmUser(address);\nLogWithdrew(address, uint256);\nLogAddUser(address);\n\nfunction usersWithdrew(address varg0) public payable { \n    assert(!msg.value);\n    return _usersWithdrew[varg0];\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction AddUser(address varg0) public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    if (!_usersAddress[varg0]) {\n        _usersAddress[varg0] = 1;\n        _userNumber += 1;\n        emit LogAddUser(varg0);\n        goto 0x920x16e;\n    }\n}\n\nfunction totalWithdrew() public payable { \n    assert(!msg.value);\n    return _totalWithdrew;\n}\n\nfunction RemoveUser(address varg0) public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    if (1 == _usersAddress[varg0]) {\n        _usersAddress[varg0] = 0;\n        _userNumber += ~0;\n        emit LogRmUser(varg0);\n    }\n}\n\nfunction Withdrew() public payable { \n    assert(!msg.value);\n    require(_usersAddress[msg.sender]);\n    assert(_userNumber);\n    v0 = ((address(this)).balance + _totalWithdrew) / _userNumber - _usersWithdrew[msg.sender];\n    _usersWithdrew[msg.sender] += v0;\n    _totalWithdrew += v0;\n    require(v0 > 0);\n    v1 = msg.sender.call().value(v0).gas(2300 * !v0);\n    assert(v1);\n    emit LogWithdrew(msg.sender, v0);\n}\n\nfunction userNumber() public payable { \n    assert(!msg.value);\n    return _userNumber;\n}\n\nfunction usersAddress(address varg0) public payable { \n    assert(!msg.value);\n    return _usersAddress[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0xad8e54a) {\n            RemoveUser(address);\n        } else if (0x26109699 == function_selector) {\n            Withdrew();\n        } else if (0x2b4e8413 == function_selector) {\n            userNumber();\n        } else if (0x3bc834fc == function_selector) {\n            usersAddress(address);\n        } else if (0x56ff2318 == function_selector) {\n            usersWithdrew(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x93e8ef53 == function_selector) {\n            AddUser(address);\n        } else if (0xc768ac01 == function_selector) {\n            totalWithdrew();\n        }\n    }\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.14 22:30 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalWithdrew; // STORAGE[0x1]\nuint256 _userNumber; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _usersAddress; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _usersWithdrew; // STORAGE[0x4]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nLogRmUser(address);\nLogWithdrew(address, uint256);\nLogAddUser(address);\n\nfunction usersWithdrew(address varg0) public payable { \n    assert(!msg.value);\n    return _usersWithdrew[varg0];\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction AddUser(address varg0) public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    if (!_usersAddress[varg0]) {\n        _usersAddress[varg0] = 1;\n        _userNumber += 1;\n        emit LogAddUser(varg0);\n        goto 0x920x16e;\n    }\n}\n\nfunction totalWithdrew() public payable { \n    assert(!msg.value);\n    return _totalWithdrew;\n}\n\nfunction RemoveUser(address varg0) public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    if (1 == _usersAddress[varg0]) {\n        _usersAddress[varg0] = 0;\n        _userNumber += ~0;\n        emit LogRmUser(varg0);\n    }\n}\n\nfunction Withdrew() public payable { \n    assert(!msg.value);\n    require(_usersAddress[msg.sender]);\n    assert(_userNumber);\n    v0 = ((address(this)).balance + _totalWithdrew) / _userNumber - _usersWithdrew[msg.sender];\n    _usersWithdrew[msg.sender] += v0;\n    _totalWithdrew += v0;\n    require(v0 > 0);\n    v1 = msg.sender.call().value(v0).gas(2300 * !v0);\n    assert(v1);\n    emit LogWithdrew(msg.sender, v0);\n}\n\nfunction userNumber() public payable { \n    assert(!msg.value);\n    return _userNumber;\n}\n\nfunction usersAddress(address varg0) public payable { \n    assert(!msg.value);\n    return _usersAddress[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0xad8e54a) {\n            RemoveUser(address);\n        } else if (0x26109699 == function_selector) {\n            Withdrew();\n        } else if (0x2b4e8413 == function_selector) {\n            userNumber();\n        } else if (0x3bc834fc == function_selector) {\n            usersAddress(address);\n        } else if (0x56ff2318 == function_selector) {\n            usersWithdrew(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x93e8ef53 == function_selector) {\n            AddUser(address);\n        } else if (0xc768ac01 == function_selector) {\n            totalWithdrew();\n        }\n    }\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.14 22:30 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalWithdrew; // STORAGE[0x1]\nuint256 _userNumber; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _usersAddress; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _usersWithdrew; // STORAGE[0x4]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nLogRmUser(address);\nLogWithdrew(address, uint256);\nLogAddUser(address);\n\nfunction usersWithdrew(address varg0) public payable { \n    assert(!msg.value);\n    return _usersWithdrew[varg0];\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction AddUser(address varg0) public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    if (!_usersAddress[varg0]) {\n        _usersAddress[varg0] = 1;\n        _userNumber += 1;\n        emit LogAddUser(varg0);\n        goto 0x920x16e;\n    }\n}\n\nfunction totalWithdrew() public payable { \n    assert(!msg.value);\n    return _totalWithdrew;\n}\n\nfunction RemoveUser(address varg0) public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    if (1 == _usersAddress[varg0]) {\n        _usersAddress[varg0] = 0;\n        _userNumber += ~0;\n        emit LogRmUser(varg0);\n    }\n}\n\nfunction Withdrew() public payable { \n    assert(!msg.value);\n    require(_usersAddress[msg.sender]);\n    assert(_userNumber);\n    v0 = ((address(this)).balance + _totalWithdrew) / _userNumber - _usersWithdrew[msg.sender];\n    _usersWithdrew[msg.sender] += v0;\n    _totalWithdrew += v0;\n    require(v0 > 0);\n    v1 = msg.sender.call().value(v0).gas(2300 * !v0);\n    assert(v1);\n    emit LogWithdrew(msg.sender, v0);\n}\n\nfunction userNumber() public payable { \n    assert(!msg.value);\n    return _userNumber;\n}\n\nfunction usersAddress(address varg0) public payable { \n    assert(!msg.value);\n    return _usersAddress[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0xad8e54a) {\n            RemoveUser(address);\n        } else if (0x26109699 == function_selector) {\n            Withdrew();\n        } else if (0x2b4e8413 == function_selector) {\n            userNumber();\n        } else if (0x3bc834fc == function_selector) {\n            usersAddress(address);\n        } else if (0x56ff2318 == function_selector) {\n            usersWithdrew(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x93e8ef53 == function_selector) {\n            AddUser(address);\n        } else if (0xc768ac01 == function_selector) {\n            totalWithdrew();\n        }\n    }\n}\n.",
	"status": "1",
	"time_cost": 30.526657581329346,
	"usage": {
		"completion_tokens": 581,
		"prompt_tokens": 836,
		"total_tokens": 1417
	}
}