{
	"address": "0xcd619ad647357868dd5987b0ce4886bf61cfac32",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity contract based on the provided decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract SquarExPrivateRoundToken {\n    event LogBuy(address indexed buyer, uint256 amount);\n    event LogBurn(address indexed burner, uint256 amount);\n\n    uint8 private _currentState;\n    uint256 private _totalSupply;\n    mapping (address => uint256) private _balanceOf;\n    address private _escrow;\n    address private _tokenManager;\n    address private _crowdsaleManager;\n\n    function name() public pure returns (string memory) { \n        return \"SquarEx Private Round SQEX Token\";\n    }\n\n    function currentState() public view returns (uint8) { \n        require(_currentState <= 4);\n        return _currentState;\n    }\n\n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n\n    function TOKEN_SUPPLY_LIMIT() public pure returns (uint256) { \n        return 0x383f8f62ee6f1ec400000;\n    }\n\n    function tokenManager() public view returns (address) { \n        return _tokenManager;\n    }\n\n    function decimals() public pure returns (uint8) { \n        return 18;\n    }\n\n    function crowdsaleManager() public view returns (address) { \n        return _crowdsaleManager;\n    }\n\n    function getCurrentState() public view returns (uint8) { \n        require(_currentState <= 4);\n        return _currentState;\n    }\n\n    function setCrowdsaleManager(address newManager) public { \n        require(msg.sender == _tokenManager);\n        require(_currentState <= 4 && _currentState != 3);\n        _crowdsaleManager = newManager;\n    }\n\n    function getCrowdsaleManager() public view returns (address) { \n        return _crowdsaleManager;\n    }\n\n    function balanceOf(address account) public view returns (uint256) { \n        return _balanceOf[account];\n    }\n\n    function withdrawEther() public { \n        require(msg.sender == _tokenManager);\n        bool success = payable(_escrow).send(address(this).balance);\n        require(success);\n    }\n\n    function setTokenManager(address newManager) public { \n        require(msg.sender == _tokenManager);\n        _tokenManager = newManager;\n    }\n\n    function PRICE() public pure returns (uint256) { \n        return 1700;\n    }\n\n    function symbol() public pure returns (string memory) { \n        return \"SQEX\";\n    }\n\n    function getPrice() public pure returns (uint256) { \n        return 1700;\n    }\n\n    function setPresaleState(uint8 newState) public { \n        require(msg.sender == _tokenManager && _currentState <= 4);\n        require(newState <= 4);\n        _currentState = newState;\n    }\n\n    function getTokenManager() public view returns (address) { \n        return _tokenManager;\n    }\n\n    function burnTokens(address account) public { \n        require(msg.sender == _crowdsaleManager && _currentState == 3);\n        require(_balanceOf[account] > 0);\n        \n        uint256 amount = _balanceOf[account];\n        _balanceOf[account] = 0;\n        _totalSupply -= amount;\n        \n        emit LogBurn(account, amount);\n\n        if (_totalSupply == 0) {\n            _currentState = 4;\n        }\n    }\n\n    function getTotalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n\n    function escrow() public view returns (address) { \n        return _escrow;\n    }\n\n    function buyTokens() public payable { \n        require(_currentState == 1 && msg.value > 0);\n        uint256 tokens = msg.value * PRICE();\n        require(_totalSupply + tokens <= TOKEN_SUPPLY_LIMIT());\n\n        _balanceOf[msg.sender] += tokens;\n        _totalSupply += tokens;\n        \n        emit LogBuy(msg.sender, tokens);\n    }\n}\n```\n\nPlease note that decompiled code often lacks some details that are present in the original source code. While the above code is a close approximation, it may not be exactly identical to the original Solidity code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701463269,
	"id": "chatcmpl-8R4bth43cdmsxGAg5XIj1DfFIXe1H",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.14 17:57 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint8 _currentState; // STORAGE[0x0] bytes 0 to 0\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\naddress _escrow; // STORAGE[0x2] bytes 0 to 19\naddress _tokenManager; // STORAGE[0x3] bytes 0 to 19\naddress _crowdsaleManager; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nLogBuy(address, uint256);\nLogBurn(address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (0) {\n        MEM[v5 - 0] = ~0x0 & MEM[v5 - 0];\n    }\n    return v0, v6, 'SquarEx Private Round SQEX Token';\n}\n\nfunction currentState() public nonPayable { \n    assert(_currentState <= 4);\n    return _currentState;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction TOKEN_SUPPLY_LIMIT() public nonPayable { \n    return 0x383f8f62ee6f1ec400000;\n}\n\nfunction tokenManager() public nonPayable { \n    return _tokenManager;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction crowdsaleManager() public nonPayable { \n    return _crowdsaleManager;\n}\n\nfunction getCurrentState() public nonPayable { \n    assert(_currentState <= 4);\n    return _currentState;\n}\n\nfunction setCrowdsaleManager(address varg0) public nonPayable { \n    require(msg.sender == _tokenManager);\n    assert(_currentState <= 4);\n    require(_currentState != 3);\n    _crowdsaleManager = varg0;\n}\n\nfunction getCrowdsaleManager() public nonPayable { \n    return _crowdsaleManager;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction withdrawEther() public nonPayable { \n    require(msg.sender == _tokenManager);\n    if ((address(this)).balance > 0) {\n        v0 = _escrow.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v0);\n    }\n}\n\nfunction setTokenManager(address varg0) public nonPayable { \n    require(msg.sender == _tokenManager);\n    _tokenManager = varg0;\n}\n\nfunction PRICE() public nonPayable { \n    return 1700;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x5351455800000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction getPrice() public nonPayable { \n    return 1700;\n}\n\nfunction setPresaleState(uint8 varg0) public nonPayable { \n    require(msg.sender == _tokenManager);\n    assert(_currentState <= 4);\n    v0 = v1 = _currentState == 0;\n    if (v1) {\n        assert(0xff & varg0 <= 4);\n        v0 = v2 = 0xff & varg0 == 1;\n    }\n    if (!v0) {\n        assert(_currentState <= 4);\n        v0 = v3 = _currentState == 1;\n        if (v3) {\n            assert(0xff & varg0 <= 4);\n            v0 = v4 = 0xff & varg0 == 2;\n        }\n    }\n    if (!v0) {\n        assert(_currentState <= 4);\n        v0 = v5 = _currentState == 1;\n        if (_currentState != 1) {\n            assert(_currentState <= 4);\n            v0 = v6 = _currentState == 2;\n        }\n        if (v0) {\n            assert(0xff & varg0 <= 4);\n            v0 = v7 = 0xff & varg0 == 3;\n        }\n        if (v0) {\n            v0 = v8 = _crowdsaleManager != 0;\n        }\n    }\n    if (!v0) {\n        assert(_currentState <= 4);\n        v0 = v9 = _currentState == 2;\n        if (v9) {\n            assert(0xff & varg0 <= 4);\n            v0 = v10 = 0xff & varg0 == 1;\n        }\n    }\n    if (!v0) {\n        assert(_currentState <= 4);\n        v0 = v11 = _currentState == 3;\n        if (v11) {\n            assert(0xff & varg0 <= 4);\n            v0 = v12 = 0xff & varg0 == 4;\n        }\n        if (v0) {\n            v0 = _totalSupply == 0;\n        }\n    }\n    require(v0);\n    assert(0xff & varg0 <= 4);\n    _currentState = varg0;\n    assert(0xff & varg0 <= 4);\n    emit 0x24adb25d8e34435d96423524c2e431120ff0ca86a894cdbf7e068f4318afecf(0xff & (0xff & varg0));\n}\n\nfunction getTokenManager() public nonPayable { \n    return _tokenManager;\n}\n\nfunction burnTokens(address varg0) public nonPayable { \n    require(msg.sender == _crowdsaleManager);\n    assert(_currentState <= 4);\n    assert(3 <= 4);\n    require(3 == _currentState);\n    require(_balanceOf[varg0] != 0);\n    _balanceOf[varg0] = 0;\n    _totalSupply = _totalSupply - _balanceOf[varg0];\n    emit LogBurn(varg0, _balanceOf[varg0]);\n    if (_totalSupply == 0) {\n        _currentState = 4;\n        emit 0x24adb25d8e34435d96423524c2e431120ff0ca86a894cdbf7e068f4318afecf(4);\n    }\n}\n\nfunction getTotalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction escrow() public nonPayable { \n    return _escrow;\n}\n\nfunction buyTokens(address varg0) public payable { \n    0x6c4(varg0);\n}\n\nfunction 0x6c4(uint256 varg0) private { \n    assert(_currentState <= 4);\n    assert(1 <= 4);\n    require(1 == _currentState);\n    require(msg.value != 0);\n    require(_totalSupply + msg.value * 1700 <= 0x383f8f62ee6f1ec400000);\n    v0 = address(varg0);\n    _balanceOf[v0] = _balanceOf[v0] + msg.value * 1700;\n    _totalSupply = _totalSupply + msg.value * 1700;\n    emit LogBuy(address(varg0), msg.value * 1700);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0xc3f6acf == function_selector) {\n            currentState();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x292005a2 == function_selector) {\n            TOKEN_SUPPLY_LIMIT();\n        } else if (0x2a709b14 == function_selector) {\n            tokenManager();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x341176d6 == function_selector) {\n            crowdsaleManager();\n        } else if (0x378aa701 == function_selector) {\n            getCurrentState();\n        } else if (0x4defd1bf == function_selector) {\n            setCrowdsaleManager(address);\n        } else if (0x6677cef1 == function_selector) {\n            getCrowdsaleManager();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7362377b == function_selector) {\n            withdrawEther();\n        } else if (0x7cb2b79c == function_selector) {\n            setTokenManager(address);\n        } else if (0x8d859f3e == function_selector) {\n            PRICE();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x98d5fdca == function_selector) {\n            getPrice();\n        } else if (0xa25bc80c == function_selector) {\n            setPresaleState(uint8);\n        } else if (0xab97d59d == function_selector) {\n            getTokenManager();\n        } else if (0xb237f7d4 == function_selector) {\n            burnTokens(address);\n        } else if (0xc4e41b22 == function_selector) {\n            getTotalSupply();\n        } else if (0xe2fdcc17 == function_selector) {\n            escrow();\n        } else if (0xec8ac4d8 == function_selector) {\n            buyTokens(address);\n        }\n    }\n    0x6c4(msg.sender);\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.14 17:57 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint8 _currentState; // STORAGE[0x0] bytes 0 to 0\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\naddress _escrow; // STORAGE[0x2] bytes 0 to 19\naddress _tokenManager; // STORAGE[0x3] bytes 0 to 19\naddress _crowdsaleManager; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nLogBuy(address, uint256);\nLogBurn(address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (0) {\n        MEM[v5 - 0] = ~0x0 & MEM[v5 - 0];\n    }\n    return v0, v6, 'SquarEx Private Round SQEX Token';\n}\n\nfunction currentState() public nonPayable { \n    assert(_currentState <= 4);\n    return _currentState;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction TOKEN_SUPPLY_LIMIT() public nonPayable { \n    return 0x383f8f62ee6f1ec400000;\n}\n\nfunction tokenManager() public nonPayable { \n    return _tokenManager;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction crowdsaleManager() public nonPayable { \n    return _crowdsaleManager;\n}\n\nfunction getCurrentState() public nonPayable { \n    assert(_currentState <= 4);\n    return _currentState;\n}\n\nfunction setCrowdsaleManager(address varg0) public nonPayable { \n    require(msg.sender == _tokenManager);\n    assert(_currentState <= 4);\n    require(_currentState != 3);\n    _crowdsaleManager = varg0;\n}\n\nfunction getCrowdsaleManager() public nonPayable { \n    return _crowdsaleManager;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction withdrawEther() public nonPayable { \n    require(msg.sender == _tokenManager);\n    if ((address(this)).balance > 0) {\n        v0 = _escrow.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v0);\n    }\n}\n\nfunction setTokenManager(address varg0) public nonPayable { \n    require(msg.sender == _tokenManager);\n    _tokenManager = varg0;\n}\n\nfunction PRICE() public nonPayable { \n    return 1700;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x5351455800000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction getPrice() public nonPayable { \n    return 1700;\n}\n\nfunction setPresaleState(uint8 varg0) public nonPayable { \n    require(msg.sender == _tokenManager);\n    assert(_currentState <= 4);\n    v0 = v1 = _currentState == 0;\n    if (v1) {\n        assert(0xff & varg0 <= 4);\n        v0 = v2 = 0xff & varg0 == 1;\n    }\n    if (!v0) {\n        assert(_currentState <= 4);\n        v0 = v3 = _currentState == 1;\n        if (v3) {\n            assert(0xff & varg0 <= 4);\n            v0 = v4 = 0xff & varg0 == 2;\n        }\n    }\n    if (!v0) {\n        assert(_currentState <= 4);\n        v0 = v5 = _currentState == 1;\n        if (_currentState != 1) {\n            assert(_currentState <= 4);\n            v0 = v6 = _currentState == 2;\n        }\n        if (v0) {\n            assert(0xff & varg0 <= 4);\n            v0 = v7 = 0xff & varg0 == 3;\n        }\n        if (v0) {\n            v0 = v8 = _crowdsaleManager != 0;\n        }\n    }\n    if (!v0) {\n        assert(_currentState <= 4);\n        v0 = v9 = _currentState == 2;\n        if (v9) {\n            assert(0xff & varg0 <= 4);\n            v0 = v10 = 0xff & varg0 == 1;\n        }\n    }\n    if (!v0) {\n        assert(_currentState <= 4);\n        v0 = v11 = _currentState == 3;\n        if (v11) {\n            assert(0xff & varg0 <= 4);\n            v0 = v12 = 0xff & varg0 == 4;\n        }\n        if (v0) {\n            v0 = _totalSupply == 0;\n        }\n    }\n    require(v0);\n    assert(0xff & varg0 <= 4);\n    _currentState = varg0;\n    assert(0xff & varg0 <= 4);\n    emit 0x24adb25d8e34435d96423524c2e431120ff0ca86a894cdbf7e068f4318afecf(0xff & (0xff & varg0));\n}\n\nfunction getTokenManager() public nonPayable { \n    return _tokenManager;\n}\n\nfunction burnTokens(address varg0) public nonPayable { \n    require(msg.sender == _crowdsaleManager);\n    assert(_currentState <= 4);\n    assert(3 <= 4);\n    require(3 == _currentState);\n    require(_balanceOf[varg0] != 0);\n    _balanceOf[varg0] = 0;\n    _totalSupply = _totalSupply - _balanceOf[varg0];\n    emit LogBurn(varg0, _balanceOf[varg0]);\n    if (_totalSupply == 0) {\n        _currentState = 4;\n        emit 0x24adb25d8e34435d96423524c2e431120ff0ca86a894cdbf7e068f4318afecf(4);\n    }\n}\n\nfunction getTotalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction escrow() public nonPayable { \n    return _escrow;\n}\n\nfunction buyTokens(address varg0) public payable { \n    0x6c4(varg0);\n}\n\nfunction 0x6c4(uint256 varg0) private { \n    assert(_currentState <= 4);\n    assert(1 <= 4);\n    require(1 == _currentState);\n    require(msg.value != 0);\n    require(_totalSupply + msg.value * 1700 <= 0x383f8f62ee6f1ec400000);\n    v0 = address(varg0);\n    _balanceOf[v0] = _balanceOf[v0] + msg.value * 1700;\n    _totalSupply = _totalSupply + msg.value * 1700;\n    emit LogBuy(address(varg0), msg.value * 1700);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0xc3f6acf == function_selector) {\n            currentState();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x292005a2 == function_selector) {\n            TOKEN_SUPPLY_LIMIT();\n        } else if (0x2a709b14 == function_selector) {\n            tokenManager();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x341176d6 == function_selector) {\n            crowdsaleManager();\n        } else if (0x378aa701 == function_selector) {\n            getCurrentState();\n        } else if (0x4defd1bf == function_selector) {\n            setCrowdsaleManager(address);\n        } else if (0x6677cef1 == function_selector) {\n            getCrowdsaleManager();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7362377b == function_selector) {\n            withdrawEther();\n        } else if (0x7cb2b79c == function_selector) {\n            setTokenManager(address);\n        } else if (0x8d859f3e == function_selector) {\n            PRICE();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x98d5fdca == function_selector) {\n            getPrice();\n        } else if (0xa25bc80c == function_selector) {\n            setPresaleState(uint8);\n        } else if (0xab97d59d == function_selector) {\n            getTokenManager();\n        } else if (0xb237f7d4 == function_selector) {\n            burnTokens(address);\n        } else if (0xc4e41b22 == function_selector) {\n            getTotalSupply();\n        } else if (0xe2fdcc17 == function_selector) {\n            escrow();\n        } else if (0xec8ac4d8 == function_selector) {\n            buyTokens(address);\n        }\n    }\n    0x6c4(msg.sender);\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.14 17:57 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint8 _currentState; // STORAGE[0x0] bytes 0 to 0\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\naddress _escrow; // STORAGE[0x2] bytes 0 to 19\naddress _tokenManager; // STORAGE[0x3] bytes 0 to 19\naddress _crowdsaleManager; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nLogBuy(address, uint256);\nLogBurn(address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (0) {\n        MEM[v5 - 0] = ~0x0 & MEM[v5 - 0];\n    }\n    return v0, v6, 'SquarEx Private Round SQEX Token';\n}\n\nfunction currentState() public nonPayable { \n    assert(_currentState <= 4);\n    return _currentState;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction TOKEN_SUPPLY_LIMIT() public nonPayable { \n    return 0x383f8f62ee6f1ec400000;\n}\n\nfunction tokenManager() public nonPayable { \n    return _tokenManager;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction crowdsaleManager() public nonPayable { \n    return _crowdsaleManager;\n}\n\nfunction getCurrentState() public nonPayable { \n    assert(_currentState <= 4);\n    return _currentState;\n}\n\nfunction setCrowdsaleManager(address varg0) public nonPayable { \n    require(msg.sender == _tokenManager);\n    assert(_currentState <= 4);\n    require(_currentState != 3);\n    _crowdsaleManager = varg0;\n}\n\nfunction getCrowdsaleManager() public nonPayable { \n    return _crowdsaleManager;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction withdrawEther() public nonPayable { \n    require(msg.sender == _tokenManager);\n    if ((address(this)).balance > 0) {\n        v0 = _escrow.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v0);\n    }\n}\n\nfunction setTokenManager(address varg0) public nonPayable { \n    require(msg.sender == _tokenManager);\n    _tokenManager = varg0;\n}\n\nfunction PRICE() public nonPayable { \n    return 1700;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x5351455800000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction getPrice() public nonPayable { \n    return 1700;\n}\n\nfunction setPresaleState(uint8 varg0) public nonPayable { \n    require(msg.sender == _tokenManager);\n    assert(_currentState <= 4);\n    v0 = v1 = _currentState == 0;\n    if (v1) {\n        assert(0xff & varg0 <= 4);\n        v0 = v2 = 0xff & varg0 == 1;\n    }\n    if (!v0) {\n        assert(_currentState <= 4);\n        v0 = v3 = _currentState == 1;\n        if (v3) {\n            assert(0xff & varg0 <= 4);\n            v0 = v4 = 0xff & varg0 == 2;\n        }\n    }\n    if (!v0) {\n        assert(_currentState <= 4);\n        v0 = v5 = _currentState == 1;\n        if (_currentState != 1) {\n            assert(_currentState <= 4);\n            v0 = v6 = _currentState == 2;\n        }\n        if (v0) {\n            assert(0xff & varg0 <= 4);\n            v0 = v7 = 0xff & varg0 == 3;\n        }\n        if (v0) {\n            v0 = v8 = _crowdsaleManager != 0;\n        }\n    }\n    if (!v0) {\n        assert(_currentState <= 4);\n        v0 = v9 = _currentState == 2;\n        if (v9) {\n            assert(0xff & varg0 <= 4);\n            v0 = v10 = 0xff & varg0 == 1;\n        }\n    }\n    if (!v0) {\n        assert(_currentState <= 4);\n        v0 = v11 = _currentState == 3;\n        if (v11) {\n            assert(0xff & varg0 <= 4);\n            v0 = v12 = 0xff & varg0 == 4;\n        }\n        if (v0) {\n            v0 = _totalSupply == 0;\n        }\n    }\n    require(v0);\n    assert(0xff & varg0 <= 4);\n    _currentState = varg0;\n    assert(0xff & varg0 <= 4);\n    emit 0x24adb25d8e34435d96423524c2e431120ff0ca86a894cdbf7e068f4318afecf(0xff & (0xff & varg0));\n}\n\nfunction getTokenManager() public nonPayable { \n    return _tokenManager;\n}\n\nfunction burnTokens(address varg0) public nonPayable { \n    require(msg.sender == _crowdsaleManager);\n    assert(_currentState <= 4);\n    assert(3 <= 4);\n    require(3 == _currentState);\n    require(_balanceOf[varg0] != 0);\n    _balanceOf[varg0] = 0;\n    _totalSupply = _totalSupply - _balanceOf[varg0];\n    emit LogBurn(varg0, _balanceOf[varg0]);\n    if (_totalSupply == 0) {\n        _currentState = 4;\n        emit 0x24adb25d8e34435d96423524c2e431120ff0ca86a894cdbf7e068f4318afecf(4);\n    }\n}\n\nfunction getTotalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction escrow() public nonPayable { \n    return _escrow;\n}\n\nfunction buyTokens(address varg0) public payable { \n    0x6c4(varg0);\n}\n\nfunction 0x6c4(uint256 varg0) private { \n    assert(_currentState <= 4);\n    assert(1 <= 4);\n    require(1 == _currentState);\n    require(msg.value != 0);\n    require(_totalSupply + msg.value * 1700 <= 0x383f8f62ee6f1ec400000);\n    v0 = address(varg0);\n    _balanceOf[v0] = _balanceOf[v0] + msg.value * 1700;\n    _totalSupply = _totalSupply + msg.value * 1700;\n    emit LogBuy(address(varg0), msg.value * 1700);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0xc3f6acf == function_selector) {\n            currentState();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x292005a2 == function_selector) {\n            TOKEN_SUPPLY_LIMIT();\n        } else if (0x2a709b14 == function_selector) {\n            tokenManager();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x341176d6 == function_selector) {\n            crowdsaleManager();\n        } else if (0x378aa701 == function_selector) {\n            getCurrentState();\n        } else if (0x4defd1bf == function_selector) {\n            setCrowdsaleManager(address);\n        } else if (0x6677cef1 == function_selector) {\n            getCrowdsaleManager();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7362377b == function_selector) {\n            withdrawEther();\n        } else if (0x7cb2b79c == function_selector) {\n            setTokenManager(address);\n        } else if (0x8d859f3e == function_selector) {\n            PRICE();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x98d5fdca == function_selector) {\n            getPrice();\n        } else if (0xa25bc80c == function_selector) {\n            setPresaleState(uint8);\n        } else if (0xab97d59d == function_selector) {\n            getTokenManager();\n        } else if (0xb237f7d4 == function_selector) {\n            burnTokens(address);\n        } else if (0xc4e41b22 == function_selector) {\n            getTotalSupply();\n        } else if (0xe2fdcc17 == function_selector) {\n            escrow();\n        } else if (0xec8ac4d8 == function_selector) {\n            buyTokens(address);\n        }\n    }\n    0x6c4(msg.sender);\n}\n.",
	"status": "1",
	"time_cost": 56.66224813461304,
	"usage": {
		"completion_tokens": 874,
		"prompt_tokens": 2300,
		"total_tokens": 3174
	}
}