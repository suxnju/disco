{
	"address": "0x14d0e43d19a964c875be50397528ee659bb20e40",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The following is your Solidity contract code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    address public owner;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    \n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n        name = \"Token Name\";\n        symbol = \"SYMBOL\";\n        decimals = 18;\n        totalSupply = 1000000 * (10 ** uint256(decimals));\n        balanceOf[msg.sender] = totalSupply;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require(_spender != address(0));\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_to != address(0));\n        require(balanceOf[_from] >= _value);\n        require(allowance[_from][msg.sender] >= _value);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n```\nPlease note that the decompiled code is an approximation and may not exactly match the original Solidity code. The functions name(), symbol(), decimals(), totalSupply() were originally declared as public variables and the Solidity compiler automatically creates getter functions for public state variables. The functions balanceOf() and allowance() are also getters created by the Solidity compiler for the corresponding public mappings. The original contract likely used the OpenZeppelin library for ERC20 tokens, which includes additional safety checks and events that are not included in the decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1700631716,
	"id": "chatcmpl-8NaHkraotyHv5wMynDBDGnvxaB6Lr",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x70a08231 > var0) {\n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = 0x00dc;\n                var1 = func_01D5();\n            \n            label_00DC:\n                var temp0 = var1;\n                var1 = 0x00e9;\n                var var2 = temp0;\n                var var3 = memory[0x40:0x60];\n                var1 = func_0829(var2, var3);\n            \n            label_00E9:\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + var1 - temp1];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = 0x0105;\n                var2 = 0x0100;\n                var3 = msg.data.length;\n                var var4 = 0x04;\n                var2, var3 = func_07AF(var3, var4);\n                var1 = func_0100(var2, var3);\n            \n            label_0105:\n                var temp2 = var1;\n                var1 = 0x00e9;\n                var2 = temp2;\n                var3 = memory[0x40:0x60];\n                var1 = func_081E(var2, var3);\n                goto label_00E9;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = 0x011a;\n                var1 = func_0289();\n            \n            label_011A:\n                var temp3 = var1;\n                var1 = 0x00e9;\n                var2 = temp3;\n                var3 = memory[0x40:0x60];\n                var1 = func_0A82(var2, var3);\n                goto label_00E9;\n            } else if (var0 == 0x183274e3) {\n                // Dispatch table entry for 0x183274e3 (unknown)\n                var1 = 0x013a;\n                var2 = 0x0135;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_07AF(var3, var4);\n                func_0135(var2, var3);\n                stop();\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x0105;\n                var2 = 0x014a;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4 = func_0774(var3, var4);\n                var1 = func_014A(var2, var3, var4);\n                goto label_0105;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = 0x0157;\n                var1 = func_0306();\n                var temp4 = var1;\n                var1 = 0x00e9;\n                var2 = temp4;\n                var3 = memory[0x40:0x60];\n                var1 = func_0A8B(var2, var3);\n                goto label_00E9;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0x95d89b41 > var0) {\n            if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x011a;\n                var2 = 0x0172;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = balanceOf(var3, var4);\n                memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x00;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = 0x013a;\n                var2 = 0x0332;\n                func_0679();\n                var2 = 0x033c;\n                var3 = 0x00;\n                func_06B8(var3);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = 0x0187;\n                var1 = func_033E();\n                var temp5 = var1;\n                var1 = 0x00e9;\n                var2 = temp5;\n                var3 = memory[0x40:0x60];\n                var1 = func_07F0(var2, var3);\n                goto label_00E9;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = 0x00dc;\n            var1 = symbol();\n            goto label_00DC;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x0105;\n            var2 = 0x01aa;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = func_07AF(var3, var4);\n            var4 = 0x00;\n            var var5 = var4;\n            var var6 = 0x0367;\n            var6 = func_03E2();\n            var temp6 = var6;\n            var5 = temp6;\n            var6 = 0x027f;\n            var var7 = var5;\n            var var8 = var2;\n            var var9 = var3;\n            func_04E4(var7, var8, var9);\n            var1 = 0x01;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x011a;\n            var2 = 0x01bd;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = func_0742(var3, var4);\n            var1 = func_01BD(var2, var3);\n            goto label_011A;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = 0x013a;\n            var2 = 0x01d0;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2 = balanceOf(var3, var4);\n            func_01D0(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0100(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0272;\n        var2 = func_03E2();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x027f;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_03E6(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_0135(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x06] & (0x01 << 0xa0) - 0x01) {\n            var var1 = 0x02ba;\n            var var2 = 0x64;\n            var var3 = 0x0a;\n            var1 = func_0AC8(var2, var3);\n        \n        label_02BA:\n            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = arg1;\n            return;\n        } else {\n            var1 = 0x0a;\n            var temp0 = var1;\n            var1 = 0x02ba;\n            var2 = temp0;\n            var3 = 0x0a;\n            var1 = func_0AC8(var2, var3);\n            goto label_02BA;\n        }\n    }\n    \n    function func_014A(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02e3;\n        var2 = func_03E2();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x02f0;\n        var var3 = arg0;\n        var var4 = var1;\n        var var5 = arg2;\n        func_049A(var3, var4, var5);\n        var2 = 0x02fb;\n        var3 = arg0;\n        var4 = arg1;\n        var5 = arg2;\n        func_04E4(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_01BD(var arg0, var arg1) returns (var r0) {\n        r0 = func_0374(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_01D0(var arg0) {\n        var var0 = 0x03a7;\n        func_0679();\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var0 = 0x03df;\n            var var1 = arg0;\n            func_06B8(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x03cd;\n            var1 = temp0 + 0x04;\n            var0 = func_08BF(var1);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_01D5() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x04;\n        var var2 = 0x01e4;\n        var var3 = storage[var1];\n        var2 = func_0AEB(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0210;\n        var6 = func_0AEB(var7);\n    \n        if (!var6) {\n        label_025D:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_0254; }\n        \n        label_0240:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0240; }\n        \n        label_0254:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_025D;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp10 + 0x20;\n            goto label_025D;\n        }\n    }\n    \n    function func_0289() returns (var r0) { return storage[0x03]; }\n    \n    function func_0306() returns (var r0) { return 0x12; }\n    \n    function func_033E() returns (var r0) { return storage[0x07] & (0x01 << 0xa0) - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x05;\n        var var2 = 0x01e4;\n        var var3 = storage[var1];\n        var2 = func_0AEB(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0210;\n        var6 = func_0AEB(var7);\n    \n        if (!var6) {\n        label_025D:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_0254; }\n        \n        label_0240:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0240; }\n        \n        label_0254:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_025D;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp10 + 0x20;\n            goto label_025D;\n        }\n    }\n    \n    function func_0374(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03E2() returns (var r0) { return msg.sender; }\n    \n    function func_03E6(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x03cd;\n            var1 = temp5 + 0x04;\n            var0 = func_0A3E(var1);\n            goto label_03CD;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var var1 = arg0 & temp0;\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg1 & temp0;\n            var var0 = arg1 & temp0;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = arg2;\n            var var2 = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n            var var3 = 0x048d;\n            var var4 = arg2;\n            var var5 = memory[0x40:0x60];\n            var3 = func_0A82(var4, var5);\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + var3 - temp2], [stack[-2], stack[-3], stack[-4]]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp3 + 0x04;\n            var0 = 0x03cd;\n            var0 = func_0905(var1);\n        \n        label_03CD:\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + var0 - temp4]);\n        }\n    }\n    \n    function func_049A(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x04a6;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_0374(var2, var3);\n        var0 = var1;\n    \n        if (var0 == ~0x00) {\n        label_04DE:\n            return;\n        } else if (var0 >= arg2) {\n            var1 = 0x04de;\n            var2 = arg0;\n            var3 = arg1;\n            var var4 = var0 - arg2;\n            func_03E6(var2, var3, var4);\n            goto label_04DE;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp0 + 0x04;\n            var1 = 0x03cd;\n            var1 = func_0947(var2);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        }\n    }\n    \n    function func_04E4(var arg0, var arg1, var arg2) {\n        if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x0514;\n            var var1 = arg2;\n            var var2 = var1;\n            var0 = func_0AB1(var1, var2);\n            var1 = var0;\n            var0 = 0x051f;\n            var2 = 0x64;\n            var0 = func_0A99(var1, var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x03294a3b << 0xe3;\n            var1 = storage[0x01] & (0x01 << 0xa0) - 0x01;\n            var2 = 0x194a51d8;\n            var var3 = 0x0551;\n            var var4 = arg0;\n            var var5 = arg1;\n            var var6 = temp0 + 0x04;\n            var3 = func_0804(var4, var5, var6);\n            var4 = 0x20;\n            var5 = memory[0x40:0x60];\n            var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp1;\n        \n            if (!var4) {\n                var temp2 = memory[0x40:0x60];\n                var temp3 = returndata.length;\n                memory[0x40:0x60] = temp2 + (temp3 + 0x1f & ~0x1f);\n                var1 = 0x05a3;\n                var3 = temp2;\n                var2 = var3 + temp3;\n                var1 = func_07D8(var2, var3);\n                var temp4 = var0;\n                var0 = 0x05ad;\n                var temp5 = var1;\n                var1 = temp4;\n                var2 = temp5;\n                var0 = func_0AB1(var1, var2);\n            \n                if (arg1 & (0x01 << 0xa0) - 0x01) {\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var0 = storage[keccak256(memory[0x00:0x40])];\n                \n                    if (var0 >= arg2) {\n                        var temp6 = (0x01 << 0xa0) - 0x01;\n                        var2 = arg0 & temp6;\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x00;\n                        var temp7 = arg2;\n                        storage[keccak256(memory[0x00:0x40])] = var0 - temp7;\n                        memory[0x00:0x20] = arg1 & temp6;\n                        var temp8 = keccak256(memory[0x00:0x40]);\n                        storage[temp8] = temp7 + storage[temp8];\n                        var1 = arg1 & temp6;\n                        var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                        var4 = 0x066b;\n                        var5 = temp7;\n                        var6 = memory[0x40:0x60];\n                        var4 = func_0A82(var5, var6);\n                        var temp9 = memory[0x40:0x60];\n                        log(memory[temp9:temp9 + var4 - temp9], [stack[-2], stack[-3], stack[-4]]);\n                        return;\n                    } else {\n                        var temp10 = memory[0x40:0x60];\n                        memory[temp10:temp10 + 0x20] = 0x461bcd << 0xe5;\n                        var1 = 0x03cd;\n                        var2 = temp10 + 0x04;\n                        var1 = func_097E(var2);\n                    \n                    label_03CD:\n                        var temp11 = memory[0x40:0x60];\n                        revert(memory[temp11:temp11 + var1 - temp11]);\n                    }\n                } else {\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n                    var1 = temp12 + 0x04;\n                    var0 = 0x03cd;\n                    var0 = func_087C(var1);\n                    goto label_03CD;\n                }\n            } else {\n                var temp13 = returndata.length;\n                memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp14 + 0x04;\n            var0 = 0x03cd;\n            var0 = func_09F9(var1);\n            goto label_03CD;\n        }\n    }\n    \n    function func_0679() {\n        var var0 = 0x0681;\n        var0 = func_03E2();\n        var0 = var0 & (0x01 << 0xa0) - 0x01;\n        var var1 = 0x0692;\n        var1 = func_033E();\n    \n        if (var1 & (0x01 << 0xa0) - 0x01 == var0) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var0 = 0x03cd;\n        var1 = temp0 + 0x04;\n        var0 = func_09C4(var1);\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var0 - temp1]);\n    }\n    \n    function func_06B8(var arg0) {\n        var temp0 = storage[0x07];\n        var temp1 = (0x01 << 0xa0) - 0x01;\n        var temp2 = temp1 & arg0;\n        storage[0x07] = temp2 | (temp0 & ~((0x01 << 0xa0) - 0x01));\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x07] & (0x01 << 0xa0) - 0x01, stack[-1] & (0x01 << 0xa0) - 0x01]);\n    }\n    \n    function func_070A(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x073b;\n            var var2 = arg1;\n            return func_070A(var2);\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_0742(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x075d;\n            var var3 = arg1;\n            var2 = func_070A(var3);\n            var0 = var2;\n            var2 = 0x076b;\n            var3 = arg1 + 0x20;\n            var2 = func_070A(var3);\n            arg0 = var2;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var temp0 = var1;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_0774(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var3 = 0x0791;\n            var var4 = arg1;\n            var3 = func_070A(var4);\n            var0 = var3;\n            var3 = 0x079f;\n            var4 = arg1 + 0x20;\n            var3 = func_070A(var4);\n            arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else {\n            var temp0 = var2;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_07AF(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x07ca;\n            var var3 = arg1;\n            var2 = func_070A(var3);\n            r0 = var2;\n            arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n            return r0, arg0;\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_07D8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) { return memory[arg1:arg1 + 0x20]; }\n    \n        var temp0 = var0;\n        revert(memory[temp0:temp0 + temp0]);\n    }\n    \n    function func_07F0(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        return temp0 + 0x20;\n    }\n    \n    function func_0804(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg2;\n        memory[temp1:temp1 + 0x20] = temp0 & arg0;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0 & arg1;\n        return temp1 + 0x40;\n    }\n    \n    function func_081E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = !!arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_0829(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = var0;\n    \n        if (var3 >= var2) {\n        label_0855:\n        \n            if (var3 <= var2) { return (var2 + 0x1f & ~0x1f) + arg1 + 0x40; }\n        \n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = var0;\n            return (temp2 + 0x1f & ~0x1f) + temp3 + 0x40;\n        } else {\n        label_0842:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_0855; }\n            else { goto label_0842; }\n        }\n    }\n    \n    function func_087C(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x23;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x657373 << 0xe8;\n        return temp0 + 0x80;\n    }\n    \n    function func_08BF(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x26;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x646472657373 << 0xd0;\n        return temp0 + 0x80;\n    }\n    \n    function func_0905(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x22;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x7373 << 0xf0;\n        return temp0 + 0x80;\n    }\n    \n    function func_0947(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x1d;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000;\n        return temp0 + 0x60;\n    }\n    \n    function func_097E(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x26;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x616c616e6365 << 0xd0;\n        return temp0 + 0x80;\n    }\n    \n    function func_09C4(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x20;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        return temp0 + 0x60;\n    }\n    \n    function func_09F9(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x25;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x6472657373 << 0xd8;\n        return temp0 + 0x80;\n    }\n    \n    function func_0A3E(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x24;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x72657373 << 0xe0;\n        return temp0 + 0x80;\n    }\n    \n    function func_0A82(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_0A8B(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0 & 0xff;\n        return temp0 + 0x20;\n    }\n    \n    function func_0A99(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= ~arg0) { return arg1 + arg0; }\n    \n        var var1 = 0x0aac;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0AB1(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 >= arg0) { return arg1 - arg0; }\n    \n        var var1 = 0x0ac3;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0AC8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 & 0xff;\n        var var2 = arg0 & 0xff;\n    \n        if (var1 >= var2) { return var1 - var2; }\n    \n        var var3 = 0x0ae2;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0AEB(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 / 0x02;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 != (var0 < 0x20)) { goto label_0B20; }\n            else { goto label_0B0B; }\n        } else if (var1 != (var0 < 0x20)) {\n        label_0B20:\n            return var0;\n        } else {\n        label_0B0B:\n            memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x70a08231 > var0) {\n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = 0x00dc;\n                var1 = func_01D5();\n            \n            label_00DC:\n                var temp0 = var1;\n                var1 = 0x00e9;\n                var var2 = temp0;\n                var var3 = memory[0x40:0x60];\n                var1 = func_0829(var2, var3);\n            \n            label_00E9:\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + var1 - temp1];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = 0x0105;\n                var2 = 0x0100;\n                var3 = msg.data.length;\n                var var4 = 0x04;\n                var2, var3 = func_07AF(var3, var4);\n                var1 = func_0100(var2, var3);\n            \n            label_0105:\n                var temp2 = var1;\n                var1 = 0x00e9;\n                var2 = temp2;\n                var3 = memory[0x40:0x60];\n                var1 = func_081E(var2, var3);\n                goto label_00E9;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = 0x011a;\n                var1 = func_0289();\n            \n            label_011A:\n                var temp3 = var1;\n                var1 = 0x00e9;\n                var2 = temp3;\n                var3 = memory[0x40:0x60];\n                var1 = func_0A82(var2, var3);\n                goto label_00E9;\n            } else if (var0 == 0x183274e3) {\n                // Dispatch table entry for 0x183274e3 (unknown)\n                var1 = 0x013a;\n                var2 = 0x0135;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_07AF(var3, var4);\n                func_0135(var2, var3);\n                stop();\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x0105;\n                var2 = 0x014a;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4 = func_0774(var3, var4);\n                var1 = func_014A(var2, var3, var4);\n                goto label_0105;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = 0x0157;\n                var1 = func_0306();\n                var temp4 = var1;\n                var1 = 0x00e9;\n                var2 = temp4;\n                var3 = memory[0x40:0x60];\n                var1 = func_0A8B(var2, var3);\n                goto label_00E9;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0x95d89b41 > var0) {\n            if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x011a;\n                var2 = 0x0172;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = balanceOf(var3, var4);\n                memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x00;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = 0x013a;\n                var2 = 0x0332;\n                func_0679();\n                var2 = 0x033c;\n                var3 = 0x00;\n                func_06B8(var3);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = 0x0187;\n                var1 = func_033E();\n                var temp5 = var1;\n                var1 = 0x00e9;\n                var2 = temp5;\n                var3 = memory[0x40:0x60];\n                var1 = func_07F0(var2, var3);\n                goto label_00E9;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = 0x00dc;\n            var1 = symbol();\n            goto label_00DC;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x0105;\n            var2 = 0x01aa;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = func_07AF(var3, var4);\n            var4 = 0x00;\n            var var5 = var4;\n            var var6 = 0x0367;\n            var6 = func_03E2();\n            var temp6 = var6;\n            var5 = temp6;\n            var6 = 0x027f;\n            var var7 = var5;\n            var var8 = var2;\n            var var9 = var3;\n            func_04E4(var7, var8, var9);\n            var1 = 0x01;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x011a;\n            var2 = 0x01bd;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = func_0742(var3, var4);\n            var1 = func_01BD(var2, var3);\n            goto label_011A;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = 0x013a;\n            var2 = 0x01d0;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2 = balanceOf(var3, var4);\n            func_01D0(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0100(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0272;\n        var2 = func_03E2();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x027f;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_03E6(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_0135(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x06] & (0x01 << 0xa0) - 0x01) {\n            var var1 = 0x02ba;\n            var var2 = 0x64;\n            var var3 = 0x0a;\n            var1 = func_0AC8(var2, var3);\n        \n        label_02BA:\n            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = arg1;\n            return;\n        } else {\n            var1 = 0x0a;\n            var temp0 = var1;\n            var1 = 0x02ba;\n            var2 = temp0;\n            var3 = 0x0a;\n            var1 = func_0AC8(var2, var3);\n            goto label_02BA;\n        }\n    }\n    \n    function func_014A(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02e3;\n        var2 = func_03E2();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x02f0;\n        var var3 = arg0;\n        var var4 = var1;\n        var var5 = arg2;\n        func_049A(var3, var4, var5);\n        var2 = 0x02fb;\n        var3 = arg0;\n        var4 = arg1;\n        var5 = arg2;\n        func_04E4(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_01BD(var arg0, var arg1) returns (var r0) {\n        r0 = func_0374(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_01D0(var arg0) {\n        var var0 = 0x03a7;\n        func_0679();\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var0 = 0x03df;\n            var var1 = arg0;\n            func_06B8(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x03cd;\n            var1 = temp0 + 0x04;\n            var0 = func_08BF(var1);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_01D5() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x04;\n        var var2 = 0x01e4;\n        var var3 = storage[var1];\n        var2 = func_0AEB(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0210;\n        var6 = func_0AEB(var7);\n    \n        if (!var6) {\n        label_025D:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_0254; }\n        \n        label_0240:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0240; }\n        \n        label_0254:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_025D;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp10 + 0x20;\n            goto label_025D;\n        }\n    }\n    \n    function func_0289() returns (var r0) { return storage[0x03]; }\n    \n    function func_0306() returns (var r0) { return 0x12; }\n    \n    function func_033E() returns (var r0) { return storage[0x07] & (0x01 << 0xa0) - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x05;\n        var var2 = 0x01e4;\n        var var3 = storage[var1];\n        var2 = func_0AEB(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0210;\n        var6 = func_0AEB(var7);\n    \n        if (!var6) {\n        label_025D:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_0254; }\n        \n        label_0240:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0240; }\n        \n        label_0254:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_025D;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp10 + 0x20;\n            goto label_025D;\n        }\n    }\n    \n    function func_0374(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03E2() returns (var r0) { return msg.sender; }\n    \n    function func_03E6(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x03cd;\n            var1 = temp5 + 0x04;\n            var0 = func_0A3E(var1);\n            goto label_03CD;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var var1 = arg0 & temp0;\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg1 & temp0;\n            var var0 = arg1 & temp0;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = arg2;\n            var var2 = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n            var var3 = 0x048d;\n            var var4 = arg2;\n            var var5 = memory[0x40:0x60];\n            var3 = func_0A82(var4, var5);\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + var3 - temp2], [stack[-2], stack[-3], stack[-4]]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp3 + 0x04;\n            var0 = 0x03cd;\n            var0 = func_0905(var1);\n        \n        label_03CD:\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + var0 - temp4]);\n        }\n    }\n    \n    function func_049A(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x04a6;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_0374(var2, var3);\n        var0 = var1;\n    \n        if (var0 == ~0x00) {\n        label_04DE:\n            return;\n        } else if (var0 >= arg2) {\n            var1 = 0x04de;\n            var2 = arg0;\n            var3 = arg1;\n            var var4 = var0 - arg2;\n            func_03E6(var2, var3, var4);\n            goto label_04DE;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp0 + 0x04;\n            var1 = 0x03cd;\n            var1 = func_0947(var2);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        }\n    }\n    \n    function func_04E4(var arg0, var arg1, var arg2) {\n        if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x0514;\n            var var1 = arg2;\n            var var2 = var1;\n            var0 = func_0AB1(var1, var2);\n            var1 = var0;\n            var0 = 0x051f;\n            var2 = 0x64;\n            var0 = func_0A99(var1, var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x03294a3b << 0xe3;\n            var1 = storage[0x01] & (0x01 << 0xa0) - 0x01;\n            var2 = 0x194a51d8;\n            var var3 = 0x0551;\n            var var4 = arg0;\n            var var5 = arg1;\n            var var6 = temp0 + 0x04;\n            var3 = func_0804(var4, var5, var6);\n            var4 = 0x20;\n            var5 = memory[0x40:0x60];\n            var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp1;\n        \n            if (!var4) {\n                var temp2 = memory[0x40:0x60];\n                var temp3 = returndata.length;\n                memory[0x40:0x60] = temp2 + (temp3 + 0x1f & ~0x1f);\n                var1 = 0x05a3;\n                var3 = temp2;\n                var2 = var3 + temp3;\n                var1 = func_07D8(var2, var3);\n                var temp4 = var0;\n                var0 = 0x05ad;\n                var temp5 = var1;\n                var1 = temp4;\n                var2 = temp5;\n                var0 = func_0AB1(var1, var2);\n            \n                if (arg1 & (0x01 << 0xa0) - 0x01) {\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var0 = storage[keccak256(memory[0x00:0x40])];\n                \n                    if (var0 >= arg2) {\n                        var temp6 = (0x01 << 0xa0) - 0x01;\n                        var2 = arg0 & temp6;\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x00;\n                        var temp7 = arg2;\n                        storage[keccak256(memory[0x00:0x40])] = var0 - temp7;\n                        memory[0x00:0x20] = arg1 & temp6;\n                        var temp8 = keccak256(memory[0x00:0x40]);\n                        storage[temp8] = temp7 + storage[temp8];\n                        var1 = arg1 & temp6;\n                        var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                        var4 = 0x066b;\n                        var5 = temp7;\n                        var6 = memory[0x40:0x60];\n                        var4 = func_0A82(var5, var6);\n                        var temp9 = memory[0x40:0x60];\n                        log(memory[temp9:temp9 + var4 - temp9], [stack[-2], stack[-3], stack[-4]]);\n                        return;\n                    } else {\n                        var temp10 = memory[0x40:0x60];\n                        memory[temp10:temp10 + 0x20] = 0x461bcd << 0xe5;\n                        var1 = 0x03cd;\n                        var2 = temp10 + 0x04;\n                        var1 = func_097E(var2);\n                    \n                    label_03CD:\n                        var temp11 = memory[0x40:0x60];\n                        revert(memory[temp11:temp11 + var1 - temp11]);\n                    }\n                } else {\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n                    var1 = temp12 + 0x04;\n                    var0 = 0x03cd;\n                    var0 = func_087C(var1);\n                    goto label_03CD;\n                }\n            } else {\n                var temp13 = returndata.length;\n                memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp14 + 0x04;\n            var0 = 0x03cd;\n            var0 = func_09F9(var1);\n            goto label_03CD;\n        }\n    }\n    \n    function func_0679() {\n        var var0 = 0x0681;\n        var0 = func_03E2();\n        var0 = var0 & (0x01 << 0xa0) - 0x01;\n        var var1 = 0x0692;\n        var1 = func_033E();\n    \n        if (var1 & (0x01 << 0xa0) - 0x01 == var0) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var0 = 0x03cd;\n        var1 = temp0 + 0x04;\n        var0 = func_09C4(var1);\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var0 - temp1]);\n    }\n    \n    function func_06B8(var arg0) {\n        var temp0 = storage[0x07];\n        var temp1 = (0x01 << 0xa0) - 0x01;\n        var temp2 = temp1 & arg0;\n        storage[0x07] = temp2 | (temp0 & ~((0x01 << 0xa0) - 0x01));\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x07] & (0x01 << 0xa0) - 0x01, stack[-1] & (0x01 << 0xa0) - 0x01]);\n    }\n    \n    function func_070A(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x073b;\n            var var2 = arg1;\n            return func_070A(var2);\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_0742(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x075d;\n            var var3 = arg1;\n            var2 = func_070A(var3);\n            var0 = var2;\n            var2 = 0x076b;\n            var3 = arg1 + 0x20;\n            var2 = func_070A(var3);\n            arg0 = var2;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var temp0 = var1;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_0774(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var3 = 0x0791;\n            var var4 = arg1;\n            var3 = func_070A(var4);\n            var0 = var3;\n            var3 = 0x079f;\n            var4 = arg1 + 0x20;\n            var3 = func_070A(var4);\n            arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else {\n            var temp0 = var2;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_07AF(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x07ca;\n            var var3 = arg1;\n            var2 = func_070A(var3);\n            r0 = var2;\n            arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n            return r0, arg0;\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_07D8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) { return memory[arg1:arg1 + 0x20]; }\n    \n        var temp0 = var0;\n        revert(memory[temp0:temp0 + temp0]);\n    }\n    \n    function func_07F0(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        return temp0 + 0x20;\n    }\n    \n    function func_0804(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg2;\n        memory[temp1:temp1 + 0x20] = temp0 & arg0;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0 & arg1;\n        return temp1 + 0x40;\n    }\n    \n    function func_081E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = !!arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_0829(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = var0;\n    \n        if (var3 >= var2) {\n        label_0855:\n        \n            if (var3 <= var2) { return (var2 + 0x1f & ~0x1f) + arg1 + 0x40; }\n        \n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = var0;\n            return (temp2 + 0x1f & ~0x1f) + temp3 + 0x40;\n        } else {\n        label_0842:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_0855; }\n            else { goto label_0842; }\n        }\n    }\n    \n    function func_087C(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x23;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x657373 << 0xe8;\n        return temp0 + 0x80;\n    }\n    \n    function func_08BF(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x26;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x646472657373 << 0xd0;\n        return temp0 + 0x80;\n    }\n    \n    function func_0905(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x22;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x7373 << 0xf0;\n        return temp0 + 0x80;\n    }\n    \n    function func_0947(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x1d;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000;\n        return temp0 + 0x60;\n    }\n    \n    function func_097E(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x26;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x616c616e6365 << 0xd0;\n        return temp0 + 0x80;\n    }\n    \n    function func_09C4(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x20;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        return temp0 + 0x60;\n    }\n    \n    function func_09F9(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x25;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x6472657373 << 0xd8;\n        return temp0 + 0x80;\n    }\n    \n    function func_0A3E(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x24;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x72657373 << 0xe0;\n        return temp0 + 0x80;\n    }\n    \n    function func_0A82(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_0A8B(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0 & 0xff;\n        return temp0 + 0x20;\n    }\n    \n    function func_0A99(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= ~arg0) { return arg1 + arg0; }\n    \n        var var1 = 0x0aac;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0AB1(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 >= arg0) { return arg1 - arg0; }\n    \n        var var1 = 0x0ac3;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0AC8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 & 0xff;\n        var var2 = arg0 & 0xff;\n    \n        if (var1 >= var2) { return var1 - var2; }\n    \n        var var3 = 0x0ae2;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0AEB(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 / 0x02;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 != (var0 < 0x20)) { goto label_0B20; }\n            else { goto label_0B0B; }\n        } else if (var1 != (var0 < 0x20)) {\n        label_0B20:\n            return var0;\n        } else {\n        label_0B0B:\n            memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x70a08231 > var0) {\n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = 0x00dc;\n                var1 = func_01D5();\n            \n            label_00DC:\n                var temp0 = var1;\n                var1 = 0x00e9;\n                var var2 = temp0;\n                var var3 = memory[0x40:0x60];\n                var1 = func_0829(var2, var3);\n            \n            label_00E9:\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + var1 - temp1];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = 0x0105;\n                var2 = 0x0100;\n                var3 = msg.data.length;\n                var var4 = 0x04;\n                var2, var3 = func_07AF(var3, var4);\n                var1 = func_0100(var2, var3);\n            \n            label_0105:\n                var temp2 = var1;\n                var1 = 0x00e9;\n                var2 = temp2;\n                var3 = memory[0x40:0x60];\n                var1 = func_081E(var2, var3);\n                goto label_00E9;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = 0x011a;\n                var1 = func_0289();\n            \n            label_011A:\n                var temp3 = var1;\n                var1 = 0x00e9;\n                var2 = temp3;\n                var3 = memory[0x40:0x60];\n                var1 = func_0A82(var2, var3);\n                goto label_00E9;\n            } else if (var0 == 0x183274e3) {\n                // Dispatch table entry for 0x183274e3 (unknown)\n                var1 = 0x013a;\n                var2 = 0x0135;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = func_07AF(var3, var4);\n                func_0135(var2, var3);\n                stop();\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x0105;\n                var2 = 0x014a;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4 = func_0774(var3, var4);\n                var1 = func_014A(var2, var3, var4);\n                goto label_0105;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = 0x0157;\n                var1 = func_0306();\n                var temp4 = var1;\n                var1 = 0x00e9;\n                var2 = temp4;\n                var3 = memory[0x40:0x60];\n                var1 = func_0A8B(var2, var3);\n                goto label_00E9;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0x95d89b41 > var0) {\n            if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x011a;\n                var2 = 0x0172;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = balanceOf(var3, var4);\n                memory[0x00:0x20] = var2 & (0x01 << 0xa0) - 0x01;\n                memory[0x20:0x40] = 0x00;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = 0x013a;\n                var2 = 0x0332;\n                func_0679();\n                var2 = 0x033c;\n                var3 = 0x00;\n                func_06B8(var3);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = 0x0187;\n                var1 = func_033E();\n                var temp5 = var1;\n                var1 = 0x00e9;\n                var2 = temp5;\n                var3 = memory[0x40:0x60];\n                var1 = func_07F0(var2, var3);\n                goto label_00E9;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = 0x00dc;\n            var1 = symbol();\n            goto label_00DC;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x0105;\n            var2 = 0x01aa;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = func_07AF(var3, var4);\n            var4 = 0x00;\n            var var5 = var4;\n            var var6 = 0x0367;\n            var6 = func_03E2();\n            var temp6 = var6;\n            var5 = temp6;\n            var6 = 0x027f;\n            var var7 = var5;\n            var var8 = var2;\n            var var9 = var3;\n            func_04E4(var7, var8, var9);\n            var1 = 0x01;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x011a;\n            var2 = 0x01bd;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = func_0742(var3, var4);\n            var1 = func_01BD(var2, var3);\n            goto label_011A;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = 0x013a;\n            var2 = 0x01d0;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2 = balanceOf(var3, var4);\n            func_01D0(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0100(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0272;\n        var2 = func_03E2();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x027f;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_03E6(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_0135(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x06] & (0x01 << 0xa0) - 0x01) {\n            var var1 = 0x02ba;\n            var var2 = 0x64;\n            var var3 = 0x0a;\n            var1 = func_0AC8(var2, var3);\n        \n        label_02BA:\n            memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = arg1;\n            return;\n        } else {\n            var1 = 0x0a;\n            var temp0 = var1;\n            var1 = 0x02ba;\n            var2 = temp0;\n            var3 = 0x0a;\n            var1 = func_0AC8(var2, var3);\n            goto label_02BA;\n        }\n    }\n    \n    function func_014A(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02e3;\n        var2 = func_03E2();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x02f0;\n        var var3 = arg0;\n        var var4 = var1;\n        var var5 = arg2;\n        func_049A(var3, var4, var5);\n        var2 = 0x02fb;\n        var3 = arg0;\n        var4 = arg1;\n        var5 = arg2;\n        func_04E4(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_01BD(var arg0, var arg1) returns (var r0) {\n        r0 = func_0374(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_01D0(var arg0) {\n        var var0 = 0x03a7;\n        func_0679();\n    \n        if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var0 = 0x03df;\n            var var1 = arg0;\n            func_06B8(var1);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x03cd;\n            var1 = temp0 + 0x04;\n            var0 = func_08BF(var1);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var0 - temp1]);\n        }\n    }\n    \n    function func_01D5() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x04;\n        var var2 = 0x01e4;\n        var var3 = storage[var1];\n        var2 = func_0AEB(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0210;\n        var6 = func_0AEB(var7);\n    \n        if (!var6) {\n        label_025D:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_0254; }\n        \n        label_0240:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0240; }\n        \n        label_0254:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_025D;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp10 + 0x20;\n            goto label_025D;\n        }\n    }\n    \n    function func_0289() returns (var r0) { return storage[0x03]; }\n    \n    function func_0306() returns (var r0) { return 0x12; }\n    \n    function func_033E() returns (var r0) { return storage[0x07] & (0x01 << 0xa0) - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x05;\n        var var2 = 0x01e4;\n        var var3 = storage[var1];\n        var2 = func_0AEB(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0210;\n        var6 = func_0AEB(var7);\n    \n        if (!var6) {\n        label_025D:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_0254; }\n        \n        label_0240:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0240; }\n        \n        label_0254:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_025D;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp10 + 0x20;\n            goto label_025D;\n        }\n    }\n    \n    function func_0374(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_03E2() returns (var r0) { return msg.sender; }\n    \n    function func_03E6(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd << 0xe5;\n            var0 = 0x03cd;\n            var1 = temp5 + 0x04;\n            var0 = func_0A3E(var1);\n            goto label_03CD;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var var1 = arg0 & temp0;\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg1 & temp0;\n            var var0 = arg1 & temp0;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = arg2;\n            var var2 = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n            var var3 = 0x048d;\n            var var4 = arg2;\n            var var5 = memory[0x40:0x60];\n            var3 = func_0A82(var4, var5);\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + var3 - temp2], [stack[-2], stack[-3], stack[-4]]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp3 + 0x04;\n            var0 = 0x03cd;\n            var0 = func_0905(var1);\n        \n        label_03CD:\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + var0 - temp4]);\n        }\n    }\n    \n    function func_049A(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x04a6;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_0374(var2, var3);\n        var0 = var1;\n    \n        if (var0 == ~0x00) {\n        label_04DE:\n            return;\n        } else if (var0 >= arg2) {\n            var1 = 0x04de;\n            var2 = arg0;\n            var3 = arg1;\n            var var4 = var0 - arg2;\n            func_03E6(var2, var3, var4);\n            goto label_04DE;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            var2 = temp0 + 0x04;\n            var1 = 0x03cd;\n            var1 = func_0947(var2);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        }\n    }\n    \n    function func_04E4(var arg0, var arg1, var arg2) {\n        if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var var0 = 0x0514;\n            var var1 = arg2;\n            var var2 = var1;\n            var0 = func_0AB1(var1, var2);\n            var1 = var0;\n            var0 = 0x051f;\n            var2 = 0x64;\n            var0 = func_0A99(var1, var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x03294a3b << 0xe3;\n            var1 = storage[0x01] & (0x01 << 0xa0) - 0x01;\n            var2 = 0x194a51d8;\n            var var3 = 0x0551;\n            var var4 = arg0;\n            var var5 = arg1;\n            var var6 = temp0 + 0x04;\n            var3 = func_0804(var4, var5, var6);\n            var4 = 0x20;\n            var5 = memory[0x40:0x60];\n            var6 = var3 - var5;\n            var var7 = var5;\n            var var8 = 0x00;\n            var var9 = var1;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp1;\n        \n            if (!var4) {\n                var temp2 = memory[0x40:0x60];\n                var temp3 = returndata.length;\n                memory[0x40:0x60] = temp2 + (temp3 + 0x1f & ~0x1f);\n                var1 = 0x05a3;\n                var3 = temp2;\n                var2 = var3 + temp3;\n                var1 = func_07D8(var2, var3);\n                var temp4 = var0;\n                var0 = 0x05ad;\n                var temp5 = var1;\n                var1 = temp4;\n                var2 = temp5;\n                var0 = func_0AB1(var1, var2);\n            \n                if (arg1 & (0x01 << 0xa0) - 0x01) {\n                    memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var0 = storage[keccak256(memory[0x00:0x40])];\n                \n                    if (var0 >= arg2) {\n                        var temp6 = (0x01 << 0xa0) - 0x01;\n                        var2 = arg0 & temp6;\n                        memory[0x00:0x20] = var2;\n                        memory[0x20:0x40] = 0x00;\n                        var temp7 = arg2;\n                        storage[keccak256(memory[0x00:0x40])] = var0 - temp7;\n                        memory[0x00:0x20] = arg1 & temp6;\n                        var temp8 = keccak256(memory[0x00:0x40]);\n                        storage[temp8] = temp7 + storage[temp8];\n                        var1 = arg1 & temp6;\n                        var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                        var4 = 0x066b;\n                        var5 = temp7;\n                        var6 = memory[0x40:0x60];\n                        var4 = func_0A82(var5, var6);\n                        var temp9 = memory[0x40:0x60];\n                        log(memory[temp9:temp9 + var4 - temp9], [stack[-2], stack[-3], stack[-4]]);\n                        return;\n                    } else {\n                        var temp10 = memory[0x40:0x60];\n                        memory[temp10:temp10 + 0x20] = 0x461bcd << 0xe5;\n                        var1 = 0x03cd;\n                        var2 = temp10 + 0x04;\n                        var1 = func_097E(var2);\n                    \n                    label_03CD:\n                        var temp11 = memory[0x40:0x60];\n                        revert(memory[temp11:temp11 + var1 - temp11]);\n                    }\n                } else {\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = 0x461bcd << 0xe5;\n                    var1 = temp12 + 0x04;\n                    var0 = 0x03cd;\n                    var0 = func_087C(var1);\n                    goto label_03CD;\n                }\n            } else {\n                var temp13 = returndata.length;\n                memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = 0x461bcd << 0xe5;\n            var1 = temp14 + 0x04;\n            var0 = 0x03cd;\n            var0 = func_09F9(var1);\n            goto label_03CD;\n        }\n    }\n    \n    function func_0679() {\n        var var0 = 0x0681;\n        var0 = func_03E2();\n        var0 = var0 & (0x01 << 0xa0) - 0x01;\n        var var1 = 0x0692;\n        var1 = func_033E();\n    \n        if (var1 & (0x01 << 0xa0) - 0x01 == var0) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n        var0 = 0x03cd;\n        var1 = temp0 + 0x04;\n        var0 = func_09C4(var1);\n        var temp1 = memory[0x40:0x60];\n        revert(memory[temp1:temp1 + var0 - temp1]);\n    }\n    \n    function func_06B8(var arg0) {\n        var temp0 = storage[0x07];\n        var temp1 = (0x01 << 0xa0) - 0x01;\n        var temp2 = temp1 & arg0;\n        storage[0x07] = temp2 | (temp0 & ~((0x01 << 0xa0) - 0x01));\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x07] & (0x01 << 0xa0) - 0x01, stack[-1] & (0x01 << 0xa0) - 0x01]);\n    }\n    \n    function func_070A(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x073b;\n            var var2 = arg1;\n            return func_070A(var2);\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_0742(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x075d;\n            var var3 = arg1;\n            var2 = func_070A(var3);\n            var0 = var2;\n            var2 = 0x076b;\n            var3 = arg1 + 0x20;\n            var2 = func_070A(var3);\n            arg0 = var2;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var temp0 = var1;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_0774(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var3 = 0x0791;\n            var var4 = arg1;\n            var3 = func_070A(var4);\n            var0 = var3;\n            var3 = 0x079f;\n            var4 = arg1 + 0x20;\n            var3 = func_070A(var4);\n            arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else {\n            var temp0 = var2;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_07AF(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x07ca;\n            var var3 = arg1;\n            var2 = func_070A(var3);\n            r0 = var2;\n            arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n            return r0, arg0;\n        } else {\n            var temp0 = var0;\n            revert(memory[temp0:temp0 + temp0]);\n        }\n    }\n    \n    function func_07D8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) { return memory[arg1:arg1 + 0x20]; }\n    \n        var temp0 = var0;\n        revert(memory[temp0:temp0 + temp0]);\n    }\n    \n    function func_07F0(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        return temp0 + 0x20;\n    }\n    \n    function func_0804(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        var temp1 = arg2;\n        memory[temp1:temp1 + 0x20] = temp0 & arg0;\n        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0 & arg1;\n        return temp1 + 0x40;\n    }\n    \n    function func_081E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = !!arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_0829(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = var0;\n    \n        if (var3 >= var2) {\n        label_0855:\n        \n            if (var3 <= var2) { return (var2 + 0x1f & ~0x1f) + arg1 + 0x40; }\n        \n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = var0;\n            return (temp2 + 0x1f & ~0x1f) + temp3 + 0x40;\n        } else {\n        label_0842:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_0855; }\n            else { goto label_0842; }\n        }\n    }\n    \n    function func_087C(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x23;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x657373 << 0xe8;\n        return temp0 + 0x80;\n    }\n    \n    function func_08BF(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x26;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x646472657373 << 0xd0;\n        return temp0 + 0x80;\n    }\n    \n    function func_0905(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x22;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x7373 << 0xf0;\n        return temp0 + 0x80;\n    }\n    \n    function func_0947(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x1d;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000;\n        return temp0 + 0x60;\n    }\n    \n    function func_097E(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x26;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x616c616e6365 << 0xd0;\n        return temp0 + 0x80;\n    }\n    \n    function func_09C4(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x20;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n        return temp0 + 0x60;\n    }\n    \n    function func_09F9(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x25;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x6472657373 << 0xd8;\n        return temp0 + 0x80;\n    }\n    \n    function func_0A3E(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x20;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x24;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x72657373 << 0xe0;\n        return temp0 + 0x80;\n    }\n    \n    function func_0A82(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_0A8B(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0 & 0xff;\n        return temp0 + 0x20;\n    }\n    \n    function func_0A99(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= ~arg0) { return arg1 + arg0; }\n    \n        var var1 = 0x0aac;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0AB1(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 >= arg0) { return arg1 - arg0; }\n    \n        var var1 = 0x0ac3;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0AC8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 & 0xff;\n        var var2 = arg0 & 0xff;\n    \n        if (var1 >= var2) { return var1 - var2; }\n    \n        var var3 = 0x0ae2;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0AEB(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 / 0x02;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 != (var0 < 0x20)) { goto label_0B20; }\n            else { goto label_0B0B; }\n        } else if (var1 != (var0 < 0x20)) {\n        label_0B20:\n            return var0;\n        } else {\n        label_0B0B:\n            memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 29.559009313583374,
	"usage": {
		"completion_tokens": 580,
		"prompt_tokens": 10214,
		"total_tokens": 10794
	}
}