{
	"address": "0xf4c27b8b002389864ac214cb13bfeef4cc5c4e8d",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity code corresponding to the provided EVM Bytecode is as follows:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) public tokens;\n    address public feeCollector;\n    address public signer;\n    address public owner;\n    bool public paused = false;\n    uint256 public makeFee = 0x06;\n    uint256 public takeFee;\n    uint256 public MAX_FEE = 0x1388;\n    uint256 public FEE_MUL;\n    uint256 public PRICE_MUL = 0x0de0b6b3a7640000;\n    uint256 public expireDelay = 0x0258;\n    uint256 public MAX_EXPIRE_DELAY = 0x0258;\n    uint256 public ETH_SIGN_TYPED_DATA_ARGHASH = 0x3da4a05d8449a7bc291302cce8a490cf367b98ec37200076c3f13f1f2308fd74;\n    bytes32[] public filled;\n    bytes32[] public trades;\n    bytes32[] public packs;\n    bytes32[] public coeffs;\n\n    function BUY() public pure returns (bool) {\n        return true;\n    }\n\n    function SELL() public pure returns (bool) {\n        return false;\n    }\n\n    function unpause() public {\n        require(msg.sender == owner);\n        paused = false;\n    }\n\n    function pause() public {\n        require(msg.sender == owner);\n        paused = true;\n    }\n\n    function setMakeFee(uint256 _makeFee) public {\n        require(msg.sender == owner);\n        require(_makeFee <= MAX_FEE);\n        makeFee = _makeFee;\n    }\n\n    function setTakeFee(uint256 _takeFee) public {\n        require(msg.sender == owner);\n        require(_takeFee <= MAX_FEE);\n        takeFee = _takeFee;\n    }\n\n    function setFeeCollector(address _feeCollector) public {\n        require(msg.sender == owner);\n        feeCollector = _feeCollector;\n    }\n\n    function setSigner(address _signer) public {\n        require(msg.sender == owner);\n        signer = _signer;\n    }\n\n    function setExpireDelay(uint256 _expireDelay) public {\n        require(msg.sender == owner);\n        require(_expireDelay <= MAX_EXPIRE_DELAY);\n        expireDelay = _expireDelay;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == owner);\n        if (newOwner != address(0)) {\n            owner = newOwner;\n        }\n    }\n\n    function depositEther() public payable {\n        require(msg.value > 0);\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdrawEther(uint256 amount) public {\n        require(balances[msg.sender] >= amount);\n        balances[msg.sender] -= amount;\n        msg.sender.transfer(amount);\n    }\n\n    function depositToken(address token, uint256 amount) public {\n        require(tokens[msg.sender][token] >= amount);\n        tokens[msg.sender][token] -= amount;\n    }\n\n    function withdrawToken(address token, uint256 amount) public {\n        require(tokens[msg.sender][token] >= amount);\n        tokens[msg.sender][token] -= amount;\n    }\n\n    function trade(uint256[] memory tradeValues, address[] memory tradeAddresses, bytes32[] memory tradeBytes32s) public {\n        // Implementation depends on business logic\n    }\n\n    function cancel(uint8 v, address r, uint256 s, uint256 amountSell, uint256 nonce, uint256 expireTimestamp, uint256 amountBuy, bytes32 hash, bytes32 orderHash) public {\n        // Implementation depends on business logic\n    }\n}\n```\n\nPlease note that some parts of the EVM code are not included in the resulting Solidity code due to the complexities of decompiling inline assembly and the lack of information about the specific business logic of the contract. Therefore, some functions only have placeholder comments indicating that the specific implementation depends on the business logic of the contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473201,
	"id": "chatcmpl-8Mv33RcnUFWuk9EJfEvXdbS4HTQS6",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_01C8:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var var1 = storage[keccak256(memory[0x00:0x40])];\n            var var0 = 0x01eb;\n            var var2 = msg.value;\n            var0 = func_0781(var1, var2);\n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            var temp1 = var0;\n            storage[keccak256(memory[0x00:0x40])] = temp1;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = temp0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = msg.value;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = temp1;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x20d6bac8359f33d79581bfd2b0457cb189fda6d90fed287ddc9f2ba3eb124b67]);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x991d8e) {\n                // Dispatch table entry for setMakeFee(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                setMakeFee(var2);\n                stop();\n            } else if (var0 == 0x01ab9806) {\n                // Dispatch table entry for BUY()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = BUY();\n            \n            label_028D:\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var2;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x13d8f3e4) {\n                // Dispatch table entry for trades(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c1;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var var3 = msg.data[0x24:0x44];\n                var2 = trades(var2, var3);\n            \n            label_02C1:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var2;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x154d6e12) {\n                // Dispatch table entry for buyPack(uint8,uint128)\n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                buyPack(var2, var3);\n                stop();\n            } else if (var0 == 0x181aa1fd) {\n                // Dispatch table entry for takeFee()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = takeFee();\n                goto label_028D;\n            } else if (var0 == 0x1f4848ef) {\n                // Dispatch table entry for setTakeFee(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                setTakeFee(var2);\n                stop();\n            } else if (var0 == 0x205730fd) {\n                // Dispatch table entry for SELL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = SELL();\n                goto label_028D;\n            } else if (var0 == 0x20c8651b) {\n                // Dispatch table entry for makeFee()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = makeFee();\n                goto label_028D;\n            } else if (var0 == 0x238ac933) {\n                // Dispatch table entry for signer()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0351;\n                var2 = signer();\n            \n            label_0351:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x26aebfac) {\n                // Dispatch table entry for delPack(uint8,uint128)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                delPack(var2, var3);\n                stop();\n            } else if (var0 == 0x27e235e3) {\n                // Dispatch table entry for balances(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balances(var2);\n                goto label_028D;\n            } else if (var0 == 0x28619814) {\n                // Dispatch table entry for trade(uint256[],address[],bytes32[])\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var temp12 = msg.data[0x04:0x24];\n                var temp13 = msg.data[temp12 + 0x04:temp12 + 0x04 + 0x20];\n                var temp14 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp14 + temp13 * 0x20 + 0x20;\n                memory[temp14:temp14 + 0x20] = temp13;\n                var temp15 = temp13 * 0x20;\n                memory[temp14 + 0x20:temp14 + 0x20 + temp15] = msg.data[temp12 + 0x24:temp12 + 0x24 + temp15];\n                var2 = temp14;\n                var temp16 = msg.data[0x24:0x44] + 0x04;\n                var temp17 = msg.data[temp16:temp16 + 0x20];\n                var temp18 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp18 + temp17 * 0x20 + 0x20;\n                memory[temp18:temp18 + 0x20] = temp17;\n                var temp19 = temp17 * 0x20;\n                memory[temp18 + 0x20:temp18 + 0x20 + temp19] = msg.data[temp16 + 0x20:temp16 + 0x20 + temp19];\n                var3 = temp18;\n                var temp20 = msg.data[0x44:0x64] + 0x04;\n                var temp21 = msg.data[temp20:temp20 + 0x20];\n                var temp22 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp22 + temp21 * 0x20 + 0x20;\n                memory[temp22:temp22 + 0x20] = temp21;\n                var temp23 = temp21 * 0x20;\n                memory[temp22 + 0x20:temp22 + 0x20 + temp23] = msg.data[temp20 + 0x20:temp20 + 0x20 + temp23];\n                var var4 = temp22;\n                trade(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x2a77b4af) {\n                // Dispatch table entry for FEE_MUL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = FEE_MUL();\n                goto label_028D;\n            } else if (var0 == 0x338b5dea) {\n                // Dispatch table entry for depositToken(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                depositToken(var2, var3);\n                stop();\n            } else if (var0 == 0x3bed33ce) {\n                // Dispatch table entry for withdrawEther(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                withdrawEther(var2);\n                stop();\n            } else if (var0 == 0x3f4ba83a) {\n                // Dispatch table entry for unpause()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                unpause();\n                stop();\n            } else if (var0 == 0x44263f66) {\n                // Dispatch table entry for cancel(uint8,address,uint256,uint256,uint256,uint256,uint256,bytes32,bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var4 = msg.data[0x44:0x64];\n                var var5 = msg.data[0x64:0x84];\n                var var6 = msg.data[0x84:0xa4];\n                var var7 = msg.data[0xa4:0xc4];\n                var var8 = msg.data[0xc4:0xe4];\n                var var9 = msg.data[0xe4:0x0104];\n                var var10 = msg.data[0x0104:0x0124];\n                cancel(var2, var3, var4, var5, var6, var7, var8, var9, var10);\n                stop();\n            } else if (var0 == 0x4edefd31) {\n                // Dispatch table entry for setExpireDelay(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                setExpireDelay(var2);\n                stop();\n            } else if (var0 == 0x508493bc) {\n                // Dispatch table entry for tokens(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var temp24 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp24 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp24;\n                var2 = tokens(var2, var3);\n                goto label_028D;\n            } else if (var0 == 0x5c975abb) {\n                // Dispatch table entry for paused()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c1;\n                var2 = paused();\n                goto label_02C1;\n            } else if (var0 == 0x5e885c63) {\n                // Dispatch table entry for getPack(uint8,uint128)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                var1 = getPack(var2, var3);\n                goto label_028D;\n            } else if (var0 == 0x6c19e783) {\n                // Dispatch table entry for setSigner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setSigner(var2);\n                stop();\n            } else if (var0 == 0x79cad619) {\n                // Dispatch table entry for filled(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var2 = filled(var2, var3);\n                goto label_028D;\n            } else if (var0 == 0x8456cb59) {\n                // Dispatch table entry for pause()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                pause();\n                stop();\n            } else if (var0 == 0x895678a2) {\n                // Dispatch table entry for expireDelay()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = expireDelay();\n                goto label_028D;\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0351;\n                var2 = owner();\n                goto label_0351;\n            } else if (var0 == 0x98ea5fca) {\n                // Dispatch table entry for depositEther()\n                var1 = 0x0278;\n                depositEther();\n                stop();\n            } else if (var0 == 0x9e281a98) {\n                // Dispatch table entry for withdrawToken(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                withdrawToken(var2, var3);\n                stop();\n            } else if (var0 == 0xa42dce80) {\n                // Dispatch table entry for setFeeCollector(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setFeeCollector(var2);\n                stop();\n            } else if (var0 == 0xb84c1392) {\n                // Dispatch table entry for packs(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = msg.data[0x04:0x24];\n                var2 = packs(var2);\n                goto label_028D;\n            } else if (var0 == 0xbc063e1a) {\n                // Dispatch table entry for MAX_FEE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = MAX_FEE();\n                goto label_028D;\n            } else if (var0 == 0xc3f186d3) {\n                // Dispatch table entry for coeffs(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0697;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2, var3 = coeffs(var2);\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var2 & 0xff;\n                memory[temp25 + 0x20:temp25 + 0x20 + 0x20] = var3 & 0x02 ** 0x80 - 0x01;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x40) - temp26];\n            } else if (var0 == 0xc415b95c) {\n                // Dispatch table entry for feeCollector()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0351;\n                var2 = feeCollector();\n                goto label_0351;\n            } else if (var0 == 0xd3d77f98) {\n                // Dispatch table entry for setCoeff(uint8,uint128,uint8,bytes32,bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                var4 = msg.data[0x44:0x64] & 0xff;\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                setCoeff(var2, var3, var4, var5, var6);\n                stop();\n            } else if (var0 == 0xe2595235) {\n                // Dispatch table entry for addPack(uint8,uint128,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                var4 = msg.data[0x44:0x64];\n                addPack(var2, var3, var4);\n                stop();\n            } else if (var0 == 0xeacf7d8a) {\n                // Dispatch table entry for MAX_EXPIRE_DELAY()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = MAX_EXPIRE_DELAY();\n                goto label_028D;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf68e63e3) {\n                // Dispatch table entry for PRICE_MUL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = PRICE_MUL();\n                goto label_028D;\n            } else if (var0 == 0xf797f7b6) {\n                // Dispatch table entry for ETH_SIGN_TYPED_DATA_ARGHASH()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = ETH_SIGN_TYPED_DATA_ARGHASH();\n                goto label_028D;\n            } else { goto label_01C8; }\n        }\n    }\n    \n    function func_0781(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function setMakeFee(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > 0x1388) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        storage[0x04] = temp1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xc51714effcf5a6965cea410eabdd683d0c063bfa70f8addbfe16a7230359e419]);\n    }\n    \n    function BUY() returns (var r0) { return 0x01; }\n    \n    function trades(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function buyPack(var arg0, var arg1) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n        var var1 = var0;\n    \n        if (block.timestamp < storage[keccak256(memory[var1:var1 + 0x40])] / 0x0100 & 0x02 ** 0x80 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0864;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_15DB(var3, var4);\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x0c;\n        var0 = var2;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (var1 != msg.value) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x089e;\n        var3 = msg.sender;\n        var4 = arg0;\n        var var5 = block.timestamp + arg1;\n        var var6 = var1;\n        func_15F5(var3, var4, var5, var6);\n        memory[0x00:0x20] = storage[0x03] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var2 = 0x08c3;\n        var4 = msg.value;\n        var2 = func_0781(var3, var4);\n        memory[0x00:0x20] = storage[0x03] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n    }\n    \n    function takeFee() returns (var r0) { return storage[0x05]; }\n    \n    function setTakeFee(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > 0x1388) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        storage[0x05] = temp1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xade97beaa63b5665cd19e65b7f8442edacb3e0f0d4159c8377ed8c8779338154]);\n    }\n    \n    function SELL() returns (var r0) { return 0x00; }\n    \n    function makeFee() returns (var r0) { return storage[0x04]; }\n    \n    function signer() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function delPack(var arg0, var arg1) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x098f;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_15DB(var2, var3);\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n    }\n    \n    function balances(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function trade(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (storage[var3] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = memory[arg1:arg1 + 0x20] - 0x01;\n    \n        if (memory[arg0:arg0 + 0x20] != var0 * 0x06 + 0x04) { revert(memory[0x00:0x00]); }\n    \n        if (memory[arg2:arg2 + 0x20] != var0 * 0x02 + 0x02) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x01;\n        var var5 = arg0;\n        var var6 = 0x00;\n    \n        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n    \n        var4 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] == var4;\n    \n        if (var4) {\n        label_0A3B:\n        \n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n            var4 = 0x0a65;\n            var5 = arg0;\n            var6 = 0x01;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            func_0A56(var5, var6);\n            var4 = arg0;\n            var5 = 0x03;\n        \n            if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n        \n            if (block.timestamp > memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var4 = address(this);\n            var5 = msg.sender;\n            var6 = arg0;\n            var var7 = 0x00;\n        \n            if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n        \n            var6 = memory[var7 * 0x20 + var6 + 0x20:var7 * 0x20 + var6 + 0x20 + 0x20];\n            var7 = arg1;\n            var var8 = 0x00;\n        \n            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n        \n            var7 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n            var8 = arg0;\n            var var9 = 0x01;\n        \n            if (var9 >= memory[var8:var8 + 0x20]) { assert(); }\n        \n            var8 = memory[var9 * 0x20 + var8 + 0x20:var9 * 0x20 + var8 + 0x20 + 0x20];\n            var9 = arg0;\n            var var10 = 0x03;\n        \n            if (var10 >= memory[var9:var9 + 0x20]) { assert(); }\n        \n            var temp0 = memory[var10 * 0x20 + var9 + 0x20:var10 * 0x20 + var9 + 0x20 + 0x20];\n            var temp1 = memory[0x40:0x60];\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[temp1:temp1 + 0x20] = (temp2 & var4) * 0x01000000000000000000000000;\n            memory[temp1 + 0x14:temp1 + 0x14 + 0x20] = (temp2 & var5) * 0x01000000000000000000000000;\n            memory[temp1 + 0x28:temp1 + 0x28 + 0x20] = (var6 & 0xff) * 0x02 ** 0xf8;\n            memory[temp1 + 0x29:temp1 + 0x29 + 0x20] = (temp2 & var7) * 0x01000000000000000000000000;\n            memory[temp1 + 0x3d:temp1 + 0x3d + 0x20] = var8;\n            memory[temp1 + 0x5d:temp1 + 0x5d + 0x20] = temp0;\n            var temp3 = memory[0x40:0x60];\n            var1 = keccak256(memory[temp3:temp3 + (temp1 + 0x7d) - temp3]);\n            var3 = 0x00;\n        \n            if (var3 >= var0) {\n                var4 = 0x0bce;\n                var5 = var1;\n                var6 = arg0;\n                var7 = arg2;\n                func_1996(var5, var6, var7);\n                var4 = 0x0bd8;\n                var5 = arg0;\n                var6 = arg1;\n                func_1A65(var5, var6);\n                return;\n            } else {\n                var4 = 0x0b5f;\n                var5 = var3;\n                var6 = arg0;\n                func_173C(var5, var6);\n                var4 = 0x0b6b;\n                var5 = var3;\n                var6 = arg0;\n                var7 = arg1;\n                var8 = arg2;\n                var4 = func_176C(var5, var6, var7, var8);\n                var temp4 = var4;\n                var2 = temp4;\n                var4 = var1;\n                var5 = var2;\n                var6 = arg0;\n                var7 = var3 * 0x06 + 0x09;\n            \n                if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n            \n                var temp5 = memory[var7 * 0x20 + var6 + 0x20:var7 * 0x20 + var6 + 0x20 + 0x20];\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var4;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var5;\n                memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = temp5;\n                var temp7 = memory[0x40:0x60];\n                var1 = keccak256(memory[temp7:temp7 + (temp6 + 0x60) - temp7]);\n                var4 = 0x0bbb;\n                var5 = var3;\n                var6 = arg0;\n                var7 = arg1;\n                var8 = 0x1991;\n                var9 = var6;\n                var10 = 0x00;\n            \n                if (var10 >= memory[var9:var9 + 0x20]) { assert(); }\n            \n                var9 = memory[var10 * 0x20 + var9 + 0x20:var10 * 0x20 + var9 + 0x20 + 0x20];\n                var10 = var7;\n                var var11 = 0x00;\n            \n                if (var11 >= memory[var10:var10 + 0x20]) { assert(); }\n            \n                var10 = memory[var11 * 0x20 + var10 + 0x20:var11 * 0x20 + var10 + 0x20 + 0x20];\n                var11 = var7;\n                var var12 = var5 + 0x01;\n            \n                if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n            \n                var11 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n                var12 = var6;\n                var var13 = var5 * 0x06 + 0x04;\n            \n                if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n            \n                var12 = memory[var13 * 0x20 + var12 + 0x20:var13 * 0x20 + var12 + 0x20 + 0x20];\n                var13 = var6;\n                var var14 = var5 * 0x06 + 0x05;\n            \n                if (var14 >= memory[var13:var13 + 0x20]) { assert(); }\n            \n                var13 = memory[var14 * 0x20 + var13 + 0x20:var14 * 0x20 + var13 + 0x20 + 0x20];\n                var14 = var6;\n                var var15 = var5 * 0x06 + 0x06;\n            \n                if (var15 >= memory[var14:var14 + 0x20]) { assert(); }\n            \n                var14 = memory[var15 * 0x20 + var14 + 0x20:var15 * 0x20 + var14 + 0x20 + 0x20];\n                var15 = var6;\n                var var16 = var5 * 0x06 + 0x09;\n            \n                if (var16 >= memory[var15:var15 + 0x20]) { assert(); }\n            \n                var15 = memory[var16 * 0x20 + var15 + 0x20:var16 * 0x20 + var15 + 0x20 + 0x20];\n                var16 = 0x00;\n                var var17 = var16;\n                var var18 = 0x00;\n                var var19 = var18;\n                var var20 = 0x1d0a;\n                var var21 = var9;\n                var var22 = var10;\n                var var23 = var11;\n                var var24 = var12;\n                var var25 = var13;\n                var var26 = var14;\n                var var27 = var15;\n                var var28 = 0x00;\n                memory[var28:var28 + 0x20] = var23 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x08;\n                var temp8 = keccak256(memory[var28:var28 + 0x40]);\n                memory[var28:var28 + 0x20] = var24;\n                memory[0x20:0x40] = temp8;\n                var var29 = var28;\n                var var30 = var29;\n                var var31 = var30;\n                var var32 = 0x208b;\n                var var34 = storage[keccak256(memory[var31:var31 + 0x40])];\n                var var33 = var26;\n                var32 = func_1B8A(var33, var34);\n                var28 = var32;\n            \n                if (var28 > var27) {\n                    var28 = var27;\n                \n                    if (var21 != 0x01) { goto label_2180; }\n                    else { goto label_20A3; }\n                } else if (var21 != 0x01) {\n                label_2180:\n                    var temp9 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp9 & msg.sender;\n                    memory[0x20:0x40] = 0x07;\n                    var temp10 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = var22 & temp9;\n                    memory[0x20:0x40] = temp10;\n                \n                    if (var28 <= storage[keccak256(memory[0x00:0x40])]) {\n                    label_2257:\n                        var32 = 0x2261;\n                        var33 = var28;\n                        var34 = var25;\n                        var32 = func_2723(var33, var34);\n                    \n                    label_2261:\n                        var30 = var32;\n                    \n                        if (var21 != 0x01) {\n                            memory[0x00:0x20] = var23 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x06;\n                            var32 = 0x22ce;\n                            var33 = storage[keccak256(memory[0x00:0x40])];\n                            var34 = 0x2297;\n                            var var35 = storage[0x04];\n                            var var36 = var23;\n                            var34 = func_2747(var35, var36);\n                        \n                        label_2297:\n                            var35 = 0x00;\n                            var36 = 0x2740;\n                            var var37 = 0x27be;\n                            var var38 = var33;\n                            var var39 = storage[0x01];\n                            var37 = func_27CF(var38, var39);\n                            var36 = func_27BE(var34, var37);\n                            var32 = var36;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = 0x06;\n                            var33 = storage[keccak256(memory[0x00:0x40])];\n                            var32 = 0x229c;\n                            var34 = 0x2297;\n                            var35 = storage[0x05];\n                            var36 = msg.sender;\n                            var34 = func_2747(var35, var36);\n                            goto label_2297;\n                        }\n                    } else {\n                        var temp11 = 0x02 ** 0xa0 - 0x01;\n                        var temp12 = msg.sender;\n                        memory[0x00:0x20] = temp12 & temp11;\n                        memory[0x20:0x40] = 0x07;\n                        var temp13 = keccak256(memory[0x00:0x40]);\n                        var temp14 = var22;\n                        memory[0x00:0x20] = temp14 & temp11;\n                        memory[0x20:0x40] = temp13;\n                        var temp15 = storage[keccak256(memory[0x00:0x40])];\n                        var temp16 = memory[0x40:0x60];\n                        var temp17 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp16:temp16 + 0x20] = temp17 & temp12;\n                        memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = temp17 & temp14;\n                        memory[temp16 + 0x40:temp16 + 0x40 + 0x20] = var28;\n                        memory[temp16 + 0x60:temp16 + 0x60 + 0x20] = temp15;\n                        var temp18 = memory[0x40:0x60];\n                        log(memory[temp18:temp18 + (temp16 + 0x80) - temp18], [0xb6062bc730d991f3ca3c29f9901ce89c12b5689a273411b114f16c01ca816807]);\n                        var temp19 = 0x02 ** 0xa0 - 0x01;\n                        memory[0x00:0x20] = temp19 & msg.sender;\n                        memory[0x20:0x40] = 0x07;\n                        var temp20 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = temp14 & temp19;\n                        memory[0x20:0x40] = temp20;\n                        var28 = storage[keccak256(memory[0x00:0x40])];\n                        var32 = 0x2261;\n                        var33 = var28;\n                        var34 = var25;\n                        var32 = func_2723(var33, var34);\n                        goto label_2261;\n                    }\n                } else {\n                label_20A3:\n                    var temp21 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = var23 & temp21;\n                    memory[0x20:0x40] = 0x07;\n                    var temp22 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = var22 & temp21;\n                    memory[0x20:0x40] = temp22;\n                \n                    if (var28 <= storage[keccak256(memory[0x00:0x40])]) { goto label_2257; }\n                \n                    var temp23 = 0x02 ** 0xa0 - 0x01;\n                    var temp24 = var23;\n                    memory[0x00:0x20] = temp24 & temp23;\n                    memory[0x20:0x40] = 0x07;\n                    var temp25 = keccak256(memory[0x00:0x40]);\n                    var temp26 = var22;\n                    memory[0x00:0x20] = temp26 & temp23;\n                    memory[0x20:0x40] = temp25;\n                    var temp27 = storage[keccak256(memory[0x00:0x40])];\n                    var temp28 = memory[0x40:0x60];\n                    var temp29 = 0x02 ** 0xa0 - 0x01;\n                    memory[temp28:temp28 + 0x20] = temp29 & temp24;\n                    memory[temp28 + 0x20:temp28 + 0x20 + 0x20] = temp29 & temp26;\n                    memory[temp28 + 0x40:temp28 + 0x40 + 0x20] = var28;\n                    memory[temp28 + 0x60:temp28 + 0x60 + 0x20] = temp27;\n                    var temp30 = memory[0x40:0x60];\n                    log(memory[temp30:temp30 + (temp28 + 0x80) - temp30], [0xb6062bc730d991f3ca3c29f9901ce89c12b5689a273411b114f16c01ca816807]);\n                    var temp31 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp24 & temp31;\n                    memory[0x20:0x40] = 0x07;\n                    var temp32 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = temp26 & temp31;\n                    memory[0x20:0x40] = temp32;\n                    var28 = storage[keccak256(memory[0x00:0x40])];\n                    goto label_2257;\n                }\n            }\n        } else {\n            var4 = 0x00;\n            var5 = arg0;\n            var6 = 0x00;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var4 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] == var4;\n            goto label_0A3B;\n        }\n    }\n    \n    function func_0A56(var arg0, var arg1) {\n        arg0 = memory[arg1 * 0x20 + arg0 + 0x20:arg1 * 0x20 + arg0 + 0x20 + 0x20];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = temp1;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n    }\n    \n    function FEE_MUL() returns (var r0) { return storage[0x01]; }\n    \n    function depositToken(var arg0, var arg1) {\n        var var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0x23b872dd;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = arg1;\n        var var2 = temp0 + 0x64;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp3 & msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp3;\n        memory[0x20:0x40] = temp4;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x0ca7;\n        var2 = arg1;\n        var0 = func_0781(var1, var2);\n        var temp5 = msg.sender;\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp6 & temp5;\n        memory[0x20:0x40] = 0x07;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        var temp8 = arg0;\n        memory[0x00:0x20] = temp8 & temp6;\n        memory[0x20:0x40] = temp7;\n        var temp9 = var0;\n        storage[keccak256(memory[0x00:0x40])] = temp9;\n        var temp10 = memory[0x40:0x60];\n        var temp11 = 0x02 ** 0xa0 - 0x01;\n        memory[temp10:temp10 + 0x20] = temp11 & temp5;\n        memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = temp11 & temp8;\n        memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = arg1;\n        memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = temp9;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp10 + 0x80) - temp12], [0xbb01c612a93e37305a5f1f7b8ed63ea61211be444f722915b9dc827c0bdbffcc]);\n    }\n    \n    function withdrawEther(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var var0 = 0x0d52;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_1B8A(var1, var2);\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(temp0).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var temp4 = storage[keccak256(memory[0x00:0x40])];\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = msg.sender;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg0;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp4;\n        var temp8 = memory[0x40:0x60];\n        log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xfd68f27313402be52d2f46b6d391b7b8657000a3062853a4be930f1281072a01]);\n    }\n    \n    function unpause() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x00] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff0000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33]);\n    }\n    \n    function cancel(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        var var0 = arg0 & 0xff == 0x01;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0EB6:\n        \n            if (block.timestamp > arg5 + storage[0x02]) { goto label_0F76; }\n        \n            var0 = 0x0ed9;\n            var var1 = msg.sender;\n            var var2 = arg0;\n            var var3 = arg1;\n            var var4 = arg2;\n            var var5 = arg3;\n            var var6 = arg4;\n            var var7 = arg5;\n            var var8 = arg6;\n            var var9 = arg7;\n            var var10 = arg8;\n            var0 = func_1B9C(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);\n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x08;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg2;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = temp1;\n            var temp3 = arg4;\n            storage[keccak256(memory[0x00:0x40])] = temp3;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = arg0 & 0xff;\n            var temp5 = 0x02 ** 0xa0 - 0x01;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp5 & temp0;\n            memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = temp2;\n            memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = temp5 & arg1;\n            memory[temp4 + 0x80:temp4 + 0x80 + 0x20] = arg3;\n            memory[temp4 + 0xa0:temp4 + 0xa0 + 0x20] = temp3;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp4 + 0xc0) - temp6], [0x2f21c988da7a0be25ef59d2d641cfe9fa04686d1e87d5133500ce90bc31c5b0a]);\n        \n        label_0F76:\n            return;\n        } else if (!(arg0 & 0xff)) { goto label_0EB6; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setExpireDelay(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > 0x0258) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = arg0;\n    }\n    \n    function tokens(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function paused() returns (var r0) { return storage[0x00] / 0x02 ** 0xa0 & 0xff; }\n    \n    function getPack(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0fea;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_15DB(var3, var4);\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setSigner(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0a] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x0a] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function filled(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function pause() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625]);\n    }\n    \n    function expireDelay() returns (var r0) { return storage[0x02]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function depositEther() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var var0 = 0x1124;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0781(var1, var2);\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = var0;\n        storage[keccak256(memory[0x00:0x40])] = temp1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = msg.value;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = temp1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x20d6bac8359f33d79581bfd2b0457cb189fda6d90fed287ddc9f2ba3eb124b67]);\n    }\n    \n    function withdrawToken(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x11cb;\n        var var2 = arg1;\n        var0 = func_1B8A(var1, var2);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3 & temp2;\n        memory[0x20:0x40] = 0x07;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = arg0 & temp2;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = temp5;\n        var1 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = arg1;\n        var2 = temp6 + 0x44;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp7;\n        temp7, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp7) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = 0x02 ** 0xa0 - 0x01;\n        var temp9 = msg.sender;\n        memory[0x00:0x20] = temp9 & temp8;\n        memory[0x20:0x40] = 0x07;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        var temp11 = arg0;\n        memory[0x00:0x20] = temp11 & temp8;\n        memory[0x20:0x40] = temp10;\n        var temp12 = storage[keccak256(memory[0x00:0x40])];\n        var temp13 = memory[0x40:0x60];\n        var temp14 = 0x02 ** 0xa0 - 0x01;\n        memory[temp13:temp13 + 0x20] = temp14 & temp9;\n        memory[temp13 + 0x20:temp13 + 0x20 + 0x20] = temp14 & temp11;\n        memory[temp13 + 0x40:temp13 + 0x40 + 0x20] = arg1;\n        memory[temp13 + 0x60:temp13 + 0x60 + 0x20] = temp12;\n        var temp15 = memory[0x40:0x60];\n        log(memory[temp15:temp15 + (temp13 + 0x80) - temp15], [0xa69fc39b702a6e8195370ae2252cc11b4445837cc4abe15ac39123f2f2d8770d]);\n    }\n    \n    function setFeeCollector(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function packs(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function MAX_FEE() returns (var r0) { return 0x1388; }\n    \n    function coeffs(var arg0) returns (var arg0, var r1) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        arg0 = temp0 & 0xff;\n        r1 = temp0 / 0x0100 & 0x02 ** 0x80 - 0x01;\n        return arg0, r1;\n    }\n    \n    function feeCollector() returns (var r0) { return storage[0x03] & 0x02 ** 0xa0 - 0x01; }\n    \n    function setCoeff(var arg0, var arg1, var arg2, var arg3, var arg4) {\n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & address(this)) * 0x01000000000000000000000000;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (temp1 & msg.sender) * 0x01000000000000000000000000;\n        memory[temp0 + 0x28:temp0 + 0x28 + 0x20] = (arg0 & 0xff) * 0x02 ** 0xf8;\n        memory[temp0 + 0x29:temp0 + 0x29 + 0x20] = (arg1 & 0x02 ** 0x80 - 0x01) * 0x0100000000000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = keccak256(memory[temp2:temp2 + (temp0 + 0x39) - temp2]);\n        var var0 = temp3;\n        var var1 = storage[0x0a] & 0x02 ** 0xa0 - 0x01;\n        var var2 = 0x01;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = 0x00;\n        memory[0x40:0x60] = temp4 + 0x20;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = var0;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = arg2 & 0xff;\n        memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = arg3;\n        memory[temp5 + 0x60:temp5 + 0x60 + 0x20] = arg4;\n        var var3 = temp5 + 0x80;\n        var temp6 = memory[0x40:0x60];\n        var temp7;\n        temp7, memory[temp6 - 0x20:temp6 - 0x20 + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp6:temp6 + var3 - temp6]);\n    \n        if (!temp7) { revert(memory[0x00:0x00]); }\n    \n        if (memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xff >= 0x64) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0x02 ** 0x80 - 0x01 <= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0x02 ** 0x80 - 0x01 > block.timestamp + 0x2e2480) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x14d7;\n        var2 = msg.sender;\n        var3 = arg0;\n        var var4 = arg1;\n        var var5 = 0x00;\n        func_15F5(var2, var3, var4, var5);\n    }\n    \n    function addPack(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xff >= 0x64) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0x02 ** 0x80 - 0x01 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg2 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x1538;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_15DB(var2, var3);\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = arg2;\n    }\n    \n    function MAX_EXPIRE_DELAY() returns (var r0) { return 0x0258; }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { return; }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function PRICE_MUL() returns (var r0) { return 0x0de0b6b3a7640000; }\n    \n    function ETH_SIGN_TYPED_DATA_ARGHASH() returns (var r0) { return 0x3da4a05d8449a7bc291302cce8a490cf367b98ec37200076c3f13f1f2308fd74; }\n    \n    function func_15DB(var arg0, var arg1) returns (var r0) { return (arg0 & 0xff) + (arg1 & 0x02 ** 0x80 - 0x01) * 0x0100; }\n    \n    function func_15F5(var arg0, var arg1, var arg2, var arg3) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        var temp1 = arg1;\n        memory[temp0:temp0 + 0x20] = temp1 & 0xff;\n        var temp2 = arg2;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp2 & 0x02 ** 0x80 - 0x01;\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0b;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (memory[temp0:temp0 + 0x20] & 0xff) | (storage[temp4] & ~0xff);\n        storage[temp4] = (storage[temp4] & ~0xffffffffffffffffffffffffffffffff00) | (memory[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0x02 ** 0x80 - 0x01) * 0x0100;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp1 & 0xff;\n        memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = temp2 & 0x02 ** 0x80 - 0x01;\n        memory[temp5 + 0x60:temp5 + 0x60 + 0x20] = arg3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x80) - temp6], [0x0b9ed8798ce889acd8779436736d269415d869d25c5de987a3e7d9f66f71cac1]);\n    }\n    \n    function func_173C(var arg0, var arg1) {\n        var var0 = storage[0x02];\n        var var1 = arg1;\n        var var2 = arg0 * 0x06 + 0x07;\n    \n        if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n    \n        if (block.timestamp <= memory[var2 * 0x20 + var1 + 0x20:var2 * 0x20 + var1 + 0x20 + 0x20] + var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_176C(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n        var var11 = 0x01;\n        var var12 = arg1;\n        var var13 = 0x00;\n    \n        if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n    \n        if (memory[var13 * 0x20 + var12 + 0x20:var13 * 0x20 + var12 + 0x20 + 0x20] == var11) {\n            var1 = 0x00;\n            var11 = arg2;\n            var12 = arg0 + 0x01;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n        label_17B6:\n            var2 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg2;\n            var12 = 0x00;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var3 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x04;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var4 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x05;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var5 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x06;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var6 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x07;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var7 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x08;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var8 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg3;\n            var12 = arg0 * 0x02 + 0x02;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var9 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg3;\n            var12 = arg0 * 0x02 + 0x03;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var temp0 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var10 = temp0;\n            var11 = 0x18bf;\n            var12 = var2;\n            var13 = var1;\n            var var14 = var3;\n            var var15 = var4;\n            var var16 = var5;\n            var var17 = var6;\n            var var18 = var7;\n            var var19 = var8;\n            var var20 = var9;\n            var var21 = var10;\n            return func_1B9C(var12, var13, var14, var15, var16, var17, var18, var19, var20, var21);\n        } else {\n            var11 = 0x01;\n            var1 = var11;\n            var11 = arg2;\n            var12 = arg0 + 0x01;\n        \n            if (var12 < memory[var11:var11 + 0x20]) { goto label_17B6; }\n            else { assert(); }\n        }\n    }\n    \n    function func_1996(var arg0, var arg1, var arg2) {\n        var var0 = storage[0x0a] & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0x01;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = 0x02;\n    \n        if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n    \n        var3 = memory[var4 * 0x20 + var3 + 0x20:var4 * 0x20 + var3 + 0x20 + 0x20];\n        var4 = arg2;\n        var var5 = 0x00;\n    \n        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n    \n        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n        var5 = arg2;\n        var var6 = 0x01;\n    \n        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n    \n        var temp0 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20];\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x00;\n        memory[0x40:0x60] = temp1 + 0x20;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = var2;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var3 & 0xff;\n        memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = var4;\n        memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = temp0;\n        var2 = temp2 + 0x80;\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3 - 0x20:temp3 - 0x20 + 0x20] = address(var1).call.gas(msg.gas - 0x646e)(memory[temp3:temp3 + var2 - temp3]);\n    \n        if (!temp4) { revert(memory[0x00:0x00]); }\n    \n        if (memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1A65(var arg0, var arg1) {\n        var var0 = 0xee7e85974085b8a74acdea8330a9e8c09680dccea6f6df360491edf22a27cc3b;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        var var3 = 0x01;\n    \n        if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n    \n        var2 = memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20];\n        var3 = arg0;\n        var var4 = 0x00;\n    \n        if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n    \n        var3 = memory[var4 * 0x20 + var3 + 0x20:var4 * 0x20 + var3 + 0x20 + 0x20];\n        var4 = arg1;\n        var var5 = 0x00;\n    \n        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n    \n        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var6 = 0x00;\n        var5 = keccak256(memory[var6:var6 + 0x40]);\n        var var7 = arg1;\n        var var8 = var6;\n    \n        if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n    \n        var temp0 = var6;\n        memory[temp0:temp0 + 0x20] = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = var5;\n        var temp2 = storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = storage[keccak256(memory[0x00:0x40])];\n        var temp4 = memory[0x40:0x60];\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[temp4:temp4 + 0x20] = temp5 & var1;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var2;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = var3;\n        memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = temp5 & var4;\n        memory[temp4 + 0x80:temp4 + 0x80 + 0x20] = temp2;\n        memory[temp4 + 0xa0:temp4 + 0xa0 + 0x20] = temp3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp4 + 0xc0) - temp6], [stack[-9]]);\n    }\n    \n    function func_1B8A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1B9C(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg7 >= 0x03e8) {\n            var var1 = 0x1c56;\n            var var2 = arg1;\n            var var3 = arg2;\n            var var4 = arg3;\n            var var5 = arg4;\n            var var6 = arg5;\n            var var7 = arg6;\n            var1 = func_1FA2(var2, var3, var4, var5, var6, var7);\n            var temp0 = var1;\n            var0 = temp0;\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0x01;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x00;\n            memory[0x40:0x60] = temp1 + 0x20;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var0;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = arg7 - 0x03e8 & 0xff;\n            memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = arg8;\n            memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = arg9;\n            var3 = temp2 + 0x80;\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3 - 0x20:temp3 - 0x20 + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp3:temp3 + var3 - temp3]);\n        \n            if (!temp4) { revert(memory[0x00:0x00]); }\n        \n            if (memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 != var1) { revert(memory[0x00:0x00]); }\n        \n        label_1CE7:\n            return var0;\n        } else {\n            var1 = 0x1bb6;\n            var2 = arg1;\n            var3 = arg2;\n            var4 = arg3;\n            var5 = arg4;\n            var6 = arg5;\n            var7 = arg6;\n            var1 = func_1E0A(var2, var3, var4, var5, var6, var7);\n            var temp5 = var1;\n            var0 = temp5;\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0x01;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x00;\n            memory[0x40:0x60] = temp6 + 0x20;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = var0;\n            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = arg7 & 0xff;\n            memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = arg8;\n            memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = arg9;\n            var3 = temp7 + 0x80;\n            var temp8 = memory[0x40:0x60];\n            var temp9;\n            temp9, memory[temp8 - 0x20:temp8 - 0x20 + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp8:temp8 + var3 - temp8]);\n        \n            if (!temp9) { revert(memory[0x00:0x00]); }\n        \n            if (memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var1) { goto label_1CE7; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_1E0A(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0 & 0xff == 0x01;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_1E2A:\n            var1 = 0x3da4a05d8449a7bc291302cce8a490cf367b98ec37200076c3f13f1f2308fd74;\n            var var2 = address(this);\n        \n            if (arg0 & 0xff == 0x01) {\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                memory[0x40:0x60] = var3 + 0x40;\n                memory[var3:var3 + 0x20] = 0x03;\n                memory[var3 + 0x20:var3 + 0x20 + 0x20] = 0x4255590000000000000000000000000000000000000000000000000000000000;\n                var var4 = arg1;\n                var var5 = arg2;\n                var var6 = arg3;\n                var var7 = arg4;\n                var var8 = arg5;\n                var temp1 = memory[0x40:0x60];\n                var var9 = temp1;\n                memory[var9:var9 + 0x20] = (var2 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                var var10 = var9 + 0x14;\n                var var11 = var3 + 0x20;\n                var var12 = memory[var3:var3 + 0x20];\n                var var13 = var12;\n                var var14 = var10;\n                var var15 = var11;\n            \n                if (var13 < 0x20) {\n                label_1F17:\n                    var temp2 = 0x0100 ** (0x20 - var13) - 0x01;\n                    var temp3 = var14;\n                    memory[temp3:temp3 + 0x20] = (memory[temp3:temp3 + 0x20] & temp2) | (memory[var15:var15 + 0x20] & ~temp2);\n                    var temp4 = var12 + var10;\n                    memory[temp4:temp4 + 0x20] = (var4 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                    memory[temp4 + 0x14:temp4 + 0x14 + 0x20] = var5;\n                    memory[temp4 + 0x34:temp4 + 0x34 + 0x20] = var6;\n                    memory[temp4 + 0x54:temp4 + 0x54 + 0x20] = var7;\n                    memory[temp4 + 0x74:temp4 + 0x74 + 0x20] = var8;\n                    var temp5 = memory[0x40:0x60];\n                    var temp6 = keccak256(memory[temp5:temp5 + (temp4 + 0x94) - temp5]);\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = var1;\n                    memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = temp6;\n                    var temp8 = memory[0x40:0x60];\n                    return keccak256(memory[temp8:temp8 + (temp7 + 0x40) - temp8]);\n                } else {\n                label_1F01:\n                    var temp9 = var15;\n                    var temp10 = var14;\n                    memory[temp10:temp10 + 0x20] = memory[temp9:temp9 + 0x20];\n                    var13 = var13 + ~0x1f;\n                    var14 = temp10 + 0x20;\n                    var15 = temp9 + 0x20;\n                \n                    if (var13 < 0x20) { goto label_1F17; }\n                    else { goto label_1F01; }\n                }\n            } else {\n                var temp11 = memory[0x40:0x60];\n                var3 = temp11;\n                memory[0x40:0x60] = var3 + 0x40;\n                memory[var3:var3 + 0x20] = 0x04;\n                memory[var3 + 0x20:var3 + 0x20 + 0x20] = 0x53454c4c00000000000000000000000000000000000000000000000000000000;\n                var4 = arg1;\n                var5 = arg2;\n                var6 = arg3;\n                var7 = arg4;\n                var8 = arg5;\n                var temp12 = memory[0x40:0x60];\n                var9 = temp12;\n                memory[var9:var9 + 0x20] = (var2 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                var10 = var9 + 0x14;\n                var temp13 = var3;\n                var11 = temp13 + 0x20;\n                var12 = memory[temp13:temp13 + 0x20];\n                var13 = var12;\n                var14 = var10;\n                var15 = var11;\n            \n                if (var13 < 0x20) { goto label_1F17; }\n                else { goto label_1F01; }\n            }\n        } else if (!(arg0 & 0xff)) { goto label_1E2A; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1FA2(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & address(this)) * 0x01000000000000000000000000;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (arg0 & 0xff) * 0x02 ** 0xf8;\n        memory[temp0 + 0x15:temp0 + 0x15 + 0x20] = (temp1 & arg1) * 0x01000000000000000000000000;\n        memory[temp0 + 0x29:temp0 + 0x29 + 0x20] = arg2;\n        memory[temp0 + 0x49:temp0 + 0x49 + 0x20] = arg3;\n        memory[temp0 + 0x69:temp0 + 0x69 + 0x20] = arg4;\n        memory[temp0 + 0x89:temp0 + 0x89 + 0x20] = arg5;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = keccak256(memory[temp2:temp2 + (temp0 + 0xa9) - temp2]);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        memory[temp4 + 0x1c:temp4 + 0x1c + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        return keccak256(memory[temp5:temp5 + (temp4 + 0x3c) - temp5]);\n    }\n    \n    function func_2723(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x2740;\n        var var2 = 0x2732;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_27CF(var3, var4);\n        return func_2732(var2);\n    }\n    \n    function func_2732(var arg0) returns (var r0) {\n        var var0 = 0x0de0b6b3a7640000;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_2747(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0b;\n    \n        if (block.timestamp >= storage[keccak256(memory[var0:var0 + 0x40])] / 0x0100 & 0x02 ** 0x80 - 0x01) { return arg0; }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0b;\n        var var1 = 0x2740;\n        var var2 = 0x27a6;\n        var var3 = arg0;\n        var var4 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n        var2 = func_27CF(var3, var4);\n        var1 = func_27A6(var2);\n        r0 = var1;\n        // Error: Could not resolve jump destination!\n    }\n    \n    function func_27A6(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_27BE(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x27ca;\n        var var1 = storage[0x01];\n        var var2 = arg0;\n        var0 = func_0781(var1, var2);\n        var1 = 0x00;\n        var2 = var1;\n        var var3 = var0;\n        var var4 = arg1;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_27CF(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_01C8:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var var1 = storage[keccak256(memory[0x00:0x40])];\n            var var0 = 0x01eb;\n            var var2 = msg.value;\n            var0 = func_0781(var1, var2);\n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            var temp1 = var0;\n            storage[keccak256(memory[0x00:0x40])] = temp1;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = temp0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = msg.value;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = temp1;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x20d6bac8359f33d79581bfd2b0457cb189fda6d90fed287ddc9f2ba3eb124b67]);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x991d8e) {\n                // Dispatch table entry for setMakeFee(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                setMakeFee(var2);\n                stop();\n            } else if (var0 == 0x01ab9806) {\n                // Dispatch table entry for BUY()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = BUY();\n            \n            label_028D:\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var2;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x13d8f3e4) {\n                // Dispatch table entry for trades(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c1;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var var3 = msg.data[0x24:0x44];\n                var2 = trades(var2, var3);\n            \n            label_02C1:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var2;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x154d6e12) {\n                // Dispatch table entry for buyPack(uint8,uint128)\n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                buyPack(var2, var3);\n                stop();\n            } else if (var0 == 0x181aa1fd) {\n                // Dispatch table entry for takeFee()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = takeFee();\n                goto label_028D;\n            } else if (var0 == 0x1f4848ef) {\n                // Dispatch table entry for setTakeFee(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                setTakeFee(var2);\n                stop();\n            } else if (var0 == 0x205730fd) {\n                // Dispatch table entry for SELL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = SELL();\n                goto label_028D;\n            } else if (var0 == 0x20c8651b) {\n                // Dispatch table entry for makeFee()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = makeFee();\n                goto label_028D;\n            } else if (var0 == 0x238ac933) {\n                // Dispatch table entry for signer()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0351;\n                var2 = signer();\n            \n            label_0351:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x26aebfac) {\n                // Dispatch table entry for delPack(uint8,uint128)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                delPack(var2, var3);\n                stop();\n            } else if (var0 == 0x27e235e3) {\n                // Dispatch table entry for balances(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balances(var2);\n                goto label_028D;\n            } else if (var0 == 0x28619814) {\n                // Dispatch table entry for trade(uint256[],address[],bytes32[])\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var temp12 = msg.data[0x04:0x24];\n                var temp13 = msg.data[temp12 + 0x04:temp12 + 0x04 + 0x20];\n                var temp14 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp14 + temp13 * 0x20 + 0x20;\n                memory[temp14:temp14 + 0x20] = temp13;\n                var temp15 = temp13 * 0x20;\n                memory[temp14 + 0x20:temp14 + 0x20 + temp15] = msg.data[temp12 + 0x24:temp12 + 0x24 + temp15];\n                var2 = temp14;\n                var temp16 = msg.data[0x24:0x44] + 0x04;\n                var temp17 = msg.data[temp16:temp16 + 0x20];\n                var temp18 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp18 + temp17 * 0x20 + 0x20;\n                memory[temp18:temp18 + 0x20] = temp17;\n                var temp19 = temp17 * 0x20;\n                memory[temp18 + 0x20:temp18 + 0x20 + temp19] = msg.data[temp16 + 0x20:temp16 + 0x20 + temp19];\n                var3 = temp18;\n                var temp20 = msg.data[0x44:0x64] + 0x04;\n                var temp21 = msg.data[temp20:temp20 + 0x20];\n                var temp22 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp22 + temp21 * 0x20 + 0x20;\n                memory[temp22:temp22 + 0x20] = temp21;\n                var temp23 = temp21 * 0x20;\n                memory[temp22 + 0x20:temp22 + 0x20 + temp23] = msg.data[temp20 + 0x20:temp20 + 0x20 + temp23];\n                var var4 = temp22;\n                trade(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x2a77b4af) {\n                // Dispatch table entry for FEE_MUL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = FEE_MUL();\n                goto label_028D;\n            } else if (var0 == 0x338b5dea) {\n                // Dispatch table entry for depositToken(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                depositToken(var2, var3);\n                stop();\n            } else if (var0 == 0x3bed33ce) {\n                // Dispatch table entry for withdrawEther(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                withdrawEther(var2);\n                stop();\n            } else if (var0 == 0x3f4ba83a) {\n                // Dispatch table entry for unpause()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                unpause();\n                stop();\n            } else if (var0 == 0x44263f66) {\n                // Dispatch table entry for cancel(uint8,address,uint256,uint256,uint256,uint256,uint256,bytes32,bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var4 = msg.data[0x44:0x64];\n                var var5 = msg.data[0x64:0x84];\n                var var6 = msg.data[0x84:0xa4];\n                var var7 = msg.data[0xa4:0xc4];\n                var var8 = msg.data[0xc4:0xe4];\n                var var9 = msg.data[0xe4:0x0104];\n                var var10 = msg.data[0x0104:0x0124];\n                cancel(var2, var3, var4, var5, var6, var7, var8, var9, var10);\n                stop();\n            } else if (var0 == 0x4edefd31) {\n                // Dispatch table entry for setExpireDelay(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                setExpireDelay(var2);\n                stop();\n            } else if (var0 == 0x508493bc) {\n                // Dispatch table entry for tokens(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var temp24 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp24 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp24;\n                var2 = tokens(var2, var3);\n                goto label_028D;\n            } else if (var0 == 0x5c975abb) {\n                // Dispatch table entry for paused()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c1;\n                var2 = paused();\n                goto label_02C1;\n            } else if (var0 == 0x5e885c63) {\n                // Dispatch table entry for getPack(uint8,uint128)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                var1 = getPack(var2, var3);\n                goto label_028D;\n            } else if (var0 == 0x6c19e783) {\n                // Dispatch table entry for setSigner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setSigner(var2);\n                stop();\n            } else if (var0 == 0x79cad619) {\n                // Dispatch table entry for filled(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var2 = filled(var2, var3);\n                goto label_028D;\n            } else if (var0 == 0x8456cb59) {\n                // Dispatch table entry for pause()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                pause();\n                stop();\n            } else if (var0 == 0x895678a2) {\n                // Dispatch table entry for expireDelay()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = expireDelay();\n                goto label_028D;\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0351;\n                var2 = owner();\n                goto label_0351;\n            } else if (var0 == 0x98ea5fca) {\n                // Dispatch table entry for depositEther()\n                var1 = 0x0278;\n                depositEther();\n                stop();\n            } else if (var0 == 0x9e281a98) {\n                // Dispatch table entry for withdrawToken(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                withdrawToken(var2, var3);\n                stop();\n            } else if (var0 == 0xa42dce80) {\n                // Dispatch table entry for setFeeCollector(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setFeeCollector(var2);\n                stop();\n            } else if (var0 == 0xb84c1392) {\n                // Dispatch table entry for packs(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = msg.data[0x04:0x24];\n                var2 = packs(var2);\n                goto label_028D;\n            } else if (var0 == 0xbc063e1a) {\n                // Dispatch table entry for MAX_FEE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = MAX_FEE();\n                goto label_028D;\n            } else if (var0 == 0xc3f186d3) {\n                // Dispatch table entry for coeffs(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0697;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2, var3 = coeffs(var2);\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var2 & 0xff;\n                memory[temp25 + 0x20:temp25 + 0x20 + 0x20] = var3 & 0x02 ** 0x80 - 0x01;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x40) - temp26];\n            } else if (var0 == 0xc415b95c) {\n                // Dispatch table entry for feeCollector()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0351;\n                var2 = feeCollector();\n                goto label_0351;\n            } else if (var0 == 0xd3d77f98) {\n                // Dispatch table entry for setCoeff(uint8,uint128,uint8,bytes32,bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                var4 = msg.data[0x44:0x64] & 0xff;\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                setCoeff(var2, var3, var4, var5, var6);\n                stop();\n            } else if (var0 == 0xe2595235) {\n                // Dispatch table entry for addPack(uint8,uint128,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                var4 = msg.data[0x44:0x64];\n                addPack(var2, var3, var4);\n                stop();\n            } else if (var0 == 0xeacf7d8a) {\n                // Dispatch table entry for MAX_EXPIRE_DELAY()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = MAX_EXPIRE_DELAY();\n                goto label_028D;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf68e63e3) {\n                // Dispatch table entry for PRICE_MUL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = PRICE_MUL();\n                goto label_028D;\n            } else if (var0 == 0xf797f7b6) {\n                // Dispatch table entry for ETH_SIGN_TYPED_DATA_ARGHASH()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = ETH_SIGN_TYPED_DATA_ARGHASH();\n                goto label_028D;\n            } else { goto label_01C8; }\n        }\n    }\n    \n    function func_0781(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function setMakeFee(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > 0x1388) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        storage[0x04] = temp1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xc51714effcf5a6965cea410eabdd683d0c063bfa70f8addbfe16a7230359e419]);\n    }\n    \n    function BUY() returns (var r0) { return 0x01; }\n    \n    function trades(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function buyPack(var arg0, var arg1) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n        var var1 = var0;\n    \n        if (block.timestamp < storage[keccak256(memory[var1:var1 + 0x40])] / 0x0100 & 0x02 ** 0x80 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0864;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_15DB(var3, var4);\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x0c;\n        var0 = var2;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (var1 != msg.value) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x089e;\n        var3 = msg.sender;\n        var4 = arg0;\n        var var5 = block.timestamp + arg1;\n        var var6 = var1;\n        func_15F5(var3, var4, var5, var6);\n        memory[0x00:0x20] = storage[0x03] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var2 = 0x08c3;\n        var4 = msg.value;\n        var2 = func_0781(var3, var4);\n        memory[0x00:0x20] = storage[0x03] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n    }\n    \n    function takeFee() returns (var r0) { return storage[0x05]; }\n    \n    function setTakeFee(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > 0x1388) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        storage[0x05] = temp1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xade97beaa63b5665cd19e65b7f8442edacb3e0f0d4159c8377ed8c8779338154]);\n    }\n    \n    function SELL() returns (var r0) { return 0x00; }\n    \n    function makeFee() returns (var r0) { return storage[0x04]; }\n    \n    function signer() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function delPack(var arg0, var arg1) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x098f;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_15DB(var2, var3);\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n    }\n    \n    function balances(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function trade(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (storage[var3] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = memory[arg1:arg1 + 0x20] - 0x01;\n    \n        if (memory[arg0:arg0 + 0x20] != var0 * 0x06 + 0x04) { revert(memory[0x00:0x00]); }\n    \n        if (memory[arg2:arg2 + 0x20] != var0 * 0x02 + 0x02) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x01;\n        var var5 = arg0;\n        var var6 = 0x00;\n    \n        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n    \n        var4 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] == var4;\n    \n        if (var4) {\n        label_0A3B:\n        \n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n            var4 = 0x0a65;\n            var5 = arg0;\n            var6 = 0x01;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            func_0A56(var5, var6);\n            var4 = arg0;\n            var5 = 0x03;\n        \n            if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n        \n            if (block.timestamp > memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var4 = address(this);\n            var5 = msg.sender;\n            var6 = arg0;\n            var var7 = 0x00;\n        \n            if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n        \n            var6 = memory[var7 * 0x20 + var6 + 0x20:var7 * 0x20 + var6 + 0x20 + 0x20];\n            var7 = arg1;\n            var var8 = 0x00;\n        \n            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n        \n            var7 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n            var8 = arg0;\n            var var9 = 0x01;\n        \n            if (var9 >= memory[var8:var8 + 0x20]) { assert(); }\n        \n            var8 = memory[var9 * 0x20 + var8 + 0x20:var9 * 0x20 + var8 + 0x20 + 0x20];\n            var9 = arg0;\n            var var10 = 0x03;\n        \n            if (var10 >= memory[var9:var9 + 0x20]) { assert(); }\n        \n            var temp0 = memory[var10 * 0x20 + var9 + 0x20:var10 * 0x20 + var9 + 0x20 + 0x20];\n            var temp1 = memory[0x40:0x60];\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[temp1:temp1 + 0x20] = (temp2 & var4) * 0x01000000000000000000000000;\n            memory[temp1 + 0x14:temp1 + 0x14 + 0x20] = (temp2 & var5) * 0x01000000000000000000000000;\n            memory[temp1 + 0x28:temp1 + 0x28 + 0x20] = (var6 & 0xff) * 0x02 ** 0xf8;\n            memory[temp1 + 0x29:temp1 + 0x29 + 0x20] = (temp2 & var7) * 0x01000000000000000000000000;\n            memory[temp1 + 0x3d:temp1 + 0x3d + 0x20] = var8;\n            memory[temp1 + 0x5d:temp1 + 0x5d + 0x20] = temp0;\n            var temp3 = memory[0x40:0x60];\n            var1 = keccak256(memory[temp3:temp3 + (temp1 + 0x7d) - temp3]);\n            var3 = 0x00;\n        \n            if (var3 >= var0) {\n                var4 = 0x0bce;\n                var5 = var1;\n                var6 = arg0;\n                var7 = arg2;\n                func_1996(var5, var6, var7);\n                var4 = 0x0bd8;\n                var5 = arg0;\n                var6 = arg1;\n                func_1A65(var5, var6);\n                return;\n            } else {\n                var4 = 0x0b5f;\n                var5 = var3;\n                var6 = arg0;\n                func_173C(var5, var6);\n                var4 = 0x0b6b;\n                var5 = var3;\n                var6 = arg0;\n                var7 = arg1;\n                var8 = arg2;\n                var4 = func_176C(var5, var6, var7, var8);\n                var temp4 = var4;\n                var2 = temp4;\n                var4 = var1;\n                var5 = var2;\n                var6 = arg0;\n                var7 = var3 * 0x06 + 0x09;\n            \n                if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n            \n                var temp5 = memory[var7 * 0x20 + var6 + 0x20:var7 * 0x20 + var6 + 0x20 + 0x20];\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var4;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var5;\n                memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = temp5;\n                var temp7 = memory[0x40:0x60];\n                var1 = keccak256(memory[temp7:temp7 + (temp6 + 0x60) - temp7]);\n                var4 = 0x0bbb;\n                var5 = var3;\n                var6 = arg0;\n                var7 = arg1;\n                var8 = 0x1991;\n                var9 = var6;\n                var10 = 0x00;\n            \n                if (var10 >= memory[var9:var9 + 0x20]) { assert(); }\n            \n                var9 = memory[var10 * 0x20 + var9 + 0x20:var10 * 0x20 + var9 + 0x20 + 0x20];\n                var10 = var7;\n                var var11 = 0x00;\n            \n                if (var11 >= memory[var10:var10 + 0x20]) { assert(); }\n            \n                var10 = memory[var11 * 0x20 + var10 + 0x20:var11 * 0x20 + var10 + 0x20 + 0x20];\n                var11 = var7;\n                var var12 = var5 + 0x01;\n            \n                if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n            \n                var11 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n                var12 = var6;\n                var var13 = var5 * 0x06 + 0x04;\n            \n                if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n            \n                var12 = memory[var13 * 0x20 + var12 + 0x20:var13 * 0x20 + var12 + 0x20 + 0x20];\n                var13 = var6;\n                var var14 = var5 * 0x06 + 0x05;\n            \n                if (var14 >= memory[var13:var13 + 0x20]) { assert(); }\n            \n                var13 = memory[var14 * 0x20 + var13 + 0x20:var14 * 0x20 + var13 + 0x20 + 0x20];\n                var14 = var6;\n                var var15 = var5 * 0x06 + 0x06;\n            \n                if (var15 >= memory[var14:var14 + 0x20]) { assert(); }\n            \n                var14 = memory[var15 * 0x20 + var14 + 0x20:var15 * 0x20 + var14 + 0x20 + 0x20];\n                var15 = var6;\n                var var16 = var5 * 0x06 + 0x09;\n            \n                if (var16 >= memory[var15:var15 + 0x20]) { assert(); }\n            \n                var15 = memory[var16 * 0x20 + var15 + 0x20:var16 * 0x20 + var15 + 0x20 + 0x20];\n                var16 = 0x00;\n                var var17 = var16;\n                var var18 = 0x00;\n                var var19 = var18;\n                var var20 = 0x1d0a;\n                var var21 = var9;\n                var var22 = var10;\n                var var23 = var11;\n                var var24 = var12;\n                var var25 = var13;\n                var var26 = var14;\n                var var27 = var15;\n                var var28 = 0x00;\n                memory[var28:var28 + 0x20] = var23 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x08;\n                var temp8 = keccak256(memory[var28:var28 + 0x40]);\n                memory[var28:var28 + 0x20] = var24;\n                memory[0x20:0x40] = temp8;\n                var var29 = var28;\n                var var30 = var29;\n                var var31 = var30;\n                var var32 = 0x208b;\n                var var34 = storage[keccak256(memory[var31:var31 + 0x40])];\n                var var33 = var26;\n                var32 = func_1B8A(var33, var34);\n                var28 = var32;\n            \n                if (var28 > var27) {\n                    var28 = var27;\n                \n                    if (var21 != 0x01) { goto label_2180; }\n                    else { goto label_20A3; }\n                } else if (var21 != 0x01) {\n                label_2180:\n                    var temp9 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp9 & msg.sender;\n                    memory[0x20:0x40] = 0x07;\n                    var temp10 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = var22 & temp9;\n                    memory[0x20:0x40] = temp10;\n                \n                    if (var28 <= storage[keccak256(memory[0x00:0x40])]) {\n                    label_2257:\n                        var32 = 0x2261;\n                        var33 = var28;\n                        var34 = var25;\n                        var32 = func_2723(var33, var34);\n                    \n                    label_2261:\n                        var30 = var32;\n                    \n                        if (var21 != 0x01) {\n                            memory[0x00:0x20] = var23 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x06;\n                            var32 = 0x22ce;\n                            var33 = storage[keccak256(memory[0x00:0x40])];\n                            var34 = 0x2297;\n                            var var35 = storage[0x04];\n                            var var36 = var23;\n                            var34 = func_2747(var35, var36);\n                        \n                        label_2297:\n                            var35 = 0x00;\n                            var36 = 0x2740;\n                            var var37 = 0x27be;\n                            var var38 = var33;\n                            var var39 = storage[0x01];\n                            var37 = func_27CF(var38, var39);\n                            var36 = func_27BE(var34, var37);\n                            var32 = var36;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = 0x06;\n                            var33 = storage[keccak256(memory[0x00:0x40])];\n                            var32 = 0x229c;\n                            var34 = 0x2297;\n                            var35 = storage[0x05];\n                            var36 = msg.sender;\n                            var34 = func_2747(var35, var36);\n                            goto label_2297;\n                        }\n                    } else {\n                        var temp11 = 0x02 ** 0xa0 - 0x01;\n                        var temp12 = msg.sender;\n                        memory[0x00:0x20] = temp12 & temp11;\n                        memory[0x20:0x40] = 0x07;\n                        var temp13 = keccak256(memory[0x00:0x40]);\n                        var temp14 = var22;\n                        memory[0x00:0x20] = temp14 & temp11;\n                        memory[0x20:0x40] = temp13;\n                        var temp15 = storage[keccak256(memory[0x00:0x40])];\n                        var temp16 = memory[0x40:0x60];\n                        var temp17 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp16:temp16 + 0x20] = temp17 & temp12;\n                        memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = temp17 & temp14;\n                        memory[temp16 + 0x40:temp16 + 0x40 + 0x20] = var28;\n                        memory[temp16 + 0x60:temp16 + 0x60 + 0x20] = temp15;\n                        var temp18 = memory[0x40:0x60];\n                        log(memory[temp18:temp18 + (temp16 + 0x80) - temp18], [0xb6062bc730d991f3ca3c29f9901ce89c12b5689a273411b114f16c01ca816807]);\n                        var temp19 = 0x02 ** 0xa0 - 0x01;\n                        memory[0x00:0x20] = temp19 & msg.sender;\n                        memory[0x20:0x40] = 0x07;\n                        var temp20 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = temp14 & temp19;\n                        memory[0x20:0x40] = temp20;\n                        var28 = storage[keccak256(memory[0x00:0x40])];\n                        var32 = 0x2261;\n                        var33 = var28;\n                        var34 = var25;\n                        var32 = func_2723(var33, var34);\n                        goto label_2261;\n                    }\n                } else {\n                label_20A3:\n                    var temp21 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = var23 & temp21;\n                    memory[0x20:0x40] = 0x07;\n                    var temp22 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = var22 & temp21;\n                    memory[0x20:0x40] = temp22;\n                \n                    if (var28 <= storage[keccak256(memory[0x00:0x40])]) { goto label_2257; }\n                \n                    var temp23 = 0x02 ** 0xa0 - 0x01;\n                    var temp24 = var23;\n                    memory[0x00:0x20] = temp24 & temp23;\n                    memory[0x20:0x40] = 0x07;\n                    var temp25 = keccak256(memory[0x00:0x40]);\n                    var temp26 = var22;\n                    memory[0x00:0x20] = temp26 & temp23;\n                    memory[0x20:0x40] = temp25;\n                    var temp27 = storage[keccak256(memory[0x00:0x40])];\n                    var temp28 = memory[0x40:0x60];\n                    var temp29 = 0x02 ** 0xa0 - 0x01;\n                    memory[temp28:temp28 + 0x20] = temp29 & temp24;\n                    memory[temp28 + 0x20:temp28 + 0x20 + 0x20] = temp29 & temp26;\n                    memory[temp28 + 0x40:temp28 + 0x40 + 0x20] = var28;\n                    memory[temp28 + 0x60:temp28 + 0x60 + 0x20] = temp27;\n                    var temp30 = memory[0x40:0x60];\n                    log(memory[temp30:temp30 + (temp28 + 0x80) - temp30], [0xb6062bc730d991f3ca3c29f9901ce89c12b5689a273411b114f16c01ca816807]);\n                    var temp31 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp24 & temp31;\n                    memory[0x20:0x40] = 0x07;\n                    var temp32 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = temp26 & temp31;\n                    memory[0x20:0x40] = temp32;\n                    var28 = storage[keccak256(memory[0x00:0x40])];\n                    goto label_2257;\n                }\n            }\n        } else {\n            var4 = 0x00;\n            var5 = arg0;\n            var6 = 0x00;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var4 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] == var4;\n            goto label_0A3B;\n        }\n    }\n    \n    function func_0A56(var arg0, var arg1) {\n        arg0 = memory[arg1 * 0x20 + arg0 + 0x20:arg1 * 0x20 + arg0 + 0x20 + 0x20];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = temp1;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n    }\n    \n    function FEE_MUL() returns (var r0) { return storage[0x01]; }\n    \n    function depositToken(var arg0, var arg1) {\n        var var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0x23b872dd;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = arg1;\n        var var2 = temp0 + 0x64;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp3 & msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp3;\n        memory[0x20:0x40] = temp4;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x0ca7;\n        var2 = arg1;\n        var0 = func_0781(var1, var2);\n        var temp5 = msg.sender;\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp6 & temp5;\n        memory[0x20:0x40] = 0x07;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        var temp8 = arg0;\n        memory[0x00:0x20] = temp8 & temp6;\n        memory[0x20:0x40] = temp7;\n        var temp9 = var0;\n        storage[keccak256(memory[0x00:0x40])] = temp9;\n        var temp10 = memory[0x40:0x60];\n        var temp11 = 0x02 ** 0xa0 - 0x01;\n        memory[temp10:temp10 + 0x20] = temp11 & temp5;\n        memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = temp11 & temp8;\n        memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = arg1;\n        memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = temp9;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp10 + 0x80) - temp12], [0xbb01c612a93e37305a5f1f7b8ed63ea61211be444f722915b9dc827c0bdbffcc]);\n    }\n    \n    function withdrawEther(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var var0 = 0x0d52;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_1B8A(var1, var2);\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(temp0).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var temp4 = storage[keccak256(memory[0x00:0x40])];\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = msg.sender;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg0;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp4;\n        var temp8 = memory[0x40:0x60];\n        log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xfd68f27313402be52d2f46b6d391b7b8657000a3062853a4be930f1281072a01]);\n    }\n    \n    function unpause() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x00] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff0000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33]);\n    }\n    \n    function cancel(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        var var0 = arg0 & 0xff == 0x01;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0EB6:\n        \n            if (block.timestamp > arg5 + storage[0x02]) { goto label_0F76; }\n        \n            var0 = 0x0ed9;\n            var var1 = msg.sender;\n            var var2 = arg0;\n            var var3 = arg1;\n            var var4 = arg2;\n            var var5 = arg3;\n            var var6 = arg4;\n            var var7 = arg5;\n            var var8 = arg6;\n            var var9 = arg7;\n            var var10 = arg8;\n            var0 = func_1B9C(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);\n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x08;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg2;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = temp1;\n            var temp3 = arg4;\n            storage[keccak256(memory[0x00:0x40])] = temp3;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = arg0 & 0xff;\n            var temp5 = 0x02 ** 0xa0 - 0x01;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp5 & temp0;\n            memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = temp2;\n            memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = temp5 & arg1;\n            memory[temp4 + 0x80:temp4 + 0x80 + 0x20] = arg3;\n            memory[temp4 + 0xa0:temp4 + 0xa0 + 0x20] = temp3;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp4 + 0xc0) - temp6], [0x2f21c988da7a0be25ef59d2d641cfe9fa04686d1e87d5133500ce90bc31c5b0a]);\n        \n        label_0F76:\n            return;\n        } else if (!(arg0 & 0xff)) { goto label_0EB6; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setExpireDelay(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > 0x0258) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = arg0;\n    }\n    \n    function tokens(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function paused() returns (var r0) { return storage[0x00] / 0x02 ** 0xa0 & 0xff; }\n    \n    function getPack(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0fea;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_15DB(var3, var4);\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setSigner(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0a] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x0a] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function filled(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function pause() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625]);\n    }\n    \n    function expireDelay() returns (var r0) { return storage[0x02]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function depositEther() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var var0 = 0x1124;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0781(var1, var2);\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = var0;\n        storage[keccak256(memory[0x00:0x40])] = temp1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = msg.value;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = temp1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x20d6bac8359f33d79581bfd2b0457cb189fda6d90fed287ddc9f2ba3eb124b67]);\n    }\n    \n    function withdrawToken(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x11cb;\n        var var2 = arg1;\n        var0 = func_1B8A(var1, var2);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3 & temp2;\n        memory[0x20:0x40] = 0x07;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = arg0 & temp2;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = temp5;\n        var1 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = arg1;\n        var2 = temp6 + 0x44;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp7;\n        temp7, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp7) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = 0x02 ** 0xa0 - 0x01;\n        var temp9 = msg.sender;\n        memory[0x00:0x20] = temp9 & temp8;\n        memory[0x20:0x40] = 0x07;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        var temp11 = arg0;\n        memory[0x00:0x20] = temp11 & temp8;\n        memory[0x20:0x40] = temp10;\n        var temp12 = storage[keccak256(memory[0x00:0x40])];\n        var temp13 = memory[0x40:0x60];\n        var temp14 = 0x02 ** 0xa0 - 0x01;\n        memory[temp13:temp13 + 0x20] = temp14 & temp9;\n        memory[temp13 + 0x20:temp13 + 0x20 + 0x20] = temp14 & temp11;\n        memory[temp13 + 0x40:temp13 + 0x40 + 0x20] = arg1;\n        memory[temp13 + 0x60:temp13 + 0x60 + 0x20] = temp12;\n        var temp15 = memory[0x40:0x60];\n        log(memory[temp15:temp15 + (temp13 + 0x80) - temp15], [0xa69fc39b702a6e8195370ae2252cc11b4445837cc4abe15ac39123f2f2d8770d]);\n    }\n    \n    function setFeeCollector(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function packs(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function MAX_FEE() returns (var r0) { return 0x1388; }\n    \n    function coeffs(var arg0) returns (var arg0, var r1) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        arg0 = temp0 & 0xff;\n        r1 = temp0 / 0x0100 & 0x02 ** 0x80 - 0x01;\n        return arg0, r1;\n    }\n    \n    function feeCollector() returns (var r0) { return storage[0x03] & 0x02 ** 0xa0 - 0x01; }\n    \n    function setCoeff(var arg0, var arg1, var arg2, var arg3, var arg4) {\n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & address(this)) * 0x01000000000000000000000000;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (temp1 & msg.sender) * 0x01000000000000000000000000;\n        memory[temp0 + 0x28:temp0 + 0x28 + 0x20] = (arg0 & 0xff) * 0x02 ** 0xf8;\n        memory[temp0 + 0x29:temp0 + 0x29 + 0x20] = (arg1 & 0x02 ** 0x80 - 0x01) * 0x0100000000000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = keccak256(memory[temp2:temp2 + (temp0 + 0x39) - temp2]);\n        var var0 = temp3;\n        var var1 = storage[0x0a] & 0x02 ** 0xa0 - 0x01;\n        var var2 = 0x01;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = 0x00;\n        memory[0x40:0x60] = temp4 + 0x20;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = var0;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = arg2 & 0xff;\n        memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = arg3;\n        memory[temp5 + 0x60:temp5 + 0x60 + 0x20] = arg4;\n        var var3 = temp5 + 0x80;\n        var temp6 = memory[0x40:0x60];\n        var temp7;\n        temp7, memory[temp6 - 0x20:temp6 - 0x20 + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp6:temp6 + var3 - temp6]);\n    \n        if (!temp7) { revert(memory[0x00:0x00]); }\n    \n        if (memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xff >= 0x64) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0x02 ** 0x80 - 0x01 <= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0x02 ** 0x80 - 0x01 > block.timestamp + 0x2e2480) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x14d7;\n        var2 = msg.sender;\n        var3 = arg0;\n        var var4 = arg1;\n        var var5 = 0x00;\n        func_15F5(var2, var3, var4, var5);\n    }\n    \n    function addPack(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xff >= 0x64) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0x02 ** 0x80 - 0x01 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg2 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x1538;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_15DB(var2, var3);\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = arg2;\n    }\n    \n    function MAX_EXPIRE_DELAY() returns (var r0) { return 0x0258; }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { return; }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function PRICE_MUL() returns (var r0) { return 0x0de0b6b3a7640000; }\n    \n    function ETH_SIGN_TYPED_DATA_ARGHASH() returns (var r0) { return 0x3da4a05d8449a7bc291302cce8a490cf367b98ec37200076c3f13f1f2308fd74; }\n    \n    function func_15DB(var arg0, var arg1) returns (var r0) { return (arg0 & 0xff) + (arg1 & 0x02 ** 0x80 - 0x01) * 0x0100; }\n    \n    function func_15F5(var arg0, var arg1, var arg2, var arg3) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        var temp1 = arg1;\n        memory[temp0:temp0 + 0x20] = temp1 & 0xff;\n        var temp2 = arg2;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp2 & 0x02 ** 0x80 - 0x01;\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0b;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (memory[temp0:temp0 + 0x20] & 0xff) | (storage[temp4] & ~0xff);\n        storage[temp4] = (storage[temp4] & ~0xffffffffffffffffffffffffffffffff00) | (memory[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0x02 ** 0x80 - 0x01) * 0x0100;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp1 & 0xff;\n        memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = temp2 & 0x02 ** 0x80 - 0x01;\n        memory[temp5 + 0x60:temp5 + 0x60 + 0x20] = arg3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x80) - temp6], [0x0b9ed8798ce889acd8779436736d269415d869d25c5de987a3e7d9f66f71cac1]);\n    }\n    \n    function func_173C(var arg0, var arg1) {\n        var var0 = storage[0x02];\n        var var1 = arg1;\n        var var2 = arg0 * 0x06 + 0x07;\n    \n        if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n    \n        if (block.timestamp <= memory[var2 * 0x20 + var1 + 0x20:var2 * 0x20 + var1 + 0x20 + 0x20] + var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_176C(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n        var var11 = 0x01;\n        var var12 = arg1;\n        var var13 = 0x00;\n    \n        if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n    \n        if (memory[var13 * 0x20 + var12 + 0x20:var13 * 0x20 + var12 + 0x20 + 0x20] == var11) {\n            var1 = 0x00;\n            var11 = arg2;\n            var12 = arg0 + 0x01;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n        label_17B6:\n            var2 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg2;\n            var12 = 0x00;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var3 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x04;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var4 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x05;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var5 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x06;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var6 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x07;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var7 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x08;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var8 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg3;\n            var12 = arg0 * 0x02 + 0x02;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var9 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg3;\n            var12 = arg0 * 0x02 + 0x03;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var temp0 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var10 = temp0;\n            var11 = 0x18bf;\n            var12 = var2;\n            var13 = var1;\n            var var14 = var3;\n            var var15 = var4;\n            var var16 = var5;\n            var var17 = var6;\n            var var18 = var7;\n            var var19 = var8;\n            var var20 = var9;\n            var var21 = var10;\n            return func_1B9C(var12, var13, var14, var15, var16, var17, var18, var19, var20, var21);\n        } else {\n            var11 = 0x01;\n            var1 = var11;\n            var11 = arg2;\n            var12 = arg0 + 0x01;\n        \n            if (var12 < memory[var11:var11 + 0x20]) { goto label_17B6; }\n            else { assert(); }\n        }\n    }\n    \n    function func_1996(var arg0, var arg1, var arg2) {\n        var var0 = storage[0x0a] & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0x01;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = 0x02;\n    \n        if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n    \n        var3 = memory[var4 * 0x20 + var3 + 0x20:var4 * 0x20 + var3 + 0x20 + 0x20];\n        var4 = arg2;\n        var var5 = 0x00;\n    \n        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n    \n        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n        var5 = arg2;\n        var var6 = 0x01;\n    \n        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n    \n        var temp0 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20];\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x00;\n        memory[0x40:0x60] = temp1 + 0x20;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = var2;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var3 & 0xff;\n        memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = var4;\n        memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = temp0;\n        var2 = temp2 + 0x80;\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3 - 0x20:temp3 - 0x20 + 0x20] = address(var1).call.gas(msg.gas - 0x646e)(memory[temp3:temp3 + var2 - temp3]);\n    \n        if (!temp4) { revert(memory[0x00:0x00]); }\n    \n        if (memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1A65(var arg0, var arg1) {\n        var var0 = 0xee7e85974085b8a74acdea8330a9e8c09680dccea6f6df360491edf22a27cc3b;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        var var3 = 0x01;\n    \n        if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n    \n        var2 = memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20];\n        var3 = arg0;\n        var var4 = 0x00;\n    \n        if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n    \n        var3 = memory[var4 * 0x20 + var3 + 0x20:var4 * 0x20 + var3 + 0x20 + 0x20];\n        var4 = arg1;\n        var var5 = 0x00;\n    \n        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n    \n        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var6 = 0x00;\n        var5 = keccak256(memory[var6:var6 + 0x40]);\n        var var7 = arg1;\n        var var8 = var6;\n    \n        if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n    \n        var temp0 = var6;\n        memory[temp0:temp0 + 0x20] = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = var5;\n        var temp2 = storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = storage[keccak256(memory[0x00:0x40])];\n        var temp4 = memory[0x40:0x60];\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[temp4:temp4 + 0x20] = temp5 & var1;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var2;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = var3;\n        memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = temp5 & var4;\n        memory[temp4 + 0x80:temp4 + 0x80 + 0x20] = temp2;\n        memory[temp4 + 0xa0:temp4 + 0xa0 + 0x20] = temp3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp4 + 0xc0) - temp6], [stack[-9]]);\n    }\n    \n    function func_1B8A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1B9C(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg7 >= 0x03e8) {\n            var var1 = 0x1c56;\n            var var2 = arg1;\n            var var3 = arg2;\n            var var4 = arg3;\n            var var5 = arg4;\n            var var6 = arg5;\n            var var7 = arg6;\n            var1 = func_1FA2(var2, var3, var4, var5, var6, var7);\n            var temp0 = var1;\n            var0 = temp0;\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0x01;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x00;\n            memory[0x40:0x60] = temp1 + 0x20;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var0;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = arg7 - 0x03e8 & 0xff;\n            memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = arg8;\n            memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = arg9;\n            var3 = temp2 + 0x80;\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3 - 0x20:temp3 - 0x20 + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp3:temp3 + var3 - temp3]);\n        \n            if (!temp4) { revert(memory[0x00:0x00]); }\n        \n            if (memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 != var1) { revert(memory[0x00:0x00]); }\n        \n        label_1CE7:\n            return var0;\n        } else {\n            var1 = 0x1bb6;\n            var2 = arg1;\n            var3 = arg2;\n            var4 = arg3;\n            var5 = arg4;\n            var6 = arg5;\n            var7 = arg6;\n            var1 = func_1E0A(var2, var3, var4, var5, var6, var7);\n            var temp5 = var1;\n            var0 = temp5;\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0x01;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x00;\n            memory[0x40:0x60] = temp6 + 0x20;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = var0;\n            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = arg7 & 0xff;\n            memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = arg8;\n            memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = arg9;\n            var3 = temp7 + 0x80;\n            var temp8 = memory[0x40:0x60];\n            var temp9;\n            temp9, memory[temp8 - 0x20:temp8 - 0x20 + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp8:temp8 + var3 - temp8]);\n        \n            if (!temp9) { revert(memory[0x00:0x00]); }\n        \n            if (memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var1) { goto label_1CE7; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_1E0A(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0 & 0xff == 0x01;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_1E2A:\n            var1 = 0x3da4a05d8449a7bc291302cce8a490cf367b98ec37200076c3f13f1f2308fd74;\n            var var2 = address(this);\n        \n            if (arg0 & 0xff == 0x01) {\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                memory[0x40:0x60] = var3 + 0x40;\n                memory[var3:var3 + 0x20] = 0x03;\n                memory[var3 + 0x20:var3 + 0x20 + 0x20] = 0x4255590000000000000000000000000000000000000000000000000000000000;\n                var var4 = arg1;\n                var var5 = arg2;\n                var var6 = arg3;\n                var var7 = arg4;\n                var var8 = arg5;\n                var temp1 = memory[0x40:0x60];\n                var var9 = temp1;\n                memory[var9:var9 + 0x20] = (var2 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                var var10 = var9 + 0x14;\n                var var11 = var3 + 0x20;\n                var var12 = memory[var3:var3 + 0x20];\n                var var13 = var12;\n                var var14 = var10;\n                var var15 = var11;\n            \n                if (var13 < 0x20) {\n                label_1F17:\n                    var temp2 = 0x0100 ** (0x20 - var13) - 0x01;\n                    var temp3 = var14;\n                    memory[temp3:temp3 + 0x20] = (memory[temp3:temp3 + 0x20] & temp2) | (memory[var15:var15 + 0x20] & ~temp2);\n                    var temp4 = var12 + var10;\n                    memory[temp4:temp4 + 0x20] = (var4 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                    memory[temp4 + 0x14:temp4 + 0x14 + 0x20] = var5;\n                    memory[temp4 + 0x34:temp4 + 0x34 + 0x20] = var6;\n                    memory[temp4 + 0x54:temp4 + 0x54 + 0x20] = var7;\n                    memory[temp4 + 0x74:temp4 + 0x74 + 0x20] = var8;\n                    var temp5 = memory[0x40:0x60];\n                    var temp6 = keccak256(memory[temp5:temp5 + (temp4 + 0x94) - temp5]);\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = var1;\n                    memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = temp6;\n                    var temp8 = memory[0x40:0x60];\n                    return keccak256(memory[temp8:temp8 + (temp7 + 0x40) - temp8]);\n                } else {\n                label_1F01:\n                    var temp9 = var15;\n                    var temp10 = var14;\n                    memory[temp10:temp10 + 0x20] = memory[temp9:temp9 + 0x20];\n                    var13 = var13 + ~0x1f;\n                    var14 = temp10 + 0x20;\n                    var15 = temp9 + 0x20;\n                \n                    if (var13 < 0x20) { goto label_1F17; }\n                    else { goto label_1F01; }\n                }\n            } else {\n                var temp11 = memory[0x40:0x60];\n                var3 = temp11;\n                memory[0x40:0x60] = var3 + 0x40;\n                memory[var3:var3 + 0x20] = 0x04;\n                memory[var3 + 0x20:var3 + 0x20 + 0x20] = 0x53454c4c00000000000000000000000000000000000000000000000000000000;\n                var4 = arg1;\n                var5 = arg2;\n                var6 = arg3;\n                var7 = arg4;\n                var8 = arg5;\n                var temp12 = memory[0x40:0x60];\n                var9 = temp12;\n                memory[var9:var9 + 0x20] = (var2 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                var10 = var9 + 0x14;\n                var temp13 = var3;\n                var11 = temp13 + 0x20;\n                var12 = memory[temp13:temp13 + 0x20];\n                var13 = var12;\n                var14 = var10;\n                var15 = var11;\n            \n                if (var13 < 0x20) { goto label_1F17; }\n                else { goto label_1F01; }\n            }\n        } else if (!(arg0 & 0xff)) { goto label_1E2A; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1FA2(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & address(this)) * 0x01000000000000000000000000;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (arg0 & 0xff) * 0x02 ** 0xf8;\n        memory[temp0 + 0x15:temp0 + 0x15 + 0x20] = (temp1 & arg1) * 0x01000000000000000000000000;\n        memory[temp0 + 0x29:temp0 + 0x29 + 0x20] = arg2;\n        memory[temp0 + 0x49:temp0 + 0x49 + 0x20] = arg3;\n        memory[temp0 + 0x69:temp0 + 0x69 + 0x20] = arg4;\n        memory[temp0 + 0x89:temp0 + 0x89 + 0x20] = arg5;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = keccak256(memory[temp2:temp2 + (temp0 + 0xa9) - temp2]);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        memory[temp4 + 0x1c:temp4 + 0x1c + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        return keccak256(memory[temp5:temp5 + (temp4 + 0x3c) - temp5]);\n    }\n    \n    function func_2723(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x2740;\n        var var2 = 0x2732;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_27CF(var3, var4);\n        return func_2732(var2);\n    }\n    \n    function func_2732(var arg0) returns (var r0) {\n        var var0 = 0x0de0b6b3a7640000;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_2747(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0b;\n    \n        if (block.timestamp >= storage[keccak256(memory[var0:var0 + 0x40])] / 0x0100 & 0x02 ** 0x80 - 0x01) { return arg0; }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0b;\n        var var1 = 0x2740;\n        var var2 = 0x27a6;\n        var var3 = arg0;\n        var var4 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n        var2 = func_27CF(var3, var4);\n        var1 = func_27A6(var2);\n        r0 = var1;\n        // Error: Could not resolve jump destination!\n    }\n    \n    function func_27A6(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_27BE(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x27ca;\n        var var1 = storage[0x01];\n        var var2 = arg0;\n        var0 = func_0781(var1, var2);\n        var1 = 0x00;\n        var2 = var1;\n        var var3 = var0;\n        var var4 = arg1;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_27CF(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_01C8:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x06;\n            var var1 = storage[keccak256(memory[0x00:0x40])];\n            var var0 = 0x01eb;\n            var var2 = msg.value;\n            var0 = func_0781(var1, var2);\n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x06;\n            var temp1 = var0;\n            storage[keccak256(memory[0x00:0x40])] = temp1;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = temp0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = msg.value;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x20] = temp1;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x20d6bac8359f33d79581bfd2b0457cb189fda6d90fed287ddc9f2ba3eb124b67]);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x991d8e) {\n                // Dispatch table entry for setMakeFee(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                setMakeFee(var2);\n                stop();\n            } else if (var0 == 0x01ab9806) {\n                // Dispatch table entry for BUY()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = BUY();\n            \n            label_028D:\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var2;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x13d8f3e4) {\n                // Dispatch table entry for trades(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c1;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var var3 = msg.data[0x24:0x44];\n                var2 = trades(var2, var3);\n            \n            label_02C1:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var2;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x154d6e12) {\n                // Dispatch table entry for buyPack(uint8,uint128)\n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                buyPack(var2, var3);\n                stop();\n            } else if (var0 == 0x181aa1fd) {\n                // Dispatch table entry for takeFee()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = takeFee();\n                goto label_028D;\n            } else if (var0 == 0x1f4848ef) {\n                // Dispatch table entry for setTakeFee(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                setTakeFee(var2);\n                stop();\n            } else if (var0 == 0x205730fd) {\n                // Dispatch table entry for SELL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = SELL();\n                goto label_028D;\n            } else if (var0 == 0x20c8651b) {\n                // Dispatch table entry for makeFee()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = makeFee();\n                goto label_028D;\n            } else if (var0 == 0x238ac933) {\n                // Dispatch table entry for signer()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0351;\n                var2 = signer();\n            \n            label_0351:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x26aebfac) {\n                // Dispatch table entry for delPack(uint8,uint128)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                delPack(var2, var3);\n                stop();\n            } else if (var0 == 0x27e235e3) {\n                // Dispatch table entry for balances(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balances(var2);\n                goto label_028D;\n            } else if (var0 == 0x28619814) {\n                // Dispatch table entry for trade(uint256[],address[],bytes32[])\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var temp12 = msg.data[0x04:0x24];\n                var temp13 = msg.data[temp12 + 0x04:temp12 + 0x04 + 0x20];\n                var temp14 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp14 + temp13 * 0x20 + 0x20;\n                memory[temp14:temp14 + 0x20] = temp13;\n                var temp15 = temp13 * 0x20;\n                memory[temp14 + 0x20:temp14 + 0x20 + temp15] = msg.data[temp12 + 0x24:temp12 + 0x24 + temp15];\n                var2 = temp14;\n                var temp16 = msg.data[0x24:0x44] + 0x04;\n                var temp17 = msg.data[temp16:temp16 + 0x20];\n                var temp18 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp18 + temp17 * 0x20 + 0x20;\n                memory[temp18:temp18 + 0x20] = temp17;\n                var temp19 = temp17 * 0x20;\n                memory[temp18 + 0x20:temp18 + 0x20 + temp19] = msg.data[temp16 + 0x20:temp16 + 0x20 + temp19];\n                var3 = temp18;\n                var temp20 = msg.data[0x44:0x64] + 0x04;\n                var temp21 = msg.data[temp20:temp20 + 0x20];\n                var temp22 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp22 + temp21 * 0x20 + 0x20;\n                memory[temp22:temp22 + 0x20] = temp21;\n                var temp23 = temp21 * 0x20;\n                memory[temp22 + 0x20:temp22 + 0x20 + temp23] = msg.data[temp20 + 0x20:temp20 + 0x20 + temp23];\n                var var4 = temp22;\n                trade(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x2a77b4af) {\n                // Dispatch table entry for FEE_MUL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = FEE_MUL();\n                goto label_028D;\n            } else if (var0 == 0x338b5dea) {\n                // Dispatch table entry for depositToken(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                depositToken(var2, var3);\n                stop();\n            } else if (var0 == 0x3bed33ce) {\n                // Dispatch table entry for withdrawEther(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                withdrawEther(var2);\n                stop();\n            } else if (var0 == 0x3f4ba83a) {\n                // Dispatch table entry for unpause()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                unpause();\n                stop();\n            } else if (var0 == 0x44263f66) {\n                // Dispatch table entry for cancel(uint8,address,uint256,uint256,uint256,uint256,uint256,bytes32,bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var4 = msg.data[0x44:0x64];\n                var var5 = msg.data[0x64:0x84];\n                var var6 = msg.data[0x84:0xa4];\n                var var7 = msg.data[0xa4:0xc4];\n                var var8 = msg.data[0xc4:0xe4];\n                var var9 = msg.data[0xe4:0x0104];\n                var var10 = msg.data[0x0104:0x0124];\n                cancel(var2, var3, var4, var5, var6, var7, var8, var9, var10);\n                stop();\n            } else if (var0 == 0x4edefd31) {\n                // Dispatch table entry for setExpireDelay(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                setExpireDelay(var2);\n                stop();\n            } else if (var0 == 0x508493bc) {\n                // Dispatch table entry for tokens(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var temp24 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp24 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp24;\n                var2 = tokens(var2, var3);\n                goto label_028D;\n            } else if (var0 == 0x5c975abb) {\n                // Dispatch table entry for paused()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c1;\n                var2 = paused();\n                goto label_02C1;\n            } else if (var0 == 0x5e885c63) {\n                // Dispatch table entry for getPack(uint8,uint128)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                var1 = getPack(var2, var3);\n                goto label_028D;\n            } else if (var0 == 0x6c19e783) {\n                // Dispatch table entry for setSigner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setSigner(var2);\n                stop();\n            } else if (var0 == 0x79cad619) {\n                // Dispatch table entry for filled(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var2 = filled(var2, var3);\n                goto label_028D;\n            } else if (var0 == 0x8456cb59) {\n                // Dispatch table entry for pause()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                pause();\n                stop();\n            } else if (var0 == 0x895678a2) {\n                // Dispatch table entry for expireDelay()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = expireDelay();\n                goto label_028D;\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0351;\n                var2 = owner();\n                goto label_0351;\n            } else if (var0 == 0x98ea5fca) {\n                // Dispatch table entry for depositEther()\n                var1 = 0x0278;\n                depositEther();\n                stop();\n            } else if (var0 == 0x9e281a98) {\n                // Dispatch table entry for withdrawToken(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                withdrawToken(var2, var3);\n                stop();\n            } else if (var0 == 0xa42dce80) {\n                // Dispatch table entry for setFeeCollector(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setFeeCollector(var2);\n                stop();\n            } else if (var0 == 0xb84c1392) {\n                // Dispatch table entry for packs(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = msg.data[0x04:0x24];\n                var2 = packs(var2);\n                goto label_028D;\n            } else if (var0 == 0xbc063e1a) {\n                // Dispatch table entry for MAX_FEE()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = MAX_FEE();\n                goto label_028D;\n            } else if (var0 == 0xc3f186d3) {\n                // Dispatch table entry for coeffs(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0697;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2, var3 = coeffs(var2);\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var2 & 0xff;\n                memory[temp25 + 0x20:temp25 + 0x20 + 0x20] = var3 & 0x02 ** 0x80 - 0x01;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x40) - temp26];\n            } else if (var0 == 0xc415b95c) {\n                // Dispatch table entry for feeCollector()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0351;\n                var2 = feeCollector();\n                goto label_0351;\n            } else if (var0 == 0xd3d77f98) {\n                // Dispatch table entry for setCoeff(uint8,uint128,uint8,bytes32,bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                var4 = msg.data[0x44:0x64] & 0xff;\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                setCoeff(var2, var3, var4, var5, var6);\n                stop();\n            } else if (var0 == 0xe2595235) {\n                // Dispatch table entry for addPack(uint8,uint128,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0xff;\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                var4 = msg.data[0x44:0x64];\n                addPack(var2, var3, var4);\n                stop();\n            } else if (var0 == 0xeacf7d8a) {\n                // Dispatch table entry for MAX_EXPIRE_DELAY()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = MAX_EXPIRE_DELAY();\n                goto label_028D;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf68e63e3) {\n                // Dispatch table entry for PRICE_MUL()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = PRICE_MUL();\n                goto label_028D;\n            } else if (var0 == 0xf797f7b6) {\n                // Dispatch table entry for ETH_SIGN_TYPED_DATA_ARGHASH()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028d;\n                var2 = ETH_SIGN_TYPED_DATA_ARGHASH();\n                goto label_028D;\n            } else { goto label_01C8; }\n        }\n    }\n    \n    function func_0781(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function setMakeFee(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > 0x1388) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        storage[0x04] = temp1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xc51714effcf5a6965cea410eabdd683d0c063bfa70f8addbfe16a7230359e419]);\n    }\n    \n    function BUY() returns (var r0) { return 0x01; }\n    \n    function trades(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function buyPack(var arg0, var arg1) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n        var var1 = var0;\n    \n        if (block.timestamp < storage[keccak256(memory[var1:var1 + 0x40])] / 0x0100 & 0x02 ** 0x80 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0864;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_15DB(var3, var4);\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x0c;\n        var0 = var2;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (var1 != msg.value) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x089e;\n        var3 = msg.sender;\n        var4 = arg0;\n        var var5 = block.timestamp + arg1;\n        var var6 = var1;\n        func_15F5(var3, var4, var5, var6);\n        memory[0x00:0x20] = storage[0x03] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var2 = 0x08c3;\n        var4 = msg.value;\n        var2 = func_0781(var3, var4);\n        memory[0x00:0x20] = storage[0x03] & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n    }\n    \n    function takeFee() returns (var r0) { return storage[0x05]; }\n    \n    function setTakeFee(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > 0x1388) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        storage[0x05] = temp1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xade97beaa63b5665cd19e65b7f8442edacb3e0f0d4159c8377ed8c8779338154]);\n    }\n    \n    function SELL() returns (var r0) { return 0x00; }\n    \n    function makeFee() returns (var r0) { return storage[0x04]; }\n    \n    function signer() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function delPack(var arg0, var arg1) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x098f;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_15DB(var2, var3);\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = 0x00;\n    }\n    \n    function balances(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function trade(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (storage[var3] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = memory[arg1:arg1 + 0x20] - 0x01;\n    \n        if (memory[arg0:arg0 + 0x20] != var0 * 0x06 + 0x04) { revert(memory[0x00:0x00]); }\n    \n        if (memory[arg2:arg2 + 0x20] != var0 * 0x02 + 0x02) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x01;\n        var var5 = arg0;\n        var var6 = 0x00;\n    \n        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n    \n        var4 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] == var4;\n    \n        if (var4) {\n        label_0A3B:\n        \n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n            var4 = 0x0a65;\n            var5 = arg0;\n            var6 = 0x01;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            func_0A56(var5, var6);\n            var4 = arg0;\n            var5 = 0x03;\n        \n            if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n        \n            if (block.timestamp > memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            var4 = address(this);\n            var5 = msg.sender;\n            var6 = arg0;\n            var var7 = 0x00;\n        \n            if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n        \n            var6 = memory[var7 * 0x20 + var6 + 0x20:var7 * 0x20 + var6 + 0x20 + 0x20];\n            var7 = arg1;\n            var var8 = 0x00;\n        \n            if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n        \n            var7 = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20];\n            var8 = arg0;\n            var var9 = 0x01;\n        \n            if (var9 >= memory[var8:var8 + 0x20]) { assert(); }\n        \n            var8 = memory[var9 * 0x20 + var8 + 0x20:var9 * 0x20 + var8 + 0x20 + 0x20];\n            var9 = arg0;\n            var var10 = 0x03;\n        \n            if (var10 >= memory[var9:var9 + 0x20]) { assert(); }\n        \n            var temp0 = memory[var10 * 0x20 + var9 + 0x20:var10 * 0x20 + var9 + 0x20 + 0x20];\n            var temp1 = memory[0x40:0x60];\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[temp1:temp1 + 0x20] = (temp2 & var4) * 0x01000000000000000000000000;\n            memory[temp1 + 0x14:temp1 + 0x14 + 0x20] = (temp2 & var5) * 0x01000000000000000000000000;\n            memory[temp1 + 0x28:temp1 + 0x28 + 0x20] = (var6 & 0xff) * 0x02 ** 0xf8;\n            memory[temp1 + 0x29:temp1 + 0x29 + 0x20] = (temp2 & var7) * 0x01000000000000000000000000;\n            memory[temp1 + 0x3d:temp1 + 0x3d + 0x20] = var8;\n            memory[temp1 + 0x5d:temp1 + 0x5d + 0x20] = temp0;\n            var temp3 = memory[0x40:0x60];\n            var1 = keccak256(memory[temp3:temp3 + (temp1 + 0x7d) - temp3]);\n            var3 = 0x00;\n        \n            if (var3 >= var0) {\n                var4 = 0x0bce;\n                var5 = var1;\n                var6 = arg0;\n                var7 = arg2;\n                func_1996(var5, var6, var7);\n                var4 = 0x0bd8;\n                var5 = arg0;\n                var6 = arg1;\n                func_1A65(var5, var6);\n                return;\n            } else {\n                var4 = 0x0b5f;\n                var5 = var3;\n                var6 = arg0;\n                func_173C(var5, var6);\n                var4 = 0x0b6b;\n                var5 = var3;\n                var6 = arg0;\n                var7 = arg1;\n                var8 = arg2;\n                var4 = func_176C(var5, var6, var7, var8);\n                var temp4 = var4;\n                var2 = temp4;\n                var4 = var1;\n                var5 = var2;\n                var6 = arg0;\n                var7 = var3 * 0x06 + 0x09;\n            \n                if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n            \n                var temp5 = memory[var7 * 0x20 + var6 + 0x20:var7 * 0x20 + var6 + 0x20 + 0x20];\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var4;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var5;\n                memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = temp5;\n                var temp7 = memory[0x40:0x60];\n                var1 = keccak256(memory[temp7:temp7 + (temp6 + 0x60) - temp7]);\n                var4 = 0x0bbb;\n                var5 = var3;\n                var6 = arg0;\n                var7 = arg1;\n                var8 = 0x1991;\n                var9 = var6;\n                var10 = 0x00;\n            \n                if (var10 >= memory[var9:var9 + 0x20]) { assert(); }\n            \n                var9 = memory[var10 * 0x20 + var9 + 0x20:var10 * 0x20 + var9 + 0x20 + 0x20];\n                var10 = var7;\n                var var11 = 0x00;\n            \n                if (var11 >= memory[var10:var10 + 0x20]) { assert(); }\n            \n                var10 = memory[var11 * 0x20 + var10 + 0x20:var11 * 0x20 + var10 + 0x20 + 0x20];\n                var11 = var7;\n                var var12 = var5 + 0x01;\n            \n                if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n            \n                var11 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n                var12 = var6;\n                var var13 = var5 * 0x06 + 0x04;\n            \n                if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n            \n                var12 = memory[var13 * 0x20 + var12 + 0x20:var13 * 0x20 + var12 + 0x20 + 0x20];\n                var13 = var6;\n                var var14 = var5 * 0x06 + 0x05;\n            \n                if (var14 >= memory[var13:var13 + 0x20]) { assert(); }\n            \n                var13 = memory[var14 * 0x20 + var13 + 0x20:var14 * 0x20 + var13 + 0x20 + 0x20];\n                var14 = var6;\n                var var15 = var5 * 0x06 + 0x06;\n            \n                if (var15 >= memory[var14:var14 + 0x20]) { assert(); }\n            \n                var14 = memory[var15 * 0x20 + var14 + 0x20:var15 * 0x20 + var14 + 0x20 + 0x20];\n                var15 = var6;\n                var var16 = var5 * 0x06 + 0x09;\n            \n                if (var16 >= memory[var15:var15 + 0x20]) { assert(); }\n            \n                var15 = memory[var16 * 0x20 + var15 + 0x20:var16 * 0x20 + var15 + 0x20 + 0x20];\n                var16 = 0x00;\n                var var17 = var16;\n                var var18 = 0x00;\n                var var19 = var18;\n                var var20 = 0x1d0a;\n                var var21 = var9;\n                var var22 = var10;\n                var var23 = var11;\n                var var24 = var12;\n                var var25 = var13;\n                var var26 = var14;\n                var var27 = var15;\n                var var28 = 0x00;\n                memory[var28:var28 + 0x20] = var23 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x08;\n                var temp8 = keccak256(memory[var28:var28 + 0x40]);\n                memory[var28:var28 + 0x20] = var24;\n                memory[0x20:0x40] = temp8;\n                var var29 = var28;\n                var var30 = var29;\n                var var31 = var30;\n                var var32 = 0x208b;\n                var var34 = storage[keccak256(memory[var31:var31 + 0x40])];\n                var var33 = var26;\n                var32 = func_1B8A(var33, var34);\n                var28 = var32;\n            \n                if (var28 > var27) {\n                    var28 = var27;\n                \n                    if (var21 != 0x01) { goto label_2180; }\n                    else { goto label_20A3; }\n                } else if (var21 != 0x01) {\n                label_2180:\n                    var temp9 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp9 & msg.sender;\n                    memory[0x20:0x40] = 0x07;\n                    var temp10 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = var22 & temp9;\n                    memory[0x20:0x40] = temp10;\n                \n                    if (var28 <= storage[keccak256(memory[0x00:0x40])]) {\n                    label_2257:\n                        var32 = 0x2261;\n                        var33 = var28;\n                        var34 = var25;\n                        var32 = func_2723(var33, var34);\n                    \n                    label_2261:\n                        var30 = var32;\n                    \n                        if (var21 != 0x01) {\n                            memory[0x00:0x20] = var23 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x06;\n                            var32 = 0x22ce;\n                            var33 = storage[keccak256(memory[0x00:0x40])];\n                            var34 = 0x2297;\n                            var var35 = storage[0x04];\n                            var var36 = var23;\n                            var34 = func_2747(var35, var36);\n                        \n                        label_2297:\n                            var35 = 0x00;\n                            var36 = 0x2740;\n                            var var37 = 0x27be;\n                            var var38 = var33;\n                            var var39 = storage[0x01];\n                            var37 = func_27CF(var38, var39);\n                            var36 = func_27BE(var34, var37);\n                            var32 = var36;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            memory[0x00:0x20] = msg.sender;\n                            memory[0x20:0x40] = 0x06;\n                            var33 = storage[keccak256(memory[0x00:0x40])];\n                            var32 = 0x229c;\n                            var34 = 0x2297;\n                            var35 = storage[0x05];\n                            var36 = msg.sender;\n                            var34 = func_2747(var35, var36);\n                            goto label_2297;\n                        }\n                    } else {\n                        var temp11 = 0x02 ** 0xa0 - 0x01;\n                        var temp12 = msg.sender;\n                        memory[0x00:0x20] = temp12 & temp11;\n                        memory[0x20:0x40] = 0x07;\n                        var temp13 = keccak256(memory[0x00:0x40]);\n                        var temp14 = var22;\n                        memory[0x00:0x20] = temp14 & temp11;\n                        memory[0x20:0x40] = temp13;\n                        var temp15 = storage[keccak256(memory[0x00:0x40])];\n                        var temp16 = memory[0x40:0x60];\n                        var temp17 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp16:temp16 + 0x20] = temp17 & temp12;\n                        memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = temp17 & temp14;\n                        memory[temp16 + 0x40:temp16 + 0x40 + 0x20] = var28;\n                        memory[temp16 + 0x60:temp16 + 0x60 + 0x20] = temp15;\n                        var temp18 = memory[0x40:0x60];\n                        log(memory[temp18:temp18 + (temp16 + 0x80) - temp18], [0xb6062bc730d991f3ca3c29f9901ce89c12b5689a273411b114f16c01ca816807]);\n                        var temp19 = 0x02 ** 0xa0 - 0x01;\n                        memory[0x00:0x20] = temp19 & msg.sender;\n                        memory[0x20:0x40] = 0x07;\n                        var temp20 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = temp14 & temp19;\n                        memory[0x20:0x40] = temp20;\n                        var28 = storage[keccak256(memory[0x00:0x40])];\n                        var32 = 0x2261;\n                        var33 = var28;\n                        var34 = var25;\n                        var32 = func_2723(var33, var34);\n                        goto label_2261;\n                    }\n                } else {\n                label_20A3:\n                    var temp21 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = var23 & temp21;\n                    memory[0x20:0x40] = 0x07;\n                    var temp22 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = var22 & temp21;\n                    memory[0x20:0x40] = temp22;\n                \n                    if (var28 <= storage[keccak256(memory[0x00:0x40])]) { goto label_2257; }\n                \n                    var temp23 = 0x02 ** 0xa0 - 0x01;\n                    var temp24 = var23;\n                    memory[0x00:0x20] = temp24 & temp23;\n                    memory[0x20:0x40] = 0x07;\n                    var temp25 = keccak256(memory[0x00:0x40]);\n                    var temp26 = var22;\n                    memory[0x00:0x20] = temp26 & temp23;\n                    memory[0x20:0x40] = temp25;\n                    var temp27 = storage[keccak256(memory[0x00:0x40])];\n                    var temp28 = memory[0x40:0x60];\n                    var temp29 = 0x02 ** 0xa0 - 0x01;\n                    memory[temp28:temp28 + 0x20] = temp29 & temp24;\n                    memory[temp28 + 0x20:temp28 + 0x20 + 0x20] = temp29 & temp26;\n                    memory[temp28 + 0x40:temp28 + 0x40 + 0x20] = var28;\n                    memory[temp28 + 0x60:temp28 + 0x60 + 0x20] = temp27;\n                    var temp30 = memory[0x40:0x60];\n                    log(memory[temp30:temp30 + (temp28 + 0x80) - temp30], [0xb6062bc730d991f3ca3c29f9901ce89c12b5689a273411b114f16c01ca816807]);\n                    var temp31 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp24 & temp31;\n                    memory[0x20:0x40] = 0x07;\n                    var temp32 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = temp26 & temp31;\n                    memory[0x20:0x40] = temp32;\n                    var28 = storage[keccak256(memory[0x00:0x40])];\n                    goto label_2257;\n                }\n            }\n        } else {\n            var4 = 0x00;\n            var5 = arg0;\n            var6 = 0x00;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var4 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] == var4;\n            goto label_0A3B;\n        }\n    }\n    \n    function func_0A56(var arg0, var arg1) {\n        arg0 = memory[arg1 * 0x20 + arg0 + 0x20:arg1 * 0x20 + arg0 + 0x20 + 0x20];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = temp1;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n    }\n    \n    function FEE_MUL() returns (var r0) { return storage[0x01]; }\n    \n    function depositToken(var arg0, var arg1) {\n        var var0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0x23b872dd;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = arg1;\n        var var2 = temp0 + 0x64;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp3 & msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp3;\n        memory[0x20:0x40] = temp4;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x0ca7;\n        var2 = arg1;\n        var0 = func_0781(var1, var2);\n        var temp5 = msg.sender;\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp6 & temp5;\n        memory[0x20:0x40] = 0x07;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        var temp8 = arg0;\n        memory[0x00:0x20] = temp8 & temp6;\n        memory[0x20:0x40] = temp7;\n        var temp9 = var0;\n        storage[keccak256(memory[0x00:0x40])] = temp9;\n        var temp10 = memory[0x40:0x60];\n        var temp11 = 0x02 ** 0xa0 - 0x01;\n        memory[temp10:temp10 + 0x20] = temp11 & temp5;\n        memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = temp11 & temp8;\n        memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = arg1;\n        memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = temp9;\n        var temp12 = memory[0x40:0x60];\n        log(memory[temp12:temp12 + (temp10 + 0x80) - temp12], [0xbb01c612a93e37305a5f1f7b8ed63ea61211be444f722915b9dc827c0bdbffcc]);\n    }\n    \n    function withdrawEther(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var var0 = 0x0d52;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg0;\n        var0 = func_1B8A(var1, var2);\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x06;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(temp0).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var temp4 = storage[keccak256(memory[0x00:0x40])];\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = msg.sender;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg0;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = temp4;\n        var temp8 = memory[0x40:0x60];\n        log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xfd68f27313402be52d2f46b6d391b7b8657000a3062853a4be930f1281072a01]);\n    }\n    \n    function unpause() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x00] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff0000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33]);\n    }\n    \n    function cancel(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        var var0 = arg0 & 0xff == 0x01;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0EB6:\n        \n            if (block.timestamp > arg5 + storage[0x02]) { goto label_0F76; }\n        \n            var0 = 0x0ed9;\n            var var1 = msg.sender;\n            var var2 = arg0;\n            var var3 = arg1;\n            var var4 = arg2;\n            var var5 = arg3;\n            var var6 = arg4;\n            var var7 = arg5;\n            var var8 = arg6;\n            var var9 = arg7;\n            var var10 = arg8;\n            var0 = func_1B9C(var1, var2, var3, var4, var5, var6, var7, var8, var9, var10);\n            var temp0 = msg.sender;\n            memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x08;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg2;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = temp1;\n            var temp3 = arg4;\n            storage[keccak256(memory[0x00:0x40])] = temp3;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = arg0 & 0xff;\n            var temp5 = 0x02 ** 0xa0 - 0x01;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = temp5 & temp0;\n            memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = temp2;\n            memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = temp5 & arg1;\n            memory[temp4 + 0x80:temp4 + 0x80 + 0x20] = arg3;\n            memory[temp4 + 0xa0:temp4 + 0xa0 + 0x20] = temp3;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp4 + 0xc0) - temp6], [0x2f21c988da7a0be25ef59d2d641cfe9fa04686d1e87d5133500ce90bc31c5b0a]);\n        \n        label_0F76:\n            return;\n        } else if (!(arg0 & 0xff)) { goto label_0EB6; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setExpireDelay(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > 0x0258) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = arg0;\n    }\n    \n    function tokens(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function paused() returns (var r0) { return storage[0x00] / 0x02 ** 0xa0 & 0xff; }\n    \n    function getPack(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0fea;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_15DB(var3, var4);\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setSigner(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0a] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x0a] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function filled(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function pause() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625]);\n    }\n    \n    function expireDelay() returns (var r0) { return storage[0x02]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function depositEther() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var var0 = 0x1124;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0781(var1, var2);\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = var0;\n        storage[keccak256(memory[0x00:0x40])] = temp1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = msg.value;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = temp1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x20d6bac8359f33d79581bfd2b0457cb189fda6d90fed287ddc9f2ba3eb124b67]);\n    }\n    \n    function withdrawToken(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x11cb;\n        var var2 = arg1;\n        var0 = func_1B8A(var1, var2);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3 & temp2;\n        memory[0x20:0x40] = 0x07;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = arg0 & temp2;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = temp5;\n        var1 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = arg1;\n        var2 = temp6 + 0x44;\n        var var3 = 0x20;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp7;\n        temp7, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp7) { revert(memory[0x00:0x00]); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = 0x02 ** 0xa0 - 0x01;\n        var temp9 = msg.sender;\n        memory[0x00:0x20] = temp9 & temp8;\n        memory[0x20:0x40] = 0x07;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        var temp11 = arg0;\n        memory[0x00:0x20] = temp11 & temp8;\n        memory[0x20:0x40] = temp10;\n        var temp12 = storage[keccak256(memory[0x00:0x40])];\n        var temp13 = memory[0x40:0x60];\n        var temp14 = 0x02 ** 0xa0 - 0x01;\n        memory[temp13:temp13 + 0x20] = temp14 & temp9;\n        memory[temp13 + 0x20:temp13 + 0x20 + 0x20] = temp14 & temp11;\n        memory[temp13 + 0x40:temp13 + 0x40 + 0x20] = arg1;\n        memory[temp13 + 0x60:temp13 + 0x60 + 0x20] = temp12;\n        var temp15 = memory[0x40:0x60];\n        log(memory[temp15:temp15 + (temp13 + 0x80) - temp15], [0xa69fc39b702a6e8195370ae2252cc11b4445837cc4abe15ac39123f2f2d8770d]);\n    }\n    \n    function setFeeCollector(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function packs(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function MAX_FEE() returns (var r0) { return 0x1388; }\n    \n    function coeffs(var arg0) returns (var arg0, var r1) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        arg0 = temp0 & 0xff;\n        r1 = temp0 / 0x0100 & 0x02 ** 0x80 - 0x01;\n        return arg0, r1;\n    }\n    \n    function feeCollector() returns (var r0) { return storage[0x03] & 0x02 ** 0xa0 - 0x01; }\n    \n    function setCoeff(var arg0, var arg1, var arg2, var arg3, var arg4) {\n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & address(this)) * 0x01000000000000000000000000;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (temp1 & msg.sender) * 0x01000000000000000000000000;\n        memory[temp0 + 0x28:temp0 + 0x28 + 0x20] = (arg0 & 0xff) * 0x02 ** 0xf8;\n        memory[temp0 + 0x29:temp0 + 0x29 + 0x20] = (arg1 & 0x02 ** 0x80 - 0x01) * 0x0100000000000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = keccak256(memory[temp2:temp2 + (temp0 + 0x39) - temp2]);\n        var var0 = temp3;\n        var var1 = storage[0x0a] & 0x02 ** 0xa0 - 0x01;\n        var var2 = 0x01;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = 0x00;\n        memory[0x40:0x60] = temp4 + 0x20;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = var0;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = arg2 & 0xff;\n        memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = arg3;\n        memory[temp5 + 0x60:temp5 + 0x60 + 0x20] = arg4;\n        var var3 = temp5 + 0x80;\n        var temp6 = memory[0x40:0x60];\n        var temp7;\n        temp7, memory[temp6 - 0x20:temp6 - 0x20 + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp6:temp6 + var3 - temp6]);\n    \n        if (!temp7) { revert(memory[0x00:0x00]); }\n    \n        if (memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xff >= 0x64) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0x02 ** 0x80 - 0x01 <= block.timestamp) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0x02 ** 0x80 - 0x01 > block.timestamp + 0x2e2480) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x14d7;\n        var2 = msg.sender;\n        var3 = arg0;\n        var var4 = arg1;\n        var var5 = 0x00;\n        func_15F5(var2, var3, var4, var5);\n    }\n    \n    function addPack(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xff >= 0x64) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 & 0x02 ** 0x80 - 0x01 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg2 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x1538;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_15DB(var2, var3);\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = arg2;\n    }\n    \n    function MAX_EXPIRE_DELAY() returns (var r0) { return 0x0258; }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { return; }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function PRICE_MUL() returns (var r0) { return 0x0de0b6b3a7640000; }\n    \n    function ETH_SIGN_TYPED_DATA_ARGHASH() returns (var r0) { return 0x3da4a05d8449a7bc291302cce8a490cf367b98ec37200076c3f13f1f2308fd74; }\n    \n    function func_15DB(var arg0, var arg1) returns (var r0) { return (arg0 & 0xff) + (arg1 & 0x02 ** 0x80 - 0x01) * 0x0100; }\n    \n    function func_15F5(var arg0, var arg1, var arg2, var arg3) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        var temp1 = arg1;\n        memory[temp0:temp0 + 0x20] = temp1 & 0xff;\n        var temp2 = arg2;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp2 & 0x02 ** 0x80 - 0x01;\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0b;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (memory[temp0:temp0 + 0x20] & 0xff) | (storage[temp4] & ~0xff);\n        storage[temp4] = (storage[temp4] & ~0xffffffffffffffffffffffffffffffff00) | (memory[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0x02 ** 0x80 - 0x01) * 0x0100;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = temp1 & 0xff;\n        memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = temp2 & 0x02 ** 0x80 - 0x01;\n        memory[temp5 + 0x60:temp5 + 0x60 + 0x20] = arg3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x80) - temp6], [0x0b9ed8798ce889acd8779436736d269415d869d25c5de987a3e7d9f66f71cac1]);\n    }\n    \n    function func_173C(var arg0, var arg1) {\n        var var0 = storage[0x02];\n        var var1 = arg1;\n        var var2 = arg0 * 0x06 + 0x07;\n    \n        if (var2 >= memory[var1:var1 + 0x20]) { assert(); }\n    \n        if (block.timestamp <= memory[var2 * 0x20 + var1 + 0x20:var2 * 0x20 + var1 + 0x20 + 0x20] + var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_176C(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n        var var11 = 0x01;\n        var var12 = arg1;\n        var var13 = 0x00;\n    \n        if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n    \n        if (memory[var13 * 0x20 + var12 + 0x20:var13 * 0x20 + var12 + 0x20 + 0x20] == var11) {\n            var1 = 0x00;\n            var11 = arg2;\n            var12 = arg0 + 0x01;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n        label_17B6:\n            var2 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg2;\n            var12 = 0x00;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var3 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x04;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var4 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x05;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var5 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x06;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var6 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x07;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var7 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg1;\n            var12 = arg0 * 0x06 + 0x08;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var8 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg3;\n            var12 = arg0 * 0x02 + 0x02;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var9 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var11 = arg3;\n            var12 = arg0 * 0x02 + 0x03;\n        \n            if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n        \n            var temp0 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n            var10 = temp0;\n            var11 = 0x18bf;\n            var12 = var2;\n            var13 = var1;\n            var var14 = var3;\n            var var15 = var4;\n            var var16 = var5;\n            var var17 = var6;\n            var var18 = var7;\n            var var19 = var8;\n            var var20 = var9;\n            var var21 = var10;\n            return func_1B9C(var12, var13, var14, var15, var16, var17, var18, var19, var20, var21);\n        } else {\n            var11 = 0x01;\n            var1 = var11;\n            var11 = arg2;\n            var12 = arg0 + 0x01;\n        \n            if (var12 < memory[var11:var11 + 0x20]) { goto label_17B6; }\n            else { assert(); }\n        }\n    }\n    \n    function func_1996(var arg0, var arg1, var arg2) {\n        var var0 = storage[0x0a] & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0x01;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = 0x02;\n    \n        if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n    \n        var3 = memory[var4 * 0x20 + var3 + 0x20:var4 * 0x20 + var3 + 0x20 + 0x20];\n        var4 = arg2;\n        var var5 = 0x00;\n    \n        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n    \n        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n        var5 = arg2;\n        var var6 = 0x01;\n    \n        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n    \n        var temp0 = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20];\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x00;\n        memory[0x40:0x60] = temp1 + 0x20;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = var2;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var3 & 0xff;\n        memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = var4;\n        memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = temp0;\n        var2 = temp2 + 0x80;\n        var temp3 = memory[0x40:0x60];\n        var temp4;\n        temp4, memory[temp3 - 0x20:temp3 - 0x20 + 0x20] = address(var1).call.gas(msg.gas - 0x646e)(memory[temp3:temp3 + var2 - temp3]);\n    \n        if (!temp4) { revert(memory[0x00:0x00]); }\n    \n        if (memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1A65(var arg0, var arg1) {\n        var var0 = 0xee7e85974085b8a74acdea8330a9e8c09680dccea6f6df360491edf22a27cc3b;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        var var3 = 0x01;\n    \n        if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n    \n        var2 = memory[var3 * 0x20 + var2 + 0x20:var3 * 0x20 + var2 + 0x20 + 0x20];\n        var3 = arg0;\n        var var4 = 0x00;\n    \n        if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n    \n        var3 = memory[var4 * 0x20 + var3 + 0x20:var4 * 0x20 + var3 + 0x20 + 0x20];\n        var4 = arg1;\n        var var5 = 0x00;\n    \n        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n    \n        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var6 = 0x00;\n        var5 = keccak256(memory[var6:var6 + 0x40]);\n        var var7 = arg1;\n        var var8 = var6;\n    \n        if (var8 >= memory[var7:var7 + 0x20]) { assert(); }\n    \n        var temp0 = var6;\n        memory[temp0:temp0 + 0x20] = memory[var8 * 0x20 + var7 + 0x20:var8 * 0x20 + var7 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = var5;\n        var temp2 = storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = storage[keccak256(memory[0x00:0x40])];\n        var temp4 = memory[0x40:0x60];\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[temp4:temp4 + 0x20] = temp5 & var1;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var2;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = var3;\n        memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = temp5 & var4;\n        memory[temp4 + 0x80:temp4 + 0x80 + 0x20] = temp2;\n        memory[temp4 + 0xa0:temp4 + 0xa0 + 0x20] = temp3;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp4 + 0xc0) - temp6], [stack[-9]]);\n    }\n    \n    function func_1B8A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1B9C(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg7 >= 0x03e8) {\n            var var1 = 0x1c56;\n            var var2 = arg1;\n            var var3 = arg2;\n            var var4 = arg3;\n            var var5 = arg4;\n            var var6 = arg5;\n            var var7 = arg6;\n            var1 = func_1FA2(var2, var3, var4, var5, var6, var7);\n            var temp0 = var1;\n            var0 = temp0;\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0x01;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x00;\n            memory[0x40:0x60] = temp1 + 0x20;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var0;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = arg7 - 0x03e8 & 0xff;\n            memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = arg8;\n            memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = arg9;\n            var3 = temp2 + 0x80;\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3 - 0x20:temp3 - 0x20 + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp3:temp3 + var3 - temp3]);\n        \n            if (!temp4) { revert(memory[0x00:0x00]); }\n        \n            if (memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 != var1) { revert(memory[0x00:0x00]); }\n        \n        label_1CE7:\n            return var0;\n        } else {\n            var1 = 0x1bb6;\n            var2 = arg1;\n            var3 = arg2;\n            var4 = arg3;\n            var5 = arg4;\n            var6 = arg5;\n            var7 = arg6;\n            var1 = func_1E0A(var2, var3, var4, var5, var6, var7);\n            var temp5 = var1;\n            var0 = temp5;\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0x01;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x00;\n            memory[0x40:0x60] = temp6 + 0x20;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = var0;\n            memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = arg7 & 0xff;\n            memory[temp7 + 0x40:temp7 + 0x40 + 0x20] = arg8;\n            memory[temp7 + 0x60:temp7 + 0x60 + 0x20] = arg9;\n            var3 = temp7 + 0x80;\n            var temp8 = memory[0x40:0x60];\n            var temp9;\n            temp9, memory[temp8 - 0x20:temp8 - 0x20 + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp8:temp8 + var3 - temp8]);\n        \n            if (!temp9) { revert(memory[0x00:0x00]); }\n        \n            if (memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var1) { goto label_1CE7; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_1E0A(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0 & 0xff == 0x01;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_1E2A:\n            var1 = 0x3da4a05d8449a7bc291302cce8a490cf367b98ec37200076c3f13f1f2308fd74;\n            var var2 = address(this);\n        \n            if (arg0 & 0xff == 0x01) {\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                memory[0x40:0x60] = var3 + 0x40;\n                memory[var3:var3 + 0x20] = 0x03;\n                memory[var3 + 0x20:var3 + 0x20 + 0x20] = 0x4255590000000000000000000000000000000000000000000000000000000000;\n                var var4 = arg1;\n                var var5 = arg2;\n                var var6 = arg3;\n                var var7 = arg4;\n                var var8 = arg5;\n                var temp1 = memory[0x40:0x60];\n                var var9 = temp1;\n                memory[var9:var9 + 0x20] = (var2 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                var var10 = var9 + 0x14;\n                var var11 = var3 + 0x20;\n                var var12 = memory[var3:var3 + 0x20];\n                var var13 = var12;\n                var var14 = var10;\n                var var15 = var11;\n            \n                if (var13 < 0x20) {\n                label_1F17:\n                    var temp2 = 0x0100 ** (0x20 - var13) - 0x01;\n                    var temp3 = var14;\n                    memory[temp3:temp3 + 0x20] = (memory[temp3:temp3 + 0x20] & temp2) | (memory[var15:var15 + 0x20] & ~temp2);\n                    var temp4 = var12 + var10;\n                    memory[temp4:temp4 + 0x20] = (var4 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                    memory[temp4 + 0x14:temp4 + 0x14 + 0x20] = var5;\n                    memory[temp4 + 0x34:temp4 + 0x34 + 0x20] = var6;\n                    memory[temp4 + 0x54:temp4 + 0x54 + 0x20] = var7;\n                    memory[temp4 + 0x74:temp4 + 0x74 + 0x20] = var8;\n                    var temp5 = memory[0x40:0x60];\n                    var temp6 = keccak256(memory[temp5:temp5 + (temp4 + 0x94) - temp5]);\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = var1;\n                    memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = temp6;\n                    var temp8 = memory[0x40:0x60];\n                    return keccak256(memory[temp8:temp8 + (temp7 + 0x40) - temp8]);\n                } else {\n                label_1F01:\n                    var temp9 = var15;\n                    var temp10 = var14;\n                    memory[temp10:temp10 + 0x20] = memory[temp9:temp9 + 0x20];\n                    var13 = var13 + ~0x1f;\n                    var14 = temp10 + 0x20;\n                    var15 = temp9 + 0x20;\n                \n                    if (var13 < 0x20) { goto label_1F17; }\n                    else { goto label_1F01; }\n                }\n            } else {\n                var temp11 = memory[0x40:0x60];\n                var3 = temp11;\n                memory[0x40:0x60] = var3 + 0x40;\n                memory[var3:var3 + 0x20] = 0x04;\n                memory[var3 + 0x20:var3 + 0x20 + 0x20] = 0x53454c4c00000000000000000000000000000000000000000000000000000000;\n                var4 = arg1;\n                var5 = arg2;\n                var6 = arg3;\n                var7 = arg4;\n                var8 = arg5;\n                var temp12 = memory[0x40:0x60];\n                var9 = temp12;\n                memory[var9:var9 + 0x20] = (var2 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                var10 = var9 + 0x14;\n                var temp13 = var3;\n                var11 = temp13 + 0x20;\n                var12 = memory[temp13:temp13 + 0x20];\n                var13 = var12;\n                var14 = var10;\n                var15 = var11;\n            \n                if (var13 < 0x20) { goto label_1F17; }\n                else { goto label_1F01; }\n            }\n        } else if (!(arg0 & 0xff)) { goto label_1E2A; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1FA2(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & address(this)) * 0x01000000000000000000000000;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (arg0 & 0xff) * 0x02 ** 0xf8;\n        memory[temp0 + 0x15:temp0 + 0x15 + 0x20] = (temp1 & arg1) * 0x01000000000000000000000000;\n        memory[temp0 + 0x29:temp0 + 0x29 + 0x20] = arg2;\n        memory[temp0 + 0x49:temp0 + 0x49 + 0x20] = arg3;\n        memory[temp0 + 0x69:temp0 + 0x69 + 0x20] = arg4;\n        memory[temp0 + 0x89:temp0 + 0x89 + 0x20] = arg5;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = keccak256(memory[temp2:temp2 + (temp0 + 0xa9) - temp2]);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n        memory[temp4 + 0x1c:temp4 + 0x1c + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        return keccak256(memory[temp5:temp5 + (temp4 + 0x3c) - temp5]);\n    }\n    \n    function func_2723(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x2740;\n        var var2 = 0x2732;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_27CF(var3, var4);\n        return func_2732(var2);\n    }\n    \n    function func_2732(var arg0) returns (var r0) {\n        var var0 = 0x0de0b6b3a7640000;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_2747(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0b;\n    \n        if (block.timestamp >= storage[keccak256(memory[var0:var0 + 0x40])] / 0x0100 & 0x02 ** 0x80 - 0x01) { return arg0; }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0b;\n        var var1 = 0x2740;\n        var var2 = 0x27a6;\n        var var3 = arg0;\n        var var4 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n        var2 = func_27CF(var3, var4);\n        var1 = func_27A6(var2);\n        r0 = var1;\n        // Error: Could not resolve jump destination!\n    }\n    \n    function func_27A6(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_27BE(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x27ca;\n        var var1 = storage[0x01];\n        var var2 = arg0;\n        var0 = func_0781(var1, var2);\n        var1 = 0x00;\n        var2 = var1;\n        var var3 = var0;\n        var var4 = arg1;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_27CF(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 71.70038676261902,
	"usage": {
		"completion_tokens": 835,
		"prompt_tokens": 25402,
		"total_tokens": 26237
	}
}