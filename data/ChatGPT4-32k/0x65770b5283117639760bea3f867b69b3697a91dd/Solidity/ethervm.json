{
	"address": "0x65770b5283117639760bea3f867b69b3697a91dd",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the solidity contract code based on the provided decompiled code. Note that decompiled code does not provide all the necessary details and variable names, so some assumptions have been made:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping (address => uint256) public balances;\n    mapping (uint => address) public accountIndex;\n    uint public numAccounts = 0;\n    address public owner;\n    address public delegateContract;\n\n    function main() public {\n        uint256 input = uint256(msg.data[0x00:0x20]);\n        address from = msg.sender;\n        uint256 value = msg.value;\n\n        // Check for each function signature\n        if (input == 0xc87b56dd) {\n            // Code for function 1\n            // ...\n        } else if (input == 0x4f6ccce7) {\n            // Code for function 2\n            // ...\n        } else if (input == 0x2f745c59) {\n            // Code for function 3\n            // ...\n        } else if (input == 0x23b872dd) {\n            // Code for function 4\n            // ...\n        } else if (input == 0xa22cb465) {\n            // Code for function 5\n            // ...\n        } else if (input == 0x42842e0e) {\n            // Code for function 6\n            // ...\n        } else if (input == 0xb88d4fde) {\n            // Code for function 7\n            // ...\n        } else if (input == 0x6a627842) {\n            // Code for function 8\n            // ...\n        } else if (input == 0x95d89b41) {\n            // Code for function 9\n            // ...\n        } else if (input == 0x18160ddd) {\n            // Code for function 10\n            // ...\n        } else if (input == 0x07546172) {\n            // Code for function 11\n            // ...\n        } else if (input == 0x2b00af34) {\n            // Code for function 12\n            // ...\n        } else if (input == 0x4e73a241) {\n            // Code for function 13\n            // ...\n        } else if (input == 0x6352211e) {\n            // Code for function 14\n            // ...\n        } else if (input == 0x70a08231) {\n            // Code for function 15\n            // ...\n        } else if (input == 0x081812fc) {\n            // Code for function 16\n            // ...\n        } else if (input == 0xe985e9c5) {\n            // Code for function 17\n            // ...\n        } else if (input == 0xf1753550) {\n            // Code for function 18\n            // ...\n        } else {\n            revert();\n        }\n    }\n}\n```\nPlease note that this is a skeleton of the contract and the actual function body needs to be filled according to the business logic.",
				"role": "assistant"
			}
		}
	],
	"created": 1700475285,
	"id": "chatcmpl-8MvafgUSnMsGtZ2hQqm5uYgDNp5iI",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] == 0xc87b56dd) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            if (!storage[0x05]) {\n                memory[0x03c0:0x03e0] = 0x4f;\n                memory[0x03e0:0x0400] = 0x68747470733a2f2f636c6f7564666c6172652d697066732e636f6d2f69706673;\n                memory[0x0400:0x0420] = 0x2f516d4e5a4565414e317a6b36684c6f48485245566b5a37506f5059616f4837;\n                memory[0x0420:0x0440] = 0x6e364c5236773951416345633239680000000000000000000000000000000000;\n                var0 = 0x03c0;\n                var temp57 = memory[var0:var0 + 0x20] + 0x20;\n                var1 = temp57;\n                var temp58;\n                temp58, memory[0x04a0:0x04a0 + var1] = address(0x04).call.gas(var1 / 0x0a + 0x12)(memory[var0:var0 + var1]);\n            \n                if (!temp58) { revert(memory[0x00:0x00]); }\n            \n                var temp59 = memory[0x04a0:0x04c0];\n                var0 = (temp59 + 0x1f) - temp59 - 0x01 % 0x20;\n                var1 = 0x0540;\n                var temp60 = memory[0x04a0:0x04c0];\n                memory[var1:var1 + 0x20] = temp60;\n                var2 = temp60 + 0x4f;\n            \n                if (memory[0x0540:0x0560] > var0) { goto label_0183; }\n            \n            label_0187:\n                memory[memory[0x0540:0x0560] + 0x04c0:memory[0x0540:0x0560] + 0x04c0 + 0x01] = 0x00;\n                var temp61 = var1;\n                var temp62 = memory[temp61:temp61 + 0x20] + 0x01;\n                memory[temp61:temp61 + 0x20] = temp62;\n            \n                if (var2 == temp62) { goto label_01A3; }\n            \n                if (memory[0x0540:0x0560] <= var0) { goto label_0187; }\n            \n            label_0183:\n            \n            label_01A3:\n                memory[0x0480:0x04a0] = 0x20;\n                var temp63 = memory[0x04a0:0x04c0] + 0x40;\n                return memory[0x0480:0x0480 + (temp63 + 0x1f) - temp63 - 0x01 % 0x20];\n            } else if (address(storage[0x05]).code.length) {\n                if (!(address(this) ~ storage[0x05])) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0160:0x0180] = 0xc87b56dd;\n                memory[0x0180:0x01a0] = memory[0x0140:0x0160];\n                var temp49;\n                temp49, memory[0x01e0:0x02a0] = address(storage[0x05]).staticcall.gas(msg.gas)(memory[0x017c:0x01a0]);\n            \n                if (!temp49) { revert(memory[0x00:0x00]); }\n            \n                var0 = 0x0200;\n                var temp50 = memory[var0:var0 + 0x20] + 0x20;\n                var1 = temp50;\n                var temp51;\n                temp51, memory[0x02e0:0x02e0 + var1] = address(0x04).call.gas(var1 / 0x0a + 0x12)(memory[var0:var0 + var1]);\n            \n                if (!temp51) { revert(memory[0x00:0x00]); }\n            \n                var temp52 = memory[0x02e0:0x0300];\n                var0 = (temp52 + 0x1f) - temp52 - 0x01 % 0x20;\n                var1 = 0x03a0;\n                var temp53 = memory[0x02e0:0x0300];\n                memory[var1:var1 + 0x20] = temp53;\n                var2 = temp53 + 0x80;\n            \n                if (memory[0x03a0:0x03c0] > var0) { goto label_0262; }\n            \n            label_0266:\n                memory[memory[0x03a0:0x03c0] + 0x0300:memory[0x03a0:0x03c0] + 0x0300 + 0x01] = 0x00;\n                var temp54 = var1;\n                var temp55 = memory[temp54:temp54 + 0x20] + 0x01;\n                memory[temp54:temp54 + 0x20] = temp55;\n            \n                if (var2 == temp55) { goto label_0282; }\n            \n                if (memory[0x03a0:0x03c0] <= var0) { goto label_0266; }\n            \n            label_0262:\n            \n            label_0282:\n                memory[0x02c0:0x02e0] = 0x20;\n                var temp56 = memory[0x02e0:0x0300] + 0x40;\n                return memory[0x02c0:0x02c0 + (temp56 + 0x1f) - temp56 - 0x01 % 0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0x4f6ccce7) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0140:0x0160] >= storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = memory[0x0140:0x0160];\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x2f745c59) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (memory[0x0160:0x0180] >= storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x0b;\n            var temp48 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = temp48;\n            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n            return memory[0x00:0x20];\n        } else if (0x00) {\n            // Error: StackRead before write???\n            var var-3;\n            // Error: StackRead before write???\n            var var-1;\n            // Error: StackRead before write???\n            var var-5;\n            // Error: StackRead before write???\n            var var-2;\n            // Error: StackRead before write???\n            var var-4;\n            memory[0x01c0:0x01e0] = var-1;\n            memory[0x0140:0x0160] = var-2;\n            memory[0x0160:0x0180] = var-3;\n            memory[0x0180:0x01a0] = var-4;\n            memory[0x01a0:0x01c0] = var-5;\n            memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n            memory[0xc0:0xe0] = 0x06;\n            memory[0x01e0:0x0200] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (!((memory[0x01e0:0x0200] == memory[0x0140:0x0160]) & (memory[0x0160:0x0180] != 0x00))) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = memory[0x01a0:0x01c0] == memory[0x01e0:0x0200];\n            memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n            memory[0xc0:0xe0] = 0x08;\n            memory[0x0220:0x0240] = memory[0x01a0:0x01c0] == storage[keccak256(memory[0xc0:0x0100])];\n            memory[0xe0:0x0100] = memory[0x01e0:0x0200];\n            memory[0xc0:0xe0] = 0x09;\n            var temp31 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = memory[0x01a0:0x01c0];\n            memory[0xc0:0xe0] = temp31;\n            memory[0x0240:0x0260] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (!(memory[0x0240:0x0260] | memory[0x0200:0x0220] | memory[0x0220:0x0240])) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] < 0x01) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n            memory[0x0260:0x0280] = storage[keccak256(memory[0xc0:0x0100])] - 0x01;\n            memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n            memory[0xc0:0xe0] = 0x0c;\n            memory[0x0280:0x02a0] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (memory[0x0260:0x0280] != memory[0x0280:0x02a0]) {\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp32 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                memory[0xc0:0xe0] = temp32;\n                var temp33 = storage[keccak256(memory[0xc0:0x0100])];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp34 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0280:0x02a0];\n                memory[0xc0:0xe0] = temp34;\n                storage[keccak256(memory[0xc0:0x0100])] = temp33;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp35 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                memory[0xc0:0xe0] = temp35;\n                storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x07;\n                memory[0x02a0:0x02c0] = storage[keccak256(memory[0xc0:0x0100])];\n                var temp36 = memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp37 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x02a0:0x02c0];\n                memory[0xc0:0xe0] = temp37;\n                storage[keccak256(memory[0xc0:0x0100])] = temp36;\n                var temp38 = memory[0x02a0:0x02c0];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x0c;\n                storage[keccak256(memory[0xc0:0x0100])] = temp38;\n                var temp39 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x06;\n                storage[keccak256(memory[0xc0:0x0100])] = temp39;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x07;\n                var-5 = keccak256(memory[0xc0:0x0100]);\n            \n                if (storage[var-5] < 0x01) { revert(memory[0x00:0x00]); }\n            \n            label_0587:\n                var temp40 = var-5;\n                storage[temp40] = storage[temp40] - 0x01;\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x07;\n                var temp41 = keccak256(memory[0xc0:0x0100]);\n                var-5 = temp41;\n            \n                if (storage[var-5] + 0x01 < storage[var-5]) { revert(memory[0x00:0x00]); }\n            \n                var temp42 = var-5;\n                storage[temp42] = storage[temp42] + 0x01;\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x08;\n            \n                if (!(storage[keccak256(memory[0xc0:0x0100])] ~ 0x00)) {\n                    log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180], memory[0x0180:0x01a0]]);\n                    // Error: Could not resolve jump destination!\n                } else {\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x08;\n                    storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                    log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180], memory[0x0180:0x01a0]]);\n                    // Error: Could not resolve jump destination!\n                }\n            } else {\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp43 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                memory[0xc0:0xe0] = temp43;\n                storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x07;\n                memory[0x02a0:0x02c0] = storage[keccak256(memory[0xc0:0x0100])];\n                var temp44 = memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp45 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x02a0:0x02c0];\n                memory[0xc0:0xe0] = temp45;\n                storage[keccak256(memory[0xc0:0x0100])] = temp44;\n                var temp46 = memory[0x02a0:0x02c0];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x0c;\n                storage[keccak256(memory[0xc0:0x0100])] = temp46;\n                var temp47 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x06;\n                storage[keccak256(memory[0xc0:0x0100])] = temp47;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x07;\n                var-5 = keccak256(memory[0xc0:0x0100]);\n            \n                if (storage[var-5] >= 0x01) { goto label_0587; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else if (memory[0x00:0x20] == 0x23b872dd) {\n            memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            memory[0x01a0:0x01c0] = 0x092863fe;\n            memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n            memory[0x01e0:0x0200] = memory[0x0160:0x0180];\n            memory[0x0200:0x0220] = memory[0x0180:0x01a0];\n            memory[0x0220:0x0240] = msg.sender;\n            var3 = memory[0x0220:0x0240];\n            var4 = memory[0x0200:0x0220];\n            var5 = memory[0x01e0:0x0200];\n            var6 = memory[0x01c0:0x01e0];\n            var7 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x42842e0e) {\n            memory[0x0600:0x0620] = 0x00;\n            var0 = 0x0600;\n            var temp29 = memory[var0:var0 + 0x20] + 0x20;\n            var1 = temp29;\n            var temp30;\n            temp30, memory[0x01c0:0x01c0 + var1] = address(0x04).call.gas(var1 / 0x0a + 0x12)(memory[var0:var0 + var1]);\n        \n            if (temp30) { goto label_074D; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0xb88d4fde) {\n            memory[0x01c0:0x05e0] = msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x0420];\n        \n            if (msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x20] > 0x0400) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x0600] = msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x0440];\n            goto label_074D;\n        } else if (0x00) {\n        label_074D:\n            memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            var4 = memory[0x01c0:0x01e0];\n            var5 = memory[0x01e0:0x0200];\n            var var6 = memory[0x0200:0x0220];\n            var var7 = memory[0x0220:0x0240];\n            var var8 = memory[0x0240:0x0260];\n            var var9 = memory[0x0260:0x0280];\n            var var10 = memory[0x0280:0x02a0];\n            var var11 = memory[0x02a0:0x02c0];\n            var var12 = memory[0x02c0:0x02e0];\n            var var13 = memory[0x02e0:0x0300];\n            var var14 = memory[0x0300:0x0320];\n            var var15 = memory[0x0320:0x0340];\n            var var16 = memory[0x0340:0x0360];\n            var var17 = memory[0x0360:0x0380];\n            var var18 = memory[0x0380:0x03a0];\n            var var19 = memory[0x03a0:0x03c0];\n            var var20 = memory[0x03c0:0x03e0];\n            var var21 = memory[0x03e0:0x0400];\n            var var22 = memory[0x0400:0x0420];\n            var var23 = memory[0x0420:0x0440];\n            var var24 = memory[0x0440:0x0460];\n            var var25 = memory[0x0460:0x0480];\n            var var26 = memory[0x0480:0x04a0];\n            var var27 = memory[0x04a0:0x04c0];\n            var var28 = memory[0x04c0:0x04e0];\n            var var29 = memory[0x04e0:0x0500];\n            var var30 = memory[0x0500:0x0520];\n            var var31 = memory[0x0520:0x0540];\n            var var32 = memory[0x0540:0x0560];\n            var var33 = memory[0x0560:0x0580];\n            var var34 = memory[0x0580:0x05a0];\n            var var35 = memory[0x05a0:0x05c0];\n            var var36 = memory[0x05c0:0x05e0];\n            var var37 = memory[0x05e0:0x0600];\n            var var38 = memory[0x0600:0x0620];\n            var var39 = memory[0x0620:0x0640];\n            memory[0x0640:0x0660] = 0x092863fe;\n            memory[0x0660:0x0680] = memory[0x0140:0x0160];\n            memory[0x0680:0x06a0] = memory[0x0160:0x0180];\n            memory[0x06a0:0x06c0] = memory[0x0180:0x01a0];\n            memory[0x06c0:0x06e0] = msg.sender;\n            var var40 = memory[0x06c0:0x06e0];\n            var var41 = memory[0x06a0:0x06c0];\n            var var42 = memory[0x0680:0x06a0];\n            var var43 = memory[0x0660:0x0680];\n            var var44 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x095ea7b3) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = 0x06;\n            memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0x0100])];\n            memory[0x01a0:0x01c0] = msg.sender == memory[0x0180:0x01a0];\n            memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n            memory[0xc0:0xe0] = 0x09;\n            var temp27 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = temp27;\n            memory[0x01c0:0x01e0] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (!(memory[0x01a0:0x01c0] | memory[0x01c0:0x01e0])) { revert(memory[0x00:0x00]); }\n        \n            var temp28 = memory[0x0140:0x0160];\n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = 0x08;\n            storage[keccak256(memory[0xc0:0x0100])] = temp28;\n            log(memory[0x00:0x00], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, memory[0x0180:0x01a0], memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n            stop();\n        } else if (memory[0x00:0x20] == 0xa22cb465) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n        \n            if (!(memory[0x0140:0x0160] ~ msg.sender)) { revert(memory[0x00:0x00]); }\n        \n            var temp25 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x09;\n            var temp26 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = temp26;\n            storage[keccak256(memory[0xc0:0x0100])] = temp25;\n            memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n            log(memory[0x0180:0x01a0], [0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, msg.sender, memory[0x0140:0x0160]]);\n            stop();\n        } else if (memory[0x00:0x20] == 0x6a627842) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (!((msg.sender == storage[0x03]) & (memory[0x0140:0x0160] != 0x00))) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x0180] = storage[0x02];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n            memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (!address(storage[0x04]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ storage[0x04])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x01e0] = 0x18160ddd;\n            var temp17;\n            temp17, memory[0x0220:0x0240] = address(storage[0x04]).staticcall.gas(msg.gas)(memory[0x01dc:0x01e0]);\n        \n            if (!temp17) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = memory[0x0220:0x0240];\n        \n            if (0x1b1ae4d6e2ef500000 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0240:0x0260] = 0x1b1ae4d6e2ef500000 - memory[0x01a0:0x01c0];\n            var0 = memory[0x0240:0x0260];\n        \n            if (!memory[0x0160:0x0180]) {\n                var1 = 0x00;\n                goto label_0C74;\n            } else if ((memory[0x0160:0x0180] * 0x0de0b6b3a7640000) / memory[0x0160:0x0180] == 0x0de0b6b3a7640000) {\n                var1 = memory[0x0160:0x0180] * 0x0de0b6b3a7640000;\n            \n            label_0C74:\n            \n                if (var1 >= var0) { revert(memory[0x00:0x00]); }\n            \n                var temp18 = memory[0x0140:0x0160];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x06;\n                storage[keccak256(memory[0xc0:0x0100])] = temp18;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x07;\n                var temp19 = keccak256(memory[0xc0:0x0100]);\n                var0 = temp19;\n            \n                if (storage[var0] + 0x01 < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp20 = var0;\n                storage[temp20] = storage[temp20] + 0x01;\n                var temp21 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp22 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = temp22;\n                storage[keccak256(memory[0xc0:0x0100])] = temp21;\n                var temp23 = memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x0c;\n                storage[keccak256(memory[0xc0:0x0100])] = temp23;\n                var0 = 0x02;\n            \n                if (storage[var0] + 0x01 < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp24 = var0;\n                storage[temp24] = storage[temp24] + 0x01;\n                log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0x2c4d4d18) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x03] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] == 0xbde9084c) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x05] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] != 0x06fdde03) {\n            if (memory[0x00:0x20] != 0x95d89b41) {\n                if (memory[0x00:0x20] != 0x18160ddd) {\n                    if (memory[0x00:0x20] != 0x07546172) {\n                        if (memory[0x00:0x20] != 0x2b00af34) {\n                            if (memory[0x00:0x20] != 0x4e73a241) {\n                                if (memory[0x00:0x20] == 0x6352211e) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x06;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0x70a08231) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x07;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0x081812fc) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x08;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0xe985e9c5) {\n                                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    var var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x24:0x44];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x09;\n                                    var temp0 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                    memory[0xc0:0xe0] = temp0;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] != 0xf1753550) { revert(memory[0x00:0x00]); }\n                                else {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x0a;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                }\n                            } else if (!msg.value) {\n                                memory[0x00:0x20] = storage[0x05];\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x04];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x03];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    memory[0x00:0x20] = storage[0x02];\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = 0x01;\n                memory[0xc0:0xe0] = var0;\n                var var1 = keccak256(memory[0xc0:0xe0]);\n                var var2 = 0x0180;\n                var temp1 = storage[var1] + 0x20;\n                var var3 = temp1;\n                var var4 = 0x0120;\n                memory[var4:var4 + 0x20] = 0x00;\n                var var5 = 0x02;\n            \n                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0F10; }\n            \n            label_0F14:\n                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                var temp2 = var4;\n                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                memory[temp2:temp2 + 0x20] = temp3;\n            \n                if (var5 == temp3) { goto label_0F36; }\n            \n                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0F14; }\n            \n            label_0F10:\n            \n            label_0F36:\n                var temp4 = memory[0x0180:0x01a0];\n                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                var1 = 0x01e0;\n                var temp5 = memory[0x0180:0x01a0];\n                memory[var1:var1 + 0x20] = temp5;\n                var2 = temp5 + 0x20;\n            \n                if (memory[0x01e0:0x0200] > var0) { goto label_0F68; }\n            \n            label_0F6C:\n                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                var temp6 = var1;\n                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                memory[temp6:temp6 + 0x20] = temp7;\n            \n                if (var2 == temp7) { goto label_0F88; }\n            \n                if (memory[0x01e0:0x0200] <= var0) { goto label_0F6C; }\n            \n            label_0F68:\n            \n            label_0F88:\n                memory[0x0160:0x0180] = 0x20;\n                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = 0x00;\n            memory[0xc0:0xe0] = var0;\n            var1 = keccak256(memory[0xc0:0xe0]);\n            var2 = 0x0180;\n            var temp9 = storage[var1] + 0x20;\n            var3 = temp9;\n            var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var5 = 0x02;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0E2D; }\n        \n        label_0E31:\n            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n            var temp10 = var4;\n            var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n            memory[temp10:temp10 + 0x20] = temp11;\n        \n            if (var5 == temp11) { goto label_0E53; }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0E31; }\n        \n        label_0E2D:\n        \n        label_0E53:\n            var temp12 = memory[0x0180:0x01a0];\n            var0 = (temp12 + 0x1f) - temp12 - 0x01 % 0x20;\n            var1 = 0x01e0;\n            var temp13 = memory[0x0180:0x01a0];\n            memory[var1:var1 + 0x20] = temp13;\n            var2 = temp13 + 0x20;\n        \n            if (memory[0x01e0:0x0200] > var0) { goto label_0E85; }\n        \n        label_0E89:\n            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n            var temp14 = var1;\n            var temp15 = memory[temp14:temp14 + 0x20] + 0x01;\n            memory[temp14:temp14 + 0x20] = temp15;\n        \n            if (var2 == temp15) { goto label_0EA5; }\n        \n            if (memory[0x01e0:0x0200] <= var0) { goto label_0E89; }\n        \n        label_0E85:\n        \n        label_0EA5:\n            memory[0x0160:0x0180] = 0x20;\n            var temp16 = memory[0x0180:0x01a0] + 0x40;\n            return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] == 0xc87b56dd) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            if (!storage[0x05]) {\n                memory[0x03c0:0x03e0] = 0x4f;\n                memory[0x03e0:0x0400] = 0x68747470733a2f2f636c6f7564666c6172652d697066732e636f6d2f69706673;\n                memory[0x0400:0x0420] = 0x2f516d4e5a4565414e317a6b36684c6f48485245566b5a37506f5059616f4837;\n                memory[0x0420:0x0440] = 0x6e364c5236773951416345633239680000000000000000000000000000000000;\n                var0 = 0x03c0;\n                var temp57 = memory[var0:var0 + 0x20] + 0x20;\n                var1 = temp57;\n                var temp58;\n                temp58, memory[0x04a0:0x04a0 + var1] = address(0x04).call.gas(var1 / 0x0a + 0x12)(memory[var0:var0 + var1]);\n            \n                if (!temp58) { revert(memory[0x00:0x00]); }\n            \n                var temp59 = memory[0x04a0:0x04c0];\n                var0 = (temp59 + 0x1f) - temp59 - 0x01 % 0x20;\n                var1 = 0x0540;\n                var temp60 = memory[0x04a0:0x04c0];\n                memory[var1:var1 + 0x20] = temp60;\n                var2 = temp60 + 0x4f;\n            \n                if (memory[0x0540:0x0560] > var0) { goto label_0183; }\n            \n            label_0187:\n                memory[memory[0x0540:0x0560] + 0x04c0:memory[0x0540:0x0560] + 0x04c0 + 0x01] = 0x00;\n                var temp61 = var1;\n                var temp62 = memory[temp61:temp61 + 0x20] + 0x01;\n                memory[temp61:temp61 + 0x20] = temp62;\n            \n                if (var2 == temp62) { goto label_01A3; }\n            \n                if (memory[0x0540:0x0560] <= var0) { goto label_0187; }\n            \n            label_0183:\n            \n            label_01A3:\n                memory[0x0480:0x04a0] = 0x20;\n                var temp63 = memory[0x04a0:0x04c0] + 0x40;\n                return memory[0x0480:0x0480 + (temp63 + 0x1f) - temp63 - 0x01 % 0x20];\n            } else if (address(storage[0x05]).code.length) {\n                if (!(address(this) ~ storage[0x05])) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0160:0x0180] = 0xc87b56dd;\n                memory[0x0180:0x01a0] = memory[0x0140:0x0160];\n                var temp49;\n                temp49, memory[0x01e0:0x02a0] = address(storage[0x05]).staticcall.gas(msg.gas)(memory[0x017c:0x01a0]);\n            \n                if (!temp49) { revert(memory[0x00:0x00]); }\n            \n                var0 = 0x0200;\n                var temp50 = memory[var0:var0 + 0x20] + 0x20;\n                var1 = temp50;\n                var temp51;\n                temp51, memory[0x02e0:0x02e0 + var1] = address(0x04).call.gas(var1 / 0x0a + 0x12)(memory[var0:var0 + var1]);\n            \n                if (!temp51) { revert(memory[0x00:0x00]); }\n            \n                var temp52 = memory[0x02e0:0x0300];\n                var0 = (temp52 + 0x1f) - temp52 - 0x01 % 0x20;\n                var1 = 0x03a0;\n                var temp53 = memory[0x02e0:0x0300];\n                memory[var1:var1 + 0x20] = temp53;\n                var2 = temp53 + 0x80;\n            \n                if (memory[0x03a0:0x03c0] > var0) { goto label_0262; }\n            \n            label_0266:\n                memory[memory[0x03a0:0x03c0] + 0x0300:memory[0x03a0:0x03c0] + 0x0300 + 0x01] = 0x00;\n                var temp54 = var1;\n                var temp55 = memory[temp54:temp54 + 0x20] + 0x01;\n                memory[temp54:temp54 + 0x20] = temp55;\n            \n                if (var2 == temp55) { goto label_0282; }\n            \n                if (memory[0x03a0:0x03c0] <= var0) { goto label_0266; }\n            \n            label_0262:\n            \n            label_0282:\n                memory[0x02c0:0x02e0] = 0x20;\n                var temp56 = memory[0x02e0:0x0300] + 0x40;\n                return memory[0x02c0:0x02c0 + (temp56 + 0x1f) - temp56 - 0x01 % 0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0x4f6ccce7) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0140:0x0160] >= storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = memory[0x0140:0x0160];\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x2f745c59) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (memory[0x0160:0x0180] >= storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x0b;\n            var temp48 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = temp48;\n            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n            return memory[0x00:0x20];\n        } else if (0x00) {\n            // Error: StackRead before write???\n            var var-3;\n            // Error: StackRead before write???\n            var var-1;\n            // Error: StackRead before write???\n            var var-5;\n            // Error: StackRead before write???\n            var var-2;\n            // Error: StackRead before write???\n            var var-4;\n            memory[0x01c0:0x01e0] = var-1;\n            memory[0x0140:0x0160] = var-2;\n            memory[0x0160:0x0180] = var-3;\n            memory[0x0180:0x01a0] = var-4;\n            memory[0x01a0:0x01c0] = var-5;\n            memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n            memory[0xc0:0xe0] = 0x06;\n            memory[0x01e0:0x0200] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (!((memory[0x01e0:0x0200] == memory[0x0140:0x0160]) & (memory[0x0160:0x0180] != 0x00))) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = memory[0x01a0:0x01c0] == memory[0x01e0:0x0200];\n            memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n            memory[0xc0:0xe0] = 0x08;\n            memory[0x0220:0x0240] = memory[0x01a0:0x01c0] == storage[keccak256(memory[0xc0:0x0100])];\n            memory[0xe0:0x0100] = memory[0x01e0:0x0200];\n            memory[0xc0:0xe0] = 0x09;\n            var temp31 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = memory[0x01a0:0x01c0];\n            memory[0xc0:0xe0] = temp31;\n            memory[0x0240:0x0260] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (!(memory[0x0240:0x0260] | memory[0x0200:0x0220] | memory[0x0220:0x0240])) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] < 0x01) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n            memory[0x0260:0x0280] = storage[keccak256(memory[0xc0:0x0100])] - 0x01;\n            memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n            memory[0xc0:0xe0] = 0x0c;\n            memory[0x0280:0x02a0] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (memory[0x0260:0x0280] != memory[0x0280:0x02a0]) {\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp32 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                memory[0xc0:0xe0] = temp32;\n                var temp33 = storage[keccak256(memory[0xc0:0x0100])];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp34 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0280:0x02a0];\n                memory[0xc0:0xe0] = temp34;\n                storage[keccak256(memory[0xc0:0x0100])] = temp33;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp35 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                memory[0xc0:0xe0] = temp35;\n                storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x07;\n                memory[0x02a0:0x02c0] = storage[keccak256(memory[0xc0:0x0100])];\n                var temp36 = memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp37 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x02a0:0x02c0];\n                memory[0xc0:0xe0] = temp37;\n                storage[keccak256(memory[0xc0:0x0100])] = temp36;\n                var temp38 = memory[0x02a0:0x02c0];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x0c;\n                storage[keccak256(memory[0xc0:0x0100])] = temp38;\n                var temp39 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x06;\n                storage[keccak256(memory[0xc0:0x0100])] = temp39;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x07;\n                var-5 = keccak256(memory[0xc0:0x0100]);\n            \n                if (storage[var-5] < 0x01) { revert(memory[0x00:0x00]); }\n            \n            label_0587:\n                var temp40 = var-5;\n                storage[temp40] = storage[temp40] - 0x01;\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x07;\n                var temp41 = keccak256(memory[0xc0:0x0100]);\n                var-5 = temp41;\n            \n                if (storage[var-5] + 0x01 < storage[var-5]) { revert(memory[0x00:0x00]); }\n            \n                var temp42 = var-5;\n                storage[temp42] = storage[temp42] + 0x01;\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x08;\n            \n                if (!(storage[keccak256(memory[0xc0:0x0100])] ~ 0x00)) {\n                    log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180], memory[0x0180:0x01a0]]);\n                    // Error: Could not resolve jump destination!\n                } else {\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x08;\n                    storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                    log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180], memory[0x0180:0x01a0]]);\n                    // Error: Could not resolve jump destination!\n                }\n            } else {\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp43 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                memory[0xc0:0xe0] = temp43;\n                storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x07;\n                memory[0x02a0:0x02c0] = storage[keccak256(memory[0xc0:0x0100])];\n                var temp44 = memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp45 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x02a0:0x02c0];\n                memory[0xc0:0xe0] = temp45;\n                storage[keccak256(memory[0xc0:0x0100])] = temp44;\n                var temp46 = memory[0x02a0:0x02c0];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x0c;\n                storage[keccak256(memory[0xc0:0x0100])] = temp46;\n                var temp47 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x06;\n                storage[keccak256(memory[0xc0:0x0100])] = temp47;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x07;\n                var-5 = keccak256(memory[0xc0:0x0100]);\n            \n                if (storage[var-5] >= 0x01) { goto label_0587; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else if (memory[0x00:0x20] == 0x23b872dd) {\n            memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            memory[0x01a0:0x01c0] = 0x092863fe;\n            memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n            memory[0x01e0:0x0200] = memory[0x0160:0x0180];\n            memory[0x0200:0x0220] = memory[0x0180:0x01a0];\n            memory[0x0220:0x0240] = msg.sender;\n            var3 = memory[0x0220:0x0240];\n            var4 = memory[0x0200:0x0220];\n            var5 = memory[0x01e0:0x0200];\n            var6 = memory[0x01c0:0x01e0];\n            var7 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x42842e0e) {\n            memory[0x0600:0x0620] = 0x00;\n            var0 = 0x0600;\n            var temp29 = memory[var0:var0 + 0x20] + 0x20;\n            var1 = temp29;\n            var temp30;\n            temp30, memory[0x01c0:0x01c0 + var1] = address(0x04).call.gas(var1 / 0x0a + 0x12)(memory[var0:var0 + var1]);\n        \n            if (temp30) { goto label_074D; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0xb88d4fde) {\n            memory[0x01c0:0x05e0] = msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x0420];\n        \n            if (msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x20] > 0x0400) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x0600] = msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x0440];\n            goto label_074D;\n        } else if (0x00) {\n        label_074D:\n            memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            var4 = memory[0x01c0:0x01e0];\n            var5 = memory[0x01e0:0x0200];\n            var var6 = memory[0x0200:0x0220];\n            var var7 = memory[0x0220:0x0240];\n            var var8 = memory[0x0240:0x0260];\n            var var9 = memory[0x0260:0x0280];\n            var var10 = memory[0x0280:0x02a0];\n            var var11 = memory[0x02a0:0x02c0];\n            var var12 = memory[0x02c0:0x02e0];\n            var var13 = memory[0x02e0:0x0300];\n            var var14 = memory[0x0300:0x0320];\n            var var15 = memory[0x0320:0x0340];\n            var var16 = memory[0x0340:0x0360];\n            var var17 = memory[0x0360:0x0380];\n            var var18 = memory[0x0380:0x03a0];\n            var var19 = memory[0x03a0:0x03c0];\n            var var20 = memory[0x03c0:0x03e0];\n            var var21 = memory[0x03e0:0x0400];\n            var var22 = memory[0x0400:0x0420];\n            var var23 = memory[0x0420:0x0440];\n            var var24 = memory[0x0440:0x0460];\n            var var25 = memory[0x0460:0x0480];\n            var var26 = memory[0x0480:0x04a0];\n            var var27 = memory[0x04a0:0x04c0];\n            var var28 = memory[0x04c0:0x04e0];\n            var var29 = memory[0x04e0:0x0500];\n            var var30 = memory[0x0500:0x0520];\n            var var31 = memory[0x0520:0x0540];\n            var var32 = memory[0x0540:0x0560];\n            var var33 = memory[0x0560:0x0580];\n            var var34 = memory[0x0580:0x05a0];\n            var var35 = memory[0x05a0:0x05c0];\n            var var36 = memory[0x05c0:0x05e0];\n            var var37 = memory[0x05e0:0x0600];\n            var var38 = memory[0x0600:0x0620];\n            var var39 = memory[0x0620:0x0640];\n            memory[0x0640:0x0660] = 0x092863fe;\n            memory[0x0660:0x0680] = memory[0x0140:0x0160];\n            memory[0x0680:0x06a0] = memory[0x0160:0x0180];\n            memory[0x06a0:0x06c0] = memory[0x0180:0x01a0];\n            memory[0x06c0:0x06e0] = msg.sender;\n            var var40 = memory[0x06c0:0x06e0];\n            var var41 = memory[0x06a0:0x06c0];\n            var var42 = memory[0x0680:0x06a0];\n            var var43 = memory[0x0660:0x0680];\n            var var44 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x095ea7b3) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = 0x06;\n            memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0x0100])];\n            memory[0x01a0:0x01c0] = msg.sender == memory[0x0180:0x01a0];\n            memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n            memory[0xc0:0xe0] = 0x09;\n            var temp27 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = temp27;\n            memory[0x01c0:0x01e0] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (!(memory[0x01a0:0x01c0] | memory[0x01c0:0x01e0])) { revert(memory[0x00:0x00]); }\n        \n            var temp28 = memory[0x0140:0x0160];\n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = 0x08;\n            storage[keccak256(memory[0xc0:0x0100])] = temp28;\n            log(memory[0x00:0x00], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, memory[0x0180:0x01a0], memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n            stop();\n        } else if (memory[0x00:0x20] == 0xa22cb465) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n        \n            if (!(memory[0x0140:0x0160] ~ msg.sender)) { revert(memory[0x00:0x00]); }\n        \n            var temp25 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x09;\n            var temp26 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = temp26;\n            storage[keccak256(memory[0xc0:0x0100])] = temp25;\n            memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n            log(memory[0x0180:0x01a0], [0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, msg.sender, memory[0x0140:0x0160]]);\n            stop();\n        } else if (memory[0x00:0x20] == 0x6a627842) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (!((msg.sender == storage[0x03]) & (memory[0x0140:0x0160] != 0x00))) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x0180] = storage[0x02];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n            memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (!address(storage[0x04]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ storage[0x04])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x01e0] = 0x18160ddd;\n            var temp17;\n            temp17, memory[0x0220:0x0240] = address(storage[0x04]).staticcall.gas(msg.gas)(memory[0x01dc:0x01e0]);\n        \n            if (!temp17) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = memory[0x0220:0x0240];\n        \n            if (0x1b1ae4d6e2ef500000 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0240:0x0260] = 0x1b1ae4d6e2ef500000 - memory[0x01a0:0x01c0];\n            var0 = memory[0x0240:0x0260];\n        \n            if (!memory[0x0160:0x0180]) {\n                var1 = 0x00;\n                goto label_0C74;\n            } else if ((memory[0x0160:0x0180] * 0x0de0b6b3a7640000) / memory[0x0160:0x0180] == 0x0de0b6b3a7640000) {\n                var1 = memory[0x0160:0x0180] * 0x0de0b6b3a7640000;\n            \n            label_0C74:\n            \n                if (var1 >= var0) { revert(memory[0x00:0x00]); }\n            \n                var temp18 = memory[0x0140:0x0160];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x06;\n                storage[keccak256(memory[0xc0:0x0100])] = temp18;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x07;\n                var temp19 = keccak256(memory[0xc0:0x0100]);\n                var0 = temp19;\n            \n                if (storage[var0] + 0x01 < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp20 = var0;\n                storage[temp20] = storage[temp20] + 0x01;\n                var temp21 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp22 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = temp22;\n                storage[keccak256(memory[0xc0:0x0100])] = temp21;\n                var temp23 = memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x0c;\n                storage[keccak256(memory[0xc0:0x0100])] = temp23;\n                var0 = 0x02;\n            \n                if (storage[var0] + 0x01 < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp24 = var0;\n                storage[temp24] = storage[temp24] + 0x01;\n                log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0x2c4d4d18) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x03] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] == 0xbde9084c) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x05] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] != 0x06fdde03) {\n            if (memory[0x00:0x20] != 0x95d89b41) {\n                if (memory[0x00:0x20] != 0x18160ddd) {\n                    if (memory[0x00:0x20] != 0x07546172) {\n                        if (memory[0x00:0x20] != 0x2b00af34) {\n                            if (memory[0x00:0x20] != 0x4e73a241) {\n                                if (memory[0x00:0x20] == 0x6352211e) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x06;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0x70a08231) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x07;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0x081812fc) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x08;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0xe985e9c5) {\n                                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    var var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x24:0x44];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x09;\n                                    var temp0 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                    memory[0xc0:0xe0] = temp0;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] != 0xf1753550) { revert(memory[0x00:0x00]); }\n                                else {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x0a;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                }\n                            } else if (!msg.value) {\n                                memory[0x00:0x20] = storage[0x05];\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x04];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x03];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    memory[0x00:0x20] = storage[0x02];\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = 0x01;\n                memory[0xc0:0xe0] = var0;\n                var var1 = keccak256(memory[0xc0:0xe0]);\n                var var2 = 0x0180;\n                var temp1 = storage[var1] + 0x20;\n                var var3 = temp1;\n                var var4 = 0x0120;\n                memory[var4:var4 + 0x20] = 0x00;\n                var var5 = 0x02;\n            \n                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0F10; }\n            \n            label_0F14:\n                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                var temp2 = var4;\n                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                memory[temp2:temp2 + 0x20] = temp3;\n            \n                if (var5 == temp3) { goto label_0F36; }\n            \n                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0F14; }\n            \n            label_0F10:\n            \n            label_0F36:\n                var temp4 = memory[0x0180:0x01a0];\n                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                var1 = 0x01e0;\n                var temp5 = memory[0x0180:0x01a0];\n                memory[var1:var1 + 0x20] = temp5;\n                var2 = temp5 + 0x20;\n            \n                if (memory[0x01e0:0x0200] > var0) { goto label_0F68; }\n            \n            label_0F6C:\n                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                var temp6 = var1;\n                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                memory[temp6:temp6 + 0x20] = temp7;\n            \n                if (var2 == temp7) { goto label_0F88; }\n            \n                if (memory[0x01e0:0x0200] <= var0) { goto label_0F6C; }\n            \n            label_0F68:\n            \n            label_0F88:\n                memory[0x0160:0x0180] = 0x20;\n                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = 0x00;\n            memory[0xc0:0xe0] = var0;\n            var1 = keccak256(memory[0xc0:0xe0]);\n            var2 = 0x0180;\n            var temp9 = storage[var1] + 0x20;\n            var3 = temp9;\n            var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var5 = 0x02;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0E2D; }\n        \n        label_0E31:\n            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n            var temp10 = var4;\n            var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n            memory[temp10:temp10 + 0x20] = temp11;\n        \n            if (var5 == temp11) { goto label_0E53; }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0E31; }\n        \n        label_0E2D:\n        \n        label_0E53:\n            var temp12 = memory[0x0180:0x01a0];\n            var0 = (temp12 + 0x1f) - temp12 - 0x01 % 0x20;\n            var1 = 0x01e0;\n            var temp13 = memory[0x0180:0x01a0];\n            memory[var1:var1 + 0x20] = temp13;\n            var2 = temp13 + 0x20;\n        \n            if (memory[0x01e0:0x0200] > var0) { goto label_0E85; }\n        \n        label_0E89:\n            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n            var temp14 = var1;\n            var temp15 = memory[temp14:temp14 + 0x20] + 0x01;\n            memory[temp14:temp14 + 0x20] = temp15;\n        \n            if (var2 == temp15) { goto label_0EA5; }\n        \n            if (memory[0x01e0:0x0200] <= var0) { goto label_0E89; }\n        \n        label_0E85:\n        \n        label_0EA5:\n            memory[0x0160:0x0180] = 0x20;\n            var temp16 = memory[0x0180:0x01a0] + 0x40;\n            return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] == 0xc87b56dd) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            if (!storage[0x05]) {\n                memory[0x03c0:0x03e0] = 0x4f;\n                memory[0x03e0:0x0400] = 0x68747470733a2f2f636c6f7564666c6172652d697066732e636f6d2f69706673;\n                memory[0x0400:0x0420] = 0x2f516d4e5a4565414e317a6b36684c6f48485245566b5a37506f5059616f4837;\n                memory[0x0420:0x0440] = 0x6e364c5236773951416345633239680000000000000000000000000000000000;\n                var0 = 0x03c0;\n                var temp57 = memory[var0:var0 + 0x20] + 0x20;\n                var1 = temp57;\n                var temp58;\n                temp58, memory[0x04a0:0x04a0 + var1] = address(0x04).call.gas(var1 / 0x0a + 0x12)(memory[var0:var0 + var1]);\n            \n                if (!temp58) { revert(memory[0x00:0x00]); }\n            \n                var temp59 = memory[0x04a0:0x04c0];\n                var0 = (temp59 + 0x1f) - temp59 - 0x01 % 0x20;\n                var1 = 0x0540;\n                var temp60 = memory[0x04a0:0x04c0];\n                memory[var1:var1 + 0x20] = temp60;\n                var2 = temp60 + 0x4f;\n            \n                if (memory[0x0540:0x0560] > var0) { goto label_0183; }\n            \n            label_0187:\n                memory[memory[0x0540:0x0560] + 0x04c0:memory[0x0540:0x0560] + 0x04c0 + 0x01] = 0x00;\n                var temp61 = var1;\n                var temp62 = memory[temp61:temp61 + 0x20] + 0x01;\n                memory[temp61:temp61 + 0x20] = temp62;\n            \n                if (var2 == temp62) { goto label_01A3; }\n            \n                if (memory[0x0540:0x0560] <= var0) { goto label_0187; }\n            \n            label_0183:\n            \n            label_01A3:\n                memory[0x0480:0x04a0] = 0x20;\n                var temp63 = memory[0x04a0:0x04c0] + 0x40;\n                return memory[0x0480:0x0480 + (temp63 + 0x1f) - temp63 - 0x01 % 0x20];\n            } else if (address(storage[0x05]).code.length) {\n                if (!(address(this) ~ storage[0x05])) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0160:0x0180] = 0xc87b56dd;\n                memory[0x0180:0x01a0] = memory[0x0140:0x0160];\n                var temp49;\n                temp49, memory[0x01e0:0x02a0] = address(storage[0x05]).staticcall.gas(msg.gas)(memory[0x017c:0x01a0]);\n            \n                if (!temp49) { revert(memory[0x00:0x00]); }\n            \n                var0 = 0x0200;\n                var temp50 = memory[var0:var0 + 0x20] + 0x20;\n                var1 = temp50;\n                var temp51;\n                temp51, memory[0x02e0:0x02e0 + var1] = address(0x04).call.gas(var1 / 0x0a + 0x12)(memory[var0:var0 + var1]);\n            \n                if (!temp51) { revert(memory[0x00:0x00]); }\n            \n                var temp52 = memory[0x02e0:0x0300];\n                var0 = (temp52 + 0x1f) - temp52 - 0x01 % 0x20;\n                var1 = 0x03a0;\n                var temp53 = memory[0x02e0:0x0300];\n                memory[var1:var1 + 0x20] = temp53;\n                var2 = temp53 + 0x80;\n            \n                if (memory[0x03a0:0x03c0] > var0) { goto label_0262; }\n            \n            label_0266:\n                memory[memory[0x03a0:0x03c0] + 0x0300:memory[0x03a0:0x03c0] + 0x0300 + 0x01] = 0x00;\n                var temp54 = var1;\n                var temp55 = memory[temp54:temp54 + 0x20] + 0x01;\n                memory[temp54:temp54 + 0x20] = temp55;\n            \n                if (var2 == temp55) { goto label_0282; }\n            \n                if (memory[0x03a0:0x03c0] <= var0) { goto label_0266; }\n            \n            label_0262:\n            \n            label_0282:\n                memory[0x02c0:0x02e0] = 0x20;\n                var temp56 = memory[0x02e0:0x0300] + 0x40;\n                return memory[0x02c0:0x02c0 + (temp56 + 0x1f) - temp56 - 0x01 % 0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0x4f6ccce7) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            if (memory[0x0140:0x0160] >= storage[0x02]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = memory[0x0140:0x0160];\n            return memory[0x00:0x20];\n        } else if (memory[0x00:0x20] == 0x2f745c59) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (memory[0x0160:0x0180] >= storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x0b;\n            var temp48 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = temp48;\n            memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n            return memory[0x00:0x20];\n        } else if (0x00) {\n            // Error: StackRead before write???\n            var var-3;\n            // Error: StackRead before write???\n            var var-1;\n            // Error: StackRead before write???\n            var var-5;\n            // Error: StackRead before write???\n            var var-2;\n            // Error: StackRead before write???\n            var var-4;\n            memory[0x01c0:0x01e0] = var-1;\n            memory[0x0140:0x0160] = var-2;\n            memory[0x0160:0x0180] = var-3;\n            memory[0x0180:0x01a0] = var-4;\n            memory[0x01a0:0x01c0] = var-5;\n            memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n            memory[0xc0:0xe0] = 0x06;\n            memory[0x01e0:0x0200] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (!((memory[0x01e0:0x0200] == memory[0x0140:0x0160]) & (memory[0x0160:0x0180] != 0x00))) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0200:0x0220] = memory[0x01a0:0x01c0] == memory[0x01e0:0x0200];\n            memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n            memory[0xc0:0xe0] = 0x08;\n            memory[0x0220:0x0240] = memory[0x01a0:0x01c0] == storage[keccak256(memory[0xc0:0x0100])];\n            memory[0xe0:0x0100] = memory[0x01e0:0x0200];\n            memory[0xc0:0xe0] = 0x09;\n            var temp31 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = memory[0x01a0:0x01c0];\n            memory[0xc0:0xe0] = temp31;\n            memory[0x0240:0x0260] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (!(memory[0x0240:0x0260] | memory[0x0200:0x0220] | memory[0x0220:0x0240])) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n        \n            if (storage[keccak256(memory[0xc0:0x0100])] < 0x01) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n            memory[0x0260:0x0280] = storage[keccak256(memory[0xc0:0x0100])] - 0x01;\n            memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n            memory[0xc0:0xe0] = 0x0c;\n            memory[0x0280:0x02a0] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (memory[0x0260:0x0280] != memory[0x0280:0x02a0]) {\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp32 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                memory[0xc0:0xe0] = temp32;\n                var temp33 = storage[keccak256(memory[0xc0:0x0100])];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp34 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0280:0x02a0];\n                memory[0xc0:0xe0] = temp34;\n                storage[keccak256(memory[0xc0:0x0100])] = temp33;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp35 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                memory[0xc0:0xe0] = temp35;\n                storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x07;\n                memory[0x02a0:0x02c0] = storage[keccak256(memory[0xc0:0x0100])];\n                var temp36 = memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp37 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x02a0:0x02c0];\n                memory[0xc0:0xe0] = temp37;\n                storage[keccak256(memory[0xc0:0x0100])] = temp36;\n                var temp38 = memory[0x02a0:0x02c0];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x0c;\n                storage[keccak256(memory[0xc0:0x0100])] = temp38;\n                var temp39 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x06;\n                storage[keccak256(memory[0xc0:0x0100])] = temp39;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x07;\n                var-5 = keccak256(memory[0xc0:0x0100]);\n            \n                if (storage[var-5] < 0x01) { revert(memory[0x00:0x00]); }\n            \n            label_0587:\n                var temp40 = var-5;\n                storage[temp40] = storage[temp40] - 0x01;\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x07;\n                var temp41 = keccak256(memory[0xc0:0x0100]);\n                var-5 = temp41;\n            \n                if (storage[var-5] + 0x01 < storage[var-5]) { revert(memory[0x00:0x00]); }\n            \n                var temp42 = var-5;\n                storage[temp42] = storage[temp42] + 0x01;\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x08;\n            \n                if (!(storage[keccak256(memory[0xc0:0x0100])] ~ 0x00)) {\n                    log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180], memory[0x0180:0x01a0]]);\n                    // Error: Could not resolve jump destination!\n                } else {\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x08;\n                    storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                    log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180], memory[0x0180:0x01a0]]);\n                    // Error: Could not resolve jump destination!\n                }\n            } else {\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp43 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                memory[0xc0:0xe0] = temp43;\n                storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x07;\n                memory[0x02a0:0x02c0] = storage[keccak256(memory[0xc0:0x0100])];\n                var temp44 = memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp45 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x02a0:0x02c0];\n                memory[0xc0:0xe0] = temp45;\n                storage[keccak256(memory[0xc0:0x0100])] = temp44;\n                var temp46 = memory[0x02a0:0x02c0];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x0c;\n                storage[keccak256(memory[0xc0:0x0100])] = temp46;\n                var temp47 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x06;\n                storage[keccak256(memory[0xc0:0x0100])] = temp47;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x07;\n                var-5 = keccak256(memory[0xc0:0x0100]);\n            \n                if (storage[var-5] >= 0x01) { goto label_0587; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else if (memory[0x00:0x20] == 0x23b872dd) {\n            memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            memory[0x01a0:0x01c0] = 0x092863fe;\n            memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n            memory[0x01e0:0x0200] = memory[0x0160:0x0180];\n            memory[0x0200:0x0220] = memory[0x0180:0x01a0];\n            memory[0x0220:0x0240] = msg.sender;\n            var3 = memory[0x0220:0x0240];\n            var4 = memory[0x0200:0x0220];\n            var5 = memory[0x01e0:0x0200];\n            var6 = memory[0x01c0:0x01e0];\n            var7 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x42842e0e) {\n            memory[0x0600:0x0620] = 0x00;\n            var0 = 0x0600;\n            var temp29 = memory[var0:var0 + 0x20] + 0x20;\n            var1 = temp29;\n            var temp30;\n            temp30, memory[0x01c0:0x01c0 + var1] = address(0x04).call.gas(var1 / 0x0a + 0x12)(memory[var0:var0 + var1]);\n        \n            if (temp30) { goto label_074D; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0xb88d4fde) {\n            memory[0x01c0:0x05e0] = msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x0420];\n        \n            if (msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x20] > 0x0400) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x0600] = msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x0440];\n            goto label_074D;\n        } else if (0x00) {\n        label_074D:\n            memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = memory[0x0140:0x0160];\n            var1 = memory[0x0160:0x0180];\n            var2 = memory[0x0180:0x01a0];\n            var3 = memory[0x01a0:0x01c0];\n            var4 = memory[0x01c0:0x01e0];\n            var5 = memory[0x01e0:0x0200];\n            var var6 = memory[0x0200:0x0220];\n            var var7 = memory[0x0220:0x0240];\n            var var8 = memory[0x0240:0x0260];\n            var var9 = memory[0x0260:0x0280];\n            var var10 = memory[0x0280:0x02a0];\n            var var11 = memory[0x02a0:0x02c0];\n            var var12 = memory[0x02c0:0x02e0];\n            var var13 = memory[0x02e0:0x0300];\n            var var14 = memory[0x0300:0x0320];\n            var var15 = memory[0x0320:0x0340];\n            var var16 = memory[0x0340:0x0360];\n            var var17 = memory[0x0360:0x0380];\n            var var18 = memory[0x0380:0x03a0];\n            var var19 = memory[0x03a0:0x03c0];\n            var var20 = memory[0x03c0:0x03e0];\n            var var21 = memory[0x03e0:0x0400];\n            var var22 = memory[0x0400:0x0420];\n            var var23 = memory[0x0420:0x0440];\n            var var24 = memory[0x0440:0x0460];\n            var var25 = memory[0x0460:0x0480];\n            var var26 = memory[0x0480:0x04a0];\n            var var27 = memory[0x04a0:0x04c0];\n            var var28 = memory[0x04c0:0x04e0];\n            var var29 = memory[0x04e0:0x0500];\n            var var30 = memory[0x0500:0x0520];\n            var var31 = memory[0x0520:0x0540];\n            var var32 = memory[0x0540:0x0560];\n            var var33 = memory[0x0560:0x0580];\n            var var34 = memory[0x0580:0x05a0];\n            var var35 = memory[0x05a0:0x05c0];\n            var var36 = memory[0x05c0:0x05e0];\n            var var37 = memory[0x05e0:0x0600];\n            var var38 = memory[0x0600:0x0620];\n            var var39 = memory[0x0620:0x0640];\n            memory[0x0640:0x0660] = 0x092863fe;\n            memory[0x0660:0x0680] = memory[0x0140:0x0160];\n            memory[0x0680:0x06a0] = memory[0x0160:0x0180];\n            memory[0x06a0:0x06c0] = memory[0x0180:0x01a0];\n            memory[0x06c0:0x06e0] = msg.sender;\n            var var40 = memory[0x06c0:0x06e0];\n            var var41 = memory[0x06a0:0x06c0];\n            var var42 = memory[0x0680:0x06a0];\n            var var43 = memory[0x0660:0x0680];\n            var var44 = 0x06;\n            // Unhandled termination\n        } else if (memory[0x00:0x20] == 0x095ea7b3) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = 0x06;\n            memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0x0100])];\n            memory[0x01a0:0x01c0] = msg.sender == memory[0x0180:0x01a0];\n            memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n            memory[0xc0:0xe0] = 0x09;\n            var temp27 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = temp27;\n            memory[0x01c0:0x01e0] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (!(memory[0x01a0:0x01c0] | memory[0x01c0:0x01e0])) { revert(memory[0x00:0x00]); }\n        \n            var temp28 = memory[0x0140:0x0160];\n            memory[0xe0:0x0100] = memory[0x0160:0x0180];\n            memory[0xc0:0xe0] = 0x08;\n            storage[keccak256(memory[0xc0:0x0100])] = temp28;\n            log(memory[0x00:0x00], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, memory[0x0180:0x01a0], memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n            stop();\n        } else if (memory[0x00:0x20] == 0xa22cb465) {\n            memory[0x0140:0x0180] = msg.data[0x04:0x44];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x24:0x44];\n        \n            if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n        \n            if (!(memory[0x0140:0x0160] ~ msg.sender)) { revert(memory[0x00:0x00]); }\n        \n            var temp25 = memory[0x0160:0x0180];\n            memory[0xe0:0x0100] = msg.sender;\n            memory[0xc0:0xe0] = 0x09;\n            var temp26 = keccak256(memory[0xc0:0x0100]);\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = temp26;\n            storage[keccak256(memory[0xc0:0x0100])] = temp25;\n            memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n            log(memory[0x0180:0x01a0], [0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, msg.sender, memory[0x0140:0x0160]]);\n            stop();\n        } else if (memory[0x00:0x20] == 0x6a627842) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (!((msg.sender == storage[0x03]) & (memory[0x0140:0x0160] != 0x00))) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x0180] = storage[0x02];\n            memory[0xe0:0x0100] = memory[0x0140:0x0160];\n            memory[0xc0:0xe0] = 0x07;\n            memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0x0100])];\n        \n            if (!address(storage[0x04]).code.length) { revert(memory[0x00:0x00]); }\n        \n            if (!(address(this) ~ storage[0x04])) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01c0:0x01e0] = 0x18160ddd;\n            var temp17;\n            temp17, memory[0x0220:0x0240] = address(storage[0x04]).staticcall.gas(msg.gas)(memory[0x01dc:0x01e0]);\n        \n            if (!temp17) { revert(memory[0x00:0x00]); }\n        \n            memory[0x01a0:0x01c0] = memory[0x0220:0x0240];\n        \n            if (0x1b1ae4d6e2ef500000 < memory[0x01a0:0x01c0]) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0240:0x0260] = 0x1b1ae4d6e2ef500000 - memory[0x01a0:0x01c0];\n            var0 = memory[0x0240:0x0260];\n        \n            if (!memory[0x0160:0x0180]) {\n                var1 = 0x00;\n                goto label_0C74;\n            } else if ((memory[0x0160:0x0180] * 0x0de0b6b3a7640000) / memory[0x0160:0x0180] == 0x0de0b6b3a7640000) {\n                var1 = memory[0x0160:0x0180] * 0x0de0b6b3a7640000;\n            \n            label_0C74:\n            \n                if (var1 >= var0) { revert(memory[0x00:0x00]); }\n            \n                var temp18 = memory[0x0140:0x0160];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x06;\n                storage[keccak256(memory[0xc0:0x0100])] = temp18;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x07;\n                var temp19 = keccak256(memory[0xc0:0x0100]);\n                var0 = temp19;\n            \n                if (storage[var0] + 0x01 < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp20 = var0;\n                storage[temp20] = storage[temp20] + 0x01;\n                var temp21 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0b;\n                var temp22 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = temp22;\n                storage[keccak256(memory[0xc0:0x0100])] = temp21;\n                var temp23 = memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x0c;\n                storage[keccak256(memory[0xc0:0x0100])] = temp23;\n                var0 = 0x02;\n            \n                if (storage[var0] + 0x01 < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp24 = var0;\n                storage[temp24] = storage[temp24] + 0x01;\n                log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (memory[0x00:0x20] == 0x2c4d4d18) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x03] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] == 0xbde9084c) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.data[0x04:0x24];\n        \n            if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n        \n            storage[0x05] = memory[0x0140:0x0160];\n            stop();\n        } else if (memory[0x00:0x20] != 0x06fdde03) {\n            if (memory[0x00:0x20] != 0x95d89b41) {\n                if (memory[0x00:0x20] != 0x18160ddd) {\n                    if (memory[0x00:0x20] != 0x07546172) {\n                        if (memory[0x00:0x20] != 0x2b00af34) {\n                            if (memory[0x00:0x20] != 0x4e73a241) {\n                                if (memory[0x00:0x20] == 0x6352211e) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x06;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0x70a08231) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x07;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0x081812fc) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x08;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0xe985e9c5) {\n                                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    var var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x24:0x44];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x09;\n                                    var temp0 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                    memory[0xc0:0xe0] = temp0;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] != 0xf1753550) { revert(memory[0x00:0x00]); }\n                                else {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x0a;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                }\n                            } else if (!msg.value) {\n                                memory[0x00:0x20] = storage[0x05];\n                                return memory[0x00:0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x04];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x03];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    memory[0x00:0x20] = storage[0x02];\n                    return memory[0x00:0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = 0x01;\n                memory[0xc0:0xe0] = var0;\n                var var1 = keccak256(memory[0xc0:0xe0]);\n                var var2 = 0x0180;\n                var temp1 = storage[var1] + 0x20;\n                var var3 = temp1;\n                var var4 = 0x0120;\n                memory[var4:var4 + 0x20] = 0x00;\n                var var5 = 0x02;\n            \n                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0F10; }\n            \n            label_0F14:\n                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                var temp2 = var4;\n                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                memory[temp2:temp2 + 0x20] = temp3;\n            \n                if (var5 == temp3) { goto label_0F36; }\n            \n                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0F14; }\n            \n            label_0F10:\n            \n            label_0F36:\n                var temp4 = memory[0x0180:0x01a0];\n                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                var1 = 0x01e0;\n                var temp5 = memory[0x0180:0x01a0];\n                memory[var1:var1 + 0x20] = temp5;\n                var2 = temp5 + 0x20;\n            \n                if (memory[0x01e0:0x0200] > var0) { goto label_0F68; }\n            \n            label_0F6C:\n                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                var temp6 = var1;\n                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                memory[temp6:temp6 + 0x20] = temp7;\n            \n                if (var2 == temp7) { goto label_0F88; }\n            \n                if (memory[0x01e0:0x0200] <= var0) { goto label_0F6C; }\n            \n            label_0F68:\n            \n            label_0F88:\n                memory[0x0160:0x0180] = 0x20;\n                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) {\n            var0 = 0x00;\n            memory[0xc0:0xe0] = var0;\n            var1 = keccak256(memory[0xc0:0xe0]);\n            var2 = 0x0180;\n            var temp9 = storage[var1] + 0x20;\n            var3 = temp9;\n            var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var5 = 0x02;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0E2D; }\n        \n        label_0E31:\n            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n            var temp10 = var4;\n            var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n            memory[temp10:temp10 + 0x20] = temp11;\n        \n            if (var5 == temp11) { goto label_0E53; }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0E31; }\n        \n        label_0E2D:\n        \n        label_0E53:\n            var temp12 = memory[0x0180:0x01a0];\n            var0 = (temp12 + 0x1f) - temp12 - 0x01 % 0x20;\n            var1 = 0x01e0;\n            var temp13 = memory[0x0180:0x01a0];\n            memory[var1:var1 + 0x20] = temp13;\n            var2 = temp13 + 0x20;\n        \n            if (memory[0x01e0:0x0200] > var0) { goto label_0E85; }\n        \n        label_0E89:\n            memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n            var temp14 = var1;\n            var temp15 = memory[temp14:temp14 + 0x20] + 0x01;\n            memory[temp14:temp14 + 0x20] = temp15;\n        \n            if (var2 == temp15) { goto label_0EA5; }\n        \n            if (memory[0x01e0:0x0200] <= var0) { goto label_0E89; }\n        \n        label_0E85:\n        \n        label_0EA5:\n            memory[0x0160:0x0180] = 0x20;\n            var temp16 = memory[0x0180:0x01a0] + 0x40;\n            return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n        } else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 37.375815868377686,
	"usage": {
		"completion_tokens": 669,
		"prompt_tokens": 12447,
		"total_tokens": 13116
	}
}