{
	"address": "0x41849f3bd33ced4a21c73fddd4a595e22a3c2251",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract equivalent of the decompiled EVM Bytecode:\n\n```Solidity\npragma solidity >=0.4.22 <0.7.0;\n\ncontract MyContract {\n    uint256 private _m_required;\n    uint256 private _m_numOwners;\n    uint256 private _m_dailyLimit;\n    uint256 private _m_spentToday;\n    uint256 private _m_lastDay;\n\n    event Deposit(address indexed _from, uint256 _value);\n\n    function isOwner(address varg0) public view returns (bool) {\n        return (varg0 != address(0) && _m_numOwners > 0);\n    }\n\n    function m_numOwners() public view returns (uint256) {\n        return _m_numOwners;\n    }\n\n    function m_lastDay() public view returns (uint256) {\n        return _m_lastDay;\n    }\n\n    function m_spentToday() public view returns (uint256) {\n        return _m_spentToday;\n    }\n\n    function m_required() public view returns (uint256) {\n        return _m_required;\n    }\n\n    function hasConfirmed(bytes32 varg0, address varg1) public view returns (bool) {\n        return (varg1 != address(0) && _m_numOwners > 0);\n    }\n\n    function getOwner(uint256 varg0) public view returns (address) {\n        require(varg0 < _m_numOwners, \"Owner index out of bounds\");\n        return address(_m_numOwners + 1 + 5);\n    }\n\n    function m_dailyLimit() public view returns (uint256) {\n        return _m_dailyLimit;\n    }\n\n    function () external payable {\n        if (msg.value > 0) {\n            emit Deposit(msg.sender, msg.value);\n        }\n    }\n}\n```\n\nNote: The function selector piece of code in the Bytecode doesn't have an equivalent in Solidity, as it's a low-level feature of the EVM. In Solidity, function calls are much simpler and don't require the manual calculation of function selectors.",
				"role": "assistant"
			}
		}
	],
	"created": 1698038643,
	"id": "chatcmpl-8Chhzgae5YY7jareq9cTsrZMPHejY",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2022.11.29 23:48 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _m_required; // STORAGE[0x0]\nuint256 _m_numOwners; // STORAGE[0x1]\nuint256 _m_dailyLimit; // STORAGE[0x2]\nuint256 _m_spentToday; // STORAGE[0x3]\nuint256 _m_lastDay; // STORAGE[0x4]\n\n// Events\nDeposit(address, uint256);\n\nfunction isOwner(address varg0) public payable { \n    assert(!msg.value);\n    MEM[32 + MEM[64]] = 0;\n    v0, v1 = 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4.delegatecall(MEM[(MEM[64]) len (MEM[64] + msg.data.length - MEM[64])], MEM[(MEM[64]) len 32]).gas(msg.gas - 50);\n    assert(v0);\n    return v1;\n}\n\nfunction m_numOwners() public payable { \n    assert(!msg.value);\n    return _m_numOwners;\n}\n\nfunction m_lastDay() public payable { \n    assert(!msg.value);\n    return _m_lastDay;\n}\n\nfunction m_spentToday() public payable { \n    assert(!msg.value);\n    return _m_spentToday;\n}\n\nfunction m_required() public payable { \n    assert(!msg.value);\n    return _m_required;\n}\n\nfunction hasConfirmed(bytes32 varg0, address varg1) public payable { \n    assert(!msg.value);\n    MEM[32 + MEM[64]] = 0;\n    v0, v1 = 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4.delegatecall(MEM[(MEM[64]) len (MEM[64] + msg.data.length - MEM[64])], MEM[(MEM[64]) len 32]).gas(msg.gas - 50);\n    assert(v0);\n    return v1;\n}\n\nfunction getOwner(uint256 varg0) public payable { \n    assert(!msg.value);\n    assert(varg0 + 1 < 256);\n    return address(STORAGE[varg0 + 1 + 5]);\n}\n\nfunction m_dailyLimit() public payable { \n    assert(!msg.value);\n    return _m_dailyLimit;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (uint32(function_selector >> 224) == 0x2f54bf6e) {\n            isOwner(address);\n        } else if (0x4123cb6b == uint32(function_selector >> 224)) {\n            m_numOwners();\n        } else if (0x52375093 == uint32(function_selector >> 224)) {\n            m_lastDay();\n        } else if (0x659010e7 == uint32(function_selector >> 224)) {\n            m_spentToday();\n        } else if (0x746c9171 == uint32(function_selector >> 224)) {\n            m_required();\n        } else if (0xc2cf7326 == uint32(function_selector >> 224)) {\n            hasConfirmed(bytes32,address);\n        } else if (0xc41a360a == uint32(function_selector >> 224)) {\n            getOwner(uint256);\n        } else if (0xf1736d86 == uint32(function_selector >> 224)) {\n            m_dailyLimit();\n        }\n    }\n    if (msg.value <= 0) {\n        if (msg.data.length > 0) {\n            MEM[32 + MEM[64]] = 0;\n            v0 = 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4.delegatecall(MEM[(MEM[64]) len (MEM[64] + msg.data.length - MEM[64])], MEM[(MEM[64]) len 32]).gas(msg.gas - 50);\n            assert(v0);\n        }\n    } else {\n        emit Deposit(msg.sender, msg.value);\n    }\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.11.29 23:48 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _m_required; // STORAGE[0x0]\nuint256 _m_numOwners; // STORAGE[0x1]\nuint256 _m_dailyLimit; // STORAGE[0x2]\nuint256 _m_spentToday; // STORAGE[0x3]\nuint256 _m_lastDay; // STORAGE[0x4]\n\n// Events\nDeposit(address, uint256);\n\nfunction isOwner(address varg0) public payable { \n    assert(!msg.value);\n    MEM[32 + MEM[64]] = 0;\n    v0, v1 = 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4.delegatecall(MEM[(MEM[64]) len (MEM[64] + msg.data.length - MEM[64])], MEM[(MEM[64]) len 32]).gas(msg.gas - 50);\n    assert(v0);\n    return v1;\n}\n\nfunction m_numOwners() public payable { \n    assert(!msg.value);\n    return _m_numOwners;\n}\n\nfunction m_lastDay() public payable { \n    assert(!msg.value);\n    return _m_lastDay;\n}\n\nfunction m_spentToday() public payable { \n    assert(!msg.value);\n    return _m_spentToday;\n}\n\nfunction m_required() public payable { \n    assert(!msg.value);\n    return _m_required;\n}\n\nfunction hasConfirmed(bytes32 varg0, address varg1) public payable { \n    assert(!msg.value);\n    MEM[32 + MEM[64]] = 0;\n    v0, v1 = 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4.delegatecall(MEM[(MEM[64]) len (MEM[64] + msg.data.length - MEM[64])], MEM[(MEM[64]) len 32]).gas(msg.gas - 50);\n    assert(v0);\n    return v1;\n}\n\nfunction getOwner(uint256 varg0) public payable { \n    assert(!msg.value);\n    assert(varg0 + 1 < 256);\n    return address(STORAGE[varg0 + 1 + 5]);\n}\n\nfunction m_dailyLimit() public payable { \n    assert(!msg.value);\n    return _m_dailyLimit;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (uint32(function_selector >> 224) == 0x2f54bf6e) {\n            isOwner(address);\n        } else if (0x4123cb6b == uint32(function_selector >> 224)) {\n            m_numOwners();\n        } else if (0x52375093 == uint32(function_selector >> 224)) {\n            m_lastDay();\n        } else if (0x659010e7 == uint32(function_selector >> 224)) {\n            m_spentToday();\n        } else if (0x746c9171 == uint32(function_selector >> 224)) {\n            m_required();\n        } else if (0xc2cf7326 == uint32(function_selector >> 224)) {\n            hasConfirmed(bytes32,address);\n        } else if (0xc41a360a == uint32(function_selector >> 224)) {\n            getOwner(uint256);\n        } else if (0xf1736d86 == uint32(function_selector >> 224)) {\n            m_dailyLimit();\n        }\n    }\n    if (msg.value <= 0) {\n        if (msg.data.length > 0) {\n            MEM[32 + MEM[64]] = 0;\n            v0 = 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4.delegatecall(MEM[(MEM[64]) len (MEM[64] + msg.data.length - MEM[64])], MEM[(MEM[64]) len 32]).gas(msg.gas - 50);\n            assert(v0);\n        }\n    } else {\n        emit Deposit(msg.sender, msg.value);\n    }\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.11.29 23:48 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _m_required; // STORAGE[0x0]\nuint256 _m_numOwners; // STORAGE[0x1]\nuint256 _m_dailyLimit; // STORAGE[0x2]\nuint256 _m_spentToday; // STORAGE[0x3]\nuint256 _m_lastDay; // STORAGE[0x4]\n\n// Events\nDeposit(address, uint256);\n\nfunction isOwner(address varg0) public payable { \n    assert(!msg.value);\n    MEM[32 + MEM[64]] = 0;\n    v0, v1 = 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4.delegatecall(MEM[(MEM[64]) len (MEM[64] + msg.data.length - MEM[64])], MEM[(MEM[64]) len 32]).gas(msg.gas - 50);\n    assert(v0);\n    return v1;\n}\n\nfunction m_numOwners() public payable { \n    assert(!msg.value);\n    return _m_numOwners;\n}\n\nfunction m_lastDay() public payable { \n    assert(!msg.value);\n    return _m_lastDay;\n}\n\nfunction m_spentToday() public payable { \n    assert(!msg.value);\n    return _m_spentToday;\n}\n\nfunction m_required() public payable { \n    assert(!msg.value);\n    return _m_required;\n}\n\nfunction hasConfirmed(bytes32 varg0, address varg1) public payable { \n    assert(!msg.value);\n    MEM[32 + MEM[64]] = 0;\n    v0, v1 = 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4.delegatecall(MEM[(MEM[64]) len (MEM[64] + msg.data.length - MEM[64])], MEM[(MEM[64]) len 32]).gas(msg.gas - 50);\n    assert(v0);\n    return v1;\n}\n\nfunction getOwner(uint256 varg0) public payable { \n    assert(!msg.value);\n    assert(varg0 + 1 < 256);\n    return address(STORAGE[varg0 + 1 + 5]);\n}\n\nfunction m_dailyLimit() public payable { \n    assert(!msg.value);\n    return _m_dailyLimit;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (uint32(function_selector >> 224) == 0x2f54bf6e) {\n            isOwner(address);\n        } else if (0x4123cb6b == uint32(function_selector >> 224)) {\n            m_numOwners();\n        } else if (0x52375093 == uint32(function_selector >> 224)) {\n            m_lastDay();\n        } else if (0x659010e7 == uint32(function_selector >> 224)) {\n            m_spentToday();\n        } else if (0x746c9171 == uint32(function_selector >> 224)) {\n            m_required();\n        } else if (0xc2cf7326 == uint32(function_selector >> 224)) {\n            hasConfirmed(bytes32,address);\n        } else if (0xc41a360a == uint32(function_selector >> 224)) {\n            getOwner(uint256);\n        } else if (0xf1736d86 == uint32(function_selector >> 224)) {\n            m_dailyLimit();\n        }\n    }\n    if (msg.value <= 0) {\n        if (msg.data.length > 0) {\n            MEM[32 + MEM[64]] = 0;\n            v0 = 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4.delegatecall(MEM[(MEM[64]) len (MEM[64] + msg.data.length - MEM[64])], MEM[(MEM[64]) len 32]).gas(msg.gas - 50);\n            assert(v0);\n        }\n    } else {\n        emit Deposit(msg.sender, msg.value);\n    }\n}\n.",
	"status": "1",
	"time_cost": 13.625263929367065,
	"usage": {
		"completion_tokens": 430,
		"prompt_tokens": 987,
		"total_tokens": 1417
	}
}