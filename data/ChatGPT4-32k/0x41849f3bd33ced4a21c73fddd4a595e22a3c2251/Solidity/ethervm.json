{
	"address": "0x41849f3bd33ced4a21c73fddd4a595e22a3c2251",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The provided code is not valid Solidity code, it's a mix of pseudocode and assembly. However, I'll try to convert it into a valid Solidity contract as much as possible. Here's a rough conversion:\n\n```solidity\npragma solidity ^0.8.2;\n\ncontract Contract {\n    mapping(address => uint) public numOwners;\n    mapping(address => uint) public lastDay;\n    mapping(address => uint) public spentToday;\n    mapping(address => uint) public required;\n    mapping(address => bool) public isOwner;\n    mapping(address => uint) public dailyLimit;\n    address[] public owners;\n\n    function isOwner(address owner) public view returns (bool) {\n        return isOwner[owner];\n    }\n\n    function numOwners() public view returns (uint) {\n        return owners.length;\n    }\n\n    function getOwner(uint index) public view returns (address) {\n        require(index < owners.length, \"Owner index out of bounds\");\n        return owners[index];\n    }\n\n    function lastDay() public view returns (uint) {\n        require(msg.sender != address(0), \"Invalid address\");\n        return lastDay[msg.sender];\n    }\n\n    function spentToday() public view returns (uint) {\n        require(msg.sender != address(0), \"Invalid address\");\n        return spentToday[msg.sender];\n    }\n\n    function required() public view returns (uint) {\n        require(msg.sender != address(0), \"Invalid address\");\n        return required[msg.sender];\n    }\n\n    function dailyLimit() public view returns (uint) {\n        require(msg.sender != address(0), \"Invalid address\");\n        return dailyLimit[msg.sender];\n    }\n\n    function hasConfirmed(bytes32 data, address owner) public view returns (bool) {\n        // This function is not clear in the original pseudocode, \n        // just returning false for the sake of compiling. \n        // Please replace this with your actual implementation.\n        return false;\n    }\n}\n```\n\nPlease note that the original pseudocode includes certain logic like `delegatecall`, which is not implemented in the Solidity code above. This is because `delegatecall` is a low-level function that directly interacts with the EVM and its detailed implementation depends highly on your specific use case. You need to be very careful while using it due to its potential security risks.",
				"role": "assistant"
			}
		}
	],
	"created": 1700470859,
	"id": "chatcmpl-8MuRHXgvffUYUQuMpnhMEVP8o6nQu",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0072:\n            var var0 = 0x012b;\n        \n            if (msg.value <= 0x00) {\n                func_00C7();\n                stop();\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = msg.sender;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = msg.value;\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + temp0 - temp1 + 0x40], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c]);\n                // Error: Could not resolve jump destination!\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x0149;\n                var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = isOwner(var2);\n            \n            label_0149:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var1;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x4123cb6b) {\n                // Dispatch table entry for m_numOwners()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_numOwners();\n            \n            label_016D:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x52375093) {\n                // Dispatch table entry for m_lastDay()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_lastDay();\n                goto label_016D;\n            } else if (var0 == 0x659010e7) {\n                // Dispatch table entry for m_spentToday()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_spentToday();\n                goto label_016D;\n            } else if (var0 == 0x746c9171) {\n                // Dispatch table entry for m_required()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_required();\n                goto label_016D;\n            } else if (var0 == 0xc2cf7326) {\n                // Dispatch table entry for hasConfirmed(bytes32,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0149;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var1 = hasConfirmed(var2, var3);\n                goto label_0149;\n            } else if (var0 == 0xc41a360a) {\n                // Dispatch table entry for getOwner(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x022b;\n                var2 = msg.data[0x04:0x24];\n                var1 = getOwner(var2);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + temp6 - temp7 + 0x20];\n            } else if (var0 == 0xf1736d86) {\n                // Dispatch table entry for m_dailyLimit()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_dailyLimit();\n                goto label_016D;\n            } else { goto label_0072; }\n        }\n    }\n    \n    function func_00C7() {\n        if (msg.data.length <= 0x00) {\n        label_0127:\n            return;\n        } else {\n            var var0 = 0x02 ** 0xa0 - 0x01 & 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4;\n            var temp0 = msg.data.length;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n            var var1 = temp1 + temp0;\n            var temp2 = memory[0x40:0x60];\n            var temp3;\n            temp3, memory[temp2:temp2 + 0x20] = address(var0).delegatecall.gas(msg.gas - 0x32)(memory[temp2:temp2 + var1 - temp2]);\n        \n            if (temp3) { goto label_0127; }\n            else { assert(); }\n        }\n    }\n    \n    function isOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x02 ** 0xa0 - 0x01 & 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4;\n        var temp0 = msg.data.length;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var var2 = temp1 + temp0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x20] = address(var1).delegatecall.gas(msg.gas - 0x32)(memory[temp2:temp2 + var2 - temp2]);\n    \n        if (temp3) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { assert(); }\n    }\n    \n    function m_numOwners() returns (var r0) { return storage[0x01]; }\n    \n    function m_lastDay() returns (var r0) { return storage[0x04]; }\n    \n    function m_spentToday() returns (var r0) { return storage[0x03]; }\n    \n    function m_required() returns (var r0) { return storage[0x00]; }\n    \n    function hasConfirmed(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x02 ** 0xa0 - 0x01 & 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4;\n        var temp0 = msg.data.length;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var var2 = temp1 + temp0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x20] = address(var1).delegatecall.gas(msg.gas - 0x32)(memory[temp2:temp2 + var2 - temp2]);\n    \n        if (temp3) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { assert(); }\n    }\n    \n    function getOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x05;\n        var var2 = arg0 + 0x01;\n    \n        if (var2 < 0x0100) { return storage[var2 + var1]; }\n        else { assert(); }\n    }\n    \n    function m_dailyLimit() returns (var r0) { return storage[0x02]; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0072:\n            var var0 = 0x012b;\n        \n            if (msg.value <= 0x00) {\n                func_00C7();\n                stop();\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = msg.sender;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = msg.value;\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + temp0 - temp1 + 0x40], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c]);\n                // Error: Could not resolve jump destination!\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x0149;\n                var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = isOwner(var2);\n            \n            label_0149:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var1;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x4123cb6b) {\n                // Dispatch table entry for m_numOwners()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_numOwners();\n            \n            label_016D:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x52375093) {\n                // Dispatch table entry for m_lastDay()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_lastDay();\n                goto label_016D;\n            } else if (var0 == 0x659010e7) {\n                // Dispatch table entry for m_spentToday()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_spentToday();\n                goto label_016D;\n            } else if (var0 == 0x746c9171) {\n                // Dispatch table entry for m_required()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_required();\n                goto label_016D;\n            } else if (var0 == 0xc2cf7326) {\n                // Dispatch table entry for hasConfirmed(bytes32,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0149;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var1 = hasConfirmed(var2, var3);\n                goto label_0149;\n            } else if (var0 == 0xc41a360a) {\n                // Dispatch table entry for getOwner(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x022b;\n                var2 = msg.data[0x04:0x24];\n                var1 = getOwner(var2);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + temp6 - temp7 + 0x20];\n            } else if (var0 == 0xf1736d86) {\n                // Dispatch table entry for m_dailyLimit()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_dailyLimit();\n                goto label_016D;\n            } else { goto label_0072; }\n        }\n    }\n    \n    function func_00C7() {\n        if (msg.data.length <= 0x00) {\n        label_0127:\n            return;\n        } else {\n            var var0 = 0x02 ** 0xa0 - 0x01 & 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4;\n            var temp0 = msg.data.length;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n            var var1 = temp1 + temp0;\n            var temp2 = memory[0x40:0x60];\n            var temp3;\n            temp3, memory[temp2:temp2 + 0x20] = address(var0).delegatecall.gas(msg.gas - 0x32)(memory[temp2:temp2 + var1 - temp2]);\n        \n            if (temp3) { goto label_0127; }\n            else { assert(); }\n        }\n    }\n    \n    function isOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x02 ** 0xa0 - 0x01 & 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4;\n        var temp0 = msg.data.length;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var var2 = temp1 + temp0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x20] = address(var1).delegatecall.gas(msg.gas - 0x32)(memory[temp2:temp2 + var2 - temp2]);\n    \n        if (temp3) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { assert(); }\n    }\n    \n    function m_numOwners() returns (var r0) { return storage[0x01]; }\n    \n    function m_lastDay() returns (var r0) { return storage[0x04]; }\n    \n    function m_spentToday() returns (var r0) { return storage[0x03]; }\n    \n    function m_required() returns (var r0) { return storage[0x00]; }\n    \n    function hasConfirmed(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x02 ** 0xa0 - 0x01 & 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4;\n        var temp0 = msg.data.length;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var var2 = temp1 + temp0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x20] = address(var1).delegatecall.gas(msg.gas - 0x32)(memory[temp2:temp2 + var2 - temp2]);\n    \n        if (temp3) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { assert(); }\n    }\n    \n    function getOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x05;\n        var var2 = arg0 + 0x01;\n    \n        if (var2 < 0x0100) { return storage[var2 + var1]; }\n        else { assert(); }\n    }\n    \n    function m_dailyLimit() returns (var r0) { return storage[0x02]; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0072:\n            var var0 = 0x012b;\n        \n            if (msg.value <= 0x00) {\n                func_00C7();\n                stop();\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = msg.sender;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = msg.value;\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + temp0 - temp1 + 0x40], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c]);\n                // Error: Could not resolve jump destination!\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x0149;\n                var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = isOwner(var2);\n            \n            label_0149:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var1;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x4123cb6b) {\n                // Dispatch table entry for m_numOwners()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_numOwners();\n            \n            label_016D:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x52375093) {\n                // Dispatch table entry for m_lastDay()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_lastDay();\n                goto label_016D;\n            } else if (var0 == 0x659010e7) {\n                // Dispatch table entry for m_spentToday()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_spentToday();\n                goto label_016D;\n            } else if (var0 == 0x746c9171) {\n                // Dispatch table entry for m_required()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_required();\n                goto label_016D;\n            } else if (var0 == 0xc2cf7326) {\n                // Dispatch table entry for hasConfirmed(bytes32,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0149;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var1 = hasConfirmed(var2, var3);\n                goto label_0149;\n            } else if (var0 == 0xc41a360a) {\n                // Dispatch table entry for getOwner(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x022b;\n                var2 = msg.data[0x04:0x24];\n                var1 = getOwner(var2);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + temp6 - temp7 + 0x20];\n            } else if (var0 == 0xf1736d86) {\n                // Dispatch table entry for m_dailyLimit()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x016d;\n                var2 = m_dailyLimit();\n                goto label_016D;\n            } else { goto label_0072; }\n        }\n    }\n    \n    function func_00C7() {\n        if (msg.data.length <= 0x00) {\n        label_0127:\n            return;\n        } else {\n            var var0 = 0x02 ** 0xa0 - 0x01 & 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4;\n            var temp0 = msg.data.length;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n            var var1 = temp1 + temp0;\n            var temp2 = memory[0x40:0x60];\n            var temp3;\n            temp3, memory[temp2:temp2 + 0x20] = address(var0).delegatecall.gas(msg.gas - 0x32)(memory[temp2:temp2 + var1 - temp2]);\n        \n            if (temp3) { goto label_0127; }\n            else { assert(); }\n        }\n    }\n    \n    function isOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x02 ** 0xa0 - 0x01 & 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4;\n        var temp0 = msg.data.length;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var var2 = temp1 + temp0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x20] = address(var1).delegatecall.gas(msg.gas - 0x32)(memory[temp2:temp2 + var2 - temp2]);\n    \n        if (temp3) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { assert(); }\n    }\n    \n    function m_numOwners() returns (var r0) { return storage[0x01]; }\n    \n    function m_lastDay() returns (var r0) { return storage[0x04]; }\n    \n    function m_spentToday() returns (var r0) { return storage[0x03]; }\n    \n    function m_required() returns (var r0) { return storage[0x00]; }\n    \n    function hasConfirmed(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x02 ** 0xa0 - 0x01 & 0x863df6bfa4469f3ead0be8f9f2aae51c91a907b4;\n        var temp0 = msg.data.length;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var var2 = temp1 + temp0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x20] = address(var1).delegatecall.gas(msg.gas - 0x32)(memory[temp2:temp2 + var2 - temp2]);\n    \n        if (temp3) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { assert(); }\n    }\n    \n    function getOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x05;\n        var var2 = arg0 + 0x01;\n    \n        if (var2 < 0x0100) { return storage[var2 + var1]; }\n        else { assert(); }\n    }\n    \n    function m_dailyLimit() returns (var r0) { return storage[0x02]; }\n}\n\n.",
	"status": "1",
	"time_cost": 21.227885961532593,
	"usage": {
		"completion_tokens": 473,
		"prompt_tokens": 2223,
		"total_tokens": 2696
	}
}