{
	"address": "0xf556eb074274b572a9e863c29840507affc9eba2",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a simplified Solidity contract that captures the core functionality of the decompiled code:\n\n```Solidity\npragma solidity ^0.8.0;\n\ncontract Contract {\n    uint256[] _name;\n    uint256[] _symbol;\n    uint256 _totalSupply;\n    mapping (address => uint256) _balanceOf;\n    mapping (address => mapping(address => uint256)) _allowance;\n    uint256 _sellPrice;\n    uint256 _buy;\n    mapping (address => bool) _frozenAccount;\n    address _setcommissionPer;\n    uint8 _decimals;\n\n    event Burn(address indexed from, uint256 value);\n    event FrozenFunds(address target, bool frozen);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function buy() public payable {\n        transferFrom(_setcommissionPer, msg.sender, _buy * msg.value);\n    }\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public {\n        require(msg.sender == _setcommissionPer);\n        _sellPrice = newSellPrice;\n        _buy = newBuyPrice;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        _allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function terminate() public {\n        require(msg.sender == _setcommissionPer);\n        selfdestruct(payable(_setcommissionPer));\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= _allowance[_from][msg.sender]);\n        _allowance[_from][msg.sender] -= _value;\n        _balanceOf[_from] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(_balanceOf[msg.sender] >= _value);\n        _balanceOf[msg.sender] -= _value;\n        _totalSupply -= _value;\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function sellPrice() public view returns (uint256) {\n        return _sellPrice;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return _balanceOf[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        _balanceOf[msg.sender] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return _allowance[_owner][_spender];\n    }\n}\n```\n\nThis Solidity contract provides a basic ERC20-like functionality where addresses can approve, transfer, burn and view their token balances. Functions like `buy`, `sellPrice`, `setPrices` and `terminate` offer additional functionalities. The original contract likely had additional logic that couldn't be decompiled and therefore isn't reflected here.",
				"role": "assistant"
			}
		}
	],
	"created": 1701469559,
	"id": "chatcmpl-8R6FL6EkipT4TBVEUKetyKHdAxGK8",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.12 18:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 _sellPrice; // STORAGE[0x9]\nuint256 _buy; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0xb]\naddress _setcommissionPer; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\n\n// Events\nBurn(address, uint256);\nFrozenFunds(address, bool);\nTransfer(address, address, uint256);\n\nfunction buy() public payable { \n    0xcda(_buy * msg.value, msg.sender, _setcommissionPer);\n}\n\nfunction setPrices(uint256 varg0, uint256 varg1) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    _sellPrice = varg0;\n    _buy = varg1;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction terminate() public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    selfdestruct(_setcommissionPer);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0xcda(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction setcommissionPer(uint256 varg0) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    stor_8 = varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    _balanceOf[varg0] += varg1;\n    _totalSupply += varg1;\n    emit Transfer(0, address(this), varg1);\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction buyPrice() public nonPayable { \n    return _buy;\n}\n\nfunction owner() public nonPayable { \n    return _setcommissionPer;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0xcda(varg1, varg0, msg.sender);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction setMinBalance(uint256 varg0) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    stor_7 = 0x38d7ea4c68000 * varg0;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v4 + v3.data] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = 1;\n    }\n    return v1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sendEtherToOwner() public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    v0 = _setcommissionPer.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    assert(_sellPrice);\n    require((address(this)).balance >= varg0 / _sellPrice);\n    0xcda(varg0, _setcommissionPer, msg.sender);\n    assert(_sellPrice);\n    v0 = msg.sender.call().value(varg0 / _sellPrice).gas(!(varg0 / _sellPrice) * 2300);\n    require(v0);\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    if (varg0) {\n        _setcommissionPer = varg0;\n        goto 0x15b0x4e4;\n    }\n}\n\nfunction 0xcda(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg2);\n    require(!(0xff & _frozenAccount[v2]));\n    v3 = address(varg1);\n    require(!(0xff & _frozenAccount[v3]));\n    v4 = address(varg2);\n    _balanceOf[v4] = _balanceOf[v4] - varg0;\n    _balanceOf[_setcommissionPer] += varg0 * stor_8 / 100;\n    v5 = address(varg1);\n    _balanceOf[v5] = _balanceOf[v5] + (varg0 - varg0 * stor_8 / 100);\n    if (v5.balance < stor_7) {\n        v6 = _sellPrice * (stor_7 - (address(varg1)).balance);\n        0xcda(v6, _setcommissionPer, varg1);\n        assert(_sellPrice);\n        v7 = address(varg1).call().value(v6 / _sellPrice).gas(!(v6 / _sellPrice) * 2300);\n        require(v7);\n    }\n    v8 = varg0 * stor_8 / 100;\n    emit Transfer(address(varg2), _setcommissionPer, v8);\n    v9 = varg0 - varg0 * stor_8 / 100;\n    emit Transfer(address(varg2), address(varg1), v9);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x5fefda7) {\n            setPrices(uint256,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xc08bf88 == function_selector) {\n            terminate();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x5eb38bef == function_selector) {\n            setcommissionPer(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a != function_selector) {\n            if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            } else if (0xb414d4b6 == function_selector) {\n                frozenAccount(address);\n            } else if (0xc91d956c == function_selector) {\n                setMinBalance(uint256);\n            } else if (0xcae9ca51 == function_selector) {\n                approveAndCall(address,uint256,bytes);\n            } else if (0xdd62ed3e == function_selector) {\n                allowance(address,address);\n            } else if (0xe3ffc9a3 == function_selector) {\n                sendEtherToOwner();\n            } else if (0xe4849b32 == function_selector) {\n                sell(uint256);\n            } else if (0xe724529c == function_selector) {\n                freezeAccount(address,bool);\n            } else if (0xf2fde38b == function_selector) {\n                transferOwnership(address);\n            }\n        }\n    }\n    buy();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.12 18:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 _sellPrice; // STORAGE[0x9]\nuint256 _buy; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0xb]\naddress _setcommissionPer; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\n\n// Events\nBurn(address, uint256);\nFrozenFunds(address, bool);\nTransfer(address, address, uint256);\n\nfunction buy() public payable { \n    0xcda(_buy * msg.value, msg.sender, _setcommissionPer);\n}\n\nfunction setPrices(uint256 varg0, uint256 varg1) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    _sellPrice = varg0;\n    _buy = varg1;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction terminate() public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    selfdestruct(_setcommissionPer);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0xcda(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction setcommissionPer(uint256 varg0) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    stor_8 = varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    _balanceOf[varg0] += varg1;\n    _totalSupply += varg1;\n    emit Transfer(0, address(this), varg1);\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction buyPrice() public nonPayable { \n    return _buy;\n}\n\nfunction owner() public nonPayable { \n    return _setcommissionPer;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0xcda(varg1, varg0, msg.sender);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction setMinBalance(uint256 varg0) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    stor_7 = 0x38d7ea4c68000 * varg0;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v4 + v3.data] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = 1;\n    }\n    return v1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sendEtherToOwner() public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    v0 = _setcommissionPer.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    assert(_sellPrice);\n    require((address(this)).balance >= varg0 / _sellPrice);\n    0xcda(varg0, _setcommissionPer, msg.sender);\n    assert(_sellPrice);\n    v0 = msg.sender.call().value(varg0 / _sellPrice).gas(!(varg0 / _sellPrice) * 2300);\n    require(v0);\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    if (varg0) {\n        _setcommissionPer = varg0;\n        goto 0x15b0x4e4;\n    }\n}\n\nfunction 0xcda(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg2);\n    require(!(0xff & _frozenAccount[v2]));\n    v3 = address(varg1);\n    require(!(0xff & _frozenAccount[v3]));\n    v4 = address(varg2);\n    _balanceOf[v4] = _balanceOf[v4] - varg0;\n    _balanceOf[_setcommissionPer] += varg0 * stor_8 / 100;\n    v5 = address(varg1);\n    _balanceOf[v5] = _balanceOf[v5] + (varg0 - varg0 * stor_8 / 100);\n    if (v5.balance < stor_7) {\n        v6 = _sellPrice * (stor_7 - (address(varg1)).balance);\n        0xcda(v6, _setcommissionPer, varg1);\n        assert(_sellPrice);\n        v7 = address(varg1).call().value(v6 / _sellPrice).gas(!(v6 / _sellPrice) * 2300);\n        require(v7);\n    }\n    v8 = varg0 * stor_8 / 100;\n    emit Transfer(address(varg2), _setcommissionPer, v8);\n    v9 = varg0 - varg0 * stor_8 / 100;\n    emit Transfer(address(varg2), address(varg1), v9);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x5fefda7) {\n            setPrices(uint256,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xc08bf88 == function_selector) {\n            terminate();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x5eb38bef == function_selector) {\n            setcommissionPer(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a != function_selector) {\n            if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            } else if (0xb414d4b6 == function_selector) {\n                frozenAccount(address);\n            } else if (0xc91d956c == function_selector) {\n                setMinBalance(uint256);\n            } else if (0xcae9ca51 == function_selector) {\n                approveAndCall(address,uint256,bytes);\n            } else if (0xdd62ed3e == function_selector) {\n                allowance(address,address);\n            } else if (0xe3ffc9a3 == function_selector) {\n                sendEtherToOwner();\n            } else if (0xe4849b32 == function_selector) {\n                sell(uint256);\n            } else if (0xe724529c == function_selector) {\n                freezeAccount(address,bool);\n            } else if (0xf2fde38b == function_selector) {\n                transferOwnership(address);\n            }\n        }\n    }\n    buy();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.12 18:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 _sellPrice; // STORAGE[0x9]\nuint256 _buy; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0xb]\naddress _setcommissionPer; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\n\n// Events\nBurn(address, uint256);\nFrozenFunds(address, bool);\nTransfer(address, address, uint256);\n\nfunction buy() public payable { \n    0xcda(_buy * msg.value, msg.sender, _setcommissionPer);\n}\n\nfunction setPrices(uint256 varg0, uint256 varg1) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    _sellPrice = varg0;\n    _buy = varg1;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction terminate() public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    selfdestruct(_setcommissionPer);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0xcda(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction setcommissionPer(uint256 varg0) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    stor_8 = varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    _balanceOf[varg0] += varg1;\n    _totalSupply += varg1;\n    emit Transfer(0, address(this), varg1);\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction buyPrice() public nonPayable { \n    return _buy;\n}\n\nfunction owner() public nonPayable { \n    return _setcommissionPer;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0xcda(varg1, varg0, msg.sender);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction setMinBalance(uint256 varg0) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    stor_7 = 0x38d7ea4c68000 * varg0;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v4 + v3.data] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = 1;\n    }\n    return v1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sendEtherToOwner() public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    v0 = _setcommissionPer.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    assert(_sellPrice);\n    require((address(this)).balance >= varg0 / _sellPrice);\n    0xcda(varg0, _setcommissionPer, msg.sender);\n    assert(_sellPrice);\n    v0 = msg.sender.call().value(varg0 / _sellPrice).gas(!(varg0 / _sellPrice) * 2300);\n    require(v0);\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_setcommissionPer == msg.sender);\n    if (varg0) {\n        _setcommissionPer = varg0;\n        goto 0x15b0x4e4;\n    }\n}\n\nfunction 0xcda(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg2);\n    require(!(0xff & _frozenAccount[v2]));\n    v3 = address(varg1);\n    require(!(0xff & _frozenAccount[v3]));\n    v4 = address(varg2);\n    _balanceOf[v4] = _balanceOf[v4] - varg0;\n    _balanceOf[_setcommissionPer] += varg0 * stor_8 / 100;\n    v5 = address(varg1);\n    _balanceOf[v5] = _balanceOf[v5] + (varg0 - varg0 * stor_8 / 100);\n    if (v5.balance < stor_7) {\n        v6 = _sellPrice * (stor_7 - (address(varg1)).balance);\n        0xcda(v6, _setcommissionPer, varg1);\n        assert(_sellPrice);\n        v7 = address(varg1).call().value(v6 / _sellPrice).gas(!(v6 / _sellPrice) * 2300);\n        require(v7);\n    }\n    v8 = varg0 * stor_8 / 100;\n    emit Transfer(address(varg2), _setcommissionPer, v8);\n    v9 = varg0 - varg0 * stor_8 / 100;\n    emit Transfer(address(varg2), address(varg1), v9);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x5fefda7) {\n            setPrices(uint256,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xc08bf88 == function_selector) {\n            terminate();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x5eb38bef == function_selector) {\n            setcommissionPer(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a != function_selector) {\n            if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            } else if (0xb414d4b6 == function_selector) {\n                frozenAccount(address);\n            } else if (0xc91d956c == function_selector) {\n                setMinBalance(uint256);\n            } else if (0xcae9ca51 == function_selector) {\n                approveAndCall(address,uint256,bytes);\n            } else if (0xdd62ed3e == function_selector) {\n                allowance(address,address);\n            } else if (0xe3ffc9a3 == function_selector) {\n                sendEtherToOwner();\n            } else if (0xe4849b32 == function_selector) {\n                sell(uint256);\n            } else if (0xe724529c == function_selector) {\n                freezeAccount(address,bool);\n            } else if (0xf2fde38b == function_selector) {\n                transferOwnership(address);\n            }\n        }\n    }\n    buy();\n}\n.",
	"status": "1",
	"time_cost": 22.479017972946167,
	"usage": {
		"completion_tokens": 700,
		"prompt_tokens": 3166,
		"total_tokens": 3866
	}
}