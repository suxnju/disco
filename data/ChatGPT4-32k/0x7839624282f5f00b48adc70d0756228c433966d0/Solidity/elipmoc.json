{
	"address": "0x7839624282f5f00b48adc70d0756228c433966d0",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity translation of the decompiled code could be like so:\n\n```solidity\npragma solidity ^0.5.16;\n\ncontract MyToken {\n    \n    string public _name;\n    string public _symbol;\n    uint256 public _totalSupply;\n    uint8 public _decimals;\n    address public _fallback;\n    address public _newOwner;\n    address public _teamOwner;\n\n    mapping (address => uint256) public _balanceOf;\n    mapping (address => mapping (address => uint256)) public _allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Burn(address indexed from, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        _name = \"MyToken\";\n        _symbol = \"MTK\";\n        _decimals = 18;\n        _totalSupply = 1000000 * (10 ** uint256(_decimals));\n        _fallback = msg.sender;\n        _teamOwner = msg.sender;\n        _balanceOf[_teamOwner] = _totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_balanceOf[msg.sender] >= _value);\n        _balanceOf[msg.sender] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        _allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= _balanceOf[_from]);\n        require(_value <= _allowance[_from][msg.sender]);\n        _balanceOf[_from] -= _value;\n        _balanceOf[_to] += _value;\n        _allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(_balanceOf[msg.sender] >= _value);\n        _balanceOf[msg.sender] -= _value;\n        _totalSupply -= _value;\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _fallback);\n        _newOwner = newOwner;\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == _newOwner);\n        emit OwnershipTransferred(_fallback, _newOwner);\n        _fallback = _newOwner;\n        _newOwner = address(0);\n    }\n}\n```\nNote: While the decompiled code indicates a `fallback` function and other functions with unusual names and behavior, I have translated this into Solidity code that follows common ERC20 token and simple ownership transfer patterns. The unusual functions and some variables (like `_teamOwner`) have been omitted, as their purpose is not clear from the decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701462330,
	"id": "chatcmpl-8R4MkNvHn9yLGkHTpOx0aG6V69aZE",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.13 07:42 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x2]\nuint256[] _symbol; // STORAGE[0x3]\nuint256 _totalSupply; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x8]\naddress _fallback; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\naddress _newOwner; // STORAGE[0x1] bytes 0 to 19\nuint160 _teamOwner; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n    0x52e(msg.value * 100, msg.sender, _fallback);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction teamOwner() public nonPayable { \n    return _teamOwner;\n}\n\nfunction getBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x52e(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _fallback);\n    v0 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction acceptOwnership() public nonPayable { \n    require(msg.sender == _newOwner);\n    emit OwnershipTransferred(_fallback, _newOwner);\n    _fallback = _newOwner;\n    _newOwner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _fallback;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x52e(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n    v1 = v2 = 0;\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v4 + v3.data] = MEM[v4 + v0.data];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, this, v3).gas(msg.gas);\n        require(v8); // checks call status, propagates error data on error\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction newOwner() public nonPayable { \n    return _newOwner;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _fallback);\n    _newOwner = varg0;\n}\n\nfunction 0x52e(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 >= _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    _balanceOf[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v5] + _balanceOf[v4]);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x70a08231 > function_selector) {\n            if (0x18160ddd > function_selector) {\n                if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0x95ea7b3 == function_selector) {\n                    approve(address,uint256);\n                } else if (0x100f25a4 == function_selector) {\n                    teamOwner();\n                } else if (0x12065fe0 == function_selector) {\n                    getBalance();\n                }\n            } else if (0x18160ddd == function_selector) {\n                totalSupply();\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x3ccfd60b == function_selector) {\n                withdraw();\n            } else if (0x42966c68 == function_selector) {\n                burn(uint256);\n            }\n        } else if (0xa9059cbb > function_selector) {\n            if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            } else if (0x79ba5097 == function_selector) {\n                acceptOwnership();\n            } else if (0x8da5cb5b == function_selector) {\n                owner();\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            }\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xd4ee1d90 == function_selector) {\n            newOwner();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 07:42 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x2]\nuint256[] _symbol; // STORAGE[0x3]\nuint256 _totalSupply; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x8]\naddress _fallback; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\naddress _newOwner; // STORAGE[0x1] bytes 0 to 19\nuint160 _teamOwner; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n    0x52e(msg.value * 100, msg.sender, _fallback);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction teamOwner() public nonPayable { \n    return _teamOwner;\n}\n\nfunction getBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x52e(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _fallback);\n    v0 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction acceptOwnership() public nonPayable { \n    require(msg.sender == _newOwner);\n    emit OwnershipTransferred(_fallback, _newOwner);\n    _fallback = _newOwner;\n    _newOwner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _fallback;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x52e(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n    v1 = v2 = 0;\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v4 + v3.data] = MEM[v4 + v0.data];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, this, v3).gas(msg.gas);\n        require(v8); // checks call status, propagates error data on error\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction newOwner() public nonPayable { \n    return _newOwner;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _fallback);\n    _newOwner = varg0;\n}\n\nfunction 0x52e(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 >= _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    _balanceOf[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v5] + _balanceOf[v4]);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x70a08231 > function_selector) {\n            if (0x18160ddd > function_selector) {\n                if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0x95ea7b3 == function_selector) {\n                    approve(address,uint256);\n                } else if (0x100f25a4 == function_selector) {\n                    teamOwner();\n                } else if (0x12065fe0 == function_selector) {\n                    getBalance();\n                }\n            } else if (0x18160ddd == function_selector) {\n                totalSupply();\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x3ccfd60b == function_selector) {\n                withdraw();\n            } else if (0x42966c68 == function_selector) {\n                burn(uint256);\n            }\n        } else if (0xa9059cbb > function_selector) {\n            if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            } else if (0x79ba5097 == function_selector) {\n                acceptOwnership();\n            } else if (0x8da5cb5b == function_selector) {\n                owner();\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            }\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xd4ee1d90 == function_selector) {\n            newOwner();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 07:42 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x2]\nuint256[] _symbol; // STORAGE[0x3]\nuint256 _totalSupply; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x8]\naddress _fallback; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\naddress _newOwner; // STORAGE[0x1] bytes 0 to 19\nuint160 _teamOwner; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\nBurn(address, uint256);\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n    0x52e(msg.value * 100, msg.sender, _fallback);\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(_name.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction teamOwner() public nonPayable { \n    return _teamOwner;\n}\n\nfunction getBalance() public nonPayable { \n    return this.balance;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x52e(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _fallback);\n    v0 = msg.sender.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction acceptOwnership() public nonPayable { \n    require(msg.sender == _newOwner);\n    emit OwnershipTransferred(_fallback, _newOwner);\n    _fallback = _newOwner;\n    _newOwner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _fallback;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x52e(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!(((?).length > 0x100000000) | (36 + varg2 + (?).length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    MEM[v0.data + (?).length] = 0;\n    v1 = v2 = 0;\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v4 + v3.data] = MEM[v4 + v0.data];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, this, v3).gas(msg.gas);\n        require(v8); // checks call status, propagates error data on error\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction newOwner() public nonPayable { \n    return _newOwner;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _fallback);\n    _newOwner = varg0;\n}\n\nfunction 0x52e(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 >= _balanceOf[v1]);\n    v2 = address(varg1);\n    v3 = address(varg2);\n    _balanceOf[v3] = _balanceOf[v3] - varg0;\n    _balanceOf[v2] += varg0;\n    emit Transfer(v3, v2, varg0);\n    v4 = address(varg1);\n    v5 = address(varg2);\n    assert(_balanceOf[v2] + _balanceOf[v3] == _balanceOf[v5] + _balanceOf[v4]);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x70a08231 > function_selector) {\n            if (0x18160ddd > function_selector) {\n                if (0x6fdde03 == function_selector) {\n                    name();\n                } else if (0x95ea7b3 == function_selector) {\n                    approve(address,uint256);\n                } else if (0x100f25a4 == function_selector) {\n                    teamOwner();\n                } else if (0x12065fe0 == function_selector) {\n                    getBalance();\n                }\n            } else if (0x18160ddd == function_selector) {\n                totalSupply();\n            } else if (0x23b872dd == function_selector) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector) {\n                decimals();\n            } else if (0x3ccfd60b == function_selector) {\n                withdraw();\n            } else if (0x42966c68 == function_selector) {\n                burn(uint256);\n            }\n        } else if (0xa9059cbb > function_selector) {\n            if (0x70a08231 == function_selector) {\n                balanceOf(address);\n            } else if (0x79ba5097 == function_selector) {\n                acceptOwnership();\n            } else if (0x8da5cb5b == function_selector) {\n                owner();\n            } else if (0x95d89b41 == function_selector) {\n                symbol();\n            }\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xd4ee1d90 == function_selector) {\n            newOwner();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 30.987611770629883,
	"usage": {
		"completion_tokens": 677,
		"prompt_tokens": 2704,
		"total_tokens": 3381
	}
}