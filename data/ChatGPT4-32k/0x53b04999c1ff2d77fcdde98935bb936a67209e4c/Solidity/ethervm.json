{
	"address": "0x53b04999c1ff2d77fcdde98935bb936a67209e4c",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity equivalent for the decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping(address => uint256) public balances;\n    uint256 public totalSupply;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    mapping(address => mapping(address => uint256)) public allowed;\n\n    function deposit() public payable returns (bool success) {\n        balances[msg.sender] += msg.value;\n        totalSupply += msg.value;\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowed[_from][msg.sender] -= _value;\n        return true;\n    }\n\n    function withdraw(uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        msg.sender.transfer(_value);\n        balances[msg.sender] -= _value;\n        totalSupply -= _value;\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n```\n\nPlease note that this is a general representation of the decompiled contract. The actual contract might have other details and functionalities. This contract is a simple implementation of an ERC20 token with deposit and withdraw functions.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472438,
	"id": "chatcmpl-8MuqkCuon9EifxOaTZHnZDdwCWIWq",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00DA:\n            var var0 = 0x00e2;\n            var0 = deposit();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00fa;\n                var var2 = name();\n            \n            label_00FA:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var2;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var3 = temp0;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var7 = memory[temp1:temp1 + 0x20];\n                var var6 = temp1 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0134:\n                    var temp2 = var7;\n                    var5 = temp2 + var5;\n                    var6 = temp2 & 0x1f;\n                \n                    if (!var6) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var5 - temp3];\n                    } else {\n                        var temp4 = var6;\n                        var temp5 = var5 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_0125:\n                    var temp7 = var11;\n                    memory[temp7 + var9:temp7 + var9 + 0x20] = memory[temp7 + var10:temp7 + var10 + 0x20];\n                    var11 = temp7 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0134; }\n                    else { goto label_0125; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_0193:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x17d9bfcb) {\n                // Dispatch table entry for withdrawAndTransfer(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var1 = withdrawAndTransfer(var2, var3);\n                goto label_0193;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var1 = totalSupply();\n            \n            label_01E0:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var temp12 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp12 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp12;\n                var4 = msg.data[0x44:0x64];\n                var1 = transfer(var2, var3, var4);\n                goto label_0193;\n            } else if (var0 == 0x27e235e3) {\n                // Dispatch table entry for balances(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balances(var2);\n                goto label_01E0;\n            } else if (var0 == 0x28026ace) {\n                // Dispatch table entry for depositAndApprove(address,uint256)\n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = depositAndApprove(var2, var3);\n                goto label_0193;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24];\n                var1 = withdraw(var2);\n                goto label_0193;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var2 = decimals();\n                goto label_01E0;\n            } else if (var0 == 0x5c658165) {\n                // Dispatch table entry for allowed(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var temp13 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp13 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp13;\n                var2 = allowed(var2, var3);\n                goto label_01E0;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_01E0;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00fa;\n                var2 = symbol();\n                goto label_00FA;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var4 = 0x00;\n                var5 = 0x09b9;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = var3;\n                var5 = transfer(var6, var7, var8);\n                var1 = var5;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x0193;\n                var1 = deposit();\n                goto label_0193;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var temp14 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp14 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp14;\n                var1 = allowance(var2, var3);\n                goto label_01E0;\n            } else { goto label_00DA; }\n        }\n    }\n    \n    function deposit() returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var1 = 0x0351;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var3 = msg.value;\n        var1 = func_09EB(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var2 = storage[0x00];\n        var1 = 0x0375;\n        var3 = msg.value;\n        var1 = func_09EB(var2, var3);\n        storage[0x00] = var1;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n        return 0x01;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0a;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x5665696c20457468657200000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = temp1;\n        var temp3 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function withdrawAndTransfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg0 > storage[keccak256(memory[var0:var0 + 0x40])]) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x19;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = 0x496e73756666696369656e7420757365722062616c616e636500000000000000;\n            var temp9 = memory[0x40:0x60];\n            revert(memory[temp9:temp9 + temp8 - temp9 + 0x64]);\n        } else if (arg1 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var1 = 0x0538;\n            var var3 = arg0;\n            var1 = func_09FD(var2, var3);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var2 = storage[0x00];\n            var1 = 0x055c;\n            var3 = arg0;\n            var1 = func_09FD(var2, var3);\n            storage[0x00] = var1;\n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg0;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(arg1 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var1 = !temp2;\n        \n            if (!var1) {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = arg0;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65, msg.sender]);\n                return 0x01;\n            } else {\n                var temp5 = returndata.length;\n                memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x16;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x496e76616c696420746172676574206164647265737300000000000000000000;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp6 - temp7 + 0x64]);\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function transfer(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg2 <= storage[keccak256(memory[var0:var0 + 0x40])]) {\n            var var1 = msg.sender != arg0 & 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender != arg0 & 0x02 ** 0xa0 - 0x01) {\n            label_066F:\n            \n                if (!var1) {\n                label_072E:\n                    memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    var1 = 0x0757;\n                    var var2 = storage[keccak256(memory[0x00:0x40])];\n                    var var3 = arg2;\n                    var1 = func_09FD(var2, var3);\n                    var temp0 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = arg0 & temp0;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    memory[0x00:0x20] = arg1 & temp0;\n                    var2 = storage[keccak256(memory[0x00:0x40])];\n                    var1 = 0x078c;\n                    var3 = arg2;\n                    var1 = func_09EB(var2, var3);\n                    var temp1 = 0x02 ** 0xa0 - 0x01;\n                    var temp2 = arg1 & temp1;\n                    memory[0x00:0x20] = temp2;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = arg2;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n                    return 0x01;\n                } else {\n                    var1 = arg2;\n                    var2 = 0x067f;\n                    var3 = arg0;\n                    var var4 = msg.sender;\n                    var2 = allowance(var3, var4);\n                \n                    if (var2 >= var1) {\n                        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp5;\n                        var2 = storage[keccak256(memory[0x00:0x40])];\n                        var1 = 0x0709;\n                        var3 = arg2;\n                        var1 = func_09FD(var2, var3);\n                        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                        var temp6 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp6;\n                        storage[keccak256(memory[0x00:0x40])] = var1;\n                        goto label_072E;\n                    } else {\n                        var temp7 = memory[0x40:0x60];\n                        memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                        memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x1b;\n                        memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x496e73756666696369656e74207573657220616c6c6f77616e63650000000000;\n                        var temp8 = memory[0x40:0x60];\n                        revert(memory[temp8:temp8 + temp7 - temp8 + 0x64]);\n                    }\n                }\n            } else {\n                var1 = ~0x00;\n                var2 = 0x066c;\n                var3 = arg0;\n                var4 = msg.sender;\n                var2 = allowance(var3, var4);\n                var1 = var2 != var1;\n                goto label_066F;\n            }\n        } else {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x19;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x496e73756666696369656e7420757365722062616c616e636500000000000000;\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n        }\n    }\n    \n    function balances(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function depositAndApprove(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0809;\n        var1 = deposit();\n        var1 = 0x0814;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = approve(var2, var3);\n        return 0x01;\n    }\n    \n    function withdraw(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg0 <= storage[keccak256(memory[var0:var0 + 0x40])]) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var1 = 0x08a5;\n            var var3 = arg0;\n            var1 = func_09FD(var2, var3);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x08c9;\n            var2 = storage[0x00];\n            var3 = arg0;\n            var1 = func_09FD(var2, var3);\n            storage[0x00] = var1;\n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg0;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var1 = !temp2;\n        \n            if (!var1) {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = arg0;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65, msg.sender]);\n                return 0x01;\n            } else {\n                var temp5 = returndata.length;\n                memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x19;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x496e73756666696369656e7420757365722062616c616e636500000000000000;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp6 - temp7 + 0x64]);\n        }\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function allowed(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x08;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x5665696c20455448000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_09EB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09FD(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00DA:\n            var var0 = 0x00e2;\n            var0 = deposit();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00fa;\n                var var2 = name();\n            \n            label_00FA:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var2;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var3 = temp0;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var7 = memory[temp1:temp1 + 0x20];\n                var var6 = temp1 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0134:\n                    var temp2 = var7;\n                    var5 = temp2 + var5;\n                    var6 = temp2 & 0x1f;\n                \n                    if (!var6) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var5 - temp3];\n                    } else {\n                        var temp4 = var6;\n                        var temp5 = var5 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_0125:\n                    var temp7 = var11;\n                    memory[temp7 + var9:temp7 + var9 + 0x20] = memory[temp7 + var10:temp7 + var10 + 0x20];\n                    var11 = temp7 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0134; }\n                    else { goto label_0125; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_0193:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x17d9bfcb) {\n                // Dispatch table entry for withdrawAndTransfer(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var1 = withdrawAndTransfer(var2, var3);\n                goto label_0193;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var1 = totalSupply();\n            \n            label_01E0:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var temp12 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp12 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp12;\n                var4 = msg.data[0x44:0x64];\n                var1 = transfer(var2, var3, var4);\n                goto label_0193;\n            } else if (var0 == 0x27e235e3) {\n                // Dispatch table entry for balances(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balances(var2);\n                goto label_01E0;\n            } else if (var0 == 0x28026ace) {\n                // Dispatch table entry for depositAndApprove(address,uint256)\n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = depositAndApprove(var2, var3);\n                goto label_0193;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24];\n                var1 = withdraw(var2);\n                goto label_0193;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var2 = decimals();\n                goto label_01E0;\n            } else if (var0 == 0x5c658165) {\n                // Dispatch table entry for allowed(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var temp13 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp13 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp13;\n                var2 = allowed(var2, var3);\n                goto label_01E0;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_01E0;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00fa;\n                var2 = symbol();\n                goto label_00FA;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var4 = 0x00;\n                var5 = 0x09b9;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = var3;\n                var5 = transfer(var6, var7, var8);\n                var1 = var5;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x0193;\n                var1 = deposit();\n                goto label_0193;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var temp14 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp14 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp14;\n                var1 = allowance(var2, var3);\n                goto label_01E0;\n            } else { goto label_00DA; }\n        }\n    }\n    \n    function deposit() returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var1 = 0x0351;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var3 = msg.value;\n        var1 = func_09EB(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var2 = storage[0x00];\n        var1 = 0x0375;\n        var3 = msg.value;\n        var1 = func_09EB(var2, var3);\n        storage[0x00] = var1;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n        return 0x01;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0a;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x5665696c20457468657200000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = temp1;\n        var temp3 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function withdrawAndTransfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg0 > storage[keccak256(memory[var0:var0 + 0x40])]) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x19;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = 0x496e73756666696369656e7420757365722062616c616e636500000000000000;\n            var temp9 = memory[0x40:0x60];\n            revert(memory[temp9:temp9 + temp8 - temp9 + 0x64]);\n        } else if (arg1 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var1 = 0x0538;\n            var var3 = arg0;\n            var1 = func_09FD(var2, var3);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var2 = storage[0x00];\n            var1 = 0x055c;\n            var3 = arg0;\n            var1 = func_09FD(var2, var3);\n            storage[0x00] = var1;\n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg0;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(arg1 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var1 = !temp2;\n        \n            if (!var1) {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = arg0;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65, msg.sender]);\n                return 0x01;\n            } else {\n                var temp5 = returndata.length;\n                memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x16;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x496e76616c696420746172676574206164647265737300000000000000000000;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp6 - temp7 + 0x64]);\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function transfer(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg2 <= storage[keccak256(memory[var0:var0 + 0x40])]) {\n            var var1 = msg.sender != arg0 & 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender != arg0 & 0x02 ** 0xa0 - 0x01) {\n            label_066F:\n            \n                if (!var1) {\n                label_072E:\n                    memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    var1 = 0x0757;\n                    var var2 = storage[keccak256(memory[0x00:0x40])];\n                    var var3 = arg2;\n                    var1 = func_09FD(var2, var3);\n                    var temp0 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = arg0 & temp0;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    memory[0x00:0x20] = arg1 & temp0;\n                    var2 = storage[keccak256(memory[0x00:0x40])];\n                    var1 = 0x078c;\n                    var3 = arg2;\n                    var1 = func_09EB(var2, var3);\n                    var temp1 = 0x02 ** 0xa0 - 0x01;\n                    var temp2 = arg1 & temp1;\n                    memory[0x00:0x20] = temp2;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = arg2;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n                    return 0x01;\n                } else {\n                    var1 = arg2;\n                    var2 = 0x067f;\n                    var3 = arg0;\n                    var var4 = msg.sender;\n                    var2 = allowance(var3, var4);\n                \n                    if (var2 >= var1) {\n                        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp5;\n                        var2 = storage[keccak256(memory[0x00:0x40])];\n                        var1 = 0x0709;\n                        var3 = arg2;\n                        var1 = func_09FD(var2, var3);\n                        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                        var temp6 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp6;\n                        storage[keccak256(memory[0x00:0x40])] = var1;\n                        goto label_072E;\n                    } else {\n                        var temp7 = memory[0x40:0x60];\n                        memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                        memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x1b;\n                        memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x496e73756666696369656e74207573657220616c6c6f77616e63650000000000;\n                        var temp8 = memory[0x40:0x60];\n                        revert(memory[temp8:temp8 + temp7 - temp8 + 0x64]);\n                    }\n                }\n            } else {\n                var1 = ~0x00;\n                var2 = 0x066c;\n                var3 = arg0;\n                var4 = msg.sender;\n                var2 = allowance(var3, var4);\n                var1 = var2 != var1;\n                goto label_066F;\n            }\n        } else {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x19;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x496e73756666696369656e7420757365722062616c616e636500000000000000;\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n        }\n    }\n    \n    function balances(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function depositAndApprove(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0809;\n        var1 = deposit();\n        var1 = 0x0814;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = approve(var2, var3);\n        return 0x01;\n    }\n    \n    function withdraw(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg0 <= storage[keccak256(memory[var0:var0 + 0x40])]) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var1 = 0x08a5;\n            var var3 = arg0;\n            var1 = func_09FD(var2, var3);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x08c9;\n            var2 = storage[0x00];\n            var3 = arg0;\n            var1 = func_09FD(var2, var3);\n            storage[0x00] = var1;\n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg0;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var1 = !temp2;\n        \n            if (!var1) {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = arg0;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65, msg.sender]);\n                return 0x01;\n            } else {\n                var temp5 = returndata.length;\n                memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x19;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x496e73756666696369656e7420757365722062616c616e636500000000000000;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp6 - temp7 + 0x64]);\n        }\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function allowed(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x08;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x5665696c20455448000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_09EB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09FD(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00DA:\n            var var0 = 0x00e2;\n            var0 = deposit();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00fa;\n                var var2 = name();\n            \n            label_00FA:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var2;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var3 = temp0;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var7 = memory[temp1:temp1 + 0x20];\n                var var6 = temp1 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0134:\n                    var temp2 = var7;\n                    var5 = temp2 + var5;\n                    var6 = temp2 & 0x1f;\n                \n                    if (!var6) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var5 - temp3];\n                    } else {\n                        var temp4 = var6;\n                        var temp5 = var5 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_0125:\n                    var temp7 = var11;\n                    memory[temp7 + var9:temp7 + var9 + 0x20] = memory[temp7 + var10:temp7 + var10 + 0x20];\n                    var11 = temp7 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0134; }\n                    else { goto label_0125; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_0193:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x17d9bfcb) {\n                // Dispatch table entry for withdrawAndTransfer(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var1 = withdrawAndTransfer(var2, var3);\n                goto label_0193;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var1 = totalSupply();\n            \n            label_01E0:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var temp12 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp12 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp12;\n                var4 = msg.data[0x44:0x64];\n                var1 = transfer(var2, var3, var4);\n                goto label_0193;\n            } else if (var0 == 0x27e235e3) {\n                // Dispatch table entry for balances(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balances(var2);\n                goto label_01E0;\n            } else if (var0 == 0x28026ace) {\n                // Dispatch table entry for depositAndApprove(address,uint256)\n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = depositAndApprove(var2, var3);\n                goto label_0193;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24];\n                var1 = withdraw(var2);\n                goto label_0193;\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var2 = decimals();\n                goto label_01E0;\n            } else if (var0 == 0x5c658165) {\n                // Dispatch table entry for allowed(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var temp13 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp13 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp13;\n                var2 = allowed(var2, var3);\n                goto label_01E0;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_01E0;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x00fa;\n                var2 = symbol();\n                goto label_00FA;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0193;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var4 = 0x00;\n                var5 = 0x09b9;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = var3;\n                var5 = transfer(var6, var7, var8);\n                var1 = var5;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x0193;\n                var1 = deposit();\n                goto label_0193;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var temp14 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp14 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp14;\n                var1 = allowance(var2, var3);\n                goto label_01E0;\n            } else { goto label_00DA; }\n        }\n    }\n    \n    function deposit() returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        var var1 = 0x0351;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var3 = msg.value;\n        var1 = func_09EB(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var2 = storage[0x00];\n        var1 = 0x0375;\n        var3 = msg.value;\n        var1 = func_09EB(var2, var3);\n        storage[0x00] = var1;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n        return 0x01;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0a;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x5665696c20457468657200000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = temp1;\n        var temp3 = arg1;\n        storage[keccak256(memory[0x00:0x40])] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function withdrawAndTransfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg0 > storage[keccak256(memory[var0:var0 + 0x40])]) {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x19;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = 0x496e73756666696369656e7420757365722062616c616e636500000000000000;\n            var temp9 = memory[0x40:0x60];\n            revert(memory[temp9:temp9 + temp8 - temp9 + 0x64]);\n        } else if (arg1 & 0x02 ** 0xa0 - 0x01) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var1 = 0x0538;\n            var var3 = arg0;\n            var1 = func_09FD(var2, var3);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var2 = storage[0x00];\n            var1 = 0x055c;\n            var3 = arg0;\n            var1 = func_09FD(var2, var3);\n            storage[0x00] = var1;\n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg0;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(arg1 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var1 = !temp2;\n        \n            if (!var1) {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = arg0;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65, msg.sender]);\n                return 0x01;\n            } else {\n                var temp5 = returndata.length;\n                memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x16;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x496e76616c696420746172676574206164647265737300000000000000000000;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp6 - temp7 + 0x64]);\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function transfer(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg2 <= storage[keccak256(memory[var0:var0 + 0x40])]) {\n            var var1 = msg.sender != arg0 & 0x02 ** 0xa0 - 0x01;\n        \n            if (msg.sender != arg0 & 0x02 ** 0xa0 - 0x01) {\n            label_066F:\n            \n                if (!var1) {\n                label_072E:\n                    memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x01;\n                    var1 = 0x0757;\n                    var var2 = storage[keccak256(memory[0x00:0x40])];\n                    var var3 = arg2;\n                    var1 = func_09FD(var2, var3);\n                    var temp0 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = arg0 & temp0;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    memory[0x00:0x20] = arg1 & temp0;\n                    var2 = storage[keccak256(memory[0x00:0x40])];\n                    var1 = 0x078c;\n                    var3 = arg2;\n                    var1 = func_09EB(var2, var3);\n                    var temp1 = 0x02 ** 0xa0 - 0x01;\n                    var temp2 = arg1 & temp1;\n                    memory[0x00:0x20] = temp2;\n                    memory[0x20:0x40] = 0x01;\n                    storage[keccak256(memory[0x00:0x40])] = var1;\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = arg2;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n                    return 0x01;\n                } else {\n                    var1 = arg2;\n                    var2 = 0x067f;\n                    var3 = arg0;\n                    var var4 = msg.sender;\n                    var2 = allowance(var3, var4);\n                \n                    if (var2 >= var1) {\n                        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp5;\n                        var2 = storage[keccak256(memory[0x00:0x40])];\n                        var1 = 0x0709;\n                        var3 = arg2;\n                        var1 = func_09FD(var2, var3);\n                        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                        var temp6 = keccak256(memory[0x00:0x40]);\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = temp6;\n                        storage[keccak256(memory[0x00:0x40])] = var1;\n                        goto label_072E;\n                    } else {\n                        var temp7 = memory[0x40:0x60];\n                        memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                        memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x1b;\n                        memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x496e73756666696369656e74207573657220616c6c6f77616e63650000000000;\n                        var temp8 = memory[0x40:0x60];\n                        revert(memory[temp8:temp8 + temp7 - temp8 + 0x64]);\n                    }\n                }\n            } else {\n                var1 = ~0x00;\n                var2 = 0x066c;\n                var3 = arg0;\n                var4 = msg.sender;\n                var2 = allowance(var3, var4);\n                var1 = var2 != var1;\n                goto label_066F;\n            }\n        } else {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x19;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x496e73756666696369656e7420757365722062616c616e636500000000000000;\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n        }\n    }\n    \n    function balances(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function depositAndApprove(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0809;\n        var1 = deposit();\n        var1 = 0x0814;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = approve(var2, var3);\n        return 0x01;\n    }\n    \n    function withdraw(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x01;\n    \n        if (arg0 <= storage[keccak256(memory[var0:var0 + 0x40])]) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var1 = 0x08a5;\n            var var3 = arg0;\n            var1 = func_09FD(var2, var3);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x01;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x08c9;\n            var2 = storage[0x00];\n            var3 = arg0;\n            var1 = func_09FD(var2, var3);\n            storage[0x00] = var1;\n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg0;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var1 = !temp2;\n        \n            if (!var1) {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = arg0;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0x7fcf532c15f0a6db0bd6d0e038bea71d30d808c7d98cb3bf7268a95bf5081b65, msg.sender]);\n                return 0x01;\n            } else {\n                var temp5 = returndata.length;\n                memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x19;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x496e73756666696369656e7420757365722062616c616e636500000000000000;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp6 - temp7 + 0x64]);\n        }\n    }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function allowed(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x01;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x08;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x5665696c20455448000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_09EB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09FD(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 34.7310631275177,
	"usage": {
		"completion_tokens": 439,
		"prompt_tokens": 7275,
		"total_tokens": 7714
	}
}