{
	"address": "0x207ff240d2f5baaefce160785f38ebd5d7bbdce4",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code based on the decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Auction {\n    uint256 public auctionStart;\n    uint256 public biddingTime;\n    uint256 public highestBid;\n    address public highestBidder;\n    address payable public beneficiary;\n    mapping(address => uint256) pendingReturns;\n    bool ended;\n\n    event AuctionEnded(address winner, uint256 highestBid);\n    event HighestBidIncreased(address bidder, uint256 amount);\n\n    constructor(uint _biddingTime, address payable _beneficiary) {\n        beneficiary = _beneficiary;\n        auctionStart = block.timestamp;\n        biddingTime = _biddingTime;\n    }\n\n    function bid() public payable {\n        require(block.timestamp <= auctionStart + biddingTime, \"Auction already ended.\");\n        require(msg.value > highestBid, \"There already is a higher bid.\");\n        if (highestBidder != address(0)) {\n            pendingReturns[highestBidder] += highestBid;\n        }\n        highestBidder = msg.sender;\n        highestBid = msg.value;\n        emit HighestBidIncreased(msg.sender, msg.value);\n    }\n\n    function withdraw() public returns (bool) {\n        uint256 amount = pendingReturns[msg.sender];\n        if (amount > 0) {\n            pendingReturns[msg.sender] = 0;\n            if (!payable(msg.sender).send(amount)) {\n                pendingReturns[msg.sender] = amount;\n                return false;\n            }\n        }\n        return true;\n    }\n\n    function auctionEnd() public {\n        require(!ended, \"auctionEnd has already been called.\");\n        require(block.timestamp >= auctionStart + biddingTime, \"Auction not yet ended.\");\n        ended = true;\n        emit AuctionEnded(highestBidder, highestBid);\n        beneficiary.transfer(highestBid);\n    }\n}\n```\nThis contract is a simple auction contract where users can bid during a certain period of time and the highest bidder at the end of the bidding time wins. The funds are then transferred to the beneficiary.",
				"role": "assistant"
			}
		}
	],
	"created": 1701467789,
	"id": "chatcmpl-8R5mn7OidgezNpPKAVcagc07rC1E0",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 11:34 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _auctionStart; // STORAGE[0x1]\nuint256 _biddingTime; // STORAGE[0x2]\nuint256 _highestBid; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _withdraw; // STORAGE[0x5]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_6_0_0; // STORAGE[0x6] bytes 0 to 0\naddress _highestBidder; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nHighestBidIncreased(address, uint256);\nAuctionEnded(address, uint256);\n\nfunction withdraw() public nonPayable { \n    if (_withdraw[msg.sender] > 0) {\n        _withdraw[msg.sender] = 0;\n        v0 = msg.sender.call().value(_withdraw[msg.sender]).gas(!_withdraw[msg.sender] * 2300);\n        if (!v0) {\n            _withdraw[msg.sender] = _withdraw[msg.sender];\n            v1 = 0;\n        }\n    }\n    return v1;\n    v1 = v2 = 1;\n}\n\nfunction auctionStart() public nonPayable { \n    return _auctionStart;\n}\n\nfunction highestBidder() public nonPayable { \n    return _highestBidder;\n}\n\nfunction biddingTime() public nonPayable { \n    return _biddingTime;\n}\n\nfunction highestBid() public nonPayable { \n    return _highestBid;\n}\n\nfunction bid() public payable { \n    require(block.timestamp <= _auctionStart + _biddingTime);\n    require(msg.value > _highestBid);\n    if (_highestBidder != 0) {\n        _withdraw[_highestBidder] = _withdraw[_highestBidder] + _highestBid;\n    }\n    _highestBidder = msg.sender;\n    _highestBid = msg.value;\n    emit HighestBidIncreased(msg.sender, msg.value);\n}\n\nfunction auctionEnd() public nonPayable { \n    require(block.timestamp >= _auctionStart + _biddingTime);\n    require(!stor_6_0_0);\n    stor_6_0_0 = 1;\n    emit AuctionEnded(_highestBidder, _highestBid);\n    v0 = _beneficiary.call().value(_highestBid).gas(!_highestBid * 2300);\n    require(v0);\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x1998aeef == function_selector) {\n            bid();\n        } else if (0x2a24f46c == function_selector) {\n            auctionEnd();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4f245ef7 == function_selector) {\n            auctionStart();\n        } else if (0x91f90157 == function_selector) {\n            highestBidder();\n        } else if (0xd074a38d == function_selector) {\n            biddingTime();\n        } else if (0xd57bde79 == function_selector) {\n            highestBid();\n        }\n    }\n    revert();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 11:34 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _auctionStart; // STORAGE[0x1]\nuint256 _biddingTime; // STORAGE[0x2]\nuint256 _highestBid; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _withdraw; // STORAGE[0x5]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_6_0_0; // STORAGE[0x6] bytes 0 to 0\naddress _highestBidder; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nHighestBidIncreased(address, uint256);\nAuctionEnded(address, uint256);\n\nfunction withdraw() public nonPayable { \n    if (_withdraw[msg.sender] > 0) {\n        _withdraw[msg.sender] = 0;\n        v0 = msg.sender.call().value(_withdraw[msg.sender]).gas(!_withdraw[msg.sender] * 2300);\n        if (!v0) {\n            _withdraw[msg.sender] = _withdraw[msg.sender];\n            v1 = 0;\n        }\n    }\n    return v1;\n    v1 = v2 = 1;\n}\n\nfunction auctionStart() public nonPayable { \n    return _auctionStart;\n}\n\nfunction highestBidder() public nonPayable { \n    return _highestBidder;\n}\n\nfunction biddingTime() public nonPayable { \n    return _biddingTime;\n}\n\nfunction highestBid() public nonPayable { \n    return _highestBid;\n}\n\nfunction bid() public payable { \n    require(block.timestamp <= _auctionStart + _biddingTime);\n    require(msg.value > _highestBid);\n    if (_highestBidder != 0) {\n        _withdraw[_highestBidder] = _withdraw[_highestBidder] + _highestBid;\n    }\n    _highestBidder = msg.sender;\n    _highestBid = msg.value;\n    emit HighestBidIncreased(msg.sender, msg.value);\n}\n\nfunction auctionEnd() public nonPayable { \n    require(block.timestamp >= _auctionStart + _biddingTime);\n    require(!stor_6_0_0);\n    stor_6_0_0 = 1;\n    emit AuctionEnded(_highestBidder, _highestBid);\n    v0 = _beneficiary.call().value(_highestBid).gas(!_highestBid * 2300);\n    require(v0);\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x1998aeef == function_selector) {\n            bid();\n        } else if (0x2a24f46c == function_selector) {\n            auctionEnd();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4f245ef7 == function_selector) {\n            auctionStart();\n        } else if (0x91f90157 == function_selector) {\n            highestBidder();\n        } else if (0xd074a38d == function_selector) {\n            biddingTime();\n        } else if (0xd57bde79 == function_selector) {\n            highestBid();\n        }\n    }\n    revert();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 11:34 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _auctionStart; // STORAGE[0x1]\nuint256 _biddingTime; // STORAGE[0x2]\nuint256 _highestBid; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _withdraw; // STORAGE[0x5]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_6_0_0; // STORAGE[0x6] bytes 0 to 0\naddress _highestBidder; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nHighestBidIncreased(address, uint256);\nAuctionEnded(address, uint256);\n\nfunction withdraw() public nonPayable { \n    if (_withdraw[msg.sender] > 0) {\n        _withdraw[msg.sender] = 0;\n        v0 = msg.sender.call().value(_withdraw[msg.sender]).gas(!_withdraw[msg.sender] * 2300);\n        if (!v0) {\n            _withdraw[msg.sender] = _withdraw[msg.sender];\n            v1 = 0;\n        }\n    }\n    return v1;\n    v1 = v2 = 1;\n}\n\nfunction auctionStart() public nonPayable { \n    return _auctionStart;\n}\n\nfunction highestBidder() public nonPayable { \n    return _highestBidder;\n}\n\nfunction biddingTime() public nonPayable { \n    return _biddingTime;\n}\n\nfunction highestBid() public nonPayable { \n    return _highestBid;\n}\n\nfunction bid() public payable { \n    require(block.timestamp <= _auctionStart + _biddingTime);\n    require(msg.value > _highestBid);\n    if (_highestBidder != 0) {\n        _withdraw[_highestBidder] = _withdraw[_highestBidder] + _highestBid;\n    }\n    _highestBidder = msg.sender;\n    _highestBid = msg.value;\n    emit HighestBidIncreased(msg.sender, msg.value);\n}\n\nfunction auctionEnd() public nonPayable { \n    require(block.timestamp >= _auctionStart + _biddingTime);\n    require(!stor_6_0_0);\n    stor_6_0_0 = 1;\n    emit AuctionEnded(_highestBidder, _highestBid);\n    v0 = _beneficiary.call().value(_highestBid).gas(!_highestBid * 2300);\n    require(v0);\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x1998aeef == function_selector) {\n            bid();\n        } else if (0x2a24f46c == function_selector) {\n            auctionEnd();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4f245ef7 == function_selector) {\n            auctionStart();\n        } else if (0x91f90157 == function_selector) {\n            highestBidder();\n        } else if (0xd074a38d == function_selector) {\n            biddingTime();\n        } else if (0xd57bde79 == function_selector) {\n            highestBid();\n        }\n    }\n    revert();\n}\n.",
	"status": "1",
	"time_cost": 14.683277130126953,
	"usage": {
		"completion_tokens": 416,
		"prompt_tokens": 827,
		"total_tokens": 1243
	}
}