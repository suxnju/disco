{
	"address": "0x83ba853b8196bb51c148dd762a827c703b156450",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the equivalent contract in Solidity:\n\n```Solidity\npragma solidity ^0.6.0;\n\ncontract MyContract {\n    mapping(address => uint256) private _members;\n    uint256 private _servicePercentage;\n    uint256 private _affiliatePercentage;\n    mapping(address => uint256) private _pendingWithdrawals;\n    address private _owner;\n    address private _serviceAccount;\n\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    function members(address varg0) public view returns(uint256) {\n        return _members[varg0];\n    }\n\n    function removeMember(address varg0) public {\n        require(msg.sender == _owner);\n        _members[varg0] = 0;\n    }\n\n    function isValidMember(address varg0) public view returns(bool) {\n        return _members[varg0] != 0;\n    }\n\n    function serviceAccount() public view returns(address) {\n        return _serviceAccount;\n    }\n\n    function withdraw() public {\n        uint256 amount = _pendingWithdrawals[msg.sender];\n        _pendingWithdrawals[msg.sender] = 0;\n        (bool success, ) = msg.sender.call.value(amount)(\"\");\n        require(success);\n    }\n\n    function servicePercentage() public view returns(uint256) {\n        return _servicePercentage;\n    }\n\n    function owner() public view returns(address) {\n        return _owner;\n    }\n\n    function affiliatePercentage() public view returns(uint256) {\n        return _affiliatePercentage;\n    }\n\n    function changeAffiliatePercentage(uint256 varg0) public {\n        require(msg.sender == _owner);\n        _affiliatePercentage = varg0;\n    }\n\n    function getAffiliateAmount(uint256 varg0) public view returns(uint256) {\n        return (_affiliatePercentage * varg0) / 1 ether;\n    }\n\n    function changeServicePercentage(uint256 varg0) public {\n        require(msg.sender == _owner);\n        _servicePercentage = varg0;\n    }\n\n    function addMember(address varg0) public {\n        require(msg.sender == _owner);\n        _members[varg0] = 1;\n    }\n\n    function changeServiceAccount(address varg0) public {\n        require(msg.sender == _owner);\n        _serviceAccount = varg0;\n    }\n\n    function transferOwnership(address varg0) public {\n        require(msg.sender == _owner && varg0 != address(0));\n        _owner = varg0;\n    }\n\n    function pendingWithdrawals(address varg0) public view returns(uint256) {\n        return _pendingWithdrawals[varg0];\n    }\n\n    function getFee(uint256 varg0) public view returns(uint256) {\n        return (_servicePercentage * varg0) / 1 ether;\n    }\n\n    fallback() external payable {\n        revert();\n    }\n\n    function collect(address varg0) public payable {\n        require(_members[msg.sender] != 0);\n        uint256 affiliateAmount = getAffiliateAmount(msg.value);\n        _pendingWithdrawals[varg0] += affiliateAmount;\n        assert(affiliateAmount <= msg.value);\n        _pendingWithdrawals[_serviceAccount] += msg.value - affiliateAmount;\n    }\n}\n```\nNote: The `fallback` function is used to handle situations when no other function matches the given function signature, or if no data was supplied at all. In this contract, the `fallback` function is designed to revert all transactions that don't match any of the implemented functions. Also, I removed the `__function_selector__` function as it is not necessary in Solidity. Solidity automatically generates this functionality.",
				"role": "assistant"
			}
		}
	],
	"created": 1701457370,
	"id": "chatcmpl-8R34k8JSRj9W5PC4CljMLOWtMyjix",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 20:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _members; // STORAGE[0x1]\nuint256 _servicePercentage; // STORAGE[0x3]\nuint256 _affiliatePercentage; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _pendingWithdrawals; // STORAGE[0x5]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint160 _serviceAccount; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction members(address varg0) public nonPayable { \n    return 0xff & _members[varg0];\n}\n\nfunction removeMember(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _members[varg0] = ~0xff & _members[varg0];\n}\n\nfunction isValidMember(address varg0) public nonPayable { \n    return 0xff & _members[varg0];\n}\n\nfunction serviceAccount() public nonPayable { \n    return _serviceAccount;\n}\n\nfunction withdraw() public nonPayable { \n    _pendingWithdrawals[msg.sender] = 0;\n    v0 = msg.sender.call().value(_pendingWithdrawals[msg.sender]).gas(!_pendingWithdrawals[msg.sender] * 2300);\n    require(v0);\n}\n\nfunction servicePercentage() public nonPayable { \n    return _servicePercentage;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction affiliatePercentage() public nonPayable { \n    return _affiliatePercentage;\n}\n\nfunction changeAffiliatePercentage(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _affiliatePercentage = varg0;\n}\n\nfunction getAffiliateAmount(uint256 varg0) public nonPayable { \n    v0 = 0x8fb(varg0);\n    return v0;\n}\n\nfunction changeServicePercentage(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _servicePercentage = varg0;\n}\n\nfunction addMember(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _members[varg0] = 0x1 | ~0xff & _members[varg0];\n}\n\nfunction changeServiceAccount(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _serviceAccount = varg0;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    if (varg0 != 0) {\n        _owner = varg0;\n    }\n}\n\nfunction pendingWithdrawals(address varg0) public nonPayable { \n    return _pendingWithdrawals[varg0];\n}\n\nfunction getFee(uint256 varg0) public nonPayable { \n    v0 = _SafeMul(_servicePercentage, varg0);\n    assert(0xde0b6b3a7640000);\n    return v0 / 0xde0b6b3a7640000;\n}\n\nfunction 0x8fb(uint256 varg0) private { \n    v0 = _SafeMul(_affiliatePercentage, varg0);\n    assert(0xde0b6b3a7640000);\n    return v0 / 0xde0b6b3a7640000;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction collect(address varg0) public payable { \n    require(0xff & _members[msg.sender]);\n    if (varg0 != 0) {\n        v0 = 0x8fb(msg.value);\n        _pendingWithdrawals[varg0] = _pendingWithdrawals[varg0] + v0;\n        assert(v0 <= msg.value);\n        _pendingWithdrawals[_serviceAccount] = _pendingWithdrawals[_serviceAccount] + (msg.value - v0);\n    } else {\n        _pendingWithdrawals[_serviceAccount] = _pendingWithdrawals[_serviceAccount] + msg.value;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6ec16f8 == function_selector) {\n            collect(address);\n        } else if (0x8ae4b0c == function_selector) {\n            members(address);\n        } else if (0xb1ca49a == function_selector) {\n            removeMember(address);\n        } else if (0x2b01bf51 == function_selector) {\n            isValidMember(address);\n        } else if (0x2bb0e10b == function_selector) {\n            serviceAccount();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x3f37c9d4 == function_selector) {\n            servicePercentage();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x91a57544 == function_selector) {\n            affiliatePercentage();\n        } else if (0x94bbfb56 == function_selector) {\n            changeAffiliatePercentage(uint256);\n        } else if (0xab207628 == function_selector) {\n            getAffiliateAmount(uint256);\n        } else if (0xb53aab4c == function_selector) {\n            changeServicePercentage(uint256);\n        } else if (0xca6d56dc == function_selector) {\n            addMember(address);\n        } else if (0xd333ec79 == function_selector) {\n            changeServiceAccount(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf3f43703 == function_selector) {\n            pendingWithdrawals(address);\n        } else if (0xfcee45f4 == function_selector) {\n            getFee(uint256);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 20:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _members; // STORAGE[0x1]\nuint256 _servicePercentage; // STORAGE[0x3]\nuint256 _affiliatePercentage; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _pendingWithdrawals; // STORAGE[0x5]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint160 _serviceAccount; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction members(address varg0) public nonPayable { \n    return 0xff & _members[varg0];\n}\n\nfunction removeMember(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _members[varg0] = ~0xff & _members[varg0];\n}\n\nfunction isValidMember(address varg0) public nonPayable { \n    return 0xff & _members[varg0];\n}\n\nfunction serviceAccount() public nonPayable { \n    return _serviceAccount;\n}\n\nfunction withdraw() public nonPayable { \n    _pendingWithdrawals[msg.sender] = 0;\n    v0 = msg.sender.call().value(_pendingWithdrawals[msg.sender]).gas(!_pendingWithdrawals[msg.sender] * 2300);\n    require(v0);\n}\n\nfunction servicePercentage() public nonPayable { \n    return _servicePercentage;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction affiliatePercentage() public nonPayable { \n    return _affiliatePercentage;\n}\n\nfunction changeAffiliatePercentage(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _affiliatePercentage = varg0;\n}\n\nfunction getAffiliateAmount(uint256 varg0) public nonPayable { \n    v0 = 0x8fb(varg0);\n    return v0;\n}\n\nfunction changeServicePercentage(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _servicePercentage = varg0;\n}\n\nfunction addMember(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _members[varg0] = 0x1 | ~0xff & _members[varg0];\n}\n\nfunction changeServiceAccount(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _serviceAccount = varg0;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    if (varg0 != 0) {\n        _owner = varg0;\n    }\n}\n\nfunction pendingWithdrawals(address varg0) public nonPayable { \n    return _pendingWithdrawals[varg0];\n}\n\nfunction getFee(uint256 varg0) public nonPayable { \n    v0 = _SafeMul(_servicePercentage, varg0);\n    assert(0xde0b6b3a7640000);\n    return v0 / 0xde0b6b3a7640000;\n}\n\nfunction 0x8fb(uint256 varg0) private { \n    v0 = _SafeMul(_affiliatePercentage, varg0);\n    assert(0xde0b6b3a7640000);\n    return v0 / 0xde0b6b3a7640000;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction collect(address varg0) public payable { \n    require(0xff & _members[msg.sender]);\n    if (varg0 != 0) {\n        v0 = 0x8fb(msg.value);\n        _pendingWithdrawals[varg0] = _pendingWithdrawals[varg0] + v0;\n        assert(v0 <= msg.value);\n        _pendingWithdrawals[_serviceAccount] = _pendingWithdrawals[_serviceAccount] + (msg.value - v0);\n    } else {\n        _pendingWithdrawals[_serviceAccount] = _pendingWithdrawals[_serviceAccount] + msg.value;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6ec16f8 == function_selector) {\n            collect(address);\n        } else if (0x8ae4b0c == function_selector) {\n            members(address);\n        } else if (0xb1ca49a == function_selector) {\n            removeMember(address);\n        } else if (0x2b01bf51 == function_selector) {\n            isValidMember(address);\n        } else if (0x2bb0e10b == function_selector) {\n            serviceAccount();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x3f37c9d4 == function_selector) {\n            servicePercentage();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x91a57544 == function_selector) {\n            affiliatePercentage();\n        } else if (0x94bbfb56 == function_selector) {\n            changeAffiliatePercentage(uint256);\n        } else if (0xab207628 == function_selector) {\n            getAffiliateAmount(uint256);\n        } else if (0xb53aab4c == function_selector) {\n            changeServicePercentage(uint256);\n        } else if (0xca6d56dc == function_selector) {\n            addMember(address);\n        } else if (0xd333ec79 == function_selector) {\n            changeServiceAccount(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf3f43703 == function_selector) {\n            pendingWithdrawals(address);\n        } else if (0xfcee45f4 == function_selector) {\n            getFee(uint256);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 20:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _members; // STORAGE[0x1]\nuint256 _servicePercentage; // STORAGE[0x3]\nuint256 _affiliatePercentage; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _pendingWithdrawals; // STORAGE[0x5]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint160 _serviceAccount; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction members(address varg0) public nonPayable { \n    return 0xff & _members[varg0];\n}\n\nfunction removeMember(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _members[varg0] = ~0xff & _members[varg0];\n}\n\nfunction isValidMember(address varg0) public nonPayable { \n    return 0xff & _members[varg0];\n}\n\nfunction serviceAccount() public nonPayable { \n    return _serviceAccount;\n}\n\nfunction withdraw() public nonPayable { \n    _pendingWithdrawals[msg.sender] = 0;\n    v0 = msg.sender.call().value(_pendingWithdrawals[msg.sender]).gas(!_pendingWithdrawals[msg.sender] * 2300);\n    require(v0);\n}\n\nfunction servicePercentage() public nonPayable { \n    return _servicePercentage;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction affiliatePercentage() public nonPayable { \n    return _affiliatePercentage;\n}\n\nfunction changeAffiliatePercentage(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _affiliatePercentage = varg0;\n}\n\nfunction getAffiliateAmount(uint256 varg0) public nonPayable { \n    v0 = 0x8fb(varg0);\n    return v0;\n}\n\nfunction changeServicePercentage(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _servicePercentage = varg0;\n}\n\nfunction addMember(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _members[varg0] = 0x1 | ~0xff & _members[varg0];\n}\n\nfunction changeServiceAccount(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _serviceAccount = varg0;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    if (varg0 != 0) {\n        _owner = varg0;\n    }\n}\n\nfunction pendingWithdrawals(address varg0) public nonPayable { \n    return _pendingWithdrawals[varg0];\n}\n\nfunction getFee(uint256 varg0) public nonPayable { \n    v0 = _SafeMul(_servicePercentage, varg0);\n    assert(0xde0b6b3a7640000);\n    return v0 / 0xde0b6b3a7640000;\n}\n\nfunction 0x8fb(uint256 varg0) private { \n    v0 = _SafeMul(_affiliatePercentage, varg0);\n    assert(0xde0b6b3a7640000);\n    return v0 / 0xde0b6b3a7640000;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction collect(address varg0) public payable { \n    require(0xff & _members[msg.sender]);\n    if (varg0 != 0) {\n        v0 = 0x8fb(msg.value);\n        _pendingWithdrawals[varg0] = _pendingWithdrawals[varg0] + v0;\n        assert(v0 <= msg.value);\n        _pendingWithdrawals[_serviceAccount] = _pendingWithdrawals[_serviceAccount] + (msg.value - v0);\n    } else {\n        _pendingWithdrawals[_serviceAccount] = _pendingWithdrawals[_serviceAccount] + msg.value;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6ec16f8 == function_selector) {\n            collect(address);\n        } else if (0x8ae4b0c == function_selector) {\n            members(address);\n        } else if (0xb1ca49a == function_selector) {\n            removeMember(address);\n        } else if (0x2b01bf51 == function_selector) {\n            isValidMember(address);\n        } else if (0x2bb0e10b == function_selector) {\n            serviceAccount();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x3f37c9d4 == function_selector) {\n            servicePercentage();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x91a57544 == function_selector) {\n            affiliatePercentage();\n        } else if (0x94bbfb56 == function_selector) {\n            changeAffiliatePercentage(uint256);\n        } else if (0xab207628 == function_selector) {\n            getAffiliateAmount(uint256);\n        } else if (0xb53aab4c == function_selector) {\n            changeServicePercentage(uint256);\n        } else if (0xca6d56dc == function_selector) {\n            addMember(address);\n        } else if (0xd333ec79 == function_selector) {\n            changeServiceAccount(address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf3f43703 == function_selector) {\n            pendingWithdrawals(address);\n        } else if (0xfcee45f4 == function_selector) {\n            getFee(uint256);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 41.581764936447144,
	"usage": {
		"completion_tokens": 742,
		"prompt_tokens": 1461,
		"total_tokens": 2203
	}
}