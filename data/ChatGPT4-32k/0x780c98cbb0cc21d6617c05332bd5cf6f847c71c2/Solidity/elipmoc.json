{
	"address": "0x780c98cbb0cc21d6617c05332bd5cf6f847c71c2",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity smart contract code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract AlphaJobsManager {\n    mapping (address => uint256) private _withdrawn;\n    address private _alphaJobsManager;\n\n    event FundsReceived(address sender, uint256 amount);\n    event RefundWithdrawn(address receiver, uint256 amount);\n\n    function () external payable {\n        emit FundsReceived(msg.sender, msg.value);\n    }\n\n    function withdraw(address receiver) public {\n        require(_withdrawn[receiver] == 0, \"address has already withdrawn alpha JobsManager refund\");\n        bytes memory alphaJobsManagerCode = codeAt(_alphaJobsManager);\n        require(alphaJobsManagerCode.length > 0);\n        \n        (bool success, bytes memory data) = _alphaJobsManager.call.gas(msg.gas)(abi.encodeWithSignature(\"broadcasters(address)\", receiver));\n        require(success);\n        require(data.length >= 64);\n        uint256 refundAmount;\n        (, refundAmount) = abi.decode(data, (bool, uint256));\n        require(refundAmount > 0, \"address does not have a deposit with alpha JobsManager\");\n        _withdrawn[receiver] = 1;\n\n        (bool sent, ) = receiver.call.value(refundAmount).gas(2300 * (refundAmount == 0 ? 1 : 0))(\"\");\n        require(sent);\n        emit RefundWithdrawn(receiver, refundAmount);\n    }\n\n    function withdrawn(address receiver) public view returns(uint256) {\n        return _withdrawn[receiver];\n    }\n\n    function alphaJobsManager() public view returns(address) {\n        return _alphaJobsManager;\n    }\n\n    function codeAt(address _addr) internal view returns (bytes memory o_code) {\n        assembly {\n            let size := extcodesize(_addr)\n            o_code := mload(0x40)\n            mstore(0x40, add(o_code, and(add(add(size, 0x20), 0x1f), not(0x1f))))\n            mstore(o_code, size)\n            extcodecopy(_addr, add(o_code, 0x20), 0, size)\n        }\n    }\n}\n```\nPlease note that the __function_selector__ function is not usually used in Solidity contracts, as Solidity automatically generates a function selector for each public and external function. In its place, I have provided a `codeAt` function which retrieves the bytecode of a contract at a given address, which is used in the `withdraw` function to check if the `_alphaJobsManager` contract exists.",
				"role": "assistant"
			}
		}
	],
	"created": 1701458730,
	"id": "chatcmpl-8R3QgAAbiIJ9fTwPnzXF9v2TL1PHm",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.14 01:25 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _withdrawn; // STORAGE[0x1]\naddress _alphaJobsManager; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nFundsReceived(address, uint256);\nRefundWithdrawn(address, uint256);\n\nfunction fallback() public payable { \n    emit FundsReceived(msg.sender, msg.value);\n}\n\nfunction withdraw(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!(0xff & _withdrawn[varg0]), 'address has already withdrawn alpha JobsManager refund');\n    require(_alphaJobsManager.code.size);\n    v0, v1 = _alphaJobsManager.broadcasters(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 64);\n    require(v1, 'address does not have a deposit with alpha JobsManager');\n    _withdrawn[varg0] = 0x1 | ~0xff & _withdrawn[varg0];\n    v2 = varg0.call().value(v1).gas(2300 * !v1);\n    require(v2); // checks call status, propagates error data on error\n    emit RefundWithdrawn(varg0, v1);\n}\n\nfunction withdrawn(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _withdrawn[varg0];\n}\n\nfunction alphaJobsManager() public nonPayable { \n    return _alphaJobsManager;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x51cff8d9 == function_selector >> 224) {\n            withdraw(address);\n        } else if (0x6ef61092 == function_selector >> 224) {\n            withdrawn(address);\n        } else if (0x997b645d == function_selector >> 224) {\n            alphaJobsManager();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 01:25 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _withdrawn; // STORAGE[0x1]\naddress _alphaJobsManager; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nFundsReceived(address, uint256);\nRefundWithdrawn(address, uint256);\n\nfunction fallback() public payable { \n    emit FundsReceived(msg.sender, msg.value);\n}\n\nfunction withdraw(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!(0xff & _withdrawn[varg0]), 'address has already withdrawn alpha JobsManager refund');\n    require(_alphaJobsManager.code.size);\n    v0, v1 = _alphaJobsManager.broadcasters(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 64);\n    require(v1, 'address does not have a deposit with alpha JobsManager');\n    _withdrawn[varg0] = 0x1 | ~0xff & _withdrawn[varg0];\n    v2 = varg0.call().value(v1).gas(2300 * !v1);\n    require(v2); // checks call status, propagates error data on error\n    emit RefundWithdrawn(varg0, v1);\n}\n\nfunction withdrawn(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _withdrawn[varg0];\n}\n\nfunction alphaJobsManager() public nonPayable { \n    return _alphaJobsManager;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x51cff8d9 == function_selector >> 224) {\n            withdraw(address);\n        } else if (0x6ef61092 == function_selector >> 224) {\n            withdrawn(address);\n        } else if (0x997b645d == function_selector >> 224) {\n            alphaJobsManager();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 01:25 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _withdrawn; // STORAGE[0x1]\naddress _alphaJobsManager; // STORAGE[0x0] bytes 0 to 19\n\n// Events\nFundsReceived(address, uint256);\nRefundWithdrawn(address, uint256);\n\nfunction fallback() public payable { \n    emit FundsReceived(msg.sender, msg.value);\n}\n\nfunction withdraw(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!(0xff & _withdrawn[varg0]), 'address has already withdrawn alpha JobsManager refund');\n    require(_alphaJobsManager.code.size);\n    v0, v1 = _alphaJobsManager.broadcasters(varg0).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 64);\n    require(v1, 'address does not have a deposit with alpha JobsManager');\n    _withdrawn[varg0] = 0x1 | ~0xff & _withdrawn[varg0];\n    v2 = varg0.call().value(v1).gas(2300 * !v1);\n    require(v2); // checks call status, propagates error data on error\n    emit RefundWithdrawn(varg0, v1);\n}\n\nfunction withdrawn(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _withdrawn[varg0];\n}\n\nfunction alphaJobsManager() public nonPayable { \n    return _alphaJobsManager;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x51cff8d9 == function_selector >> 224) {\n            withdraw(address);\n        } else if (0x6ef61092 == function_selector >> 224) {\n            withdrawn(address);\n        } else if (0x997b645d == function_selector >> 224) {\n            alphaJobsManager();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 20.19986391067505,
	"usage": {
		"completion_tokens": 532,
		"prompt_tokens": 568,
		"total_tokens": 1100
	}
}