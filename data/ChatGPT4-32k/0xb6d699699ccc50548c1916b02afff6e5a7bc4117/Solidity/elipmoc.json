{
	"address": "0xb6d699699ccc50548c1916b02afff6e5a7bc4117",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity contract code version of the given decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract DraperToken {\n    uint256 public _totalSupply;\n    uint256 public _rATE;\n    mapping (address => uint256) public _balanceOf;\n    mapping (address => mapping (address => uint256)) public _allowance;\n    bool public _isMinting;\n    bool public _isExchangeListed;\n    address public _owner;\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n\n    constructor() public {\n        _owner = msg.sender;\n        _isMinting = true;\n    }\n\n    function name() public pure returns (string memory) { \n        return \"Draper Token\";\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) { \n        _allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function generatedBy() public pure returns (string memory) { \n        return \"drapersolutions.com\";\n    }\n\n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n\n    function endCrowdsale() public { \n        require(msg.sender == _owner);\n        _isMinting = false;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) { \n        require(_value <= _allowance[_from][msg.sender]);\n        require(_value <= _balanceOf[_from]);\n        assert(_value > 0);\n        _balanceOf[_from] -= _value;\n        _balanceOf[_to] += _value;\n        _allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function isMinting() public view returns (bool) {\n        return _isMinting;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 10;\n    }\n\n    function changeCrowdsaleRate(uint256 _newRATE) public {\n        require(msg.sender == _owner);\n        _rATE = _newRATE;\n    }\n\n    function RATE() public view returns (uint256) {\n        return _rATE;\n    }\n\n    function burnTokens(uint256 _value) public {\n        require(msg.sender == _owner);\n        require(_value <= _balanceOf[_owner]);\n        assert(_value > 0);\n        _balanceOf[_owner] -= _value;\n        _totalSupply -= _value;\n    }\n\n    function balanceOf(address _address) public view returns (uint256 balance) {\n        return _balanceOf[_address];\n    }\n\n    function isExchangeListed() public view returns (bool) {\n        return _isExchangeListed;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"DRAPER\";\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_value <= _balanceOf[msg.sender]);\n        assert(_value > 0);\n        _balanceOf[msg.sender] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function createTokens() public payable {\n        require(_isMinting);\n        require(msg.value > 0);\n        uint256 tokens = msg.value / 1 ether * _rATE;\n        _balanceOf[msg.sender] += tokens;\n        _totalSupply += tokens;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return _allowance[_owner][_spender];\n    }\n}\n```\nNote: The provided code was quite abstract and contained some ambiguous parts, so some assumptions were made in the conversion. The contract may not function exactly as intended without more specific information.",
				"role": "assistant"
			}
		}
	],
	"created": 1701462474,
	"id": "chatcmpl-8R4P4ICvAeDnZTDhW6H9RPInZ2ARK",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 22:31 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nuint256 _rATE; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\nuint8 _isMinting; // STORAGE[0x2] bytes 0 to 0\nuint8 _isExchangeListed; // STORAGE[0x2] bytes 1 to 1\naddress _owner; // STORAGE[0x2] bytes 2 to 21\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    0x6c0();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (12) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffff & 'Draper Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction generatedBy() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (19) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffff & 'drapersolutions.com';\n    }\n    return v0;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction endCrowdsale() public nonPayable { \n    require(msg.sender == _owner);\n    _isMinting = 0;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _allowance[msg.sender] >= varg2;\n    if (v1) {\n        v0 = v2 = _balanceOf[varg0] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    require(v0);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _balanceOf[msg.sender]);\n    _allowance[msg.sender] = _balanceOf[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction isMinting() public nonPayable { \n    return _isMinting;\n}\n\nfunction decimals() public nonPayable { \n    return 10;\n}\n\nfunction _totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction changeCrowdsaleRate(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _rATE = varg0;\n}\n\nfunction RATE() public nonPayable { \n    return _rATE;\n}\n\nfunction burnTokens(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    v0 = v1 = _balanceOf[msg.sender] >= varg0;\n    if (v1) {\n        v0 = v2 = varg0 > 0;\n    }\n    require(v0);\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction isExchangeListed() public nonPayable { \n    return _isExchangeListed;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (6) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffff & 'DRAPER';\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = v2 = varg1 > 0;\n    }\n    require(v0);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction createTokens() public payable { \n    0x6c0();\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction 0x6c0() private { \n    require(_isMinting == 1);\n    require(msg.value > 0);\n    assert(0x5af3107a4000 > 0);\n    assert(0x5af3107a4000);\n    assert(0x5af3107a4000);\n    assert(msg.value == 0x5af3107a4000 * (msg.value / 0x5af3107a4000) + msg.value % 0x5af3107a4000);\n    v0 = v1 = msg.value / 0x5af3107a4000 == 0;\n    if (msg.value / 0x5af3107a4000 != 0) {\n        assert(msg.value / 0x5af3107a4000);\n        v0 = msg.value / 0x5af3107a4000 * _rATE / (msg.value / 0x5af3107a4000) == _rATE;\n    }\n    assert(v0);\n    assert(_balanceOf[msg.sender] + msg.value / 0x5af3107a4000 * _rATE >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value / 0x5af3107a4000 * _rATE;\n    assert(_totalSupply + msg.value / 0x5af3107a4000 * _rATE >= _totalSupply);\n    _totalSupply = _totalSupply + msg.value / 0x5af3107a4000 * _rATE;\n    v2 = _owner.call().value(msg.value).gas(!msg.value * 2300);\n    require(v2); // checks call status, propagates error data on error\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xced8c69 == function_selector) {\n            generatedBy();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x2095f2d4 == function_selector) {\n            endCrowdsale();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2a8092df == function_selector) {\n            isMinting();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3eaaf86b == function_selector) {\n            _totalSupply();\n        } else if (0x5c07ac94 == function_selector) {\n            changeCrowdsaleRate(uint256);\n        } else if (0x664e9704 == function_selector) {\n            RATE();\n        } else if (0x6d1b229d == function_selector) {\n            burnTokens(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7bbcb008 == function_selector) {\n            isExchangeListed();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb4427263 == function_selector) {\n            createTokens();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 22:31 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nuint256 _rATE; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\nuint8 _isMinting; // STORAGE[0x2] bytes 0 to 0\nuint8 _isExchangeListed; // STORAGE[0x2] bytes 1 to 1\naddress _owner; // STORAGE[0x2] bytes 2 to 21\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    0x6c0();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (12) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffff & 'Draper Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction generatedBy() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (19) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffff & 'drapersolutions.com';\n    }\n    return v0;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction endCrowdsale() public nonPayable { \n    require(msg.sender == _owner);\n    _isMinting = 0;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _allowance[msg.sender] >= varg2;\n    if (v1) {\n        v0 = v2 = _balanceOf[varg0] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    require(v0);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _balanceOf[msg.sender]);\n    _allowance[msg.sender] = _balanceOf[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction isMinting() public nonPayable { \n    return _isMinting;\n}\n\nfunction decimals() public nonPayable { \n    return 10;\n}\n\nfunction _totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction changeCrowdsaleRate(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _rATE = varg0;\n}\n\nfunction RATE() public nonPayable { \n    return _rATE;\n}\n\nfunction burnTokens(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    v0 = v1 = _balanceOf[msg.sender] >= varg0;\n    if (v1) {\n        v0 = v2 = varg0 > 0;\n    }\n    require(v0);\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction isExchangeListed() public nonPayable { \n    return _isExchangeListed;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (6) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffff & 'DRAPER';\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = v2 = varg1 > 0;\n    }\n    require(v0);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction createTokens() public payable { \n    0x6c0();\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction 0x6c0() private { \n    require(_isMinting == 1);\n    require(msg.value > 0);\n    assert(0x5af3107a4000 > 0);\n    assert(0x5af3107a4000);\n    assert(0x5af3107a4000);\n    assert(msg.value == 0x5af3107a4000 * (msg.value / 0x5af3107a4000) + msg.value % 0x5af3107a4000);\n    v0 = v1 = msg.value / 0x5af3107a4000 == 0;\n    if (msg.value / 0x5af3107a4000 != 0) {\n        assert(msg.value / 0x5af3107a4000);\n        v0 = msg.value / 0x5af3107a4000 * _rATE / (msg.value / 0x5af3107a4000) == _rATE;\n    }\n    assert(v0);\n    assert(_balanceOf[msg.sender] + msg.value / 0x5af3107a4000 * _rATE >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value / 0x5af3107a4000 * _rATE;\n    assert(_totalSupply + msg.value / 0x5af3107a4000 * _rATE >= _totalSupply);\n    _totalSupply = _totalSupply + msg.value / 0x5af3107a4000 * _rATE;\n    v2 = _owner.call().value(msg.value).gas(!msg.value * 2300);\n    require(v2); // checks call status, propagates error data on error\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xced8c69 == function_selector) {\n            generatedBy();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x2095f2d4 == function_selector) {\n            endCrowdsale();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2a8092df == function_selector) {\n            isMinting();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3eaaf86b == function_selector) {\n            _totalSupply();\n        } else if (0x5c07ac94 == function_selector) {\n            changeCrowdsaleRate(uint256);\n        } else if (0x664e9704 == function_selector) {\n            RATE();\n        } else if (0x6d1b229d == function_selector) {\n            burnTokens(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7bbcb008 == function_selector) {\n            isExchangeListed();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb4427263 == function_selector) {\n            createTokens();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 22:31 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nuint256 _rATE; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\nuint8 _isMinting; // STORAGE[0x2] bytes 0 to 0\nuint8 _isExchangeListed; // STORAGE[0x2] bytes 1 to 1\naddress _owner; // STORAGE[0x2] bytes 2 to 21\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    0x6c0();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (12) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffff & 'Draper Token';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction generatedBy() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (19) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffff & 'drapersolutions.com';\n    }\n    return v0;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction endCrowdsale() public nonPayable { \n    require(msg.sender == _owner);\n    _isMinting = 0;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _allowance[msg.sender] >= varg2;\n    if (v1) {\n        v0 = v2 = _balanceOf[varg0] >= varg2;\n    }\n    if (v0) {\n        v0 = v3 = varg2 > 0;\n    }\n    require(v0);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(_balanceOf[varg1] + varg2 >= _balanceOf[varg1]);\n    _balanceOf[varg1] = _balanceOf[varg1] + varg2;\n    assert(varg2 <= _balanceOf[msg.sender]);\n    _allowance[msg.sender] = _balanceOf[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction isMinting() public nonPayable { \n    return _isMinting;\n}\n\nfunction decimals() public nonPayable { \n    return 10;\n}\n\nfunction _totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction changeCrowdsaleRate(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _rATE = varg0;\n}\n\nfunction RATE() public nonPayable { \n    return _rATE;\n}\n\nfunction burnTokens(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    v0 = v1 = _balanceOf[msg.sender] >= varg0;\n    if (v1) {\n        v0 = v2 = varg0 > 0;\n    }\n    require(v0);\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction isExchangeListed() public nonPayable { \n    return _isExchangeListed;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (6) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffff & 'DRAPER';\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = v2 = varg1 > 0;\n    }\n    require(v0);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction createTokens() public payable { \n    0x6c0();\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction 0x6c0() private { \n    require(_isMinting == 1);\n    require(msg.value > 0);\n    assert(0x5af3107a4000 > 0);\n    assert(0x5af3107a4000);\n    assert(0x5af3107a4000);\n    assert(msg.value == 0x5af3107a4000 * (msg.value / 0x5af3107a4000) + msg.value % 0x5af3107a4000);\n    v0 = v1 = msg.value / 0x5af3107a4000 == 0;\n    if (msg.value / 0x5af3107a4000 != 0) {\n        assert(msg.value / 0x5af3107a4000);\n        v0 = msg.value / 0x5af3107a4000 * _rATE / (msg.value / 0x5af3107a4000) == _rATE;\n    }\n    assert(v0);\n    assert(_balanceOf[msg.sender] + msg.value / 0x5af3107a4000 * _rATE >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value / 0x5af3107a4000 * _rATE;\n    assert(_totalSupply + msg.value / 0x5af3107a4000 * _rATE >= _totalSupply);\n    _totalSupply = _totalSupply + msg.value / 0x5af3107a4000 * _rATE;\n    v2 = _owner.call().value(msg.value).gas(!msg.value * 2300);\n    require(v2); // checks call status, propagates error data on error\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0xced8c69 == function_selector) {\n            generatedBy();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x2095f2d4 == function_selector) {\n            endCrowdsale();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2a8092df == function_selector) {\n            isMinting();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3eaaf86b == function_selector) {\n            _totalSupply();\n        } else if (0x5c07ac94 == function_selector) {\n            changeCrowdsaleRate(uint256);\n        } else if (0x664e9704 == function_selector) {\n            RATE();\n        } else if (0x6d1b229d == function_selector) {\n            burnTokens(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7bbcb008 == function_selector) {\n            isExchangeListed();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb4427263 == function_selector) {\n            createTokens();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 51.67438793182373,
	"usage": {
		"completion_tokens": 875,
		"prompt_tokens": 2254,
		"total_tokens": 3129
	}
}