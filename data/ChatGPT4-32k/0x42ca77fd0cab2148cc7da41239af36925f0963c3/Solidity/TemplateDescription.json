{
	"address": "0x42ca77fd0cab2148cc7da41239af36925f0963c3",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code following the descriptions given:\n\n```solidity\npragma solidity 0.6.12;\n\ncontract Crowdsale {\n    using SafeMath for uint256;\n\n    address payable public beneficiary;\n    uint256 public fundinggoal;\n    uint256 public amountraised;\n    uint256 public deadline;\n    uint256 public price;\n    address public tokenreward;\n    mapping(address => uint256) public balanceof;\n    bool public crowdsaleclosed = false;\n    bool public fundinggoalreached = false;\n\n    constructor (\n        address ifSuccessfulSendTo,\n        uint256 fundingGoalInEthers,\n        uint256 durationInMinutes,\n        uint256 etherCostOfEachToken,\n        address addressOfTokenUsedAsReward\n    ) public {\n        beneficiary = ifSuccessfulSendTo;\n        fundinggoal = fundingGoalInEthers;\n        deadline = block.timestamp + durationInMinutes * 1 minutes;\n        price = etherCostOfEachToken;\n        tokenreward = addressOfTokenUsedAsReward;\n    }\n\n    function () external payable {\n        require(!crowdsaleclosed);\n        uint amount = msg.value;\n        balanceof[msg.sender] = balanceof[msg.sender].add(amount);\n        amountraised = amountraised.add(amount);\n        if (price != 0) {\n            (bool success, ) = tokenreward.call(\n                abi.encodePacked(\n                    bytes4(keccak256(\"transfer(address,uint256)\")),\n                    msg.sender,\n                    (2000 * amount) / price\n                )\n            );\n            require(success);\n        }\n    }\n\n    modifier afterDeadline() { \n      if (block.timestamp >= deadline) _; \n    }\n\n    function checkGoalReached() public afterDeadline {\n        if (amountraised >= fundinggoal){\n            fundinggoalreached = true;\n        }\n        crowdsaleclosed = true;\n    }\n\n    function safeWithdrawal() public afterDeadline {\n        if (!fundinggoalreached) {\n            uint amount = balanceof[msg.sender];\n            balanceof[msg.sender] = 0;\n            if (amount > 0) {\n                if (msg.sender.send(amount)) {\n                    fundinggoalreached = false;\n                } else {\n                    balanceof[msg.sender] = amount;\n                }\n            }\n        }\n\n        if (fundinggoalreached && beneficiary == msg.sender) {\n            if (beneficiary.send(amountraised)) {\n                fundinggoalreached = false;\n            } else {\n                // If we fail to send the funds to beneficiary, unlock funders balance\n                fundinggoalreached = true;\n            }\n        }\n    }\n}\n\nlibrary SafeMath {\n    function add(uint a, uint b) internal pure returns (uint c) {\n        c = a + b;\n        require(c >= a);\n    }\n    function sub(uint a, uint b) internal pure returns (uint c) {\n        require(b <= a);\n        c = a - b;\n    }\n    function mul(uint a, uint b) internal pure returns (uint c) {\n        c = a * b;\n        require(a == 0 || c / a == b);\n    }\n    function div(uint a, uint b) internal pure returns (uint c) {\n        require(b > 0);\n        c = a / b;\n    }\n}\n```\n\nThis contract uses a library `SafeMath` to prevent integer overflows and underflows. The contract `Crowdsale` is a crowdsale contract that accepts contributions in Ether and rewards contributors with an ERC20 token. The contract assumes that the token reward contract already contains a `transfer` function.",
				"role": "assistant"
			}
		}
	],
	"created": 1701717798,
	"id": "chatcmpl-8S8pCq7vr4HHpMxriRl0HhcWAlGQp",
	"input_format": "TemplateDescription",
	"ir": "For the payable constructor function.\n- the state variable fundinggoalreached will be updated to 0.\n- the state variable crowdsaleclosed will be updated to 0.\n\nFor the payable fallback function.\n- When crowdsaleclosed is 0:\n  - the balance of caller will be updated to (the balance of caller+the ether just received (i.e., msg.value)).\n  - the state variable amountraised will be updated to (amountraised+the ether just received (i.e., msg.value)).\n  - When price is not 0:\n    - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and (2000*(the ether just received (i.e., msg.value)/price)).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable fundinggoalreached will be updated to 1.\n  - the state variable crowdsaleclosed will be updated to 1.\n\nFor the safeWithdrawal function.\n- For beneficiary, and fundinggoalreached is not 0, and after deadline:\n  - it transfers ether valued amountraised to beneficiary.\n  - the state variable fundinggoalreached will be updated to 0.\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables and programming specifications are provided to help you develop. ",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the payable constructor function.\n- the state variable fundinggoalreached will be updated to 0.\n- the state variable crowdsaleclosed will be updated to 0.\n\nFor the payable fallback function.\n- When crowdsaleclosed is 0:\n  - the balance of caller will be updated to (the balance of caller+the ether just received (i.e., msg.value)).\n  - the state variable amountraised will be updated to (amountraised+the ether just received (i.e., msg.value)).\n  - When price is not 0:\n    - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and (2000*(the ether just received (i.e., msg.value)/price)).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable fundinggoalreached will be updated to 1.\n  - the state variable crowdsaleclosed will be updated to 1.\n\nFor the safeWithdrawal function.\n- For beneficiary, and fundinggoalreached is not 0, and after deadline:\n  - it transfers ether valued amountraised to beneficiary.\n  - the state variable fundinggoalreached will be updated to 0.\n\n.\n Here are some state variables with their corresponding types: public state variable `beneficiary` is typed address,public state variable `fundinggoal` is typed uint256,public state variable `amountraised` is typed uint256,public state variable `deadline` is typed uint256,public state variable `price` is typed uint256,public state variable `tokenreward` is typed address,public state variable `balanceof` is typed mapping,public state variable `crowdsaleclosed` is typed bool,public state variable `fundinggoalreached` is typed bool.\n Here are some programming specifications: - You must declare a variable before you can use it, but the same variable cannot be declared twice\n- You must lock the pragma and use a stable version (e.g., pragma solidity `0.6.12`).\n- For exteranal calls, you must use `.call()` instead of `.transfer()` and `.send()`.\n- The target address who receives ether must be `payable address` type.\n- You must make the function `payable` if `msg.value` is used in the public functions.\n- From security perspectives, you must check whether an overflow or underflow is possible before an arithmetic operation (e.g., safemath operations), and you should determine whether the user's address is empty before transferring ether to the him.\n- You cannot import external resources because you are a separate contract.\n- You must use the following methods in new versions rather than old methods\n  - For some built-in functions, \n    - `abi.encodePacked(...) returns (bytes memory)` performs packed encoding of arguments to bytes.\n    - `keccak256(bytes memory) returns (bytes32)` computes the Keccak-256 hash of the input.\n    - `sha256(bytes memory) returns (bytes32)` computes the SHA-256 hash of the input.\n    - `ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)` recovers the address associated with the public key from elliptic curve signature or return zero on error. \n  - For some properties,\n    - `block.number (uint)` returns the current block number.\n    - `block.timestamp (uint)` returns the current block timestamp as seconds since unix epoch.\n    - `blockhash(uint blockNumber) returns (bytes32)` returns the hash of the given block.\n- `0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` means `-1`, so `+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` indeed means `-1`.\n",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables and programming specifications are provided to help you develop. The following is the description of the contract logic: For the payable constructor function.\n- the state variable fundinggoalreached will be updated to 0.\n- the state variable crowdsaleclosed will be updated to 0.\n\nFor the payable fallback function.\n- When crowdsaleclosed is 0:\n  - the balance of caller will be updated to (the balance of caller+the ether just received (i.e., msg.value)).\n  - the state variable amountraised will be updated to (amountraised+the ether just received (i.e., msg.value)).\n  - When price is not 0:\n    - it calls an external function transfer of the external contract tokenreward with the following argument list: caller, and (2000*(the ether just received (i.e., msg.value)/price)).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable fundinggoalreached will be updated to 1.\n  - the state variable crowdsaleclosed will be updated to 1.\n\nFor the safeWithdrawal function.\n- For beneficiary, and fundinggoalreached is not 0, and after deadline:\n  - it transfers ether valued amountraised to beneficiary.\n  - the state variable fundinggoalreached will be updated to 0.\n\n.\n Here are some state variables with their corresponding types: public state variable `beneficiary` is typed address,public state variable `fundinggoal` is typed uint256,public state variable `amountraised` is typed uint256,public state variable `deadline` is typed uint256,public state variable `price` is typed uint256,public state variable `tokenreward` is typed address,public state variable `balanceof` is typed mapping,public state variable `crowdsaleclosed` is typed bool,public state variable `fundinggoalreached` is typed bool.\n Here are some programming specifications: - You must declare a variable before you can use it, but the same variable cannot be declared twice\n- You must lock the pragma and use a stable version (e.g., pragma solidity `0.6.12`).\n- For exteranal calls, you must use `.call()` instead of `.transfer()` and `.send()`.\n- The target address who receives ether must be `payable address` type.\n- You must make the function `payable` if `msg.value` is used in the public functions.\n- From security perspectives, you must check whether an overflow or underflow is possible before an arithmetic operation (e.g., safemath operations), and you should determine whether the user's address is empty before transferring ether to the him.\n- You cannot import external resources because you are a separate contract.\n- You must use the following methods in new versions rather than old methods\n  - For some built-in functions, \n    - `abi.encodePacked(...) returns (bytes memory)` performs packed encoding of arguments to bytes.\n    - `keccak256(bytes memory) returns (bytes32)` computes the Keccak-256 hash of the input.\n    - `sha256(bytes memory) returns (bytes32)` computes the SHA-256 hash of the input.\n    - `ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)` recovers the address associated with the public key from elliptic curve signature or return zero on error. \n  - For some properties,\n    - `block.number (uint)` returns the current block number.\n    - `block.timestamp (uint)` returns the current block timestamp as seconds since unix epoch.\n    - `blockhash(uint blockNumber) returns (bytes32)` returns the hash of the given block.\n- `0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` means `-1`, so `+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` indeed means `-1`.\n",
	"status": "1",
	"time_cost": 63.007319927215576,
	"usage": {
		"completion_tokens": 743,
		"prompt_tokens": 841,
		"total_tokens": 1584
	}
}