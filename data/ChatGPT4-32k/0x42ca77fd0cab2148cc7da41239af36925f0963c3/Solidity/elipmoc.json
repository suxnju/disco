{
	"address": "0x42ca77fd0cab2148cc7da41239af36925f0963c3",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity contract code corresponding to the decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Crowdsale {\n    uint256 _fundingGoal;\n    uint256 _amountRaised;\n    uint256 _deadline;\n    uint256 _price;\n    mapping (address => uint256) _balanceOf;\n    address payable _beneficiary;\n    bool _fundingGoalReached;\n    bool _crowdsaleClosed;\n    IERC20 _tokenReward;\n\n    event LogAmount(uint256 amount);\n    event FundTransfer(address backer, uint256 amount, bool isContribution);\n    event GoalReached(address recipient, uint256 totalAmountRaised);\n\n    function checkGoalReached() public { \n        if (block.timestamp >= _deadline) {\n            _fundingGoalReached = true;\n            emit GoalReached(_beneficiary, _amountRaised);\n            _crowdsaleClosed = true;\n        }\n    }\n\n    function deadline() public view returns (uint256) { \n        return _deadline;\n    }\n\n    function beneficiary() public view returns (address) { \n        return _beneficiary;\n    }\n\n    function tokenReward() public view returns (address) { \n        return address(_tokenReward);\n    }\n\n    function balanceOf(address varg0) public view returns (uint256) { \n        return _balanceOf[varg0];\n    }\n\n    function fundingGoal() public view returns (uint256) { \n        return _fundingGoal;\n    }\n\n    function amountRaised() public view returns (uint256) { \n        return _amountRaised;\n    }\n\n    function price() public view returns (uint256) { \n        return _price;\n    }\n\n    function crowdsaleClosed() public view returns (bool) { \n        return _crowdsaleClosed;\n    }\n\n    function fundingGoalReached() public view returns (bool) { \n        return _fundingGoalReached;\n    }\n\n    function safeWithdrawal() public { \n        if (block.timestamp >= _deadline && _fundingGoalReached && _beneficiary == msg.sender) {\n            bool success = _beneficiary.send(_amountRaised);\n            if (!success) {\n                _fundingGoalReached = false;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, false);\n            }\n        }\n    }\n\n    fallback() external payable { \n        require(!_crowdsaleClosed);\n        _balanceOf[msg.sender] += msg.value;\n        _amountRaised += msg.value;\n        emit LogAmount(msg.value);\n        require(_tokenReward.transfer(msg.sender, 2000 * (msg.value / _price)));\n        emit FundTransfer(msg.sender, msg.value, true);\n    }\n}\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n```\nThis contract represents a basic crowdsale where contributors can contribute ether to the contract and in return are rewarded with a certain amount of tokens. Note that the actual contract may have additional functionality not depicted in the decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701465923,
	"id": "chatcmpl-8R5IhEn6SJkhnzBEgelpP0LJNX7XB",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 07:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 _price; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x6]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\nuint8 _fundingGoalReached; // STORAGE[0x7] bytes 0 to 0\nuint8 _crowdsaleClosed; // STORAGE[0x7] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nLogAmount(uint256);\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        _fundingGoalReached = 1;\n        emit GoalReached(_beneficiary, _amountRaised);\n        _crowdsaleClosed = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction crowdsaleClosed() public nonPayable { \n    return _crowdsaleClosed;\n}\n\nfunction fundingGoalReached() public nonPayable { \n    return _fundingGoalReached;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        v0 = v1 = _fundingGoalReached;\n        if (v1) {\n            v0 = _beneficiary == msg.sender;\n        }\n        if (v0) {\n            v2 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v2) {\n                _fundingGoalReached = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction fallback() public payable { \n    require(!_crowdsaleClosed);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    emit LogAmount(msg.value);\n    assert(stor_4_0_0);\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, 2000 * (msg.value / _price)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xccb07cef == function_selector) {\n            crowdsaleClosed();\n        } else if (0xd424f628 == function_selector) {\n            fundingGoalReached();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 07:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 _price; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x6]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\nuint8 _fundingGoalReached; // STORAGE[0x7] bytes 0 to 0\nuint8 _crowdsaleClosed; // STORAGE[0x7] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nLogAmount(uint256);\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        _fundingGoalReached = 1;\n        emit GoalReached(_beneficiary, _amountRaised);\n        _crowdsaleClosed = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction crowdsaleClosed() public nonPayable { \n    return _crowdsaleClosed;\n}\n\nfunction fundingGoalReached() public nonPayable { \n    return _fundingGoalReached;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        v0 = v1 = _fundingGoalReached;\n        if (v1) {\n            v0 = _beneficiary == msg.sender;\n        }\n        if (v0) {\n            v2 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v2) {\n                _fundingGoalReached = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction fallback() public payable { \n    require(!_crowdsaleClosed);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    emit LogAmount(msg.value);\n    assert(stor_4_0_0);\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, 2000 * (msg.value / _price)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xccb07cef == function_selector) {\n            crowdsaleClosed();\n        } else if (0xd424f628 == function_selector) {\n            fundingGoalReached();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 07:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nuint256 _price; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x6]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_4_0_0; // STORAGE[0x4] bytes 0 to 0\nuint8 _fundingGoalReached; // STORAGE[0x7] bytes 0 to 0\nuint8 _crowdsaleClosed; // STORAGE[0x7] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x5] bytes 0 to 19\n\n// Events\nLogAmount(uint256);\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        _fundingGoalReached = 1;\n        emit GoalReached(_beneficiary, _amountRaised);\n        _crowdsaleClosed = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction crowdsaleClosed() public nonPayable { \n    return _crowdsaleClosed;\n}\n\nfunction fundingGoalReached() public nonPayable { \n    return _fundingGoalReached;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        v0 = v1 = _fundingGoalReached;\n        if (v1) {\n            v0 = _beneficiary == msg.sender;\n        }\n        if (v0) {\n            v2 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v2) {\n                _fundingGoalReached = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction fallback() public payable { \n    require(!_crowdsaleClosed);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    emit LogAmount(msg.value);\n    assert(stor_4_0_0);\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transfer(msg.sender, 2000 * (msg.value / _price)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xccb07cef == function_selector) {\n            crowdsaleClosed();\n        } else if (0xd424f628 == function_selector) {\n            fundingGoalReached();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 36.67206311225891,
	"usage": {
		"completion_tokens": 623,
		"prompt_tokens": 1064,
		"total_tokens": 1687
	}
}