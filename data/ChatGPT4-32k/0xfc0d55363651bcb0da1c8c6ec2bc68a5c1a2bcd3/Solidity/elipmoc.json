{
	"address": "0xfc0d55363651bcb0da1c8c6ec2bc68a5c1a2bcd3",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity contract code according to the decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Bassdrops {\n    uint256 private _totalSupply;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    mapping (address => bool) private _transfer;\n    uint256 private _tokensPerWei;\n    address private _setTokensPerWei;\n    bool private _isTradeable;\n    \n    event RecievedEth(address indexed sender, uint256 value, uint256 timestamp);\n    event TransferedEth(address indexed receiver, uint256 amount);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    \n    constructor(address initialOwner, uint256 initialTotalSupply, uint256 initialTokensPerWei) {\n        _setTokensPerWei = initialOwner;\n        _totalSupply = initialTotalSupply;\n        _tokensPerWei = initialTokensPerWei;\n        _isTradeable = true;\n    }\n    \n    fallback () external payable { \n        emit RecievedEth(msg.sender, msg.value, block.timestamp);\n    }\n    \n    function name() public pure returns (string memory) { \n        return 'Bassdrops, a Currency of Omnitem';\n    }\n    \n    function FoundationTransfer(address receiver, uint256 ethAmount, uint256 tokenAmount) public { \n        require(msg.sender == _setTokensPerWei, \"Only owner can call this function\");\n        require(address(this).balance >= ethAmount && _balanceOf[address(this)] >= tokenAmount, \"Insufficient balance\");\n        \n        if (ethAmount > 0) {\n            (bool success, ) = receiver.call{value: ethAmount}(\"\");\n            require(success, \"Transfer of ETH failed\");\n            emit TransferedEth(receiver, ethAmount);\n        }\n        \n        if (tokenAmount > 0) {\n            require(_balanceOf[receiver] + tokenAmount > _balanceOf[receiver], \"Overflow error\");\n            _balanceOf[address(this)] -= tokenAmount;\n            _balanceOf[receiver] += tokenAmount;\n            emit Transfer(address(this), receiver, tokenAmount);\n        }\n    }\n    \n    function approve(address spender, uint256 amount) public returns (bool) { \n        _allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n    \n    function totalSupply() public view returns (uint256) { \n        return _totalSupply;\n    }\n    \n    function transferFrom(address sender, address receiver, uint256 amount) public returns (bool) { \n        require(!_transfer[msg.sender] && !_transfer[sender] && !_transfer[receiver], \"Account is locked\");\n        require(_isTradeable, \"Transfer is not allowed\");\n        require(_balanceOf[sender] >= amount && _allowance[sender][msg.sender] >= amount && amount > 0, \"Transfer is not valid\");\n        \n        _balanceOf[sender] -= amount;\n        _allowance[sender][msg.sender] -= amount;\n        _balanceOf[receiver] += amount;\n        emit Transfer(sender, receiver, amount);\n        \n        return true;\n    }\n    \n    function SetTokensPerWei(uint256 amount) public { \n        require(msg.sender == _setTokensPerWei, \"Only owner can call this function\");\n        _tokensPerWei = amount;\n    }\n    \n    function LockAccount(address account) public { \n        require(msg.sender == _setTokensPerWei, \"Only owner can call this function\");\n        _transfer[account] = true;\n    }\n    \n    function decimals() public pure returns (uint8) { \n        return 11;\n    }\n    \n    function BuyToken() public payable { \n        require(msg.value > 0, \"No ETH sent\");\n        uint256 tokenAmount = _tokensPerWei * msg.value;\n        require(_balanceOf[address(this)] + tokenAmount > _balanceOf[address(this)], \"Overflow error\");\n        \n        _totalSupply += tokenAmount;\n        _balanceOf[msg.sender] += tokenAmount;\n        emit Transfer(address(this), msg.sender, tokenAmount);\n    }\n    \n    function CONTRACT_VERSION() public pure returns (string memory) { \n        return '4.1.0';\n    }\n    \n    function TokensPerWei() public view returns (uint256) { \n        return _tokensPerWei;\n    }\n    \n    function CONTRACT_NAME() public pure returns (string memory) { \n        return 'Bassdrops';\n    }\n    \n    function balanceOf(address account) public view returns (uint256) { \n        return _balanceOf[account];\n    }\n    \n    function TransferOwner(address newOwner) public { \n        require(msg.sender == _setTokensPerWei, \"Only owner can call this function\");\n        _setTokensPerWei = newOwner;\n    }\n    \n    function IsTradeable() public view returns (bool) { \n        return _isTradeable;\n    }\n    \n    function SetTradeable(bool tradeable) public { \n        require(msg.sender == _setTokensPerWei, \"Only owner can call this function\");\n        _isTradeable = tradeable;\n    }\n    \n    function Terminate() public { \n        require(msg.sender == _setTokensPerWei, \"Only owner can call this function\");\n        selfdestruct(payable(_setTokensPerWei));\n    }\n    \n    function symbol() public pure returns (string memory) { \n        return 'BASS';\n    }\n    \n    function QUOTE() public pure returns (string memory) { \n        return '';\n    }\n    \n    function transfer(address receiver, uint256 amount) public returns (bool) { \n        require(!_transfer[msg.sender], \"Account is locked\");\n        require(_isTradeable, \"Transfer is not allowed\");\n        require(_balanceOf[msg.sender] >= amount && amount > 0, \"Transfer is not valid\");\n        \n        _balanceOf[msg.sender] -= amount;\n        _balanceOf[receiver] += amount;\n        emit Transfer(msg.sender, receiver, amount);\n        \n        return true;\n    }\n    \n    function UnlockAccount(address account) public { \n        require(msg.sender == _setTokensPerWei, \"Only owner can call this function\");\n        _transfer[account] = false;\n    }\n    \n    function IsOwner(address account) public view returns (bool) { \n        return _setTokensPerWei == account;\n    }\n    \n    function allowance(address owner, address spender) public view returns (uint256) { \n        return _allowance[owner][spender];\n    }\n}\n```\n\nPlease note that I've made some assumptions as the original decompiled code didn't provide some specific information. Therefore, you might need to adjust this according to your specific requirements.",
				"role": "assistant"
			}
		}
	],
	"created": 1701461502,
	"id": "chatcmpl-8R49OCI9Cg9L7YVTzw8tPuf0y2DRY",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.13 04:57 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _transfer; // STORAGE[0x4]\nuint256 _tokensPerWei; // STORAGE[0x5]\naddress _setTokensPerWei; // STORAGE[0x0] bytes 0 to 19\nuint8 _isTradeable; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nRecievedEth(address, uint256, uint256);\nTransferedEth(address, uint256);\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction fallback() public payable { \n    emit RecievedEth(msg.sender, msg.value, block.timestamp);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (13) {\n        MEM[v5 - 13] = ~0xffffffffffffffffffffffffffffffffffffff & 'po Maximalism';\n    }\n    return v0, v6, 'Bassdrops, a Currency of Omnitem';\n}\n\nfunction FoundationTransfer(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    v0 = v1 = (address(this)).balance >= varg1;\n    if (v1) {\n        v0 = _balanceOf[address(this)] >= varg2;\n    }\n    require(v0);\n    if (varg1 > 0) {\n        v2 = varg0.call().value(varg1).gas(!varg1 * 2300);\n        require(v2);\n        emit TransferedEth(varg0, varg1);\n    }\n    if (varg2 > 0) {\n        require(_balanceOf[varg0] + varg2 > _balanceOf[varg0]);\n        _balanceOf[address(this)] = _balanceOf[address(this)] - varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg2;\n        emit Transfer(address(this), varg0, varg2);\n    }\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    emit Approval(msg.sender, varg0, varg1);\n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!(0xff & _transfer[msg.sender]));\n    v0 = v1 = !(0xff & _transfer[varg0]);\n    if (v1) {\n        v0 = !(0xff & _transfer[varg1]);\n    }\n    require(v0);\n    require(_isTradeable);\n    v2 = v3 = _balanceOf[varg0] >= varg2;\n    if (v3) {\n        v2 = v4 = _allowance[msg.sender] >= varg2;\n    }\n    if (v2) {\n        v2 = v5 = varg2 > 0;\n    }\n    if (v2) {\n        v2 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v2) {\n        v6 = v7 = 0;\n    } else {\n        emit Transfer(varg0, varg1, varg2);\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        _allowance[varg1] = _allowance[varg1] + varg2;\n        v6 = 1;\n    }\n    return v6;\n}\n\nfunction SetTokensPerWei(uint256 varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _tokensPerWei = varg0;\n}\n\nfunction LockAccount(address varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _transfer[varg0] = 0x1 | ~0xff & _transfer[varg0];\n}\n\nfunction decimals() public nonPayable { \n    return 11;\n}\n\nfunction BuyToken(bytes32 varg0) public payable { \n    require(msg.value > 0);\n    require(_balanceOf[address(this)] + _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000 > _balanceOf[address(this)]);\n    emit 0x4d69a11c29e2c7e86b8dc394610fcf08f946d892c09c1aece3e30c22036b375(msg.sender, _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000, ~0x0 & (~0x0 & (~0x0 & varg0)));\n    emit Transfer(address(this), msg.sender, _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000);\n    _totalSupply = _totalSupply + _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000;\n}\n\nfunction CONTRACT_VERSION() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (1) {\n        MEM[v0.data] = 0x4100000000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction TokensPerWei() public nonPayable { \n    return _tokensPerWei;\n}\n\nfunction CONTRACT_NAME() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'Bassdrops';\n    }\n    return v0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction TransferOwner(address varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _setTokensPerWei = varg0;\n}\n\nfunction IsTradeable() public nonPayable { \n    return _isTradeable;\n}\n\nfunction SetTradeable(bool varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _isTradeable = varg0;\n}\n\nfunction Terminate() public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    selfdestruct(_setTokensPerWei);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4241535300000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction QUOTE() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (18) {\n        MEM[v5 - 18] = ~0xffffffffffffffffffffffffffff & MEM[v5 - 18];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!(0xff & _transfer[msg.sender]));\n    require(_isTradeable);\n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        emit Transfer(msg.sender, varg0, varg1);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n        v3 = 1;\n    }\n    return v3;\n}\n\nfunction UnlockAccount(address varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _transfer[varg0] = ~0xff & _transfer[varg0];\n}\n\nfunction IsOwner(address varg0) public nonPayable { \n    return _setTokensPerWei == varg0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x730a322 == function_selector) {\n            FoundationTransfer(address,uint256,uint256);\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x296f3af1 == function_selector) {\n            SetTokensPerWei(uint256);\n        } else if (0x2e42b012 == function_selector) {\n            LockAccount(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x33642dcd == function_selector) {\n            BuyToken(bytes32);\n        } else if (0x38b90333 == function_selector) {\n            CONTRACT_VERSION();\n        } else if (0x5cfea6fb == function_selector) {\n            TokensPerWei();\n        } else if (0x614d08f8 == function_selector) {\n            CONTRACT_NAME();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x858ac4d8 == function_selector) {\n            TransferOwner(address);\n        } else if (0x8aa99826 == function_selector) {\n            IsTradeable();\n        } else if (0x8e3bd6fa == function_selector) {\n            SetTradeable(bool);\n        } else if (0x9445eb3a == function_selector) {\n            Terminate();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9c579839 == function_selector) {\n            QUOTE();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb9c97a44 == function_selector) {\n            UnlockAccount(address);\n        } else if (0xdd0860a8 == function_selector) {\n            IsOwner(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 04:57 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _transfer; // STORAGE[0x4]\nuint256 _tokensPerWei; // STORAGE[0x5]\naddress _setTokensPerWei; // STORAGE[0x0] bytes 0 to 19\nuint8 _isTradeable; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nRecievedEth(address, uint256, uint256);\nTransferedEth(address, uint256);\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction fallback() public payable { \n    emit RecievedEth(msg.sender, msg.value, block.timestamp);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (13) {\n        MEM[v5 - 13] = ~0xffffffffffffffffffffffffffffffffffffff & 'po Maximalism';\n    }\n    return v0, v6, 'Bassdrops, a Currency of Omnitem';\n}\n\nfunction FoundationTransfer(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    v0 = v1 = (address(this)).balance >= varg1;\n    if (v1) {\n        v0 = _balanceOf[address(this)] >= varg2;\n    }\n    require(v0);\n    if (varg1 > 0) {\n        v2 = varg0.call().value(varg1).gas(!varg1 * 2300);\n        require(v2);\n        emit TransferedEth(varg0, varg1);\n    }\n    if (varg2 > 0) {\n        require(_balanceOf[varg0] + varg2 > _balanceOf[varg0]);\n        _balanceOf[address(this)] = _balanceOf[address(this)] - varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg2;\n        emit Transfer(address(this), varg0, varg2);\n    }\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    emit Approval(msg.sender, varg0, varg1);\n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!(0xff & _transfer[msg.sender]));\n    v0 = v1 = !(0xff & _transfer[varg0]);\n    if (v1) {\n        v0 = !(0xff & _transfer[varg1]);\n    }\n    require(v0);\n    require(_isTradeable);\n    v2 = v3 = _balanceOf[varg0] >= varg2;\n    if (v3) {\n        v2 = v4 = _allowance[msg.sender] >= varg2;\n    }\n    if (v2) {\n        v2 = v5 = varg2 > 0;\n    }\n    if (v2) {\n        v2 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v2) {\n        v6 = v7 = 0;\n    } else {\n        emit Transfer(varg0, varg1, varg2);\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        _allowance[varg1] = _allowance[varg1] + varg2;\n        v6 = 1;\n    }\n    return v6;\n}\n\nfunction SetTokensPerWei(uint256 varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _tokensPerWei = varg0;\n}\n\nfunction LockAccount(address varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _transfer[varg0] = 0x1 | ~0xff & _transfer[varg0];\n}\n\nfunction decimals() public nonPayable { \n    return 11;\n}\n\nfunction BuyToken(bytes32 varg0) public payable { \n    require(msg.value > 0);\n    require(_balanceOf[address(this)] + _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000 > _balanceOf[address(this)]);\n    emit 0x4d69a11c29e2c7e86b8dc394610fcf08f946d892c09c1aece3e30c22036b375(msg.sender, _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000, ~0x0 & (~0x0 & (~0x0 & varg0)));\n    emit Transfer(address(this), msg.sender, _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000);\n    _totalSupply = _totalSupply + _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000;\n}\n\nfunction CONTRACT_VERSION() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (1) {\n        MEM[v0.data] = 0x4100000000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction TokensPerWei() public nonPayable { \n    return _tokensPerWei;\n}\n\nfunction CONTRACT_NAME() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'Bassdrops';\n    }\n    return v0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction TransferOwner(address varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _setTokensPerWei = varg0;\n}\n\nfunction IsTradeable() public nonPayable { \n    return _isTradeable;\n}\n\nfunction SetTradeable(bool varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _isTradeable = varg0;\n}\n\nfunction Terminate() public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    selfdestruct(_setTokensPerWei);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4241535300000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction QUOTE() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (18) {\n        MEM[v5 - 18] = ~0xffffffffffffffffffffffffffff & MEM[v5 - 18];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!(0xff & _transfer[msg.sender]));\n    require(_isTradeable);\n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        emit Transfer(msg.sender, varg0, varg1);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n        v3 = 1;\n    }\n    return v3;\n}\n\nfunction UnlockAccount(address varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _transfer[varg0] = ~0xff & _transfer[varg0];\n}\n\nfunction IsOwner(address varg0) public nonPayable { \n    return _setTokensPerWei == varg0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x730a322 == function_selector) {\n            FoundationTransfer(address,uint256,uint256);\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x296f3af1 == function_selector) {\n            SetTokensPerWei(uint256);\n        } else if (0x2e42b012 == function_selector) {\n            LockAccount(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x33642dcd == function_selector) {\n            BuyToken(bytes32);\n        } else if (0x38b90333 == function_selector) {\n            CONTRACT_VERSION();\n        } else if (0x5cfea6fb == function_selector) {\n            TokensPerWei();\n        } else if (0x614d08f8 == function_selector) {\n            CONTRACT_NAME();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x858ac4d8 == function_selector) {\n            TransferOwner(address);\n        } else if (0x8aa99826 == function_selector) {\n            IsTradeable();\n        } else if (0x8e3bd6fa == function_selector) {\n            SetTradeable(bool);\n        } else if (0x9445eb3a == function_selector) {\n            Terminate();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9c579839 == function_selector) {\n            QUOTE();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb9c97a44 == function_selector) {\n            UnlockAccount(address);\n        } else if (0xdd0860a8 == function_selector) {\n            IsOwner(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 04:57 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _transfer; // STORAGE[0x4]\nuint256 _tokensPerWei; // STORAGE[0x5]\naddress _setTokensPerWei; // STORAGE[0x0] bytes 0 to 19\nuint8 _isTradeable; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nRecievedEth(address, uint256, uint256);\nTransferedEth(address, uint256);\nTransfer(address, address, uint256);\nApproval(address, address, uint256);\n\nfunction fallback() public payable { \n    emit RecievedEth(msg.sender, msg.value, block.timestamp);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (13) {\n        MEM[v5 - 13] = ~0xffffffffffffffffffffffffffffffffffffff & 'po Maximalism';\n    }\n    return v0, v6, 'Bassdrops, a Currency of Omnitem';\n}\n\nfunction FoundationTransfer(address varg0, uint256 varg1, uint256 varg2) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    v0 = v1 = (address(this)).balance >= varg1;\n    if (v1) {\n        v0 = _balanceOf[address(this)] >= varg2;\n    }\n    require(v0);\n    if (varg1 > 0) {\n        v2 = varg0.call().value(varg1).gas(!varg1 * 2300);\n        require(v2);\n        emit TransferedEth(varg0, varg1);\n    }\n    if (varg2 > 0) {\n        require(_balanceOf[varg0] + varg2 > _balanceOf[varg0]);\n        _balanceOf[address(this)] = _balanceOf[address(this)] - varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg2;\n        emit Transfer(address(this), varg0, varg2);\n    }\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    emit Approval(msg.sender, varg0, varg1);\n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!(0xff & _transfer[msg.sender]));\n    v0 = v1 = !(0xff & _transfer[varg0]);\n    if (v1) {\n        v0 = !(0xff & _transfer[varg1]);\n    }\n    require(v0);\n    require(_isTradeable);\n    v2 = v3 = _balanceOf[varg0] >= varg2;\n    if (v3) {\n        v2 = v4 = _allowance[msg.sender] >= varg2;\n    }\n    if (v2) {\n        v2 = v5 = varg2 > 0;\n    }\n    if (v2) {\n        v2 = _balanceOf[varg1] + varg2 > _balanceOf[varg1];\n    }\n    if (!v2) {\n        v6 = v7 = 0;\n    } else {\n        emit Transfer(varg0, varg1, varg2);\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        _allowance[varg1] = _allowance[varg1] + varg2;\n        v6 = 1;\n    }\n    return v6;\n}\n\nfunction SetTokensPerWei(uint256 varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _tokensPerWei = varg0;\n}\n\nfunction LockAccount(address varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _transfer[varg0] = 0x1 | ~0xff & _transfer[varg0];\n}\n\nfunction decimals() public nonPayable { \n    return 11;\n}\n\nfunction BuyToken(bytes32 varg0) public payable { \n    require(msg.value > 0);\n    require(_balanceOf[address(this)] + _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000 > _balanceOf[address(this)]);\n    emit 0x4d69a11c29e2c7e86b8dc394610fcf08f946d892c09c1aece3e30c22036b375(msg.sender, _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000, ~0x0 & (~0x0 & (~0x0 & varg0)));\n    emit Transfer(address(this), msg.sender, _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000);\n    _totalSupply = _totalSupply + _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + _tokensPerWei * 0x174876e800 * msg.value / 0xde0b6b3a7640000;\n}\n\nfunction CONTRACT_VERSION() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (1) {\n        MEM[v0.data] = 0x4100000000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction TokensPerWei() public nonPayable { \n    return _tokensPerWei;\n}\n\nfunction CONTRACT_NAME() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'Bassdrops';\n    }\n    return v0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction TransferOwner(address varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _setTokensPerWei = varg0;\n}\n\nfunction IsTradeable() public nonPayable { \n    return _isTradeable;\n}\n\nfunction SetTradeable(bool varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _isTradeable = varg0;\n}\n\nfunction Terminate() public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    selfdestruct(_setTokensPerWei);\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x4241535300000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction QUOTE() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    v4 = v5 = v1.length + v0.data;\n    if (18) {\n        MEM[v5 - 18] = ~0xffffffffffffffffffffffffffff & MEM[v5 - 18];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!(0xff & _transfer[msg.sender]));\n    require(_isTradeable);\n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = v2 = varg1 > 0;\n    }\n    if (v0) {\n        v0 = _balanceOf[varg0] + varg1 > _balanceOf[varg0];\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        emit Transfer(msg.sender, varg0, varg1);\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n        v3 = 1;\n    }\n    return v3;\n}\n\nfunction UnlockAccount(address varg0) public nonPayable { \n    require(msg.sender == _setTokensPerWei);\n    _transfer[varg0] = ~0xff & _transfer[varg0];\n}\n\nfunction IsOwner(address varg0) public nonPayable { \n    return _setTokensPerWei == varg0;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x730a322 == function_selector) {\n            FoundationTransfer(address,uint256,uint256);\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x296f3af1 == function_selector) {\n            SetTokensPerWei(uint256);\n        } else if (0x2e42b012 == function_selector) {\n            LockAccount(address);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x33642dcd == function_selector) {\n            BuyToken(bytes32);\n        } else if (0x38b90333 == function_selector) {\n            CONTRACT_VERSION();\n        } else if (0x5cfea6fb == function_selector) {\n            TokensPerWei();\n        } else if (0x614d08f8 == function_selector) {\n            CONTRACT_NAME();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x858ac4d8 == function_selector) {\n            TransferOwner(address);\n        } else if (0x8aa99826 == function_selector) {\n            IsTradeable();\n        } else if (0x8e3bd6fa == function_selector) {\n            SetTradeable(bool);\n        } else if (0x9445eb3a == function_selector) {\n            Terminate();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9c579839 == function_selector) {\n            QUOTE();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb9c97a44 == function_selector) {\n            UnlockAccount(address);\n        } else if (0xdd0860a8 == function_selector) {\n            IsOwner(address);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 63.448434591293335,
	"usage": {
		"completion_tokens": 1416,
		"prompt_tokens": 2895,
		"total_tokens": 4311
	}
}