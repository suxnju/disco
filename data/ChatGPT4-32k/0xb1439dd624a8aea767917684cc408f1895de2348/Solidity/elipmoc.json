{
	"address": "0xb1439dd624a8aea767917684cc408f1895de2348",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled code, it seems the contract is an ERC20 token contract with some additional functionalities such as ownership and allowance management. Unfortunately, the decompiled code is not a perfect representation of the original Solidity code and contains some inaccuracies and unknowns. Therefore, the recompiled Solidity code might not work as expected. \n\nHere is the tentative Solidity code:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Token {\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    uint256 public totalSupply;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    address public owner;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol, uint8 decimalUnits, address centralMinter) public {\n        totalSupply = initialSupply;\n        balanceOf[msg.sender] = totalSupply;\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n        if(centralMinter != address(0)) owner = centralMinter;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value, \"Insufficient balance\");\n        balanceOf[msg.sender] -= _value;     \n        balanceOf[_to] += _value;            \n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balanceOf[_from], \"Insufficient balance\");\n        require(_value <= allowance[_from][msg.sender], \"Insufficient allowance\");\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == owner);\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n\n}\n```\nPlease note that this code is a representation of a basic ERC20 token contract with ownership. The original contract might have extra functionality that is not represented here, such as the `increaseAllowance`, `decreaseAllowance`, `renounceOwnership` functions.",
				"role": "assistant"
			}
		}
	],
	"created": 1701485921,
	"id": "chatcmpl-8RAVF9Zwd6li3yJPinJULTUpXqPqZ",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2023.11.17 11:25 UTC\n// Compiled using the solidity compiler version 0.8.17\n\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => uint256) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nuint256[] _@name_185; // STORAGE[0x2]\nmapping (uint256 => uint256) owner_4; // STORAGE[0x4]\nuint256 stor_5; // STORAGE[0x5]\nuint256[] _@symbol_195; // STORAGE[0x6]\nmapping (uint256 => mapping (uint256 => uint256)) _allowance; // STORAGE[0x9]\nuint256 stor_3_0_19; // STORAGE[0x3] bytes 0 to 19\nuint256 stor_7_0_19; // STORAGE[0x7] bytes 0 to 19\nuint256 _owner; // STORAGE[0xa] bytes 0 to 19\n\n\n// Events\nOwnershipTransferred(address, address);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    @_approve_724(varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    if (_allowance[varg0][msg.sender] != ~0) {\n        require(_allowance[varg0][msg.sender] >= varg2, Error('ERC20: insufficient allowance'));\n        @_approve_724(_allowance[varg0][msg.sender] - varg2, msg.sender, varg0);\n        // Unknown jump to Block 0x2d3. Refer to 3-address code (TAC);\n    }\n    @_transfer_550(varg2, varg1, varg0);\n    return bool(1);\n}\n\nfunction decimals() public payable { \n    return 18;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(_allowance[msg.sender][varg0] <= varg1 + _allowance[msg.sender][varg0], Panic(17)); // arithmetic overflow or underflow\n    @_approve_724(varg1 + _allowance[msg.sender][varg0], varg0, msg.sender);\n    return bool(1);\n}\n\nfunction balanceOf(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public payable { \n    require(msg.sender == _owner, Error('Ownable: caller is not the owner'));\n    emit OwnershipTransferred(_owner, 0);\n    _owner = 0;\n}\n\nfunction owner() public payable { \n    return _owner;\n}\n\nfunction symbol() public payable { \n    v0 = @symbol_195();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(_allowance[msg.sender][varg0] >= varg1, Error('ERC20: decreased allowance below zero'));\n    @_approve_724(_allowance[msg.sender][varg0] - varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    @_transfer_550(varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _allowance[varg0][varg1];\n}\n\nfunction transferOwnership(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    require(msg.sender == _owner, Error('Ownable: caller is not the owner'));\n    require(varg0, Error('Ownable: new owner is the zero address'));\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction @name_185() private { \n    v0 = v1 = _@name_185.length >> 1;\n    if (!(_@name_185.length & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((_@name_185.length & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    v3 = new bytes[](v0);\n    v4 = v5 = v3.data;\n    v6 = v7 = _@name_185.length >> 1;\n    if (!(_@name_185.length & 0x1)) {\n        v6 = v8 = v7 & 0x7f;\n    }\n    require((_@name_185.length & 0x1) - (v6 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    if (!v6) {\n        return v3;\n    } else if (31 < v6) {\n        v9 = _@name_185.data;\n        do {\n            MEM[v4] = STORAGE[v9];\n            v9 += 1;\n            v4 += 32;\n        } while (v5 + v6 <= v4);\n        return v3;\n    } else {\n        MEM[v5] = _@name_185.length >> 8 << 8;\n        return v3;\n    }\n}\n\nfunction @symbol_195() private { \n    v0 = v1 = _@symbol_195.length >> 1;\n    if (!(_@symbol_195.length & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((_@symbol_195.length & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    v3 = new bytes[](v0);\n    v4 = v5 = v3.data;\n    v6 = v7 = _@symbol_195.length >> 1;\n    if (!(_@symbol_195.length & 0x1)) {\n        v6 = v8 = v7 & 0x7f;\n    }\n    require((_@symbol_195.length & 0x1) - (v6 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    if (!v6) {\n        return v3;\n    } else if (31 < v6) {\n        v9 = _@symbol_195.data;\n        do {\n            MEM[v4] = STORAGE[v9];\n            v9 += 1;\n            v4 += 32;\n        } while (v5 + v6 <= v4);\n        return v3;\n    } else {\n        MEM[v5] = _@symbol_195.length >> 8 << 8;\n        return v3;\n    }\n}\n\nfunction @_approve_724(uint256 varg0, address varg1, address varg2) private { \n    require(varg2, Error('ERC20: approve from the zero address', 'ERC20: approve from the zero address'));\n    require(varg1, Error('ERC20: approve to the zero address'));\n    _allowance[varg2][varg1] = varg0;\n    emit Approval(varg2, varg1, varg0);\n    return ;\n}\n\nfunction @_transfer_550(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), Error('ERC20: transfer from the zero address'));\n    require(address(varg1), Error('ERC20: transfer to the zero address'));\n    require(_balanceOf[address(varg2)] >= varg0, Error('ERC20: transfer amount exceeds balance'));\n    require(_balanceOf[address(varg2)] - varg0 <= _balanceOf[address(varg2)], Panic(17)); // arithmetic overflow or underflow\n    v0 = v1 = 0;\n    _balanceOf[address(varg2)] = _balanceOf[address(varg2)] - varg0;\n    v2 = v3 = 1 != bool(uint8(owner_4[address(varg2)]));\n    if (1 != bool(uint8(owner_4[address(varg2)]))) {\n        v2 = v4 = tx.origin != address(varg1);\n    }\n    if (v2) {\n        v0 = v5 = stor_5;\n    }\n    require((v0 == v0 * varg0 / varg0) | !varg0, Panic(17)); // arithmetic overflow or underflow\n    require(100, Panic(18)); // division by zero\n    require(0 <= v0 * varg0 / 100 + 0, Panic(17)); // arithmetic overflow or underflow\n    if (v0 * varg0 / 100 + 0) {\n        v6 = _SafeAdd(v0 * varg0 / 100 + 0, _balanceOf[stor_7_0_19]);\n        require((v6 == v6) | !0x1, Panic(17)); // arithmetic overflow or underflow\n        _balanceOf[stor_7_0_19] = v6;\n        emit Transfer(address(varg2), stor_7_0_19, v0 * varg0 / 100 + 0);\n    }\n    require(varg0 - (v0 * varg0 / 100 + 0) <= varg0, Panic(17)); // arithmetic overflow or underflow\n    require(0 <= varg0 - (v0 * varg0 / 100 + 0) + 0, Panic(17)); // arithmetic overflow or underflow\n    v7 = _SafeAdd(varg0 - (v0 * varg0 / 100 + 0) + 0, _balanceOf[address(varg1)]);\n    require((v7 == v7) | !0x1, Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[address(varg1)] = v7;\n    require(varg0 - (v0 * varg0 / 100 + 0) <= varg0, Panic(17)); // arithmetic overflow or underflow\n    require(0 <= varg0 - (v0 * varg0 / 100 + 0) + 0, Panic(17)); // arithmetic overflow or underflow\n    emit Transfer(address(varg2), address(varg1), varg0 - (v0 * varg0 / 100 + 0) + 0);\n    if (!(address(varg1) - stor_3_0_19)) {\n        stor_5 = 98;\n        // Unknown jump to Block 0xa31. Refer to 3-address code (TAC);\n    }\n    return ;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    require(varg1 <= varg0 + varg1, Panic(17)); // arithmetic overflow or underflow\n    return varg0 + varg1;\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction name() public payable { \n    v0 = @name_185();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    require(!msg.value);\n    if (msg.data.length >= 4) {\n        if (0x715018a6 > function_selector >> 224) {\n            if (0x23b872dd > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x39509351 == function_selector >> 224) {\n                increaseAllowance(address,uint256);\n            } else {\n                require(0x70a08231 == function_selector >> 224);\n                balanceOf(address);\n            }\n        } else if (0xa457c2d7 > function_selector >> 224) {\n            if (0x715018a6 == function_selector >> 224) {\n                renounceOwnership();\n            } else if (0x8da5cb5b == function_selector >> 224) {\n                owner();\n            } else {\n                require(0x95d89b41 == function_selector >> 224);\n                symbol();\n            }\n        } else if (0xa457c2d7 == function_selector >> 224) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        } else {\n            require(0xf2fde38b == function_selector >> 224);\n            transferOwnership(address);\n        }\n    }\n    ();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2023.11.17 11:25 UTC\n// Compiled using the solidity compiler version 0.8.17\n\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => uint256) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nuint256[] _@name_185; // STORAGE[0x2]\nmapping (uint256 => uint256) owner_4; // STORAGE[0x4]\nuint256 stor_5; // STORAGE[0x5]\nuint256[] _@symbol_195; // STORAGE[0x6]\nmapping (uint256 => mapping (uint256 => uint256)) _allowance; // STORAGE[0x9]\nuint256 stor_3_0_19; // STORAGE[0x3] bytes 0 to 19\nuint256 stor_7_0_19; // STORAGE[0x7] bytes 0 to 19\nuint256 _owner; // STORAGE[0xa] bytes 0 to 19\n\n\n// Events\nOwnershipTransferred(address, address);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    @_approve_724(varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    if (_allowance[varg0][msg.sender] != ~0) {\n        require(_allowance[varg0][msg.sender] >= varg2, Error('ERC20: insufficient allowance'));\n        @_approve_724(_allowance[varg0][msg.sender] - varg2, msg.sender, varg0);\n        // Unknown jump to Block 0x2d3. Refer to 3-address code (TAC);\n    }\n    @_transfer_550(varg2, varg1, varg0);\n    return bool(1);\n}\n\nfunction decimals() public payable { \n    return 18;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(_allowance[msg.sender][varg0] <= varg1 + _allowance[msg.sender][varg0], Panic(17)); // arithmetic overflow or underflow\n    @_approve_724(varg1 + _allowance[msg.sender][varg0], varg0, msg.sender);\n    return bool(1);\n}\n\nfunction balanceOf(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public payable { \n    require(msg.sender == _owner, Error('Ownable: caller is not the owner'));\n    emit OwnershipTransferred(_owner, 0);\n    _owner = 0;\n}\n\nfunction owner() public payable { \n    return _owner;\n}\n\nfunction symbol() public payable { \n    v0 = @symbol_195();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(_allowance[msg.sender][varg0] >= varg1, Error('ERC20: decreased allowance below zero'));\n    @_approve_724(_allowance[msg.sender][varg0] - varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    @_transfer_550(varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _allowance[varg0][varg1];\n}\n\nfunction transferOwnership(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    require(msg.sender == _owner, Error('Ownable: caller is not the owner'));\n    require(varg0, Error('Ownable: new owner is the zero address'));\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction @name_185() private { \n    v0 = v1 = _@name_185.length >> 1;\n    if (!(_@name_185.length & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((_@name_185.length & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    v3 = new bytes[](v0);\n    v4 = v5 = v3.data;\n    v6 = v7 = _@name_185.length >> 1;\n    if (!(_@name_185.length & 0x1)) {\n        v6 = v8 = v7 & 0x7f;\n    }\n    require((_@name_185.length & 0x1) - (v6 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    if (!v6) {\n        return v3;\n    } else if (31 < v6) {\n        v9 = _@name_185.data;\n        do {\n            MEM[v4] = STORAGE[v9];\n            v9 += 1;\n            v4 += 32;\n        } while (v5 + v6 <= v4);\n        return v3;\n    } else {\n        MEM[v5] = _@name_185.length >> 8 << 8;\n        return v3;\n    }\n}\n\nfunction @symbol_195() private { \n    v0 = v1 = _@symbol_195.length >> 1;\n    if (!(_@symbol_195.length & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((_@symbol_195.length & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    v3 = new bytes[](v0);\n    v4 = v5 = v3.data;\n    v6 = v7 = _@symbol_195.length >> 1;\n    if (!(_@symbol_195.length & 0x1)) {\n        v6 = v8 = v7 & 0x7f;\n    }\n    require((_@symbol_195.length & 0x1) - (v6 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    if (!v6) {\n        return v3;\n    } else if (31 < v6) {\n        v9 = _@symbol_195.data;\n        do {\n            MEM[v4] = STORAGE[v9];\n            v9 += 1;\n            v4 += 32;\n        } while (v5 + v6 <= v4);\n        return v3;\n    } else {\n        MEM[v5] = _@symbol_195.length >> 8 << 8;\n        return v3;\n    }\n}\n\nfunction @_approve_724(uint256 varg0, address varg1, address varg2) private { \n    require(varg2, Error('ERC20: approve from the zero address', 'ERC20: approve from the zero address'));\n    require(varg1, Error('ERC20: approve to the zero address'));\n    _allowance[varg2][varg1] = varg0;\n    emit Approval(varg2, varg1, varg0);\n    return ;\n}\n\nfunction @_transfer_550(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), Error('ERC20: transfer from the zero address'));\n    require(address(varg1), Error('ERC20: transfer to the zero address'));\n    require(_balanceOf[address(varg2)] >= varg0, Error('ERC20: transfer amount exceeds balance'));\n    require(_balanceOf[address(varg2)] - varg0 <= _balanceOf[address(varg2)], Panic(17)); // arithmetic overflow or underflow\n    v0 = v1 = 0;\n    _balanceOf[address(varg2)] = _balanceOf[address(varg2)] - varg0;\n    v2 = v3 = 1 != bool(uint8(owner_4[address(varg2)]));\n    if (1 != bool(uint8(owner_4[address(varg2)]))) {\n        v2 = v4 = tx.origin != address(varg1);\n    }\n    if (v2) {\n        v0 = v5 = stor_5;\n    }\n    require((v0 == v0 * varg0 / varg0) | !varg0, Panic(17)); // arithmetic overflow or underflow\n    require(100, Panic(18)); // division by zero\n    require(0 <= v0 * varg0 / 100 + 0, Panic(17)); // arithmetic overflow or underflow\n    if (v0 * varg0 / 100 + 0) {\n        v6 = _SafeAdd(v0 * varg0 / 100 + 0, _balanceOf[stor_7_0_19]);\n        require((v6 == v6) | !0x1, Panic(17)); // arithmetic overflow or underflow\n        _balanceOf[stor_7_0_19] = v6;\n        emit Transfer(address(varg2), stor_7_0_19, v0 * varg0 / 100 + 0);\n    }\n    require(varg0 - (v0 * varg0 / 100 + 0) <= varg0, Panic(17)); // arithmetic overflow or underflow\n    require(0 <= varg0 - (v0 * varg0 / 100 + 0) + 0, Panic(17)); // arithmetic overflow or underflow\n    v7 = _SafeAdd(varg0 - (v0 * varg0 / 100 + 0) + 0, _balanceOf[address(varg1)]);\n    require((v7 == v7) | !0x1, Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[address(varg1)] = v7;\n    require(varg0 - (v0 * varg0 / 100 + 0) <= varg0, Panic(17)); // arithmetic overflow or underflow\n    require(0 <= varg0 - (v0 * varg0 / 100 + 0) + 0, Panic(17)); // arithmetic overflow or underflow\n    emit Transfer(address(varg2), address(varg1), varg0 - (v0 * varg0 / 100 + 0) + 0);\n    if (!(address(varg1) - stor_3_0_19)) {\n        stor_5 = 98;\n        // Unknown jump to Block 0xa31. Refer to 3-address code (TAC);\n    }\n    return ;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    require(varg1 <= varg0 + varg1, Panic(17)); // arithmetic overflow or underflow\n    return varg0 + varg1;\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction name() public payable { \n    v0 = @name_185();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    require(!msg.value);\n    if (msg.data.length >= 4) {\n        if (0x715018a6 > function_selector >> 224) {\n            if (0x23b872dd > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x39509351 == function_selector >> 224) {\n                increaseAllowance(address,uint256);\n            } else {\n                require(0x70a08231 == function_selector >> 224);\n                balanceOf(address);\n            }\n        } else if (0xa457c2d7 > function_selector >> 224) {\n            if (0x715018a6 == function_selector >> 224) {\n                renounceOwnership();\n            } else if (0x8da5cb5b == function_selector >> 224) {\n                owner();\n            } else {\n                require(0x95d89b41 == function_selector >> 224);\n                symbol();\n            }\n        } else if (0xa457c2d7 == function_selector >> 224) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        } else {\n            require(0xf2fde38b == function_selector >> 224);\n            transferOwnership(address);\n        }\n    }\n    ();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2023.11.17 11:25 UTC\n// Compiled using the solidity compiler version 0.8.17\n\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => uint256) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nuint256[] _@name_185; // STORAGE[0x2]\nmapping (uint256 => uint256) owner_4; // STORAGE[0x4]\nuint256 stor_5; // STORAGE[0x5]\nuint256[] _@symbol_195; // STORAGE[0x6]\nmapping (uint256 => mapping (uint256 => uint256)) _allowance; // STORAGE[0x9]\nuint256 stor_3_0_19; // STORAGE[0x3] bytes 0 to 19\nuint256 stor_7_0_19; // STORAGE[0x7] bytes 0 to 19\nuint256 _owner; // STORAGE[0xa] bytes 0 to 19\n\n\n// Events\nOwnershipTransferred(address, address);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    @_approve_724(varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction totalSupply() public payable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    require(msg.data.length - 4 >= 96);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    if (_allowance[varg0][msg.sender] != ~0) {\n        require(_allowance[varg0][msg.sender] >= varg2, Error('ERC20: insufficient allowance'));\n        @_approve_724(_allowance[varg0][msg.sender] - varg2, msg.sender, varg0);\n        // Unknown jump to Block 0x2d3. Refer to 3-address code (TAC);\n    }\n    @_transfer_550(varg2, varg1, varg0);\n    return bool(1);\n}\n\nfunction decimals() public payable { \n    return 18;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(_allowance[msg.sender][varg0] <= varg1 + _allowance[msg.sender][varg0], Panic(17)); // arithmetic overflow or underflow\n    @_approve_724(varg1 + _allowance[msg.sender][varg0], varg0, msg.sender);\n    return bool(1);\n}\n\nfunction balanceOf(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public payable { \n    require(msg.sender == _owner, Error('Ownable: caller is not the owner'));\n    emit OwnershipTransferred(_owner, 0);\n    _owner = 0;\n}\n\nfunction owner() public payable { \n    return _owner;\n}\n\nfunction symbol() public payable { \n    v0 = @symbol_195();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(_allowance[msg.sender][varg0] >= varg1, Error('ERC20: decreased allowance below zero'));\n    @_approve_724(_allowance[msg.sender][varg0] - varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    @_transfer_550(varg1, varg0, msg.sender);\n    return bool(1);\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    require(varg0 == varg0);\n    require(varg1 == varg1);\n    return _allowance[varg0][varg1];\n}\n\nfunction transferOwnership(address varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(varg0 == varg0);\n    require(msg.sender == _owner, Error('Ownable: caller is not the owner'));\n    require(varg0, Error('Ownable: new owner is the zero address'));\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction @name_185() private { \n    v0 = v1 = _@name_185.length >> 1;\n    if (!(_@name_185.length & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((_@name_185.length & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    v3 = new bytes[](v0);\n    v4 = v5 = v3.data;\n    v6 = v7 = _@name_185.length >> 1;\n    if (!(_@name_185.length & 0x1)) {\n        v6 = v8 = v7 & 0x7f;\n    }\n    require((_@name_185.length & 0x1) - (v6 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    if (!v6) {\n        return v3;\n    } else if (31 < v6) {\n        v9 = _@name_185.data;\n        do {\n            MEM[v4] = STORAGE[v9];\n            v9 += 1;\n            v4 += 32;\n        } while (v5 + v6 <= v4);\n        return v3;\n    } else {\n        MEM[v5] = _@name_185.length >> 8 << 8;\n        return v3;\n    }\n}\n\nfunction @symbol_195() private { \n    v0 = v1 = _@symbol_195.length >> 1;\n    if (!(_@symbol_195.length & 0x1)) {\n        v0 = v2 = v1 & 0x7f;\n    }\n    require((_@symbol_195.length & 0x1) - (v0 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    v3 = new bytes[](v0);\n    v4 = v5 = v3.data;\n    v6 = v7 = _@symbol_195.length >> 1;\n    if (!(_@symbol_195.length & 0x1)) {\n        v6 = v8 = v7 & 0x7f;\n    }\n    require((_@symbol_195.length & 0x1) - (v6 < 32), Panic(34)); // access to incorrectly encoded storage byte array\n    if (!v6) {\n        return v3;\n    } else if (31 < v6) {\n        v9 = _@symbol_195.data;\n        do {\n            MEM[v4] = STORAGE[v9];\n            v9 += 1;\n            v4 += 32;\n        } while (v5 + v6 <= v4);\n        return v3;\n    } else {\n        MEM[v5] = _@symbol_195.length >> 8 << 8;\n        return v3;\n    }\n}\n\nfunction @_approve_724(uint256 varg0, address varg1, address varg2) private { \n    require(varg2, Error('ERC20: approve from the zero address', 'ERC20: approve from the zero address'));\n    require(varg1, Error('ERC20: approve to the zero address'));\n    _allowance[varg2][varg1] = varg0;\n    emit Approval(varg2, varg1, varg0);\n    return ;\n}\n\nfunction @_transfer_550(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg2), Error('ERC20: transfer from the zero address'));\n    require(address(varg1), Error('ERC20: transfer to the zero address'));\n    require(_balanceOf[address(varg2)] >= varg0, Error('ERC20: transfer amount exceeds balance'));\n    require(_balanceOf[address(varg2)] - varg0 <= _balanceOf[address(varg2)], Panic(17)); // arithmetic overflow or underflow\n    v0 = v1 = 0;\n    _balanceOf[address(varg2)] = _balanceOf[address(varg2)] - varg0;\n    v2 = v3 = 1 != bool(uint8(owner_4[address(varg2)]));\n    if (1 != bool(uint8(owner_4[address(varg2)]))) {\n        v2 = v4 = tx.origin != address(varg1);\n    }\n    if (v2) {\n        v0 = v5 = stor_5;\n    }\n    require((v0 == v0 * varg0 / varg0) | !varg0, Panic(17)); // arithmetic overflow or underflow\n    require(100, Panic(18)); // division by zero\n    require(0 <= v0 * varg0 / 100 + 0, Panic(17)); // arithmetic overflow or underflow\n    if (v0 * varg0 / 100 + 0) {\n        v6 = _SafeAdd(v0 * varg0 / 100 + 0, _balanceOf[stor_7_0_19]);\n        require((v6 == v6) | !0x1, Panic(17)); // arithmetic overflow or underflow\n        _balanceOf[stor_7_0_19] = v6;\n        emit Transfer(address(varg2), stor_7_0_19, v0 * varg0 / 100 + 0);\n    }\n    require(varg0 - (v0 * varg0 / 100 + 0) <= varg0, Panic(17)); // arithmetic overflow or underflow\n    require(0 <= varg0 - (v0 * varg0 / 100 + 0) + 0, Panic(17)); // arithmetic overflow or underflow\n    v7 = _SafeAdd(varg0 - (v0 * varg0 / 100 + 0) + 0, _balanceOf[address(varg1)]);\n    require((v7 == v7) | !0x1, Panic(17)); // arithmetic overflow or underflow\n    _balanceOf[address(varg1)] = v7;\n    require(varg0 - (v0 * varg0 / 100 + 0) <= varg0, Panic(17)); // arithmetic overflow or underflow\n    require(0 <= varg0 - (v0 * varg0 / 100 + 0) + 0, Panic(17)); // arithmetic overflow or underflow\n    emit Transfer(address(varg2), address(varg1), varg0 - (v0 * varg0 / 100 + 0) + 0);\n    if (!(address(varg1) - stor_3_0_19)) {\n        stor_5 = 98;\n        // Unknown jump to Block 0xa31. Refer to 3-address code (TAC);\n    }\n    return ;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    require(varg1 <= varg0 + varg1, Panic(17)); // arithmetic overflow or underflow\n    return varg0 + varg1;\n}\n\nfunction () public payable { \n    revert();\n}\n\nfunction name() public payable { \n    v0 = @name_185();\n    v1 = new bytes[](v0.length);\n    v2 = v3 = 0;\n    while (v2 < v0.length) {\n        v1[v2] = v0[v2];\n        v2 += 32;\n    }\n    v1[v0.length] = 0;\n    return v1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    require(!msg.value);\n    if (msg.data.length >= 4) {\n        if (0x715018a6 > function_selector >> 224) {\n            if (0x23b872dd > function_selector >> 224) {\n                if (0x6fdde03 == function_selector >> 224) {\n                    name();\n                } else if (0x95ea7b3 == function_selector >> 224) {\n                    approve(address,uint256);\n                } else if (0x18160ddd == function_selector >> 224) {\n                    totalSupply();\n                }\n            } else if (0x23b872dd == function_selector >> 224) {\n                transferFrom(address,address,uint256);\n            } else if (0x313ce567 == function_selector >> 224) {\n                decimals();\n            } else if (0x39509351 == function_selector >> 224) {\n                increaseAllowance(address,uint256);\n            } else {\n                require(0x70a08231 == function_selector >> 224);\n                balanceOf(address);\n            }\n        } else if (0xa457c2d7 > function_selector >> 224) {\n            if (0x715018a6 == function_selector >> 224) {\n                renounceOwnership();\n            } else if (0x8da5cb5b == function_selector >> 224) {\n                owner();\n            } else {\n                require(0x95d89b41 == function_selector >> 224);\n                symbol();\n            }\n        } else if (0xa457c2d7 == function_selector >> 224) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector >> 224) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector >> 224) {\n            allowance(address,address);\n        } else {\n            require(0xf2fde38b == function_selector >> 224);\n            transferOwnership(address);\n        }\n    }\n    ();\n}\n.",
	"status": "1",
	"time_cost": 24.266361474990845,
	"usage": {
		"completion_tokens": 601,
		"prompt_tokens": 3304,
		"total_tokens": 3905
	}
}