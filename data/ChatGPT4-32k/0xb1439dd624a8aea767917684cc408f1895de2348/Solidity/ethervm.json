{
	"address": "0xb1439dd624a8aea767917684cc408f1895de2348",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "It seems that the contract in question is an ERC-20 token contract with a few additional functions. Here's a Solidity version of the contract:\n\n```solidity\npragma solidity ^0.7.0;\n\ncontract ERC20Token {\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    uint256 totalSupply_;\n    address public owner;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    event Approval(address indexed tokenOwner, address indexed spender, uint256 tokens);\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor() public {\n        owner = msg.sender;\n        name = \"Name\";\n        symbol = \"Symbol\";\n        decimals = 18;\n        totalSupply_ = 1000000;\n        balances[owner] = totalSupply_;\n    }\n    \n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n    \n    function balanceOf(address tokenOwner) public view returns (uint256) {\n        return balances[tokenOwner];\n    }\n    \n    function allowance(address tokenOwner, address spender) public view returns (uint256) {\n        return allowed[tokenOwner][spender];\n    }\n    \n    function transfer(address receiver, uint256 numTokens) public returns (bool) {\n        require(numTokens <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender] - numTokens;\n        balances[receiver] = balances[receiver] + numTokens;\n        emit Transfer(msg.sender, receiver, numTokens);\n        return true;\n    }\n    \n    function approve(address delegate, uint256 numTokens) public returns (bool) {\n        allowed[msg.sender][delegate] = numTokens;\n        emit Approval(msg.sender, delegate, numTokens);\n        return true;\n    }\n    \n    function transferFrom(address owner, address buyer, uint256 numTokens) public returns (bool) {\n        require(numTokens <= balances[owner]);\n        require(numTokens <= allowed[owner][msg.sender]);\n        balances[owner] = balances[owner] - numTokens;\n        allowed[owner][msg.sender] = allowed[owner][msg.sender] - numTokens;\n        balances[buyer] = balances[buyer] + numTokens;\n        emit Transfer(owner, buyer, numTokens);\n        return true;\n    } \n    \n    function renounceOwnership() public {\n        require(msg.sender == owner);\n        emit OwnershipTransferred(owner, address(0));\n        owner = address(0);\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == owner);\n        require(newOwner != address(0));\n        emit OwnershipTransferred(owner, newOwner);\n        owner = newOwner;\n    }\n}\n```\nAgain, this is just a rough estimation. The exact code may contain additional checks and functions.",
				"role": "assistant"
			}
		}
	],
	"created": 1700632488,
	"id": "chatcmpl-8NaUCyXuBZGLPEkW88krBPKlNx415",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x715018a6 > var0) {\n            if (0x23b872dd > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = 0x00f7;\n                    var1 = func_0219();\n                \n                label_00F7:\n                    var temp0 = var1;\n                    var1 = 0x0104;\n                    var var2 = temp0;\n                    var var3 = memory[0x40:0x60];\n                    var1 = func_0A89(var2, var3);\n                \n                label_0104:\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + var1 - temp1];\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = 0x0120;\n                    var2 = 0x011b;\n                    var3 = msg.data.length;\n                    var var4 = 0x04;\n                    var2, var3 = transfer(var3, var4);\n                    var1 = func_011B(var2, var3);\n                \n                label_0120:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = !!var1;\n                    var1 = temp2 + 0x20;\n                    goto label_0104;\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = storage[0x01];\n                    var1 = temp3 + 0x20;\n                    goto label_0104;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x0120;\n                var2 = 0x0150;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4 = func_0B1D(var3, var4);\n                var var5 = 0x00;\n                var var6 = msg.sender;\n                var var7 = 0x02d3;\n                var var8 = var2;\n                var var9 = var6;\n                var var10 = var4;\n                func_06B6(var8, var9, var10);\n                var7 = 0x02de;\n                var8 = var2;\n                var9 = var3;\n                var10 = var4;\n            \n            label_0730:\n            \n                if (!(var8 & (0x01 << 0xa0) - 0x01)) {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                    memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x25;\n                    memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n                    memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n                    var11 = temp7 + 0x84;\n                    goto label_0361;\n                } else if (var9 & (0x01 << 0xa0) - 0x01) {\n                    memory[0x00:0x20] = var8 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var var11 = storage[keccak256(memory[0x00:0x40])];\n                \n                    if (var11 >= var10) {\n                        var var12 = 0x0878;\n                        var var13 = var10;\n                        var var14 = var11;\n                        var12 = func_0C0A(var13, var14);\n                        memory[0x00:0x20] = var8 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x00;\n                        storage[keccak256(memory[0x00:0x40])] = var12;\n                        memory[0x20:0x40] = 0x04;\n                        var12 = 0x00;\n                        var13 = var12;\n                        var14 = !!(storage[keccak256(memory[var13:var13 + 0x40])] & 0xff) != 0x01;\n                    \n                        if (!!(storage[keccak256(memory[var13:var13 + 0x40])] & 0xff) != 0x01) {\n                            if (!var14) {\n                            label_08C8:\n                                var14 = 0x08dd;\n                                var var15 = 0x64;\n                                var var16 = 0x08d7;\n                                var var17 = var10;\n                                var var18 = var12;\n                            \n                            label_0A3E:\n                                var var19 = 0x00;\n                                var var20 = 0x0a4a;\n                                var var21 = var18;\n                                var var22 = var17;\n                                var20 = func_0C1D(var21, var22);\n                                var16 = var20;\n                                // Error: Could not resolve jump destination!\n                            } else {\n                            label_08C3:\n                                var12 = storage[0x05];\n                                var14 = 0x08dd;\n                                var15 = 0x64;\n                                var16 = 0x08d7;\n                                var17 = var10;\n                                var18 = var12;\n                                goto label_0A3E;\n                            }\n                        } else if (tx.origin == var9 & (0x01 << 0xa0) - 0x01) { goto label_08C8; }\n                        else { goto label_08C3; }\n                    } else {\n                        var temp4 = memory[0x40:0x60];\n                        memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                        memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x26;\n                        memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n                        memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x616c616e6365 << 0xd0;\n                        var12 = temp4 + 0x84;\n                    \n                    label_0361:\n                        var temp5 = memory[0x40:0x60];\n                        revert(memory[temp5:temp5 + var12 - temp5]);\n                    }\n                } else {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                    memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x23;\n                    memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n                    memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x657373 << 0xe8;\n                    var11 = temp6 + 0x84;\n                    goto label_0361;\n                }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = 0x12;\n                var1 = temp8 + 0x20;\n                goto label_0104;\n            } else if (var0 == 0x39509351) {\n                // Dispatch table entry for increaseAllowance(address,uint256)\n                var1 = 0x0120;\n                var2 = 0x0172;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = transfer(var3, var4);\n                var4 = 0x00;\n                var5 = msg.sender;\n                var6 = 0x02b9;\n                var7 = var5;\n                var8 = var2;\n                var9 = var3;\n                var10 = 0x02fc;\n                var11 = var7;\n                var12 = var8;\n                var10 = func_044C(var11, var12);\n                func_02FC(var7, var8, var9, var10);\n                var4 = 0x01;\n                var1 = var4;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x0134;\n                var2 = 0x0185;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_0B59(var3, var4);\n                var1 = func_0185(var2);\n            \n            label_0134:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var1;\n                var1 = temp9 + 0x20;\n                goto label_0104;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xa457c2d7 > var0) {\n            if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = 0x01a8;\n                renounceOwnership();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = storage[0x0a] & (0x01 << 0xa0) - 0x01;\n                var1 = temp10 + 0x20;\n                goto label_0104;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x00f7;\n                var1 = symbol();\n                goto label_00F7;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xa457c2d7) {\n            // Dispatch table entry for decreaseAllowance(address,uint256)\n            var1 = 0x0120;\n            var2 = 0x01db;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = transfer(var3, var4);\n            var1 = func_01DB(var2, var3);\n            goto label_0120;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x0120;\n            var2 = 0x01ee;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = transfer(var3, var4);\n            var4 = 0x00;\n            var5 = msg.sender;\n            var6 = 0x02b9;\n            var7 = var5;\n            var8 = var2;\n            var9 = var3;\n            goto label_0730;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x0134;\n            var2 = 0x0201;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = func_0B74(var3, var4);\n            var1 = func_0201(var2, var3);\n            goto label_0134;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = 0x01a8;\n            var2 = 0x0214;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2 = func_0B59(var3, var4);\n            func_0214(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_011B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x02b9;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_0592(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_0185(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_01DB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = var0;\n        var var3 = 0x03d1;\n        var var4 = var1;\n        var var5 = arg0;\n        var3 = func_044C(var4, var5);\n        var2 = var3;\n    \n        if (var2 >= arg1) {\n            var3 = 0x02de;\n            var4 = var1;\n            var5 = arg0;\n            var var6 = var2 - arg1;\n            func_0592(var4, var5, var6);\n            return 0x01;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x25;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x207a65726f << 0xd8;\n            var3 = temp0 + 0x84;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var3 - temp1]);\n        }\n    }\n    \n    function func_0201(var arg0, var arg1) returns (var r0) {\n        r0 = func_044C(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0214(var arg0) {\n        if (msg.sender != storage[0x0a] & (0x01 << 0xa0) - 0x01) {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n            memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x20;\n            memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n            var0 = temp4 + 0x64;\n            goto label_0361;\n        } else if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = arg0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x0a] & (0x01 << 0xa0) - 0x01, stack[-1] & (0x01 << 0xa0) - 0x01]);\n            storage[0x0a] = (temp1 & (0x01 << 0xa0) - 0x01) | (storage[0x0a] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x26;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = 0x646472657373 << 0xd0;\n            var var0 = temp2 + 0x84;\n        \n        label_0361:\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function func_0219() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x02;\n        var var2 = 0x0228;\n        var var3 = storage[var1];\n        var2 = func_0BA7(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0254;\n        var6 = func_0BA7(var7);\n    \n        if (!var6) {\n        label_02A1:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_0298; }\n        \n        label_0284:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0284; }\n        \n        label_0298:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02A1;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_02A1;\n        }\n    }\n    \n    function func_02FC(var arg0, var arg1, var arg2, var arg3) {\n        var temp0 = arg2;\n        arg2 = 0x0306;\n        var temp1 = arg3;\n        arg3 = temp0;\n        var var0 = temp1;\n        arg2 = func_0BF7(arg3, var0);\n        func_0592(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender == storage[0x0a] & (0x01 << 0xa0) - 0x01) {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x0a] & (0x01 << 0xa0) - 0x01, 0x00]);\n            storage[0x0a] = storage[0x0a] & ~((0x01 << 0xa0) - 0x01);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x20;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + (temp0 + 0x64) - temp1]);\n        }\n    }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x06;\n        var var2 = 0x0228;\n        var var3 = storage[var1];\n        var2 = func_0BA7(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0254;\n        var6 = func_0BA7(var7);\n    \n        if (!var6) {\n        label_02A1:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_0298; }\n        \n        label_0284:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0284; }\n        \n        label_0298:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02A1;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_02A1;\n        }\n    }\n    \n    function func_044C(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0592(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_0361;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x09;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_0361:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_06B6(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x06c2;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_044C(var2, var3);\n        var0 = var1;\n    \n        if (var0 == ~0x00) {\n        label_072A:\n            return;\n        } else if (var0 >= arg2) {\n            var1 = 0x072a;\n            var2 = arg0;\n            var3 = arg1;\n            var var4 = var0 - arg2;\n            func_0592(var2, var3, var4);\n            goto label_072A;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000;\n            var1 = temp0 + 0x64;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        }\n    }\n    \n    function func_0A89(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_0AB6:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_0AA3:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_0AB6; }\n            else { goto label_0AA3; }\n        }\n    }\n    \n    function func_0AD7(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0b0f;\n        var var3 = arg1;\n        var2 = func_0AD7(var3);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_0B1D(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = 0x0b3b;\n        var var4 = arg1;\n        var3 = func_0AD7(var4);\n        var0 = var3;\n        var3 = 0x0b49;\n        var4 = arg1 + 0x20;\n        var3 = func_0AD7(var4);\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        arg0 = var3;\n        r0 = var0;\n        return r0, arg0, arg1;\n    }\n    \n    function func_0B59(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0a4a;\n        var var2 = arg1;\n        return func_0AD7(var2);\n    }\n    \n    function func_0B74(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0b90;\n        var var3 = arg1;\n        var2 = func_0AD7(var3);\n        var0 = var2;\n        var2 = 0x0b9e;\n        var3 = arg1 + 0x20;\n        var2 = func_0AD7(var3);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_0BA7(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 >> 0x01;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 - (var0 < 0x20)) { goto label_0BDB; }\n            else { goto label_0BC6; }\n        } else if (var1 - (var0 < 0x20)) {\n        label_0BDB:\n            return var0;\n        } else {\n        label_0BC6:\n            memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n    \n    function func_0BF7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x02bf;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0C0A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x02bf;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0C1D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x02bf;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x715018a6 > var0) {\n            if (0x23b872dd > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = 0x00f7;\n                    var1 = func_0219();\n                \n                label_00F7:\n                    var temp0 = var1;\n                    var1 = 0x0104;\n                    var var2 = temp0;\n                    var var3 = memory[0x40:0x60];\n                    var1 = func_0A89(var2, var3);\n                \n                label_0104:\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + var1 - temp1];\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = 0x0120;\n                    var2 = 0x011b;\n                    var3 = msg.data.length;\n                    var var4 = 0x04;\n                    var2, var3 = transfer(var3, var4);\n                    var1 = func_011B(var2, var3);\n                \n                label_0120:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = !!var1;\n                    var1 = temp2 + 0x20;\n                    goto label_0104;\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = storage[0x01];\n                    var1 = temp3 + 0x20;\n                    goto label_0104;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x0120;\n                var2 = 0x0150;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4 = func_0B1D(var3, var4);\n                var var5 = 0x00;\n                var var6 = msg.sender;\n                var var7 = 0x02d3;\n                var var8 = var2;\n                var var9 = var6;\n                var var10 = var4;\n                func_06B6(var8, var9, var10);\n                var7 = 0x02de;\n                var8 = var2;\n                var9 = var3;\n                var10 = var4;\n            \n            label_0730:\n            \n                if (!(var8 & (0x01 << 0xa0) - 0x01)) {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                    memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x25;\n                    memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n                    memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n                    var11 = temp7 + 0x84;\n                    goto label_0361;\n                } else if (var9 & (0x01 << 0xa0) - 0x01) {\n                    memory[0x00:0x20] = var8 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var var11 = storage[keccak256(memory[0x00:0x40])];\n                \n                    if (var11 >= var10) {\n                        var var12 = 0x0878;\n                        var var13 = var10;\n                        var var14 = var11;\n                        var12 = func_0C0A(var13, var14);\n                        memory[0x00:0x20] = var8 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x00;\n                        storage[keccak256(memory[0x00:0x40])] = var12;\n                        memory[0x20:0x40] = 0x04;\n                        var12 = 0x00;\n                        var13 = var12;\n                        var14 = !!(storage[keccak256(memory[var13:var13 + 0x40])] & 0xff) != 0x01;\n                    \n                        if (!!(storage[keccak256(memory[var13:var13 + 0x40])] & 0xff) != 0x01) {\n                            if (!var14) {\n                            label_08C8:\n                                var14 = 0x08dd;\n                                var var15 = 0x64;\n                                var var16 = 0x08d7;\n                                var var17 = var10;\n                                var var18 = var12;\n                            \n                            label_0A3E:\n                                var var19 = 0x00;\n                                var var20 = 0x0a4a;\n                                var var21 = var18;\n                                var var22 = var17;\n                                var20 = func_0C1D(var21, var22);\n                                var16 = var20;\n                                // Error: Could not resolve jump destination!\n                            } else {\n                            label_08C3:\n                                var12 = storage[0x05];\n                                var14 = 0x08dd;\n                                var15 = 0x64;\n                                var16 = 0x08d7;\n                                var17 = var10;\n                                var18 = var12;\n                                goto label_0A3E;\n                            }\n                        } else if (tx.origin == var9 & (0x01 << 0xa0) - 0x01) { goto label_08C8; }\n                        else { goto label_08C3; }\n                    } else {\n                        var temp4 = memory[0x40:0x60];\n                        memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                        memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x26;\n                        memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n                        memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x616c616e6365 << 0xd0;\n                        var12 = temp4 + 0x84;\n                    \n                    label_0361:\n                        var temp5 = memory[0x40:0x60];\n                        revert(memory[temp5:temp5 + var12 - temp5]);\n                    }\n                } else {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                    memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x23;\n                    memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n                    memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x657373 << 0xe8;\n                    var11 = temp6 + 0x84;\n                    goto label_0361;\n                }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = 0x12;\n                var1 = temp8 + 0x20;\n                goto label_0104;\n            } else if (var0 == 0x39509351) {\n                // Dispatch table entry for increaseAllowance(address,uint256)\n                var1 = 0x0120;\n                var2 = 0x0172;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = transfer(var3, var4);\n                var4 = 0x00;\n                var5 = msg.sender;\n                var6 = 0x02b9;\n                var7 = var5;\n                var8 = var2;\n                var9 = var3;\n                var10 = 0x02fc;\n                var11 = var7;\n                var12 = var8;\n                var10 = func_044C(var11, var12);\n                func_02FC(var7, var8, var9, var10);\n                var4 = 0x01;\n                var1 = var4;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x0134;\n                var2 = 0x0185;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_0B59(var3, var4);\n                var1 = func_0185(var2);\n            \n            label_0134:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var1;\n                var1 = temp9 + 0x20;\n                goto label_0104;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xa457c2d7 > var0) {\n            if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = 0x01a8;\n                renounceOwnership();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = storage[0x0a] & (0x01 << 0xa0) - 0x01;\n                var1 = temp10 + 0x20;\n                goto label_0104;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x00f7;\n                var1 = symbol();\n                goto label_00F7;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xa457c2d7) {\n            // Dispatch table entry for decreaseAllowance(address,uint256)\n            var1 = 0x0120;\n            var2 = 0x01db;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = transfer(var3, var4);\n            var1 = func_01DB(var2, var3);\n            goto label_0120;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x0120;\n            var2 = 0x01ee;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = transfer(var3, var4);\n            var4 = 0x00;\n            var5 = msg.sender;\n            var6 = 0x02b9;\n            var7 = var5;\n            var8 = var2;\n            var9 = var3;\n            goto label_0730;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x0134;\n            var2 = 0x0201;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = func_0B74(var3, var4);\n            var1 = func_0201(var2, var3);\n            goto label_0134;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = 0x01a8;\n            var2 = 0x0214;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2 = func_0B59(var3, var4);\n            func_0214(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_011B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x02b9;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_0592(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_0185(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_01DB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = var0;\n        var var3 = 0x03d1;\n        var var4 = var1;\n        var var5 = arg0;\n        var3 = func_044C(var4, var5);\n        var2 = var3;\n    \n        if (var2 >= arg1) {\n            var3 = 0x02de;\n            var4 = var1;\n            var5 = arg0;\n            var var6 = var2 - arg1;\n            func_0592(var4, var5, var6);\n            return 0x01;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x25;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x207a65726f << 0xd8;\n            var3 = temp0 + 0x84;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var3 - temp1]);\n        }\n    }\n    \n    function func_0201(var arg0, var arg1) returns (var r0) {\n        r0 = func_044C(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0214(var arg0) {\n        if (msg.sender != storage[0x0a] & (0x01 << 0xa0) - 0x01) {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n            memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x20;\n            memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n            var0 = temp4 + 0x64;\n            goto label_0361;\n        } else if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = arg0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x0a] & (0x01 << 0xa0) - 0x01, stack[-1] & (0x01 << 0xa0) - 0x01]);\n            storage[0x0a] = (temp1 & (0x01 << 0xa0) - 0x01) | (storage[0x0a] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x26;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = 0x646472657373 << 0xd0;\n            var var0 = temp2 + 0x84;\n        \n        label_0361:\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function func_0219() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x02;\n        var var2 = 0x0228;\n        var var3 = storage[var1];\n        var2 = func_0BA7(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0254;\n        var6 = func_0BA7(var7);\n    \n        if (!var6) {\n        label_02A1:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_0298; }\n        \n        label_0284:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0284; }\n        \n        label_0298:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02A1;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_02A1;\n        }\n    }\n    \n    function func_02FC(var arg0, var arg1, var arg2, var arg3) {\n        var temp0 = arg2;\n        arg2 = 0x0306;\n        var temp1 = arg3;\n        arg3 = temp0;\n        var var0 = temp1;\n        arg2 = func_0BF7(arg3, var0);\n        func_0592(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender == storage[0x0a] & (0x01 << 0xa0) - 0x01) {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x0a] & (0x01 << 0xa0) - 0x01, 0x00]);\n            storage[0x0a] = storage[0x0a] & ~((0x01 << 0xa0) - 0x01);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x20;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + (temp0 + 0x64) - temp1]);\n        }\n    }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x06;\n        var var2 = 0x0228;\n        var var3 = storage[var1];\n        var2 = func_0BA7(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0254;\n        var6 = func_0BA7(var7);\n    \n        if (!var6) {\n        label_02A1:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_0298; }\n        \n        label_0284:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0284; }\n        \n        label_0298:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02A1;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_02A1;\n        }\n    }\n    \n    function func_044C(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0592(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_0361;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x09;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_0361:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_06B6(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x06c2;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_044C(var2, var3);\n        var0 = var1;\n    \n        if (var0 == ~0x00) {\n        label_072A:\n            return;\n        } else if (var0 >= arg2) {\n            var1 = 0x072a;\n            var2 = arg0;\n            var3 = arg1;\n            var var4 = var0 - arg2;\n            func_0592(var2, var3, var4);\n            goto label_072A;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000;\n            var1 = temp0 + 0x64;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        }\n    }\n    \n    function func_0A89(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_0AB6:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_0AA3:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_0AB6; }\n            else { goto label_0AA3; }\n        }\n    }\n    \n    function func_0AD7(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0b0f;\n        var var3 = arg1;\n        var2 = func_0AD7(var3);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_0B1D(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = 0x0b3b;\n        var var4 = arg1;\n        var3 = func_0AD7(var4);\n        var0 = var3;\n        var3 = 0x0b49;\n        var4 = arg1 + 0x20;\n        var3 = func_0AD7(var4);\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        arg0 = var3;\n        r0 = var0;\n        return r0, arg0, arg1;\n    }\n    \n    function func_0B59(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0a4a;\n        var var2 = arg1;\n        return func_0AD7(var2);\n    }\n    \n    function func_0B74(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0b90;\n        var var3 = arg1;\n        var2 = func_0AD7(var3);\n        var0 = var2;\n        var2 = 0x0b9e;\n        var3 = arg1 + 0x20;\n        var2 = func_0AD7(var3);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_0BA7(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 >> 0x01;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 - (var0 < 0x20)) { goto label_0BDB; }\n            else { goto label_0BC6; }\n        } else if (var1 - (var0 < 0x20)) {\n        label_0BDB:\n            return var0;\n        } else {\n        label_0BC6:\n            memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n    \n    function func_0BF7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x02bf;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0C0A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x02bf;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0C1D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x02bf;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x715018a6 > var0) {\n            if (0x23b872dd > var0) {\n                if (var0 == 0x06fdde03) {\n                    // Dispatch table entry for name()\n                    var var1 = 0x00f7;\n                    var1 = func_0219();\n                \n                label_00F7:\n                    var temp0 = var1;\n                    var1 = 0x0104;\n                    var var2 = temp0;\n                    var var3 = memory[0x40:0x60];\n                    var1 = func_0A89(var2, var3);\n                \n                label_0104:\n                    var temp1 = memory[0x40:0x60];\n                    return memory[temp1:temp1 + var1 - temp1];\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = 0x0120;\n                    var2 = 0x011b;\n                    var3 = msg.data.length;\n                    var var4 = 0x04;\n                    var2, var3 = transfer(var3, var4);\n                    var1 = func_011B(var2, var3);\n                \n                label_0120:\n                    var temp2 = memory[0x40:0x60];\n                    memory[temp2:temp2 + 0x20] = !!var1;\n                    var1 = temp2 + 0x20;\n                    goto label_0104;\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = storage[0x01];\n                    var1 = temp3 + 0x20;\n                    goto label_0104;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x0120;\n                var2 = 0x0150;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3, var4 = func_0B1D(var3, var4);\n                var var5 = 0x00;\n                var var6 = msg.sender;\n                var var7 = 0x02d3;\n                var var8 = var2;\n                var var9 = var6;\n                var var10 = var4;\n                func_06B6(var8, var9, var10);\n                var7 = 0x02de;\n                var8 = var2;\n                var9 = var3;\n                var10 = var4;\n            \n            label_0730:\n            \n                if (!(var8 & (0x01 << 0xa0) - 0x01)) {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                    memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x25;\n                    memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n                    memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x6472657373 << 0xd8;\n                    var11 = temp7 + 0x84;\n                    goto label_0361;\n                } else if (var9 & (0x01 << 0xa0) - 0x01) {\n                    memory[0x00:0x20] = var8 & (0x01 << 0xa0) - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var var11 = storage[keccak256(memory[0x00:0x40])];\n                \n                    if (var11 >= var10) {\n                        var var12 = 0x0878;\n                        var var13 = var10;\n                        var var14 = var11;\n                        var12 = func_0C0A(var13, var14);\n                        memory[0x00:0x20] = var8 & (0x01 << 0xa0) - 0x01;\n                        memory[0x20:0x40] = 0x00;\n                        storage[keccak256(memory[0x00:0x40])] = var12;\n                        memory[0x20:0x40] = 0x04;\n                        var12 = 0x00;\n                        var13 = var12;\n                        var14 = !!(storage[keccak256(memory[var13:var13 + 0x40])] & 0xff) != 0x01;\n                    \n                        if (!!(storage[keccak256(memory[var13:var13 + 0x40])] & 0xff) != 0x01) {\n                            if (!var14) {\n                            label_08C8:\n                                var14 = 0x08dd;\n                                var var15 = 0x64;\n                                var var16 = 0x08d7;\n                                var var17 = var10;\n                                var var18 = var12;\n                            \n                            label_0A3E:\n                                var var19 = 0x00;\n                                var var20 = 0x0a4a;\n                                var var21 = var18;\n                                var var22 = var17;\n                                var20 = func_0C1D(var21, var22);\n                                var16 = var20;\n                                // Error: Could not resolve jump destination!\n                            } else {\n                            label_08C3:\n                                var12 = storage[0x05];\n                                var14 = 0x08dd;\n                                var15 = 0x64;\n                                var16 = 0x08d7;\n                                var17 = var10;\n                                var18 = var12;\n                                goto label_0A3E;\n                            }\n                        } else if (tx.origin == var9 & (0x01 << 0xa0) - 0x01) { goto label_08C8; }\n                        else { goto label_08C3; }\n                    } else {\n                        var temp4 = memory[0x40:0x60];\n                        memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n                        memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                        memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x26;\n                        memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n                        memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x616c616e6365 << 0xd0;\n                        var12 = temp4 + 0x84;\n                    \n                    label_0361:\n                        var temp5 = memory[0x40:0x60];\n                        revert(memory[temp5:temp5 + var12 - temp5]);\n                    }\n                } else {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = 0x461bcd << 0xe5;\n                    memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n                    memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x23;\n                    memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n                    memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = 0x657373 << 0xe8;\n                    var11 = temp6 + 0x84;\n                    goto label_0361;\n                }\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = 0x12;\n                var1 = temp8 + 0x20;\n                goto label_0104;\n            } else if (var0 == 0x39509351) {\n                // Dispatch table entry for increaseAllowance(address,uint256)\n                var1 = 0x0120;\n                var2 = 0x0172;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2, var3 = transfer(var3, var4);\n                var4 = 0x00;\n                var5 = msg.sender;\n                var6 = 0x02b9;\n                var7 = var5;\n                var8 = var2;\n                var9 = var3;\n                var10 = 0x02fc;\n                var11 = var7;\n                var12 = var8;\n                var10 = func_044C(var11, var12);\n                func_02FC(var7, var8, var9, var10);\n                var4 = 0x01;\n                var1 = var4;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = 0x0134;\n                var2 = 0x0185;\n                var3 = msg.data.length;\n                var4 = 0x04;\n                var2 = func_0B59(var3, var4);\n                var1 = func_0185(var2);\n            \n            label_0134:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var1;\n                var1 = temp9 + 0x20;\n                goto label_0104;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xa457c2d7 > var0) {\n            if (var0 == 0x715018a6) {\n                // Dispatch table entry for renounceOwnership()\n                var1 = 0x01a8;\n                renounceOwnership();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = storage[0x0a] & (0x01 << 0xa0) - 0x01;\n                var1 = temp10 + 0x20;\n                goto label_0104;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x00f7;\n                var1 = symbol();\n                goto label_00F7;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xa457c2d7) {\n            // Dispatch table entry for decreaseAllowance(address,uint256)\n            var1 = 0x0120;\n            var2 = 0x01db;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = transfer(var3, var4);\n            var1 = func_01DB(var2, var3);\n            goto label_0120;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x0120;\n            var2 = 0x01ee;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = transfer(var3, var4);\n            var4 = 0x00;\n            var5 = msg.sender;\n            var6 = 0x02b9;\n            var7 = var5;\n            var8 = var2;\n            var9 = var3;\n            goto label_0730;\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x0134;\n            var2 = 0x0201;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2, var3 = func_0B74(var3, var4);\n            var1 = func_0201(var2, var3);\n            goto label_0134;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            var1 = 0x01a8;\n            var2 = 0x0214;\n            var3 = msg.data.length;\n            var4 = 0x04;\n            var2 = func_0B59(var3, var4);\n            func_0214(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_011B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x02b9;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_0592(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_0185(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & (0x01 << 0xa0) - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_01DB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = var0;\n        var var3 = 0x03d1;\n        var var4 = var1;\n        var var5 = arg0;\n        var3 = func_044C(var4, var5);\n        var2 = var3;\n    \n        if (var2 >= arg1) {\n            var3 = 0x02de;\n            var4 = var1;\n            var5 = arg0;\n            var var6 = var2 - arg1;\n            func_0592(var4, var5, var6);\n            return 0x01;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x25;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x207a65726f << 0xd8;\n            var3 = temp0 + 0x84;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var3 - temp1]);\n        }\n    }\n    \n    function func_0201(var arg0, var arg1) returns (var r0) {\n        r0 = func_044C(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0214(var arg0) {\n        if (msg.sender != storage[0x0a] & (0x01 << 0xa0) - 0x01) {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n            memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x20;\n            memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n            var0 = temp4 + 0x64;\n            goto label_0361;\n        } else if (arg0 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = arg0;\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x0a] & (0x01 << 0xa0) - 0x01, stack[-1] & (0x01 << 0xa0) - 0x01]);\n            storage[0x0a] = (temp1 & (0x01 << 0xa0) - 0x01) | (storage[0x0a] & ~((0x01 << 0xa0) - 0x01));\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x26;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x4f776e61626c653a206e6577206f776e657220697320746865207a65726f2061;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = 0x646472657373 << 0xd0;\n            var var0 = temp2 + 0x84;\n        \n        label_0361:\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + var0 - temp3]);\n        }\n    }\n    \n    function func_0219() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x02;\n        var var2 = 0x0228;\n        var var3 = storage[var1];\n        var2 = func_0BA7(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0254;\n        var6 = func_0BA7(var7);\n    \n        if (!var6) {\n        label_02A1:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_0298; }\n        \n        label_0284:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0284; }\n        \n        label_0298:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02A1;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_02A1;\n        }\n    }\n    \n    function func_02FC(var arg0, var arg1, var arg2, var arg3) {\n        var temp0 = arg2;\n        arg2 = 0x0306;\n        var temp1 = arg3;\n        arg3 = temp0;\n        var var0 = temp1;\n        arg2 = func_0BF7(arg3, var0);\n        func_0592(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function renounceOwnership() {\n        if (msg.sender == storage[0x0a] & (0x01 << 0xa0) - 0x01) {\n            log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x0a] & (0x01 << 0xa0) - 0x01, 0x00]);\n            storage[0x0a] = storage[0x0a] & ~((0x01 << 0xa0) - 0x01);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x20;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + (temp0 + 0x64) - temp1]);\n        }\n    }\n    \n    function symbol() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x06;\n        var var2 = 0x0228;\n        var var3 = storage[var1];\n        var2 = func_0BA7(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var7 = storage[var5];\n        var var6 = 0x0254;\n        var6 = func_0BA7(var7);\n    \n        if (!var6) {\n        label_02A1:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_0298; }\n        \n        label_0284:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0284; }\n        \n        label_0298:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02A1;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_02A1;\n        }\n    }\n    \n    function func_044C(var arg0, var arg1) returns (var r0) {\n        var temp0 = (0x01 << 0xa0) - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0592(var arg0, var arg1, var arg2) {\n        if (!(arg0 & (0x01 << 0xa0) - 0x01)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x24;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = 0x72657373 << 0xe0;\n            var0 = temp9 + 0x84;\n            goto label_0361;\n        } else if (arg1 & (0x01 << 0xa0) - 0x01) {\n            var temp0 = (0x01 << 0xa0) - 0x01;\n            var temp1 = temp0 & arg0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x09;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg1 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg2;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & (0x01 << 0xa0) - 0x01, stack[-2] & (0x01 << 0xa0) - 0x01]);\n            return;\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x22;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n            memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7373 << 0xf0;\n            var var0 = temp7 + 0x84;\n        \n        label_0361:\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_06B6(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x06c2;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_044C(var2, var3);\n        var0 = var1;\n    \n        if (var0 == ~0x00) {\n        label_072A:\n            return;\n        } else if (var0 >= arg2) {\n            var1 = 0x072a;\n            var2 = arg0;\n            var3 = arg1;\n            var var4 = var0 - arg2;\n            func_0592(var2, var3, var4);\n            goto label_072A;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd << 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000;\n            var1 = temp0 + 0x64;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        }\n    }\n    \n    function func_0A89(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x20;\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = var1;\n        var temp1 = memory[arg0:arg0 + 0x20];\n        var var2 = temp1;\n        memory[temp0 + var1:temp0 + var1 + 0x20] = var2;\n        var var3 = 0x00;\n    \n        if (var3 >= var2) {\n        label_0AB6:\n            var temp2 = var2;\n            var temp3 = arg1;\n            memory[temp3 + temp2 + 0x40:temp3 + temp2 + 0x40 + 0x20] = 0x00;\n            return temp3 + (temp2 + 0x1f & ~0x1f) + 0x40;\n        } else {\n        label_0AA3:\n            var temp4 = var3;\n            var temp5 = var1;\n            memory[temp4 + arg1 + 0x40:temp4 + arg1 + 0x40 + 0x20] = memory[temp5 + temp4 + arg0:temp5 + temp4 + arg0 + 0x20];\n            var3 = temp5 + temp4;\n        \n            if (var3 >= var2) { goto label_0AB6; }\n            else { goto label_0AA3; }\n        }\n    }\n    \n    function func_0AD7(var arg0) returns (var r0) {\n        var temp0 = msg.data[arg0:arg0 + 0x20];\n        var var0 = temp0;\n    \n        if (var0 == var0 & (0x01 << 0xa0) - 0x01) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0b0f;\n        var var3 = arg1;\n        var2 = func_0AD7(var3);\n        r0 = var2;\n        arg0 = msg.data[arg1 + 0x20:arg1 + 0x20 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_0B1D(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i< 0x60) { revert(memory[0x00:0x00]); }\n    \n        var var3 = 0x0b3b;\n        var var4 = arg1;\n        var3 = func_0AD7(var4);\n        var0 = var3;\n        var3 = 0x0b49;\n        var4 = arg1 + 0x20;\n        var3 = func_0AD7(var4);\n        arg1 = msg.data[arg1 + 0x40:arg1 + 0x40 + 0x20];\n        arg0 = var3;\n        r0 = var0;\n        return r0, arg0, arg1;\n    }\n    \n    function func_0B59(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i< 0x20) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0a4a;\n        var var2 = arg1;\n        return func_0AD7(var2);\n    }\n    \n    function func_0B74(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i< 0x40) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0b90;\n        var var3 = arg1;\n        var2 = func_0AD7(var3);\n        var0 = var2;\n        var2 = 0x0b9e;\n        var3 = arg1 + 0x20;\n        var2 = func_0AD7(var3);\n        arg0 = var2;\n        r0 = var0;\n        return r0, arg0;\n    }\n    \n    function func_0BA7(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 >> 0x01;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 - (var0 < 0x20)) { goto label_0BDB; }\n            else { goto label_0BC6; }\n        } else if (var1 - (var0 < 0x20)) {\n        label_0BDB:\n            return var0;\n        } else {\n        label_0BC6:\n            memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n    \n    function func_0BF7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = arg0 + temp0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var var1 = 0x02bf;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0C0A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 - arg0;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var var1 = 0x02bf;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0C1D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = arg0;\n        var var0 = temp1 * temp0;\n    \n        if ((temp1 == var0 / temp0) | !temp0) { return var0; }\n    \n        var var1 = 0x02bf;\n        memory[0x00:0x20] = 0x4e487b71 << 0xe0;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 29.855968952178955,
	"usage": {
		"completion_tokens": 596,
		"prompt_tokens": 9260,
		"total_tokens": 9856
	}
}