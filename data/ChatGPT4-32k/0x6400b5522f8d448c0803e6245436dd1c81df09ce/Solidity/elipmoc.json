{
	"address": "0x6400b5522f8d448c0803e6245436dd1c81df09ce",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The decompiled code provided appears to be a standard ERC20 token with additional features for pausing and transferring ownership. Unfortunately, the code is not in a directly compilable form in Solidity language. \n\nHere, I'll write a Solidity version of the contract that has the same functionality:\n\n```solidity\npragma solidity >=0.4.22 <0.7.0;\n\ncontract Token {\n    mapping (address => uint256) private _balances;\n    mapping (address => mapping (address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n    address private _owner;\n    uint8 private _decimals;\n    bool private _paused;\n    string private _name;\n    string private _symbol;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Paused(address account);\n    event Unpaused(address account);\n\n    constructor () public {\n        _owner = msg.sender;\n        _paused = false;\n        _decimals = 18; // Typical value for decimals\n        _name = \"Token Name\"; // Replace with your token name\n        _symbol = \"TOK\"; // Replace with your token symbol\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        require(!_paused, \"Token transfer while paused\");\n        _balances[msg.sender] = _balances[msg.sender] - amount;\n        _balances[recipient] = _balances[recipient] + amount;\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        require(!_paused, \"Token approval while paused\");\n        _allowances[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        require(!_paused, \"Token transferFrom while paused\");\n        _balances[sender] = _balances[sender] - amount;\n        _allowances[sender][msg.sender] = _allowances[sender][msg.sender] - amount;\n        _balances[recipient] = _balances[recipient] + amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public returns (bool) {\n        require(!_paused, \"Token increaseAllowance while paused\");\n        _allowances[msg.sender][spender] = _allowances[msg.sender][spender] + addedValue;\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public returns (bool) {\n        require(!_paused, \"Token decreaseAllowance while paused\");\n        _allowances[msg.sender][spender] = _allowances[msg.sender][spender] - subtractedValue;\n        emit Approval(msg.sender, spender, _allowances[msg.sender][spender]);\n        return true;\n    }\n\n    function pause() public {\n        require(msg.sender == _owner, \"Only owner can pause\");\n        require(!_paused, \"Token already paused\");\n        _paused = true;\n        emit Paused(_owner);\n    }\n\n    function unpause() public {\n        require(msg.sender == _owner, \"Only owner can unpause\");\n        require(_paused, \"Token already unpaused\");\n        _paused = false;\n        emit Unpaused(_owner);\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner, \"Only owner can transfer ownership\");\n        require(newOwner != address(0), \"New owner is the zero address\");\n        _owner = newOwner;\n        emit OwnershipTransferred(_owner, newOwner);\n    }\n}\n```\nThis contract has similar behavior to the one in the decompiled code, but note that it misses some features due to the high-level representation given by the decompiled code. Ensure to test and verify the contract's behavior thoroughly before deploying it.",
				"role": "assistant"
			}
		}
	],
	"created": 1701463671,
	"id": "chatcmpl-8R4iN08reG5XbbLO2nwTKF4RFq2SM",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.14 18:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x6]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x5] bytes 0 to 0\nuint8 _paused; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nUnpause();\nOwnershipTransferred(address, address);\nPause();\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction 0x1454(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0);\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    v2 = address(varg1);\n    v3 = _balanceOf[v2] + varg0;\n    require(v3 >= _balanceOf[v2]);\n    v4 = address(varg1);\n    _balanceOf[v4] = v3;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(!_paused);\n    require(varg0 != 0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!_paused);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x1454(varg2, varg1, varg0);\n    emit Approval(varg0, msg.sender, _allowance[msg.sender]);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(!_paused);\n    require(varg0 != 0);\n    require(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction withdrawEther(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction unpause() public nonPayable { \n    require(msg.sender == _owner);\n    require(_paused);\n    _paused = 0;\n    emit Unpause();\n}\n\nfunction paused() public nonPayable { \n    return _paused;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _owner);\n    emit OwnershipTransferred(_owner, 0);\n    _owner = 0;\n}\n\nfunction pause() public nonPayable { \n    require(msg.sender == _owner);\n    require(!_paused);\n    _paused = 1;\n    emit Pause();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction isOwner() public nonPayable { \n    return msg.sender == _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(!_paused);\n    require(varg0 != 0);\n    require(varg1 <= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] - varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!_paused);\n    0x1454(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x39509351 == function_selector) {\n            increaseAllowance(address,uint256);\n        } else if (0x3bed33ce == function_selector) {\n            withdrawEther(uint256);\n        } else if (0x3f4ba83a == function_selector) {\n            unpause();\n        } else if (0x5c975abb == function_selector) {\n            paused();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x715018a6 == function_selector) {\n            renounceOwnership();\n        } else if (0x8456cb59 == function_selector) {\n            pause();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8f32d59b == function_selector) {\n            isOwner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa457c2d7 == function_selector) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.14 18:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x6]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x5] bytes 0 to 0\nuint8 _paused; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nUnpause();\nOwnershipTransferred(address, address);\nPause();\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction 0x1454(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0);\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    v2 = address(varg1);\n    v3 = _balanceOf[v2] + varg0;\n    require(v3 >= _balanceOf[v2]);\n    v4 = address(varg1);\n    _balanceOf[v4] = v3;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(!_paused);\n    require(varg0 != 0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!_paused);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x1454(varg2, varg1, varg0);\n    emit Approval(varg0, msg.sender, _allowance[msg.sender]);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(!_paused);\n    require(varg0 != 0);\n    require(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction withdrawEther(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction unpause() public nonPayable { \n    require(msg.sender == _owner);\n    require(_paused);\n    _paused = 0;\n    emit Unpause();\n}\n\nfunction paused() public nonPayable { \n    return _paused;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _owner);\n    emit OwnershipTransferred(_owner, 0);\n    _owner = 0;\n}\n\nfunction pause() public nonPayable { \n    require(msg.sender == _owner);\n    require(!_paused);\n    _paused = 1;\n    emit Pause();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction isOwner() public nonPayable { \n    return msg.sender == _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(!_paused);\n    require(varg0 != 0);\n    require(varg1 <= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] - varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!_paused);\n    0x1454(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x39509351 == function_selector) {\n            increaseAllowance(address,uint256);\n        } else if (0x3bed33ce == function_selector) {\n            withdrawEther(uint256);\n        } else if (0x3f4ba83a == function_selector) {\n            unpause();\n        } else if (0x5c975abb == function_selector) {\n            paused();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x715018a6 == function_selector) {\n            renounceOwnership();\n        } else if (0x8456cb59 == function_selector) {\n            pause();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8f32d59b == function_selector) {\n            isOwner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa457c2d7 == function_selector) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.14 18:08 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256[] _name; // STORAGE[0x3]\nuint256[] _symbol; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x6]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x5] bytes 0 to 0\nuint8 _paused; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nApproval(address, address, uint256);\nUnpause();\nOwnershipTransferred(address, address);\nPause();\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction 0x1454(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0);\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg2);\n    _balanceOf[v1] = _balanceOf[v0] - varg0;\n    v2 = address(varg1);\n    v3 = _balanceOf[v2] + varg0;\n    require(v3 >= _balanceOf[v2]);\n    v4 = address(varg1);\n    _balanceOf[v4] = v3;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(!_paused);\n    require(varg0 != 0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!_paused);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x1454(varg2, varg1, varg0);\n    emit Approval(varg0, msg.sender, _allowance[msg.sender]);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction increaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(!_paused);\n    require(varg0 != 0);\n    require(_allowance[varg0] + varg1 >= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] + varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction withdrawEther(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    v0 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction unpause() public nonPayable { \n    require(msg.sender == _owner);\n    require(_paused);\n    _paused = 0;\n    emit Unpause();\n}\n\nfunction paused() public nonPayable { \n    return _paused;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction renounceOwnership() public nonPayable { \n    require(msg.sender == _owner);\n    emit OwnershipTransferred(_owner, 0);\n    _owner = 0;\n}\n\nfunction pause() public nonPayable { \n    require(msg.sender == _owner);\n    require(!_paused);\n    _paused = 1;\n    emit Pause();\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction isOwner() public nonPayable { \n    return msg.sender == _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction decreaseAllowance(address varg0, uint256 varg1) public nonPayable { \n    require(!_paused);\n    require(varg0 != 0);\n    require(varg1 <= _allowance[varg0]);\n    _allowance[varg0] = _allowance[varg0] - varg1;\n    emit Approval(msg.sender, varg0, _allowance[varg0]);\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!_paused);\n    0x1454(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x39509351 == function_selector) {\n            increaseAllowance(address,uint256);\n        } else if (0x3bed33ce == function_selector) {\n            withdrawEther(uint256);\n        } else if (0x3f4ba83a == function_selector) {\n            unpause();\n        } else if (0x5c975abb == function_selector) {\n            paused();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x715018a6 == function_selector) {\n            renounceOwnership();\n        } else if (0x8456cb59 == function_selector) {\n            pause();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8f32d59b == function_selector) {\n            isOwner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa457c2d7 == function_selector) {\n            decreaseAllowance(address,uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 41.792484283447266,
	"usage": {
		"completion_tokens": 993,
		"prompt_tokens": 2185,
		"total_tokens": 3178
	}
}