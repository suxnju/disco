{
	"address": "0x10db9941e65da3b7fdb0cd05b1fd434cb8b18158",
	"input_format": "TemplateDescription",
	"ir": "For the function abortAuction, it has one argument and its type is bool.\n  When the first argument is smaller than 2, and for totalSupply1, and the element in the amounts with index 1 is greater than 0, and the first argument is 0, and the element in the amounts1 is 0:\n  - the state variable totalSupply3 will be updated to 0.\n  - the value 0 will be put to the element in the amounts.\n  When the first argument is smaller than 2, and for totalSupply1, and the element in the amounts with index 1 is greater than 0, and the first argument is 0:\n  - the value 0 will be put to the element in the amounts1.\n\nFor the function retrieveUnclaimedPoolRewards.\n  When the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is not greater than 0 and the current block's number is smaller than the element in the amounts with index 4 or the tokenURI of 2 is smaller than totalSupply is greater than 0, and the balance2 of caller is not smaller than the tokenURI of the address:\n  - the balance2 of caller will be updated to (the balance2 of caller-the tokenURI of the address).\n  When the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is not greater than 0 and the current block's number is smaller than the element in the amounts with index 4 or the tokenURI of 2 is smaller than totalSupply is greater than 0, and the balance2 of caller is not smaller than the tokenURI of the address, and (the balance1 of caller+the tokenURI of the address) is not smaller than the balance1 of caller:\n  - the balance1 of caller will be updated to (the balance1 of caller+the tokenURI of the address).\n  When the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is not greater than 0 and the current block's number is smaller than the element in the amounts with index 4 or the tokenURI of 2 is smaller than totalSupply is greater than 0:\n  - the tokenURI of the address will be updated to 0.\n\nFor the function withdrawPledgedStake.\n  When the tokenURI1 of 1 is not smaller than totalSupply or the element in the amounts with index 1 is 0, and the address of this contract does not equal to the external contract token is greater than 0:\n  - it calls an external function transfer of the external contract token with the following argument list: caller, and 0.\n  When the tokenURI1 of 1 is smaller than totalSupply or the element in the amounts with index 1 is 0 is greater than 0:\n  - the tokenURI1 of the address will be updated to 0.\n\nFor the function withdrawSelfStake.\n  When the balance of caller is not greater than 0, and the balance1 of caller is not greater than 0, and the balance1 of caller is not smaller than 0, and the address of this contract does not equal to the external contract token is greater than 0:\n  - it calls an external function transfer of the external contract token with the following argument list: caller, and 0.\n  When the balance of caller is not greater than 0, and the balance1 of caller is greater than 0, and the balance1 of caller is not smaller than 0, and the balance1 of caller is not smaller than the balance1 of caller:\n  - the balance1 of caller will be updated to (the balance1 of caller-the balance1 of caller).\n\nFor the function registerPool, it has 3 arguments and the type of each argument is as follows: uint256, uint256, uint256.\n  When the first argument equals to totalSupply, and the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the tokenURI of 2 is smaller than the first argument, and the tokenURI of the address is 0:\n  - the balance2 of caller will be updated to the second argument.\n  When the first argument equals to totalSupply, and the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the tokenURI of 2 is smaller than the first argument, and the tokenURI of the address is 0, and the address of this contract does not equal to the external contract token is greater than 0:\n  - it calls an external function transferFrom of the external contract token with the following argument list: caller, the address of this contract, and the second argument.\n  When the first argument equals to totalSupply, and the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the tokenURI of 2 is smaller than the first argument:\n  - the tokenURI of the address will be updated to the second argument.\n\nFor the function initialiseAuction, it has 7 arguments and the type of each argument is as follows: uint256, uint256, uint256, uint256, uint256, uint256, uint256.\n  For totalsupply1, and the second argument is greater than the third argument, and the sixth argument is greater than 0 and the sixth argument is not greater than 300 is greater than 0, and the first argument is not smaller than the current block's number, and the third argument is greater than 0, and the element in the amounts with index 1 is 0, and (totalsupply+1) is not smaller than totalsupply:\n  - the state variable totalSupply will be updated to (totalSupply+1).\n  For totalsupply1, and the second argument is greater than the third argument, and the sixth argument is greater than 0 and the sixth argument is not greater than 300 is greater than 0, and the first argument is not smaller than the current block's number, and the third argument is greater than 0, and the element in the amounts with index 1 is 0, and (totalsupply+1) is not smaller than totalsupply, and the fourth argument is greater than 0, and the second argument is not smaller than the third argument, and ((the second argument-the third argument)+the fourth argument) is not smaller than (the second argument-the third argument), and ((the second argument-the third argument)+the fourth argument) is not smaller than 1, and (the first argument+the fourth argument) is not smaller than the first argument, and ((the first argument+the fourth argument)+25) is not smaller than (the first argument+the fourth argument), and (((the first argument+the fourth argument)+25)+the fifth argument) is not smaller than ((the first argument+the fourth argument)+25), and (totalsupply2+the 7-th argument) is not smaller than totalsupply2:\n  - the state variable totalSupply2 will be updated to (totalSupply2+the 7-th argument).\n  For totalsupply1, and the second argument is greater than the third argument, and the sixth argument is greater than 0 and the sixth argument is not greater than 300 is greater than 0, and the first argument is not smaller than the current block's number, and the third argument is greater than 0, and the element in the amounts with index 1 is 0, and (totalsupply+1) is not smaller than totalsupply, and the fourth argument is greater than 0, and the second argument is not smaller than the third argument, and ((the second argument-the third argument)+the fourth argument) is not smaller than (the second argument-the third argument), and ((the second argument-the third argument)+the fourth argument) is not smaller than 1, and (the first argument+the fourth argument) is not smaller than the first argument, and ((the first argument+the fourth argument)+25) is not smaller than (the first argument+the fourth argument), and (((the first argument+the fourth argument)+25)+the fifth argument) is not smaller than ((the first argument+the fourth argument)+25), and (totalsupply2+the 7-th argument) is not smaller than totalsupply2, and the element in the amounts with index 8 is greater than 0:\n  - the state variable totalSupply3 will be updated to (totalSupply2/the element in the amounts with index 8).\n  For totalsupply1, and the second argument is greater than the third argument, and the sixth argument is greater than 0 and the sixth argument is not greater than 300 is greater than 0, and the first argument is not smaller than the current block's number, and the third argument is greater than 0, and the element in the amounts with index 1 is 0, and (totalsupply+1) is not smaller than totalsupply, and the fourth argument is greater than 0, and the second argument is not smaller than the third argument, and ((the second argument-the third argument)+the fourth argument) is not smaller than (the second argument-the third argument), and ((the second argument-the third argument)+the fourth argument) is not smaller than 1, and (the first argument+the fourth argument) is not smaller than the first argument, and ((the first argument+the fourth argument)+25) is not smaller than (the first argument+the fourth argument), and (((the first argument+the fourth argument)+25)+the fifth argument) is not smaller than ((the first argument+the fourth argument)+25), and (totalsupply2+the 7-th argument) is not smaller than totalsupply2, and the element in the amounts with index 8 is greater than 0, and the address of this contract does not equal to the external contract token is greater than 0:\n  - it calls an external function transferFrom of the external contract token with the following argument list: caller, the address of this contract, and the 7-th argument.\n  For totalsupply1, and the second argument is greater than the third argument, and the sixth argument is greater than 0 and the sixth argument is not greater than 300 is greater than 0, and the first argument is not smaller than the current block's number, and the third argument is greater than 0, and the element in the amounts with index 1 is 0, and (totalsupply+1) is not smaller than totalsupply, and the fourth argument is greater than 0, and the second argument is not smaller than the third argument, and ((the second argument-the third argument)+the fourth argument) is not smaller than (the second argument-the third argument), and ((the second argument-the third argument)+the fourth argument) is not smaller than 1, and (the first argument+the fourth argument) is not smaller than the first argument, and ((the first argument+the fourth argument)+25) is not smaller than (the first argument+the fourth argument), and (((the first argument+the fourth argument)+25)+the fifth argument) is not smaller than ((the first argument+the fourth argument)+25):\n  - the value 0 will be put to the element in the amounts.\n\nFor the function pledgeStake, it has 3 arguments and the type of each argument is as follows: uint256, address, uint256.\n  When the first argument equals to totalSupply, and the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the tokenURI of 2 equals to the first argument, and the tokenURI1 of 1 is smaller than the first argument, and the tokenURI of 1 is greater than 0, and ((the tokenURI of 1*the third argument)/the tokenURI of 1) equals to the third argument, and the tokenURI of the address is not smaller than ((the tokenURI of 1*the third argument)/0x186a0), and (the balance2 of the second argument+the third argument) is not smaller than the balance2 of the second argument:\n  - the balance2 of the second argument will be updated to (the balance2 of the second argument+the third argument).\n  When the first argument equals to totalSupply, and the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the tokenURI of 2 equals to the first argument, and the tokenURI1 of 1 is smaller than the first argument, and the tokenURI of 1 is greater than 0, and ((the tokenURI of 1*the third argument)/the tokenURI of 1) equals to the third argument, and the tokenURI of the address is not smaller than ((the tokenURI of 1*the third argument)/0x186a0), and (the balance2 of the second argument+the third argument) is not smaller than the balance2 of the second argument, and (the third argument+((the tokenURI of 1*the third argument)/0x186a0)) is not smaller than the third argument, and the third argument is greater than the tokenURI1 of the address, and the address of this contract does not equal to the external contract token is greater than 0, and the third argument is not smaller than the tokenURI1 of the address:\n  - it calls an external function transferFrom of the external contract token with the following argument list: caller, the address of this contract, and (the third argument-the tokenURI1 of the address).\n  When the first argument equals to totalSupply, and the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the tokenURI of 2 equals to the first argument, and the tokenURI1 of 1 is smaller than the first argument, and the tokenURI of 1 is greater than 0, and ((the tokenURI of 1*the third argument)/the tokenURI of 1) equals to the third argument, and the tokenURI of the address is not smaller than ((the tokenURI of 1*the third argument)/0x186a0):\n  - the tokenURI of the address will be updated to (the tokenURI of the address-((the tokenURI of 1*the third argument)/0x186a0)).\n  When the first argument equals to totalSupply, and the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the tokenURI of 2 equals to the first argument, and the tokenURI1 of 1 is smaller than the first argument, and the tokenURI of 1 is greater than 0, and ((the tokenURI of 1*the third argument)/the tokenURI of 1) equals to the third argument, and the tokenURI of the address is not smaller than ((the tokenURI of 1*the third argument)/0x186a0), and (the balance2 of the second argument+the third argument) is not smaller than the balance2 of the second argument, and (the third argument+((the tokenURI of 1*the third argument)/0x186a0)) is not smaller than the third argument:\n  - the tokenURI1 of the address will be updated to (the third argument+((the tokenURI of 1*the third argument)/0x186a0)).\n\nFor the function endLockup.\n  When the element in the amounts is greater than 0, and the current block's number is not smaller than the element in the amounts with index 1, and the element in the amounts with index 2 is greater than 0, and ((the element in the amounts with index 2*totalSupply3)/the element in the amounts with index 2) equals to totalSupply3, and totalSupply2 is not smaller than (the element in the amounts with index 2*totalSupply3):\n  - the state variable totalSupply2 will be updated to (totalSupply2-(the element in the amounts with index 2*totalSupply3)).\n  When the element in the amounts is greater than 0, and the current block's number is not smaller than the element in the amounts with index 1, and the element in the amounts with index 2 is greater than 0, and ((the element in the amounts with index 2*totalSupply3)/the element in the amounts with index 2) equals to totalSupply3, and totalSupply2 is not smaller than (the element in the amounts with index 2*totalSupply3), and (current time+0x4f1a00) is not smaller than current time:\n  - the state variable totalSupply4 will be updated to (current time+0x4f1a00).\n  When the element in the amounts is greater than 0, and the current block's number is not smaller than the element in the amounts with index 1, and the element in the amounts with index 2 is greater than 0, and ((the element in the amounts with index 2*totalSupply3)/the element in the amounts with index 2) equals to totalSupply3, and totalSupply2 is not smaller than (the element in the amounts with index 2*totalSupply3), and (current time+0x4f1a00) is not smaller than current time, and the element in the amounts1 is greater than 0, and the balance of the element in the amounts1 is greater than 0, and ((the balance of the element in the amounts1*totalSupply3)/the balance of the element in the amounts1) equals to totalSupply3, and (the balance1 of the element in the amounts1+(the balance of the element in the amounts1*totalSupply3)) is not smaller than the balance1 of the element in the amounts1:\n  - the balance1 of the element in the amounts1 will be updated to (the balance1 of the element in the amounts1+(the balance of the element in the amounts1*totalSupply3)). Afterthat, \n    - the balance of the element in the amounts1 will be updated to 0.\n  When the element in the amounts is greater than 0, and the current block's number is not smaller than the element in the amounts with index 1, and the element in the amounts with index 2 is greater than 0, and ((the element in the amounts with index 2*totalSupply3)/the element in the amounts with index 2) equals to totalSupply3, and totalSupply2 is not smaller than (the element in the amounts with index 2*totalSupply3), and (current time+0x4f1a00) is not smaller than current time, and the element in the amounts1 is greater than 0, and the balance of the element in the amounts1 is greater than 0, and ((the balance of the element in the amounts1*totalSupply3)/the balance of the element in the amounts1) equals to totalSupply3, and (the balance1 of the element in the amounts1+(the balance of the element in the amounts1*totalSupply3)) is not smaller than the balance1 of the element in the amounts1, and the element in the amounts1 with index 1 is 0:\n  - the state variable totalSupply3 will be updated to 0.\n  When the element in the amounts is greater than 0, and the current block's number is not smaller than the element in the amounts with index 1, and the element in the amounts with index 2 is greater than 0, and ((the element in the amounts with index 2*totalSupply3)/the element in the amounts with index 2) equals to totalSupply3, and totalSupply2 is not smaller than (the element in the amounts with index 2*totalSupply3), and (current time+0x4f1a00) is not smaller than current time, and the balance of the element in the amounts1 is greater than 0, and ((the balance of the element in the amounts1*totalSupply3)/the balance of the element in the amounts1) equals to totalSupply3, and (the balance1 of the element in the amounts1+(the balance of the element in the amounts1*totalSupply3)) is not smaller than the balance1 of the element in the amounts1, and the element in the amounts1 with index 1 is 0:\n  - the value 0 will be put to the element in the amounts1.\n  When the current block's number is not smaller than the element in the amounts with index 1, and the element in the amounts with index 2 is greater than 0, and ((the element in the amounts with index 2*totalSupply3)/the element in the amounts with index 2) equals to totalSupply3, and totalSupply2 is not smaller than (the element in the amounts with index 2*totalSupply3), and (current time+0x4f1a00) is not smaller than current time, and the element in the amounts1 is greater than 0, and the balance of the element in the amounts1 is greater than 0, and ((the balance of the element in the amounts1*totalSupply3)/the balance of the element in the amounts1) equals to totalSupply3, and (the balance1 of the element in the amounts1+(the balance of the element in the amounts1*totalSupply3)) is not smaller than the balance1 of the element in the amounts1, and the element in the amounts1 with index 1 is 0:\n  - the value 0 will be put to the element in the amounts.\n\nFor the function bid, it has one argument and its type is uint256.\n  When the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the balance of caller is 0, and the element in the amounts is not greater than 0 or the element in the amounts with index 1 is 0, and the current block's number is greater than the element in the amounts with index 3, and the element in the amounts with index 7 is greater than 0, and the current block's number is not smaller than the element in the amounts with index 3, and ((the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))/the element in the amounts with index 7) equals to (the current block's number-the element in the amounts with index 3), and the element in the amounts with index 5 is not smaller than the element in the amounts with index 6, and (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)) is not greater than (the element in the amounts with index 5-the element in the amounts with index 6), and the element in the amounts with index 5 is not smaller than (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)), and (the balance2 of caller+the balance1 of caller) is not smaller than the balance2 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is not greater than (the balance2 of caller+the balance1 of caller) and the first argument is 0, and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the balance2 of caller+the balance1 of caller), and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))):\n  - the balance3 of caller will be updated to (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))).\n  When the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the balance of caller is 0, and the element in the amounts is not greater than 0 or the element in the amounts with index 1 is 0, and the current block's number is greater than the element in the amounts with index 3, and the element in the amounts with index 7 is greater than 0, and the current block's number is not smaller than the element in the amounts with index 3, and ((the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))/the element in the amounts with index 7) equals to (the current block's number-the element in the amounts with index 3), and the element in the amounts with index 5 is not smaller than the element in the amounts with index 6, and (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)) is not greater than (the element in the amounts with index 5-the element in the amounts with index 6), and the element in the amounts with index 5 is not smaller than (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)), and (the balance2 of caller+the balance1 of caller) is not smaller than the balance2 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is not greater than (the balance2 of caller+the balance1 of caller) and the first argument is 0, and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the balance2 of caller+the balance1 of caller), and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))), and (the balance1 of caller+the first argument) is not smaller than the balance1 of caller:\n  - the balance1 of caller will be updated to (the balance1 of caller+the first argument).\n  When the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the balance of caller is 0, and the element in the amounts is not greater than 0 or the element in the amounts with index 1 is 0, and the current block's number is greater than the element in the amounts with index 3, and the element in the amounts with index 7 is greater than 0, and the current block's number is not smaller than the element in the amounts with index 3, and ((the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))/the element in the amounts with index 7) equals to (the current block's number-the element in the amounts with index 3), and the element in the amounts with index 5 is not smaller than the element in the amounts with index 6, and (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)) is not greater than (the element in the amounts with index 5-the element in the amounts with index 6), and the element in the amounts with index 5 is not smaller than (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)), and (the balance2 of caller+the balance1 of caller) is not smaller than the balance2 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is not greater than (the balance2 of caller+the balance1 of caller) and the first argument is 0, and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the balance2 of caller+the balance1 of caller), and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))), and (the balance1 of caller+the first argument) is not smaller than the balance1 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is greater than 0, and the element in the amounts with index 8 is not smaller than the element in the amounts with index 2, and (((the balance2 of caller+the balance1 of caller)+the first argument)/(the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)))) is not greater than (the element in the amounts with index 8-the element in the amounts with index 2):\n  - the balance of caller will be updated to (((the balance2 of caller+the balance1 of caller)+the first argument)/(the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)))).\n  When the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the balance of caller is 0, and the element in the amounts is not greater than 0 or the element in the amounts with index 1 is 0, and the current block's number is greater than the element in the amounts with index 3, and the element in the amounts with index 7 is greater than 0, and the current block's number is not smaller than the element in the amounts with index 3, and ((the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))/the element in the amounts with index 7) equals to (the current block's number-the element in the amounts with index 3), and the element in the amounts with index 5 is not smaller than the element in the amounts with index 6, and (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)) is not greater than (the element in the amounts with index 5-the element in the amounts with index 6), and the element in the amounts with index 5 is not smaller than (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)), and (the balance2 of caller+the balance1 of caller) is not smaller than the balance2 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is not greater than (the balance2 of caller+the balance1 of caller) and the first argument is 0, and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the balance2 of caller+the balance1 of caller), and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))), and (the balance1 of caller+the first argument) is not smaller than the balance1 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is greater than 0, and the element in the amounts with index 8 is not smaller than the element in the amounts with index 2, and (((the balance2 of caller+the balance1 of caller)+the first argument)/(the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)))) is not greater than (the element in the amounts with index 8-the element in the amounts with index 2), and (the element in the amounts with index 2+(((the balance2 of caller+the balance1 of caller)+the first argument)/(the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))))) is not smaller than the element in the amounts with index 2, and the element in the amounts with index 9 is smaller than 300, and (the element in the amounts with index 9+1) is not smaller than the element in the amounts with index 9:\n  - the value (the element in the amounts with index 9+1) will be put to the element in the amounts.\n  When the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the balance of caller is 0, and the element in the amounts is not greater than 0 or the element in the amounts with index 1 is 0, and the current block's number is greater than the element in the amounts with index 3, and the element in the amounts with index 7 is greater than 0, and the current block's number is not smaller than the element in the amounts with index 3, and ((the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))/the element in the amounts with index 7) equals to (the current block's number-the element in the amounts with index 3), and the element in the amounts with index 5 is not smaller than the element in the amounts with index 6, and (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)) is not greater than (the element in the amounts with index 5-the element in the amounts with index 6), and the element in the amounts with index 5 is not smaller than (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)), and (the balance2 of caller+the balance1 of caller) is not smaller than the balance2 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is not greater than (the balance2 of caller+the balance1 of caller) and the first argument is 0, and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the balance2 of caller+the balance1 of caller), and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))), and (the balance1 of caller+the first argument) is not smaller than the balance1 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is greater than 0, and the element in the amounts with index 8 is not smaller than the element in the amounts with index 2, and (((the balance2 of caller+the balance1 of caller)+the first argument)/(the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)))) is not greater than (the element in the amounts with index 8-the element in the amounts with index 2), and (the element in the amounts with index 2+(((the balance2 of caller+the balance1 of caller)+the first argument)/(the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))))) is not smaller than the element in the amounts with index 2, and the element in the amounts with index 9 is smaller than 300:\n  - the value caller will be put to the element in the amounts1.\n  When the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the balance of caller is 0, and the element in the amounts is not greater than 0 or the element in the amounts with index 1 is 0, and the current block's number is greater than the element in the amounts with index 3, and the element in the amounts with index 7 is greater than 0, and the current block's number is not smaller than the element in the amounts with index 3, and ((the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))/the element in the amounts with index 7) equals to (the current block's number-the element in the amounts with index 3), and the element in the amounts with index 5 is not smaller than the element in the amounts with index 6, and (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)) is not greater than (the element in the amounts with index 5-the element in the amounts with index 6), and the element in the amounts with index 5 is not smaller than (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)), and (the balance2 of caller+the balance1 of caller) is not smaller than the balance2 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is not greater than (the balance2 of caller+the balance1 of caller) and the first argument is 0, and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the balance2 of caller+the balance1 of caller), and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))), and (the balance1 of caller+the first argument) is not smaller than the balance1 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is greater than 0, and the element in the amounts with index 8 is not smaller than the element in the amounts with index 2, and (((the balance2 of caller+the balance1 of caller)+the first argument)/(the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)))) is not greater than (the element in the amounts with index 8-the element in the amounts with index 2), and (the element in the amounts with index 2+(((the balance2 of caller+the balance1 of caller)+the first argument)/(the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))))) is not smaller than the element in the amounts with index 2, and the element in the amounts with index 9 is smaller than 300, and (the element in the amounts with index 9+1) is not smaller than the element in the amounts with index 9, and the tokenURI of 2 equals to totalSupply, and the balance2 of caller is not smaller than the tokenURI of the address:\n  - the balance2 of caller will be updated to (the balance2 of caller-the tokenURI of the address).\n  When the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the balance of caller is 0, and the element in the amounts is not greater than 0 or the element in the amounts with index 1 is 0, and the current block's number is greater than the element in the amounts with index 3, and the element in the amounts with index 7 is greater than 0, and the current block's number is not smaller than the element in the amounts with index 3, and ((the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))/the element in the amounts with index 7) equals to (the current block's number-the element in the amounts with index 3), and the element in the amounts with index 5 is not smaller than the element in the amounts with index 6, and (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)) is not greater than (the element in the amounts with index 5-the element in the amounts with index 6), and the element in the amounts with index 5 is not smaller than (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)), and (the balance2 of caller+the balance1 of caller) is not smaller than the balance2 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is not greater than (the balance2 of caller+the balance1 of caller) and the first argument is 0, and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the balance2 of caller+the balance1 of caller), and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))), and (the balance1 of caller+the first argument) is not smaller than the balance1 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is greater than 0, and the element in the amounts with index 8 is not smaller than the element in the amounts with index 2, and (((the balance2 of caller+the balance1 of caller)+the first argument)/(the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)))) is not greater than (the element in the amounts with index 8-the element in the amounts with index 2), and (the element in the amounts with index 2+(((the balance2 of caller+the balance1 of caller)+the first argument)/(the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))))) is not smaller than the element in the amounts with index 2, and the element in the amounts with index 9 is smaller than 300, and (the element in the amounts with index 9+1) is not smaller than the element in the amounts with index 9, and the tokenURI of 2 equals to totalSupply, and the balance2 of caller is not smaller than the tokenURI of the address, and (the balance1 of caller+the tokenURI of the address) is not smaller than the balance1 of caller:\n  - the balance1 of caller will be updated to (the balance1 of caller+the tokenURI of the address).\n  When the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the balance of caller is 0, and the element in the amounts is not greater than 0 or the element in the amounts with index 1 is 0, and the current block's number is greater than the element in the amounts with index 3, and the element in the amounts with index 7 is greater than 0, and the current block's number is not smaller than the element in the amounts with index 3, and ((the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))/the element in the amounts with index 7) equals to (the current block's number-the element in the amounts with index 3), and the element in the amounts with index 5 is not smaller than the element in the amounts with index 6, and (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)) is not greater than (the element in the amounts with index 5-the element in the amounts with index 6), and the element in the amounts with index 5 is not smaller than (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)), and (the balance2 of caller+the balance1 of caller) is not smaller than the balance2 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is not greater than (the balance2 of caller+the balance1 of caller) and the first argument is 0, and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the balance2 of caller+the balance1 of caller), and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))), and (the balance1 of caller+the first argument) is not smaller than the balance1 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is greater than 0, and the element in the amounts with index 8 is not smaller than the element in the amounts with index 2, and (((the balance2 of caller+the balance1 of caller)+the first argument)/(the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)))) is not greater than (the element in the amounts with index 8-the element in the amounts with index 2), and (the element in the amounts with index 2+(((the balance2 of caller+the balance1 of caller)+the first argument)/(the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))))) is not smaller than the element in the amounts with index 2, and the element in the amounts with index 9 is smaller than 300, and (the element in the amounts with index 9+1) is not smaller than the element in the amounts with index 9, and the tokenURI of 2 equals to totalSupply:\n  - the tokenURI of the address will be updated to 0.\n  When the element in the amounts is 0 and the element in the amounts with index 2 is smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is greater than 0 and the current block's number is smaller than the element in the amounts with index 4 is greater than 0, and the balance of caller is 0, and the element in the amounts is not greater than 0 or the element in the amounts with index 1 is 0, and the current block's number is greater than the element in the amounts with index 3, and the element in the amounts with index 7 is greater than 0, and the current block's number is not smaller than the element in the amounts with index 3, and ((the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))/the element in the amounts with index 7) equals to (the current block's number-the element in the amounts with index 3), and the element in the amounts with index 5 is not smaller than the element in the amounts with index 6, and (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)) is not greater than (the element in the amounts with index 5-the element in the amounts with index 6), and the element in the amounts with index 5 is not smaller than (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)), and (the balance2 of caller+the balance1 of caller) is not smaller than the balance2 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is not greater than (the balance2 of caller+the balance1 of caller) and the first argument is 0, and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the balance2 of caller+the balance1 of caller), and ((the balance2 of caller+the balance1 of caller)+the first argument) is not smaller than (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))), and (the balance1 of caller+the first argument) is not smaller than the balance1 of caller, and (the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))) is greater than 0, and the element in the amounts with index 8 is not smaller than the element in the amounts with index 2, and (((the balance2 of caller+the balance1 of caller)+the first argument)/(the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)))) is not greater than (the element in the amounts with index 8-the element in the amounts with index 2), and (the element in the amounts with index 2+(((the balance2 of caller+the balance1 of caller)+the first argument)/(the element in the amounts with index 5-(the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))))) is not smaller than the element in the amounts with index 2, and the element in the amounts with index 9 is smaller than 300, and (the element in the amounts with index 9+1) is not smaller than the element in the amounts with index 9, and for users, except the tokenURI of 2 equals to totalSupply, and the first argument is greater than 0, and the address of this contract does not equal to the external contract token is greater than 0:\n  - it calls an external function transferFrom of the external contract token with the following argument list: caller, the address of this contract, and the first argument.\n\nFor the function finaliseAuction, it has one argument and its type is uint256.\n  When the element in the amounts is not greater than 0 or the element in the amounts with index 1 is 0, and the current block's number is greater than the element in the amounts with index 3, and the element in the amounts with index 7 is greater than 0, and the current block's number is not smaller than the element in the amounts with index 3, and ((the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))/the element in the amounts with index 7) equals to (the current block's number-the element in the amounts with index 3), and the element in the amounts with index 5 is not smaller than the element in the amounts with index 6, and (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)) is greater than (the element in the amounts with index 5-the element in the amounts with index 6), and the element in the amounts with index 5 is not smaller than (the element in the amounts with index 5-the element in the amounts with index 6), and the first argument is not smaller than (the element in the amounts with index 5-(the element in the amounts with index 5-the element in the amounts with index 6)), and the element in the amounts is 0, and the element in the amounts with index 1 is not smaller than 0, and (the first argument+1) is not smaller than the first argument, and the element in the amounts with index 9 is not greater than 0x7fffffffffffffffffffffffffffffff, and 0 SLT the element in the amounts with index 9, and the first argument is not greater than the balance3 of the element in the amounts1, and (the balance1 of the element in the amounts1+the balance2 of the element in the amounts1) is not smaller than the balance1 of the element in the amounts1, and the element in the amounts with index 8 is greater than 0, and the first argument is greater than 0, and ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument) is not greater than the element in the amounts with index 8, and ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument) does not equal to the balance of the element in the amounts1 is greater than 0:\n  - the balance of the element in the amounts1 will be updated to ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument).\n  When the element in the amounts is not greater than 0 or the element in the amounts with index 1 is 0, and the current block's number is greater than the element in the amounts with index 3, and the element in the amounts with index 7 is greater than 0, and the current block's number is not smaller than the element in the amounts with index 3, and ((the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))/the element in the amounts with index 7) equals to (the current block's number-the element in the amounts with index 3), and the element in the amounts with index 5 is not smaller than the element in the amounts with index 6, and (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)) is greater than (the element in the amounts with index 5-the element in the amounts with index 6), and the element in the amounts with index 5 is not smaller than (the element in the amounts with index 5-the element in the amounts with index 6), and the first argument is not smaller than (the element in the amounts with index 5-(the element in the amounts with index 5-the element in the amounts with index 6)), and the element in the amounts with index 1 is not smaller than 0, and (the first argument+1) is not smaller than the first argument, and the element in the amounts with index 9 is not greater than 0x7fffffffffffffffffffffffffffffff, and 0 SLT the element in the amounts with index 9, and the first argument is not greater than the balance3 of the element in the amounts1, and (the balance1 of the element in the amounts1+the balance2 of the element in the amounts1) is not smaller than the balance1 of the element in the amounts1, and the element in the amounts with index 8 is greater than 0, and the first argument is greater than 0, and ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument) is not greater than the element in the amounts with index 8, and ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument) does not equal to the balance of the element in the amounts1 is greater than 0, and the element in the amounts with index 8 is not smaller than ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument), and (the first argument+1) is not greater than the balance3 of the element in the amounts1, and (the first argument+1) is greater than 0, and ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/(the first argument+1)) is not greater than the element in the amounts with index 8, and the element in the amounts with index 8 is not smaller than ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/(the first argument+1)), and ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument) is greater than 0, and 1 SLT the element in the amounts with index 9 is 0, and the first argument equals to the element in the amounts with index 6 and the element in the amounts is 0 and the element in the amounts with index 2 is not smaller than the element in the amounts with index 8 and the element in the amounts with index 1 is not greater than 0 and the current block's number is not smaller than the element in the amounts with index 4, and (the element in the amounts with index 8-((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument)) is 0, and (the element in the amounts with index 8-((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/(the first argument+1))) is greater than 0, and the element in the amounts with index 8 is not smaller than (the element in the amounts with index 8-((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument)):\n  - the value (the element in the amounts with index 8-(the element in the amounts with index 8-((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument))) will be put to the element in the amounts.\n  When the element in the amounts is not greater than 0 or the element in the amounts with index 1 is 0, and the current block's number is greater than the element in the amounts with index 3, and the element in the amounts with index 7 is greater than 0, and the current block's number is not smaller than the element in the amounts with index 3, and ((the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3))/the element in the amounts with index 7) equals to (the current block's number-the element in the amounts with index 3), and the element in the amounts with index 5 is not smaller than the element in the amounts with index 6, and (the element in the amounts with index 7*(the current block's number-the element in the amounts with index 3)) is greater than (the element in the amounts with index 5-the element in the amounts with index 6), and the element in the amounts with index 5 is not smaller than (the element in the amounts with index 5-the element in the amounts with index 6), and the first argument is not smaller than (the element in the amounts with index 5-(the element in the amounts with index 5-the element in the amounts with index 6)), and the element in the amounts is 0, and the element in the amounts with index 1 is not smaller than 0, and (the first argument+1) is not smaller than the first argument, and the element in the amounts with index 9 is not greater than 0x7fffffffffffffffffffffffffffffff, and 0 SLT the element in the amounts with index 9, and the first argument is not greater than the balance3 of the element in the amounts1, and (the balance1 of the element in the amounts1+the balance2 of the element in the amounts1) is not smaller than the balance1 of the element in the amounts1, and the element in the amounts with index 8 is greater than 0, and the first argument is greater than 0, and ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument) is not greater than the element in the amounts with index 8, and ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument) does not equal to the balance of the element in the amounts1 is greater than 0, and the element in the amounts with index 8 is not smaller than ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument), and (the first argument+1) is not greater than the balance3 of the element in the amounts1, and (the first argument+1) is greater than 0, and ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/(the first argument+1)) is not greater than the element in the amounts with index 8, and the element in the amounts with index 8 is not smaller than ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/(the first argument+1)), and ((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument) is greater than 0, and 1 SLT the element in the amounts with index 9, and the first argument is not greater than the balance3 of the element in the amounts1 with index 1, and (the balance1 of the element in the amounts1 with index 1+the balance2 of the element in the amounts1 with index 1) is not smaller than the balance1 of the element in the amounts1 with index 1, and (the element in the amounts with index 8-((the balance1 of the element in the amounts1+the balance2 of the element in the amounts1)/the first argument)) is not greater than 0, and (the first argument+1) is greater than the balance3 of the element in the amounts1 with index 1:\n  - the balance of the element in the amounts1 with index 1 will be updated to 0.\n  - the value 0 will be put to the element in the amounts1.\n\n",
	"language": "Solidity",
	"status": "Request timed out: HTTPSConnectionPool(host='sotels-openai.openai.azure.com', port=443): Read timed out. (read timeout=600)"
}