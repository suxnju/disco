{
	"address": "0xf55acf113cb1628f27b23d61fe6df12f43294694",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code:\n\n```solidity\npragma solidity ^0.6.0;\n\ncontract TokenContract {\n    uint256 private _totalSupply;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping(address => uint256)) private _allowance;\n    uint256 private _initialSupply;\n    address private _owner;\n    uint256 constant private sellPrice = 0x12edc9ab5d000;\n    uint256 constant private buyPrice = 0x49f0dbc56348000;\n    \n    event Approval(address indexed tokenOwner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 tokens);\n\n    function approve(address delegate, uint256 numTokens) public {\n        _allowance[msg.sender][delegate] = numTokens;\n        emit Approval(msg.sender, delegate, numTokens);\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address from, address to, uint256 tokens) public returns (bool) {\n        require(tokens <= _balanceOf[from]);\n        require(tokens <= _allowance[from][msg.sender]);\n        \n        _balanceOf[from] -= tokens;\n        _balanceOf[to] += tokens;\n        _allowance[from][msg.sender] -= tokens;\n        \n        emit Transfer(from, to, tokens);\n        return true;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 3;\n    }\n\n    function initialSupply() public view returns (uint256) {\n        return _initialSupply;\n    }\n\n    function balanceOf(address tokenOwner) public view returns (uint256) {\n        return _balanceOf[tokenOwner];\n    }\n\n    function mintToken(address target, uint256 mintedAmount) public {\n        require(msg.sender == _owner);\n        _balanceOf[target] += mintedAmount;\n        _totalSupply += mintedAmount;\n        \n        emit Transfer(address(0), target, mintedAmount);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"ETH\";\n    }\n\n    function buy() public payable {\n        uint256 amount = msg.value / buyPrice; \n        require(_balanceOf[address(this)] >= amount); \n        _balanceOf[msg.sender] += amount; \n        _balanceOf[address(this)] -= amount;\n        emit Transfer(address(this), msg.sender, amount);\n    }\n\n    function transfer(address to, uint256 tokens) public returns (bool) {\n        require(tokens <= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] -= tokens;\n        _balanceOf[to] += tokens;\n        emit Transfer(msg.sender, to, tokens);\n        return true;\n    }\n\n    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {\n        return _allowance[tokenOwner][spender];\n    }\n\n    function sell(uint256 amount) public {\n        require(_balanceOf[msg.sender] >= amount ); \n        _balanceOf[address(this)] += amount; \n        _balanceOf[msg.sender] -= amount;\n        msg.sender.transfer(amount * sellPrice);\n        emit Transfer(msg.sender, address(this), amount);\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner);\n        _owner = newOwner;\n    }\n}\n```\nThis code may not be a perfect match but it seems to cover the same functionality as the decompiled source. It's important to note that decompiling bytecode into Solidity is not always a straightforward process and might result in some slight discrepancies.",
				"role": "assistant"
			}
		}
	],
	"created": 1701463574,
	"id": "chatcmpl-8R4go3nRkUSTLyGCxVUqPF7madXAe",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 22:29 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _initialSupply; // STORAGE[0x4]\naddress _owner; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1;\n    if (varg1) {\n        v0 = _allowance[varg0];\n    }\n    require(!v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length >= 100);\n    0xa13(varg2 + _allowance[varg1] >= _allowance[varg1]);\n    _balanceOf[varg1] = varg2 + _allowance[varg1];\n    0xa13(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    0xa13(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n}\n\nfunction decimals() public nonPayable { \n    return 3;\n}\n\nfunction initialSupply() public nonPayable { \n    return _initialSupply;\n}\n\nfunction sellPrice() public nonPayable { \n    return 0x12edc9ab5d000;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(_owner == msg.sender);\n    _balanceOf[varg0] += varg1;\n    _totalSupply += varg1;\n    emit Transfer(0, address(this), varg1);\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction buyPrice() public nonPayable { \n    return 0x49f0dbc56348000;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4554480000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction buy() public payable { \n    v0 = 0x44a();\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[msg.sender] > varg1);\n    require(_balanceOf[varg0] + varg1 > _balanceOf[varg0]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[address(this)] += varg0;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = msg.sender.call().value(varg0 * 0x12edc9ab5d000).gas(2300 * !(varg0 * 0x12edc9ab5d000));\n    require(v0);\n    emit Transfer(msg.sender, address(this), varg0);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    if (varg0) {\n        _owner = varg0;\n        goto 0xf90x429;\n    }\n}\n\nfunction 0x44a() private { \n    require(_balanceOf[address(this)] >= msg.value / 0x49f0dbc56348000);\n    _balanceOf[msg.sender] += msg.value / 0x49f0dbc56348000;\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value / 0x49f0dbc56348000;\n    emit Transfer(address(this), msg.sender, msg.value / 0x49f0dbc56348000);\n    return msg.value / 0x49f0dbc56348000;\n}\n\nfunction 0xa13(uint256 varg0) private { \n    require(varg0);\n    return ;\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'Order';\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x378dc3dc == function_selector) {\n            initialSupply();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    v0 = 0x44a();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 22:29 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _initialSupply; // STORAGE[0x4]\naddress _owner; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1;\n    if (varg1) {\n        v0 = _allowance[varg0];\n    }\n    require(!v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length >= 100);\n    0xa13(varg2 + _allowance[varg1] >= _allowance[varg1]);\n    _balanceOf[varg1] = varg2 + _allowance[varg1];\n    0xa13(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    0xa13(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n}\n\nfunction decimals() public nonPayable { \n    return 3;\n}\n\nfunction initialSupply() public nonPayable { \n    return _initialSupply;\n}\n\nfunction sellPrice() public nonPayable { \n    return 0x12edc9ab5d000;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(_owner == msg.sender);\n    _balanceOf[varg0] += varg1;\n    _totalSupply += varg1;\n    emit Transfer(0, address(this), varg1);\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction buyPrice() public nonPayable { \n    return 0x49f0dbc56348000;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4554480000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction buy() public payable { \n    v0 = 0x44a();\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[msg.sender] > varg1);\n    require(_balanceOf[varg0] + varg1 > _balanceOf[varg0]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[address(this)] += varg0;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = msg.sender.call().value(varg0 * 0x12edc9ab5d000).gas(2300 * !(varg0 * 0x12edc9ab5d000));\n    require(v0);\n    emit Transfer(msg.sender, address(this), varg0);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    if (varg0) {\n        _owner = varg0;\n        goto 0xf90x429;\n    }\n}\n\nfunction 0x44a() private { \n    require(_balanceOf[address(this)] >= msg.value / 0x49f0dbc56348000);\n    _balanceOf[msg.sender] += msg.value / 0x49f0dbc56348000;\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value / 0x49f0dbc56348000;\n    emit Transfer(address(this), msg.sender, msg.value / 0x49f0dbc56348000);\n    return msg.value / 0x49f0dbc56348000;\n}\n\nfunction 0xa13(uint256 varg0) private { \n    require(varg0);\n    return ;\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'Order';\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x378dc3dc == function_selector) {\n            initialSupply();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    v0 = 0x44a();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 22:29 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256 _initialSupply; // STORAGE[0x4]\naddress _owner; // STORAGE[0x3] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1;\n    if (varg1) {\n        v0 = _allowance[varg0];\n    }\n    require(!v0);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length >= 100);\n    0xa13(varg2 + _allowance[varg1] >= _allowance[varg1]);\n    _balanceOf[varg1] = varg2 + _allowance[varg1];\n    0xa13(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    0xa13(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n}\n\nfunction decimals() public nonPayable { \n    return 3;\n}\n\nfunction initialSupply() public nonPayable { \n    return _initialSupply;\n}\n\nfunction sellPrice() public nonPayable { \n    return 0x12edc9ab5d000;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(_owner == msg.sender);\n    _balanceOf[varg0] += varg1;\n    _totalSupply += varg1;\n    emit Transfer(0, address(this), varg1);\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction buyPrice() public nonPayable { \n    return 0x49f0dbc56348000;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4554480000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction buy() public payable { \n    v0 = 0x44a();\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[msg.sender] > varg1);\n    require(_balanceOf[varg0] + varg1 > _balanceOf[varg0]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[address(this)] += varg0;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = msg.sender.call().value(varg0 * 0x12edc9ab5d000).gas(2300 * !(varg0 * 0x12edc9ab5d000));\n    require(v0);\n    emit Transfer(msg.sender, address(this), varg0);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_owner == msg.sender);\n    if (varg0) {\n        _owner = varg0;\n        goto 0xf90x429;\n    }\n}\n\nfunction 0x44a() private { \n    require(_balanceOf[address(this)] >= msg.value / 0x49f0dbc56348000);\n    _balanceOf[msg.sender] += msg.value / 0x49f0dbc56348000;\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value / 0x49f0dbc56348000;\n    emit Transfer(address(this), msg.sender, msg.value / 0x49f0dbc56348000);\n    return msg.value / 0x49f0dbc56348000;\n}\n\nfunction 0xa13(uint256 varg0) private { \n    require(varg0);\n    return ;\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 += 32;\n    }\n    if (5) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffff & 'Order';\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x378dc3dc == function_selector) {\n            initialSupply();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    v0 = 0x44a();\n}\n.",
	"status": "1",
	"time_cost": 36.97065329551697,
	"usage": {
		"completion_tokens": 759,
		"prompt_tokens": 1778,
		"total_tokens": 2537
	}
}