{
	"address": "0x12d5b7c26dd8dc6e2f71f5bf240d5e76452b2fe5",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code for the provided EVM Bytecode:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Contract {\n    uint256 memorySize;\n    uint256 var0;\n    uint256 var1;\n    address owner;\n    uint256 storageSize = 0x03;\n    uint256 constant var1Const = 0xbabcc539;\n    uint256 gasLimit = 0x04;\n    bool codeLengthCheck;\n    uint256 softCap;\n    uint256 hardCap;\n    uint256 tokensSold;\n    uint256 endTime;\n    uint256 startTime;\n    uint256 collected;\n    uint256 investorCount;\n    uint256 totalTokens;\n    uint256 weiRefunded;\n    uint256 ethUsdRate;\n    uint256 tokenPriceUsd;\n    uint256 investorWhiteList;\n    uint256 ethPriceProvider;\n    address beneficiary;\n    bool halted;\n    bool crowdsaleFinished;\n    bool softCapReached;\n    address token;\n    uint256 name;\n    uint256 constant minGasLimit = 0x1bc16d674ec80000;\n\n    constructor() public {\n        owner = msg.sender;\n        memorySize = 0x80;\n        var0 = 0x00;\n        var1 = 0x00;\n    }\n\n    function main() public {\n        require(msg.data.length >= gasLimit);\n        require(address(this).balance >= var1Const);\n        uint256 messageValue = msg.value;\n        require(messageValue < minGasLimit);\n        require(msg.sender == owner);\n        storageSize = storageSize & 0xffffffffffffffffffffffffffffffffffffffff;\n        codeLengthCheck = !address(storageSize).code.length;\n        require(!codeLengthCheck);\n        if (messageValue > 0) {\n            withdraw();\n        } else {\n            revert();\n        }\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(newOwner != address(0));\n        require(msg.sender == owner);\n        owner = newOwner;\n    }\n\n    function setNewWhiteList(address newWhiteList) public {\n        require(newWhiteList != address(0));\n        require(msg.sender == owner);\n        investorWhiteList = uint256(newWhiteList);\n    }\n\n    function setEthPriceProvider(address newProvider) public {\n        require(newProvider != address(0));\n        require(msg.sender == owner);\n        ethPriceProvider = uint256(newProvider);\n    }\n\n    function halt() public {\n        require(msg.sender == owner);\n        halted = true;\n    }\n\n    function unhalt() public {\n        require(msg.sender == owner);\n        halted = false;\n    }\n\n    function withdraw() public {\n        require(msg.sender == owner);\n        require(softCapReached);\n        require(address(this).balance >= softCap);\n        msg.sender.transfer(address(this).balance);\n    }\n\n    function refund() public {\n        require(block.timestamp >= endTime);\n        require(tokensSold < softCap);\n        uint256 refundAmount = address(this).balance;\n        if (refundAmount > 0) {\n            msg.sender.transfer(refundAmount);\n        }\n        weiRefunded += refundAmount;\n    }\n}\n```\n\nPlease note that this is a simplified version of the original code. Some functionality may not be accurately represented due to the nature of decompiling EVM Bytecode to Solidity. For instance, some specific operations such as bitwise operations and specific gas stipulations may not be accurately represented. It's also important to mention that the contract is missing some function declarations for the functions invoked in the `main` function.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472148,
	"id": "chatcmpl-8Mum4bRhNOSprtjpsE5XW4ljtcc8d",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0180:\n            var var0 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0xbabcc539;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = msg.sender;\n            var var2 = temp1 + 0x20;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n            var3 = !temp2;\n        \n            if (!var3) {\n                var0 = memory[0x40:0x60];\n                var1 = returndata.length;\n            \n                if (var1 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (!memory[var0:var0 + 0x20]) { revert(memory[0x00:0x00]); }\n            \n                var0 = 0x028c;\n                var1 = msg.sender;\n                func_090B(var1);\n                stop();\n            } else {\n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a3;\n                var2 = name();\n                var temp4 = memory[0x40:0x60];\n                var3 = temp4;\n                var4 = var3;\n                var temp5 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp5 - var4;\n                var temp6 = var2;\n                memory[temp5:temp5 + 0x20] = memory[temp6:temp6 + 0x20];\n                var5 = temp5 + 0x20;\n                var7 = memory[temp6:temp6 + 0x20];\n                var6 = temp6 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_02E3:\n                    var temp7 = var7;\n                    var5 = temp7 + var5;\n                    var6 = temp7 & 0x1f;\n                \n                    if (!var6) {\n                        var temp8 = memory[0x40:0x60];\n                        return memory[temp8:temp8 + var5 - temp8];\n                    } else {\n                        var temp9 = var6;\n                        var temp10 = var5 - temp9;\n                        memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                        var temp11 = memory[0x40:0x60];\n                        return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n                    }\n                } else {\n                label_02D1:\n                    var temp12 = var11;\n                    memory[var9 + temp12:var9 + temp12 + 0x20] = memory[var10 + temp12:var10 + temp12 + 0x20];\n                    var11 = temp12 + 0x20;\n                \n                    if (var11 >= var8) { goto label_02E3; }\n                    else { goto label_02D1; }\n                }\n            } else if (var0 == 0x2b9edee9) {\n                // Dispatch table entry for softCapReached()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0333;\n                var2 = softCapReached();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var2;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x3197cbb6) {\n                // Dispatch table entry for endTime()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0362;\n                var2 = endTime();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x38af3eed) {\n                // Dispatch table entry for beneficiary()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038d;\n                var2 = beneficiary();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x3b478fc5) {\n                // Dispatch table entry for ethUsdRate()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e4;\n                var2 = ethUsdRate();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040f;\n                withdraw();\n                stop();\n            } else if (var0 == 0x518ab2a8) {\n                // Dispatch table entry for tokensSold()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0426;\n                var2 = tokensSold();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x5249be25) {\n                // Dispatch table entry for tokenPriceUsd()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0451;\n                var2 = tokenPriceUsd();\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047c;\n                refund();\n                stop();\n            } else if (var0 == 0x5da89ac0) {\n                // Dispatch table entry for weiRefunded()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0493;\n                var2 = weiRefunded();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var2;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x5ed7ca5b) {\n                // Dispatch table entry for halt()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04be;\n                halt();\n                stop();\n            } else if (var0 == 0x78e97925) {\n                // Dispatch table entry for startTime()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04d5;\n                var2 = startTime();\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var2;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x7dbeb101) {\n                // Dispatch table entry for 0x7dbeb101 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0500;\n                var2 = func_1752();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var2;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x7e1c0c09) {\n                // Dispatch table entry for totalTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x052b;\n                var2 = totalTokens();\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var2;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x84bcefd4) {\n                // Dispatch table entry for collected()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0556;\n                var2 = collected();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var2;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0581;\n                var2 = owner();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x906a26e0) {\n                // Dispatch table entry for softCap()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d8;\n                var2 = softCap();\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = var2;\n                var temp38 = memory[0x40:0x60];\n                return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n            } else if (var0 == 0xa47001a8) {\n                // Dispatch table entry for receiveEthPrice(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0619;\n                var2 = msg.data[0x04:0x24];\n                receiveEthPrice(var2);\n                stop();\n            } else if (var0 == 0xb9b8af0b) {\n                // Dispatch table entry for halted()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0630;\n                var2 = halted();\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = !!var2;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0xcb13cddb) {\n                // Dispatch table entry for deposited(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x068b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = deposited(var2);\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = var2;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0xcb3e64fd) {\n                // Dispatch table entry for unhalt()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06b6;\n                unhalt();\n                stop();\n            } else if (var0 == 0xd7e64c00) {\n                // Dispatch table entry for investorCount()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06cd;\n                var2 = investorCount();\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = var2;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0xdccdc893) {\n                // Dispatch table entry for setNewWhiteList(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0724;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                setNewWhiteList(var2);\n                stop();\n            } else if (var0 == 0xe342c2e6) {\n                // Dispatch table entry for investorWhiteList()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x073b;\n                var2 = investorWhiteList();\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0xe41f7dc1) {\n                // Dispatch table entry for ethPriceProvider()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0792;\n                var2 = ethPriceProvider();\n                var temp47 = memory[0x40:0x60];\n                memory[temp47:temp47 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp48 = memory[0x40:0x60];\n                return memory[temp48:temp48 + (temp47 + 0x20) - temp48];\n            } else if (var0 == 0xe4e9bcca) {\n                // Dispatch table entry for setEthPriceProvider(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0815;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                setEthPriceProvider(var2);\n                stop();\n            } else if (var0 == 0xece84fd5) {\n                // Dispatch table entry for crowdsaleFinished()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x082c;\n                var2 = crowdsaleFinished();\n                var temp49 = memory[0x40:0x60];\n                memory[temp49:temp49 + 0x20] = !!var2;\n                var temp50 = memory[0x40:0x60];\n                return memory[temp50:temp50 + (temp49 + 0x20) - temp50];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0887;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xfb86a404) {\n                // Dispatch table entry for hardCap()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x089e;\n                var2 = hardCap();\n                var temp51 = memory[0x40:0x60];\n                memory[temp51:temp51 + 0x20] = var2;\n                var temp52 = memory[0x40:0x60];\n                return memory[temp52:temp52 + (temp51 + 0x20) - temp52];\n            } else if (var0 == 0xfc0c546a) {\n                // Dispatch table entry for token()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08c9;\n                var2 = token();\n                var temp53 = memory[0x40:0x60];\n                memory[temp53:temp53 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp54 = memory[0x40:0x60];\n                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n            } else { goto label_0180; }\n        }\n    }\n    \n    function func_090B(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = block.timestamp >= storage[0x0e];\n    \n        if (!var4) {\n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_092F:\n        \n            if (storage[0x00] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x10] / 0x0100 ** 0x01 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            var4 = storage[0x05];\n            var var5 = 0x097f;\n            var var6 = storage[0x0a];\n            var var7 = msg.value;\n            var5 = func_1C37(var6, var7);\n        \n            if (var5 > var4) { revert(memory[0x00:0x00]); }\n        \n            var4 = 0x09b5;\n            var5 = storage[0x08];\n            var6 = 0x09a7;\n            var7 = msg.value;\n            var var8 = storage[0x07];\n            var6 = func_1C55(var7, var8);\n            var4 = func_09A7(var5, var6);\n        \n            if (storage[0x09] < storage[0x0b] + var4) { revert(memory[0x00:0x00]); }\n        \n            var4 = !(storage[0x10] & 0xff);\n        \n            if (var4) {\n                var4 = storage[0x0a] < storage[0x06];\n            \n                if (!var4) { goto label_0A0B; }\n                else { goto label_09F0; }\n            } else if (!var4) {\n            label_0A0B:\n            \n                if (!var4) {\n                    var4 = 0x0a8e;\n                    var5 = storage[0x08];\n                    var6 = 0x0a80;\n                    var7 = msg.value;\n                    var8 = storage[0x07];\n                    var6 = func_1C55(var7, var8);\n                    var4 = func_0A80(var5, var6);\n                \n                label_0A8E:\n                    var0 = var4;\n                    var4 = 0x00;\n                    var5 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var6 = 0x70a08231;\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                    var temp1 = temp0 + 0x04;\n                    memory[temp1:temp1 + 0x20] = msg.sender;\n                    var7 = temp1 + 0x20;\n                    var8 = 0x20;\n                    var var9 = memory[0x40:0x60];\n                    var var10 = var7 - var9;\n                    var var11 = var9;\n                    var var12 = 0x00;\n                    var var13 = var5;\n                    var var14 = !address(var13).code.length;\n                \n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                    var temp2;\n                    temp2, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n                    var8 = !temp2;\n                \n                    if (!var8) {\n                        var5 = memory[0x40:0x60];\n                        var6 = returndata.length;\n                    \n                        if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        if (memory[var5:var5 + 0x20] != var4) {\n                            var4 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var5 = 0x9478a7c9;\n                            var temp3 = memory[0x40:0x60];\n                            memory[temp3:temp3 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                            var temp4 = temp3 + 0x04;\n                            memory[temp4:temp4 + 0x20] = msg.sender;\n                            var6 = temp4 + 0x20;\n                            var7 = 0x20;\n                            var8 = memory[0x40:0x60];\n                            var9 = var6 - var8;\n                            var10 = var8;\n                            var11 = 0x00;\n                            var12 = var4;\n                            var13 = !address(var12).code.length;\n                        \n                            if (var13) { revert(memory[0x00:0x00]); }\n                        \n                        label_0C60:\n                            var temp5;\n                            temp5, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                            var7 = !temp5;\n                        \n                            if (!var7) {\n                                var4 = memory[0x40:0x60];\n                                var5 = returndata.length;\n                            \n                                if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                            \n                                var1 = memory[var4:var4 + 0x20];\n                                var2 = 0x00;\n                            \n                                if (msg.value < 0x1bc16d674ec80000) {\n                                label_0CBE:\n                                    var4 = 0x0cd3;\n                                    var5 = storage[0x0a];\n                                    var6 = msg.value;\n                                    var4 = func_1C37(var5, var6);\n                                    storage[0x0a] = var4;\n                                    var4 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    var5 = 0xa9059cbb;\n                                    var temp6 = memory[0x40:0x60];\n                                    memory[temp6:temp6 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                                    var temp7 = temp6 + 0x04;\n                                    memory[temp7:temp7 + 0x20] = msg.sender;\n                                    var temp8 = temp7 + 0x20;\n                                    memory[temp8:temp8 + 0x20] = var0;\n                                    var6 = temp8 + 0x20;\n                                    var7 = 0x20;\n                                    var8 = memory[0x40:0x60];\n                                    var9 = var6 - var8;\n                                    var10 = var8;\n                                    var11 = 0x00;\n                                    var12 = var4;\n                                    var13 = !address(var12).code.length;\n                                \n                                    if (var13) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp9;\n                                    temp9, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                                    var7 = !temp9;\n                                \n                                    if (!var7) {\n                                        var4 = memory[0x40:0x60];\n                                        var5 = returndata.length;\n                                    \n                                        if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                                    \n                                        var4 = 0x0def;\n                                        var5 = storage[0x0b];\n                                        var6 = var0;\n                                        var4 = func_1C37(var5, var6);\n                                        var3 = var4;\n                                        var4 = var2 > 0x00;\n                                    \n                                        if (!var4) {\n                                            if (!var4) {\n                                            label_0E33:\n                                                storage[0x0b] = var3;\n                                                var4 = 0x0e8c;\n                                                memory[0x00:0x20] = msg.sender;\n                                                memory[0x20:0x40] = 0x12;\n                                                var5 = storage[keccak256(memory[0x00:0x40])];\n                                                var6 = msg.value;\n                                                var4 = func_1C37(var5, var6);\n                                                memory[0x00:0x20] = msg.sender;\n                                                memory[0x20:0x40] = 0x12;\n                                                storage[keccak256(memory[0x00:0x40])] = var4;\n                                                var temp10 = memory[0x40:0x60];\n                                                memory[temp10:temp10 + 0x20] = var0;\n                                                var temp11 = temp10 + 0x20;\n                                                memory[temp11:temp11 + 0x20] = msg.value;\n                                                var temp12 = memory[0x40:0x60];\n                                                log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0x16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b8, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                                var4 = var2 > 0x00;\n                                            \n                                                if (!var4) {\n                                                    if (!var4) {\n                                                    label_10B8:\n                                                        return;\n                                                    } else {\n                                                    label_0F52:\n                                                        var4 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                        var5 = 0xa9059cbb;\n                                                        var temp13 = memory[0x40:0x60];\n                                                        memory[temp13:temp13 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                                                        var temp14 = temp13 + 0x04;\n                                                        memory[temp14:temp14 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                        var temp15 = temp14 + 0x20;\n                                                        memory[temp15:temp15 + 0x20] = var2;\n                                                        var6 = temp15 + 0x20;\n                                                        var7 = 0x20;\n                                                        var8 = memory[0x40:0x60];\n                                                        var9 = var6 - var8;\n                                                        var10 = var8;\n                                                        var11 = 0x00;\n                                                        var12 = var4;\n                                                        var13 = !address(var12).code.length;\n                                                    \n                                                        if (var13) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp16;\n                                                        temp16, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                                                        var7 = !temp16;\n                                                    \n                                                        if (!var7) {\n                                                            var4 = memory[0x40:0x60];\n                                                            var5 = returndata.length;\n                                                        \n                                                            if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp17 = memory[0x40:0x60];\n                                                            memory[temp17:temp17 + 0x20] = var2;\n                                                            var temp18 = memory[0x40:0x60];\n                                                            log(memory[temp18:temp18 + (temp17 + 0x20) - temp18], [0x63b1806f17e56a5994496cf87e213450b3ca26912d0a7c2ba0b722a2f822e497, msg.sender, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                                            goto label_10B8;\n                                                        } else {\n                                                            var temp19 = returndata.length;\n                                                            memory[0x00:0x00 + temp19] = returndata[0x00:0x00 + temp19];\n                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                        }\n                                                    }\n                                                } else if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { goto label_10B8; }\n                                                else { goto label_0F52; }\n                                            } else {\n                                            label_0E1E:\n                                                var4 = 0x0e30;\n                                                var5 = var3;\n                                                var6 = var2;\n                                                var4 = func_1C37(var5, var6);\n                                                var3 = var4;\n                                                goto label_0E33;\n                                            }\n                                        } else if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { goto label_0E33; }\n                                        else { goto label_0E1E; }\n                                    } else {\n                                        var temp20 = returndata.length;\n                                        memory[0x00:0x00 + temp20] = returndata[0x00:0x00 + temp20];\n                                        revert(memory[0x00:0x00 + returndata.length]);\n                                    }\n                                } else {\n                                    var4 = 0x0cbb;\n                                    var5 = var0;\n                                    var4 = func_1CAB(var5);\n                                    var2 = var4;\n                                    goto label_0CBE;\n                                }\n                            } else {\n                                var temp21 = returndata.length;\n                                memory[0x00:0x00 + temp21] = returndata[0x00:0x00 + temp21];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                            storage[0x0c] = storage[0x0c] + 0x01;\n                            var4 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var5 = 0x9478a7c9;\n                            var temp22 = memory[0x40:0x60];\n                            memory[temp22:temp22 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                            var temp23 = temp22 + 0x04;\n                            memory[temp23:temp23 + 0x20] = msg.sender;\n                            var6 = temp23 + 0x20;\n                            var7 = 0x20;\n                            var8 = memory[0x40:0x60];\n                            var9 = var6 - var8;\n                            var10 = var8;\n                            var11 = 0x00;\n                            var12 = var4;\n                            var13 = !address(var12).code.length;\n                        \n                            if (!var13) { goto label_0C60; }\n                            else { revert(memory[0x00:0x00]); }\n                        }\n                    } else {\n                        var temp24 = returndata.length;\n                        memory[0x00:0x00 + temp24] = returndata[0x00:0x00 + temp24];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    storage[0x10] = (storage[0x10] & ~0xff) | 0x01;\n                    var temp25 = memory[0x40:0x60];\n                    memory[temp25:temp25 + 0x20] = storage[0x06];\n                    var temp26 = memory[0x40:0x60];\n                    log(memory[temp26:temp26 + (temp25 + 0x20) - temp26], [0x42ef6182c6d744dd081ab962505f40413083376dfcc13e58b60f4f32e9673809]);\n                    var4 = 0x0a8e;\n                    var5 = storage[0x08];\n                    var6 = 0x0a80;\n                    var7 = msg.value;\n                    var8 = storage[0x07];\n                    var6 = func_1C55(var7, var8);\n                    var4 = func_0A80(var5, var6);\n                    goto label_0A8E;\n                }\n            } else {\n            label_09F0:\n                var4 = storage[0x06];\n                var5 = 0x0a08;\n                var6 = storage[0x0a];\n                var7 = msg.value;\n                var5 = func_1C37(var6, var7);\n                var4 = var5 >= var4;\n                goto label_0A0B;\n            }\n        } else if (block.timestamp < storage[0x0f]) { goto label_092F; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09A7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0A80(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x1a;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x44697265637420437279707420546f6b656e2050726553616c65000000000000;\n        return r0;\n    }\n    \n    function softCapReached() returns (var r0) { return storage[0x10] & 0xff; }\n    \n    function endTime() returns (var r0) { return storage[0x0f]; }\n    \n    function beneficiary() returns (var r0) { return storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function ethUsdRate() returns (var r0) { return storage[0x07]; }\n    \n    function withdraw() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x10] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x0a];\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        var var0 = !temp2;\n    \n        if (!var0) {\n            var0 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0xa9059cbb;\n            var var2 = storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var4 = 0x70a08231;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = (var4 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp4 = temp3 + 0x04;\n            memory[temp4:temp4 + 0x20] = address(this);\n            var var5 = temp4 + 0x20;\n            var var6 = 0x20;\n            var var7 = memory[0x40:0x60];\n            var var8 = var5 - var7;\n            var var9 = var7;\n            var var10 = 0x00;\n            var var11 = var3;\n            var var12 = !address(var11).code.length;\n        \n            if (var12) { revert(memory[0x00:0x00]); }\n        \n            var temp5;\n            temp5, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n            var6 = !temp5;\n        \n            if (!var6) {\n                var3 = memory[0x40:0x60];\n                var4 = returndata.length;\n            \n                if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp6 = memory[var3:var3 + 0x20];\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp8 = temp7 + 0x04;\n                memory[temp8:temp8 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp9 = temp8 + 0x20;\n                memory[temp9:temp9 + 0x20] = temp6;\n                var2 = temp9 + 0x20;\n                var3 = 0x20;\n                var4 = memory[0x40:0x60];\n                var5 = var2 - var4;\n                var6 = var4;\n                var7 = 0x00;\n                var8 = var0;\n                var9 = !address(var8).code.length;\n            \n                if (var9) { revert(memory[0x00:0x00]); }\n            \n                var temp10;\n                temp10, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n                var3 = !temp10;\n            \n                if (!var3) {\n                    var0 = memory[0x40:0x60];\n                    var1 = returndata.length;\n                \n                    if (var1 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x10] = (storage[0x10] & ~(0xff * 0x0100 ** 0x01)) | 0x0100 ** 0x01;\n                    return;\n                } else {\n                    var temp11 = returndata.length;\n                    memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp13 = returndata.length;\n            memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function tokensSold() returns (var r0) { return storage[0x0b]; }\n    \n    function tokenPriceUsd() returns (var r0) { return storage[0x08]; }\n    \n    function refund() {\n        var var0 = 0x00;\n    \n        if (block.timestamp < storage[0x0f]) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!!(storage[0x10] & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x11;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x12;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        var var1 = !temp2;\n    \n        if (!var1) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x12;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x11;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n            var1 = 0x165b;\n            var var2 = storage[0x0d];\n            var var3 = var0;\n            var1 = func_1C37(var2, var3);\n            storage[0x0d] = var1;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var0;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651, msg.sender]);\n            return;\n        } else {\n            var temp6 = returndata.length;\n            memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function weiRefunded() returns (var r0) { return storage[0x0d]; }\n    \n    function halt() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~(0xff * 0x0100 ** 0x14)) | 0x0100 ** 0x14;\n    }\n    \n    function startTime() returns (var r0) { return storage[0x0e]; }\n    \n    function func_1752() returns (var r0) { return 0x1bc16d674ec80000; }\n    \n    function totalTokens() returns (var r0) { return storage[0x09]; }\n    \n    function collected() returns (var r0) { return storage[0x0a]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function softCap() returns (var r0) { return storage[0x06]; }\n    \n    function receiveEthPrice(var arg0) {\n        if (msg.sender != storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = arg0;\n    }\n    \n    function halted() returns (var r0) { return storage[0x00] / 0x0100 ** 0x14 & 0xff; }\n    \n    function deposited(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x12;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function unhalt() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x00] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~(0xff * 0x0100 ** 0x14)) | 0x00;\n    }\n    \n    function investorCount() returns (var r0) { return storage[0x0c]; }\n    \n    function setNewWhiteList(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function investorWhiteList() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function ethPriceProvider() returns (var r0) { return storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function setEthPriceProvider(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function crowdsaleFinished() returns (var r0) { return storage[0x10] / 0x0100 ** 0x01 & 0xff; }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function hardCap() returns (var r0) { return storage[0x05]; }\n    \n    function token() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_1C37(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1C55(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 != 0x00) {\n            var temp0 = arg0;\n            var1 = temp0 * arg1;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_1C89:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1C89;\n        }\n    }\n    \n    function func_1CAB(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1cd4;\n        var var2 = 0x64;\n        var var3 = 0x1cc6;\n        var var4 = arg0;\n        var var5 = 0x05;\n        var3 = func_1C55(var4, var5);\n        return func_1CC6(var2, var3);\n    }\n    \n    function func_1CC6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0180:\n            var var0 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0xbabcc539;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = msg.sender;\n            var var2 = temp1 + 0x20;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n            var3 = !temp2;\n        \n            if (!var3) {\n                var0 = memory[0x40:0x60];\n                var1 = returndata.length;\n            \n                if (var1 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (!memory[var0:var0 + 0x20]) { revert(memory[0x00:0x00]); }\n            \n                var0 = 0x028c;\n                var1 = msg.sender;\n                func_090B(var1);\n                stop();\n            } else {\n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a3;\n                var2 = name();\n                var temp4 = memory[0x40:0x60];\n                var3 = temp4;\n                var4 = var3;\n                var temp5 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp5 - var4;\n                var temp6 = var2;\n                memory[temp5:temp5 + 0x20] = memory[temp6:temp6 + 0x20];\n                var5 = temp5 + 0x20;\n                var7 = memory[temp6:temp6 + 0x20];\n                var6 = temp6 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_02E3:\n                    var temp7 = var7;\n                    var5 = temp7 + var5;\n                    var6 = temp7 & 0x1f;\n                \n                    if (!var6) {\n                        var temp8 = memory[0x40:0x60];\n                        return memory[temp8:temp8 + var5 - temp8];\n                    } else {\n                        var temp9 = var6;\n                        var temp10 = var5 - temp9;\n                        memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                        var temp11 = memory[0x40:0x60];\n                        return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n                    }\n                } else {\n                label_02D1:\n                    var temp12 = var11;\n                    memory[var9 + temp12:var9 + temp12 + 0x20] = memory[var10 + temp12:var10 + temp12 + 0x20];\n                    var11 = temp12 + 0x20;\n                \n                    if (var11 >= var8) { goto label_02E3; }\n                    else { goto label_02D1; }\n                }\n            } else if (var0 == 0x2b9edee9) {\n                // Dispatch table entry for softCapReached()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0333;\n                var2 = softCapReached();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var2;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x3197cbb6) {\n                // Dispatch table entry for endTime()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0362;\n                var2 = endTime();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x38af3eed) {\n                // Dispatch table entry for beneficiary()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038d;\n                var2 = beneficiary();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x3b478fc5) {\n                // Dispatch table entry for ethUsdRate()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e4;\n                var2 = ethUsdRate();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040f;\n                withdraw();\n                stop();\n            } else if (var0 == 0x518ab2a8) {\n                // Dispatch table entry for tokensSold()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0426;\n                var2 = tokensSold();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x5249be25) {\n                // Dispatch table entry for tokenPriceUsd()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0451;\n                var2 = tokenPriceUsd();\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047c;\n                refund();\n                stop();\n            } else if (var0 == 0x5da89ac0) {\n                // Dispatch table entry for weiRefunded()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0493;\n                var2 = weiRefunded();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var2;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x5ed7ca5b) {\n                // Dispatch table entry for halt()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04be;\n                halt();\n                stop();\n            } else if (var0 == 0x78e97925) {\n                // Dispatch table entry for startTime()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04d5;\n                var2 = startTime();\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var2;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x7dbeb101) {\n                // Dispatch table entry for 0x7dbeb101 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0500;\n                var2 = func_1752();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var2;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x7e1c0c09) {\n                // Dispatch table entry for totalTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x052b;\n                var2 = totalTokens();\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var2;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x84bcefd4) {\n                // Dispatch table entry for collected()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0556;\n                var2 = collected();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var2;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0581;\n                var2 = owner();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x906a26e0) {\n                // Dispatch table entry for softCap()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d8;\n                var2 = softCap();\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = var2;\n                var temp38 = memory[0x40:0x60];\n                return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n            } else if (var0 == 0xa47001a8) {\n                // Dispatch table entry for receiveEthPrice(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0619;\n                var2 = msg.data[0x04:0x24];\n                receiveEthPrice(var2);\n                stop();\n            } else if (var0 == 0xb9b8af0b) {\n                // Dispatch table entry for halted()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0630;\n                var2 = halted();\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = !!var2;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0xcb13cddb) {\n                // Dispatch table entry for deposited(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x068b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = deposited(var2);\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = var2;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0xcb3e64fd) {\n                // Dispatch table entry for unhalt()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06b6;\n                unhalt();\n                stop();\n            } else if (var0 == 0xd7e64c00) {\n                // Dispatch table entry for investorCount()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06cd;\n                var2 = investorCount();\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = var2;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0xdccdc893) {\n                // Dispatch table entry for setNewWhiteList(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0724;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                setNewWhiteList(var2);\n                stop();\n            } else if (var0 == 0xe342c2e6) {\n                // Dispatch table entry for investorWhiteList()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x073b;\n                var2 = investorWhiteList();\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0xe41f7dc1) {\n                // Dispatch table entry for ethPriceProvider()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0792;\n                var2 = ethPriceProvider();\n                var temp47 = memory[0x40:0x60];\n                memory[temp47:temp47 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp48 = memory[0x40:0x60];\n                return memory[temp48:temp48 + (temp47 + 0x20) - temp48];\n            } else if (var0 == 0xe4e9bcca) {\n                // Dispatch table entry for setEthPriceProvider(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0815;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                setEthPriceProvider(var2);\n                stop();\n            } else if (var0 == 0xece84fd5) {\n                // Dispatch table entry for crowdsaleFinished()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x082c;\n                var2 = crowdsaleFinished();\n                var temp49 = memory[0x40:0x60];\n                memory[temp49:temp49 + 0x20] = !!var2;\n                var temp50 = memory[0x40:0x60];\n                return memory[temp50:temp50 + (temp49 + 0x20) - temp50];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0887;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xfb86a404) {\n                // Dispatch table entry for hardCap()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x089e;\n                var2 = hardCap();\n                var temp51 = memory[0x40:0x60];\n                memory[temp51:temp51 + 0x20] = var2;\n                var temp52 = memory[0x40:0x60];\n                return memory[temp52:temp52 + (temp51 + 0x20) - temp52];\n            } else if (var0 == 0xfc0c546a) {\n                // Dispatch table entry for token()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08c9;\n                var2 = token();\n                var temp53 = memory[0x40:0x60];\n                memory[temp53:temp53 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp54 = memory[0x40:0x60];\n                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n            } else { goto label_0180; }\n        }\n    }\n    \n    function func_090B(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = block.timestamp >= storage[0x0e];\n    \n        if (!var4) {\n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_092F:\n        \n            if (storage[0x00] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x10] / 0x0100 ** 0x01 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            var4 = storage[0x05];\n            var var5 = 0x097f;\n            var var6 = storage[0x0a];\n            var var7 = msg.value;\n            var5 = func_1C37(var6, var7);\n        \n            if (var5 > var4) { revert(memory[0x00:0x00]); }\n        \n            var4 = 0x09b5;\n            var5 = storage[0x08];\n            var6 = 0x09a7;\n            var7 = msg.value;\n            var var8 = storage[0x07];\n            var6 = func_1C55(var7, var8);\n            var4 = func_09A7(var5, var6);\n        \n            if (storage[0x09] < storage[0x0b] + var4) { revert(memory[0x00:0x00]); }\n        \n            var4 = !(storage[0x10] & 0xff);\n        \n            if (var4) {\n                var4 = storage[0x0a] < storage[0x06];\n            \n                if (!var4) { goto label_0A0B; }\n                else { goto label_09F0; }\n            } else if (!var4) {\n            label_0A0B:\n            \n                if (!var4) {\n                    var4 = 0x0a8e;\n                    var5 = storage[0x08];\n                    var6 = 0x0a80;\n                    var7 = msg.value;\n                    var8 = storage[0x07];\n                    var6 = func_1C55(var7, var8);\n                    var4 = func_0A80(var5, var6);\n                \n                label_0A8E:\n                    var0 = var4;\n                    var4 = 0x00;\n                    var5 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var6 = 0x70a08231;\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                    var temp1 = temp0 + 0x04;\n                    memory[temp1:temp1 + 0x20] = msg.sender;\n                    var7 = temp1 + 0x20;\n                    var8 = 0x20;\n                    var var9 = memory[0x40:0x60];\n                    var var10 = var7 - var9;\n                    var var11 = var9;\n                    var var12 = 0x00;\n                    var var13 = var5;\n                    var var14 = !address(var13).code.length;\n                \n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                    var temp2;\n                    temp2, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n                    var8 = !temp2;\n                \n                    if (!var8) {\n                        var5 = memory[0x40:0x60];\n                        var6 = returndata.length;\n                    \n                        if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        if (memory[var5:var5 + 0x20] != var4) {\n                            var4 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var5 = 0x9478a7c9;\n                            var temp3 = memory[0x40:0x60];\n                            memory[temp3:temp3 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                            var temp4 = temp3 + 0x04;\n                            memory[temp4:temp4 + 0x20] = msg.sender;\n                            var6 = temp4 + 0x20;\n                            var7 = 0x20;\n                            var8 = memory[0x40:0x60];\n                            var9 = var6 - var8;\n                            var10 = var8;\n                            var11 = 0x00;\n                            var12 = var4;\n                            var13 = !address(var12).code.length;\n                        \n                            if (var13) { revert(memory[0x00:0x00]); }\n                        \n                        label_0C60:\n                            var temp5;\n                            temp5, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                            var7 = !temp5;\n                        \n                            if (!var7) {\n                                var4 = memory[0x40:0x60];\n                                var5 = returndata.length;\n                            \n                                if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                            \n                                var1 = memory[var4:var4 + 0x20];\n                                var2 = 0x00;\n                            \n                                if (msg.value < 0x1bc16d674ec80000) {\n                                label_0CBE:\n                                    var4 = 0x0cd3;\n                                    var5 = storage[0x0a];\n                                    var6 = msg.value;\n                                    var4 = func_1C37(var5, var6);\n                                    storage[0x0a] = var4;\n                                    var4 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    var5 = 0xa9059cbb;\n                                    var temp6 = memory[0x40:0x60];\n                                    memory[temp6:temp6 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                                    var temp7 = temp6 + 0x04;\n                                    memory[temp7:temp7 + 0x20] = msg.sender;\n                                    var temp8 = temp7 + 0x20;\n                                    memory[temp8:temp8 + 0x20] = var0;\n                                    var6 = temp8 + 0x20;\n                                    var7 = 0x20;\n                                    var8 = memory[0x40:0x60];\n                                    var9 = var6 - var8;\n                                    var10 = var8;\n                                    var11 = 0x00;\n                                    var12 = var4;\n                                    var13 = !address(var12).code.length;\n                                \n                                    if (var13) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp9;\n                                    temp9, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                                    var7 = !temp9;\n                                \n                                    if (!var7) {\n                                        var4 = memory[0x40:0x60];\n                                        var5 = returndata.length;\n                                    \n                                        if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                                    \n                                        var4 = 0x0def;\n                                        var5 = storage[0x0b];\n                                        var6 = var0;\n                                        var4 = func_1C37(var5, var6);\n                                        var3 = var4;\n                                        var4 = var2 > 0x00;\n                                    \n                                        if (!var4) {\n                                            if (!var4) {\n                                            label_0E33:\n                                                storage[0x0b] = var3;\n                                                var4 = 0x0e8c;\n                                                memory[0x00:0x20] = msg.sender;\n                                                memory[0x20:0x40] = 0x12;\n                                                var5 = storage[keccak256(memory[0x00:0x40])];\n                                                var6 = msg.value;\n                                                var4 = func_1C37(var5, var6);\n                                                memory[0x00:0x20] = msg.sender;\n                                                memory[0x20:0x40] = 0x12;\n                                                storage[keccak256(memory[0x00:0x40])] = var4;\n                                                var temp10 = memory[0x40:0x60];\n                                                memory[temp10:temp10 + 0x20] = var0;\n                                                var temp11 = temp10 + 0x20;\n                                                memory[temp11:temp11 + 0x20] = msg.value;\n                                                var temp12 = memory[0x40:0x60];\n                                                log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0x16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b8, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                                var4 = var2 > 0x00;\n                                            \n                                                if (!var4) {\n                                                    if (!var4) {\n                                                    label_10B8:\n                                                        return;\n                                                    } else {\n                                                    label_0F52:\n                                                        var4 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                        var5 = 0xa9059cbb;\n                                                        var temp13 = memory[0x40:0x60];\n                                                        memory[temp13:temp13 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                                                        var temp14 = temp13 + 0x04;\n                                                        memory[temp14:temp14 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                        var temp15 = temp14 + 0x20;\n                                                        memory[temp15:temp15 + 0x20] = var2;\n                                                        var6 = temp15 + 0x20;\n                                                        var7 = 0x20;\n                                                        var8 = memory[0x40:0x60];\n                                                        var9 = var6 - var8;\n                                                        var10 = var8;\n                                                        var11 = 0x00;\n                                                        var12 = var4;\n                                                        var13 = !address(var12).code.length;\n                                                    \n                                                        if (var13) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp16;\n                                                        temp16, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                                                        var7 = !temp16;\n                                                    \n                                                        if (!var7) {\n                                                            var4 = memory[0x40:0x60];\n                                                            var5 = returndata.length;\n                                                        \n                                                            if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp17 = memory[0x40:0x60];\n                                                            memory[temp17:temp17 + 0x20] = var2;\n                                                            var temp18 = memory[0x40:0x60];\n                                                            log(memory[temp18:temp18 + (temp17 + 0x20) - temp18], [0x63b1806f17e56a5994496cf87e213450b3ca26912d0a7c2ba0b722a2f822e497, msg.sender, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                                            goto label_10B8;\n                                                        } else {\n                                                            var temp19 = returndata.length;\n                                                            memory[0x00:0x00 + temp19] = returndata[0x00:0x00 + temp19];\n                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                        }\n                                                    }\n                                                } else if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { goto label_10B8; }\n                                                else { goto label_0F52; }\n                                            } else {\n                                            label_0E1E:\n                                                var4 = 0x0e30;\n                                                var5 = var3;\n                                                var6 = var2;\n                                                var4 = func_1C37(var5, var6);\n                                                var3 = var4;\n                                                goto label_0E33;\n                                            }\n                                        } else if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { goto label_0E33; }\n                                        else { goto label_0E1E; }\n                                    } else {\n                                        var temp20 = returndata.length;\n                                        memory[0x00:0x00 + temp20] = returndata[0x00:0x00 + temp20];\n                                        revert(memory[0x00:0x00 + returndata.length]);\n                                    }\n                                } else {\n                                    var4 = 0x0cbb;\n                                    var5 = var0;\n                                    var4 = func_1CAB(var5);\n                                    var2 = var4;\n                                    goto label_0CBE;\n                                }\n                            } else {\n                                var temp21 = returndata.length;\n                                memory[0x00:0x00 + temp21] = returndata[0x00:0x00 + temp21];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                            storage[0x0c] = storage[0x0c] + 0x01;\n                            var4 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var5 = 0x9478a7c9;\n                            var temp22 = memory[0x40:0x60];\n                            memory[temp22:temp22 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                            var temp23 = temp22 + 0x04;\n                            memory[temp23:temp23 + 0x20] = msg.sender;\n                            var6 = temp23 + 0x20;\n                            var7 = 0x20;\n                            var8 = memory[0x40:0x60];\n                            var9 = var6 - var8;\n                            var10 = var8;\n                            var11 = 0x00;\n                            var12 = var4;\n                            var13 = !address(var12).code.length;\n                        \n                            if (!var13) { goto label_0C60; }\n                            else { revert(memory[0x00:0x00]); }\n                        }\n                    } else {\n                        var temp24 = returndata.length;\n                        memory[0x00:0x00 + temp24] = returndata[0x00:0x00 + temp24];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    storage[0x10] = (storage[0x10] & ~0xff) | 0x01;\n                    var temp25 = memory[0x40:0x60];\n                    memory[temp25:temp25 + 0x20] = storage[0x06];\n                    var temp26 = memory[0x40:0x60];\n                    log(memory[temp26:temp26 + (temp25 + 0x20) - temp26], [0x42ef6182c6d744dd081ab962505f40413083376dfcc13e58b60f4f32e9673809]);\n                    var4 = 0x0a8e;\n                    var5 = storage[0x08];\n                    var6 = 0x0a80;\n                    var7 = msg.value;\n                    var8 = storage[0x07];\n                    var6 = func_1C55(var7, var8);\n                    var4 = func_0A80(var5, var6);\n                    goto label_0A8E;\n                }\n            } else {\n            label_09F0:\n                var4 = storage[0x06];\n                var5 = 0x0a08;\n                var6 = storage[0x0a];\n                var7 = msg.value;\n                var5 = func_1C37(var6, var7);\n                var4 = var5 >= var4;\n                goto label_0A0B;\n            }\n        } else if (block.timestamp < storage[0x0f]) { goto label_092F; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09A7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0A80(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x1a;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x44697265637420437279707420546f6b656e2050726553616c65000000000000;\n        return r0;\n    }\n    \n    function softCapReached() returns (var r0) { return storage[0x10] & 0xff; }\n    \n    function endTime() returns (var r0) { return storage[0x0f]; }\n    \n    function beneficiary() returns (var r0) { return storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function ethUsdRate() returns (var r0) { return storage[0x07]; }\n    \n    function withdraw() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x10] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x0a];\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        var var0 = !temp2;\n    \n        if (!var0) {\n            var0 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0xa9059cbb;\n            var var2 = storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var4 = 0x70a08231;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = (var4 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp4 = temp3 + 0x04;\n            memory[temp4:temp4 + 0x20] = address(this);\n            var var5 = temp4 + 0x20;\n            var var6 = 0x20;\n            var var7 = memory[0x40:0x60];\n            var var8 = var5 - var7;\n            var var9 = var7;\n            var var10 = 0x00;\n            var var11 = var3;\n            var var12 = !address(var11).code.length;\n        \n            if (var12) { revert(memory[0x00:0x00]); }\n        \n            var temp5;\n            temp5, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n            var6 = !temp5;\n        \n            if (!var6) {\n                var3 = memory[0x40:0x60];\n                var4 = returndata.length;\n            \n                if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp6 = memory[var3:var3 + 0x20];\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp8 = temp7 + 0x04;\n                memory[temp8:temp8 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp9 = temp8 + 0x20;\n                memory[temp9:temp9 + 0x20] = temp6;\n                var2 = temp9 + 0x20;\n                var3 = 0x20;\n                var4 = memory[0x40:0x60];\n                var5 = var2 - var4;\n                var6 = var4;\n                var7 = 0x00;\n                var8 = var0;\n                var9 = !address(var8).code.length;\n            \n                if (var9) { revert(memory[0x00:0x00]); }\n            \n                var temp10;\n                temp10, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n                var3 = !temp10;\n            \n                if (!var3) {\n                    var0 = memory[0x40:0x60];\n                    var1 = returndata.length;\n                \n                    if (var1 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x10] = (storage[0x10] & ~(0xff * 0x0100 ** 0x01)) | 0x0100 ** 0x01;\n                    return;\n                } else {\n                    var temp11 = returndata.length;\n                    memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp13 = returndata.length;\n            memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function tokensSold() returns (var r0) { return storage[0x0b]; }\n    \n    function tokenPriceUsd() returns (var r0) { return storage[0x08]; }\n    \n    function refund() {\n        var var0 = 0x00;\n    \n        if (block.timestamp < storage[0x0f]) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!!(storage[0x10] & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x11;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x12;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        var var1 = !temp2;\n    \n        if (!var1) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x12;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x11;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n            var1 = 0x165b;\n            var var2 = storage[0x0d];\n            var var3 = var0;\n            var1 = func_1C37(var2, var3);\n            storage[0x0d] = var1;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var0;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651, msg.sender]);\n            return;\n        } else {\n            var temp6 = returndata.length;\n            memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function weiRefunded() returns (var r0) { return storage[0x0d]; }\n    \n    function halt() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~(0xff * 0x0100 ** 0x14)) | 0x0100 ** 0x14;\n    }\n    \n    function startTime() returns (var r0) { return storage[0x0e]; }\n    \n    function func_1752() returns (var r0) { return 0x1bc16d674ec80000; }\n    \n    function totalTokens() returns (var r0) { return storage[0x09]; }\n    \n    function collected() returns (var r0) { return storage[0x0a]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function softCap() returns (var r0) { return storage[0x06]; }\n    \n    function receiveEthPrice(var arg0) {\n        if (msg.sender != storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = arg0;\n    }\n    \n    function halted() returns (var r0) { return storage[0x00] / 0x0100 ** 0x14 & 0xff; }\n    \n    function deposited(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x12;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function unhalt() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x00] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~(0xff * 0x0100 ** 0x14)) | 0x00;\n    }\n    \n    function investorCount() returns (var r0) { return storage[0x0c]; }\n    \n    function setNewWhiteList(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function investorWhiteList() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function ethPriceProvider() returns (var r0) { return storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function setEthPriceProvider(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function crowdsaleFinished() returns (var r0) { return storage[0x10] / 0x0100 ** 0x01 & 0xff; }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function hardCap() returns (var r0) { return storage[0x05]; }\n    \n    function token() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_1C37(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1C55(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 != 0x00) {\n            var temp0 = arg0;\n            var1 = temp0 * arg1;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_1C89:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1C89;\n        }\n    }\n    \n    function func_1CAB(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1cd4;\n        var var2 = 0x64;\n        var var3 = 0x1cc6;\n        var var4 = arg0;\n        var var5 = 0x05;\n        var3 = func_1C55(var4, var5);\n        return func_1CC6(var2, var3);\n    }\n    \n    function func_1CC6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0180:\n            var var0 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0xbabcc539;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = msg.sender;\n            var var2 = temp1 + 0x20;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n            var3 = !temp2;\n        \n            if (!var3) {\n                var0 = memory[0x40:0x60];\n                var1 = returndata.length;\n            \n                if (var1 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (!memory[var0:var0 + 0x20]) { revert(memory[0x00:0x00]); }\n            \n                var0 = 0x028c;\n                var1 = msg.sender;\n                func_090B(var1);\n                stop();\n            } else {\n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a3;\n                var2 = name();\n                var temp4 = memory[0x40:0x60];\n                var3 = temp4;\n                var4 = var3;\n                var temp5 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp5 - var4;\n                var temp6 = var2;\n                memory[temp5:temp5 + 0x20] = memory[temp6:temp6 + 0x20];\n                var5 = temp5 + 0x20;\n                var7 = memory[temp6:temp6 + 0x20];\n                var6 = temp6 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_02E3:\n                    var temp7 = var7;\n                    var5 = temp7 + var5;\n                    var6 = temp7 & 0x1f;\n                \n                    if (!var6) {\n                        var temp8 = memory[0x40:0x60];\n                        return memory[temp8:temp8 + var5 - temp8];\n                    } else {\n                        var temp9 = var6;\n                        var temp10 = var5 - temp9;\n                        memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                        var temp11 = memory[0x40:0x60];\n                        return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n                    }\n                } else {\n                label_02D1:\n                    var temp12 = var11;\n                    memory[var9 + temp12:var9 + temp12 + 0x20] = memory[var10 + temp12:var10 + temp12 + 0x20];\n                    var11 = temp12 + 0x20;\n                \n                    if (var11 >= var8) { goto label_02E3; }\n                    else { goto label_02D1; }\n                }\n            } else if (var0 == 0x2b9edee9) {\n                // Dispatch table entry for softCapReached()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0333;\n                var2 = softCapReached();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var2;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x3197cbb6) {\n                // Dispatch table entry for endTime()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0362;\n                var2 = endTime();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x38af3eed) {\n                // Dispatch table entry for beneficiary()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038d;\n                var2 = beneficiary();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x3b478fc5) {\n                // Dispatch table entry for ethUsdRate()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e4;\n                var2 = ethUsdRate();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x040f;\n                withdraw();\n                stop();\n            } else if (var0 == 0x518ab2a8) {\n                // Dispatch table entry for tokensSold()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0426;\n                var2 = tokensSold();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x5249be25) {\n                // Dispatch table entry for tokenPriceUsd()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0451;\n                var2 = tokenPriceUsd();\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x047c;\n                refund();\n                stop();\n            } else if (var0 == 0x5da89ac0) {\n                // Dispatch table entry for weiRefunded()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0493;\n                var2 = weiRefunded();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = var2;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x5ed7ca5b) {\n                // Dispatch table entry for halt()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04be;\n                halt();\n                stop();\n            } else if (var0 == 0x78e97925) {\n                // Dispatch table entry for startTime()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04d5;\n                var2 = startTime();\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var2;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x7dbeb101) {\n                // Dispatch table entry for 0x7dbeb101 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0500;\n                var2 = func_1752();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var2;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x7e1c0c09) {\n                // Dispatch table entry for totalTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x052b;\n                var2 = totalTokens();\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var2;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x84bcefd4) {\n                // Dispatch table entry for collected()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0556;\n                var2 = collected();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var2;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0581;\n                var2 = owner();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x906a26e0) {\n                // Dispatch table entry for softCap()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d8;\n                var2 = softCap();\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = var2;\n                var temp38 = memory[0x40:0x60];\n                return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n            } else if (var0 == 0xa47001a8) {\n                // Dispatch table entry for receiveEthPrice(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0619;\n                var2 = msg.data[0x04:0x24];\n                receiveEthPrice(var2);\n                stop();\n            } else if (var0 == 0xb9b8af0b) {\n                // Dispatch table entry for halted()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0630;\n                var2 = halted();\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = !!var2;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0xcb13cddb) {\n                // Dispatch table entry for deposited(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x068b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = deposited(var2);\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = var2;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0xcb3e64fd) {\n                // Dispatch table entry for unhalt()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06b6;\n                unhalt();\n                stop();\n            } else if (var0 == 0xd7e64c00) {\n                // Dispatch table entry for investorCount()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06cd;\n                var2 = investorCount();\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = var2;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0xdccdc893) {\n                // Dispatch table entry for setNewWhiteList(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0724;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                setNewWhiteList(var2);\n                stop();\n            } else if (var0 == 0xe342c2e6) {\n                // Dispatch table entry for investorWhiteList()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x073b;\n                var2 = investorWhiteList();\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0xe41f7dc1) {\n                // Dispatch table entry for ethPriceProvider()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0792;\n                var2 = ethPriceProvider();\n                var temp47 = memory[0x40:0x60];\n                memory[temp47:temp47 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp48 = memory[0x40:0x60];\n                return memory[temp48:temp48 + (temp47 + 0x20) - temp48];\n            } else if (var0 == 0xe4e9bcca) {\n                // Dispatch table entry for setEthPriceProvider(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0815;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                setEthPriceProvider(var2);\n                stop();\n            } else if (var0 == 0xece84fd5) {\n                // Dispatch table entry for crowdsaleFinished()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x082c;\n                var2 = crowdsaleFinished();\n                var temp49 = memory[0x40:0x60];\n                memory[temp49:temp49 + 0x20] = !!var2;\n                var temp50 = memory[0x40:0x60];\n                return memory[temp50:temp50 + (temp49 + 0x20) - temp50];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0887;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xfb86a404) {\n                // Dispatch table entry for hardCap()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x089e;\n                var2 = hardCap();\n                var temp51 = memory[0x40:0x60];\n                memory[temp51:temp51 + 0x20] = var2;\n                var temp52 = memory[0x40:0x60];\n                return memory[temp52:temp52 + (temp51 + 0x20) - temp52];\n            } else if (var0 == 0xfc0c546a) {\n                // Dispatch table entry for token()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08c9;\n                var2 = token();\n                var temp53 = memory[0x40:0x60];\n                memory[temp53:temp53 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp54 = memory[0x40:0x60];\n                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n            } else { goto label_0180; }\n        }\n    }\n    \n    function func_090B(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = block.timestamp >= storage[0x0e];\n    \n        if (!var4) {\n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_092F:\n        \n            if (storage[0x00] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x10] / 0x0100 ** 0x01 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            var4 = storage[0x05];\n            var var5 = 0x097f;\n            var var6 = storage[0x0a];\n            var var7 = msg.value;\n            var5 = func_1C37(var6, var7);\n        \n            if (var5 > var4) { revert(memory[0x00:0x00]); }\n        \n            var4 = 0x09b5;\n            var5 = storage[0x08];\n            var6 = 0x09a7;\n            var7 = msg.value;\n            var var8 = storage[0x07];\n            var6 = func_1C55(var7, var8);\n            var4 = func_09A7(var5, var6);\n        \n            if (storage[0x09] < storage[0x0b] + var4) { revert(memory[0x00:0x00]); }\n        \n            var4 = !(storage[0x10] & 0xff);\n        \n            if (var4) {\n                var4 = storage[0x0a] < storage[0x06];\n            \n                if (!var4) { goto label_0A0B; }\n                else { goto label_09F0; }\n            } else if (!var4) {\n            label_0A0B:\n            \n                if (!var4) {\n                    var4 = 0x0a8e;\n                    var5 = storage[0x08];\n                    var6 = 0x0a80;\n                    var7 = msg.value;\n                    var8 = storage[0x07];\n                    var6 = func_1C55(var7, var8);\n                    var4 = func_0A80(var5, var6);\n                \n                label_0A8E:\n                    var0 = var4;\n                    var4 = 0x00;\n                    var5 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var6 = 0x70a08231;\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                    var temp1 = temp0 + 0x04;\n                    memory[temp1:temp1 + 0x20] = msg.sender;\n                    var7 = temp1 + 0x20;\n                    var8 = 0x20;\n                    var var9 = memory[0x40:0x60];\n                    var var10 = var7 - var9;\n                    var var11 = var9;\n                    var var12 = 0x00;\n                    var var13 = var5;\n                    var var14 = !address(var13).code.length;\n                \n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                    var temp2;\n                    temp2, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n                    var8 = !temp2;\n                \n                    if (!var8) {\n                        var5 = memory[0x40:0x60];\n                        var6 = returndata.length;\n                    \n                        if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        if (memory[var5:var5 + 0x20] != var4) {\n                            var4 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var5 = 0x9478a7c9;\n                            var temp3 = memory[0x40:0x60];\n                            memory[temp3:temp3 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                            var temp4 = temp3 + 0x04;\n                            memory[temp4:temp4 + 0x20] = msg.sender;\n                            var6 = temp4 + 0x20;\n                            var7 = 0x20;\n                            var8 = memory[0x40:0x60];\n                            var9 = var6 - var8;\n                            var10 = var8;\n                            var11 = 0x00;\n                            var12 = var4;\n                            var13 = !address(var12).code.length;\n                        \n                            if (var13) { revert(memory[0x00:0x00]); }\n                        \n                        label_0C60:\n                            var temp5;\n                            temp5, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                            var7 = !temp5;\n                        \n                            if (!var7) {\n                                var4 = memory[0x40:0x60];\n                                var5 = returndata.length;\n                            \n                                if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                            \n                                var1 = memory[var4:var4 + 0x20];\n                                var2 = 0x00;\n                            \n                                if (msg.value < 0x1bc16d674ec80000) {\n                                label_0CBE:\n                                    var4 = 0x0cd3;\n                                    var5 = storage[0x0a];\n                                    var6 = msg.value;\n                                    var4 = func_1C37(var5, var6);\n                                    storage[0x0a] = var4;\n                                    var4 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                                    var5 = 0xa9059cbb;\n                                    var temp6 = memory[0x40:0x60];\n                                    memory[temp6:temp6 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                                    var temp7 = temp6 + 0x04;\n                                    memory[temp7:temp7 + 0x20] = msg.sender;\n                                    var temp8 = temp7 + 0x20;\n                                    memory[temp8:temp8 + 0x20] = var0;\n                                    var6 = temp8 + 0x20;\n                                    var7 = 0x20;\n                                    var8 = memory[0x40:0x60];\n                                    var9 = var6 - var8;\n                                    var10 = var8;\n                                    var11 = 0x00;\n                                    var12 = var4;\n                                    var13 = !address(var12).code.length;\n                                \n                                    if (var13) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp9;\n                                    temp9, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                                    var7 = !temp9;\n                                \n                                    if (!var7) {\n                                        var4 = memory[0x40:0x60];\n                                        var5 = returndata.length;\n                                    \n                                        if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                                    \n                                        var4 = 0x0def;\n                                        var5 = storage[0x0b];\n                                        var6 = var0;\n                                        var4 = func_1C37(var5, var6);\n                                        var3 = var4;\n                                        var4 = var2 > 0x00;\n                                    \n                                        if (!var4) {\n                                            if (!var4) {\n                                            label_0E33:\n                                                storage[0x0b] = var3;\n                                                var4 = 0x0e8c;\n                                                memory[0x00:0x20] = msg.sender;\n                                                memory[0x20:0x40] = 0x12;\n                                                var5 = storage[keccak256(memory[0x00:0x40])];\n                                                var6 = msg.value;\n                                                var4 = func_1C37(var5, var6);\n                                                memory[0x00:0x20] = msg.sender;\n                                                memory[0x20:0x40] = 0x12;\n                                                storage[keccak256(memory[0x00:0x40])] = var4;\n                                                var temp10 = memory[0x40:0x60];\n                                                memory[temp10:temp10 + 0x20] = var0;\n                                                var temp11 = temp10 + 0x20;\n                                                memory[temp11:temp11 + 0x20] = msg.value;\n                                                var temp12 = memory[0x40:0x60];\n                                                log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0x16d99cb06fd9528f88184dd0483174a09cfd8312c28639858734b0c449cc05b8, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                                var4 = var2 > 0x00;\n                                            \n                                                if (!var4) {\n                                                    if (!var4) {\n                                                    label_10B8:\n                                                        return;\n                                                    } else {\n                                                    label_0F52:\n                                                        var4 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                        var5 = 0xa9059cbb;\n                                                        var temp13 = memory[0x40:0x60];\n                                                        memory[temp13:temp13 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                                                        var temp14 = temp13 + 0x04;\n                                                        memory[temp14:temp14 + 0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                        var temp15 = temp14 + 0x20;\n                                                        memory[temp15:temp15 + 0x20] = var2;\n                                                        var6 = temp15 + 0x20;\n                                                        var7 = 0x20;\n                                                        var8 = memory[0x40:0x60];\n                                                        var9 = var6 - var8;\n                                                        var10 = var8;\n                                                        var11 = 0x00;\n                                                        var12 = var4;\n                                                        var13 = !address(var12).code.length;\n                                                    \n                                                        if (var13) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var temp16;\n                                                        temp16, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                                                        var7 = !temp16;\n                                                    \n                                                        if (!var7) {\n                                                            var4 = memory[0x40:0x60];\n                                                            var5 = returndata.length;\n                                                        \n                                                            if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                                                        \n                                                            var temp17 = memory[0x40:0x60];\n                                                            memory[temp17:temp17 + 0x20] = var2;\n                                                            var temp18 = memory[0x40:0x60];\n                                                            log(memory[temp18:temp18 + (temp17 + 0x20) - temp18], [0x63b1806f17e56a5994496cf87e213450b3ca26912d0a7c2ba0b722a2f822e497, msg.sender, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                                            goto label_10B8;\n                                                        } else {\n                                                            var temp19 = returndata.length;\n                                                            memory[0x00:0x00 + temp19] = returndata[0x00:0x00 + temp19];\n                                                            revert(memory[0x00:0x00 + returndata.length]);\n                                                        }\n                                                    }\n                                                } else if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { goto label_10B8; }\n                                                else { goto label_0F52; }\n                                            } else {\n                                            label_0E1E:\n                                                var4 = 0x0e30;\n                                                var5 = var3;\n                                                var6 = var2;\n                                                var4 = func_1C37(var5, var6);\n                                                var3 = var4;\n                                                goto label_0E33;\n                                            }\n                                        } else if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { goto label_0E33; }\n                                        else { goto label_0E1E; }\n                                    } else {\n                                        var temp20 = returndata.length;\n                                        memory[0x00:0x00 + temp20] = returndata[0x00:0x00 + temp20];\n                                        revert(memory[0x00:0x00 + returndata.length]);\n                                    }\n                                } else {\n                                    var4 = 0x0cbb;\n                                    var5 = var0;\n                                    var4 = func_1CAB(var5);\n                                    var2 = var4;\n                                    goto label_0CBE;\n                                }\n                            } else {\n                                var temp21 = returndata.length;\n                                memory[0x00:0x00 + temp21] = returndata[0x00:0x00 + temp21];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                            storage[0x0c] = storage[0x0c] + 0x01;\n                            var4 = storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var5 = 0x9478a7c9;\n                            var temp22 = memory[0x40:0x60];\n                            memory[temp22:temp22 + 0x20] = (var5 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                            var temp23 = temp22 + 0x04;\n                            memory[temp23:temp23 + 0x20] = msg.sender;\n                            var6 = temp23 + 0x20;\n                            var7 = 0x20;\n                            var8 = memory[0x40:0x60];\n                            var9 = var6 - var8;\n                            var10 = var8;\n                            var11 = 0x00;\n                            var12 = var4;\n                            var13 = !address(var12).code.length;\n                        \n                            if (!var13) { goto label_0C60; }\n                            else { revert(memory[0x00:0x00]); }\n                        }\n                    } else {\n                        var temp24 = returndata.length;\n                        memory[0x00:0x00 + temp24] = returndata[0x00:0x00 + temp24];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    storage[0x10] = (storage[0x10] & ~0xff) | 0x01;\n                    var temp25 = memory[0x40:0x60];\n                    memory[temp25:temp25 + 0x20] = storage[0x06];\n                    var temp26 = memory[0x40:0x60];\n                    log(memory[temp26:temp26 + (temp25 + 0x20) - temp26], [0x42ef6182c6d744dd081ab962505f40413083376dfcc13e58b60f4f32e9673809]);\n                    var4 = 0x0a8e;\n                    var5 = storage[0x08];\n                    var6 = 0x0a80;\n                    var7 = msg.value;\n                    var8 = storage[0x07];\n                    var6 = func_1C55(var7, var8);\n                    var4 = func_0A80(var5, var6);\n                    goto label_0A8E;\n                }\n            } else {\n            label_09F0:\n                var4 = storage[0x06];\n                var5 = 0x0a08;\n                var6 = storage[0x0a];\n                var7 = msg.value;\n                var5 = func_1C37(var6, var7);\n                var4 = var5 >= var4;\n                goto label_0A0B;\n            }\n        } else if (block.timestamp < storage[0x0f]) { goto label_092F; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09A7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0A80(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x1a;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x44697265637420437279707420546f6b656e2050726553616c65000000000000;\n        return r0;\n    }\n    \n    function softCapReached() returns (var r0) { return storage[0x10] & 0xff; }\n    \n    function endTime() returns (var r0) { return storage[0x0f]; }\n    \n    function beneficiary() returns (var r0) { return storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function ethUsdRate() returns (var r0) { return storage[0x07]; }\n    \n    function withdraw() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x10] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x0a];\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        var var0 = !temp2;\n    \n        if (!var0) {\n            var0 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0xa9059cbb;\n            var var2 = storage[0x04] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var4 = 0x70a08231;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = (var4 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp4 = temp3 + 0x04;\n            memory[temp4:temp4 + 0x20] = address(this);\n            var var5 = temp4 + 0x20;\n            var var6 = 0x20;\n            var var7 = memory[0x40:0x60];\n            var var8 = var5 - var7;\n            var var9 = var7;\n            var var10 = 0x00;\n            var var11 = var3;\n            var var12 = !address(var11).code.length;\n        \n            if (var12) { revert(memory[0x00:0x00]); }\n        \n            var temp5;\n            temp5, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n            var6 = !temp5;\n        \n            if (!var6) {\n                var3 = memory[0x40:0x60];\n                var4 = returndata.length;\n            \n                if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp6 = memory[var3:var3 + 0x20];\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp8 = temp7 + 0x04;\n                memory[temp8:temp8 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp9 = temp8 + 0x20;\n                memory[temp9:temp9 + 0x20] = temp6;\n                var2 = temp9 + 0x20;\n                var3 = 0x20;\n                var4 = memory[0x40:0x60];\n                var5 = var2 - var4;\n                var6 = var4;\n                var7 = 0x00;\n                var8 = var0;\n                var9 = !address(var8).code.length;\n            \n                if (var9) { revert(memory[0x00:0x00]); }\n            \n                var temp10;\n                temp10, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n                var3 = !temp10;\n            \n                if (!var3) {\n                    var0 = memory[0x40:0x60];\n                    var1 = returndata.length;\n                \n                    if (var1 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x10] = (storage[0x10] & ~(0xff * 0x0100 ** 0x01)) | 0x0100 ** 0x01;\n                    return;\n                } else {\n                    var temp11 = returndata.length;\n                    memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp13 = returndata.length;\n            memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function tokensSold() returns (var r0) { return storage[0x0b]; }\n    \n    function tokenPriceUsd() returns (var r0) { return storage[0x08]; }\n    \n    function refund() {\n        var var0 = 0x00;\n    \n        if (block.timestamp < storage[0x0f]) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (!!(storage[0x10] & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x11;\n    \n        if (!!(storage[keccak256(memory[0x00:0x40])] & 0xff) != !!0x00) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x12;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        var var1 = !temp2;\n    \n        if (!var1) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x12;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x11;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n            var1 = 0x165b;\n            var var2 = storage[0x0d];\n            var var3 = var0;\n            var1 = func_1C37(var2, var3);\n            storage[0x0d] = var1;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var0;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xd7dee2702d63ad89917b6a4da9981c90c4d24f8c2bdfd64c604ecae57d8d0651, msg.sender]);\n            return;\n        } else {\n            var temp6 = returndata.length;\n            memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function weiRefunded() returns (var r0) { return storage[0x0d]; }\n    \n    function halt() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~(0xff * 0x0100 ** 0x14)) | 0x0100 ** 0x14;\n    }\n    \n    function startTime() returns (var r0) { return storage[0x0e]; }\n    \n    function func_1752() returns (var r0) { return 0x1bc16d674ec80000; }\n    \n    function totalTokens() returns (var r0) { return storage[0x09]; }\n    \n    function collected() returns (var r0) { return storage[0x0a]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function softCap() returns (var r0) { return storage[0x06]; }\n    \n    function receiveEthPrice(var arg0) {\n        if (msg.sender != storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = arg0;\n    }\n    \n    function halted() returns (var r0) { return storage[0x00] / 0x0100 ** 0x14 & 0xff; }\n    \n    function deposited(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x12;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function unhalt() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x00] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~(0xff * 0x0100 ** 0x14)) | 0x00;\n    }\n    \n    function investorCount() returns (var r0) { return storage[0x0c]; }\n    \n    function setNewWhiteList(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function investorWhiteList() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function ethPriceProvider() returns (var r0) { return storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function setEthPriceProvider(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function crowdsaleFinished() returns (var r0) { return storage[0x10] / 0x0100 ** 0x01 & 0xff; }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function hardCap() returns (var r0) { return storage[0x05]; }\n    \n    function token() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_1C37(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1C55(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 != 0x00) {\n            var temp0 = arg0;\n            var1 = temp0 * arg1;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_1C89:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1C89;\n        }\n    }\n    \n    function func_1CAB(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1cd4;\n        var var2 = 0x64;\n        var var3 = 0x1cc6;\n        var var4 = arg0;\n        var var5 = 0x05;\n        var3 = func_1C55(var4, var5);\n        return func_1CC6(var2, var3);\n    }\n    \n    function func_1CC6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 60.903834104537964,
	"usage": {
		"completion_tokens": 729,
		"prompt_tokens": 12761,
		"total_tokens": 13490
	}
}