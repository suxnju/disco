{
	"address": "0xc0829421c1d260bd3cb3e0f06cfe2d52db2ce315",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The decompiled code you've provided is quite complex and covers a wide range of functions, such as token creation, balance management, transfer functions, and more. Below is a simplified Solidity code version that demonstrates the same functionalities:\n\n```\npragma solidity ^0.5.0;\n\ncontract Token {\n    mapping(address => uint256) private _balances;\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    address public owner;\n    address public newOwner;\n\n    constructor() public {\n        name = \"Token\";\n        symbol = \"TKN\";\n        decimals = 18;\n        totalSupply = 1000000;\n        owner = msg.sender;\n        _balances[owner] = totalSupply;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        require(_balances[msg.sender] >= amount, \"Insufficient balance\");\n        _balances[msg.sender] -= amount;\n        _balances[recipient] += amount;\n        return true;\n    }\n\n    function approve(address spender, uint256 amount) public returns (bool) {\n        _allowances[msg.sender][spender] = amount;\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        require(_balances[sender] >= amount, \"Insufficient balance\");\n        require(_allowances[sender][msg.sender] >= amount, \"Insufficient allowance\");\n\n        _balances[sender] -= amount;\n        _balances[recipient] += amount;\n        _allowances[sender][msg.sender] -= amount;\n\n        return true;\n    }\n\n    function withdraw(uint256 amount) public {\n        require(_balances[msg.sender] >= amount, \"Insufficient balance\");\n        _balances[msg.sender] -= amount;\n        msg.sender.transfer(amount);\n    }\n\n    function acceptOwnership() public {\n        require(msg.sender == newOwner);\n        owner = newOwner;\n    }\n\n    function transferOwnership(address _newOwner) public {\n        require(msg.sender == owner);\n        newOwner = _newOwner;\n    }\n}\n```\n\nPlease note that the provided solidity code is a simplified version of the decompiled code you've provided. The original code has some additional complexity and uses a lower-level assembly for some operations which are not included in the solidity version.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473777,
	"id": "chatcmpl-8MvCLwnPSbJm3rHQbzQMuBY3uGjGE",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00F9:\n            var var0 = 0x0102;\n            func_0508();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x0118;\n                var var2 = name();\n            \n            label_0118:\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var6 = temp2 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0155:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_0145:\n                    var temp8 = var11;\n                    memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0155; }\n                    else { goto label_0145; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_01B2:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = !!var1;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d9;\n                var2 = totalSupply();\n            \n            label_01D9:\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x205c2878) {\n                // Dispatch table entry for withdrawTo(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                withdrawTo(var2, var3);\n                stop();\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b2;\n                var temp13 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp13 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp13;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_01B2;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0276;\n                var2 = decimals();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0xff;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x5a3b7e42) {\n                // Dispatch table entry for standard()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0118;\n                var2 = standard();\n                goto label_0118;\n            } else if (var0 == 0x5e35359e) {\n                // Dispatch table entry for withdrawTokens(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp16 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp16;\n                var4 = msg.data[0x44:0x64];\n                withdrawTokens(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balanceOf(var2);\n                goto label_01D9;\n            } else if (var0 == 0x79ba5097) {\n                // Dispatch table entry for acceptOwnership()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                acceptOwnership();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x039a;\n                var2 = owner();\n            \n            label_039A:\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0118;\n                var2 = symbol();\n                goto label_0118;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_01B2;\n            } else if (var0 == 0xd0e30db0) { goto label_00F9; }\n                // Dispatch table entry for deposit()\n            else if (var0 == 0xd4ee1d90) {\n                // Dispatch table entry for newOwner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x039a;\n                var2 = newOwner();\n                goto label_039A;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d9;\n                var temp19 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp19 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp19;\n                var2 = allowance(var2, var3);\n                goto label_01D9;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_00F9; }\n        }\n    }\n    \n    function func_0508() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var0 = 0x052b;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0C6D(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x06];\n        var0 = 0x0551;\n        var2 = msg.value;\n        var0 = func_0C6D(var1, var2);\n        storage[0x06] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x9386c90217c323f58030f9dadcbc938f807a940f4ff41cd4cead9562f5da7dc3]);\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0e80:0x0ea0];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = msg.value;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], address(this), msg.sender]);\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x03;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0655:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_064C; }\n        \n        label_0638:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0638; }\n        \n        label_064C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0655;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0655;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = !arg1;\n    \n        if (!var2) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x08;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_06B0; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var2) {\n        label_06B0:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x08;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function withdrawTo(var arg0, var arg1) {\n        var var0 = arg0;\n    \n        if (var0 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var1 = 0x0768;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_0C87(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var2 = storage[0x06];\n        var1 = 0x078e;\n        var3 = arg1;\n        var1 = func_0C87(var2, var3);\n        storage[0x06] = var1;\n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0e80:0x0ea0];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = arg1;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [memory[0x00:0x20], msg.sender, address(this)]);\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = temp5;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd3453]);\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1;\n    \n        if (var1 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0860;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = arg2;\n        var2 = func_0C9E(var3, var4, var5);\n    \n        if (var2) { return 0x01; }\n        else { assert(); }\n    }\n    \n    function withdraw(var arg0) {\n        var var0 = 0x0880;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        withdrawTo(var1, var2);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function standard() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0655:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_064C; }\n        \n        label_0638:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0638; }\n        \n        label_064C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0655;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0655;\n        }\n    }\n    \n    function withdrawTokens(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var0 = arg0;\n    \n        if (!(var0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg1;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n    \n        if (var2 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var4 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = arg2;\n        var var5 = temp1 + 0x44;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { return; }\n        else { assert(); }\n    }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function acceptOwnership() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[temp2:temp2 + 0x20] = temp3 & temp1 & storage[0x00];\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = temp3 & storage[0x01] & temp1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp2 + 0x40) - temp4], [0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a]);\n        var temp5 = storage[0x01];\n        var temp6 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[0x00] = (temp5 & 0x02 ** 0xa0 - 0x01) | (temp6 & storage[0x00]);\n        storage[0x01] = temp6 & temp5;\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x04;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0655:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_064C; }\n        \n        label_0638:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0638; }\n        \n        label_064C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0655;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0655;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0bcc;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_0DC2(var3, var4);\n    \n        if (var2) { return 0x01; }\n        else { assert(); }\n    }\n    \n    function newOwner() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp1 == temp1 & arg0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_0C6D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0C87(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= arg1) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0C9E(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n    \n        if (!(var2 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var4 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = 0x0cfd;\n        var var5 = arg2;\n        var3 = func_0C87(var4, var5);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = arg0 & temp2;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x08;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x07;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0d3e;\n        var5 = arg2;\n        var3 = func_0C87(var4, var5);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp5;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = arg1 & temp5;\n        var3 = 0x0d6d;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = arg2;\n        var3 = func_0C6D(var4, var5);\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var temp7 = arg1 & temp6;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0e80:0x0ea0];\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp8;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = arg2;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [memory[0x00:0x20], stack[-7] & 0x02 ** 0xa0 - 0x01, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function func_0DC2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var2 = 0x0dfd;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = arg1;\n        var2 = func_0C87(var3, var4);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        memory[0x00:0x20] = arg0 & temp0;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var2 = 0x0e2c;\n        var4 = arg1;\n        var2 = func_0C6D(var3, var4);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0e80:0x0ea0];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = arg1;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], msg.sender, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00F9:\n            var var0 = 0x0102;\n            func_0508();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x0118;\n                var var2 = name();\n            \n            label_0118:\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var6 = temp2 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0155:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_0145:\n                    var temp8 = var11;\n                    memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0155; }\n                    else { goto label_0145; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_01B2:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = !!var1;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d9;\n                var2 = totalSupply();\n            \n            label_01D9:\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x205c2878) {\n                // Dispatch table entry for withdrawTo(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                withdrawTo(var2, var3);\n                stop();\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b2;\n                var temp13 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp13 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp13;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_01B2;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0276;\n                var2 = decimals();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0xff;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x5a3b7e42) {\n                // Dispatch table entry for standard()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0118;\n                var2 = standard();\n                goto label_0118;\n            } else if (var0 == 0x5e35359e) {\n                // Dispatch table entry for withdrawTokens(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp16 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp16;\n                var4 = msg.data[0x44:0x64];\n                withdrawTokens(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balanceOf(var2);\n                goto label_01D9;\n            } else if (var0 == 0x79ba5097) {\n                // Dispatch table entry for acceptOwnership()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                acceptOwnership();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x039a;\n                var2 = owner();\n            \n            label_039A:\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0118;\n                var2 = symbol();\n                goto label_0118;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_01B2;\n            } else if (var0 == 0xd0e30db0) { goto label_00F9; }\n                // Dispatch table entry for deposit()\n            else if (var0 == 0xd4ee1d90) {\n                // Dispatch table entry for newOwner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x039a;\n                var2 = newOwner();\n                goto label_039A;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d9;\n                var temp19 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp19 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp19;\n                var2 = allowance(var2, var3);\n                goto label_01D9;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_00F9; }\n        }\n    }\n    \n    function func_0508() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var0 = 0x052b;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0C6D(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x06];\n        var0 = 0x0551;\n        var2 = msg.value;\n        var0 = func_0C6D(var1, var2);\n        storage[0x06] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x9386c90217c323f58030f9dadcbc938f807a940f4ff41cd4cead9562f5da7dc3]);\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0e80:0x0ea0];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = msg.value;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], address(this), msg.sender]);\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x03;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0655:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_064C; }\n        \n        label_0638:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0638; }\n        \n        label_064C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0655;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0655;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = !arg1;\n    \n        if (!var2) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x08;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_06B0; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var2) {\n        label_06B0:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x08;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function withdrawTo(var arg0, var arg1) {\n        var var0 = arg0;\n    \n        if (var0 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var1 = 0x0768;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_0C87(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var2 = storage[0x06];\n        var1 = 0x078e;\n        var3 = arg1;\n        var1 = func_0C87(var2, var3);\n        storage[0x06] = var1;\n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0e80:0x0ea0];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = arg1;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [memory[0x00:0x20], msg.sender, address(this)]);\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = temp5;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd3453]);\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1;\n    \n        if (var1 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0860;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = arg2;\n        var2 = func_0C9E(var3, var4, var5);\n    \n        if (var2) { return 0x01; }\n        else { assert(); }\n    }\n    \n    function withdraw(var arg0) {\n        var var0 = 0x0880;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        withdrawTo(var1, var2);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function standard() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0655:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_064C; }\n        \n        label_0638:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0638; }\n        \n        label_064C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0655;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0655;\n        }\n    }\n    \n    function withdrawTokens(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var0 = arg0;\n    \n        if (!(var0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg1;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n    \n        if (var2 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var4 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = arg2;\n        var var5 = temp1 + 0x44;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { return; }\n        else { assert(); }\n    }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function acceptOwnership() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[temp2:temp2 + 0x20] = temp3 & temp1 & storage[0x00];\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = temp3 & storage[0x01] & temp1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp2 + 0x40) - temp4], [0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a]);\n        var temp5 = storage[0x01];\n        var temp6 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[0x00] = (temp5 & 0x02 ** 0xa0 - 0x01) | (temp6 & storage[0x00]);\n        storage[0x01] = temp6 & temp5;\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x04;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0655:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_064C; }\n        \n        label_0638:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0638; }\n        \n        label_064C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0655;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0655;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0bcc;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_0DC2(var3, var4);\n    \n        if (var2) { return 0x01; }\n        else { assert(); }\n    }\n    \n    function newOwner() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp1 == temp1 & arg0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_0C6D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0C87(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= arg1) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0C9E(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n    \n        if (!(var2 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var4 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = 0x0cfd;\n        var var5 = arg2;\n        var3 = func_0C87(var4, var5);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = arg0 & temp2;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x08;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x07;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0d3e;\n        var5 = arg2;\n        var3 = func_0C87(var4, var5);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp5;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = arg1 & temp5;\n        var3 = 0x0d6d;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = arg2;\n        var3 = func_0C6D(var4, var5);\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var temp7 = arg1 & temp6;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0e80:0x0ea0];\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp8;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = arg2;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [memory[0x00:0x20], stack[-7] & 0x02 ** 0xa0 - 0x01, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function func_0DC2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var2 = 0x0dfd;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = arg1;\n        var2 = func_0C87(var3, var4);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        memory[0x00:0x20] = arg0 & temp0;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var2 = 0x0e2c;\n        var4 = arg1;\n        var2 = func_0C6D(var3, var4);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0e80:0x0ea0];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = arg1;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], msg.sender, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00F9:\n            var var0 = 0x0102;\n            func_0508();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x0118;\n                var var2 = name();\n            \n            label_0118:\n                var temp0 = memory[0x40:0x60];\n                var var3 = temp0;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp1 = var4 + 0x20;\n                var temp2 = var2;\n                memory[temp1:temp1 + 0x20] = memory[temp2:temp2 + 0x20];\n                var var5 = temp1 + 0x20;\n                var var7 = memory[temp2:temp2 + 0x20];\n                var var6 = temp2 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0155:\n                    var temp3 = var7;\n                    var5 = temp3 + var5;\n                    var6 = temp3 & 0x1f;\n                \n                    if (!var6) {\n                        var temp4 = memory[0x40:0x60];\n                        return memory[temp4:temp4 + var5 - temp4];\n                    } else {\n                        var temp5 = var6;\n                        var temp6 = var5 - temp5;\n                        memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                        var temp7 = memory[0x40:0x60];\n                        return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n                    }\n                } else {\n                label_0145:\n                    var temp8 = var11;\n                    memory[var9 + temp8:var9 + temp8 + 0x20] = memory[var10 + temp8:var10 + temp8 + 0x20];\n                    var11 = temp8 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0155; }\n                    else { goto label_0145; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_01B2:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = !!var1;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d9;\n                var2 = totalSupply();\n            \n            label_01D9:\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x205c2878) {\n                // Dispatch table entry for withdrawTo(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                withdrawTo(var2, var3);\n                stop();\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b2;\n                var temp13 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp13 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp13;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_01B2;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0276;\n                var2 = decimals();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0xff;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x5a3b7e42) {\n                // Dispatch table entry for standard()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0118;\n                var2 = standard();\n                goto label_0118;\n            } else if (var0 == 0x5e35359e) {\n                // Dispatch table entry for withdrawTokens(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                var temp16 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp16 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp16;\n                var4 = msg.data[0x44:0x64];\n                withdrawTokens(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balanceOf(var2);\n                goto label_01D9;\n            } else if (var0 == 0x79ba5097) {\n                // Dispatch table entry for acceptOwnership()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                acceptOwnership();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x039a;\n                var2 = owner();\n            \n            label_039A:\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0118;\n                var2 = symbol();\n                goto label_0118;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01b2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_01B2;\n            } else if (var0 == 0xd0e30db0) { goto label_00F9; }\n                // Dispatch table entry for deposit()\n            else if (var0 == 0xd4ee1d90) {\n                // Dispatch table entry for newOwner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x039a;\n                var2 = newOwner();\n                goto label_039A;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01d9;\n                var temp19 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp19 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp19;\n                var2 = allowance(var2, var3);\n                goto label_01D9;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0102;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_00F9; }\n        }\n    }\n    \n    function func_0508() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var0 = 0x052b;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = msg.value;\n        var0 = func_0C6D(var1, var2);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x06];\n        var0 = 0x0551;\n        var2 = msg.value;\n        var0 = func_0C6D(var1, var2);\n        storage[0x06] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x9386c90217c323f58030f9dadcbc938f807a940f4ff41cd4cead9562f5da7dc3]);\n        var temp2 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0e80:0x0ea0];\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = msg.value;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], address(this), msg.sender]);\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x03;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0655:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_064C; }\n        \n        label_0638:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0638; }\n        \n        label_064C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0655;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0655;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = !arg1;\n    \n        if (!var2) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x08;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_06B0; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var2) {\n        label_06B0:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x08;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x06]; }\n    \n    function withdrawTo(var arg0, var arg1) {\n        var var0 = arg0;\n    \n        if (var0 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var1 = 0x0768;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_0C87(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var2 = storage[0x06];\n        var1 = 0x078e;\n        var3 = arg1;\n        var1 = func_0C87(var2, var3);\n        storage[0x06] = var1;\n        var temp0 = arg1;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0e80:0x0ea0];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = arg1;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp5;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [memory[0x00:0x20], msg.sender, address(this)]);\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = temp5;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x9a1b418bc061a5d80270261562e6986a35d995f8051145f277be16103abd3453]);\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1;\n    \n        if (var1 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0860;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = arg2;\n        var2 = func_0C9E(var3, var4, var5);\n    \n        if (var2) { return 0x01; }\n        else { assert(); }\n    }\n    \n    function withdraw(var arg0) {\n        var var0 = 0x0880;\n        var var1 = msg.sender;\n        var var2 = arg0;\n        withdrawTo(var1, var2);\n    }\n    \n    function decimals() returns (var r0) { return storage[0x05] & 0xff; }\n    \n    function standard() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x02;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0655:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_064C; }\n        \n        label_0638:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0638; }\n        \n        label_064C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0655;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0655;\n        }\n    }\n    \n    function withdrawTokens(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var0 = arg0;\n    \n        if (!(var0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg1;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n    \n        if (var2 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0xa9059cbb;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var4 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = arg2;\n        var var5 = temp1 + 0x44;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { return; }\n        else { assert(); }\n    }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function acceptOwnership() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[temp2:temp2 + 0x20] = temp3 & temp1 & storage[0x00];\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = temp3 & storage[0x01] & temp1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp2 + 0x40) - temp4], [0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a]);\n        var temp5 = storage[0x01];\n        var temp6 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[0x00] = (temp5 & 0x02 ** 0xa0 - 0x01) | (temp6 & storage[0x00]);\n        storage[0x01] = temp6 & temp5;\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x04;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0655:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_064C; }\n        \n        label_0638:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0638; }\n        \n        label_064C:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0655;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0655;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 & 0x02 ** 0xa0 - 0x01 == address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x0bcc;\n        var var3 = arg0;\n        var var4 = arg1;\n        var2 = func_0DC2(var3, var4);\n    \n        if (var2) { return 0x01; }\n        else { assert(); }\n    }\n    \n    function newOwner() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp1 == temp1 & arg0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_0C6D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0C87(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 >= arg1) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0C9E(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n    \n        if (!(var2 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var4 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = 0x0cfd;\n        var var5 = arg2;\n        var3 = func_0C87(var4, var5);\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        var temp3 = arg0 & temp2;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x08;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp4;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x07;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var3 = 0x0d3e;\n        var5 = arg2;\n        var3 = func_0C87(var4, var5);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp5;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        memory[0x00:0x20] = arg1 & temp5;\n        var3 = 0x0d6d;\n        var4 = storage[keccak256(memory[0x00:0x40])];\n        var5 = arg2;\n        var3 = func_0C6D(var4, var5);\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var temp7 = arg1 & temp6;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0e80:0x0ea0];\n        var temp9 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp8;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = arg2;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [memory[0x00:0x20], stack[-7] & 0x02 ** 0xa0 - 0x01, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function func_0DC2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var2 = 0x0dfd;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = arg1;\n        var2 = func_0C87(var3, var4);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        memory[0x00:0x20] = arg0 & temp0;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var2 = 0x0e2c;\n        var4 = arg1;\n        var2 = func_0C6D(var3, var4);\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x07;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x0e80:0x0ea0];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = arg1;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], msg.sender, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 31.13952660560608,
	"usage": {
		"completion_tokens": 544,
		"prompt_tokens": 9469,
		"total_tokens": 10013
	}
}