{
	"address": "0xa146240bf2c04005a743032dc0d241ec0bb2ba2b",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The decompiled code describes a complex Ethereum smart contract. Here's a Solidity version of the contract. Note that the function names are made up as the decompiled code does not provide the original function names.\n\n```Solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    mapping(address => bool) public frozenAccount;\n    uint256 public totalSupply;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event FrozenFunds(address target, bool frozen);\n\n    constructor(uint256 initialSupply, string memory tokenName, string memory tokenSymbol, uint8 decimalUnits) public {\n        totalSupply = initialSupply;\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n        balanceOf[msg.sender] = totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function freezeAccount(address target, bool freeze) public {\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n}\n```\n\nPlease note that the Solidity contract above may not reflect the exact functionality of the original contract due to the limitations of the decompiling process. Also, it's a simplified version focusing on the balance transfer part, some complex parts in the decompiled code are omitted for readability.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474057,
	"id": "chatcmpl-8MvGrW6hoZIkFiI5HfonoMif3nywc",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_015D:\n            var var0 = 0x0168;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = buy(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = dividendsOf(var2);\n            \n            label_018A:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01af;\n                var2 = name();\n            \n            label_01AF:\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var6 = temp4 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_01EB:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_01DC:\n                    var temp10 = var11;\n                    memory[temp10 + var9:temp10 + var9 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_01EB; }\n                    else { goto label_01DC; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x00;\n                var4 = var3;\n                var5 = var4;\n                var6 = var5;\n                var7 = 0x0b96;\n                var8 = var2;\n                var9 = 0x05;\n                var7 = func_148E(var8, var9);\n                var temp11 = var7;\n                var4 = temp11;\n                var7 = 0x0ba2;\n                var8 = var2;\n                var9 = var4;\n                var7 = func_14A5(var8, var9);\n                var temp12 = var7;\n                var5 = temp12;\n                var7 = 0x0bad;\n                var8 = var5;\n                var7 = func_14B7(var8);\n                var1 = var7;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = totalSupply();\n                goto label_018A;\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                goto label_018A;\n            } else if (var0 == 0x27defa1f) {\n                // Dispatch table entry for onlyAmbassadors()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = onlyAmbassadors();\n            \n            label_0278:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var2;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x029f;\n                var2 = decimals();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0xff;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x392efb52) {\n                // Dispatch table entry for administrators(bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                var2 = administrators(var2);\n                goto label_0278;\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = sellPrice();\n                goto label_018A;\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = stakingRequirement();\n                goto label_018A;\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                goto label_018A;\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = totalEthereumBalance();\n                goto label_018A;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_018A;\n            } else if (var0 == 0x8328b610) {\n                // Dispatch table entry for setStakingRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var2 = msg.data[0x04:0x24];\n                setStakingRequirement(var2);\n                stop();\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = buyPrice();\n                goto label_018A;\n            } else if (var0 == 0x89135ae9) {\n                // Dispatch table entry for setAdministrator(bytes32,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                setAdministrator(var2, var3);\n                stop();\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = myTokens();\n                goto label_018A;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01af;\n                var2 = symbol();\n                goto label_01AF;\n            } else if (var0 == 0xa8e04f34) {\n                // Dispatch table entry for disableInitialStage()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                disableInitialStage();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_0278;\n            } else if (var0 == 0xb84c8246) {\n                // Dispatch table entry for setSymbol(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var temp17 = msg.data[0x04:0x24];\n                var temp18 = msg.data[temp17 + 0x04:temp17 + 0x04 + 0x20];\n                var temp19 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp19 + (temp18 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp19:temp19 + 0x20] = temp18;\n                memory[temp19 + 0x20:temp19 + 0x20 + temp18] = msg.data[temp17 + 0x24:temp17 + 0x24 + temp18];\n                var2 = temp19;\n                var3 = msg.sender;\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = (var3 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                var temp21 = memory[0x40:0x60];\n                memory[0x00:0x20] = keccak256(memory[temp21:temp21 + (temp20 + 0x14) - temp21]);\n                memory[0x20:0x40] = 0x0a;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp22 = var2;\n                var4 = 0x11b4;\n                var5 = 0x01;\n                var6 = temp22 + 0x20;\n                var7 = memory[temp22:temp22 + 0x20];\n            \n            label_15F0:\n                var temp23 = var5;\n                var temp24 = storage[temp23];\n                memory[0x00:0x20] = temp23;\n                var8 = keccak256(memory[0x00:0x20]);\n                var9 = var6;\n                var6 = var8 + ((!(temp24 & 0x01) * 0x0100 - 0x01 & temp24) / 0x02 + 0x1f) / 0x20;\n            \n                if (0x1f < var7) {\n                    var temp25 = var7;\n                    storage[var5] = temp25 + temp25 + 0x01;\n                \n                    if (!temp25) {\n                    label_165E:\n                        var temp26 = var6;\n                        var6 = 0x0ecb;\n                        var7 = 0x0bba;\n                        var temp27 = var8;\n                        var9 = temp27;\n                        var8 = temp26;\n                    \n                        if (var8 <= var9) {\n                            var7 = func_0ECB(var8, var9);\n                            var6 = func_0BBA(var7);\n                            var4 = func_0ECB(var5, var6);\n                            // Error: Could not resolve method call return address!\n                        } else {\n                        label_1673:\n                            var temp28 = var9;\n                            storage[temp28] = 0x00;\n                            var9 = temp28 + 0x01;\n                        \n                            if (var8 > var9) { goto label_1673; }\n                        \n                            var7 = func_0ECB(var8, var9);\n                            // Error: Could not resolve method call return address!\n                        }\n                    } else {\n                        var temp29 = var7;\n                        var temp30 = var9;\n                        var7 = temp30;\n                        var9 = var7 + temp29;\n                    \n                        if (var9 <= var7) { goto label_165E; }\n                    \n                    label_164C:\n                        var temp31 = var7;\n                        var temp32 = var8;\n                        storage[temp32] = memory[temp31:temp31 + 0x20];\n                        var7 = temp31 + 0x20;\n                        var9 = var9;\n                        var8 = temp32 + 0x01;\n                    \n                        if (var9 <= var7) { goto label_165E; }\n                        else { goto label_164C; }\n                    }\n                } else {\n                    var temp33 = var7;\n                    storage[var5] = temp33 + temp33 | (memory[var9:var9 + 0x20] & ~0xff);\n                    goto label_165E;\n                }\n            } else if (var0 == 0xc47f0027) {\n                // Dispatch table entry for setName(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var temp34 = msg.data[0x04:0x24];\n                var temp35 = msg.data[temp34 + 0x04:temp34 + 0x04 + 0x20];\n                var temp36 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp36 + (temp35 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp36:temp36 + 0x20] = temp35;\n                memory[temp36 + 0x20:temp36 + 0x20 + temp35] = msg.data[temp34 + 0x24:temp34 + 0x24 + temp35];\n                var2 = temp36;\n                var3 = msg.sender;\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = (var3 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                var temp38 = memory[0x40:0x60];\n                memory[0x00:0x20] = keccak256(memory[temp38:temp38 + (temp37 + 0x14) - temp38]);\n                memory[0x20:0x40] = 0x0a;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp39 = var2;\n                var4 = 0x11b4;\n                var5 = 0x00;\n                var6 = temp39 + 0x20;\n                var7 = memory[temp39:temp39 + 0x20];\n                goto label_15F0;\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x00;\n                var4 = 0x0d7c;\n                var5 = msg.value;\n                var6 = var2;\n                var4 = buy(var5, var6);\n            \n            label_0D7C:\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                reinvest();\n                stop();\n            } else { goto label_015D; }\n        }\n    }\n    \n    function buy(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = arg0;\n        var var10 = msg.sender;\n        var var11 = storage[0x0b] & 0xff;\n    \n        if (!var11) {\n        label_0523:\n        \n            if (!var11) {\n                storage[0x0b] = storage[0x0b] & ~0xff;\n                var1 = msg.sender;\n                var11 = 0x0843;\n                var var12 = arg0;\n                var var13 = 0x05;\n                var11 = func_148E(var12, var13);\n                var temp0 = var11;\n                var2 = temp0;\n                var11 = 0x0850;\n                var12 = var2;\n                var13 = 0x03;\n                var11 = func_148E(var12, var13);\n                var temp1 = var11;\n                var3 = temp1;\n                var11 = 0x085c;\n                var12 = var2;\n                var13 = var3;\n                var11 = func_14A5(var12, var13);\n                var4 = var11;\n                var11 = 0x0868;\n                var12 = arg0;\n                var13 = var2;\n                var11 = func_14A5(var12, var13);\n                var temp2 = var11;\n                var5 = temp2;\n                var11 = 0x0873;\n                var12 = var5;\n                var11 = func_14B7(var12);\n                var6 = var11;\n                var7 = var4 * 0x010000000000000000;\n                var temp3 = var6 > 0x00;\n                var11 = temp3;\n            \n                if (!var11) {\n                label_089D:\n                \n                    if (!var11) { revert(memory[0x00:0x00]); }\n                \n                    var11 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n                \n                    if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                        var11 = arg1 & 0x02 ** 0xa0 - 0x01 != var1 & 0x02 ** 0xa0 - 0x01;\n                    \n                        if (!var11) { goto label_08F8; }\n                        else { goto label_08D9; }\n                    } else if (!var11) {\n                    label_08F8:\n                    \n                        if (!var11) {\n                        label_093E:\n                            var11 = 0x0948;\n                            var12 = var4;\n                            var13 = var3;\n                            var11 = func_1478(var12, var13);\n                            var4 = var11;\n                            var7 = var4 * 0x010000000000000000;\n                        \n                            if (storage[0x08] <= 0x00) {\n                            label_09BD:\n                                storage[0x08] = var6;\n                                memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x04;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var11 = 0x09e6;\n                                var13 = var6;\n                                var11 = func_1478(var12, var13);\n                            \n                            label_09E6:\n                                var temp4 = var1;\n                                memory[0x00:0x20] = temp4 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x04;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                                var temp5 = var6;\n                                memory[0x00:0x20] = temp4 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x06;\n                                var temp6 = keccak256(memory[0x00:0x40]);\n                                storage[temp6] = storage[temp6] + (storage[0x09] * temp5 - var7);\n                                var temp7 = memory[0x40:0x60];\n                                memory[temp7:temp7 + 0x20] = arg0;\n                                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = temp5;\n                                var temp8 = memory[0x40:0x60];\n                                log(memory[temp8:temp8 + (temp7 + 0x40) - temp8], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-11] & 0x02 ** 0xa0 - 0x01, stack[-13] & 0x02 ** 0xa0 - 0x01]);\n                                return temp5;\n                            } else {\n                            label_0965:\n                                var11 = 0x0970;\n                                var12 = storage[0x08];\n                                var13 = var6;\n                                var11 = func_1478(var12, var13);\n                                var temp9 = var11;\n                                storage[0x08] = temp9;\n                                var12 = var4 * 0x010000000000000000;\n                            \n                                if (!temp9) { assert(); }\n                            \n                                storage[0x09] = storage[0x09] + var12 / var11;\n                                var11 = storage[0x08];\n                                var12 = var4 * 0x010000000000000000;\n                            \n                                if (!var11) { assert(); }\n                            \n                                var temp10 = var7;\n                                var7 = temp10 - (temp10 - var6 * (var12 / var11));\n                                memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x04;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var11 = 0x09e6;\n                                var13 = var6;\n                                var11 = func_1478(var12, var13);\n                                goto label_09E6;\n                            }\n                        } else {\n                        label_08FE:\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var11 = 0x0920;\n                            var12 = storage[keccak256(memory[0x00:0x40])];\n                            var13 = var3;\n                            var11 = func_1478(var12, var13);\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var11;\n                        \n                            if (storage[0x08] <= 0x00) { goto label_09BD; }\n                            else { goto label_0965; }\n                        }\n                    } else {\n                    label_08D9:\n                        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_093E; }\n                        else { goto label_08FE; }\n                    }\n                } else {\n                    var11 = storage[0x08];\n                    var12 = 0x089b;\n                    var13 = var6;\n                    var var14 = var11;\n                    var12 = func_1478(var13, var14);\n                    var11 = var12 > var11;\n                    goto label_089D;\n                }\n            } else {\n                memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n                var11 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == 0x01;\n            \n                if (var11) {\n                    memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x07;\n                \n                    if (var9 + storage[keccak256(memory[0x00:0x40])] <= 0x0de0b6b3a7640000) { goto label_0583; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var11) {\n                label_0583:\n                    memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x07;\n                    var12 = storage[keccak256(memory[0x00:0x40])];\n                    var11 = 0x05a6;\n                    var13 = var9;\n                    var11 = func_1478(var12, var13);\n                    memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = var11;\n                    var1 = msg.sender;\n                    var11 = 0x05cd;\n                    var12 = arg0;\n                    var13 = 0x05;\n                    var11 = func_148E(var12, var13);\n                    var temp11 = var11;\n                    var2 = temp11;\n                    var11 = 0x05da;\n                    var12 = var2;\n                    var13 = 0x03;\n                    var11 = func_148E(var12, var13);\n                    var temp12 = var11;\n                    var3 = temp12;\n                    var11 = 0x05e6;\n                    var12 = var2;\n                    var13 = var3;\n                    var11 = func_14A5(var12, var13);\n                    var4 = var11;\n                    var11 = 0x05f2;\n                    var12 = arg0;\n                    var13 = var2;\n                    var11 = func_14A5(var12, var13);\n                    var temp13 = var11;\n                    var5 = temp13;\n                    var11 = 0x05fd;\n                    var12 = var5;\n                    var11 = func_14B7(var12);\n                    var6 = var11;\n                    var7 = var4 * 0x010000000000000000;\n                    var temp14 = var6 > 0x00;\n                    var11 = temp14;\n                \n                    if (!var11) {\n                    label_0627:\n                    \n                        if (!var11) { revert(memory[0x00:0x00]); }\n                    \n                        var11 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n                    \n                        if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                            var11 = arg1 & 0x02 ** 0xa0 - 0x01 != var1 & 0x02 ** 0xa0 - 0x01;\n                        \n                            if (!var11) { goto label_0682; }\n                            else { goto label_0663; }\n                        } else if (!var11) {\n                        label_0682:\n                        \n                            if (!var11) {\n                            label_06C8:\n                                var11 = 0x06d2;\n                                var12 = var4;\n                                var13 = var3;\n                                var11 = func_1478(var12, var13);\n                                var4 = var11;\n                                var7 = var4 * 0x010000000000000000;\n                            \n                                if (storage[0x08] <= 0x00) {\n                                label_0747:\n                                    storage[0x08] = var6;\n                                    memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                    var11 = 0x0770;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_1478(var12, var13);\n                                \n                                label_0770:\n                                    var temp15 = var1;\n                                    memory[0x00:0x20] = temp15 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                    storage[keccak256(memory[0x00:0x40])] = var11;\n                                    var temp16 = var6;\n                                    var8 = storage[0x09] * temp16 - var7;\n                                    memory[0x00:0x20] = temp15 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x06;\n                                    var temp17 = keccak256(memory[0x00:0x40]);\n                                    storage[temp17] = storage[temp17] + var8;\n                                    var temp18 = memory[0x40:0x60];\n                                    memory[temp18:temp18 + 0x20] = arg0;\n                                    memory[temp18 + 0x20:temp18 + 0x20 + 0x20] = temp16;\n                                    var temp19 = memory[0x40:0x60];\n                                    log(memory[temp19:temp19 + (temp18 + 0x40) - temp19], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-11] & 0x02 ** 0xa0 - 0x01, stack[-13] & 0x02 ** 0xa0 - 0x01]);\n                                    return temp16;\n                                } else {\n                                label_06EF:\n                                    var11 = 0x06fa;\n                                    var12 = storage[0x08];\n                                    var13 = var6;\n                                    var11 = func_1478(var12, var13);\n                                    var temp20 = var11;\n                                    storage[0x08] = temp20;\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!temp20) { assert(); }\n                                \n                                    storage[0x09] = storage[0x09] + var12 / var11;\n                                    var11 = storage[0x08];\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!var11) { assert(); }\n                                \n                                    var temp21 = var7;\n                                    var7 = temp21 - (temp21 - var6 * (var12 / var11));\n                                    memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                    var11 = 0x0770;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_1478(var12, var13);\n                                    goto label_0770;\n                                }\n                            } else {\n                            label_0688:\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x05;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var11 = 0x06aa;\n                                var13 = var3;\n                                var11 = func_1478(var12, var13);\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x05;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                            \n                                if (storage[0x08] <= 0x00) { goto label_0747; }\n                                else { goto label_06EF; }\n                            }\n                        } else {\n                        label_0663:\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x04;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_06C8; }\n                            else { goto label_0688; }\n                        }\n                    } else {\n                        var11 = storage[0x08];\n                        var12 = 0x0625;\n                        var13 = var6;\n                        var14 = var11;\n                        var12 = func_1478(var13, var14);\n                        var11 = var12 > var11;\n                        goto label_0627;\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var11 = 0x01158e460913d00000;\n            var12 = var9;\n            var13 = 0x051f;\n            var13 = totalEthereumBalance();\n            var11 = var13 - var12 <= var11;\n            goto label_0523;\n        }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x09] - temp0 / 0x010000000000000000;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0B7E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0B75; }\n        \n        label_0B61:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0B61; }\n        \n        label_0B75:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0B7E;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0B7E;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x08]; }\n    \n    function func_0BBA(var arg0) returns (var r0) { return arg0; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 > storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x0bdd;\n        var var5 = arg0;\n        var4 = func_154F(var5);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x0bea;\n        var5 = var1;\n        var var6 = 0x05;\n        var4 = func_148E(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x0bad;\n        var5 = var1;\n        var6 = var2;\n        return func_14A5(var5, var6);\n    }\n    \n    function onlyAmbassadors() returns (var r0) { return storage[0x0b] & 0xff; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x0c28;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x0c3f;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var2;\n        storage[temp1] = temp2 * 0x010000000000000000 + storage[temp1];\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var temp5 = temp2 + temp4;\n        var1 = temp5;\n        var temp6 = memory[0x40:0x60];\n        var temp7;\n        temp7, memory[temp6:temp6 + 0x00] = address(temp0).call.gas(!var1 * 0x08fc).value(var1)(memory[temp6:temp6 + memory[0x40:0x60] - temp6]);\n    \n        if (!temp7) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = var1;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] != 0x00) {\n            var var4 = 0x0d14;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_154F(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0d21;\n            var5 = var1;\n            var var6 = 0x05;\n            var4 = func_148E(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x0d2d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_14A5(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0D33:\n            return var0;\n        } else {\n            var0 = 0x14f46b0400;\n            goto label_0D33;\n        }\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x02]; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x05;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x0d77;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x0d50;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setStakingRequirement(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = arg0;\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] != 0x00) {\n            var var4 = 0x0e31;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_154F(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0e3e;\n            var5 = var1;\n            var var6 = 0x05;\n            var4 = func_148E(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x0d2d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_1478(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0D33:\n            return var0;\n        } else {\n            var0 = 0x199c82cc00;\n            goto label_0D33;\n        }\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = !!arg1 | (storage[temp2] & ~0xff);\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x0ec8;\n        var var3 = var1;\n        var2 = balanceOf(var3);\n        var0 = var2;\n        r0 = func_0ECB(var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0ECB(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0B7E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0B75; }\n        \n        label_0B61:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0B61; }\n        \n        label_0B75:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0B7E;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0B7E;\n        }\n    }\n    \n    function disableInitialStage() {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0b] = storage[0x0b] & ~0xff;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0fa9;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender;\n        var5 = !(storage[0x0b] & 0xff);\n    \n        if (var5) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n        \n            if (arg1 <= storage[keccak256(memory[0x00:0x40])]) { goto label_0FEC; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var5) {\n        label_0FEC:\n            var5 = 0x00;\n            var6 = 0x0ff8;\n            var var7 = 0x01;\n            var6 = myDividends(var7);\n        \n            if (var6 <= var5) {\n            label_1006:\n                var5 = 0x1011;\n                var6 = arg1;\n                var7 = 0x05;\n                var5 = func_148E(var6, var7);\n                var temp0 = var5;\n                var2 = temp0;\n                var5 = 0x101d;\n                var6 = arg1;\n                var7 = var2;\n                var5 = func_14A5(var6, var7);\n                var3 = var5;\n                var5 = 0x1028;\n                var6 = var2;\n                var5 = func_154F(var6);\n                var4 = var5;\n                var5 = 0x1036;\n                var6 = storage[0x08];\n                var7 = var2;\n                var5 = func_14A5(var6, var7);\n                storage[0x08] = var5;\n                memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var5 = 0x105c;\n                var7 = arg1;\n                var5 = func_14A5(var6, var7);\n                var temp1 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = var1 & temp1;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x00:0x20] = arg0 & temp1;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var5 = 0x108b;\n                var7 = var3;\n                var5 = func_1478(var6, var7);\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = temp2 & arg0;\n                memory[0x00:0x20] = temp3;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x00:0x20] = var1 & temp2;\n                memory[0x20:0x40] = 0x06;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] - arg1 * storage[0x09];\n                memory[0x00:0x20] = temp3;\n                var temp5 = keccak256(memory[0x00:0x40]);\n                storage[temp5] = storage[temp5] + var3 * storage[0x09];\n                var5 = 0x10ff;\n                var7 = storage[0x08];\n                var6 = storage[0x09];\n                var var8 = var4 * 0x010000000000000000;\n            \n                if (!var7) { assert(); }\n            \n                var5 = func_10F9(var6, var7, var8);\n                storage[0x09] = var5;\n                var temp6 = 0x02 ** 0xa0 - 0x01;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = var3;\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return 0x01;\n            } else {\n                var5 = 0x1006;\n                withdraw();\n                goto label_1006;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_10F9(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1478(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = 0x1230;\n        var7 = myTokens();\n    \n        if (var7 <= var6) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var0 = msg.sender;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var6 = 0x126f;\n        var7 = var1;\n        var6 = func_154F(var7);\n        var temp0 = var6;\n        var2 = temp0;\n        var6 = 0x127c;\n        var7 = var2;\n        var var8 = 0x05;\n        var6 = func_148E(var7, var8);\n        var temp1 = var6;\n        var3 = temp1;\n        var6 = 0x1288;\n        var7 = var2;\n        var8 = var3;\n        var6 = func_14A5(var7, var8);\n        var4 = var6;\n        var6 = 0x1296;\n        var7 = storage[0x08];\n        var8 = var1;\n        var6 = func_14A5(var7, var8);\n        storage[0x08] = var6;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var6 = 0x12bc;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var8 = var1;\n        var6 = func_14A5(var7, var8);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = var4 * 0x010000000000000000 + var1 * storage[0x09];\n        storage[temp2] = storage[temp2] - temp3;\n        var5 = temp3;\n    \n        if (storage[0x08] <= 0x00) {\n        label_132D:\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var4;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0xc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var6 = 0x1329;\n            var7 = storage[0x09];\n            var8 = storage[0x08];\n            var var9 = var3 * 0x010000000000000000;\n        \n            if (!var8) { assert(); }\n        \n            var6 = func_10F9(var7, var8, var9);\n            storage[0x09] = var6;\n            goto label_132D;\n        }\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_13A5:\n            var var2 = 0x13ad;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x13a5;\n            var var3 = var1;\n            sell(var3);\n            goto label_13A5;\n        }\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x13cd;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x13e1;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var3;\n        storage[temp0] = temp1 * 0x010000000000000000 + storage[temp0];\n        memory[0x20:0x40] = 0x05;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = storage[temp2];\n        storage[temp2] = 0x00;\n        var0 = temp1 + temp3;\n        var1 = msg.sender;\n        var3 = 0x142d;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = buy(var4, var5);\n    \n    label_142D:\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1478(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_148E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_14A5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_14B7(var arg0) returns (var r0) {\n        var temp0 = storage[0x08];\n        var var0 = 0x00;\n        var var1 = 0x01431e0fae6d7217caa0000000;\n        var var3 = temp0;\n        var var2 = var0;\n        var var4 = 0x02540be400;\n        var var5 = 0x153c;\n        var var6 = 0x1536;\n        var var7 = var3 * 0x05e0a1fd2712875988becaad0000000000 + var3 ** 0x02 * 0x056bc75e2d63100000 + arg0 * 0x0380d4bd8a8678c1bb542c80deb4800000000000 + 0x0197d4df19d605767337e9f14d3eec8920e400000000000000;\n        var6 = func_15BB(var7);\n        var5 = func_1536(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_1536(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_14A5(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_154F(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x08] + 0x0de0b6b3a7640000;\n        var var3 = var0;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x15a8;\n        var var6 = temp0 * (var2 / var4 * 0x02540be400 + 0x14f46b0400);\n        var var7 = 0x02;\n        var var8 = (var1 ** var7 - temp0 + ~0x0de0b6b3a763ffff) / var4 * 0x02540be400;\n    \n        if (!var7) { assert(); }\n    \n        var5 = func_15A2(var6, var7, var8);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_15A2(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_14A5(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_15BB(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_0D7C:\n            return var0;\n        } else {\n        label_15CD:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_0D7C; }\n            else { goto label_15CD; }\n        }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_015D:\n            var var0 = 0x0168;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = buy(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = dividendsOf(var2);\n            \n            label_018A:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01af;\n                var2 = name();\n            \n            label_01AF:\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var6 = temp4 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_01EB:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_01DC:\n                    var temp10 = var11;\n                    memory[temp10 + var9:temp10 + var9 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_01EB; }\n                    else { goto label_01DC; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x00;\n                var4 = var3;\n                var5 = var4;\n                var6 = var5;\n                var7 = 0x0b96;\n                var8 = var2;\n                var9 = 0x05;\n                var7 = func_148E(var8, var9);\n                var temp11 = var7;\n                var4 = temp11;\n                var7 = 0x0ba2;\n                var8 = var2;\n                var9 = var4;\n                var7 = func_14A5(var8, var9);\n                var temp12 = var7;\n                var5 = temp12;\n                var7 = 0x0bad;\n                var8 = var5;\n                var7 = func_14B7(var8);\n                var1 = var7;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = totalSupply();\n                goto label_018A;\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                goto label_018A;\n            } else if (var0 == 0x27defa1f) {\n                // Dispatch table entry for onlyAmbassadors()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = onlyAmbassadors();\n            \n            label_0278:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var2;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x029f;\n                var2 = decimals();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0xff;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x392efb52) {\n                // Dispatch table entry for administrators(bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                var2 = administrators(var2);\n                goto label_0278;\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = sellPrice();\n                goto label_018A;\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = stakingRequirement();\n                goto label_018A;\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                goto label_018A;\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = totalEthereumBalance();\n                goto label_018A;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_018A;\n            } else if (var0 == 0x8328b610) {\n                // Dispatch table entry for setStakingRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var2 = msg.data[0x04:0x24];\n                setStakingRequirement(var2);\n                stop();\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = buyPrice();\n                goto label_018A;\n            } else if (var0 == 0x89135ae9) {\n                // Dispatch table entry for setAdministrator(bytes32,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                setAdministrator(var2, var3);\n                stop();\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = myTokens();\n                goto label_018A;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01af;\n                var2 = symbol();\n                goto label_01AF;\n            } else if (var0 == 0xa8e04f34) {\n                // Dispatch table entry for disableInitialStage()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                disableInitialStage();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_0278;\n            } else if (var0 == 0xb84c8246) {\n                // Dispatch table entry for setSymbol(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var temp17 = msg.data[0x04:0x24];\n                var temp18 = msg.data[temp17 + 0x04:temp17 + 0x04 + 0x20];\n                var temp19 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp19 + (temp18 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp19:temp19 + 0x20] = temp18;\n                memory[temp19 + 0x20:temp19 + 0x20 + temp18] = msg.data[temp17 + 0x24:temp17 + 0x24 + temp18];\n                var2 = temp19;\n                var3 = msg.sender;\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = (var3 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                var temp21 = memory[0x40:0x60];\n                memory[0x00:0x20] = keccak256(memory[temp21:temp21 + (temp20 + 0x14) - temp21]);\n                memory[0x20:0x40] = 0x0a;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp22 = var2;\n                var4 = 0x11b4;\n                var5 = 0x01;\n                var6 = temp22 + 0x20;\n                var7 = memory[temp22:temp22 + 0x20];\n            \n            label_15F0:\n                var temp23 = var5;\n                var temp24 = storage[temp23];\n                memory[0x00:0x20] = temp23;\n                var8 = keccak256(memory[0x00:0x20]);\n                var9 = var6;\n                var6 = var8 + ((!(temp24 & 0x01) * 0x0100 - 0x01 & temp24) / 0x02 + 0x1f) / 0x20;\n            \n                if (0x1f < var7) {\n                    var temp25 = var7;\n                    storage[var5] = temp25 + temp25 + 0x01;\n                \n                    if (!temp25) {\n                    label_165E:\n                        var temp26 = var6;\n                        var6 = 0x0ecb;\n                        var7 = 0x0bba;\n                        var temp27 = var8;\n                        var9 = temp27;\n                        var8 = temp26;\n                    \n                        if (var8 <= var9) {\n                            var7 = func_0ECB(var8, var9);\n                            var6 = func_0BBA(var7);\n                            var4 = func_0ECB(var5, var6);\n                            // Error: Could not resolve method call return address!\n                        } else {\n                        label_1673:\n                            var temp28 = var9;\n                            storage[temp28] = 0x00;\n                            var9 = temp28 + 0x01;\n                        \n                            if (var8 > var9) { goto label_1673; }\n                        \n                            var7 = func_0ECB(var8, var9);\n                            // Error: Could not resolve method call return address!\n                        }\n                    } else {\n                        var temp29 = var7;\n                        var temp30 = var9;\n                        var7 = temp30;\n                        var9 = var7 + temp29;\n                    \n                        if (var9 <= var7) { goto label_165E; }\n                    \n                    label_164C:\n                        var temp31 = var7;\n                        var temp32 = var8;\n                        storage[temp32] = memory[temp31:temp31 + 0x20];\n                        var7 = temp31 + 0x20;\n                        var9 = var9;\n                        var8 = temp32 + 0x01;\n                    \n                        if (var9 <= var7) { goto label_165E; }\n                        else { goto label_164C; }\n                    }\n                } else {\n                    var temp33 = var7;\n                    storage[var5] = temp33 + temp33 | (memory[var9:var9 + 0x20] & ~0xff);\n                    goto label_165E;\n                }\n            } else if (var0 == 0xc47f0027) {\n                // Dispatch table entry for setName(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var temp34 = msg.data[0x04:0x24];\n                var temp35 = msg.data[temp34 + 0x04:temp34 + 0x04 + 0x20];\n                var temp36 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp36 + (temp35 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp36:temp36 + 0x20] = temp35;\n                memory[temp36 + 0x20:temp36 + 0x20 + temp35] = msg.data[temp34 + 0x24:temp34 + 0x24 + temp35];\n                var2 = temp36;\n                var3 = msg.sender;\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = (var3 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                var temp38 = memory[0x40:0x60];\n                memory[0x00:0x20] = keccak256(memory[temp38:temp38 + (temp37 + 0x14) - temp38]);\n                memory[0x20:0x40] = 0x0a;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp39 = var2;\n                var4 = 0x11b4;\n                var5 = 0x00;\n                var6 = temp39 + 0x20;\n                var7 = memory[temp39:temp39 + 0x20];\n                goto label_15F0;\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x00;\n                var4 = 0x0d7c;\n                var5 = msg.value;\n                var6 = var2;\n                var4 = buy(var5, var6);\n            \n            label_0D7C:\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                reinvest();\n                stop();\n            } else { goto label_015D; }\n        }\n    }\n    \n    function buy(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = arg0;\n        var var10 = msg.sender;\n        var var11 = storage[0x0b] & 0xff;\n    \n        if (!var11) {\n        label_0523:\n        \n            if (!var11) {\n                storage[0x0b] = storage[0x0b] & ~0xff;\n                var1 = msg.sender;\n                var11 = 0x0843;\n                var var12 = arg0;\n                var var13 = 0x05;\n                var11 = func_148E(var12, var13);\n                var temp0 = var11;\n                var2 = temp0;\n                var11 = 0x0850;\n                var12 = var2;\n                var13 = 0x03;\n                var11 = func_148E(var12, var13);\n                var temp1 = var11;\n                var3 = temp1;\n                var11 = 0x085c;\n                var12 = var2;\n                var13 = var3;\n                var11 = func_14A5(var12, var13);\n                var4 = var11;\n                var11 = 0x0868;\n                var12 = arg0;\n                var13 = var2;\n                var11 = func_14A5(var12, var13);\n                var temp2 = var11;\n                var5 = temp2;\n                var11 = 0x0873;\n                var12 = var5;\n                var11 = func_14B7(var12);\n                var6 = var11;\n                var7 = var4 * 0x010000000000000000;\n                var temp3 = var6 > 0x00;\n                var11 = temp3;\n            \n                if (!var11) {\n                label_089D:\n                \n                    if (!var11) { revert(memory[0x00:0x00]); }\n                \n                    var11 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n                \n                    if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                        var11 = arg1 & 0x02 ** 0xa0 - 0x01 != var1 & 0x02 ** 0xa0 - 0x01;\n                    \n                        if (!var11) { goto label_08F8; }\n                        else { goto label_08D9; }\n                    } else if (!var11) {\n                    label_08F8:\n                    \n                        if (!var11) {\n                        label_093E:\n                            var11 = 0x0948;\n                            var12 = var4;\n                            var13 = var3;\n                            var11 = func_1478(var12, var13);\n                            var4 = var11;\n                            var7 = var4 * 0x010000000000000000;\n                        \n                            if (storage[0x08] <= 0x00) {\n                            label_09BD:\n                                storage[0x08] = var6;\n                                memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x04;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var11 = 0x09e6;\n                                var13 = var6;\n                                var11 = func_1478(var12, var13);\n                            \n                            label_09E6:\n                                var temp4 = var1;\n                                memory[0x00:0x20] = temp4 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x04;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                                var temp5 = var6;\n                                memory[0x00:0x20] = temp4 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x06;\n                                var temp6 = keccak256(memory[0x00:0x40]);\n                                storage[temp6] = storage[temp6] + (storage[0x09] * temp5 - var7);\n                                var temp7 = memory[0x40:0x60];\n                                memory[temp7:temp7 + 0x20] = arg0;\n                                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = temp5;\n                                var temp8 = memory[0x40:0x60];\n                                log(memory[temp8:temp8 + (temp7 + 0x40) - temp8], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-11] & 0x02 ** 0xa0 - 0x01, stack[-13] & 0x02 ** 0xa0 - 0x01]);\n                                return temp5;\n                            } else {\n                            label_0965:\n                                var11 = 0x0970;\n                                var12 = storage[0x08];\n                                var13 = var6;\n                                var11 = func_1478(var12, var13);\n                                var temp9 = var11;\n                                storage[0x08] = temp9;\n                                var12 = var4 * 0x010000000000000000;\n                            \n                                if (!temp9) { assert(); }\n                            \n                                storage[0x09] = storage[0x09] + var12 / var11;\n                                var11 = storage[0x08];\n                                var12 = var4 * 0x010000000000000000;\n                            \n                                if (!var11) { assert(); }\n                            \n                                var temp10 = var7;\n                                var7 = temp10 - (temp10 - var6 * (var12 / var11));\n                                memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x04;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var11 = 0x09e6;\n                                var13 = var6;\n                                var11 = func_1478(var12, var13);\n                                goto label_09E6;\n                            }\n                        } else {\n                        label_08FE:\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var11 = 0x0920;\n                            var12 = storage[keccak256(memory[0x00:0x40])];\n                            var13 = var3;\n                            var11 = func_1478(var12, var13);\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var11;\n                        \n                            if (storage[0x08] <= 0x00) { goto label_09BD; }\n                            else { goto label_0965; }\n                        }\n                    } else {\n                    label_08D9:\n                        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_093E; }\n                        else { goto label_08FE; }\n                    }\n                } else {\n                    var11 = storage[0x08];\n                    var12 = 0x089b;\n                    var13 = var6;\n                    var var14 = var11;\n                    var12 = func_1478(var13, var14);\n                    var11 = var12 > var11;\n                    goto label_089D;\n                }\n            } else {\n                memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n                var11 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == 0x01;\n            \n                if (var11) {\n                    memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x07;\n                \n                    if (var9 + storage[keccak256(memory[0x00:0x40])] <= 0x0de0b6b3a7640000) { goto label_0583; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var11) {\n                label_0583:\n                    memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x07;\n                    var12 = storage[keccak256(memory[0x00:0x40])];\n                    var11 = 0x05a6;\n                    var13 = var9;\n                    var11 = func_1478(var12, var13);\n                    memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = var11;\n                    var1 = msg.sender;\n                    var11 = 0x05cd;\n                    var12 = arg0;\n                    var13 = 0x05;\n                    var11 = func_148E(var12, var13);\n                    var temp11 = var11;\n                    var2 = temp11;\n                    var11 = 0x05da;\n                    var12 = var2;\n                    var13 = 0x03;\n                    var11 = func_148E(var12, var13);\n                    var temp12 = var11;\n                    var3 = temp12;\n                    var11 = 0x05e6;\n                    var12 = var2;\n                    var13 = var3;\n                    var11 = func_14A5(var12, var13);\n                    var4 = var11;\n                    var11 = 0x05f2;\n                    var12 = arg0;\n                    var13 = var2;\n                    var11 = func_14A5(var12, var13);\n                    var temp13 = var11;\n                    var5 = temp13;\n                    var11 = 0x05fd;\n                    var12 = var5;\n                    var11 = func_14B7(var12);\n                    var6 = var11;\n                    var7 = var4 * 0x010000000000000000;\n                    var temp14 = var6 > 0x00;\n                    var11 = temp14;\n                \n                    if (!var11) {\n                    label_0627:\n                    \n                        if (!var11) { revert(memory[0x00:0x00]); }\n                    \n                        var11 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n                    \n                        if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                            var11 = arg1 & 0x02 ** 0xa0 - 0x01 != var1 & 0x02 ** 0xa0 - 0x01;\n                        \n                            if (!var11) { goto label_0682; }\n                            else { goto label_0663; }\n                        } else if (!var11) {\n                        label_0682:\n                        \n                            if (!var11) {\n                            label_06C8:\n                                var11 = 0x06d2;\n                                var12 = var4;\n                                var13 = var3;\n                                var11 = func_1478(var12, var13);\n                                var4 = var11;\n                                var7 = var4 * 0x010000000000000000;\n                            \n                                if (storage[0x08] <= 0x00) {\n                                label_0747:\n                                    storage[0x08] = var6;\n                                    memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                    var11 = 0x0770;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_1478(var12, var13);\n                                \n                                label_0770:\n                                    var temp15 = var1;\n                                    memory[0x00:0x20] = temp15 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                    storage[keccak256(memory[0x00:0x40])] = var11;\n                                    var temp16 = var6;\n                                    var8 = storage[0x09] * temp16 - var7;\n                                    memory[0x00:0x20] = temp15 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x06;\n                                    var temp17 = keccak256(memory[0x00:0x40]);\n                                    storage[temp17] = storage[temp17] + var8;\n                                    var temp18 = memory[0x40:0x60];\n                                    memory[temp18:temp18 + 0x20] = arg0;\n                                    memory[temp18 + 0x20:temp18 + 0x20 + 0x20] = temp16;\n                                    var temp19 = memory[0x40:0x60];\n                                    log(memory[temp19:temp19 + (temp18 + 0x40) - temp19], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-11] & 0x02 ** 0xa0 - 0x01, stack[-13] & 0x02 ** 0xa0 - 0x01]);\n                                    return temp16;\n                                } else {\n                                label_06EF:\n                                    var11 = 0x06fa;\n                                    var12 = storage[0x08];\n                                    var13 = var6;\n                                    var11 = func_1478(var12, var13);\n                                    var temp20 = var11;\n                                    storage[0x08] = temp20;\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!temp20) { assert(); }\n                                \n                                    storage[0x09] = storage[0x09] + var12 / var11;\n                                    var11 = storage[0x08];\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!var11) { assert(); }\n                                \n                                    var temp21 = var7;\n                                    var7 = temp21 - (temp21 - var6 * (var12 / var11));\n                                    memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                    var11 = 0x0770;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_1478(var12, var13);\n                                    goto label_0770;\n                                }\n                            } else {\n                            label_0688:\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x05;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var11 = 0x06aa;\n                                var13 = var3;\n                                var11 = func_1478(var12, var13);\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x05;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                            \n                                if (storage[0x08] <= 0x00) { goto label_0747; }\n                                else { goto label_06EF; }\n                            }\n                        } else {\n                        label_0663:\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x04;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_06C8; }\n                            else { goto label_0688; }\n                        }\n                    } else {\n                        var11 = storage[0x08];\n                        var12 = 0x0625;\n                        var13 = var6;\n                        var14 = var11;\n                        var12 = func_1478(var13, var14);\n                        var11 = var12 > var11;\n                        goto label_0627;\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var11 = 0x01158e460913d00000;\n            var12 = var9;\n            var13 = 0x051f;\n            var13 = totalEthereumBalance();\n            var11 = var13 - var12 <= var11;\n            goto label_0523;\n        }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x09] - temp0 / 0x010000000000000000;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0B7E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0B75; }\n        \n        label_0B61:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0B61; }\n        \n        label_0B75:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0B7E;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0B7E;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x08]; }\n    \n    function func_0BBA(var arg0) returns (var r0) { return arg0; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 > storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x0bdd;\n        var var5 = arg0;\n        var4 = func_154F(var5);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x0bea;\n        var5 = var1;\n        var var6 = 0x05;\n        var4 = func_148E(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x0bad;\n        var5 = var1;\n        var6 = var2;\n        return func_14A5(var5, var6);\n    }\n    \n    function onlyAmbassadors() returns (var r0) { return storage[0x0b] & 0xff; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x0c28;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x0c3f;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var2;\n        storage[temp1] = temp2 * 0x010000000000000000 + storage[temp1];\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var temp5 = temp2 + temp4;\n        var1 = temp5;\n        var temp6 = memory[0x40:0x60];\n        var temp7;\n        temp7, memory[temp6:temp6 + 0x00] = address(temp0).call.gas(!var1 * 0x08fc).value(var1)(memory[temp6:temp6 + memory[0x40:0x60] - temp6]);\n    \n        if (!temp7) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = var1;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] != 0x00) {\n            var var4 = 0x0d14;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_154F(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0d21;\n            var5 = var1;\n            var var6 = 0x05;\n            var4 = func_148E(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x0d2d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_14A5(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0D33:\n            return var0;\n        } else {\n            var0 = 0x14f46b0400;\n            goto label_0D33;\n        }\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x02]; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x05;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x0d77;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x0d50;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setStakingRequirement(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = arg0;\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] != 0x00) {\n            var var4 = 0x0e31;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_154F(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0e3e;\n            var5 = var1;\n            var var6 = 0x05;\n            var4 = func_148E(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x0d2d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_1478(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0D33:\n            return var0;\n        } else {\n            var0 = 0x199c82cc00;\n            goto label_0D33;\n        }\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = !!arg1 | (storage[temp2] & ~0xff);\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x0ec8;\n        var var3 = var1;\n        var2 = balanceOf(var3);\n        var0 = var2;\n        r0 = func_0ECB(var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0ECB(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0B7E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0B75; }\n        \n        label_0B61:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0B61; }\n        \n        label_0B75:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0B7E;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0B7E;\n        }\n    }\n    \n    function disableInitialStage() {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0b] = storage[0x0b] & ~0xff;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0fa9;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender;\n        var5 = !(storage[0x0b] & 0xff);\n    \n        if (var5) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n        \n            if (arg1 <= storage[keccak256(memory[0x00:0x40])]) { goto label_0FEC; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var5) {\n        label_0FEC:\n            var5 = 0x00;\n            var6 = 0x0ff8;\n            var var7 = 0x01;\n            var6 = myDividends(var7);\n        \n            if (var6 <= var5) {\n            label_1006:\n                var5 = 0x1011;\n                var6 = arg1;\n                var7 = 0x05;\n                var5 = func_148E(var6, var7);\n                var temp0 = var5;\n                var2 = temp0;\n                var5 = 0x101d;\n                var6 = arg1;\n                var7 = var2;\n                var5 = func_14A5(var6, var7);\n                var3 = var5;\n                var5 = 0x1028;\n                var6 = var2;\n                var5 = func_154F(var6);\n                var4 = var5;\n                var5 = 0x1036;\n                var6 = storage[0x08];\n                var7 = var2;\n                var5 = func_14A5(var6, var7);\n                storage[0x08] = var5;\n                memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var5 = 0x105c;\n                var7 = arg1;\n                var5 = func_14A5(var6, var7);\n                var temp1 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = var1 & temp1;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x00:0x20] = arg0 & temp1;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var5 = 0x108b;\n                var7 = var3;\n                var5 = func_1478(var6, var7);\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = temp2 & arg0;\n                memory[0x00:0x20] = temp3;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x00:0x20] = var1 & temp2;\n                memory[0x20:0x40] = 0x06;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] - arg1 * storage[0x09];\n                memory[0x00:0x20] = temp3;\n                var temp5 = keccak256(memory[0x00:0x40]);\n                storage[temp5] = storage[temp5] + var3 * storage[0x09];\n                var5 = 0x10ff;\n                var7 = storage[0x08];\n                var6 = storage[0x09];\n                var var8 = var4 * 0x010000000000000000;\n            \n                if (!var7) { assert(); }\n            \n                var5 = func_10F9(var6, var7, var8);\n                storage[0x09] = var5;\n                var temp6 = 0x02 ** 0xa0 - 0x01;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = var3;\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return 0x01;\n            } else {\n                var5 = 0x1006;\n                withdraw();\n                goto label_1006;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_10F9(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1478(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = 0x1230;\n        var7 = myTokens();\n    \n        if (var7 <= var6) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var0 = msg.sender;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var6 = 0x126f;\n        var7 = var1;\n        var6 = func_154F(var7);\n        var temp0 = var6;\n        var2 = temp0;\n        var6 = 0x127c;\n        var7 = var2;\n        var var8 = 0x05;\n        var6 = func_148E(var7, var8);\n        var temp1 = var6;\n        var3 = temp1;\n        var6 = 0x1288;\n        var7 = var2;\n        var8 = var3;\n        var6 = func_14A5(var7, var8);\n        var4 = var6;\n        var6 = 0x1296;\n        var7 = storage[0x08];\n        var8 = var1;\n        var6 = func_14A5(var7, var8);\n        storage[0x08] = var6;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var6 = 0x12bc;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var8 = var1;\n        var6 = func_14A5(var7, var8);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = var4 * 0x010000000000000000 + var1 * storage[0x09];\n        storage[temp2] = storage[temp2] - temp3;\n        var5 = temp3;\n    \n        if (storage[0x08] <= 0x00) {\n        label_132D:\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var4;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0xc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var6 = 0x1329;\n            var7 = storage[0x09];\n            var8 = storage[0x08];\n            var var9 = var3 * 0x010000000000000000;\n        \n            if (!var8) { assert(); }\n        \n            var6 = func_10F9(var7, var8, var9);\n            storage[0x09] = var6;\n            goto label_132D;\n        }\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_13A5:\n            var var2 = 0x13ad;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x13a5;\n            var var3 = var1;\n            sell(var3);\n            goto label_13A5;\n        }\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x13cd;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x13e1;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var3;\n        storage[temp0] = temp1 * 0x010000000000000000 + storage[temp0];\n        memory[0x20:0x40] = 0x05;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = storage[temp2];\n        storage[temp2] = 0x00;\n        var0 = temp1 + temp3;\n        var1 = msg.sender;\n        var3 = 0x142d;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = buy(var4, var5);\n    \n    label_142D:\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1478(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_148E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_14A5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_14B7(var arg0) returns (var r0) {\n        var temp0 = storage[0x08];\n        var var0 = 0x00;\n        var var1 = 0x01431e0fae6d7217caa0000000;\n        var var3 = temp0;\n        var var2 = var0;\n        var var4 = 0x02540be400;\n        var var5 = 0x153c;\n        var var6 = 0x1536;\n        var var7 = var3 * 0x05e0a1fd2712875988becaad0000000000 + var3 ** 0x02 * 0x056bc75e2d63100000 + arg0 * 0x0380d4bd8a8678c1bb542c80deb4800000000000 + 0x0197d4df19d605767337e9f14d3eec8920e400000000000000;\n        var6 = func_15BB(var7);\n        var5 = func_1536(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_1536(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_14A5(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_154F(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x08] + 0x0de0b6b3a7640000;\n        var var3 = var0;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x15a8;\n        var var6 = temp0 * (var2 / var4 * 0x02540be400 + 0x14f46b0400);\n        var var7 = 0x02;\n        var var8 = (var1 ** var7 - temp0 + ~0x0de0b6b3a763ffff) / var4 * 0x02540be400;\n    \n        if (!var7) { assert(); }\n    \n        var5 = func_15A2(var6, var7, var8);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_15A2(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_14A5(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_15BB(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_0D7C:\n            return var0;\n        } else {\n        label_15CD:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_0D7C; }\n            else { goto label_15CD; }\n        }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_015D:\n            var var0 = 0x0168;\n            var var1 = msg.value;\n            var var2 = 0x00;\n            var0 = buy(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = dividendsOf(var2);\n            \n            label_018A:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01af;\n                var2 = name();\n            \n            label_01AF:\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                memory[var3:var3 + 0x20] = 0x20;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var6 = temp4 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_01EB:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_01DC:\n                    var temp10 = var11;\n                    memory[temp10 + var9:temp10 + var9 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_01EB; }\n                    else { goto label_01DC; }\n                }\n            } else if (var0 == 0x10d0ffdd) {\n                // Dispatch table entry for calculateTokensReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x00;\n                var4 = var3;\n                var5 = var4;\n                var6 = var5;\n                var7 = 0x0b96;\n                var8 = var2;\n                var9 = 0x05;\n                var7 = func_148E(var8, var9);\n                var temp11 = var7;\n                var4 = temp11;\n                var7 = 0x0ba2;\n                var8 = var2;\n                var9 = var4;\n                var7 = func_14A5(var8, var9);\n                var temp12 = var7;\n                var5 = temp12;\n                var7 = 0x0bad;\n                var8 = var5;\n                var7 = func_14B7(var8);\n                var1 = var7;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = totalSupply();\n                goto label_018A;\n            } else if (var0 == 0x22609373) {\n                // Dispatch table entry for calculateEthereumReceived(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24];\n                var1 = calculateEthereumReceived(var2);\n                goto label_018A;\n            } else if (var0 == 0x27defa1f) {\n                // Dispatch table entry for onlyAmbassadors()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = onlyAmbassadors();\n            \n            label_0278:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var2;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x029f;\n                var2 = decimals();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0xff;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x392efb52) {\n                // Dispatch table entry for administrators(bytes32)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24];\n                var2 = administrators(var2);\n                goto label_0278;\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = sellPrice();\n                goto label_018A;\n            } else if (var0 == 0x56d399e8) {\n                // Dispatch table entry for stakingRequirement()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = stakingRequirement();\n                goto label_018A;\n            } else if (var0 == 0x688abbf7) {\n                // Dispatch table entry for myDividends(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = myDividends(var2);\n                goto label_018A;\n            } else if (var0 == 0x6b2f4632) {\n                // Dispatch table entry for totalEthereumBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = totalEthereumBalance();\n                goto label_018A;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_018A;\n            } else if (var0 == 0x8328b610) {\n                // Dispatch table entry for setStakingRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var2 = msg.data[0x04:0x24];\n                setStakingRequirement(var2);\n                stop();\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = buyPrice();\n                goto label_018A;\n            } else if (var0 == 0x89135ae9) {\n                // Dispatch table entry for setAdministrator(bytes32,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                setAdministrator(var2, var3);\n                stop();\n            } else if (var0 == 0x949e8acd) {\n                // Dispatch table entry for myTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x018a;\n                var1 = myTokens();\n                goto label_018A;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01af;\n                var2 = symbol();\n                goto label_01AF;\n            } else if (var0 == 0xa8e04f34) {\n                // Dispatch table entry for disableInitialStage()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                disableInitialStage();\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0278;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_0278;\n            } else if (var0 == 0xb84c8246) {\n                // Dispatch table entry for setSymbol(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var temp17 = msg.data[0x04:0x24];\n                var temp18 = msg.data[temp17 + 0x04:temp17 + 0x04 + 0x20];\n                var temp19 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp19 + (temp18 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp19:temp19 + 0x20] = temp18;\n                memory[temp19 + 0x20:temp19 + 0x20 + temp18] = msg.data[temp17 + 0x24:temp17 + 0x24 + temp18];\n                var2 = temp19;\n                var3 = msg.sender;\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = (var3 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                var temp21 = memory[0x40:0x60];\n                memory[0x00:0x20] = keccak256(memory[temp21:temp21 + (temp20 + 0x14) - temp21]);\n                memory[0x20:0x40] = 0x0a;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp22 = var2;\n                var4 = 0x11b4;\n                var5 = 0x01;\n                var6 = temp22 + 0x20;\n                var7 = memory[temp22:temp22 + 0x20];\n            \n            label_15F0:\n                var temp23 = var5;\n                var temp24 = storage[temp23];\n                memory[0x00:0x20] = temp23;\n                var8 = keccak256(memory[0x00:0x20]);\n                var9 = var6;\n                var6 = var8 + ((!(temp24 & 0x01) * 0x0100 - 0x01 & temp24) / 0x02 + 0x1f) / 0x20;\n            \n                if (0x1f < var7) {\n                    var temp25 = var7;\n                    storage[var5] = temp25 + temp25 + 0x01;\n                \n                    if (!temp25) {\n                    label_165E:\n                        var temp26 = var6;\n                        var6 = 0x0ecb;\n                        var7 = 0x0bba;\n                        var temp27 = var8;\n                        var9 = temp27;\n                        var8 = temp26;\n                    \n                        if (var8 <= var9) {\n                            var7 = func_0ECB(var8, var9);\n                            var6 = func_0BBA(var7);\n                            var4 = func_0ECB(var5, var6);\n                            // Error: Could not resolve method call return address!\n                        } else {\n                        label_1673:\n                            var temp28 = var9;\n                            storage[temp28] = 0x00;\n                            var9 = temp28 + 0x01;\n                        \n                            if (var8 > var9) { goto label_1673; }\n                        \n                            var7 = func_0ECB(var8, var9);\n                            // Error: Could not resolve method call return address!\n                        }\n                    } else {\n                        var temp29 = var7;\n                        var temp30 = var9;\n                        var7 = temp30;\n                        var9 = var7 + temp29;\n                    \n                        if (var9 <= var7) { goto label_165E; }\n                    \n                    label_164C:\n                        var temp31 = var7;\n                        var temp32 = var8;\n                        storage[temp32] = memory[temp31:temp31 + 0x20];\n                        var7 = temp31 + 0x20;\n                        var9 = var9;\n                        var8 = temp32 + 0x01;\n                    \n                        if (var9 <= var7) { goto label_165E; }\n                        else { goto label_164C; }\n                    }\n                } else {\n                    var temp33 = var7;\n                    storage[var5] = temp33 + temp33 | (memory[var9:var9 + 0x20] & ~0xff);\n                    goto label_165E;\n                }\n            } else if (var0 == 0xc47f0027) {\n                // Dispatch table entry for setName(string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var temp34 = msg.data[0x04:0x24];\n                var temp35 = msg.data[temp34 + 0x04:temp34 + 0x04 + 0x20];\n                var temp36 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp36 + (temp35 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp36:temp36 + 0x20] = temp35;\n                memory[temp36 + 0x20:temp36 + 0x20 + temp35] = msg.data[temp34 + 0x24:temp34 + 0x24 + temp35];\n                var2 = temp36;\n                var3 = msg.sender;\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = (var3 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n                var temp38 = memory[0x40:0x60];\n                memory[0x00:0x20] = keccak256(memory[temp38:temp38 + (temp37 + 0x14) - temp38]);\n                memory[0x20:0x40] = 0x0a;\n            \n                if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n            \n                var temp39 = var2;\n                var4 = 0x11b4;\n                var5 = 0x00;\n                var6 = temp39 + 0x20;\n                var7 = memory[temp39:temp39 + 0x20];\n                goto label_15F0;\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                exit();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x018a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = 0x00;\n                var4 = 0x0d7c;\n                var5 = msg.value;\n                var6 = var2;\n                var4 = buy(var5, var6);\n            \n            label_0D7C:\n                var1 = var3;\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                reinvest();\n                stop();\n            } else { goto label_015D; }\n        }\n    }\n    \n    function buy(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = arg0;\n        var var10 = msg.sender;\n        var var11 = storage[0x0b] & 0xff;\n    \n        if (!var11) {\n        label_0523:\n        \n            if (!var11) {\n                storage[0x0b] = storage[0x0b] & ~0xff;\n                var1 = msg.sender;\n                var11 = 0x0843;\n                var var12 = arg0;\n                var var13 = 0x05;\n                var11 = func_148E(var12, var13);\n                var temp0 = var11;\n                var2 = temp0;\n                var11 = 0x0850;\n                var12 = var2;\n                var13 = 0x03;\n                var11 = func_148E(var12, var13);\n                var temp1 = var11;\n                var3 = temp1;\n                var11 = 0x085c;\n                var12 = var2;\n                var13 = var3;\n                var11 = func_14A5(var12, var13);\n                var4 = var11;\n                var11 = 0x0868;\n                var12 = arg0;\n                var13 = var2;\n                var11 = func_14A5(var12, var13);\n                var temp2 = var11;\n                var5 = temp2;\n                var11 = 0x0873;\n                var12 = var5;\n                var11 = func_14B7(var12);\n                var6 = var11;\n                var7 = var4 * 0x010000000000000000;\n                var temp3 = var6 > 0x00;\n                var11 = temp3;\n            \n                if (!var11) {\n                label_089D:\n                \n                    if (!var11) { revert(memory[0x00:0x00]); }\n                \n                    var11 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n                \n                    if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                        var11 = arg1 & 0x02 ** 0xa0 - 0x01 != var1 & 0x02 ** 0xa0 - 0x01;\n                    \n                        if (!var11) { goto label_08F8; }\n                        else { goto label_08D9; }\n                    } else if (!var11) {\n                    label_08F8:\n                    \n                        if (!var11) {\n                        label_093E:\n                            var11 = 0x0948;\n                            var12 = var4;\n                            var13 = var3;\n                            var11 = func_1478(var12, var13);\n                            var4 = var11;\n                            var7 = var4 * 0x010000000000000000;\n                        \n                            if (storage[0x08] <= 0x00) {\n                            label_09BD:\n                                storage[0x08] = var6;\n                                memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x04;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var11 = 0x09e6;\n                                var13 = var6;\n                                var11 = func_1478(var12, var13);\n                            \n                            label_09E6:\n                                var temp4 = var1;\n                                memory[0x00:0x20] = temp4 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x04;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                                var temp5 = var6;\n                                memory[0x00:0x20] = temp4 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x06;\n                                var temp6 = keccak256(memory[0x00:0x40]);\n                                storage[temp6] = storage[temp6] + (storage[0x09] * temp5 - var7);\n                                var temp7 = memory[0x40:0x60];\n                                memory[temp7:temp7 + 0x20] = arg0;\n                                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = temp5;\n                                var temp8 = memory[0x40:0x60];\n                                log(memory[temp8:temp8 + (temp7 + 0x40) - temp8], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-11] & 0x02 ** 0xa0 - 0x01, stack[-13] & 0x02 ** 0xa0 - 0x01]);\n                                return temp5;\n                            } else {\n                            label_0965:\n                                var11 = 0x0970;\n                                var12 = storage[0x08];\n                                var13 = var6;\n                                var11 = func_1478(var12, var13);\n                                var temp9 = var11;\n                                storage[0x08] = temp9;\n                                var12 = var4 * 0x010000000000000000;\n                            \n                                if (!temp9) { assert(); }\n                            \n                                storage[0x09] = storage[0x09] + var12 / var11;\n                                var11 = storage[0x08];\n                                var12 = var4 * 0x010000000000000000;\n                            \n                                if (!var11) { assert(); }\n                            \n                                var temp10 = var7;\n                                var7 = temp10 - (temp10 - var6 * (var12 / var11));\n                                memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x04;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var11 = 0x09e6;\n                                var13 = var6;\n                                var11 = func_1478(var12, var13);\n                                goto label_09E6;\n                            }\n                        } else {\n                        label_08FE:\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var11 = 0x0920;\n                            var12 = storage[keccak256(memory[0x00:0x40])];\n                            var13 = var3;\n                            var11 = func_1478(var12, var13);\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var11;\n                        \n                            if (storage[0x08] <= 0x00) { goto label_09BD; }\n                            else { goto label_0965; }\n                        }\n                    } else {\n                    label_08D9:\n                        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x04;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_093E; }\n                        else { goto label_08FE; }\n                    }\n                } else {\n                    var11 = storage[0x08];\n                    var12 = 0x089b;\n                    var13 = var6;\n                    var var14 = var11;\n                    var12 = func_1478(var13, var14);\n                    var11 = var12 > var11;\n                    goto label_089D;\n                }\n            } else {\n                memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n                var11 = !!(storage[keccak256(memory[0x00:0x40])] & 0xff) == 0x01;\n            \n                if (var11) {\n                    memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x07;\n                \n                    if (var9 + storage[keccak256(memory[0x00:0x40])] <= 0x0de0b6b3a7640000) { goto label_0583; }\n                    else { revert(memory[0x00:0x00]); }\n                } else if (var11) {\n                label_0583:\n                    memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x07;\n                    var12 = storage[keccak256(memory[0x00:0x40])];\n                    var11 = 0x05a6;\n                    var13 = var9;\n                    var11 = func_1478(var12, var13);\n                    memory[0x00:0x20] = var10 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x07;\n                    storage[keccak256(memory[0x00:0x40])] = var11;\n                    var1 = msg.sender;\n                    var11 = 0x05cd;\n                    var12 = arg0;\n                    var13 = 0x05;\n                    var11 = func_148E(var12, var13);\n                    var temp11 = var11;\n                    var2 = temp11;\n                    var11 = 0x05da;\n                    var12 = var2;\n                    var13 = 0x03;\n                    var11 = func_148E(var12, var13);\n                    var temp12 = var11;\n                    var3 = temp12;\n                    var11 = 0x05e6;\n                    var12 = var2;\n                    var13 = var3;\n                    var11 = func_14A5(var12, var13);\n                    var4 = var11;\n                    var11 = 0x05f2;\n                    var12 = arg0;\n                    var13 = var2;\n                    var11 = func_14A5(var12, var13);\n                    var temp13 = var11;\n                    var5 = temp13;\n                    var11 = 0x05fd;\n                    var12 = var5;\n                    var11 = func_14B7(var12);\n                    var6 = var11;\n                    var7 = var4 * 0x010000000000000000;\n                    var temp14 = var6 > 0x00;\n                    var11 = temp14;\n                \n                    if (!var11) {\n                    label_0627:\n                    \n                        if (!var11) { revert(memory[0x00:0x00]); }\n                    \n                        var11 = !!(arg1 & 0x02 ** 0xa0 - 0x01);\n                    \n                        if (arg1 & 0x02 ** 0xa0 - 0x01) {\n                            var11 = arg1 & 0x02 ** 0xa0 - 0x01 != var1 & 0x02 ** 0xa0 - 0x01;\n                        \n                            if (!var11) { goto label_0682; }\n                            else { goto label_0663; }\n                        } else if (!var11) {\n                        label_0682:\n                        \n                            if (!var11) {\n                            label_06C8:\n                                var11 = 0x06d2;\n                                var12 = var4;\n                                var13 = var3;\n                                var11 = func_1478(var12, var13);\n                                var4 = var11;\n                                var7 = var4 * 0x010000000000000000;\n                            \n                                if (storage[0x08] <= 0x00) {\n                                label_0747:\n                                    storage[0x08] = var6;\n                                    memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                    var11 = 0x0770;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_1478(var12, var13);\n                                \n                                label_0770:\n                                    var temp15 = var1;\n                                    memory[0x00:0x20] = temp15 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                    storage[keccak256(memory[0x00:0x40])] = var11;\n                                    var temp16 = var6;\n                                    var8 = storage[0x09] * temp16 - var7;\n                                    memory[0x00:0x20] = temp15 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x06;\n                                    var temp17 = keccak256(memory[0x00:0x40]);\n                                    storage[temp17] = storage[temp17] + var8;\n                                    var temp18 = memory[0x40:0x60];\n                                    memory[temp18:temp18 + 0x20] = arg0;\n                                    memory[temp18 + 0x20:temp18 + 0x20 + 0x20] = temp16;\n                                    var temp19 = memory[0x40:0x60];\n                                    log(memory[temp19:temp19 + (temp18 + 0x40) - temp19], [0x022c0d992e4d873a3748436d960d5140c1f9721cf73f7ca5ec679d3d9f4fe2d5, stack[-11] & 0x02 ** 0xa0 - 0x01, stack[-13] & 0x02 ** 0xa0 - 0x01]);\n                                    return temp16;\n                                } else {\n                                label_06EF:\n                                    var11 = 0x06fa;\n                                    var12 = storage[0x08];\n                                    var13 = var6;\n                                    var11 = func_1478(var12, var13);\n                                    var temp20 = var11;\n                                    storage[0x08] = temp20;\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!temp20) { assert(); }\n                                \n                                    storage[0x09] = storage[0x09] + var12 / var11;\n                                    var11 = storage[0x08];\n                                    var12 = var4 * 0x010000000000000000;\n                                \n                                    if (!var11) { assert(); }\n                                \n                                    var temp21 = var7;\n                                    var7 = temp21 - (temp21 - var6 * (var12 / var11));\n                                    memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                                    memory[0x20:0x40] = 0x04;\n                                    var11 = 0x0770;\n                                    var12 = storage[keccak256(memory[0x00:0x40])];\n                                    var13 = var6;\n                                    var11 = func_1478(var12, var13);\n                                    goto label_0770;\n                                }\n                            } else {\n                            label_0688:\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x05;\n                                var12 = storage[keccak256(memory[0x00:0x40])];\n                                var11 = 0x06aa;\n                                var13 = var3;\n                                var11 = func_1478(var12, var13);\n                                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x05;\n                                storage[keccak256(memory[0x00:0x40])] = var11;\n                            \n                                if (storage[0x08] <= 0x00) { goto label_0747; }\n                                else { goto label_06EF; }\n                            }\n                        } else {\n                        label_0663:\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x04;\n                        \n                            if (storage[keccak256(memory[0x00:0x40])] < storage[0x02]) { goto label_06C8; }\n                            else { goto label_0688; }\n                        }\n                    } else {\n                        var11 = storage[0x08];\n                        var12 = 0x0625;\n                        var13 = var6;\n                        var14 = var11;\n                        var12 = func_1478(var13, var14);\n                        var11 = var12 > var11;\n                        goto label_0627;\n                    }\n                } else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var11 = 0x01158e460913d00000;\n            var12 = var9;\n            var13 = 0x051f;\n            var13 = totalEthereumBalance();\n            var11 = var13 - var12 <= var11;\n            goto label_0523;\n        }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x09] - temp0 / 0x010000000000000000;\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x00;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0B7E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0B75; }\n        \n        label_0B61:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0B61; }\n        \n        label_0B75:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0B7E;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0B7E;\n        }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x08]; }\n    \n    function func_0BBA(var arg0) returns (var r0) { return arg0; }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 > storage[0x08]) { revert(memory[0x00:0x00]); }\n    \n        var var4 = 0x0bdd;\n        var var5 = arg0;\n        var4 = func_154F(var5);\n        var temp0 = var4;\n        var1 = temp0;\n        var4 = 0x0bea;\n        var5 = var1;\n        var var6 = 0x05;\n        var4 = func_148E(var5, var6);\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x0bad;\n        var5 = var1;\n        var6 = var2;\n        return func_14A5(var5, var6);\n    }\n    \n    function onlyAmbassadors() returns (var r0) { return storage[0x0b] & 0xff; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x0c28;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var2 = 0x0c3f;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        var temp0 = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var2;\n        storage[temp1] = temp2 * 0x010000000000000000 + storage[temp1];\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var temp5 = temp2 + temp4;\n        var1 = temp5;\n        var temp6 = memory[0x40:0x60];\n        var temp7;\n        temp7, memory[temp6:temp6 + 0x00] = address(temp0).call.gas(!var1 * 0x08fc).value(var1)(memory[temp6:temp6 + memory[0x40:0x60] - temp6]);\n    \n        if (!temp7) { revert(memory[0x00:0x00]); }\n    \n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = var1;\n        var temp9 = memory[0x40:0x60];\n        log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-2] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] != 0x00) {\n            var var4 = 0x0d14;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_154F(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0d21;\n            var5 = var1;\n            var var6 = 0x05;\n            var4 = func_148E(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x0d2d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_14A5(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0D33:\n            return var0;\n        } else {\n            var0 = 0x14f46b0400;\n            goto label_0D33;\n        }\n    }\n    \n    function stakingRequirement() returns (var r0) { return storage[0x02]; }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x05;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x0d77;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            return var3 + var2;\n        } else {\n            var2 = 0x0d50;\n            var3 = var1;\n            return dividendsOf(var3);\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setStakingRequirement(var arg0) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = arg0;\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x08] != 0x00) {\n            var var4 = 0x0e31;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = func_154F(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x0e3e;\n            var5 = var1;\n            var var6 = 0x05;\n            var4 = func_148E(var5, var6);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x0d2d;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_1478(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0D33:\n            return var0;\n        } else {\n            var0 = 0x199c82cc00;\n            goto label_0D33;\n        }\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0a;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = !!arg1 | (storage[temp2] & ~0xff);\n    }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x0ec8;\n        var var3 = var1;\n        var2 = balanceOf(var3);\n        var0 = var2;\n        r0 = func_0ECB(var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0ECB(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x01;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0B7E:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0B75; }\n        \n        label_0B61:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0B61; }\n        \n        label_0B75:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0B7E;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0B7E;\n        }\n    }\n    \n    function disableInitialStage() {\n        var var0 = msg.sender;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var0 & 0x02 ** 0xa0 - 0x01) * 0x01000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + (temp0 + 0x14) - temp1]);\n        memory[0x20:0x40] = 0x0a;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0b] = storage[0x0b] & ~0xff;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0fa9;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        var1 = msg.sender;\n        var5 = !(storage[0x0b] & 0xff);\n    \n        if (var5) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n        \n            if (arg1 <= storage[keccak256(memory[0x00:0x40])]) { goto label_0FEC; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var5) {\n        label_0FEC:\n            var5 = 0x00;\n            var6 = 0x0ff8;\n            var var7 = 0x01;\n            var6 = myDividends(var7);\n        \n            if (var6 <= var5) {\n            label_1006:\n                var5 = 0x1011;\n                var6 = arg1;\n                var7 = 0x05;\n                var5 = func_148E(var6, var7);\n                var temp0 = var5;\n                var2 = temp0;\n                var5 = 0x101d;\n                var6 = arg1;\n                var7 = var2;\n                var5 = func_14A5(var6, var7);\n                var3 = var5;\n                var5 = 0x1028;\n                var6 = var2;\n                var5 = func_154F(var6);\n                var4 = var5;\n                var5 = 0x1036;\n                var6 = storage[0x08];\n                var7 = var2;\n                var5 = func_14A5(var6, var7);\n                storage[0x08] = var5;\n                memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x04;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var5 = 0x105c;\n                var7 = arg1;\n                var5 = func_14A5(var6, var7);\n                var temp1 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = var1 & temp1;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x00:0x20] = arg0 & temp1;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var5 = 0x108b;\n                var7 = var3;\n                var5 = func_1478(var6, var7);\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = temp2 & arg0;\n                memory[0x00:0x20] = temp3;\n                memory[0x20:0x40] = 0x04;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                memory[0x00:0x20] = var1 & temp2;\n                memory[0x20:0x40] = 0x06;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                storage[temp4] = storage[temp4] - arg1 * storage[0x09];\n                memory[0x00:0x20] = temp3;\n                var temp5 = keccak256(memory[0x00:0x40]);\n                storage[temp5] = storage[temp5] + var3 * storage[0x09];\n                var5 = 0x10ff;\n                var7 = storage[0x08];\n                var6 = storage[0x09];\n                var var8 = var4 * 0x010000000000000000;\n            \n                if (!var7) { assert(); }\n            \n                var5 = func_10F9(var6, var7, var8);\n                storage[0x09] = var5;\n                var temp6 = 0x02 ** 0xa0 - 0x01;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = var3;\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return 0x01;\n            } else {\n                var5 = 0x1006;\n                withdraw();\n                goto label_1006;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_10F9(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1478(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = 0x1230;\n        var7 = myTokens();\n    \n        if (var7 <= var6) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var0 = msg.sender;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var6 = 0x126f;\n        var7 = var1;\n        var6 = func_154F(var7);\n        var temp0 = var6;\n        var2 = temp0;\n        var6 = 0x127c;\n        var7 = var2;\n        var var8 = 0x05;\n        var6 = func_148E(var7, var8);\n        var temp1 = var6;\n        var3 = temp1;\n        var6 = 0x1288;\n        var7 = var2;\n        var8 = var3;\n        var6 = func_14A5(var7, var8);\n        var4 = var6;\n        var6 = 0x1296;\n        var7 = storage[0x08];\n        var8 = var1;\n        var6 = func_14A5(var7, var8);\n        storage[0x08] = var6;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var6 = 0x12bc;\n        var7 = storage[keccak256(memory[0x00:0x40])];\n        var8 = var1;\n        var6 = func_14A5(var7, var8);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = var6;\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = var4 * 0x010000000000000000 + var1 * storage[0x09];\n        storage[temp2] = storage[temp2] - temp3;\n        var5 = temp3;\n    \n        if (storage[0x08] <= 0x00) {\n        label_132D:\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var4;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0xc4823739c5787d2ca17e404aa47d5569ae71dfb49cbf21b3f6152ed238a31139, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n            var6 = 0x1329;\n            var7 = storage[0x09];\n            var8 = storage[0x08];\n            var var9 = var3 * 0x010000000000000000;\n        \n            if (!var8) { assert(); }\n        \n            var6 = func_10F9(var7, var8, var9);\n            storage[0x09] = var6;\n            goto label_132D;\n        }\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_13A5:\n            var var2 = 0x13ad;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x13a5;\n            var var3 = var1;\n            sell(var3);\n            goto label_13A5;\n        }\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x13cd;\n        var var5 = 0x01;\n        var4 = myDividends(var5);\n    \n        if (var4 <= var3) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x13e1;\n        var4 = 0x00;\n        var3 = myDividends(var4);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x06;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var3;\n        storage[temp0] = temp1 * 0x010000000000000000 + storage[temp0];\n        memory[0x20:0x40] = 0x05;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = storage[temp2];\n        storage[temp2] = 0x00;\n        var0 = temp1 + temp3;\n        var1 = msg.sender;\n        var3 = 0x142d;\n        var4 = var0;\n        var5 = 0x00;\n        var3 = buy(var4, var5);\n    \n    label_142D:\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = var0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x40) - temp5], [0xbe339fc14b041c2b0e0f3dd2cd325d0c3668b78378001e53160eab3615326458, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1478(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_148E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_14A5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_14B7(var arg0) returns (var r0) {\n        var temp0 = storage[0x08];\n        var var0 = 0x00;\n        var var1 = 0x01431e0fae6d7217caa0000000;\n        var var3 = temp0;\n        var var2 = var0;\n        var var4 = 0x02540be400;\n        var var5 = 0x153c;\n        var var6 = 0x1536;\n        var var7 = var3 * 0x05e0a1fd2712875988becaad0000000000 + var3 ** 0x02 * 0x056bc75e2d63100000 + arg0 * 0x0380d4bd8a8678c1bb542c80deb4800000000000 + 0x0197d4df19d605767337e9f14d3eec8920e400000000000000;\n        var6 = func_15BB(var7);\n        var5 = func_1536(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_1536(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_14A5(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_154F(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + 0x0de0b6b3a7640000;\n        var var2 = storage[0x08] + 0x0de0b6b3a7640000;\n        var var3 = var0;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x15a8;\n        var var6 = temp0 * (var2 / var4 * 0x02540be400 + 0x14f46b0400);\n        var var7 = 0x02;\n        var var8 = (var1 ** var7 - temp0 + ~0x0de0b6b3a763ffff) / var4 * 0x02540be400;\n    \n        if (!var7) { assert(); }\n    \n        var5 = func_15A2(var6, var7, var8);\n    \n        if (var4) { return var5 / var4; }\n        else { assert(); }\n    }\n    \n    function func_15A2(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_14A5(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_15BB(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_0D7C:\n            return var0;\n        } else {\n        label_15CD:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_0D7C; }\n            else { goto label_15CD; }\n        }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 38.31872582435608,
	"usage": {
		"completion_tokens": 516,
		"prompt_tokens": 16653,
		"total_tokens": 17169
	}
}