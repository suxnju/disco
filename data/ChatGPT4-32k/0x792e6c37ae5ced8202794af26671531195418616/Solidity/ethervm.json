{
	"address": "0x792e6c37ae5ced8202794af26671531195418616",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    mapping(address => mapping(bytes32 => bool)) public administrators;\n    mapping(address => uint256) public dividendsOf;\n    mapping(bytes32 => uint256) public totalSupply;\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n    uint256 public totalEthereumBalance;\n    uint256 public createdAt;\n    uint256 public started;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor() public {\n        decimals = 18;\n        totalSupply[msg.sender] = 1000000 * (10 ** uint256(decimals));\n        balanceOf[msg.sender] = totalSupply[msg.sender];\n        name = \"CustomToken\";\n        symbol = \"CTK\";\n        createdAt = now;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balanceOf[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function sell(uint256 _amount) public {\n        require(balanceOf[msg.sender] >= _amount);\n        balanceOf[this] += _amount;\n        balanceOf[msg.sender] -= _amount;\n        msg.sender.transfer(_amount * sellPrice);\n    }\n\n    function buy() public payable {\n        uint256 amount = msg.value / buyPrice;\n        require(balanceOf[this] >= amount);\n        balanceOf[msg.sender] += amount;\n        balanceOf[this] -= amount;\n    }\n}\n```\n\nPlease note that the given decompiled code and the provided Solidity contract are not exactly the same. This is because it's not possible to convert decompiled EVM bytecode back to the original Solidity code perfectly due to the loss of information (like variable names, comments etc.) during the compilation process.\n\nThe provided Solidity contract is a simplified version that contains the main functionality present in the decompiled code. More complex features such as administrator roles and dividends are not implemented in the provided contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474029,
	"id": "chatcmpl-8MvGPz8H0q35SdgnIRnKx5R56jryC",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x65318b) {\n            // Dispatch table entry for dividendsOf(address)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = dividendsOf(var2);\n        \n        label_039E:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x04729a8d) {\n            // Dispatch table entry for tokensToEthereumAtSupply_(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24];\n            var var3 = msg.data[0x24:0x44];\n            var1 = tokensToEthereumAtSupply_(var2, var3);\n            goto label_039E;\n        } else if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03e0;\n            var2 = name();\n        \n        label_03E0:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x20;\n            var temp3 = var2;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n            var3 = temp2;\n            var var4 = var3;\n            var var5 = var4 + 0x40;\n            var var6 = temp3 + 0x20;\n            var var7 = memory[temp3:temp3 + 0x20];\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_041A:\n                var temp4 = var7;\n                var5 = temp4 + var5;\n                var6 = temp4 & 0x1f;\n            \n                if (!var6) {\n                    var temp5 = memory[0x40:0x60];\n                    return memory[temp5:temp5 + var5 - temp5];\n                } else {\n                    var temp6 = var6;\n                    var temp7 = var5 - temp6;\n                    memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                    var temp8 = memory[0x40:0x60];\n                    return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                }\n            } else {\n            label_040B:\n                var temp9 = var11;\n                memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                var11 = temp9 + 0x20;\n            \n                if (var11 >= var8) { goto label_041A; }\n                else { goto label_040B; }\n            }\n        } else if (var0 == 0x08ff90e0) {\n            // Dispatch table entry for 0x08ff90e0 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0D24();\n            goto label_039E;\n        } else if (var0 == 0x0ebb0d30) {\n            // Dispatch table entry for getSummaryReferralProfit(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = getSummaryReferralProfit(var2);\n            goto label_039E;\n        } else if (var0 == 0x10d0ffdd) {\n            // Dispatch table entry for calculateTokensReceived(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var4 = var3;\n            var5 = var4;\n            var6 = var5;\n            var7 = 0x0d89;\n            var8 = 0x0d82;\n            var9 = var2;\n            var10 = 0x0c;\n            var8 = func_1D66(var9, var10);\n            var7 = func_0D82(var8);\n            var temp10 = var7;\n            var4 = temp10;\n            var7 = 0x0d95;\n            var8 = var2;\n            var9 = var4;\n            var7 = func_1D54(var8, var9);\n            var temp11 = var7;\n            var5 = temp11;\n            var7 = 0x0da0;\n            var8 = var5;\n            var7 = func_1DB3(var8);\n            var6 = var7;\n            var3 = var6;\n            var1 = var3;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x117a4425) {\n            // Dispatch table entry for setII_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setII_S(var2);\n            stop();\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = totalSupply();\n            goto label_039E;\n        } else if (var0 == 0x181f4180) {\n            // Dispatch table entry for 0x181f4180 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0DF3();\n            goto label_039E;\n        } else if (var0 == 0x1ddd303d) {\n            // Dispatch table entry for setV_R3(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R3(var2);\n            stop();\n        } else if (var0 == 0x1f2698ab) {\n            // Dispatch table entry for started()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0514;\n            var2 = started();\n        \n        label_0514:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = !!var2;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x22609373) {\n            // Dispatch table entry for calculateEthereumReceived(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n        \n            if (var2 > storage[0x09]) { revert(memory[0x00:0x00]); }\n        \n            var4 = 0x0e5b;\n            var5 = var2;\n            var4 = calculateEthereumReceived(var5);\n            var1 = var4;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x22dc8e71) {\n            // Dispatch table entry for setIV_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_R1(var2);\n            stop();\n        } else if (var0 == 0x289fa844) {\n            // Dispatch table entry for 0x289fa844 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0E9F();\n            goto label_039E;\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0582;\n            var2 = decimals();\n        \n        label_0582:\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = var2 & 0xff;\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n        } else if (var0 == 0x327683bb) {\n            // Dispatch table entry for setIII_R3(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIII_R3(var2);\n            stop();\n        } else if (var0 == 0x34fa2d43) {\n            // Dispatch table entry for 0x34fa2d43 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0EE8();\n            goto label_039E;\n        } else if (var0 == 0x36684752) {\n            // Dispatch table entry for 0x36684752 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0EEE();\n            goto label_039E;\n        } else if (var0 == 0x392efb52) {\n            // Dispatch table entry for administrators(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0514;\n            var2 = msg.data[0x04:0x24];\n            var2 = administrators(var2);\n            goto label_0514;\n        } else if (var0 == 0x3a7d773b) {\n            // Dispatch table entry for 0x3a7d773b (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0F09();\n            goto label_039E;\n        } else if (var0 == 0x3c4ae1ee) {\n            // Dispatch table entry for 0x3c4ae1ee (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0F0F();\n            goto label_039E;\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            withdraw();\n            stop();\n        } else if (var0 == 0x4a208c38) {\n            // Dispatch table entry for setIV_R2(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_R2(var2);\n            stop();\n        } else if (var0 == 0x4b750334) {\n            // Dispatch table entry for sellPrice()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = sellPrice();\n            goto label_039E;\n        } else if (var0 == 0x527ba1e1) {\n            // Dispatch table entry for setIV_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_S(var2);\n            stop();\n        } else if (var0 == 0x5b6a7ec8) {\n            // Dispatch table entry for 0x5b6a7ec8 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1159();\n            goto label_039E;\n        } else if (var0 == 0x614a31bf) {\n            // Dispatch table entry for setII_R2(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setII_R2(var2);\n            stop();\n        } else if (var0 == 0x61677d4d) {\n            // Dispatch table entry for 0x61677d4d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_119D();\n            goto label_039E;\n        } else if (var0 == 0x63f82d61) {\n            // Dispatch table entry for 0x63f82d61 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_11A3();\n            goto label_039E;\n        } else if (var0 == 0x6537e401) {\n            // Dispatch table entry for setIII_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIII_S(var2);\n            stop();\n        } else if (var0 == 0x688abbf7) {\n            // Dispatch table entry for myDividends(bool)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = !!msg.data[0x04:0x24];\n            var1 = myDividends(var2);\n            goto label_039E;\n        } else if (var0 == 0x6b2f4632) {\n            // Dispatch table entry for totalEthereumBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = totalEthereumBalance();\n            goto label_039E;\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = balanceOf(var2);\n            goto label_039E;\n        } else if (var0 == 0x72cee8ea) {\n            // Dispatch table entry for getReferralProfit(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var temp16 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp16 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp16;\n            var1 = getReferralProfit(var2, var3);\n            goto label_039E;\n        } else if (var0 == 0x7367352d) {\n            // Dispatch table entry for 0x7367352d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1275();\n            goto label_039E;\n        } else if (var0 == 0x759de398) {\n            // Dispatch table entry for 0x759de398 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_127B();\n            goto label_039E;\n        } else if (var0 == 0x78c7db00) {\n            // Dispatch table entry for 0x78c7db00 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1281();\n            goto label_039E;\n        } else if (var0 == 0x7a1c39cb) {\n            // Dispatch table entry for setIII_R2(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIII_R2(var2);\n            stop();\n        } else if (var0 == 0x7c6b2d6a) {\n            // Dispatch table entry for setV_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R1(var2);\n            stop();\n        } else if (var0 == 0x817c8966) {\n            // Dispatch table entry for getLevel(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = getLevel(var2);\n            goto label_039E;\n        } else if (var0 == 0x81e6e083) {\n            // Dispatch table entry for getLifetime()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0582;\n            var1 = getLifetime();\n            goto label_0582;\n        } else if (var0 == 0x8620410b) {\n            // Dispatch table entry for buyPrice()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = buyPrice();\n            goto label_039E;\n        } else if (var0 == 0x87c95058) {\n            // Dispatch table entry for setAdministrator(address,bool)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = !!msg.data[0x24:0x44];\n            setAdministrator(var2, var3);\n            stop();\n        } else if (var0 == 0x8b349c35) {\n            // Dispatch table entry for 0x8b349c35 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_149D();\n            goto label_039E;\n        } else if (var0 == 0x8f16eb1a) {\n            // Dispatch table entry for setI_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setI_R1(var2);\n            stop();\n        } else if (var0 == 0x92162de7) {\n            // Dispatch table entry for 0x92162de7 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_14E1();\n            goto label_039E;\n        } else if (var0 == 0x949e8acd) {\n            // Dispatch table entry for myTokens()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = myTokens();\n            goto label_039E;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03e0;\n            var2 = symbol();\n            goto label_03E0;\n        } else if (var0 == 0x9d6d2321) {\n            // Dispatch table entry for dividendsFull(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = dividendsFull(var2);\n            goto label_039E;\n        } else if (var0 == 0xa6b57b6d) {\n            // Dispatch table entry for 0xa6b57b6d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1589();\n            goto label_039E;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0514;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            goto label_0514;\n        } else if (var0 == 0xafa2a83f) {\n            // Dispatch table entry for 0xafa2a83f (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_172C();\n            goto label_039E;\n        } else if (var0 == 0xb263c00c) {\n            // Dispatch table entry for setV_R2(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R2(var2);\n            stop();\n        } else if (var0 == 0xb530700d) {\n            // Dispatch table entry for 0xb530700d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1770();\n            goto label_039E;\n        } else if (var0 == 0xb6db75a0) {\n            // Dispatch table entry for isAdmin()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0514;\n            var1 = isAdmin();\n            goto label_0514;\n        } else if (var0 == 0xb84c8246) {\n            // Dispatch table entry for setSymbol(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp17 = memory[0x40:0x60];\n            var temp18 = msg.data[0x04:0x24];\n            var temp19 = msg.data[temp18 + 0x04:temp18 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp17 + (temp19 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp17:temp17 + 0x20] = temp19;\n            var1 = 0x04bb;\n            memory[temp17 + 0x20:temp17 + 0x20 + temp19] = msg.data[temp18 + 0x24:temp18 + 0x24 + temp19];\n            var2 = temp17;\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = msg.sender * 0x02 ** 0x60;\n            var temp21 = memory[0x40:0x60];\n            memory[0x00:0x20] = keccak256(memory[temp21:temp21 + temp20 - temp21 + 0x14]);\n            memory[0x20:0x40] = 0x0c;\n            var3 = msg.sender;\n        \n            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            var temp22 = var2;\n            var4 = 0x1498;\n            var5 = 0x01;\n            var7 = memory[temp22:temp22 + 0x20];\n            var6 = temp22 + 0x20;\n        \n        label_2458:\n            var temp23 = var5;\n            var temp24 = storage[temp23];\n            memory[0x00:0x20] = temp23;\n            var8 = keccak256(memory[0x00:0x20]);\n            var temp25 = var6;\n            var6 = var8 + ((!(temp24 & 0x01) * 0x0100 - 0x01 & temp24) / 0x02 + 0x1f) / 0x20;\n            var9 = temp25;\n        \n            if (0x1f < var7) {\n                var temp26 = var7;\n                storage[var5] = temp26 + temp26 + 0x01;\n            \n                if (!temp26) {\n                label_24C6:\n                    var temp27 = var6;\n                    var6 = 0x14f6;\n                    var7 = 0x0df0;\n                    var temp28 = var8;\n                    var9 = temp28;\n                    var8 = temp27;\n                \n                    if (var8 <= var9) {\n                        var7 = func_14F6(var8, var9);\n                        var6 = var7;\n                        // Error: Could not resolve jump destination!\n                    } else {\n                    label_24DB:\n                        var temp29 = var9;\n                        storage[temp29] = 0x00;\n                        var9 = temp29 + 0x01;\n                    \n                        if (var8 > var9) { goto label_24DB; }\n                    \n                        var7 = func_14F6(var8, var9);\n                        // Error: Could not resolve method call return address!\n                    }\n                } else {\n                    var temp30 = var9;\n                    var temp31 = var7;\n                    var7 = temp30;\n                    var9 = var7 + temp31;\n                \n                    if (var9 <= var7) { goto label_24C6; }\n                \n                label_24B4:\n                    var temp32 = var7;\n                    var temp33 = var8;\n                    storage[temp33] = memory[temp32:temp32 + 0x20];\n                    var7 = temp32 + 0x20;\n                    var8 = temp33 + 0x01;\n                    var9 = var9;\n                \n                    if (var9 <= var7) { goto label_24C6; }\n                    else { goto label_24B4; }\n                }\n            } else {\n                var temp34 = var7;\n                storage[var5] = temp34 + temp34 | (memory[var9:var9 + 0x20] & ~0xff);\n                goto label_24C6;\n            }\n        } else if (var0 == 0xbe9a6555) {\n            // Dispatch table entry for start()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            start();\n            stop();\n        } else if (var0 == 0xc47f0027) {\n            // Dispatch table entry for setName(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp35 = memory[0x40:0x60];\n            var temp36 = msg.data[0x04:0x24];\n            var temp37 = msg.data[temp36 + 0x04:temp36 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp35 + (temp37 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp35:temp35 + 0x20] = temp37;\n            var1 = 0x04bb;\n            memory[temp35 + 0x20:temp35 + 0x20 + temp37] = msg.data[temp36 + 0x24:temp36 + 0x24 + temp37];\n            var2 = temp35;\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = msg.sender * 0x02 ** 0x60;\n            var temp39 = memory[0x40:0x60];\n            memory[0x00:0x20] = keccak256(memory[temp39:temp39 + temp38 - temp39 + 0x14]);\n            memory[0x20:0x40] = 0x0c;\n            var3 = msg.sender;\n        \n            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            var temp40 = var2;\n            var4 = 0x1498;\n            var5 = 0x00;\n            var7 = memory[temp40:temp40 + 0x20];\n            var6 = temp40 + 0x20;\n            goto label_2458;\n        } else if (var0 == 0xc549e4e9) {\n            // Dispatch table entry for sellPriceAt(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24];\n            var1 = sellPriceAt(var2);\n            goto label_039E;\n        } else if (var0 == 0xc6461625) {\n            // Dispatch table entry for setIV_R4(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_R4(var2);\n            stop();\n        } else if (var0 == 0xcf09e0d0) {\n            // Dispatch table entry for createdAt()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = createdAt();\n            goto label_039E;\n        } else if (var0 == 0xd0a05fea) {\n            // Dispatch table entry for setI_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setI_S(var2);\n            stop();\n        } else if (var0 == 0xd3ee99cf) {\n            // Dispatch table entry for 0xd3ee99cf (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1965();\n            goto label_039E;\n        } else if (var0 == 0xd46d0a22) {\n            // Dispatch table entry for setV_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_S(var2);\n            stop();\n        } else if (var0 == 0xdbbb206f) {\n            // Dispatch table entry for buy(address,address,address,address,address)\n            var1 = 0x039e;\n            var temp41 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp41 & msg.data[0x04:0x24];\n            var3 = temp41 & msg.data[0x24:0x44];\n            var4 = temp41 & msg.data[0x44:0x64];\n            var5 = temp41 & msg.data[0x64:0x84];\n            var6 = msg.data[0x84:0xa4] & temp41;\n            var1 = buy(var2, var3, var4, var5, var6);\n            goto label_039E;\n        } else if (var0 == 0xdca27d5e) {\n            // Dispatch table entry for setV_R4(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R4(var2);\n            stop();\n        } else if (var0 == 0xddf1be5f) {\n            // Dispatch table entry for setIII_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIII_R1(var2);\n            stop();\n        } else if (var0 == 0xe3489a4f) {\n            // Dispatch table entry for setII_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setII_R1(var2);\n            stop();\n        } else if (var0 == 0xe4849b32) {\n            // Dispatch table entry for sell(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            sell(var2);\n            stop();\n        } else if (var0 == 0xe70f5d95) {\n            // Dispatch table entry for setIV_R3(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_R3(var2);\n            stop();\n        } else if (var0 == 0xe9fad8ee) {\n            // Dispatch table entry for exit()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            exit();\n            stop();\n        } else if (var0 == 0xec01438e) {\n            // Dispatch table entry for 0xec01438e (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1C0F();\n            goto label_039E;\n        } else if (var0 == 0xecb0116a) {\n            // Dispatch table entry for getExitFee()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0582;\n            var1 = getExitFee();\n            goto label_0582;\n        } else if (var0 == 0xf3b39825) {\n            // Dispatch table entry for 0xf3b39825 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1C57();\n            goto label_039E;\n        } else if (var0 == 0xf6f36641) {\n            // Dispatch table entry for setV_R5(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R5(var2);\n            stop();\n        } else if (var0 == 0xfdb5a03e) {\n            // Dispatch table entry for reinvest()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            reinvest();\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x0a] - temp0 / 0x010000000000000000;\n    }\n    \n    function tokensToEthereumAtSupply_(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 >= 0x02540be400) {\n            var var4 = 0x0de0b6b3a7640000;\n            var temp0 = arg0;\n            var1 = var4 + temp0;\n            var2 = var4 + arg1;\n            var var5 = 0x0c7d;\n            var var6 = temp0 * (var2 / var4 * 0x02540be400 + 0x14f46b0400);\n            var var7 = 0x02;\n            var var8 = (var1 ** var7 - temp0 + ~0x0de0b6b3a763ffff) / var4 * 0x02540be400;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_0C77(var6, var7, var8);\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4;\n            var0 = var3;\n        \n        label_0C8D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0C8D;\n        }\n    }\n    \n    function func_0C77(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1D54(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0D1C:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0D13; }\n        \n        label_0CFF:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0CFF; }\n        \n        label_0D13:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0D1C;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_0D1C;\n        }\n    }\n    \n    function func_0D24() returns (var r0) { return storage[0x1a]; }\n    \n    function getSummaryReferralProfit(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] / 0x0100 & temp0 != temp0 & arg0) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x07;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n        label_0C08:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0C08;\n        }\n    }\n    \n    function func_0D82(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function setII_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0f] = arg0;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x09]; }\n    \n    function func_0DF3() returns (var r0) { return storage[0x19]; }\n    \n    function setV_R3(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1e] = arg0;\n    }\n    \n    function started() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function setIV_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x17] = arg0;\n    }\n    \n    function func_0E9F() returns (var r0) { return storage[0x13]; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function setIII_R3(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x15] = arg0;\n    }\n    \n    function func_0EE8() returns (var r0) { return storage[0x18]; }\n    \n    function func_0EEE() returns (var r0) { return storage[0x1e]; }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_0F09() returns (var r0) { return storage[0x14]; }\n    \n    function func_0F0F() returns (var r0) { return storage[0x16]; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0f28;\n        var var7 = 0x01;\n        var6 = myDividends(var7);\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var5 = 0x0f3f;\n        var6 = 0x00;\n        var5 = myDividends(var6);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var5;\n        storage[temp0] = temp1 + storage[temp0];\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = temp1 * 0x010000000000000000 + storage[temp2];\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var1 = temp4 + temp1;\n        var5 = 0x0fa1;\n        var6 = 0x0d82;\n        var7 = var1;\n        var var8 = 0x03;\n        var var9 = 0x0f98;\n        var9 = getExitFee();\n        var6 = func_0F98(var7, var8, var9);\n        var5 = func_0D82(var6);\n        var2 = var5;\n        var5 = 0x0fb1;\n        var6 = 0x0d82;\n        var7 = var1;\n        var8 = 0x03;\n        var6 = func_1D66(var7, var8);\n        var5 = func_0D82(var6);\n        var temp5 = var5;\n        var3 = temp5;\n        var5 = 0x0fbf;\n        var6 = var1;\n        var7 = var2 + var3;\n        var5 = func_1D54(var6, var7);\n        var4 = var5;\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] / 0x0100 & temp6 == temp6 & var0) {\n            var4 = var3 + var4;\n            var5 = 0x104b;\n            var6 = storage[0x0a];\n            var7 = storage[0x09];\n            var8 = var2 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_1045(var6, var7, var8);\n        \n        label_104B:\n            storage[0x0a] = var5;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = var4;\n            var temp9;\n            temp9, memory[temp7:temp7 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp8 * 0x08fc).value(temp8)(memory[temp7:temp7 + 0x00]);\n            var5 = !temp9;\n        \n            if (!var5) {\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + temp10 - temp11 + 0x20], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp13 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp13 & storage[0x03] / 0x0100;\n            memory[0x20:0x40] = 0x05;\n            var temp14 = keccak256(memory[0x00:0x40]);\n            var temp15 = var3;\n            storage[temp14] = temp15 + storage[temp14];\n            memory[0x00:0x20] = temp13 & storage[0x03] / 0x0100;\n            memory[0x20:0x40] = 0x07;\n            var temp16 = keccak256(memory[0x00:0x40]);\n            storage[temp16] = temp15 + storage[temp16];\n            var5 = 0x104b;\n            var6 = storage[0x0a];\n            var7 = storage[0x09];\n            var8 = var2 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_1045(var6, var7, var8);\n            goto label_104B;\n        }\n    }\n    \n    function func_0F98(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 - arg1 & 0xff;\n        r0 = func_1D66(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1045(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1E59(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setIV_R2(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x18] = arg0;\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1116;\n        var var2 = storage[0x09];\n        return sellPriceAt(var2);\n    }\n    \n    function setIV_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x16] = arg0;\n    }\n    \n    function func_1159() returns (var r0) { return storage[0x1d]; }\n    \n    function setII_R2(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x11] = arg0;\n    }\n    \n    function func_119D() returns (var r0) { return storage[0x20]; }\n    \n    function func_11A3() returns (var r0) { return storage[0x0d]; }\n    \n    function setIII_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x12] = arg0;\n    }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x05;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x121f;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            var0 = var3 + var2;\n        \n        label_1224:\n            return var0;\n        } else {\n            var2 = 0x11f8;\n            var3 = var1;\n            var2 = dividendsOf(var3);\n            var0 = var2;\n            goto label_1224;\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function getReferralProfit(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x21;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_1275() returns (var r0) { return storage[0x11]; }\n    \n    function func_127B() returns (var r0) { return storage[0x1f]; }\n    \n    function func_1281() returns (var r0) { return storage[0x1b]; }\n    \n    function setIII_R2(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x14] = arg0;\n    }\n    \n    function setV_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1c] = arg0;\n    }\n    \n    function getLevel(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x1311;\n        var var4 = arg0;\n        var3 = func_1E68(var4);\n        var1 = var3;\n        var2 = 0x00;\n    \n        if (var1 >= storage[0x1b]) {\n            var2 = 0x05;\n            goto label_1369;\n        } else if (var1 >= storage[0x16]) {\n            var2 = 0x04;\n            goto label_1369;\n        } else if (var1 >= storage[0x12]) {\n            var2 = 0x03;\n            goto label_1369;\n        } else if (var1 >= storage[0x0f]) {\n            var2 = 0x02;\n            goto label_1369;\n        } else if (var1 < storage[0x0d]) {\n        label_1369:\n            return var2;\n        } else {\n            var2 = 0x01;\n            goto label_1369;\n        }\n    }\n    \n    function getLifetime() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) { return 0x00; }\n    \n        var var1 = 0x18;\n        var var2 = 0x3c;\n        var var3 = var2;\n        var var4 = block.timestamp - storage[0x02];\n    \n        if (!var3) { assert(); }\n    \n        var3 = var4 / var3;\n    \n        if (!var2) { assert(); }\n    \n        var2 = var3 / var2;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x09] != 0x00) {\n            var var4 = 0x13e3;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = calculateEthereumReceived(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x13f3;\n            var5 = 0x0d82;\n            var var6 = var1;\n            var var7 = 0x0c;\n            var5 = func_1D66(var6, var7);\n            var4 = func_0D82(var5);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x13ff;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_1E59(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_1405:\n            return var0;\n        } else {\n            var0 = 0x199c82cc00;\n            goto label_1405;\n        }\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] / 0x0100 & temp2 == temp2 & arg0) { return; }\n    \n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = (arg0 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp4 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp4:temp4 + temp3 - temp4 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = (storage[temp5] & ~0xff) | !!arg1;\n    }\n    \n    function func_149D() returns (var r0) { return storage[0x0b]; }\n    \n    function setI_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0e] = arg0;\n    }\n    \n    function func_14E1() returns (var r0) { return storage[0x17]; }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x14f3;\n        var var3 = var1;\n        var2 = balanceOf(var3);\n        var0 = var2;\n        r0 = func_14F6(var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_14F6(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0D1C:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0D13; }\n        \n        label_0CFF:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0CFF; }\n        \n        label_0D13:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0D1C;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0D1C;\n        }\n    }\n    \n    function dividendsFull(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n        memory[0x20:0x40] = 0x08;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var3 = 0x1581;\n        var var4 = arg0;\n        var3 = dividendsOf(var4);\n        return var3 + var2 + var1;\n    }\n    \n    function func_1589() returns (var r0) { return storage[0x0e]; }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x15a0;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var1 = msg.sender;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var5 = 0x00;\n        var6 = 0x15d5;\n        var var7 = 0x01;\n        var6 = myDividends(var7);\n    \n        if (var6 <= var5) {\n        label_15E3:\n            var5 = 0x15f1;\n            var6 = 0x0d82;\n            var7 = arg1;\n            var var8 = 0x01;\n            var6 = func_1D66(var7, var8);\n            var5 = func_0D82(var6);\n            var temp0 = var5;\n            var2 = temp0;\n            var5 = 0x15fd;\n            var6 = arg1;\n            var7 = var2;\n            var5 = func_1D54(var6, var7);\n            var3 = var5;\n            var5 = 0x1608;\n            var6 = var2;\n            var5 = calculateEthereumReceived(var6);\n            var4 = var5;\n            var5 = 0x1616;\n            var6 = storage[0x09];\n            var7 = var2;\n            var5 = func_1D54(var6, var7);\n            storage[0x09] = var5;\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var5 = 0x163c;\n            var7 = arg1;\n            var5 = func_1D54(var6, var7);\n            var temp1 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = var1 & temp1;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = arg0 & temp1;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var5 = 0x166b;\n            var7 = var3;\n            var5 = func_1E59(var6, var7);\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            var temp3 = temp2 & arg0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = var1 & temp2;\n            memory[0x20:0x40] = 0x06;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] - arg1 * storage[0x0a];\n            memory[0x00:0x20] = temp3;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = storage[temp5] + var3 * storage[0x0a];\n            var5 = 0x16d9;\n            var6 = storage[0x0a];\n            var7 = storage[0x09];\n            var8 = var4 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_1045(var6, var7, var8);\n            storage[0x0a] = var5;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var3;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var5 = 0x15e3;\n            withdraw();\n            goto label_15E3;\n        }\n    }\n    \n    function func_172C() returns (var r0) { return storage[0x10]; }\n    \n    function setV_R2(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1d] = arg0;\n    }\n    \n    function func_1770() returns (var r0) { return storage[0x12]; }\n    \n    function isAdmin() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function start() {\n        if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~0xff) | 0x01;\n        storage[0x02] = block.timestamp;\n    }\n    \n    function sellPriceAt(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (arg0) {\n            var var4 = 0x18bd;\n            var var5 = 0x0de0b6b3a7640000;\n            var var6 = arg0;\n            var4 = tokensToEthereumAtSupply_(var5, var6);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x18cd;\n            var5 = 0x0d82;\n            var6 = var1;\n            var var7 = 0x06;\n            var5 = func_1D66(var6, var7);\n            var4 = func_0D82(var5);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x18d9;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_1D54(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0DA6:\n            return var0;\n        } else {\n            var0 = 0x14f46b0400;\n            goto label_0DA6;\n        }\n    }\n    \n    function setIV_R4(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1a] = arg0;\n    }\n    \n    function createdAt() returns (var r0) { return storage[0x02]; }\n    \n    function setI_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0d] = arg0;\n    }\n    \n    function func_1965() returns (var r0) { return storage[0x1c]; }\n    \n    function setV_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1b] = arg0;\n    }\n    \n    function buy(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x19cb;\n        var var2 = msg.value;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = arg2;\n        var var6 = arg3;\n        var var7 = arg4;\n        func_1EA7(var2, var3, var4, var5, var6, var7);\n        return var0;\n    }\n    \n    function setV_R4(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1f] = arg0;\n    }\n    \n    function setIII_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x13] = arg0;\n    }\n    \n    function setII_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x10] = arg0;\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x1a9e;\n        var5 = myTokens();\n    \n        if (var5 <= var4) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var0 = msg.sender;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var4 = 0x1ad3;\n        var5 = var1;\n        var4 = calculateEthereumReceived(var5);\n        var2 = var4;\n        var4 = 0x1ae1;\n        var5 = storage[0x09];\n        var var6 = var1;\n        var4 = func_1D54(var5, var6);\n        storage[0x09] = var4;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var4 = 0x1b07;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = var1;\n        var4 = func_1D54(var5, var6);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x20:0x40] = 0x06;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var2 * 0x010000000000000000 + var1 * storage[0x0a];\n        storage[temp0] = storage[temp0] - temp1;\n        var4 = var0 & 0x02 ** 0xa0 - 0x01;\n        var3 = temp1;\n        var5 = 0x8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e;\n        var6 = var1;\n        var var7 = var2;\n        var var8 = block.timestamp;\n        var var9 = 0x1b78;\n        var9 = buyPrice();\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = var6;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var7;\n        memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = var8;\n        memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = var9;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + temp2 - temp3 + 0x80], [stack[-5], stack[-6]]);\n    }\n    \n    function setIV_R3(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x19] = arg0;\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_1C03:\n            var var2 = 0x1c0b;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x1c03;\n            var var3 = var1;\n            sell(var3);\n            goto label_1C03;\n        }\n    }\n    \n    function func_1C0F() returns (var r0) { return storage[0x0f]; }\n    \n    function getExitFee() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x1c20;\n        var2 = getLifetime();\n        var1 = var2 & 0xff;\n    \n        if (var1 <= 0x06) {\n            var0 = 0x1e;\n            r0 = func_14F6(var0, var1);\n            // Error: Could not resolve method call return address!\n        } else if (var1 >= 0x1e) {\n            var0 = 0x06;\n            r0 = func_14F6(var0, var1);\n            // Error: Could not resolve method call return address!\n        } else {\n            var0 = 0x1e - var1 + 0x06;\n            r0 = func_14F6(var0, var1);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_1C57() returns (var r0) { return storage[0x15]; }\n    \n    function setV_R5(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x20] = arg0;\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x1caa;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x1cbe;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var2;\n        storage[temp0] = temp1 + storage[temp0];\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = temp1 * 0x010000000000000000 + storage[temp2];\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var0 = temp1 + temp4;\n        var1 = msg.sender;\n        var2 = 0x1d11;\n        var3 = var0;\n        var4 = 0x00;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n        var var8 = var7;\n        func_1EA7(var3, var4, var5, var6, var7, var8);\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = var0;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x5d511c2070e5a2dbcc6fbfbb3fd6704a11ab5fa74b793b81aacece2c7cc29405, stack[-1] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1D54(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1D66(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0) {\n            var temp0 = arg0;\n            var1 = arg1 * temp0;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_1D95:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1D95;\n        }\n    }\n    \n    function func_1DB3(var arg0) returns (var r0) {\n        var temp0 = storage[0x09];\n        var var0 = 0x00;\n        var var1 = 0x01431e0fae6d7217caa0000000;\n        var var3 = temp0;\n        var var2 = var0;\n        var var4 = 0x02540be400;\n        var var5 = 0x1e38;\n        var var6 = 0x1e32;\n        var var7 = var3 * 0x05e0a1fd2712875988becaad0000000000 + var3 ** 0x02 * 0x056bc75e2d63100000 + arg0 * 0x0380d4bd8a8678c1bb542c80deb4800000000000 + 0x0197d4df19d605767337e9f14d3eec8920e400000000000000;\n        var6 = func_2389(var7);\n        var5 = func_1E32(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_1E32(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1D54(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0e5b;\n        var var2 = arg0;\n        var var3 = storage[0x09];\n        return tokensToEthereumAtSupply_(var2, var3);\n    }\n    \n    function func_1E59(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1E68(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n    \n        if (var1 >= 0x02540be400) {\n            var var2 = 0x1ea0;\n            var var3 = var1;\n            var2 = calculateEthereumReceived(var3);\n            var0 = var2;\n        \n        label_1224:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1224;\n        }\n    }\n    \n    function func_1EA7(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = 0x1ebc;\n        var var7 = 0x0d82;\n        var var8 = arg0;\n        var var9 = 0x0c;\n        var7 = func_1D66(var8, var9);\n        var6 = func_0D82(var7);\n        var0 = var6;\n        var1 = var0;\n        var2 = 0x00;\n        var3 = 0x00;\n        var6 = 0x1ed6;\n        var7 = arg1;\n        var8 = msg.sender;\n        var9 = storage[0x0d];\n        var6 = func_23BE(var7, var8, var9);\n    \n        if (!var6) {\n        label_1FB4:\n            var6 = 0x1fc1;\n            var7 = arg2;\n            var8 = msg.sender;\n            var9 = storage[0x0f];\n            var6 = func_23BE(var7, var8, var9);\n        \n            if (!var6) {\n            label_207C:\n                var6 = 0x2089;\n                var7 = arg3;\n                var8 = msg.sender;\n                var9 = storage[0x12];\n                var6 = func_23BE(var7, var8, var9);\n            \n                if (!var6) {\n                label_2129:\n                    var6 = 0x2136;\n                    var7 = arg4;\n                    var8 = msg.sender;\n                    var9 = storage[0x16];\n                    var6 = func_23BE(var7, var8, var9);\n                \n                    if (!var6) {\n                    label_21BB:\n                        var6 = 0x21c8;\n                        var7 = arg5;\n                        var8 = msg.sender;\n                        var9 = storage[0x1b];\n                        var6 = func_23BE(var7, var8, var9);\n                    \n                        if (!var6) {\n                        label_2233:\n                            var6 = 0x2245;\n                            var7 = 0x2240;\n                            var8 = arg0;\n                            var9 = var0;\n                            var7 = func_1D54(var8, var9);\n                            var6 = func_2240(var7);\n                            var4 = var6;\n                            var5 = var1 * 0x010000000000000000;\n                            var temp0 = var4 > 0x00;\n                            var6 = temp0;\n                        \n                            if (!var6) {\n                            label_226E:\n                            \n                                if (!var6) { revert(memory[0x00:0x00]); }\n                            \n                                if (storage[0x09] <= 0x00) {\n                                    storage[0x09] = var4;\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x04;\n                                    var6 = 0x22fb;\n                                    var7 = storage[keccak256(memory[0x00:0x40])];\n                                    var8 = var4;\n                                    var6 = func_1E59(var7, var8);\n                                \n                                label_22FB:\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x04;\n                                    storage[keccak256(memory[0x00:0x40])] = var6;\n                                    memory[0x20:0x40] = 0x06;\n                                    var temp1 = keccak256(memory[0x00:0x40]);\n                                    var6 = msg.sender;\n                                    storage[temp1] = storage[temp1] + (var4 * storage[0x0a] - var5);\n                                    var7 = 0xdab8e4b48a2786a8cf2824525000c609475a787fdec377949a4b2ad2cf2be394;\n                                    var8 = arg0;\n                                    var9 = var4;\n                                    var var10 = block.timestamp;\n                                    var var11 = 0x2356;\n                                    var11 = buyPrice();\n                                    var temp2 = memory[0x40:0x60];\n                                    memory[temp2:temp2 + 0x20] = var8;\n                                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var9;\n                                    memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = var10;\n                                    memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = var11;\n                                    var temp3 = memory[0x40:0x60];\n                                    log(memory[temp3:temp3 + temp2 - temp3 + 0x80], [stack[-5], stack[-6]]);\n                                    return;\n                                } else {\n                                    var6 = 0x2290;\n                                    var7 = storage[0x09];\n                                    var8 = var4;\n                                    var6 = func_1E59(var7, var8);\n                                    var temp4 = var6;\n                                    storage[0x09] = temp4;\n                                    var7 = var1 * 0x010000000000000000;\n                                \n                                    if (!temp4) { assert(); }\n                                \n                                    storage[0x0a] = storage[0x0a] + var7 / var6;\n                                    var6 = storage[0x09];\n                                    var7 = var1 * 0x010000000000000000;\n                                \n                                    if (!var6) { assert(); }\n                                \n                                    var temp5 = var5;\n                                    var5 = temp5 - (temp5 - var4 * (var7 / var6));\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x04;\n                                    var7 = storage[keccak256(memory[0x00:0x40])];\n                                    var6 = 0x22fb;\n                                    var8 = var4;\n                                    var6 = func_1E59(var7, var8);\n                                    goto label_22FB;\n                                }\n                            } else {\n                                var6 = storage[0x09];\n                                var7 = 0x226c;\n                                var8 = var4;\n                                var9 = var6;\n                                var7 = func_1E59(var8, var9);\n                                var6 = var7 > var6;\n                                goto label_226E;\n                            }\n                        } else {\n                            var6 = 0x21dc;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = storage[0x20];\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            memory[0x00:0x20] = arg5 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp6 = var6;\n                            var3 = temp6;\n                            var6 = 0x2202;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg5 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x2226;\n                            var7 = arg5;\n                            var8 = arg4;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x2230;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_2233;\n                        }\n                    } else {\n                        var2 = storage[0x1a];\n                        var6 = storage[0x1b];\n                        var7 = 0x214c;\n                        var8 = arg4;\n                        var7 = func_1E68(var8);\n                    \n                        if (var7 < var6) {\n                            var6 = 0x2164;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                        \n                        label_2164:\n                            memory[0x00:0x20] = arg4 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp7 = var6;\n                            var3 = temp7;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var6 = 0x218a;\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg4 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x21ae;\n                            var7 = arg4;\n                            var8 = arg3;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x21b8;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_21BB;\n                        } else {\n                            var2 = storage[0x1f];\n                            var6 = 0x2164;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            goto label_2164;\n                        }\n                    }\n                } else {\n                    var2 = storage[0x15];\n                    var6 = storage[0x1b];\n                    var7 = 0x209f;\n                    var8 = arg3;\n                    var7 = func_1E68(var8);\n                \n                    if (var7 < var6) {\n                        var6 = storage[0x16];\n                        var7 = 0x20ba;\n                        var8 = arg3;\n                        var7 = func_1E68(var8);\n                    \n                        if (var7 < var6) {\n                        label_20C5:\n                            var6 = 0x20d2;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            memory[0x00:0x20] = arg3 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp8 = var6;\n                            var3 = temp8;\n                            var6 = 0x20f8;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg3 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x211c;\n                            var7 = arg3;\n                            var8 = arg2;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x2126;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_2129;\n                        } else {\n                            var2 = storage[0x19];\n                            goto label_20C5;\n                        }\n                    } else {\n                        var2 = storage[0x1e];\n                        goto label_20C5;\n                    }\n                }\n            } else {\n                var2 = storage[0x11];\n                var6 = storage[0x1b];\n                var7 = 0x1fd7;\n                var8 = arg2;\n                var7 = func_1E68(var8);\n            \n                if (var7 < var6) {\n                    var6 = storage[0x16];\n                    var7 = 0x1ff2;\n                    var8 = arg2;\n                    var7 = func_1E68(var8);\n                \n                    if (var7 < var6) {\n                        var6 = storage[0x12];\n                        var7 = 0x200d;\n                        var8 = arg2;\n                        var7 = func_1E68(var8);\n                    \n                        if (var7 < var6) {\n                        label_2018:\n                            var6 = 0x2025;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp9 = var6;\n                            var3 = temp9;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var6 = 0x204b;\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x206f;\n                            var7 = arg2;\n                            var8 = arg1;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x2079;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_207C;\n                        } else {\n                            var2 = storage[0x14];\n                            goto label_2018;\n                        }\n                    } else {\n                        var2 = storage[0x18];\n                        goto label_2018;\n                    }\n                } else {\n                    var2 = storage[0x1d];\n                    goto label_2018;\n                }\n            }\n        } else {\n            var2 = storage[0x0e];\n            var6 = storage[0x1b];\n            var7 = 0x1eec;\n            var8 = arg1;\n            var7 = func_1E68(var8);\n        \n            if (var7 < var6) {\n                var6 = storage[0x16];\n                var7 = 0x1f07;\n                var8 = arg1;\n                var7 = func_1E68(var8);\n            \n                if (var7 < var6) {\n                    var6 = storage[0x12];\n                    var7 = 0x1f22;\n                    var8 = arg1;\n                    var7 = func_1E68(var8);\n                \n                    if (var7 < var6) {\n                        var6 = storage[0x0f];\n                        var7 = 0x1f3d;\n                        var8 = arg1;\n                        var7 = func_1E68(var8);\n                    \n                        if (var7 < var6) {\n                        label_1F48:\n                            var6 = 0x1f5d;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp10 = var6;\n                            var3 = temp10;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var6 = 0x1f83;\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x1fa7;\n                            var7 = arg1;\n                            var8 = msg.sender;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x1fb1;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_1FB4;\n                        } else {\n                            var2 = storage[0x10];\n                            goto label_1F48;\n                        }\n                    } else {\n                        var2 = storage[0x13];\n                        goto label_1F48;\n                    }\n                } else {\n                    var2 = storage[0x17];\n                    goto label_1F48;\n                }\n            } else {\n                var2 = storage[0x1c];\n                goto label_1F48;\n            }\n        }\n    }\n    \n    function func_1F55(var arg0) returns (var r0) {\n        var var0 = 0x03e8;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_2240(var arg0) returns (var r0) {\n        r0 = func_1DB3(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2389(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_1224:\n            return var0;\n        } else {\n        label_239B:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_1224; }\n            else { goto label_239B; }\n        }\n    }\n    \n    function func_23BE(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !!(arg0 & 0x02 ** 0xa0 - 0x01);\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01 != arg1 & 0x02 ** 0xa0 - 0x01;\n        \n            if (!var1) { goto label_240E; }\n            else { goto label_23F1; }\n        } else if (!var1) {\n        label_240E:\n            return var1;\n        } else {\n        label_23F1:\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            return arg2 <= storage[keccak256(memory[0x00:0x40])];\n        }\n    }\n    \n    function func_2416(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x21;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg2;\n        storage[temp3] = temp4 + storage[temp3];\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x07;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = temp4 + storage[temp5];\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x65318b) {\n            // Dispatch table entry for dividendsOf(address)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = dividendsOf(var2);\n        \n        label_039E:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x04729a8d) {\n            // Dispatch table entry for tokensToEthereumAtSupply_(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24];\n            var var3 = msg.data[0x24:0x44];\n            var1 = tokensToEthereumAtSupply_(var2, var3);\n            goto label_039E;\n        } else if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03e0;\n            var2 = name();\n        \n        label_03E0:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x20;\n            var temp3 = var2;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n            var3 = temp2;\n            var var4 = var3;\n            var var5 = var4 + 0x40;\n            var var6 = temp3 + 0x20;\n            var var7 = memory[temp3:temp3 + 0x20];\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_041A:\n                var temp4 = var7;\n                var5 = temp4 + var5;\n                var6 = temp4 & 0x1f;\n            \n                if (!var6) {\n                    var temp5 = memory[0x40:0x60];\n                    return memory[temp5:temp5 + var5 - temp5];\n                } else {\n                    var temp6 = var6;\n                    var temp7 = var5 - temp6;\n                    memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                    var temp8 = memory[0x40:0x60];\n                    return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                }\n            } else {\n            label_040B:\n                var temp9 = var11;\n                memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                var11 = temp9 + 0x20;\n            \n                if (var11 >= var8) { goto label_041A; }\n                else { goto label_040B; }\n            }\n        } else if (var0 == 0x08ff90e0) {\n            // Dispatch table entry for 0x08ff90e0 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0D24();\n            goto label_039E;\n        } else if (var0 == 0x0ebb0d30) {\n            // Dispatch table entry for getSummaryReferralProfit(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = getSummaryReferralProfit(var2);\n            goto label_039E;\n        } else if (var0 == 0x10d0ffdd) {\n            // Dispatch table entry for calculateTokensReceived(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var4 = var3;\n            var5 = var4;\n            var6 = var5;\n            var7 = 0x0d89;\n            var8 = 0x0d82;\n            var9 = var2;\n            var10 = 0x0c;\n            var8 = func_1D66(var9, var10);\n            var7 = func_0D82(var8);\n            var temp10 = var7;\n            var4 = temp10;\n            var7 = 0x0d95;\n            var8 = var2;\n            var9 = var4;\n            var7 = func_1D54(var8, var9);\n            var temp11 = var7;\n            var5 = temp11;\n            var7 = 0x0da0;\n            var8 = var5;\n            var7 = func_1DB3(var8);\n            var6 = var7;\n            var3 = var6;\n            var1 = var3;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x117a4425) {\n            // Dispatch table entry for setII_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setII_S(var2);\n            stop();\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = totalSupply();\n            goto label_039E;\n        } else if (var0 == 0x181f4180) {\n            // Dispatch table entry for 0x181f4180 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0DF3();\n            goto label_039E;\n        } else if (var0 == 0x1ddd303d) {\n            // Dispatch table entry for setV_R3(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R3(var2);\n            stop();\n        } else if (var0 == 0x1f2698ab) {\n            // Dispatch table entry for started()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0514;\n            var2 = started();\n        \n        label_0514:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = !!var2;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x22609373) {\n            // Dispatch table entry for calculateEthereumReceived(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n        \n            if (var2 > storage[0x09]) { revert(memory[0x00:0x00]); }\n        \n            var4 = 0x0e5b;\n            var5 = var2;\n            var4 = calculateEthereumReceived(var5);\n            var1 = var4;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x22dc8e71) {\n            // Dispatch table entry for setIV_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_R1(var2);\n            stop();\n        } else if (var0 == 0x289fa844) {\n            // Dispatch table entry for 0x289fa844 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0E9F();\n            goto label_039E;\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0582;\n            var2 = decimals();\n        \n        label_0582:\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = var2 & 0xff;\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n        } else if (var0 == 0x327683bb) {\n            // Dispatch table entry for setIII_R3(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIII_R3(var2);\n            stop();\n        } else if (var0 == 0x34fa2d43) {\n            // Dispatch table entry for 0x34fa2d43 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0EE8();\n            goto label_039E;\n        } else if (var0 == 0x36684752) {\n            // Dispatch table entry for 0x36684752 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0EEE();\n            goto label_039E;\n        } else if (var0 == 0x392efb52) {\n            // Dispatch table entry for administrators(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0514;\n            var2 = msg.data[0x04:0x24];\n            var2 = administrators(var2);\n            goto label_0514;\n        } else if (var0 == 0x3a7d773b) {\n            // Dispatch table entry for 0x3a7d773b (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0F09();\n            goto label_039E;\n        } else if (var0 == 0x3c4ae1ee) {\n            // Dispatch table entry for 0x3c4ae1ee (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0F0F();\n            goto label_039E;\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            withdraw();\n            stop();\n        } else if (var0 == 0x4a208c38) {\n            // Dispatch table entry for setIV_R2(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_R2(var2);\n            stop();\n        } else if (var0 == 0x4b750334) {\n            // Dispatch table entry for sellPrice()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = sellPrice();\n            goto label_039E;\n        } else if (var0 == 0x527ba1e1) {\n            // Dispatch table entry for setIV_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_S(var2);\n            stop();\n        } else if (var0 == 0x5b6a7ec8) {\n            // Dispatch table entry for 0x5b6a7ec8 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1159();\n            goto label_039E;\n        } else if (var0 == 0x614a31bf) {\n            // Dispatch table entry for setII_R2(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setII_R2(var2);\n            stop();\n        } else if (var0 == 0x61677d4d) {\n            // Dispatch table entry for 0x61677d4d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_119D();\n            goto label_039E;\n        } else if (var0 == 0x63f82d61) {\n            // Dispatch table entry for 0x63f82d61 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_11A3();\n            goto label_039E;\n        } else if (var0 == 0x6537e401) {\n            // Dispatch table entry for setIII_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIII_S(var2);\n            stop();\n        } else if (var0 == 0x688abbf7) {\n            // Dispatch table entry for myDividends(bool)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = !!msg.data[0x04:0x24];\n            var1 = myDividends(var2);\n            goto label_039E;\n        } else if (var0 == 0x6b2f4632) {\n            // Dispatch table entry for totalEthereumBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = totalEthereumBalance();\n            goto label_039E;\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = balanceOf(var2);\n            goto label_039E;\n        } else if (var0 == 0x72cee8ea) {\n            // Dispatch table entry for getReferralProfit(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var temp16 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp16 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp16;\n            var1 = getReferralProfit(var2, var3);\n            goto label_039E;\n        } else if (var0 == 0x7367352d) {\n            // Dispatch table entry for 0x7367352d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1275();\n            goto label_039E;\n        } else if (var0 == 0x759de398) {\n            // Dispatch table entry for 0x759de398 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_127B();\n            goto label_039E;\n        } else if (var0 == 0x78c7db00) {\n            // Dispatch table entry for 0x78c7db00 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1281();\n            goto label_039E;\n        } else if (var0 == 0x7a1c39cb) {\n            // Dispatch table entry for setIII_R2(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIII_R2(var2);\n            stop();\n        } else if (var0 == 0x7c6b2d6a) {\n            // Dispatch table entry for setV_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R1(var2);\n            stop();\n        } else if (var0 == 0x817c8966) {\n            // Dispatch table entry for getLevel(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = getLevel(var2);\n            goto label_039E;\n        } else if (var0 == 0x81e6e083) {\n            // Dispatch table entry for getLifetime()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0582;\n            var1 = getLifetime();\n            goto label_0582;\n        } else if (var0 == 0x8620410b) {\n            // Dispatch table entry for buyPrice()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = buyPrice();\n            goto label_039E;\n        } else if (var0 == 0x87c95058) {\n            // Dispatch table entry for setAdministrator(address,bool)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = !!msg.data[0x24:0x44];\n            setAdministrator(var2, var3);\n            stop();\n        } else if (var0 == 0x8b349c35) {\n            // Dispatch table entry for 0x8b349c35 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_149D();\n            goto label_039E;\n        } else if (var0 == 0x8f16eb1a) {\n            // Dispatch table entry for setI_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setI_R1(var2);\n            stop();\n        } else if (var0 == 0x92162de7) {\n            // Dispatch table entry for 0x92162de7 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_14E1();\n            goto label_039E;\n        } else if (var0 == 0x949e8acd) {\n            // Dispatch table entry for myTokens()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = myTokens();\n            goto label_039E;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03e0;\n            var2 = symbol();\n            goto label_03E0;\n        } else if (var0 == 0x9d6d2321) {\n            // Dispatch table entry for dividendsFull(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = dividendsFull(var2);\n            goto label_039E;\n        } else if (var0 == 0xa6b57b6d) {\n            // Dispatch table entry for 0xa6b57b6d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1589();\n            goto label_039E;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0514;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            goto label_0514;\n        } else if (var0 == 0xafa2a83f) {\n            // Dispatch table entry for 0xafa2a83f (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_172C();\n            goto label_039E;\n        } else if (var0 == 0xb263c00c) {\n            // Dispatch table entry for setV_R2(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R2(var2);\n            stop();\n        } else if (var0 == 0xb530700d) {\n            // Dispatch table entry for 0xb530700d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1770();\n            goto label_039E;\n        } else if (var0 == 0xb6db75a0) {\n            // Dispatch table entry for isAdmin()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0514;\n            var1 = isAdmin();\n            goto label_0514;\n        } else if (var0 == 0xb84c8246) {\n            // Dispatch table entry for setSymbol(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp17 = memory[0x40:0x60];\n            var temp18 = msg.data[0x04:0x24];\n            var temp19 = msg.data[temp18 + 0x04:temp18 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp17 + (temp19 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp17:temp17 + 0x20] = temp19;\n            var1 = 0x04bb;\n            memory[temp17 + 0x20:temp17 + 0x20 + temp19] = msg.data[temp18 + 0x24:temp18 + 0x24 + temp19];\n            var2 = temp17;\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = msg.sender * 0x02 ** 0x60;\n            var temp21 = memory[0x40:0x60];\n            memory[0x00:0x20] = keccak256(memory[temp21:temp21 + temp20 - temp21 + 0x14]);\n            memory[0x20:0x40] = 0x0c;\n            var3 = msg.sender;\n        \n            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            var temp22 = var2;\n            var4 = 0x1498;\n            var5 = 0x01;\n            var7 = memory[temp22:temp22 + 0x20];\n            var6 = temp22 + 0x20;\n        \n        label_2458:\n            var temp23 = var5;\n            var temp24 = storage[temp23];\n            memory[0x00:0x20] = temp23;\n            var8 = keccak256(memory[0x00:0x20]);\n            var temp25 = var6;\n            var6 = var8 + ((!(temp24 & 0x01) * 0x0100 - 0x01 & temp24) / 0x02 + 0x1f) / 0x20;\n            var9 = temp25;\n        \n            if (0x1f < var7) {\n                var temp26 = var7;\n                storage[var5] = temp26 + temp26 + 0x01;\n            \n                if (!temp26) {\n                label_24C6:\n                    var temp27 = var6;\n                    var6 = 0x14f6;\n                    var7 = 0x0df0;\n                    var temp28 = var8;\n                    var9 = temp28;\n                    var8 = temp27;\n                \n                    if (var8 <= var9) {\n                        var7 = func_14F6(var8, var9);\n                        var6 = var7;\n                        // Error: Could not resolve jump destination!\n                    } else {\n                    label_24DB:\n                        var temp29 = var9;\n                        storage[temp29] = 0x00;\n                        var9 = temp29 + 0x01;\n                    \n                        if (var8 > var9) { goto label_24DB; }\n                    \n                        var7 = func_14F6(var8, var9);\n                        // Error: Could not resolve method call return address!\n                    }\n                } else {\n                    var temp30 = var9;\n                    var temp31 = var7;\n                    var7 = temp30;\n                    var9 = var7 + temp31;\n                \n                    if (var9 <= var7) { goto label_24C6; }\n                \n                label_24B4:\n                    var temp32 = var7;\n                    var temp33 = var8;\n                    storage[temp33] = memory[temp32:temp32 + 0x20];\n                    var7 = temp32 + 0x20;\n                    var8 = temp33 + 0x01;\n                    var9 = var9;\n                \n                    if (var9 <= var7) { goto label_24C6; }\n                    else { goto label_24B4; }\n                }\n            } else {\n                var temp34 = var7;\n                storage[var5] = temp34 + temp34 | (memory[var9:var9 + 0x20] & ~0xff);\n                goto label_24C6;\n            }\n        } else if (var0 == 0xbe9a6555) {\n            // Dispatch table entry for start()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            start();\n            stop();\n        } else if (var0 == 0xc47f0027) {\n            // Dispatch table entry for setName(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp35 = memory[0x40:0x60];\n            var temp36 = msg.data[0x04:0x24];\n            var temp37 = msg.data[temp36 + 0x04:temp36 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp35 + (temp37 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp35:temp35 + 0x20] = temp37;\n            var1 = 0x04bb;\n            memory[temp35 + 0x20:temp35 + 0x20 + temp37] = msg.data[temp36 + 0x24:temp36 + 0x24 + temp37];\n            var2 = temp35;\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = msg.sender * 0x02 ** 0x60;\n            var temp39 = memory[0x40:0x60];\n            memory[0x00:0x20] = keccak256(memory[temp39:temp39 + temp38 - temp39 + 0x14]);\n            memory[0x20:0x40] = 0x0c;\n            var3 = msg.sender;\n        \n            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            var temp40 = var2;\n            var4 = 0x1498;\n            var5 = 0x00;\n            var7 = memory[temp40:temp40 + 0x20];\n            var6 = temp40 + 0x20;\n            goto label_2458;\n        } else if (var0 == 0xc549e4e9) {\n            // Dispatch table entry for sellPriceAt(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24];\n            var1 = sellPriceAt(var2);\n            goto label_039E;\n        } else if (var0 == 0xc6461625) {\n            // Dispatch table entry for setIV_R4(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_R4(var2);\n            stop();\n        } else if (var0 == 0xcf09e0d0) {\n            // Dispatch table entry for createdAt()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = createdAt();\n            goto label_039E;\n        } else if (var0 == 0xd0a05fea) {\n            // Dispatch table entry for setI_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setI_S(var2);\n            stop();\n        } else if (var0 == 0xd3ee99cf) {\n            // Dispatch table entry for 0xd3ee99cf (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1965();\n            goto label_039E;\n        } else if (var0 == 0xd46d0a22) {\n            // Dispatch table entry for setV_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_S(var2);\n            stop();\n        } else if (var0 == 0xdbbb206f) {\n            // Dispatch table entry for buy(address,address,address,address,address)\n            var1 = 0x039e;\n            var temp41 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp41 & msg.data[0x04:0x24];\n            var3 = temp41 & msg.data[0x24:0x44];\n            var4 = temp41 & msg.data[0x44:0x64];\n            var5 = temp41 & msg.data[0x64:0x84];\n            var6 = msg.data[0x84:0xa4] & temp41;\n            var1 = buy(var2, var3, var4, var5, var6);\n            goto label_039E;\n        } else if (var0 == 0xdca27d5e) {\n            // Dispatch table entry for setV_R4(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R4(var2);\n            stop();\n        } else if (var0 == 0xddf1be5f) {\n            // Dispatch table entry for setIII_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIII_R1(var2);\n            stop();\n        } else if (var0 == 0xe3489a4f) {\n            // Dispatch table entry for setII_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setII_R1(var2);\n            stop();\n        } else if (var0 == 0xe4849b32) {\n            // Dispatch table entry for sell(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            sell(var2);\n            stop();\n        } else if (var0 == 0xe70f5d95) {\n            // Dispatch table entry for setIV_R3(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_R3(var2);\n            stop();\n        } else if (var0 == 0xe9fad8ee) {\n            // Dispatch table entry for exit()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            exit();\n            stop();\n        } else if (var0 == 0xec01438e) {\n            // Dispatch table entry for 0xec01438e (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1C0F();\n            goto label_039E;\n        } else if (var0 == 0xecb0116a) {\n            // Dispatch table entry for getExitFee()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0582;\n            var1 = getExitFee();\n            goto label_0582;\n        } else if (var0 == 0xf3b39825) {\n            // Dispatch table entry for 0xf3b39825 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1C57();\n            goto label_039E;\n        } else if (var0 == 0xf6f36641) {\n            // Dispatch table entry for setV_R5(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R5(var2);\n            stop();\n        } else if (var0 == 0xfdb5a03e) {\n            // Dispatch table entry for reinvest()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            reinvest();\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x0a] - temp0 / 0x010000000000000000;\n    }\n    \n    function tokensToEthereumAtSupply_(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 >= 0x02540be400) {\n            var var4 = 0x0de0b6b3a7640000;\n            var temp0 = arg0;\n            var1 = var4 + temp0;\n            var2 = var4 + arg1;\n            var var5 = 0x0c7d;\n            var var6 = temp0 * (var2 / var4 * 0x02540be400 + 0x14f46b0400);\n            var var7 = 0x02;\n            var var8 = (var1 ** var7 - temp0 + ~0x0de0b6b3a763ffff) / var4 * 0x02540be400;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_0C77(var6, var7, var8);\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4;\n            var0 = var3;\n        \n        label_0C8D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0C8D;\n        }\n    }\n    \n    function func_0C77(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1D54(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0D1C:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0D13; }\n        \n        label_0CFF:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0CFF; }\n        \n        label_0D13:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0D1C;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_0D1C;\n        }\n    }\n    \n    function func_0D24() returns (var r0) { return storage[0x1a]; }\n    \n    function getSummaryReferralProfit(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] / 0x0100 & temp0 != temp0 & arg0) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x07;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n        label_0C08:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0C08;\n        }\n    }\n    \n    function func_0D82(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function setII_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0f] = arg0;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x09]; }\n    \n    function func_0DF3() returns (var r0) { return storage[0x19]; }\n    \n    function setV_R3(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1e] = arg0;\n    }\n    \n    function started() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function setIV_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x17] = arg0;\n    }\n    \n    function func_0E9F() returns (var r0) { return storage[0x13]; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function setIII_R3(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x15] = arg0;\n    }\n    \n    function func_0EE8() returns (var r0) { return storage[0x18]; }\n    \n    function func_0EEE() returns (var r0) { return storage[0x1e]; }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_0F09() returns (var r0) { return storage[0x14]; }\n    \n    function func_0F0F() returns (var r0) { return storage[0x16]; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0f28;\n        var var7 = 0x01;\n        var6 = myDividends(var7);\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var5 = 0x0f3f;\n        var6 = 0x00;\n        var5 = myDividends(var6);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var5;\n        storage[temp0] = temp1 + storage[temp0];\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = temp1 * 0x010000000000000000 + storage[temp2];\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var1 = temp4 + temp1;\n        var5 = 0x0fa1;\n        var6 = 0x0d82;\n        var7 = var1;\n        var var8 = 0x03;\n        var var9 = 0x0f98;\n        var9 = getExitFee();\n        var6 = func_0F98(var7, var8, var9);\n        var5 = func_0D82(var6);\n        var2 = var5;\n        var5 = 0x0fb1;\n        var6 = 0x0d82;\n        var7 = var1;\n        var8 = 0x03;\n        var6 = func_1D66(var7, var8);\n        var5 = func_0D82(var6);\n        var temp5 = var5;\n        var3 = temp5;\n        var5 = 0x0fbf;\n        var6 = var1;\n        var7 = var2 + var3;\n        var5 = func_1D54(var6, var7);\n        var4 = var5;\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] / 0x0100 & temp6 == temp6 & var0) {\n            var4 = var3 + var4;\n            var5 = 0x104b;\n            var6 = storage[0x0a];\n            var7 = storage[0x09];\n            var8 = var2 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_1045(var6, var7, var8);\n        \n        label_104B:\n            storage[0x0a] = var5;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = var4;\n            var temp9;\n            temp9, memory[temp7:temp7 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp8 * 0x08fc).value(temp8)(memory[temp7:temp7 + 0x00]);\n            var5 = !temp9;\n        \n            if (!var5) {\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + temp10 - temp11 + 0x20], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp13 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp13 & storage[0x03] / 0x0100;\n            memory[0x20:0x40] = 0x05;\n            var temp14 = keccak256(memory[0x00:0x40]);\n            var temp15 = var3;\n            storage[temp14] = temp15 + storage[temp14];\n            memory[0x00:0x20] = temp13 & storage[0x03] / 0x0100;\n            memory[0x20:0x40] = 0x07;\n            var temp16 = keccak256(memory[0x00:0x40]);\n            storage[temp16] = temp15 + storage[temp16];\n            var5 = 0x104b;\n            var6 = storage[0x0a];\n            var7 = storage[0x09];\n            var8 = var2 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_1045(var6, var7, var8);\n            goto label_104B;\n        }\n    }\n    \n    function func_0F98(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 - arg1 & 0xff;\n        r0 = func_1D66(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1045(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1E59(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setIV_R2(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x18] = arg0;\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1116;\n        var var2 = storage[0x09];\n        return sellPriceAt(var2);\n    }\n    \n    function setIV_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x16] = arg0;\n    }\n    \n    function func_1159() returns (var r0) { return storage[0x1d]; }\n    \n    function setII_R2(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x11] = arg0;\n    }\n    \n    function func_119D() returns (var r0) { return storage[0x20]; }\n    \n    function func_11A3() returns (var r0) { return storage[0x0d]; }\n    \n    function setIII_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x12] = arg0;\n    }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x05;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x121f;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            var0 = var3 + var2;\n        \n        label_1224:\n            return var0;\n        } else {\n            var2 = 0x11f8;\n            var3 = var1;\n            var2 = dividendsOf(var3);\n            var0 = var2;\n            goto label_1224;\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function getReferralProfit(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x21;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_1275() returns (var r0) { return storage[0x11]; }\n    \n    function func_127B() returns (var r0) { return storage[0x1f]; }\n    \n    function func_1281() returns (var r0) { return storage[0x1b]; }\n    \n    function setIII_R2(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x14] = arg0;\n    }\n    \n    function setV_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1c] = arg0;\n    }\n    \n    function getLevel(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x1311;\n        var var4 = arg0;\n        var3 = func_1E68(var4);\n        var1 = var3;\n        var2 = 0x00;\n    \n        if (var1 >= storage[0x1b]) {\n            var2 = 0x05;\n            goto label_1369;\n        } else if (var1 >= storage[0x16]) {\n            var2 = 0x04;\n            goto label_1369;\n        } else if (var1 >= storage[0x12]) {\n            var2 = 0x03;\n            goto label_1369;\n        } else if (var1 >= storage[0x0f]) {\n            var2 = 0x02;\n            goto label_1369;\n        } else if (var1 < storage[0x0d]) {\n        label_1369:\n            return var2;\n        } else {\n            var2 = 0x01;\n            goto label_1369;\n        }\n    }\n    \n    function getLifetime() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) { return 0x00; }\n    \n        var var1 = 0x18;\n        var var2 = 0x3c;\n        var var3 = var2;\n        var var4 = block.timestamp - storage[0x02];\n    \n        if (!var3) { assert(); }\n    \n        var3 = var4 / var3;\n    \n        if (!var2) { assert(); }\n    \n        var2 = var3 / var2;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x09] != 0x00) {\n            var var4 = 0x13e3;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = calculateEthereumReceived(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x13f3;\n            var5 = 0x0d82;\n            var var6 = var1;\n            var var7 = 0x0c;\n            var5 = func_1D66(var6, var7);\n            var4 = func_0D82(var5);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x13ff;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_1E59(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_1405:\n            return var0;\n        } else {\n            var0 = 0x199c82cc00;\n            goto label_1405;\n        }\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] / 0x0100 & temp2 == temp2 & arg0) { return; }\n    \n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = (arg0 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp4 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp4:temp4 + temp3 - temp4 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = (storage[temp5] & ~0xff) | !!arg1;\n    }\n    \n    function func_149D() returns (var r0) { return storage[0x0b]; }\n    \n    function setI_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0e] = arg0;\n    }\n    \n    function func_14E1() returns (var r0) { return storage[0x17]; }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x14f3;\n        var var3 = var1;\n        var2 = balanceOf(var3);\n        var0 = var2;\n        r0 = func_14F6(var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_14F6(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0D1C:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0D13; }\n        \n        label_0CFF:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0CFF; }\n        \n        label_0D13:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0D1C;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0D1C;\n        }\n    }\n    \n    function dividendsFull(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n        memory[0x20:0x40] = 0x08;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var3 = 0x1581;\n        var var4 = arg0;\n        var3 = dividendsOf(var4);\n        return var3 + var2 + var1;\n    }\n    \n    function func_1589() returns (var r0) { return storage[0x0e]; }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x15a0;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var1 = msg.sender;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var5 = 0x00;\n        var6 = 0x15d5;\n        var var7 = 0x01;\n        var6 = myDividends(var7);\n    \n        if (var6 <= var5) {\n        label_15E3:\n            var5 = 0x15f1;\n            var6 = 0x0d82;\n            var7 = arg1;\n            var var8 = 0x01;\n            var6 = func_1D66(var7, var8);\n            var5 = func_0D82(var6);\n            var temp0 = var5;\n            var2 = temp0;\n            var5 = 0x15fd;\n            var6 = arg1;\n            var7 = var2;\n            var5 = func_1D54(var6, var7);\n            var3 = var5;\n            var5 = 0x1608;\n            var6 = var2;\n            var5 = calculateEthereumReceived(var6);\n            var4 = var5;\n            var5 = 0x1616;\n            var6 = storage[0x09];\n            var7 = var2;\n            var5 = func_1D54(var6, var7);\n            storage[0x09] = var5;\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var5 = 0x163c;\n            var7 = arg1;\n            var5 = func_1D54(var6, var7);\n            var temp1 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = var1 & temp1;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = arg0 & temp1;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var5 = 0x166b;\n            var7 = var3;\n            var5 = func_1E59(var6, var7);\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            var temp3 = temp2 & arg0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = var1 & temp2;\n            memory[0x20:0x40] = 0x06;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] - arg1 * storage[0x0a];\n            memory[0x00:0x20] = temp3;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = storage[temp5] + var3 * storage[0x0a];\n            var5 = 0x16d9;\n            var6 = storage[0x0a];\n            var7 = storage[0x09];\n            var8 = var4 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_1045(var6, var7, var8);\n            storage[0x0a] = var5;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var3;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var5 = 0x15e3;\n            withdraw();\n            goto label_15E3;\n        }\n    }\n    \n    function func_172C() returns (var r0) { return storage[0x10]; }\n    \n    function setV_R2(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1d] = arg0;\n    }\n    \n    function func_1770() returns (var r0) { return storage[0x12]; }\n    \n    function isAdmin() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function start() {\n        if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~0xff) | 0x01;\n        storage[0x02] = block.timestamp;\n    }\n    \n    function sellPriceAt(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (arg0) {\n            var var4 = 0x18bd;\n            var var5 = 0x0de0b6b3a7640000;\n            var var6 = arg0;\n            var4 = tokensToEthereumAtSupply_(var5, var6);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x18cd;\n            var5 = 0x0d82;\n            var6 = var1;\n            var var7 = 0x06;\n            var5 = func_1D66(var6, var7);\n            var4 = func_0D82(var5);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x18d9;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_1D54(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0DA6:\n            return var0;\n        } else {\n            var0 = 0x14f46b0400;\n            goto label_0DA6;\n        }\n    }\n    \n    function setIV_R4(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1a] = arg0;\n    }\n    \n    function createdAt() returns (var r0) { return storage[0x02]; }\n    \n    function setI_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0d] = arg0;\n    }\n    \n    function func_1965() returns (var r0) { return storage[0x1c]; }\n    \n    function setV_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1b] = arg0;\n    }\n    \n    function buy(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x19cb;\n        var var2 = msg.value;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = arg2;\n        var var6 = arg3;\n        var var7 = arg4;\n        func_1EA7(var2, var3, var4, var5, var6, var7);\n        return var0;\n    }\n    \n    function setV_R4(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1f] = arg0;\n    }\n    \n    function setIII_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x13] = arg0;\n    }\n    \n    function setII_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x10] = arg0;\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x1a9e;\n        var5 = myTokens();\n    \n        if (var5 <= var4) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var0 = msg.sender;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var4 = 0x1ad3;\n        var5 = var1;\n        var4 = calculateEthereumReceived(var5);\n        var2 = var4;\n        var4 = 0x1ae1;\n        var5 = storage[0x09];\n        var var6 = var1;\n        var4 = func_1D54(var5, var6);\n        storage[0x09] = var4;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var4 = 0x1b07;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = var1;\n        var4 = func_1D54(var5, var6);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x20:0x40] = 0x06;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var2 * 0x010000000000000000 + var1 * storage[0x0a];\n        storage[temp0] = storage[temp0] - temp1;\n        var4 = var0 & 0x02 ** 0xa0 - 0x01;\n        var3 = temp1;\n        var5 = 0x8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e;\n        var6 = var1;\n        var var7 = var2;\n        var var8 = block.timestamp;\n        var var9 = 0x1b78;\n        var9 = buyPrice();\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = var6;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var7;\n        memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = var8;\n        memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = var9;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + temp2 - temp3 + 0x80], [stack[-5], stack[-6]]);\n    }\n    \n    function setIV_R3(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x19] = arg0;\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_1C03:\n            var var2 = 0x1c0b;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x1c03;\n            var var3 = var1;\n            sell(var3);\n            goto label_1C03;\n        }\n    }\n    \n    function func_1C0F() returns (var r0) { return storage[0x0f]; }\n    \n    function getExitFee() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x1c20;\n        var2 = getLifetime();\n        var1 = var2 & 0xff;\n    \n        if (var1 <= 0x06) {\n            var0 = 0x1e;\n            r0 = func_14F6(var0, var1);\n            // Error: Could not resolve method call return address!\n        } else if (var1 >= 0x1e) {\n            var0 = 0x06;\n            r0 = func_14F6(var0, var1);\n            // Error: Could not resolve method call return address!\n        } else {\n            var0 = 0x1e - var1 + 0x06;\n            r0 = func_14F6(var0, var1);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_1C57() returns (var r0) { return storage[0x15]; }\n    \n    function setV_R5(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x20] = arg0;\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x1caa;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x1cbe;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var2;\n        storage[temp0] = temp1 + storage[temp0];\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = temp1 * 0x010000000000000000 + storage[temp2];\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var0 = temp1 + temp4;\n        var1 = msg.sender;\n        var2 = 0x1d11;\n        var3 = var0;\n        var4 = 0x00;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n        var var8 = var7;\n        func_1EA7(var3, var4, var5, var6, var7, var8);\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = var0;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x5d511c2070e5a2dbcc6fbfbb3fd6704a11ab5fa74b793b81aacece2c7cc29405, stack[-1] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1D54(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1D66(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0) {\n            var temp0 = arg0;\n            var1 = arg1 * temp0;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_1D95:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1D95;\n        }\n    }\n    \n    function func_1DB3(var arg0) returns (var r0) {\n        var temp0 = storage[0x09];\n        var var0 = 0x00;\n        var var1 = 0x01431e0fae6d7217caa0000000;\n        var var3 = temp0;\n        var var2 = var0;\n        var var4 = 0x02540be400;\n        var var5 = 0x1e38;\n        var var6 = 0x1e32;\n        var var7 = var3 * 0x05e0a1fd2712875988becaad0000000000 + var3 ** 0x02 * 0x056bc75e2d63100000 + arg0 * 0x0380d4bd8a8678c1bb542c80deb4800000000000 + 0x0197d4df19d605767337e9f14d3eec8920e400000000000000;\n        var6 = func_2389(var7);\n        var5 = func_1E32(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_1E32(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1D54(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0e5b;\n        var var2 = arg0;\n        var var3 = storage[0x09];\n        return tokensToEthereumAtSupply_(var2, var3);\n    }\n    \n    function func_1E59(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1E68(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n    \n        if (var1 >= 0x02540be400) {\n            var var2 = 0x1ea0;\n            var var3 = var1;\n            var2 = calculateEthereumReceived(var3);\n            var0 = var2;\n        \n        label_1224:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1224;\n        }\n    }\n    \n    function func_1EA7(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = 0x1ebc;\n        var var7 = 0x0d82;\n        var var8 = arg0;\n        var var9 = 0x0c;\n        var7 = func_1D66(var8, var9);\n        var6 = func_0D82(var7);\n        var0 = var6;\n        var1 = var0;\n        var2 = 0x00;\n        var3 = 0x00;\n        var6 = 0x1ed6;\n        var7 = arg1;\n        var8 = msg.sender;\n        var9 = storage[0x0d];\n        var6 = func_23BE(var7, var8, var9);\n    \n        if (!var6) {\n        label_1FB4:\n            var6 = 0x1fc1;\n            var7 = arg2;\n            var8 = msg.sender;\n            var9 = storage[0x0f];\n            var6 = func_23BE(var7, var8, var9);\n        \n            if (!var6) {\n            label_207C:\n                var6 = 0x2089;\n                var7 = arg3;\n                var8 = msg.sender;\n                var9 = storage[0x12];\n                var6 = func_23BE(var7, var8, var9);\n            \n                if (!var6) {\n                label_2129:\n                    var6 = 0x2136;\n                    var7 = arg4;\n                    var8 = msg.sender;\n                    var9 = storage[0x16];\n                    var6 = func_23BE(var7, var8, var9);\n                \n                    if (!var6) {\n                    label_21BB:\n                        var6 = 0x21c8;\n                        var7 = arg5;\n                        var8 = msg.sender;\n                        var9 = storage[0x1b];\n                        var6 = func_23BE(var7, var8, var9);\n                    \n                        if (!var6) {\n                        label_2233:\n                            var6 = 0x2245;\n                            var7 = 0x2240;\n                            var8 = arg0;\n                            var9 = var0;\n                            var7 = func_1D54(var8, var9);\n                            var6 = func_2240(var7);\n                            var4 = var6;\n                            var5 = var1 * 0x010000000000000000;\n                            var temp0 = var4 > 0x00;\n                            var6 = temp0;\n                        \n                            if (!var6) {\n                            label_226E:\n                            \n                                if (!var6) { revert(memory[0x00:0x00]); }\n                            \n                                if (storage[0x09] <= 0x00) {\n                                    storage[0x09] = var4;\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x04;\n                                    var6 = 0x22fb;\n                                    var7 = storage[keccak256(memory[0x00:0x40])];\n                                    var8 = var4;\n                                    var6 = func_1E59(var7, var8);\n                                \n                                label_22FB:\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x04;\n                                    storage[keccak256(memory[0x00:0x40])] = var6;\n                                    memory[0x20:0x40] = 0x06;\n                                    var temp1 = keccak256(memory[0x00:0x40]);\n                                    var6 = msg.sender;\n                                    storage[temp1] = storage[temp1] + (var4 * storage[0x0a] - var5);\n                                    var7 = 0xdab8e4b48a2786a8cf2824525000c609475a787fdec377949a4b2ad2cf2be394;\n                                    var8 = arg0;\n                                    var9 = var4;\n                                    var var10 = block.timestamp;\n                                    var var11 = 0x2356;\n                                    var11 = buyPrice();\n                                    var temp2 = memory[0x40:0x60];\n                                    memory[temp2:temp2 + 0x20] = var8;\n                                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var9;\n                                    memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = var10;\n                                    memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = var11;\n                                    var temp3 = memory[0x40:0x60];\n                                    log(memory[temp3:temp3 + temp2 - temp3 + 0x80], [stack[-5], stack[-6]]);\n                                    return;\n                                } else {\n                                    var6 = 0x2290;\n                                    var7 = storage[0x09];\n                                    var8 = var4;\n                                    var6 = func_1E59(var7, var8);\n                                    var temp4 = var6;\n                                    storage[0x09] = temp4;\n                                    var7 = var1 * 0x010000000000000000;\n                                \n                                    if (!temp4) { assert(); }\n                                \n                                    storage[0x0a] = storage[0x0a] + var7 / var6;\n                                    var6 = storage[0x09];\n                                    var7 = var1 * 0x010000000000000000;\n                                \n                                    if (!var6) { assert(); }\n                                \n                                    var temp5 = var5;\n                                    var5 = temp5 - (temp5 - var4 * (var7 / var6));\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x04;\n                                    var7 = storage[keccak256(memory[0x00:0x40])];\n                                    var6 = 0x22fb;\n                                    var8 = var4;\n                                    var6 = func_1E59(var7, var8);\n                                    goto label_22FB;\n                                }\n                            } else {\n                                var6 = storage[0x09];\n                                var7 = 0x226c;\n                                var8 = var4;\n                                var9 = var6;\n                                var7 = func_1E59(var8, var9);\n                                var6 = var7 > var6;\n                                goto label_226E;\n                            }\n                        } else {\n                            var6 = 0x21dc;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = storage[0x20];\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            memory[0x00:0x20] = arg5 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp6 = var6;\n                            var3 = temp6;\n                            var6 = 0x2202;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg5 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x2226;\n                            var7 = arg5;\n                            var8 = arg4;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x2230;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_2233;\n                        }\n                    } else {\n                        var2 = storage[0x1a];\n                        var6 = storage[0x1b];\n                        var7 = 0x214c;\n                        var8 = arg4;\n                        var7 = func_1E68(var8);\n                    \n                        if (var7 < var6) {\n                            var6 = 0x2164;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                        \n                        label_2164:\n                            memory[0x00:0x20] = arg4 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp7 = var6;\n                            var3 = temp7;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var6 = 0x218a;\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg4 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x21ae;\n                            var7 = arg4;\n                            var8 = arg3;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x21b8;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_21BB;\n                        } else {\n                            var2 = storage[0x1f];\n                            var6 = 0x2164;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            goto label_2164;\n                        }\n                    }\n                } else {\n                    var2 = storage[0x15];\n                    var6 = storage[0x1b];\n                    var7 = 0x209f;\n                    var8 = arg3;\n                    var7 = func_1E68(var8);\n                \n                    if (var7 < var6) {\n                        var6 = storage[0x16];\n                        var7 = 0x20ba;\n                        var8 = arg3;\n                        var7 = func_1E68(var8);\n                    \n                        if (var7 < var6) {\n                        label_20C5:\n                            var6 = 0x20d2;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            memory[0x00:0x20] = arg3 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp8 = var6;\n                            var3 = temp8;\n                            var6 = 0x20f8;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg3 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x211c;\n                            var7 = arg3;\n                            var8 = arg2;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x2126;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_2129;\n                        } else {\n                            var2 = storage[0x19];\n                            goto label_20C5;\n                        }\n                    } else {\n                        var2 = storage[0x1e];\n                        goto label_20C5;\n                    }\n                }\n            } else {\n                var2 = storage[0x11];\n                var6 = storage[0x1b];\n                var7 = 0x1fd7;\n                var8 = arg2;\n                var7 = func_1E68(var8);\n            \n                if (var7 < var6) {\n                    var6 = storage[0x16];\n                    var7 = 0x1ff2;\n                    var8 = arg2;\n                    var7 = func_1E68(var8);\n                \n                    if (var7 < var6) {\n                        var6 = storage[0x12];\n                        var7 = 0x200d;\n                        var8 = arg2;\n                        var7 = func_1E68(var8);\n                    \n                        if (var7 < var6) {\n                        label_2018:\n                            var6 = 0x2025;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp9 = var6;\n                            var3 = temp9;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var6 = 0x204b;\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x206f;\n                            var7 = arg2;\n                            var8 = arg1;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x2079;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_207C;\n                        } else {\n                            var2 = storage[0x14];\n                            goto label_2018;\n                        }\n                    } else {\n                        var2 = storage[0x18];\n                        goto label_2018;\n                    }\n                } else {\n                    var2 = storage[0x1d];\n                    goto label_2018;\n                }\n            }\n        } else {\n            var2 = storage[0x0e];\n            var6 = storage[0x1b];\n            var7 = 0x1eec;\n            var8 = arg1;\n            var7 = func_1E68(var8);\n        \n            if (var7 < var6) {\n                var6 = storage[0x16];\n                var7 = 0x1f07;\n                var8 = arg1;\n                var7 = func_1E68(var8);\n            \n                if (var7 < var6) {\n                    var6 = storage[0x12];\n                    var7 = 0x1f22;\n                    var8 = arg1;\n                    var7 = func_1E68(var8);\n                \n                    if (var7 < var6) {\n                        var6 = storage[0x0f];\n                        var7 = 0x1f3d;\n                        var8 = arg1;\n                        var7 = func_1E68(var8);\n                    \n                        if (var7 < var6) {\n                        label_1F48:\n                            var6 = 0x1f5d;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp10 = var6;\n                            var3 = temp10;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var6 = 0x1f83;\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x1fa7;\n                            var7 = arg1;\n                            var8 = msg.sender;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x1fb1;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_1FB4;\n                        } else {\n                            var2 = storage[0x10];\n                            goto label_1F48;\n                        }\n                    } else {\n                        var2 = storage[0x13];\n                        goto label_1F48;\n                    }\n                } else {\n                    var2 = storage[0x17];\n                    goto label_1F48;\n                }\n            } else {\n                var2 = storage[0x1c];\n                goto label_1F48;\n            }\n        }\n    }\n    \n    function func_1F55(var arg0) returns (var r0) {\n        var var0 = 0x03e8;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_2240(var arg0) returns (var r0) {\n        r0 = func_1DB3(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2389(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_1224:\n            return var0;\n        } else {\n        label_239B:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_1224; }\n            else { goto label_239B; }\n        }\n    }\n    \n    function func_23BE(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !!(arg0 & 0x02 ** 0xa0 - 0x01);\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01 != arg1 & 0x02 ** 0xa0 - 0x01;\n        \n            if (!var1) { goto label_240E; }\n            else { goto label_23F1; }\n        } else if (!var1) {\n        label_240E:\n            return var1;\n        } else {\n        label_23F1:\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            return arg2 <= storage[keccak256(memory[0x00:0x40])];\n        }\n    }\n    \n    function func_2416(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x21;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg2;\n        storage[temp3] = temp4 + storage[temp3];\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x07;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = temp4 + storage[temp5];\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n    \n        if (var0 == 0x65318b) {\n            // Dispatch table entry for dividendsOf(address)\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = dividendsOf(var2);\n        \n        label_039E:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n        } else if (var0 == 0x04729a8d) {\n            // Dispatch table entry for tokensToEthereumAtSupply_(uint256,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24];\n            var var3 = msg.data[0x24:0x44];\n            var1 = tokensToEthereumAtSupply_(var2, var3);\n            goto label_039E;\n        } else if (var0 == 0x06fdde03) {\n            // Dispatch table entry for name()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03e0;\n            var2 = name();\n        \n        label_03E0:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x20;\n            var temp3 = var2;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = memory[temp3:temp3 + 0x20];\n            var3 = temp2;\n            var var4 = var3;\n            var var5 = var4 + 0x40;\n            var var6 = temp3 + 0x20;\n            var var7 = memory[temp3:temp3 + 0x20];\n            var var8 = var7;\n            var var9 = var5;\n            var var10 = var6;\n            var var11 = 0x00;\n        \n            if (var11 >= var8) {\n            label_041A:\n                var temp4 = var7;\n                var5 = temp4 + var5;\n                var6 = temp4 & 0x1f;\n            \n                if (!var6) {\n                    var temp5 = memory[0x40:0x60];\n                    return memory[temp5:temp5 + var5 - temp5];\n                } else {\n                    var temp6 = var6;\n                    var temp7 = var5 - temp6;\n                    memory[temp7:temp7 + 0x20] = ~(0x0100 ** (0x20 - temp6) - 0x01) & memory[temp7:temp7 + 0x20];\n                    var temp8 = memory[0x40:0x60];\n                    return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n                }\n            } else {\n            label_040B:\n                var temp9 = var11;\n                memory[temp9 + var9:temp9 + var9 + 0x20] = memory[temp9 + var10:temp9 + var10 + 0x20];\n                var11 = temp9 + 0x20;\n            \n                if (var11 >= var8) { goto label_041A; }\n                else { goto label_040B; }\n            }\n        } else if (var0 == 0x08ff90e0) {\n            // Dispatch table entry for 0x08ff90e0 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0D24();\n            goto label_039E;\n        } else if (var0 == 0x0ebb0d30) {\n            // Dispatch table entry for getSummaryReferralProfit(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = getSummaryReferralProfit(var2);\n            goto label_039E;\n        } else if (var0 == 0x10d0ffdd) {\n            // Dispatch table entry for calculateTokensReceived(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            var4 = var3;\n            var5 = var4;\n            var6 = var5;\n            var7 = 0x0d89;\n            var8 = 0x0d82;\n            var9 = var2;\n            var10 = 0x0c;\n            var8 = func_1D66(var9, var10);\n            var7 = func_0D82(var8);\n            var temp10 = var7;\n            var4 = temp10;\n            var7 = 0x0d95;\n            var8 = var2;\n            var9 = var4;\n            var7 = func_1D54(var8, var9);\n            var temp11 = var7;\n            var5 = temp11;\n            var7 = 0x0da0;\n            var8 = var5;\n            var7 = func_1DB3(var8);\n            var6 = var7;\n            var3 = var6;\n            var1 = var3;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x117a4425) {\n            // Dispatch table entry for setII_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setII_S(var2);\n            stop();\n        } else if (var0 == 0x18160ddd) {\n            // Dispatch table entry for totalSupply()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = totalSupply();\n            goto label_039E;\n        } else if (var0 == 0x181f4180) {\n            // Dispatch table entry for 0x181f4180 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0DF3();\n            goto label_039E;\n        } else if (var0 == 0x1ddd303d) {\n            // Dispatch table entry for setV_R3(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R3(var2);\n            stop();\n        } else if (var0 == 0x1f2698ab) {\n            // Dispatch table entry for started()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0514;\n            var2 = started();\n        \n        label_0514:\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = !!var2;\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n        } else if (var0 == 0x22609373) {\n            // Dispatch table entry for calculateEthereumReceived(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n        \n            if (var2 > storage[0x09]) { revert(memory[0x00:0x00]); }\n        \n            var4 = 0x0e5b;\n            var5 = var2;\n            var4 = calculateEthereumReceived(var5);\n            var1 = var4;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0x22dc8e71) {\n            // Dispatch table entry for setIV_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_R1(var2);\n            stop();\n        } else if (var0 == 0x289fa844) {\n            // Dispatch table entry for 0x289fa844 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0E9F();\n            goto label_039E;\n        } else if (var0 == 0x313ce567) {\n            // Dispatch table entry for decimals()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0582;\n            var2 = decimals();\n        \n        label_0582:\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = var2 & 0xff;\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n        } else if (var0 == 0x327683bb) {\n            // Dispatch table entry for setIII_R3(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIII_R3(var2);\n            stop();\n        } else if (var0 == 0x34fa2d43) {\n            // Dispatch table entry for 0x34fa2d43 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0EE8();\n            goto label_039E;\n        } else if (var0 == 0x36684752) {\n            // Dispatch table entry for 0x36684752 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0EEE();\n            goto label_039E;\n        } else if (var0 == 0x392efb52) {\n            // Dispatch table entry for administrators(bytes32)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0514;\n            var2 = msg.data[0x04:0x24];\n            var2 = administrators(var2);\n            goto label_0514;\n        } else if (var0 == 0x3a7d773b) {\n            // Dispatch table entry for 0x3a7d773b (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0F09();\n            goto label_039E;\n        } else if (var0 == 0x3c4ae1ee) {\n            // Dispatch table entry for 0x3c4ae1ee (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_0F0F();\n            goto label_039E;\n        } else if (var0 == 0x3ccfd60b) {\n            // Dispatch table entry for withdraw()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            withdraw();\n            stop();\n        } else if (var0 == 0x4a208c38) {\n            // Dispatch table entry for setIV_R2(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_R2(var2);\n            stop();\n        } else if (var0 == 0x4b750334) {\n            // Dispatch table entry for sellPrice()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = sellPrice();\n            goto label_039E;\n        } else if (var0 == 0x527ba1e1) {\n            // Dispatch table entry for setIV_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_S(var2);\n            stop();\n        } else if (var0 == 0x5b6a7ec8) {\n            // Dispatch table entry for 0x5b6a7ec8 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1159();\n            goto label_039E;\n        } else if (var0 == 0x614a31bf) {\n            // Dispatch table entry for setII_R2(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setII_R2(var2);\n            stop();\n        } else if (var0 == 0x61677d4d) {\n            // Dispatch table entry for 0x61677d4d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_119D();\n            goto label_039E;\n        } else if (var0 == 0x63f82d61) {\n            // Dispatch table entry for 0x63f82d61 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_11A3();\n            goto label_039E;\n        } else if (var0 == 0x6537e401) {\n            // Dispatch table entry for setIII_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIII_S(var2);\n            stop();\n        } else if (var0 == 0x688abbf7) {\n            // Dispatch table entry for myDividends(bool)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = !!msg.data[0x04:0x24];\n            var1 = myDividends(var2);\n            goto label_039E;\n        } else if (var0 == 0x6b2f4632) {\n            // Dispatch table entry for totalEthereumBalance()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = totalEthereumBalance();\n            goto label_039E;\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = balanceOf(var2);\n            goto label_039E;\n        } else if (var0 == 0x72cee8ea) {\n            // Dispatch table entry for getReferralProfit(address,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var temp16 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp16 & msg.data[0x04:0x24];\n            var3 = msg.data[0x24:0x44] & temp16;\n            var1 = getReferralProfit(var2, var3);\n            goto label_039E;\n        } else if (var0 == 0x7367352d) {\n            // Dispatch table entry for 0x7367352d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1275();\n            goto label_039E;\n        } else if (var0 == 0x759de398) {\n            // Dispatch table entry for 0x759de398 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_127B();\n            goto label_039E;\n        } else if (var0 == 0x78c7db00) {\n            // Dispatch table entry for 0x78c7db00 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1281();\n            goto label_039E;\n        } else if (var0 == 0x7a1c39cb) {\n            // Dispatch table entry for setIII_R2(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIII_R2(var2);\n            stop();\n        } else if (var0 == 0x7c6b2d6a) {\n            // Dispatch table entry for setV_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R1(var2);\n            stop();\n        } else if (var0 == 0x817c8966) {\n            // Dispatch table entry for getLevel(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = getLevel(var2);\n            goto label_039E;\n        } else if (var0 == 0x81e6e083) {\n            // Dispatch table entry for getLifetime()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0582;\n            var1 = getLifetime();\n            goto label_0582;\n        } else if (var0 == 0x8620410b) {\n            // Dispatch table entry for buyPrice()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = buyPrice();\n            goto label_039E;\n        } else if (var0 == 0x87c95058) {\n            // Dispatch table entry for setAdministrator(address,bool)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = !!msg.data[0x24:0x44];\n            setAdministrator(var2, var3);\n            stop();\n        } else if (var0 == 0x8b349c35) {\n            // Dispatch table entry for 0x8b349c35 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_149D();\n            goto label_039E;\n        } else if (var0 == 0x8f16eb1a) {\n            // Dispatch table entry for setI_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setI_R1(var2);\n            stop();\n        } else if (var0 == 0x92162de7) {\n            // Dispatch table entry for 0x92162de7 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_14E1();\n            goto label_039E;\n        } else if (var0 == 0x949e8acd) {\n            // Dispatch table entry for myTokens()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var1 = myTokens();\n            goto label_039E;\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x03e0;\n            var2 = symbol();\n            goto label_03E0;\n        } else if (var0 == 0x9d6d2321) {\n            // Dispatch table entry for dividendsFull(address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var1 = dividendsFull(var2);\n            goto label_039E;\n        } else if (var0 == 0xa6b57b6d) {\n            // Dispatch table entry for 0xa6b57b6d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1589();\n            goto label_039E;\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0514;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            var3 = msg.data[0x24:0x44];\n            var1 = transfer(var2, var3);\n            goto label_0514;\n        } else if (var0 == 0xafa2a83f) {\n            // Dispatch table entry for 0xafa2a83f (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_172C();\n            goto label_039E;\n        } else if (var0 == 0xb263c00c) {\n            // Dispatch table entry for setV_R2(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R2(var2);\n            stop();\n        } else if (var0 == 0xb530700d) {\n            // Dispatch table entry for 0xb530700d (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1770();\n            goto label_039E;\n        } else if (var0 == 0xb6db75a0) {\n            // Dispatch table entry for isAdmin()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0514;\n            var1 = isAdmin();\n            goto label_0514;\n        } else if (var0 == 0xb84c8246) {\n            // Dispatch table entry for setSymbol(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp17 = memory[0x40:0x60];\n            var temp18 = msg.data[0x04:0x24];\n            var temp19 = msg.data[temp18 + 0x04:temp18 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp17 + (temp19 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp17:temp17 + 0x20] = temp19;\n            var1 = 0x04bb;\n            memory[temp17 + 0x20:temp17 + 0x20 + temp19] = msg.data[temp18 + 0x24:temp18 + 0x24 + temp19];\n            var2 = temp17;\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = msg.sender * 0x02 ** 0x60;\n            var temp21 = memory[0x40:0x60];\n            memory[0x00:0x20] = keccak256(memory[temp21:temp21 + temp20 - temp21 + 0x14]);\n            memory[0x20:0x40] = 0x0c;\n            var3 = msg.sender;\n        \n            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            var temp22 = var2;\n            var4 = 0x1498;\n            var5 = 0x01;\n            var7 = memory[temp22:temp22 + 0x20];\n            var6 = temp22 + 0x20;\n        \n        label_2458:\n            var temp23 = var5;\n            var temp24 = storage[temp23];\n            memory[0x00:0x20] = temp23;\n            var8 = keccak256(memory[0x00:0x20]);\n            var temp25 = var6;\n            var6 = var8 + ((!(temp24 & 0x01) * 0x0100 - 0x01 & temp24) / 0x02 + 0x1f) / 0x20;\n            var9 = temp25;\n        \n            if (0x1f < var7) {\n                var temp26 = var7;\n                storage[var5] = temp26 + temp26 + 0x01;\n            \n                if (!temp26) {\n                label_24C6:\n                    var temp27 = var6;\n                    var6 = 0x14f6;\n                    var7 = 0x0df0;\n                    var temp28 = var8;\n                    var9 = temp28;\n                    var8 = temp27;\n                \n                    if (var8 <= var9) {\n                        var7 = func_14F6(var8, var9);\n                        var6 = var7;\n                        // Error: Could not resolve jump destination!\n                    } else {\n                    label_24DB:\n                        var temp29 = var9;\n                        storage[temp29] = 0x00;\n                        var9 = temp29 + 0x01;\n                    \n                        if (var8 > var9) { goto label_24DB; }\n                    \n                        var7 = func_14F6(var8, var9);\n                        // Error: Could not resolve method call return address!\n                    }\n                } else {\n                    var temp30 = var9;\n                    var temp31 = var7;\n                    var7 = temp30;\n                    var9 = var7 + temp31;\n                \n                    if (var9 <= var7) { goto label_24C6; }\n                \n                label_24B4:\n                    var temp32 = var7;\n                    var temp33 = var8;\n                    storage[temp33] = memory[temp32:temp32 + 0x20];\n                    var7 = temp32 + 0x20;\n                    var8 = temp33 + 0x01;\n                    var9 = var9;\n                \n                    if (var9 <= var7) { goto label_24C6; }\n                    else { goto label_24B4; }\n                }\n            } else {\n                var temp34 = var7;\n                storage[var5] = temp34 + temp34 | (memory[var9:var9 + 0x20] & ~0xff);\n                goto label_24C6;\n            }\n        } else if (var0 == 0xbe9a6555) {\n            // Dispatch table entry for start()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            start();\n            stop();\n        } else if (var0 == 0xc47f0027) {\n            // Dispatch table entry for setName(string)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var temp35 = memory[0x40:0x60];\n            var temp36 = msg.data[0x04:0x24];\n            var temp37 = msg.data[temp36 + 0x04:temp36 + 0x04 + 0x20];\n            memory[0x40:0x60] = temp35 + (temp37 + 0x1f) / 0x20 * 0x20 + 0x20;\n            memory[temp35:temp35 + 0x20] = temp37;\n            var1 = 0x04bb;\n            memory[temp35 + 0x20:temp35 + 0x20 + temp37] = msg.data[temp36 + 0x24:temp36 + 0x24 + temp37];\n            var2 = temp35;\n            var temp38 = memory[0x40:0x60];\n            memory[temp38:temp38 + 0x20] = msg.sender * 0x02 ** 0x60;\n            var temp39 = memory[0x40:0x60];\n            memory[0x00:0x20] = keccak256(memory[temp39:temp39 + temp38 - temp39 + 0x14]);\n            memory[0x20:0x40] = 0x0c;\n            var3 = msg.sender;\n        \n            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            var temp40 = var2;\n            var4 = 0x1498;\n            var5 = 0x00;\n            var7 = memory[temp40:temp40 + 0x20];\n            var6 = temp40 + 0x20;\n            goto label_2458;\n        } else if (var0 == 0xc549e4e9) {\n            // Dispatch table entry for sellPriceAt(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = msg.data[0x04:0x24];\n            var1 = sellPriceAt(var2);\n            goto label_039E;\n        } else if (var0 == 0xc6461625) {\n            // Dispatch table entry for setIV_R4(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_R4(var2);\n            stop();\n        } else if (var0 == 0xcf09e0d0) {\n            // Dispatch table entry for createdAt()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = createdAt();\n            goto label_039E;\n        } else if (var0 == 0xd0a05fea) {\n            // Dispatch table entry for setI_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setI_S(var2);\n            stop();\n        } else if (var0 == 0xd3ee99cf) {\n            // Dispatch table entry for 0xd3ee99cf (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1965();\n            goto label_039E;\n        } else if (var0 == 0xd46d0a22) {\n            // Dispatch table entry for setV_S(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_S(var2);\n            stop();\n        } else if (var0 == 0xdbbb206f) {\n            // Dispatch table entry for buy(address,address,address,address,address)\n            var1 = 0x039e;\n            var temp41 = 0x02 ** 0xa0 - 0x01;\n            var2 = temp41 & msg.data[0x04:0x24];\n            var3 = temp41 & msg.data[0x24:0x44];\n            var4 = temp41 & msg.data[0x44:0x64];\n            var5 = temp41 & msg.data[0x64:0x84];\n            var6 = msg.data[0x84:0xa4] & temp41;\n            var1 = buy(var2, var3, var4, var5, var6);\n            goto label_039E;\n        } else if (var0 == 0xdca27d5e) {\n            // Dispatch table entry for setV_R4(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R4(var2);\n            stop();\n        } else if (var0 == 0xddf1be5f) {\n            // Dispatch table entry for setIII_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIII_R1(var2);\n            stop();\n        } else if (var0 == 0xe3489a4f) {\n            // Dispatch table entry for setII_R1(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setII_R1(var2);\n            stop();\n        } else if (var0 == 0xe4849b32) {\n            // Dispatch table entry for sell(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            sell(var2);\n            stop();\n        } else if (var0 == 0xe70f5d95) {\n            // Dispatch table entry for setIV_R3(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setIV_R3(var2);\n            stop();\n        } else if (var0 == 0xe9fad8ee) {\n            // Dispatch table entry for exit()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            exit();\n            stop();\n        } else if (var0 == 0xec01438e) {\n            // Dispatch table entry for 0xec01438e (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1C0F();\n            goto label_039E;\n        } else if (var0 == 0xecb0116a) {\n            // Dispatch table entry for getExitFee()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0582;\n            var1 = getExitFee();\n            goto label_0582;\n        } else if (var0 == 0xf3b39825) {\n            // Dispatch table entry for 0xf3b39825 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x039e;\n            var2 = func_1C57();\n            goto label_039E;\n        } else if (var0 == 0xf6f36641) {\n            // Dispatch table entry for setV_R5(uint256)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            var2 = msg.data[0x04:0x24];\n            setV_R5(var2);\n            stop();\n        } else if (var0 == 0xfdb5a03e) {\n            // Dispatch table entry for reinvest()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x04bb;\n            reinvest();\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x06;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])] * storage[0x0a] - temp0 / 0x010000000000000000;\n    }\n    \n    function tokensToEthereumAtSupply_(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (arg0 >= 0x02540be400) {\n            var var4 = 0x0de0b6b3a7640000;\n            var temp0 = arg0;\n            var1 = var4 + temp0;\n            var2 = var4 + arg1;\n            var var5 = 0x0c7d;\n            var var6 = temp0 * (var2 / var4 * 0x02540be400 + 0x14f46b0400);\n            var var7 = 0x02;\n            var var8 = (var1 ** var7 - temp0 + ~0x0de0b6b3a763ffff) / var4 * 0x02540be400;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_0C77(var6, var7, var8);\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4;\n            var0 = var3;\n        \n        label_0C8D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0C8D;\n        }\n    }\n    \n    function func_0C77(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1D54(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x00];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x00;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0D1C:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0D13; }\n        \n        label_0CFF:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0CFF; }\n        \n        label_0D13:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0D1C;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_0D1C;\n        }\n    }\n    \n    function func_0D24() returns (var r0) { return storage[0x1a]; }\n    \n    function getSummaryReferralProfit(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] / 0x0100 & temp0 != temp0 & arg0) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x07;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n        label_0C08:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0C08;\n        }\n    }\n    \n    function func_0D82(var arg0) returns (var r0) {\n        var var0 = 0x64;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function setII_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0f] = arg0;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x09]; }\n    \n    function func_0DF3() returns (var r0) { return storage[0x19]; }\n    \n    function setV_R3(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1e] = arg0;\n    }\n    \n    function started() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function setIV_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x17] = arg0;\n    }\n    \n    function func_0E9F() returns (var r0) { return storage[0x13]; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function setIII_R3(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x15] = arg0;\n    }\n    \n    function func_0EE8() returns (var r0) { return storage[0x18]; }\n    \n    function func_0EEE() returns (var r0) { return storage[0x1e]; }\n    \n    function administrators(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function func_0F09() returns (var r0) { return storage[0x14]; }\n    \n    function func_0F0F() returns (var r0) { return storage[0x16]; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0f28;\n        var var7 = 0x01;\n        var6 = myDividends(var7);\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.sender;\n        var5 = 0x0f3f;\n        var6 = 0x00;\n        var5 = myDividends(var6);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var5;\n        storage[temp0] = temp1 + storage[temp0];\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = temp1 * 0x010000000000000000 + storage[temp2];\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var1 = temp4 + temp1;\n        var5 = 0x0fa1;\n        var6 = 0x0d82;\n        var7 = var1;\n        var var8 = 0x03;\n        var var9 = 0x0f98;\n        var9 = getExitFee();\n        var6 = func_0F98(var7, var8, var9);\n        var5 = func_0D82(var6);\n        var2 = var5;\n        var5 = 0x0fb1;\n        var6 = 0x0d82;\n        var7 = var1;\n        var8 = 0x03;\n        var6 = func_1D66(var7, var8);\n        var5 = func_0D82(var6);\n        var temp5 = var5;\n        var3 = temp5;\n        var5 = 0x0fbf;\n        var6 = var1;\n        var7 = var2 + var3;\n        var5 = func_1D54(var6, var7);\n        var4 = var5;\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] / 0x0100 & temp6 == temp6 & var0) {\n            var4 = var3 + var4;\n            var5 = 0x104b;\n            var6 = storage[0x0a];\n            var7 = storage[0x09];\n            var8 = var2 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_1045(var6, var7, var8);\n        \n        label_104B:\n            storage[0x0a] = var5;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = var4;\n            var temp9;\n            temp9, memory[temp7:temp7 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp8 * 0x08fc).value(temp8)(memory[temp7:temp7 + 0x00]);\n            var5 = !temp9;\n        \n            if (!var5) {\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + temp10 - temp11 + 0x20], [0xccad973dcd043c7d680389db4378bd6b9775db7124092e9e0422c9e46d7985dc, stack[-6] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n                var temp12 = returndata.length;\n                memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp13 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp13 & storage[0x03] / 0x0100;\n            memory[0x20:0x40] = 0x05;\n            var temp14 = keccak256(memory[0x00:0x40]);\n            var temp15 = var3;\n            storage[temp14] = temp15 + storage[temp14];\n            memory[0x00:0x20] = temp13 & storage[0x03] / 0x0100;\n            memory[0x20:0x40] = 0x07;\n            var temp16 = keccak256(memory[0x00:0x40]);\n            storage[temp16] = temp15 + storage[temp16];\n            var5 = 0x104b;\n            var6 = storage[0x0a];\n            var7 = storage[0x09];\n            var8 = var2 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_1045(var6, var7, var8);\n            goto label_104B;\n        }\n    }\n    \n    function func_0F98(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 - arg1 & 0xff;\n        r0 = func_1D66(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1045(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1E59(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setIV_R2(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x18] = arg0;\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1116;\n        var var2 = storage[0x09];\n        return sellPriceAt(var2);\n    }\n    \n    function setIV_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x16] = arg0;\n    }\n    \n    function func_1159() returns (var r0) { return storage[0x1d]; }\n    \n    function setII_R2(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x11] = arg0;\n    }\n    \n    function func_119D() returns (var r0) { return storage[0x20]; }\n    \n    function func_11A3() returns (var r0) { return storage[0x0d]; }\n    \n    function setIII_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x12] = arg0;\n    }\n    \n    function myDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n    \n        if (arg0) {\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x05;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = 0x121f;\n            var var4 = var1;\n            var3 = dividendsOf(var4);\n            var0 = var3 + var2;\n        \n        label_1224:\n            return var0;\n        } else {\n            var2 = 0x11f8;\n            var3 = var1;\n            var2 = dividendsOf(var3);\n            var0 = var2;\n            goto label_1224;\n        }\n    }\n    \n    function totalEthereumBalance() returns (var r0) { return address(this).balance; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function getReferralProfit(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x21;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_1275() returns (var r0) { return storage[0x11]; }\n    \n    function func_127B() returns (var r0) { return storage[0x1f]; }\n    \n    function func_1281() returns (var r0) { return storage[0x1b]; }\n    \n    function setIII_R2(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x14] = arg0;\n    }\n    \n    function setV_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1c] = arg0;\n    }\n    \n    function getLevel(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x1311;\n        var var4 = arg0;\n        var3 = func_1E68(var4);\n        var1 = var3;\n        var2 = 0x00;\n    \n        if (var1 >= storage[0x1b]) {\n            var2 = 0x05;\n            goto label_1369;\n        } else if (var1 >= storage[0x16]) {\n            var2 = 0x04;\n            goto label_1369;\n        } else if (var1 >= storage[0x12]) {\n            var2 = 0x03;\n            goto label_1369;\n        } else if (var1 >= storage[0x0f]) {\n            var2 = 0x02;\n            goto label_1369;\n        } else if (var1 < storage[0x0d]) {\n        label_1369:\n            return var2;\n        } else {\n            var2 = 0x01;\n            goto label_1369;\n        }\n    }\n    \n    function getLifetime() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) { return 0x00; }\n    \n        var var1 = 0x18;\n        var var2 = 0x3c;\n        var var3 = var2;\n        var var4 = block.timestamp - storage[0x02];\n    \n        if (!var3) { assert(); }\n    \n        var3 = var4 / var3;\n    \n        if (!var2) { assert(); }\n    \n        var2 = var3 / var2;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (storage[0x09] != 0x00) {\n            var var4 = 0x13e3;\n            var var5 = 0x0de0b6b3a7640000;\n            var4 = calculateEthereumReceived(var5);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x13f3;\n            var5 = 0x0d82;\n            var var6 = var1;\n            var var7 = 0x0c;\n            var5 = func_1D66(var6, var7);\n            var4 = func_0D82(var5);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x13ff;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_1E59(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_1405:\n            return var0;\n        } else {\n            var0 = 0x199c82cc00;\n            goto label_1405;\n        }\n    }\n    \n    function setAdministrator(var arg0, var arg1) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] / 0x0100 & temp2 == temp2 & arg0) { return; }\n    \n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = (arg0 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp4 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp4:temp4 + temp3 - temp4 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = (storage[temp5] & ~0xff) | !!arg1;\n    }\n    \n    function func_149D() returns (var r0) { return storage[0x0b]; }\n    \n    function setI_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0e] = arg0;\n    }\n    \n    function func_14E1() returns (var r0) { return storage[0x17]; }\n    \n    function myTokens() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = 0x14f3;\n        var var3 = var1;\n        var2 = balanceOf(var3);\n        var0 = var2;\n        r0 = func_14F6(var0, var1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_14F6(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0D1C:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0D13; }\n        \n        label_0CFF:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0CFF; }\n        \n        label_0D13:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0D1C;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0D1C;\n        }\n    }\n    \n    function dividendsFull(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n        memory[0x20:0x40] = 0x08;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var3 = 0x1581;\n        var var4 = arg0;\n        var3 = dividendsOf(var4);\n        return var3 + var2 + var1;\n    }\n    \n    function func_1589() returns (var r0) { return storage[0x0e]; }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x15a0;\n        var6 = myTokens();\n    \n        if (var6 <= var5) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var1 = msg.sender;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var5 = 0x00;\n        var6 = 0x15d5;\n        var var7 = 0x01;\n        var6 = myDividends(var7);\n    \n        if (var6 <= var5) {\n        label_15E3:\n            var5 = 0x15f1;\n            var6 = 0x0d82;\n            var7 = arg1;\n            var var8 = 0x01;\n            var6 = func_1D66(var7, var8);\n            var5 = func_0D82(var6);\n            var temp0 = var5;\n            var2 = temp0;\n            var5 = 0x15fd;\n            var6 = arg1;\n            var7 = var2;\n            var5 = func_1D54(var6, var7);\n            var3 = var5;\n            var5 = 0x1608;\n            var6 = var2;\n            var5 = calculateEthereumReceived(var6);\n            var4 = var5;\n            var5 = 0x1616;\n            var6 = storage[0x09];\n            var7 = var2;\n            var5 = func_1D54(var6, var7);\n            storage[0x09] = var5;\n            memory[0x00:0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var5 = 0x163c;\n            var7 = arg1;\n            var5 = func_1D54(var6, var7);\n            var temp1 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = var1 & temp1;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = arg0 & temp1;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var5 = 0x166b;\n            var7 = var3;\n            var5 = func_1E59(var6, var7);\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            var temp3 = temp2 & arg0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x00:0x20] = var1 & temp2;\n            memory[0x20:0x40] = 0x06;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] - arg1 * storage[0x0a];\n            memory[0x00:0x20] = temp3;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = storage[temp5] + var3 * storage[0x0a];\n            var5 = 0x16d9;\n            var6 = storage[0x0a];\n            var7 = storage[0x09];\n            var8 = var4 * 0x010000000000000000;\n        \n            if (!var7) { assert(); }\n        \n            var5 = func_1045(var6, var7, var8);\n            storage[0x0a] = var5;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var3;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = 0x02 ** 0xa0 - 0x01;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0x02 ** 0xa0 - 0x01, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else {\n            var5 = 0x15e3;\n            withdraw();\n            goto label_15E3;\n        }\n    }\n    \n    function func_172C() returns (var r0) { return storage[0x10]; }\n    \n    function setV_R2(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1d] = arg0;\n    }\n    \n    function func_1770() returns (var r0) { return storage[0x12]; }\n    \n    function isAdmin() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function start() {\n        if (storage[0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~0xff) | 0x01;\n        storage[0x02] = block.timestamp;\n    }\n    \n    function sellPriceAt(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (arg0) {\n            var var4 = 0x18bd;\n            var var5 = 0x0de0b6b3a7640000;\n            var var6 = arg0;\n            var4 = tokensToEthereumAtSupply_(var5, var6);\n            var temp0 = var4;\n            var1 = temp0;\n            var4 = 0x18cd;\n            var5 = 0x0d82;\n            var6 = var1;\n            var var7 = 0x06;\n            var5 = func_1D66(var6, var7);\n            var4 = func_0D82(var5);\n            var temp1 = var4;\n            var2 = temp1;\n            var4 = 0x18d9;\n            var5 = var1;\n            var6 = var2;\n            var4 = func_1D54(var5, var6);\n            var3 = var4;\n            var0 = var3;\n        \n        label_0DA6:\n            return var0;\n        } else {\n            var0 = 0x14f46b0400;\n            goto label_0DA6;\n        }\n    }\n    \n    function setIV_R4(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1a] = arg0;\n    }\n    \n    function createdAt() returns (var r0) { return storage[0x02]; }\n    \n    function setI_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0d] = arg0;\n    }\n    \n    function func_1965() returns (var r0) { return storage[0x1c]; }\n    \n    function setV_S(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1b] = arg0;\n    }\n    \n    function buy(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x19cb;\n        var var2 = msg.value;\n        var var3 = arg0;\n        var var4 = arg1;\n        var var5 = arg2;\n        var var6 = arg3;\n        var var7 = arg4;\n        func_1EA7(var2, var3, var4, var5, var6, var7);\n        return var0;\n    }\n    \n    function setV_R4(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x1f] = arg0;\n    }\n    \n    function setIII_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x13] = arg0;\n    }\n    \n    function setII_R1(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x10] = arg0;\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x1a9e;\n        var5 = myTokens();\n    \n        if (var5 <= var4) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x04;\n        var0 = msg.sender;\n    \n        if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var1 = arg0;\n        var4 = 0x1ad3;\n        var5 = var1;\n        var4 = calculateEthereumReceived(var5);\n        var2 = var4;\n        var4 = 0x1ae1;\n        var5 = storage[0x09];\n        var var6 = var1;\n        var4 = func_1D54(var5, var6);\n        storage[0x09] = var4;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var4 = 0x1b07;\n        var5 = storage[keccak256(memory[0x00:0x40])];\n        var6 = var1;\n        var4 = func_1D54(var5, var6);\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = var4;\n        memory[0x20:0x40] = 0x06;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var2 * 0x010000000000000000 + var1 * storage[0x0a];\n        storage[temp0] = storage[temp0] - temp1;\n        var4 = var0 & 0x02 ** 0xa0 - 0x01;\n        var3 = temp1;\n        var5 = 0x8d3a0130073dbd54ab6ac632c05946df540553d3b514c9f8165b4ab7f2b1805e;\n        var6 = var1;\n        var var7 = var2;\n        var var8 = block.timestamp;\n        var var9 = 0x1b78;\n        var9 = buyPrice();\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = var6;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var7;\n        memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = var8;\n        memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = var9;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + temp2 - temp3 + 0x80], [stack[-5], stack[-6]]);\n    }\n    \n    function setIV_R3(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x19] = arg0;\n    }\n    \n    function exit() {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (var1 <= 0x00) {\n        label_1C03:\n            var var2 = 0x1c0b;\n            withdraw();\n            return;\n        } else {\n            var2 = 0x1c03;\n            var var3 = var1;\n            sell(var3);\n            goto label_1C03;\n        }\n    }\n    \n    function func_1C0F() returns (var r0) { return storage[0x0f]; }\n    \n    function getExitFee() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x1c20;\n        var2 = getLifetime();\n        var1 = var2 & 0xff;\n    \n        if (var1 <= 0x06) {\n            var0 = 0x1e;\n            r0 = func_14F6(var0, var1);\n            // Error: Could not resolve method call return address!\n        } else if (var1 >= 0x1e) {\n            var0 = 0x06;\n            r0 = func_14F6(var0, var1);\n            // Error: Could not resolve method call return address!\n        } else {\n            var0 = 0x1e - var1 + 0x06;\n            r0 = func_14F6(var0, var1);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_1C57() returns (var r0) { return storage[0x15]; }\n    \n    function setV_R5(var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender * 0x02 ** 0x60;\n        var temp1 = memory[0x40:0x60];\n        memory[0x00:0x20] = keccak256(memory[temp1:temp1 + temp0 - temp1 + 0x14]);\n        memory[0x20:0x40] = 0x0c;\n        var var0 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x20] = arg0;\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x1caa;\n        var var4 = 0x01;\n        var3 = myDividends(var4);\n    \n        if (var3 <= var2) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x1cbe;\n        var3 = 0x00;\n        var2 = myDividends(var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = var2;\n        storage[temp0] = temp1 + storage[temp0];\n        memory[0x20:0x40] = 0x06;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = temp1 * 0x010000000000000000 + storage[temp2];\n        memory[0x20:0x40] = 0x05;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = storage[temp3];\n        storage[temp3] = 0x00;\n        var0 = temp1 + temp4;\n        var1 = msg.sender;\n        var2 = 0x1d11;\n        var3 = var0;\n        var4 = 0x00;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = var6;\n        var var8 = var7;\n        func_1EA7(var3, var4, var5, var6, var7, var8);\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = var0;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x5d511c2070e5a2dbcc6fbfbb3fd6704a11ab5fa74b793b81aacece2c7cc29405, stack[-1] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function func_1D54(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1D66(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0) {\n            var temp0 = arg0;\n            var1 = arg1 * temp0;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_1D95:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1D95;\n        }\n    }\n    \n    function func_1DB3(var arg0) returns (var r0) {\n        var temp0 = storage[0x09];\n        var var0 = 0x00;\n        var var1 = 0x01431e0fae6d7217caa0000000;\n        var var3 = temp0;\n        var var2 = var0;\n        var var4 = 0x02540be400;\n        var var5 = 0x1e38;\n        var var6 = 0x1e32;\n        var var7 = var3 * 0x05e0a1fd2712875988becaad0000000000 + var3 ** 0x02 * 0x056bc75e2d63100000 + arg0 * 0x0380d4bd8a8678c1bb542c80deb4800000000000 + 0x0197d4df19d605767337e9f14d3eec8920e400000000000000;\n        var6 = func_2389(var7);\n        var5 = func_1E32(var1, var6);\n    \n        if (var4) { return var5 / var4 - var3; }\n        else { assert(); }\n    }\n    \n    function func_1E32(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = func_1D54(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function calculateEthereumReceived(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0e5b;\n        var var2 = arg0;\n        var var3 = storage[0x09];\n        return tokensToEthereumAtSupply_(var2, var3);\n    }\n    \n    function func_1E59(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1E68(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x04;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n    \n        if (var1 >= 0x02540be400) {\n            var var2 = 0x1ea0;\n            var var3 = var1;\n            var2 = calculateEthereumReceived(var3);\n            var0 = var2;\n        \n        label_1224:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1224;\n        }\n    }\n    \n    function func_1EA7(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = 0x1ebc;\n        var var7 = 0x0d82;\n        var var8 = arg0;\n        var var9 = 0x0c;\n        var7 = func_1D66(var8, var9);\n        var6 = func_0D82(var7);\n        var0 = var6;\n        var1 = var0;\n        var2 = 0x00;\n        var3 = 0x00;\n        var6 = 0x1ed6;\n        var7 = arg1;\n        var8 = msg.sender;\n        var9 = storage[0x0d];\n        var6 = func_23BE(var7, var8, var9);\n    \n        if (!var6) {\n        label_1FB4:\n            var6 = 0x1fc1;\n            var7 = arg2;\n            var8 = msg.sender;\n            var9 = storage[0x0f];\n            var6 = func_23BE(var7, var8, var9);\n        \n            if (!var6) {\n            label_207C:\n                var6 = 0x2089;\n                var7 = arg3;\n                var8 = msg.sender;\n                var9 = storage[0x12];\n                var6 = func_23BE(var7, var8, var9);\n            \n                if (!var6) {\n                label_2129:\n                    var6 = 0x2136;\n                    var7 = arg4;\n                    var8 = msg.sender;\n                    var9 = storage[0x16];\n                    var6 = func_23BE(var7, var8, var9);\n                \n                    if (!var6) {\n                    label_21BB:\n                        var6 = 0x21c8;\n                        var7 = arg5;\n                        var8 = msg.sender;\n                        var9 = storage[0x1b];\n                        var6 = func_23BE(var7, var8, var9);\n                    \n                        if (!var6) {\n                        label_2233:\n                            var6 = 0x2245;\n                            var7 = 0x2240;\n                            var8 = arg0;\n                            var9 = var0;\n                            var7 = func_1D54(var8, var9);\n                            var6 = func_2240(var7);\n                            var4 = var6;\n                            var5 = var1 * 0x010000000000000000;\n                            var temp0 = var4 > 0x00;\n                            var6 = temp0;\n                        \n                            if (!var6) {\n                            label_226E:\n                            \n                                if (!var6) { revert(memory[0x00:0x00]); }\n                            \n                                if (storage[0x09] <= 0x00) {\n                                    storage[0x09] = var4;\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x04;\n                                    var6 = 0x22fb;\n                                    var7 = storage[keccak256(memory[0x00:0x40])];\n                                    var8 = var4;\n                                    var6 = func_1E59(var7, var8);\n                                \n                                label_22FB:\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x04;\n                                    storage[keccak256(memory[0x00:0x40])] = var6;\n                                    memory[0x20:0x40] = 0x06;\n                                    var temp1 = keccak256(memory[0x00:0x40]);\n                                    var6 = msg.sender;\n                                    storage[temp1] = storage[temp1] + (var4 * storage[0x0a] - var5);\n                                    var7 = 0xdab8e4b48a2786a8cf2824525000c609475a787fdec377949a4b2ad2cf2be394;\n                                    var8 = arg0;\n                                    var9 = var4;\n                                    var var10 = block.timestamp;\n                                    var var11 = 0x2356;\n                                    var11 = buyPrice();\n                                    var temp2 = memory[0x40:0x60];\n                                    memory[temp2:temp2 + 0x20] = var8;\n                                    memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = var9;\n                                    memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = var10;\n                                    memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = var11;\n                                    var temp3 = memory[0x40:0x60];\n                                    log(memory[temp3:temp3 + temp2 - temp3 + 0x80], [stack[-5], stack[-6]]);\n                                    return;\n                                } else {\n                                    var6 = 0x2290;\n                                    var7 = storage[0x09];\n                                    var8 = var4;\n                                    var6 = func_1E59(var7, var8);\n                                    var temp4 = var6;\n                                    storage[0x09] = temp4;\n                                    var7 = var1 * 0x010000000000000000;\n                                \n                                    if (!temp4) { assert(); }\n                                \n                                    storage[0x0a] = storage[0x0a] + var7 / var6;\n                                    var6 = storage[0x09];\n                                    var7 = var1 * 0x010000000000000000;\n                                \n                                    if (!var6) { assert(); }\n                                \n                                    var temp5 = var5;\n                                    var5 = temp5 - (temp5 - var4 * (var7 / var6));\n                                    memory[0x00:0x20] = msg.sender;\n                                    memory[0x20:0x40] = 0x04;\n                                    var7 = storage[keccak256(memory[0x00:0x40])];\n                                    var6 = 0x22fb;\n                                    var8 = var4;\n                                    var6 = func_1E59(var7, var8);\n                                    goto label_22FB;\n                                }\n                            } else {\n                                var6 = storage[0x09];\n                                var7 = 0x226c;\n                                var8 = var4;\n                                var9 = var6;\n                                var7 = func_1E59(var8, var9);\n                                var6 = var7 > var6;\n                                goto label_226E;\n                            }\n                        } else {\n                            var6 = 0x21dc;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = storage[0x20];\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            memory[0x00:0x20] = arg5 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp6 = var6;\n                            var3 = temp6;\n                            var6 = 0x2202;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg5 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x2226;\n                            var7 = arg5;\n                            var8 = arg4;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x2230;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_2233;\n                        }\n                    } else {\n                        var2 = storage[0x1a];\n                        var6 = storage[0x1b];\n                        var7 = 0x214c;\n                        var8 = arg4;\n                        var7 = func_1E68(var8);\n                    \n                        if (var7 < var6) {\n                            var6 = 0x2164;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                        \n                        label_2164:\n                            memory[0x00:0x20] = arg4 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp7 = var6;\n                            var3 = temp7;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var6 = 0x218a;\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg4 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x21ae;\n                            var7 = arg4;\n                            var8 = arg3;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x21b8;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_21BB;\n                        } else {\n                            var2 = storage[0x1f];\n                            var6 = 0x2164;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            goto label_2164;\n                        }\n                    }\n                } else {\n                    var2 = storage[0x15];\n                    var6 = storage[0x1b];\n                    var7 = 0x209f;\n                    var8 = arg3;\n                    var7 = func_1E68(var8);\n                \n                    if (var7 < var6) {\n                        var6 = storage[0x16];\n                        var7 = 0x20ba;\n                        var8 = arg3;\n                        var7 = func_1E68(var8);\n                    \n                        if (var7 < var6) {\n                        label_20C5:\n                            var6 = 0x20d2;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            memory[0x00:0x20] = arg3 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp8 = var6;\n                            var3 = temp8;\n                            var6 = 0x20f8;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg3 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x211c;\n                            var7 = arg3;\n                            var8 = arg2;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x2126;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_2129;\n                        } else {\n                            var2 = storage[0x19];\n                            goto label_20C5;\n                        }\n                    } else {\n                        var2 = storage[0x1e];\n                        goto label_20C5;\n                    }\n                }\n            } else {\n                var2 = storage[0x11];\n                var6 = storage[0x1b];\n                var7 = 0x1fd7;\n                var8 = arg2;\n                var7 = func_1E68(var8);\n            \n                if (var7 < var6) {\n                    var6 = storage[0x16];\n                    var7 = 0x1ff2;\n                    var8 = arg2;\n                    var7 = func_1E68(var8);\n                \n                    if (var7 < var6) {\n                        var6 = storage[0x12];\n                        var7 = 0x200d;\n                        var8 = arg2;\n                        var7 = func_1E68(var8);\n                    \n                        if (var7 < var6) {\n                        label_2018:\n                            var6 = 0x2025;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp9 = var6;\n                            var3 = temp9;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var6 = 0x204b;\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x206f;\n                            var7 = arg2;\n                            var8 = arg1;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x2079;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_207C;\n                        } else {\n                            var2 = storage[0x14];\n                            goto label_2018;\n                        }\n                    } else {\n                        var2 = storage[0x18];\n                        goto label_2018;\n                    }\n                } else {\n                    var2 = storage[0x1d];\n                    goto label_2018;\n                }\n            }\n        } else {\n            var2 = storage[0x0e];\n            var6 = storage[0x1b];\n            var7 = 0x1eec;\n            var8 = arg1;\n            var7 = func_1E68(var8);\n        \n            if (var7 < var6) {\n                var6 = storage[0x16];\n                var7 = 0x1f07;\n                var8 = arg1;\n                var7 = func_1E68(var8);\n            \n                if (var7 < var6) {\n                    var6 = storage[0x12];\n                    var7 = 0x1f22;\n                    var8 = arg1;\n                    var7 = func_1E68(var8);\n                \n                    if (var7 < var6) {\n                        var6 = storage[0x0f];\n                        var7 = 0x1f3d;\n                        var8 = arg1;\n                        var7 = func_1E68(var8);\n                    \n                        if (var7 < var6) {\n                        label_1F48:\n                            var6 = 0x1f5d;\n                            var7 = 0x1f55;\n                            var8 = arg0;\n                            var9 = var2;\n                            var7 = func_1D66(var8, var9);\n                            var6 = func_1F55(var7);\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            var temp10 = var6;\n                            var3 = temp10;\n                            var7 = storage[keccak256(memory[0x00:0x40])];\n                            var6 = 0x1f83;\n                            var8 = var3;\n                            var6 = func_1E59(var7, var8);\n                            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = 0x05;\n                            storage[keccak256(memory[0x00:0x40])] = var6;\n                            var6 = 0x1fa7;\n                            var7 = arg1;\n                            var8 = msg.sender;\n                            var9 = var3;\n                            func_2416(var7, var8, var9);\n                            var6 = 0x1fb1;\n                            var7 = var1;\n                            var8 = var3;\n                            var6 = func_1D54(var7, var8);\n                            var1 = var6;\n                            goto label_1FB4;\n                        } else {\n                            var2 = storage[0x10];\n                            goto label_1F48;\n                        }\n                    } else {\n                        var2 = storage[0x13];\n                        goto label_1F48;\n                    }\n                } else {\n                    var2 = storage[0x17];\n                    goto label_1F48;\n                }\n            } else {\n                var2 = storage[0x1c];\n                goto label_1F48;\n            }\n        }\n    }\n    \n    function func_1F55(var arg0) returns (var r0) {\n        var var0 = 0x03e8;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (var3) { return var4 / var3; }\n        else { assert(); }\n    }\n    \n    function func_2240(var arg0) returns (var r0) {\n        r0 = func_1DB3(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2389(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0;\n        var var1 = (var0 + 0x01) / 0x02;\n    \n        if (var1 >= var0) {\n        label_1224:\n            return var0;\n        } else {\n        label_239B:\n            var0 = var1;\n            var var2 = 0x02;\n            var var3 = var0;\n            var var4 = var3;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 + var3;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_1224; }\n            else { goto label_239B; }\n        }\n    }\n    \n    function func_23BE(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !!(arg0 & 0x02 ** 0xa0 - 0x01);\n    \n        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            var1 = arg0 & 0x02 ** 0xa0 - 0x01 != arg1 & 0x02 ** 0xa0 - 0x01;\n        \n            if (!var1) { goto label_240E; }\n            else { goto label_23F1; }\n        } else if (!var1) {\n        label_240E:\n            return var1;\n        } else {\n        label_23F1:\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x04;\n            return arg2 <= storage[keccak256(memory[0x00:0x40])];\n        }\n    }\n    \n    function func_2416(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x21;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg2;\n        storage[temp3] = temp4 + storage[temp3];\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x07;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = temp4 + storage[temp5];\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 64.10378241539001,
	"usage": {
		"completion_tokens": 642,
		"prompt_tokens": 28639,
		"total_tokens": 29281
	}
}