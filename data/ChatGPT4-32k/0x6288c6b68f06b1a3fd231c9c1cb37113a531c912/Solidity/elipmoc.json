{
	"address": "0x6288c6b68f06b1a3fd231c9c1cb37113a531c912",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the contract code in Solidity:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Shares {\n    mapping (address => uint256) private _shares;\n    uint256 private _totalShares;\n\n    function totalShares() public view returns (uint256) { \n        return _totalShares;\n    }\n\n    function percentsRemaining() public pure returns (uint256) { \n        return 90;\n    }\n\n    function balanceOf(address account) public view returns (uint256) { \n        return _shares[account];\n    }\n\n    function _SafeSub(uint256 a, uint256 b) private pure returns (uint256) { \n        require(b >= a, \"Subtraction overflow\");\n        return b - a;\n    }\n\n    function _SafeMul(uint256 a, uint256 b) private pure returns (uint256) { \n        if (b == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        require(c / a == b, \"Multiplication overflow\");\n        return c;\n    }\n\n    function _SafeDiv(uint256 a, uint256 b) private pure returns (uint256) { \n        require(a > 0, \"Division by zero\");\n        return b / a;\n    }\n\n    function calculateShares() private view returns (uint256) { \n        if (_totalShares == 0) {\n            return 0;\n        } else {\n            uint256 shares = _SafeMul(_shares[msg.sender], address(this).balance);\n            uint256 percentShares = _SafeMul(90, shares);\n            return _SafeDiv(_totalShares, percentShares);\n        }\n    }\n\n    fallback() external payable {\n        if (msg.value <= 0) {\n            uint256 shares = calculateShares();\n            _totalShares = _SafeSub(_shares[msg.sender], _totalShares);\n            _shares[msg.sender] = 0;\n            (bool success, ) = msg.sender.call{value: shares, gas: 2300 * (shares == 0 ? 1 : 0)}(\"\");\n            require(success);\n        } else {\n            uint256 value;\n            if (_totalShares != 0) {\n                uint256 excess = _SafeSub(msg.value, address(this).balance);\n                value = _SafeDiv(excess, _SafeMul(_totalShares, msg.value));\n            } else {\n                value = msg.value;\n            }\n            _shares[msg.sender] += value;\n            _totalShares += value;\n        }\n    }\n}\n```\n\nPlease note that the provided code was analyzed and interpreted to the best of my understanding based on the provided pseudocode. The exact Solidity implementation might differ depending on the exact business logic and the original code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701456661,
	"id": "chatcmpl-8R2tJOq68oWOTVcQXXJXFrautrSHe",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.14 01:24 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _shares; // STORAGE[0x0]\nuint256 _totalShares; // STORAGE[0x1]\n\n\nfunction totalShares() public nonPayable { \n    return _totalShares;\n}\n\nfunction percentsRemaining() public nonPayable { \n    return 90;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    v0 = 0x28f();\n    return v0;\n}\n\nfunction shares(address varg0) public nonPayable { \n    return _shares[varg0];\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    require(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        require(v0 / varg1 == varg0);\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0);\n    assert(varg0);\n    return varg1 / varg0;\n}\n\nfunction 0x28f() private { \n    v0 = v1 = 0;\n    if (0 != _totalShares) {\n        v0 = v2 = _totalShares;\n        v3 = address(v4);\n        v4 = v5 = 764;\n        v0 = v6 = 100;\n        v4 = v7 = 163;\n        v8 = _SafeMul(_shares[v3], this.balance);\n        v9 = v10 = _SafeMul(90, v8);\n        while (1) {\n            v9 = _SafeDiv(v0, v9);\n        }\n    } else {\n        v9 = v11 = 0;\n    }\n    return v9;\n}\n\nfunction fallback() public payable { \n    if (msg.value <= 0) {\n        v0 = 0x28f();\n        v1 = _SafeSub(_shares[msg.sender], _totalShares);\n        _totalShares = v1;\n        _shares[msg.sender] = 0;\n        v2 = msg.sender.call().value(v0).gas(2300 * !v0);\n        require(v2); // checks call status, propagates error data on error\n    } else {\n        if (_totalShares) {\n            v3 = _SafeSub(msg.value, this.balance);\n            v4 = _SafeMul(_totalShares, msg.value);\n            v5 = v6 = _SafeDiv(v3, v4);\n        } else {\n            v5 = v7 = msg.value;\n        }\n        require(v5 + _shares[msg.sender] >= _shares[msg.sender]);\n        _shares[msg.sender] += v5;\n        require(v5 + _totalShares >= _totalShares);\n        _totalShares += v5;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x3a98ef39) {\n            totalShares();\n        } else if (0x4dc244ed == function_selector) {\n            percentsRemaining();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0xce7c2ac2 == function_selector) {\n            shares(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 01:24 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _shares; // STORAGE[0x0]\nuint256 _totalShares; // STORAGE[0x1]\n\n\nfunction totalShares() public nonPayable { \n    return _totalShares;\n}\n\nfunction percentsRemaining() public nonPayable { \n    return 90;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    v0 = 0x28f();\n    return v0;\n}\n\nfunction shares(address varg0) public nonPayable { \n    return _shares[varg0];\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    require(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        require(v0 / varg1 == varg0);\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0);\n    assert(varg0);\n    return varg1 / varg0;\n}\n\nfunction 0x28f() private { \n    v0 = v1 = 0;\n    if (0 != _totalShares) {\n        v0 = v2 = _totalShares;\n        v3 = address(v4);\n        v4 = v5 = 764;\n        v0 = v6 = 100;\n        v4 = v7 = 163;\n        v8 = _SafeMul(_shares[v3], this.balance);\n        v9 = v10 = _SafeMul(90, v8);\n        while (1) {\n            v9 = _SafeDiv(v0, v9);\n        }\n    } else {\n        v9 = v11 = 0;\n    }\n    return v9;\n}\n\nfunction fallback() public payable { \n    if (msg.value <= 0) {\n        v0 = 0x28f();\n        v1 = _SafeSub(_shares[msg.sender], _totalShares);\n        _totalShares = v1;\n        _shares[msg.sender] = 0;\n        v2 = msg.sender.call().value(v0).gas(2300 * !v0);\n        require(v2); // checks call status, propagates error data on error\n    } else {\n        if (_totalShares) {\n            v3 = _SafeSub(msg.value, this.balance);\n            v4 = _SafeMul(_totalShares, msg.value);\n            v5 = v6 = _SafeDiv(v3, v4);\n        } else {\n            v5 = v7 = msg.value;\n        }\n        require(v5 + _shares[msg.sender] >= _shares[msg.sender]);\n        _shares[msg.sender] += v5;\n        require(v5 + _totalShares >= _totalShares);\n        _totalShares += v5;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x3a98ef39) {\n            totalShares();\n        } else if (0x4dc244ed == function_selector) {\n            percentsRemaining();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0xce7c2ac2 == function_selector) {\n            shares(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 01:24 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _shares; // STORAGE[0x0]\nuint256 _totalShares; // STORAGE[0x1]\n\n\nfunction totalShares() public nonPayable { \n    return _totalShares;\n}\n\nfunction percentsRemaining() public nonPayable { \n    return 90;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    v0 = 0x28f();\n    return v0;\n}\n\nfunction shares(address varg0) public nonPayable { \n    return _shares[varg0];\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    require(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = varg0 * varg1;\n        assert(varg1);\n        require(v0 / varg1 == varg0);\n        return v0;\n    } else {\n        return 0;\n    }\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0);\n    assert(varg0);\n    return varg1 / varg0;\n}\n\nfunction 0x28f() private { \n    v0 = v1 = 0;\n    if (0 != _totalShares) {\n        v0 = v2 = _totalShares;\n        v3 = address(v4);\n        v4 = v5 = 764;\n        v0 = v6 = 100;\n        v4 = v7 = 163;\n        v8 = _SafeMul(_shares[v3], this.balance);\n        v9 = v10 = _SafeMul(90, v8);\n        while (1) {\n            v9 = _SafeDiv(v0, v9);\n        }\n    } else {\n        v9 = v11 = 0;\n    }\n    return v9;\n}\n\nfunction fallback() public payable { \n    if (msg.value <= 0) {\n        v0 = 0x28f();\n        v1 = _SafeSub(_shares[msg.sender], _totalShares);\n        _totalShares = v1;\n        _shares[msg.sender] = 0;\n        v2 = msg.sender.call().value(v0).gas(2300 * !v0);\n        require(v2); // checks call status, propagates error data on error\n    } else {\n        if (_totalShares) {\n            v3 = _SafeSub(msg.value, this.balance);\n            v4 = _SafeMul(_totalShares, msg.value);\n            v5 = v6 = _SafeDiv(v3, v4);\n        } else {\n            v5 = v7 = msg.value;\n        }\n        require(v5 + _shares[msg.sender] >= _shares[msg.sender]);\n        _shares[msg.sender] += v5;\n        require(v5 + _totalShares >= _totalShares);\n        _totalShares += v5;\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x3a98ef39) {\n            totalShares();\n        } else if (0x4dc244ed == function_selector) {\n            percentsRemaining();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0xce7c2ac2 == function_selector) {\n            shares(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 23.996726274490356,
	"usage": {
		"completion_tokens": 563,
		"prompt_tokens": 891,
		"total_tokens": 1454
	}
}