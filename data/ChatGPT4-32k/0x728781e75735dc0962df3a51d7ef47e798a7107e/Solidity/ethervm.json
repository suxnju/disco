{
	"address": "0x728781e75735dc0962df3a51d7ef47e798a7107e",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Contract {\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public isAuthorizedProvider;\n    \n    uint256 public totalSupply;\n    address public owner;\n    \n    constructor() public {\n        totalSupply = 10000;\n        balanceOf[msg.sender] = totalSupply;\n        owner = msg.sender;\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balanceOf[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        return true;\n    }\n\n    function authorizeProvider(address _provider) public {\n        require(msg.sender == owner);\n        isAuthorizedProvider[_provider] = true;\n    }\n\n    function deauthorizeProvider(address _provider) public {\n        require(msg.sender == owner);\n        isAuthorizedProvider[_provider] = false;\n    }\n\n    function checkAuthorization(address _provider) public view returns (bool) {\n        return isAuthorizedProvider[_provider];\n    }\n}\n```\nPlease note that this is a simple token contract code and it is not an exact Solidity translation of the provided EVM bytecode. The EVM bytecode involves more complex function calls and state variables, which are not represented in this Solidity code. This code was produced to give you a general idea of what the EVM bytecode could represent in Solidity.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471942,
	"id": "chatcmpl-8MuikYwn3WChhcxjlhCV3y630IORq",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_02A2:\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (!(storage[0x08] / 0x02 ** 0xa8 & 0xff)) {\n                var0 = address(this);\n                var1 = 0xfa6b129d;\n                var2 = msg.value;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n                memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = msg.sender;\n                var3 = temp2 + 0x24;\n                var4 = 0x00;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = var2;\n                var9 = var0;\n            \n                if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp3;\n                temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x25ee).value(var8)(memory[var7:var7 + var6]);\n            \n                if (temp3) { stop(); }\n                else { revert(memory[0x00:0x00]); }\n            } else if (block.number < storage[0x13]) { revert(memory[0x00:0x00]); }\n            else {\n                var var0 = address(this);\n                var var1 = 0x3d8c9b8c;\n                var var2 = msg.value;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n                var var3 = temp0 + 0x24;\n                var var4 = 0x20;\n                var var5 = memory[0x40:0x60];\n                var var6 = var3 - var5;\n                var var7 = var5;\n                var var8 = var2;\n                var var9 = var0;\n            \n                if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp1;\n                temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x25ee).value(var8)(memory[var7:var7 + var6]);\n            \n                if (temp1) { stop(); }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x310e16) {\n                // Dispatch table entry for sellWolk(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24];\n                var1 = sellWolk(var2);\n            \n            label_03CC:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var1;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f1;\n                var2 = name();\n            \n            label_03F1:\n                var temp6 = memory[0x40:0x60];\n                var3 = temp6;\n                memory[var3:var3 + 0x20] = 0x20;\n                var4 = var3;\n                var temp7 = var4 + 0x20;\n                var temp8 = var2;\n                memory[temp7:temp7 + 0x20] = memory[temp8:temp8 + 0x20];\n                var5 = temp7 + 0x20;\n                var6 = temp8 + 0x20;\n                var7 = memory[temp8:temp8 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_042E:\n                    var temp9 = var7;\n                    var5 = temp9 + var5;\n                    var6 = temp9 & 0x1f;\n                \n                    if (!var6) {\n                        var temp10 = memory[0x40:0x60];\n                        return memory[temp10:temp10 + var5 - temp10];\n                    } else {\n                        var temp11 = var6;\n                        var temp12 = var5 - temp11;\n                        memory[temp12:temp12 + 0x20] = ~(0x0100 ** (0x20 - temp11) - 0x01) & memory[temp12:temp12 + 0x20];\n                        var temp13 = memory[0x40:0x60];\n                        return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n                    }\n                } else {\n                label_041E:\n                    var temp14 = var11;\n                    memory[var9 + temp14:var9 + temp14 + 0x20] = memory[var10 + temp14:var10 + temp14 + 0x20];\n                    var11 = temp14 + 0x20;\n                \n                    if (var11 >= var8) { goto label_042E; }\n                    else { goto label_041E; }\n                }\n            } else if (var0 == 0x079ee6b3) {\n                // Dispatch table entry for addParticipant(address[],uint256[])\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp15 = msg.data[0x04:0x24];\n                var temp16 = msg.data[temp15 + 0x04:temp15 + 0x04 + 0x20];\n                var temp17 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp17 + temp16 * 0x20 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp16;\n                var temp18 = temp16 * 0x20;\n                memory[temp17 + 0x20:temp17 + 0x20 + temp18] = msg.data[temp15 + 0x24:temp15 + 0x24 + temp18];\n                var2 = temp17;\n                var temp19 = msg.data[0x24:0x44] + 0x04;\n                var temp20 = msg.data[temp19:temp19 + 0x20];\n                var temp21 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp21 + temp20 * 0x20 + 0x20;\n                memory[temp21:temp21 + 0x20] = temp20;\n                var temp22 = temp20 * 0x20;\n                memory[temp21 + 0x20:temp21 + 0x20 + temp22] = msg.data[temp19 + 0x20:temp19 + 0x20 + temp22];\n                var3 = temp21;\n                var1 = addParticipant(var2, var3);\n            \n            label_04F8:\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = !!var1;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x112ea262) {\n                // Dispatch table entry for authorizeProvider(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = authorizeProvider(var2);\n                goto label_04F8;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var1 = totalSupply();\n                goto label_03CC;\n            } else if (var0 == 0x189d165e) {\n                // Dispatch table entry for setBurnRate(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24];\n                var1 = setBurnRate(var2);\n                goto label_04F8;\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp25 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp25 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp25;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_04F8;\n            } else if (var0 == 0x2659d8ef) {\n                // Dispatch table entry for setExchangeFormula(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = setExchangeFormula(var2);\n                goto label_04F8;\n            } else if (var0 == 0x2f7a407b) {\n                // Dispatch table entry for exchangeFormula()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = exchangeFormula();\n            \n            label_0646:\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = decimals();\n                goto label_03CC;\n            } else if (var0 == 0x32c6f315) {\n                // Dispatch table entry for exchangeIsRunning()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = exchangeIsRunning();\n                goto label_04F8;\n            } else if (var0 == 0x3bee0613) {\n                // Dispatch table entry for updateExchangeStatus(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = updateExchangeStatus(var2);\n                goto label_04F8;\n            } else if (var0 == 0x3d8c9b8c) {\n                // Dispatch table entry for purchaseWolk(address)\n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = purchaseWolk(var2);\n                goto label_03CC;\n            } else if (var0 == 0x421521b1) {\n                // Dispatch table entry for finalizeOpenSale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b2;\n                finalizeOpenSale();\n                stop();\n            } else if (var0 == 0x4bb278f3) {\n                // Dispatch table entry for finalize()\n                var1 = 0x03b2;\n                var2 = 0x00;\n                var3 = var2;\n                var temp28 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x08] & temp28 != temp28 & msg.sender) { assert(); }\n            \n                var4 = storage[0x08] / 0x02 ** 0xa8 & 0xff;\n            \n                if (!var4) {\n                    if (!var4) { revert(memory[0x00:0x00]); }\n                \n                label_18A6:\n                    var4 = 0x18bd;\n                    var5 = 0x18b6;\n                    var6 = msg.value;\n                    var7 = 0x0186a0;\n                    var5 = func_2CB4(var6, var7);\n                    var4 = func_18B6(var5);\n                    var temp29 = var4;\n                    var2 = temp29;\n                    var4 = 0x18cb;\n                    var5 = storage[0x02];\n                    var6 = var2;\n                    var4 = func_2CE3(var5, var6);\n                    var3 = var4;\n                    storage[0x02] = var3;\n                    var4 = 0x18e0;\n                    var5 = storage[0x05];\n                    var6 = msg.value;\n                    var4 = func_2CE3(var5, var6);\n                    storage[0x05] = var4;\n                    var temp30 = 0x02 ** 0xa0 - 0x01;\n                    var temp31 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                    var temp32 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp31;\n                    var temp33 = memory[0x40:0x60];\n                    memory[temp33:temp33 + 0x20] = var2;\n                    var temp34 = memory[0x40:0x60];\n                    log(memory[temp34:temp34 + (temp33 + 0x20) - temp34], [memory[0x00:0x20], address(this), storage[0x08] & 0x02 ** 0xa0 - 0x01]);\n                    memory[0x00:0x20] = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = 0x193a;\n                    var5 = storage[keccak256(memory[0x00:0x40])];\n                    var6 = var2;\n                    var4 = func_2CE3(var5, var6);\n                    var temp35 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp35 & storage[0x08];\n                    memory[0x20:0x40] = 0x00;\n                    storage[keccak256(memory[0x00:0x40])] = var4;\n                    var temp36 = memory[0x40:0x60];\n                    memory[temp36:temp36 + 0x20] = var2;\n                    var temp37 = memory[0x40:0x60];\n                    log(memory[temp37:temp37 + (temp36 + 0x20) - temp37], [0x7ff6ea1c893a974b2f363e8f8e474a1b52958080d1fffe0d085c286de30035d2, storage[0x08] & 0x02 ** 0xa0 - 0x01]);\n                    storage[0x08] = (storage[0x08] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n                    // Error: Could not resolve jump destination!\n                } else if (!(storage[0x08] / 0x02 ** 0xa0 & 0xff)) { goto label_18A6; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x54b8dfcb) {\n                // Dispatch table entry for settleBuyer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = settleBuyer(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b2;\n                refund();\n                stop();\n            } else if (var0 == 0x5e0b1259) {\n                // Dispatch table entry for end_block()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = end_block();\n                goto label_03CC;\n            } else if (var0 == 0x64da8ad3) {\n                // Dispatch table entry for settleSeller(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = settleSeller(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x6712e0be) {\n                // Dispatch table entry for tokenGenerationMin()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = tokenGenerationMin();\n                goto label_03CC;\n            } else if (var0 == 0x673b57e9) {\n                // Dispatch table entry for deauthorizeProvider(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = deauthorizeProvider(var2);\n                goto label_04F8;\n            } else if (var0 == 0x685c234a) {\n                // Dispatch table entry for checkAuthorization(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp38 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp38 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp38;\n                var1 = checkAuthorization(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x6c9c1d41) {\n                // Dispatch table entry for checkServiceFee(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = checkServiceFee(var2);\n                goto label_03CC;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_03CC;\n            } else if (var0 == 0x714d497a) {\n                // Dispatch table entry for maxPerExchangeBP()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = maxPerExchangeBP();\n                goto label_03CC;\n            } else if (var0 == 0x726df9cc) {\n                // Dispatch table entry for grantService(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp39 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp39 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp39;\n                var1 = grantService(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x79ba5097) {\n                // Dispatch table entry for acceptOwnership()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b2;\n                acceptOwnership();\n                stop();\n            } else if (var0 == 0x7e1c0c09) {\n                // Dispatch table entry for totalTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = totalTokens();\n                goto label_03CC;\n            } else if (var0 == 0x823ba0b8) {\n                // Dispatch table entry for burnFormula()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = burnFormula();\n                goto label_0646;\n            } else if (var0 == 0x826c69b8) {\n                // Dispatch table entry for participantBalance(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = participantBalance(var2);\n                goto label_03CC;\n            } else if (var0 == 0x847dc0a7) {\n                // Dispatch table entry for percentageETHReserve()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09c3;\n                var2 = percentageETHReserve();\n                var temp40 = memory[0x40:0x60];\n                memory[temp40:temp40 + 0x20] = var2 & 0xff;\n                var temp41 = memory[0x40:0x60];\n                return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = owner();\n                goto label_0646;\n            } else if (var0 == 0x8ea8e149) {\n                // Dispatch table entry for removeService(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp42 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp42 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp42;\n                var1 = removeService(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x9075becf) {\n                // Dispatch table entry for multisigWallet()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = multisigWallet();\n                goto label_0646;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f1;\n                var2 = symbol();\n                goto label_03F1;\n            } else if (var0 == 0x99dd1ed9) {\n                // Dispatch table entry for estLiquidationCap()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var1 = estLiquidationCap();\n                goto label_03CC;\n            } else if (var0 == 0x9a436c9b) {\n                // Dispatch table entry for burnBasisPoints()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = burnBasisPoints();\n                goto label_03CC;\n            } else if (var0 == 0xa10954fe) {\n                // Dispatch table entry for reserveBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = reserveBalance();\n                goto label_03CC;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0xacac0b9f) {\n                // Dispatch table entry for setMaxPerExchange(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24];\n                var1 = setMaxPerExchange(var2);\n                goto label_04F8;\n            } else if (var0 == 0xad7e01c8) {\n                // Dispatch table entry for wolkGenesis(uint256,uint256,uint256,address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64];\n                var temp43 = 0x02 ** 0xa0 - 0x01;\n                var5 = temp43 & msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4] & temp43;\n                var1 = wolkGenesis(var2, var3, var4, var5, var6);\n                goto label_04F8;\n            } else if (var0 == 0xb1a9bd77) {\n                // Dispatch table entry for settlementIsRunning()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = settlementIsRunning();\n                goto label_04F8;\n            } else if (var0 == 0xb57e6ea1) {\n                // Dispatch table entry for tokenGenerationMax()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = tokenGenerationMax();\n                goto label_03CC;\n            } else if (var0 == 0xb87fb3db) {\n                // Dispatch table entry for start_block()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = start_block();\n                goto label_03CC;\n            } else if (var0 == 0xbcbfe43c) {\n                // Dispatch table entry for openSaleCompleted()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = openSaleCompleted();\n                goto label_04F8;\n            } else if (var0 == 0xc5b15057) {\n                // Dispatch table entry for updateSettlementStatus(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = updateSettlementStatus(var2);\n                goto label_04F8;\n            } else if (var0 == 0xcba9c0e0) {\n                // Dispatch table entry for presale_start_block()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = presale_start_block();\n                goto label_03CC;\n            } else if (var0 == 0xd4ee1d90) {\n                // Dispatch table entry for newOwner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = newOwner();\n                goto label_0646;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var temp44 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp44 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp44;\n                var1 = allowance(var2, var3);\n                goto label_03CC;\n            } else if (var0 == 0xde179108) {\n                // Dispatch table entry for allSaleCompleted()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = allSaleCompleted();\n                goto label_04F8;\n            } else if (var0 == 0xe814c941) {\n                // Dispatch table entry for removeParticipant(address[])\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp45 = msg.data[0x04:0x24];\n                var temp46 = msg.data[temp45 + 0x04:temp45 + 0x04 + 0x20];\n                var temp47 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp47 + temp46 * 0x20 + 0x20;\n                memory[temp47:temp47 + 0x20] = temp46;\n                var temp48 = temp46 * 0x20;\n                memory[temp47 + 0x20:temp47 + 0x20 + temp48] = msg.data[temp45 + 0x24:temp45 + 0x24 + temp48];\n                var2 = temp47;\n                var1 = removeParticipant(var2);\n                goto label_04F8;\n            } else if (var0 == 0xef2fa169) {\n                // Dispatch table entry for setServiceFee(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = setServiceFee(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0xf2e1192a) {\n                // Dispatch table entry for wolkSale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = wolkSale();\n                goto label_0646;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf7dadf7d) {\n                // Dispatch table entry for setBurnFormula(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = setBurnFormula(var2);\n                goto label_04F8;\n            } else if (var0 == 0xf7fca4f4) {\n                // Dispatch table entry for setFeeFormula(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = setFeeFormula(var2);\n                goto label_04F8;\n            } else if (var0 == 0xfa6b129d) {\n                // Dispatch table entry for tokenGenerationEvent(address)\n                var1 = 0x03b2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                tokenGenerationEvent(var2);\n                stop();\n            } else if (var0 == 0xff0935b1) {\n                // Dispatch table entry for checkFeeSchedule(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = checkFeeSchedule(var2);\n                goto label_0646;\n            } else { goto label_02A2; }\n        }\n    }\n    \n    function sellWolk(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = storage[0x15] / 0x0100 ** 0x14 & 0xff;\n    \n        if (!var3) {\n            if (!var3) { revert(memory[0x00:0x00]); }\n        \n        label_0F57:\n            var3 = 0x0f5f;\n            var3 = estLiquidationCap();\n        \n        label_0F5F:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var1 = var3;\n        \n            if (storage[keccak256(memory[0x00:0x40])] < arg0) { revert(memory[0x00:0x00]); }\n        \n            if (var1 < arg0) { revert(memory[0x00:0x00]); }\n        \n            var3 = 0x0fac;\n            var var4 = arg0;\n            var var5 = storage[0x15] & 0x02 ** 0xa0 - 0x01;\n            var3 = func_2C07(var4, var5);\n            var2 = var3;\n        \n            if (address(this).balance <= var2) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var3 = 0x0fe8;\n            var5 = arg0;\n            var3 = func_2C9D(var4, var5);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x100e;\n            var4 = storage[0x02];\n            var5 = arg0;\n            var3 = func_2C9D(var4, var5);\n            storage[0x02] = var3;\n            var3 = 0x1025;\n            var4 = address(this).balance;\n            var5 = var2;\n            var3 = func_2C9D(var4, var5);\n            storage[0x05] = var3;\n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xf505eb6e610340eed3eea0048f8ec258cda0927f73be2d293288fde9a546f1ab, msg.sender]);\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp0;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], msg.sender, 0x00]);\n            var temp7 = var2;\n            var temp8 = memory[0x40:0x60];\n            var temp9;\n            temp9, memory[temp8:temp8 + 0x00] = address(msg.sender).call.gas(!temp7 * 0x08fc).value(temp7)(memory[temp8:temp8 + memory[0x40:0x60] - temp8]);\n        \n            if (temp9) { return var2; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (storage[0x08] / 0x02 ** 0xa0 & 0xff) { goto label_0F57; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x13;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x576f6c6b2050726f746f636f6c20546f6b656e00000000000000000000000000;\n        return r0;\n    }\n    \n    function addParticipant(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        if (memory[arg0:arg0 + 0x20] != memory[arg1:arg1 + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x00;\n    \n        if (var1 >= memory[arg0:arg0 + 0x20]) {\n        label_11E6:\n            return 0x01;\n        } else {\n        label_113F:\n            var var2 = 0x01;\n            var var3 = 0x10;\n            var var4 = 0x00;\n            var var5 = arg0;\n            var var6 = var1;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var temp1 = var4;\n            memory[temp1:temp1 + 0x20] = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = var3;\n            var temp2 = keccak256(memory[0x00:0x00 + temp1 + 0x40]);\n            storage[temp2] = !!var2 | (storage[temp2] & ~0xff);\n            var2 = 0x11a9;\n            var3 = arg1;\n            var4 = var1;\n        \n            if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n        \n            var2 = func_1191(var3, var4);\n            var3 = 0x0f;\n            var4 = 0x00;\n            var5 = arg0;\n            var6 = var1;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var temp3 = var4;\n            memory[temp3:temp3 + 0x20] = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var3;\n            storage[keccak256(memory[0x00:0x00 + temp3 + 0x40])] = var2;\n            var1 = var1 + 0x01;\n        \n            if (var1 >= memory[arg0:arg0 + 0x20]) { goto label_11E6; }\n            else { goto label_113F; }\n        }\n    }\n    \n    function func_1191(var arg0, var arg1) returns (var r0) {\n        arg0 = memory[arg1 * 0x20 + arg0 + 0x20:arg1 * 0x20 + arg0 + 0x20 + 0x20];\n        arg1 = 0x0de0b6b3a7640000;\n        r0 = func_2CB4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (!var1) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_1230; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1) {\n        label_1230:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x01;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function authorizeProvider(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n    \n        if (!(storage[keccak256(memory[var0:var0 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x0b;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3 & temp0;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8563cf3307d6904af4525af51010bc07d34ec3154f552d9e00f64ed395dc0470, msg.sender]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function setBurnRate(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = arg0 > 0x00;\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_1379:\n            storage[0x0a] = arg0;\n            return 0x01;\n        } else if (arg0 <= 0x03e8) { goto label_1379; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0 & temp0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp2;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x00;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])] < arg2;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] < arg2) {\n            var temp11 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp11;\n            memory[0x20:0x40] = 0x01;\n            var temp12 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp11 & msg.sender;\n            memory[0x20:0x40] = temp12;\n            var2 = storage[keccak256(memory[0x00:0x40])] >= arg2;\n        \n            if (!var2) { goto label_13FE; }\n            else { goto label_13F9; }\n        } else if (!var2) {\n        label_13FE:\n        \n            if (!var2) {\n            label_14D2:\n                return 0x00;\n            } else {\n            label_1404:\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                var var3 = storage[keccak256(memory[0x00:0x40])];\n                var2 = 0x1426;\n                var var4 = arg2;\n                var2 = func_2CE3(var3, var4);\n                var temp3 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg1 & temp3;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                memory[0x00:0x20] = arg0 & temp3;\n                var2 = 0x1455;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var4 = arg2;\n                var2 = func_2C9D(var3, var4);\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var2 = 0x1478;\n                var3 = var1;\n                var4 = arg2;\n                var2 = func_2C9D(var3, var4);\n                var temp4 = 0x02 ** 0xa0 - 0x01;\n                var temp5 = arg0 & temp4;\n                memory[0x00:0x20] = temp5;\n                memory[0x20:0x40] = 0x01;\n                var temp6 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = temp4 & msg.sender;\n                memory[0x20:0x40] = temp6;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var temp7 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                var temp8 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp7;\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = arg2;\n                var temp10 = memory[0x40:0x60];\n                log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [memory[0x00:0x20], stack[-6] & 0x02 ** 0xa0 - 0x01, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n                return 0x01;\n            }\n        } else {\n        label_13F9:\n        \n            if (arg2 <= 0x00) { goto label_14D2; }\n            else { goto label_1404; }\n        }\n    }\n    \n    function setExchangeFormula(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = 0x00;\n        var var2 = 0x150f;\n        var var3 = 0x0de0b6b3a7640000;\n        var var4 = arg0;\n        var2 = func_2C07(var3, var4);\n    \n        if (var2 <= var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x00;\n        var2 = 0x152d;\n        var3 = 0x0de0b6b3a7640000;\n        var4 = arg0;\n        var2 = func_2D0B(var3, var4);\n    \n        if (var2 <= var1) { revert(memory[0x00:0x00]); }\n    \n        storage[0x15] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x15] & ~0xffffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function exchangeFormula() returns (var r0) { return storage[0x15] & 0x02 ** 0xa0 - 0x01; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function exchangeIsRunning() returns (var r0) { return storage[0x15] / 0x02 ** 0xa0 & 0xff; }\n    \n    function updateExchangeStatus(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        if (!arg0) {\n        label_1607:\n            storage[0x15] = !!arg0 * 0x02 ** 0xa0 | (storage[0x15] & ~0xff0000000000000000000000000000000000000000);\n            return 0x01;\n        } else {\n            var var1 = 0x00;\n            var var2 = 0x15d1;\n            var var3 = 0x0de0b6b3a7640000;\n            var var4 = storage[0x15] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_2C07(var3, var4);\n        \n            if (var2 <= var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00;\n            var2 = 0x15fd;\n            var3 = 0x0de0b6b3a7640000;\n            var4 = storage[0x15] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_2D0B(var3, var4);\n        \n            if (var2 > var1) { goto label_1607; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function purchaseWolk(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x15] / 0x02 ** 0xa0 & 0xff;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_166C:\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x1690;\n            var var3 = msg.value;\n            var var4 = storage[0x15] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_2D0B(var3, var4);\n            var1 = var2;\n        \n            if (var1 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x16ab;\n            var3 = storage[0x02];\n            var4 = var1;\n            var2 = func_2CE3(var3, var4);\n            storage[0x02] = var2;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n            var2 = 0x16d1;\n            var4 = var1;\n            var2 = func_2CE3(var3, var4);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n            var2 = 0x16f7;\n            var3 = storage[0x05];\n            var4 = msg.value;\n            var2 = func_2CE3(var3, var4);\n            storage[0x05] = var2;\n            var temp0 = arg0;\n            var temp1 = var1;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = temp1;\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x7ff6ea1c893a974b2f363e8f8e474a1b52958080d1fffe0d085c286de30035d2, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp1;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [memory[0x00:0x20], address(this), stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return temp1;\n        } else if (storage[0x08] / 0x02 ** 0xa0 & 0xff) { goto label_166C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function finalizeOpenSale() {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = !(storage[0x08] / 0x02 ** 0xa8 & 0xff);\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_17C5:\n            storage[0x08] = (storage[0x08] & ~0xff000000000000000000000000000000000000000000) | 0x02 ** 0xa8;\n            storage[0x13] = block.number;\n            var1 = 0x1809;\n            var var2 = 0x1800;\n            var var3 = storage[0x02];\n            var var4 = 0x0f;\n            var2 = func_2CB4(var3, var4);\n            var1 = func_1800(var2);\n            var temp1 = var1;\n            storage[0x05] = temp1;\n            var1 = 0x1823;\n            var3 = temp1;\n            var2 = address(this).balance;\n            var1 = func_2C9D(var2, var3);\n            var temp2 = var1;\n            var0 = temp2;\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n        \n            if (temp4) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (storage[0x02] >= 0x295be96e64066972000000) { goto label_17C5; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1800(var arg0) returns (var r0) {\n        var var0 = 0x0186a0;\n        var var1 = 0x00;\n        var var2 = var1;\n    \n        if (var0 <= var2) { assert(); }\n    \n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        var2 = var4 / var3;\n        var3 = var0;\n        var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        if (arg0 == var0 * var2 + var4 % var3) { return var2; }\n        else { assert(); }\n    }\n    \n    function func_18B6(var arg0) returns (var r0) {\n        var var0 = 0x0f;\n        var var1 = 0x00;\n        var var2 = var1;\n    \n        if (var0 <= var2) { assert(); }\n    \n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        var2 = var4 / var3;\n        var3 = var0;\n        var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        if (arg0 == var0 * var2 + var4 % var3) { return var2; }\n        else { assert(); }\n    }\n    \n    function settleBuyer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (!!(storage[keccak256(memory[var3:var3 + 0x40])] & 0xff) != 0x01) { assert(); }\n    \n        if (!(storage[0x09] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var4 = storage[0x0a] > 0x00;\n    \n        if (var4) {\n            var4 = storage[0x0a] <= 0x03e8;\n        \n            if (!var4) { goto label_1A4B; }\n            else { goto label_1A20; }\n        } else if (!var4) {\n        label_1A4B:\n        \n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_1A56:\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            var4 = storage[keccak256(memory[0x00:0x40])] >= arg1;\n        \n            if (storage[keccak256(memory[0x00:0x40])] >= arg1) {\n                if (!var4) { revert(memory[0x00:0x00]); }\n            \n            label_1A8A:\n                var4 = 0x1aa0;\n                var var5 = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                var var6 = arg1;\n                var4 = func_2DE0(var5, var6);\n                var1 = var4;\n                var4 = 0x1ab9;\n                var5 = 0x1ab1;\n                var6 = arg1;\n                var var7 = storage[0x0a];\n                var5 = func_2CB4(var6, var7);\n                var4 = func_1AB1(var5);\n                var2 = var4;\n            \n                if (var1 < 0x01) {\n                    var temp14 = var2;\n                    var1 = temp14;\n                \n                    if (var1 <= var1) { goto label_1AD4; }\n                    else { goto label_1AD1; }\n                } else if (var1 <= var2) {\n                label_1AD4:\n                    var4 = 0x1ade;\n                    var5 = arg1;\n                    var6 = var1;\n                    var4 = func_2C9D(var5, var6);\n                \n                label_1ADE:\n                    memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var3 = var4;\n                    var4 = 0x1b04;\n                    var5 = storage[keccak256(memory[0x00:0x40])];\n                    var6 = arg1;\n                    var4 = func_2C9D(var5, var6);\n                    var temp0 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = arg0 & temp0;\n                    memory[0x20:0x40] = 0x00;\n                    storage[keccak256(memory[0x00:0x40])] = var4;\n                    memory[0x00:0x20] = temp0 & msg.sender;\n                    var5 = storage[keccak256(memory[0x00:0x40])];\n                    var4 = 0x1b34;\n                    var6 = var3;\n                    var4 = func_2CE3(var5, var6);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x00;\n                    storage[keccak256(memory[0x00:0x40])] = var4;\n                    var5 = storage[0x02];\n                    var4 = 0x1b5a;\n                    var6 = var1;\n                    var4 = func_2C9D(var5, var6);\n                    storage[0x02] = var4;\n                    var temp1 = 0x02 ** 0xa0 - 0x01;\n                    var temp2 = arg0;\n                    var temp3 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                    var temp4 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp3;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = var3;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], stack[-7] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n                    var temp7 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                    var temp8 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp7;\n                    var temp9 = var1;\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = temp9;\n                    var temp11 = memory[0x40:0x60];\n                    log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [memory[0x00:0x20], stack[-7] & 0x02 ** 0xa0 - 0x01, 0x00]);\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = temp9;\n                    var temp13 = memory[0x40:0x60];\n                    log(memory[temp13:temp13 + (temp12 + 0x20) - temp13], [0xa02fa7af120761e5cdeff8bc117c44fd425d0f51fd27155746f84421d87d18e6, stack[-7] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n                    return 0x01;\n                } else {\n                label_1AD1:\n                    var1 = var2;\n                    var4 = 0x1ade;\n                    var5 = arg1;\n                    var6 = var1;\n                    var4 = func_2C9D(var5, var6);\n                    goto label_1ADE;\n                }\n            } else if (arg1 > 0x00) { goto label_1A8A; }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n        label_1A20:\n            var temp15 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp15;\n            memory[0x20:0x40] = 0x0b;\n            var temp16 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp15 & msg.sender;\n            memory[0x20:0x40] = temp16;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_1A56; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_1AB1(var arg0) returns (var r0) {\n        var var0 = 0x2710;\n        var var1 = 0x00;\n        var var2 = var1;\n    \n        if (var0 <= var2) { assert(); }\n    \n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        var2 = var4 / var3;\n        var3 = var0;\n        var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        if (arg0 == var0 * var2 + var4 % var3) { return var2; }\n        else { assert(); }\n    }\n    \n    function refund() {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0e;\n        var var1 = var0;\n        var var2 = storage[keccak256(memory[var1:var1 + 0x40])] > var1;\n    \n        if (var2) {\n            var2 = !(storage[0x08] / 0x02 ** 0xa0 & 0xff);\n        \n            if (!var2) { goto label_1C5D; }\n            else { goto label_1C4B; }\n        } else if (!var2) {\n        label_1C5D:\n        \n            if (!var2) {\n            label_1C6A:\n            \n                if (!var2) { revert(memory[0x00:0x00]); }\n            \n            label_1C75:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x00;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                var temp1 = storage[temp0];\n                memory[0x20:0x40] = 0x0e;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                var temp3 = storage[temp2];\n                storage[temp0] = 0x00;\n                storage[temp2] = 0x00;\n                var0 = temp1;\n                var1 = temp3;\n                var var3 = storage[0x02];\n                var2 = 0x1cb4;\n                var var4 = var0;\n                var2 = func_2C9D(var3, var4);\n                storage[0x02] = var2;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var0;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xf505eb6e610340eed3eea0048f8ec258cda0927f73be2d293288fde9a546f1ab, msg.sender]);\n                var temp6 = var1;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = temp6;\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xb6c0eca8138e097d71e2dd31e19a1266487f0553f170b7260ffe68bcbe9ff8a7, msg.sender]);\n                var temp9 = memory[0x40:0x60];\n                var temp10;\n                temp10, memory[temp9:temp9 + 0x00] = address(msg.sender).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp9:temp9 + memory[0x40:0x60] - temp9]);\n            \n                if (temp10) { return; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n            label_1C64:\n            \n                if (block.number > storage[0x13]) { goto label_1C75; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_1C4B:\n            var2 = storage[0x02] < 0x295be96e64066972000000;\n        \n            if (!var2) { goto label_1C6A; }\n            else { goto label_1C64; }\n        }\n    }\n    \n    function end_block() returns (var r0) { return storage[0x13]; }\n    \n    function settleSeller(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n    \n        if (!!(storage[keccak256(memory[var4:var4 + 0x40])] & 0xff) != 0x01) { assert(); }\n    \n        if (!(storage[0x09] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0c;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var var5 = var1 > 0x00;\n    \n        if (var5) {\n            var5 = var1 <= 0x0fa0;\n        \n            if (!var5) { goto label_1DEB; }\n            else { goto label_1DE6; }\n        } else if (!var5) {\n        label_1DEB:\n        \n            if (!var5) { revert(memory[0x00:0x00]); }\n        \n        label_1DF6:\n            var5 = 0x1e00;\n            var var6 = msg.sender;\n            var var7 = arg1;\n            var5 = func_2E77(var6, var7);\n            var2 = var5;\n            var5 = 0x1e17;\n            var6 = 0x1ab1;\n            var7 = arg1;\n            var var8 = var1;\n            var6 = func_2CB4(var7, var8);\n            var5 = func_1AB1(var6);\n            var3 = var5;\n        \n            if (var2 < 0x01) {\n                var temp5 = var3;\n                var2 = temp5;\n            \n                if (var2 <= var2) { goto label_1E32; }\n                else { goto label_1E2F; }\n            } else if (var2 <= var3) {\n            label_1E32:\n                var5 = 0x1e3c;\n                var6 = arg1;\n                var7 = var2;\n                var5 = func_2C9D(var6, var7);\n            \n            label_1E3C:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x00;\n                var4 = var5;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < var4) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var5 = 0x1e88;\n                var7 = var4;\n                var5 = func_2CE3(var6, var7);\n                var temp0 = arg0;\n                memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                var temp1 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp1;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = var4;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [memory[0x00:0x20], msg.sender, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return 0x01;\n            } else {\n            label_1E2F:\n                var2 = var3;\n                var5 = 0x1e3c;\n                var6 = arg1;\n                var7 = var2;\n                var5 = func_2C9D(var6, var7);\n                goto label_1E3C;\n            }\n        } else {\n        label_1DE6:\n        \n            if (arg1 > 0x00) { goto label_1DF6; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function tokenGenerationMin() returns (var r0) { return 0x295be96e64066972000000; }\n    \n    function deauthorizeProvider(var arg0) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x0b;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3 & temp0;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x79485d41c145ee4d7ebf84793ab927ebb3f929101dba7db48702ef527d02cf83, msg.sender]);\n        return 0x01;\n    }\n    \n    function checkAuthorization(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x0b;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function checkServiceFee(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function maxPerExchangeBP() returns (var r0) { return storage[0x14]; }\n    \n    function grantService(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp1;\n        memory[0x20:0x40] = 0x0b;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp1 & msg.sender;\n        memory[0x20:0x40] = temp2;\n        var1 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n        var var2 = var1;\n    \n        if (var2) {\n            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x07;\n        \n            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { goto label_20DF; }\n            else { goto label_2062; }\n        } else if (!var2) {\n        label_20DF:\n            var0 = 0x00;\n        \n        label_11EB:\n            return var0;\n        } else {\n        label_2062:\n            var temp3 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp3;\n            memory[0x20:0x40] = 0x0b;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            var temp5 = arg1;\n            memory[0x00:0x20] = temp3 & temp5;\n            memory[0x20:0x40] = temp4;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            storage[temp6] = (storage[temp6] & ~0xff) | 0x01;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = temp5 & 0x02 ** 0xa0 - 0x01;\n            var temp8 = memory[0x40:0x60];\n            log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0x8563cf3307d6904af4525af51010bc07d34ec3154f552d9e00f64ed395dc0470, msg.sender]);\n            var0 = 0x01;\n            goto label_11EB;\n        }\n    }\n    \n    function acceptOwnership() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x04] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[temp2:temp2 + 0x20] = temp3 & temp1 & storage[0x03];\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = temp3 & storage[0x04] & temp1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp2 + 0x40) - temp4], [0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a]);\n        var temp5 = storage[0x04];\n        var temp6 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[0x03] = (temp5 & 0x02 ** 0xa0 - 0x01) | (temp6 & storage[0x03]);\n        storage[0x04] = temp6 & temp5;\n    }\n    \n    function totalTokens() returns (var r0) { return storage[0x02]; }\n    \n    function burnFormula() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function participantBalance(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0f;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function percentageETHReserve() returns (var r0) { return 0x0f; }\n    \n    function owner() returns (var r0) { return storage[0x03] & 0x02 ** 0xa0 - 0x01; }\n    \n    function removeService(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x0b;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg1;\n        memory[0x00:0x20] = temp4 & temp1;\n        memory[0x20:0x40] = temp3;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = storage[temp5] & ~0xff;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp4 & 0x02 ** 0xa0 - 0x01;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0x79485d41c145ee4d7ebf84793ab927ebb3f929101dba7db48702ef527d02cf83, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function multisigWallet() returns (var r0) { return storage[0x06] & 0x02 ** 0xa0 - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x04;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x574f4c4b00000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function estLiquidationCap() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(storage[0x08] / 0x02 ** 0xa8 & 0xff)) { return 0x00; }\n    \n        var var2 = 0x22ea;\n        var var3 = 0x1ab1;\n        var var4 = storage[0x02];\n        var var5 = storage[0x14];\n        var3 = func_2CB4(var4, var5);\n        var2 = func_1AB1(var3);\n        var1 = var2;\n    \n        if (var1 >= 0x056bc75e2d63100000) {\n            var0 = var1;\n        \n        label_2316:\n            return var0;\n        } else {\n            var1 = 0x056bc75e2d63100000;\n            var0 = var1;\n            goto label_2316;\n        }\n    }\n    \n    function burnBasisPoints() returns (var r0) { return storage[0x0a]; }\n    \n    function reserveBalance() returns (var r0) { return storage[0x05]; }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = var0;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])] >= arg1;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] >= arg1) {\n            if (!var1) {\n            label_240C:\n                var0 = 0x00;\n            \n            label_1294:\n                return var0;\n            } else {\n            label_2356:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x00;\n                var var2 = storage[keccak256(memory[0x00:0x40])];\n                var1 = 0x2378;\n                var var3 = arg1;\n                var1 = func_2C9D(var2, var3);\n                var temp0 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp0 & msg.sender;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                memory[0x00:0x20] = arg0 & temp0;\n                var1 = 0x23a7;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var3 = arg1;\n                var1 = func_2CE3(var2, var3);\n                var temp1 = arg0;\n                memory[0x00:0x20] = temp1 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                var temp3 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp2;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = arg1;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n                var0 = 0x01;\n                goto label_1294;\n            }\n        } else if (arg1 <= 0x00) { goto label_240C; }\n        else { goto label_2356; }\n    }\n    \n    function setMaxPerExchange(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = arg0 >= 0x0a;\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_2453:\n            storage[0x14] = arg0;\n            return 0x01;\n        } else if (arg0 <= 0x64) { goto label_2453; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function wolkGenesis(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = storage[0x02] < 0x01;\n    \n        if (var1) {\n            var1 = block.number <= arg1;\n        \n            if (!var1) { goto label_249A; }\n            else { goto label_2496; }\n        } else if (!var1) {\n        label_249A:\n        \n            if (!var1) {\n            label_24A5:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n            label_24B0:\n                storage[0x11] = arg0;\n                storage[0x12] = arg1;\n                storage[0x13] = arg2;\n                var temp1 = 0x02 ** 0xa0 - 0x01;\n                var temp2 = ~0xffffffffffffffffffffffffffffffffffffffff;\n                storage[0x06] = (temp2 & storage[0x06]) | (arg3 & temp1);\n                storage[0x08] = (temp2 & storage[0x08]) | (temp1 & arg4);\n                memory[0x00:0x20] = msg.sender & temp1;\n                memory[0x20:0x40] = 0x07;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n                return 0x01;\n            } else {\n            label_24A1:\n            \n                if (arg1 > arg0) { goto label_24B0; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_2496:\n            var1 = arg2 > arg1;\n        \n            if (!var1) { goto label_24A5; }\n            else { goto label_24A1; }\n        }\n    }\n    \n    function settlementIsRunning() returns (var r0) { return storage[0x09] / 0x02 ** 0xa0 & 0xff; }\n    \n    function tokenGenerationMax() returns (var r0) { return 0x7c13bc4b2c133c56000000; }\n    \n    function start_block() returns (var r0) { return storage[0x12]; }\n    \n    function openSaleCompleted() returns (var r0) { return storage[0x08] / 0x02 ** 0xa8 & 0xff; }\n    \n    function updateSettlementStatus(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        storage[0x09] = !!arg0 * 0x02 ** 0xa0 | (storage[0x09] & ~0xff0000000000000000000000000000000000000000);\n        return 0x01;\n    }\n    \n    function presale_start_block() returns (var r0) { return storage[0x11]; }\n    \n    function newOwner() returns (var r0) { return storage[0x04] & 0x02 ** 0xa0 - 0x01; }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function allSaleCompleted() returns (var r0) { return storage[0x08] / 0x02 ** 0xa0 & 0xff; }\n    \n    function removeParticipant(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var1 = 0x00;\n    \n        if (var1 >= memory[arg0:arg0 + 0x20]) {\n        label_26A5:\n            return 0x01;\n        } else {\n        label_2623:\n            var var2 = 0x00;\n            var var3 = 0x10;\n            var var4 = 0x00;\n            var var5 = arg0;\n            var var6 = var1;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var temp1 = var4;\n            memory[temp1:temp1 + 0x20] = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = var3;\n            var temp2 = keccak256(memory[0x00:0x00 + temp1 + 0x40]);\n            var temp3 = !!var2 | (storage[temp2] & ~0xff);\n            var2 = 0x00;\n            storage[temp2] = temp3;\n            var3 = 0x0f;\n            var4 = var2;\n            var5 = arg0;\n            var6 = var1;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var temp4 = var4;\n            memory[temp4:temp4 + 0x20] = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var3;\n            storage[keccak256(memory[0x00:0x00 + temp4 + 0x40])] = var2;\n            var1 = var1 + 0x01;\n        \n            if (var1 >= memory[arg0:arg0 + 0x20]) { goto label_26A5; }\n            else { goto label_2623; }\n        }\n    }\n    \n    function setServiceFee(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = arg1 <= 0x00;\n    \n        if (var1) {\n            if (!var1) {\n            label_2715:\n                var temp1 = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp1;\n                memory[0x20:0x40] = 0x0c;\n                var temp2 = arg1;\n                storage[keccak256(memory[0x00:0x40])] = temp2;\n                memory[0x20:0x40] = 0x07;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = temp2;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xe273f117e317b5f79c25ba280145c5a051fac58dc8482e8b2a14d04023521dcc, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                var0 = 0x01;\n            \n            label_1294:\n                return var0;\n            } else {\n            label_26E3:\n                var0 = 0x00;\n                memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x07;\n                var temp6 = keccak256(memory[var0:var0 + 0x40]);\n                storage[temp6] = storage[temp6] & ~0xff;\n                memory[0x20:0x40] = 0x0c;\n                storage[keccak256(memory[var0:var0 + 0x40])] = var0;\n                goto label_1294;\n            }\n        } else if (arg1 <= 0x0fa0) { goto label_2715; }\n        else { goto label_26E3; }\n    }\n    \n    function wolkSale() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp1 == temp1 & arg0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x04] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x04] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function setBurnFormula(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var2 = 0x2828;\n        var var3 = arg0;\n        var var4 = 0x0de0b6b3a7640000;\n        var2 = func_2DE0(var3, var4);\n        var1 = var2;\n    \n        if (var1 <= 0x2d79883d2000) { revert(memory[0x00:0x00]); }\n    \n        storage[0x09] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x09] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function setFeeFormula(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (!!(storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) != 0x01) { assert(); }\n    \n        var var2 = 0x28ab;\n        var var3 = arg0;\n        var var4 = 0x0de0b6b3a7640000;\n        var2 = func_2E77(var3, var4);\n        var1 = var2;\n    \n        if (var1 <= 0x2d79883d2000) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x0d;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = (arg0 & temp0) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function tokenGenerationEvent(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x10;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = storage[keccak256(memory[var2:var2 + 0x40])] & 0xff;\n    \n        if (var3) {\n            var3 = !(storage[0x08] / 0x02 ** 0xa8 & 0xff);\n        \n            if (!var3) { goto label_2953; }\n            else { goto label_2944; }\n        } else if (!var3) {\n        label_2953:\n        \n            if (!var3) {\n            label_2961:\n            \n                if (!var3) {\n                label_296D:\n                \n                    if (!var3) { revert(memory[0x00:0x00]); }\n                \n                label_2978:\n                    var0 = 0x03e8;\n                \n                    if (storage[0x02] < 0x295be96e64066972000000) {\n                        var0 = 0x0499;\n                        goto label_2A43;\n                    } else if (storage[0x02] < 0x31a17e847807b1bc000000) {\n                        var0 = 0x0477;\n                        goto label_2A43;\n                    } else if (storage[0x02] < 0x39e7139a8c08fa06000000) {\n                        var0 = 0x0457;\n                        goto label_2A43;\n                    } else if (storage[0x02] < 0x422ca8b0a00a4250000000) {\n                        var0 = 0x0439;\n                        goto label_2A43;\n                    } else if (storage[0x02] < 0x4a723dc6b40b8a9a000000) {\n                        var0 = 0x041d;\n                        goto label_2A43;\n                    } else if (storage[0x02] >= 0x52b7d2dcc80cd2e4000000) {\n                        var0 = 0x03e8;\n                    \n                    label_2A43:\n                        var3 = block.number < storage[0x12];\n                    \n                        if (!var3) {\n                            if (!var3) {\n                            label_2AC7:\n                            \n                                if (block.number < storage[0x12]) { revert(memory[0x00:0x00]); }\n                            \n                            label_2AD6:\n                                var3 = 0x2ae1;\n                                var var4 = msg.value;\n                                var var5 = var0;\n                                var3 = func_2CB4(var4, var5);\n                                var temp0 = var3;\n                                var1 = temp0;\n                                var3 = 0x2aef;\n                                var4 = storage[0x02];\n                                var5 = var1;\n                                var3 = func_2CE3(var4, var5);\n                                var2 = var3;\n                            \n                                if (var2 > 0x7c13bc4b2c133c56000000) { revert(memory[0x00:0x00]); }\n                            \n                                storage[0x02] = var2;\n                                var temp1 = 0x02 ** 0xa0 - 0x01;\n                                var temp2 = arg0;\n                                var temp3 = memory[0x00:0x20];\n                                memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                                var temp4 = memory[0x00:0x20];\n                                memory[0x00:0x20] = temp3;\n                                var temp5 = memory[0x40:0x60];\n                                memory[temp5:temp5 + 0x20] = var1;\n                                var temp6 = memory[0x40:0x60];\n                                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], address(this), stack[-4] & 0x02 ** 0xa0 - 0x01]);\n                                memory[0x00:0x20] = temp2 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x00;\n                                var4 = storage[keccak256(memory[0x00:0x40])];\n                                var3 = 0x2b60;\n                                var5 = var1;\n                                var3 = func_2CE3(var4, var5);\n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x00;\n                                storage[keccak256(memory[0x00:0x40])] = var3;\n                                memory[0x20:0x40] = 0x0e;\n                                var4 = storage[keccak256(memory[0x00:0x40])];\n                                var3 = 0x2b8d;\n                                var5 = msg.value;\n                                var3 = func_2CE3(var4, var5);\n                                var temp7 = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x00:0x20] = temp7;\n                                memory[0x20:0x40] = 0x0e;\n                                storage[keccak256(memory[0x00:0x40])] = var3;\n                                var temp8 = memory[0x40:0x60];\n                                memory[temp8:temp8 + 0x20] = var1;\n                                var temp9 = memory[0x40:0x60];\n                                log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x7ff6ea1c893a974b2f363e8f8e474a1b52958080d1fffe0d085c286de30035d2, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n                                return;\n                            } else {\n                            label_2A61:\n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x0f;\n                            \n                                if (storage[keccak256(memory[0x00:0x40])] < msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x0f;\n                                var3 = 0x2aa9;\n                                var4 = storage[keccak256(memory[0x00:0x40])];\n                                var5 = msg.value;\n                                var3 = func_2C9D(var4, var5);\n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x0f;\n                                storage[keccak256(memory[0x00:0x40])] = var3;\n                                goto label_2AD6;\n                            }\n                        } else if (block.number < storage[0x11]) { goto label_2AC7; }\n                        else { goto label_2A61; }\n                    } else {\n                        var0 = 0x0402;\n                        goto label_2A43;\n                    }\n                } else {\n                label_2968:\n                \n                    if (msg.value > 0x00) { goto label_2978; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_295A:\n                var3 = block.number <= storage[0x13];\n            \n                if (!var3) { goto label_296D; }\n                else { goto label_2968; }\n            }\n        } else {\n        label_2944:\n            var3 = !(storage[0x08] / 0x02 ** 0xa0 & 0xff);\n        \n            if (!var3) { goto label_2961; }\n            else { goto label_295A; }\n        }\n    }\n    \n    function checkFeeSchedule(var arg0) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x0d;\n        return storage[keccak256(memory[0x00:0x40])] & temp0;\n    }\n    \n    function func_2C07(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1 & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0xf7a4c45c;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = storage[0x02];\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = storage[0x05];\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0xff & 0x0f;\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = arg0;\n        var var4 = temp0 + 0x84;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (temp1) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2C9D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_2CB4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_2CD0:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_2CD0;\n        }\n    }\n    \n    function func_2CE3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n        var var2 = var1 >= temp0;\n    \n        if (var1 >= temp0) {\n            if (!var2) { assert(); }\n        \n        label_2CD8:\n            return var1;\n        } else if (var1 >= arg1) { goto label_2CD8; }\n        else { assert(); }\n    }\n    \n    function func_2D0B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1 & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x949dfa63;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = storage[0x02];\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = storage[0x05];\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0xff & 0x0f;\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = arg0;\n        var var4 = temp0 + 0x84;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (temp1) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2DE0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) {\n            var0 = 0x00;\n        \n        label_11EB:\n            return var0;\n        } else {\n            var var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var3 = 0x926f949e;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = arg1;\n            var var4 = temp0 + 0x24;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = 0x00;\n            var var10 = var2;\n        \n            if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n        \n            if (!temp1) { revert(memory[0x00:0x00]); }\n        \n            var1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            var0 = var1;\n            goto label_11EB;\n        }\n    }\n    \n    function func_2E77(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x0d;\n        var var0 = 0x00;\n        var var1 = temp0 & storage[keccak256(memory[var0:var0 + 0x40])];\n        var var2 = var0;\n    \n        if (!var1) { return 0x00; }\n    \n        var var3 = var1 & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x3e81d56e;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = arg1;\n        var var5 = temp1 + 0x24;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (temp2) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_02A2:\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (!(storage[0x08] / 0x02 ** 0xa8 & 0xff)) {\n                var0 = address(this);\n                var1 = 0xfa6b129d;\n                var2 = msg.value;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n                memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = msg.sender;\n                var3 = temp2 + 0x24;\n                var4 = 0x00;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = var2;\n                var9 = var0;\n            \n                if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp3;\n                temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x25ee).value(var8)(memory[var7:var7 + var6]);\n            \n                if (temp3) { stop(); }\n                else { revert(memory[0x00:0x00]); }\n            } else if (block.number < storage[0x13]) { revert(memory[0x00:0x00]); }\n            else {\n                var var0 = address(this);\n                var var1 = 0x3d8c9b8c;\n                var var2 = msg.value;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n                var var3 = temp0 + 0x24;\n                var var4 = 0x20;\n                var var5 = memory[0x40:0x60];\n                var var6 = var3 - var5;\n                var var7 = var5;\n                var var8 = var2;\n                var var9 = var0;\n            \n                if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp1;\n                temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x25ee).value(var8)(memory[var7:var7 + var6]);\n            \n                if (temp1) { stop(); }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x310e16) {\n                // Dispatch table entry for sellWolk(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24];\n                var1 = sellWolk(var2);\n            \n            label_03CC:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var1;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f1;\n                var2 = name();\n            \n            label_03F1:\n                var temp6 = memory[0x40:0x60];\n                var3 = temp6;\n                memory[var3:var3 + 0x20] = 0x20;\n                var4 = var3;\n                var temp7 = var4 + 0x20;\n                var temp8 = var2;\n                memory[temp7:temp7 + 0x20] = memory[temp8:temp8 + 0x20];\n                var5 = temp7 + 0x20;\n                var6 = temp8 + 0x20;\n                var7 = memory[temp8:temp8 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_042E:\n                    var temp9 = var7;\n                    var5 = temp9 + var5;\n                    var6 = temp9 & 0x1f;\n                \n                    if (!var6) {\n                        var temp10 = memory[0x40:0x60];\n                        return memory[temp10:temp10 + var5 - temp10];\n                    } else {\n                        var temp11 = var6;\n                        var temp12 = var5 - temp11;\n                        memory[temp12:temp12 + 0x20] = ~(0x0100 ** (0x20 - temp11) - 0x01) & memory[temp12:temp12 + 0x20];\n                        var temp13 = memory[0x40:0x60];\n                        return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n                    }\n                } else {\n                label_041E:\n                    var temp14 = var11;\n                    memory[var9 + temp14:var9 + temp14 + 0x20] = memory[var10 + temp14:var10 + temp14 + 0x20];\n                    var11 = temp14 + 0x20;\n                \n                    if (var11 >= var8) { goto label_042E; }\n                    else { goto label_041E; }\n                }\n            } else if (var0 == 0x079ee6b3) {\n                // Dispatch table entry for addParticipant(address[],uint256[])\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp15 = msg.data[0x04:0x24];\n                var temp16 = msg.data[temp15 + 0x04:temp15 + 0x04 + 0x20];\n                var temp17 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp17 + temp16 * 0x20 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp16;\n                var temp18 = temp16 * 0x20;\n                memory[temp17 + 0x20:temp17 + 0x20 + temp18] = msg.data[temp15 + 0x24:temp15 + 0x24 + temp18];\n                var2 = temp17;\n                var temp19 = msg.data[0x24:0x44] + 0x04;\n                var temp20 = msg.data[temp19:temp19 + 0x20];\n                var temp21 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp21 + temp20 * 0x20 + 0x20;\n                memory[temp21:temp21 + 0x20] = temp20;\n                var temp22 = temp20 * 0x20;\n                memory[temp21 + 0x20:temp21 + 0x20 + temp22] = msg.data[temp19 + 0x20:temp19 + 0x20 + temp22];\n                var3 = temp21;\n                var1 = addParticipant(var2, var3);\n            \n            label_04F8:\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = !!var1;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x112ea262) {\n                // Dispatch table entry for authorizeProvider(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = authorizeProvider(var2);\n                goto label_04F8;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var1 = totalSupply();\n                goto label_03CC;\n            } else if (var0 == 0x189d165e) {\n                // Dispatch table entry for setBurnRate(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24];\n                var1 = setBurnRate(var2);\n                goto label_04F8;\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp25 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp25 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp25;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_04F8;\n            } else if (var0 == 0x2659d8ef) {\n                // Dispatch table entry for setExchangeFormula(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = setExchangeFormula(var2);\n                goto label_04F8;\n            } else if (var0 == 0x2f7a407b) {\n                // Dispatch table entry for exchangeFormula()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = exchangeFormula();\n            \n            label_0646:\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = decimals();\n                goto label_03CC;\n            } else if (var0 == 0x32c6f315) {\n                // Dispatch table entry for exchangeIsRunning()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = exchangeIsRunning();\n                goto label_04F8;\n            } else if (var0 == 0x3bee0613) {\n                // Dispatch table entry for updateExchangeStatus(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = updateExchangeStatus(var2);\n                goto label_04F8;\n            } else if (var0 == 0x3d8c9b8c) {\n                // Dispatch table entry for purchaseWolk(address)\n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = purchaseWolk(var2);\n                goto label_03CC;\n            } else if (var0 == 0x421521b1) {\n                // Dispatch table entry for finalizeOpenSale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b2;\n                finalizeOpenSale();\n                stop();\n            } else if (var0 == 0x4bb278f3) {\n                // Dispatch table entry for finalize()\n                var1 = 0x03b2;\n                var2 = 0x00;\n                var3 = var2;\n                var temp28 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x08] & temp28 != temp28 & msg.sender) { assert(); }\n            \n                var4 = storage[0x08] / 0x02 ** 0xa8 & 0xff;\n            \n                if (!var4) {\n                    if (!var4) { revert(memory[0x00:0x00]); }\n                \n                label_18A6:\n                    var4 = 0x18bd;\n                    var5 = 0x18b6;\n                    var6 = msg.value;\n                    var7 = 0x0186a0;\n                    var5 = func_2CB4(var6, var7);\n                    var4 = func_18B6(var5);\n                    var temp29 = var4;\n                    var2 = temp29;\n                    var4 = 0x18cb;\n                    var5 = storage[0x02];\n                    var6 = var2;\n                    var4 = func_2CE3(var5, var6);\n                    var3 = var4;\n                    storage[0x02] = var3;\n                    var4 = 0x18e0;\n                    var5 = storage[0x05];\n                    var6 = msg.value;\n                    var4 = func_2CE3(var5, var6);\n                    storage[0x05] = var4;\n                    var temp30 = 0x02 ** 0xa0 - 0x01;\n                    var temp31 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                    var temp32 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp31;\n                    var temp33 = memory[0x40:0x60];\n                    memory[temp33:temp33 + 0x20] = var2;\n                    var temp34 = memory[0x40:0x60];\n                    log(memory[temp34:temp34 + (temp33 + 0x20) - temp34], [memory[0x00:0x20], address(this), storage[0x08] & 0x02 ** 0xa0 - 0x01]);\n                    memory[0x00:0x20] = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = 0x193a;\n                    var5 = storage[keccak256(memory[0x00:0x40])];\n                    var6 = var2;\n                    var4 = func_2CE3(var5, var6);\n                    var temp35 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp35 & storage[0x08];\n                    memory[0x20:0x40] = 0x00;\n                    storage[keccak256(memory[0x00:0x40])] = var4;\n                    var temp36 = memory[0x40:0x60];\n                    memory[temp36:temp36 + 0x20] = var2;\n                    var temp37 = memory[0x40:0x60];\n                    log(memory[temp37:temp37 + (temp36 + 0x20) - temp37], [0x7ff6ea1c893a974b2f363e8f8e474a1b52958080d1fffe0d085c286de30035d2, storage[0x08] & 0x02 ** 0xa0 - 0x01]);\n                    storage[0x08] = (storage[0x08] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n                    // Error: Could not resolve jump destination!\n                } else if (!(storage[0x08] / 0x02 ** 0xa0 & 0xff)) { goto label_18A6; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x54b8dfcb) {\n                // Dispatch table entry for settleBuyer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = settleBuyer(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b2;\n                refund();\n                stop();\n            } else if (var0 == 0x5e0b1259) {\n                // Dispatch table entry for end_block()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = end_block();\n                goto label_03CC;\n            } else if (var0 == 0x64da8ad3) {\n                // Dispatch table entry for settleSeller(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = settleSeller(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x6712e0be) {\n                // Dispatch table entry for tokenGenerationMin()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = tokenGenerationMin();\n                goto label_03CC;\n            } else if (var0 == 0x673b57e9) {\n                // Dispatch table entry for deauthorizeProvider(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = deauthorizeProvider(var2);\n                goto label_04F8;\n            } else if (var0 == 0x685c234a) {\n                // Dispatch table entry for checkAuthorization(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp38 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp38 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp38;\n                var1 = checkAuthorization(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x6c9c1d41) {\n                // Dispatch table entry for checkServiceFee(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = checkServiceFee(var2);\n                goto label_03CC;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_03CC;\n            } else if (var0 == 0x714d497a) {\n                // Dispatch table entry for maxPerExchangeBP()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = maxPerExchangeBP();\n                goto label_03CC;\n            } else if (var0 == 0x726df9cc) {\n                // Dispatch table entry for grantService(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp39 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp39 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp39;\n                var1 = grantService(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x79ba5097) {\n                // Dispatch table entry for acceptOwnership()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b2;\n                acceptOwnership();\n                stop();\n            } else if (var0 == 0x7e1c0c09) {\n                // Dispatch table entry for totalTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = totalTokens();\n                goto label_03CC;\n            } else if (var0 == 0x823ba0b8) {\n                // Dispatch table entry for burnFormula()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = burnFormula();\n                goto label_0646;\n            } else if (var0 == 0x826c69b8) {\n                // Dispatch table entry for participantBalance(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = participantBalance(var2);\n                goto label_03CC;\n            } else if (var0 == 0x847dc0a7) {\n                // Dispatch table entry for percentageETHReserve()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09c3;\n                var2 = percentageETHReserve();\n                var temp40 = memory[0x40:0x60];\n                memory[temp40:temp40 + 0x20] = var2 & 0xff;\n                var temp41 = memory[0x40:0x60];\n                return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = owner();\n                goto label_0646;\n            } else if (var0 == 0x8ea8e149) {\n                // Dispatch table entry for removeService(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp42 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp42 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp42;\n                var1 = removeService(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x9075becf) {\n                // Dispatch table entry for multisigWallet()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = multisigWallet();\n                goto label_0646;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f1;\n                var2 = symbol();\n                goto label_03F1;\n            } else if (var0 == 0x99dd1ed9) {\n                // Dispatch table entry for estLiquidationCap()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var1 = estLiquidationCap();\n                goto label_03CC;\n            } else if (var0 == 0x9a436c9b) {\n                // Dispatch table entry for burnBasisPoints()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = burnBasisPoints();\n                goto label_03CC;\n            } else if (var0 == 0xa10954fe) {\n                // Dispatch table entry for reserveBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = reserveBalance();\n                goto label_03CC;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0xacac0b9f) {\n                // Dispatch table entry for setMaxPerExchange(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24];\n                var1 = setMaxPerExchange(var2);\n                goto label_04F8;\n            } else if (var0 == 0xad7e01c8) {\n                // Dispatch table entry for wolkGenesis(uint256,uint256,uint256,address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64];\n                var temp43 = 0x02 ** 0xa0 - 0x01;\n                var5 = temp43 & msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4] & temp43;\n                var1 = wolkGenesis(var2, var3, var4, var5, var6);\n                goto label_04F8;\n            } else if (var0 == 0xb1a9bd77) {\n                // Dispatch table entry for settlementIsRunning()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = settlementIsRunning();\n                goto label_04F8;\n            } else if (var0 == 0xb57e6ea1) {\n                // Dispatch table entry for tokenGenerationMax()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = tokenGenerationMax();\n                goto label_03CC;\n            } else if (var0 == 0xb87fb3db) {\n                // Dispatch table entry for start_block()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = start_block();\n                goto label_03CC;\n            } else if (var0 == 0xbcbfe43c) {\n                // Dispatch table entry for openSaleCompleted()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = openSaleCompleted();\n                goto label_04F8;\n            } else if (var0 == 0xc5b15057) {\n                // Dispatch table entry for updateSettlementStatus(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = updateSettlementStatus(var2);\n                goto label_04F8;\n            } else if (var0 == 0xcba9c0e0) {\n                // Dispatch table entry for presale_start_block()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = presale_start_block();\n                goto label_03CC;\n            } else if (var0 == 0xd4ee1d90) {\n                // Dispatch table entry for newOwner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = newOwner();\n                goto label_0646;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var temp44 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp44 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp44;\n                var1 = allowance(var2, var3);\n                goto label_03CC;\n            } else if (var0 == 0xde179108) {\n                // Dispatch table entry for allSaleCompleted()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = allSaleCompleted();\n                goto label_04F8;\n            } else if (var0 == 0xe814c941) {\n                // Dispatch table entry for removeParticipant(address[])\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp45 = msg.data[0x04:0x24];\n                var temp46 = msg.data[temp45 + 0x04:temp45 + 0x04 + 0x20];\n                var temp47 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp47 + temp46 * 0x20 + 0x20;\n                memory[temp47:temp47 + 0x20] = temp46;\n                var temp48 = temp46 * 0x20;\n                memory[temp47 + 0x20:temp47 + 0x20 + temp48] = msg.data[temp45 + 0x24:temp45 + 0x24 + temp48];\n                var2 = temp47;\n                var1 = removeParticipant(var2);\n                goto label_04F8;\n            } else if (var0 == 0xef2fa169) {\n                // Dispatch table entry for setServiceFee(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = setServiceFee(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0xf2e1192a) {\n                // Dispatch table entry for wolkSale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = wolkSale();\n                goto label_0646;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf7dadf7d) {\n                // Dispatch table entry for setBurnFormula(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = setBurnFormula(var2);\n                goto label_04F8;\n            } else if (var0 == 0xf7fca4f4) {\n                // Dispatch table entry for setFeeFormula(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = setFeeFormula(var2);\n                goto label_04F8;\n            } else if (var0 == 0xfa6b129d) {\n                // Dispatch table entry for tokenGenerationEvent(address)\n                var1 = 0x03b2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                tokenGenerationEvent(var2);\n                stop();\n            } else if (var0 == 0xff0935b1) {\n                // Dispatch table entry for checkFeeSchedule(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = checkFeeSchedule(var2);\n                goto label_0646;\n            } else { goto label_02A2; }\n        }\n    }\n    \n    function sellWolk(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = storage[0x15] / 0x0100 ** 0x14 & 0xff;\n    \n        if (!var3) {\n            if (!var3) { revert(memory[0x00:0x00]); }\n        \n        label_0F57:\n            var3 = 0x0f5f;\n            var3 = estLiquidationCap();\n        \n        label_0F5F:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var1 = var3;\n        \n            if (storage[keccak256(memory[0x00:0x40])] < arg0) { revert(memory[0x00:0x00]); }\n        \n            if (var1 < arg0) { revert(memory[0x00:0x00]); }\n        \n            var3 = 0x0fac;\n            var var4 = arg0;\n            var var5 = storage[0x15] & 0x02 ** 0xa0 - 0x01;\n            var3 = func_2C07(var4, var5);\n            var2 = var3;\n        \n            if (address(this).balance <= var2) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var3 = 0x0fe8;\n            var5 = arg0;\n            var3 = func_2C9D(var4, var5);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x100e;\n            var4 = storage[0x02];\n            var5 = arg0;\n            var3 = func_2C9D(var4, var5);\n            storage[0x02] = var3;\n            var3 = 0x1025;\n            var4 = address(this).balance;\n            var5 = var2;\n            var3 = func_2C9D(var4, var5);\n            storage[0x05] = var3;\n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xf505eb6e610340eed3eea0048f8ec258cda0927f73be2d293288fde9a546f1ab, msg.sender]);\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp0;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], msg.sender, 0x00]);\n            var temp7 = var2;\n            var temp8 = memory[0x40:0x60];\n            var temp9;\n            temp9, memory[temp8:temp8 + 0x00] = address(msg.sender).call.gas(!temp7 * 0x08fc).value(temp7)(memory[temp8:temp8 + memory[0x40:0x60] - temp8]);\n        \n            if (temp9) { return var2; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (storage[0x08] / 0x02 ** 0xa0 & 0xff) { goto label_0F57; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x13;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x576f6c6b2050726f746f636f6c20546f6b656e00000000000000000000000000;\n        return r0;\n    }\n    \n    function addParticipant(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        if (memory[arg0:arg0 + 0x20] != memory[arg1:arg1 + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x00;\n    \n        if (var1 >= memory[arg0:arg0 + 0x20]) {\n        label_11E6:\n            return 0x01;\n        } else {\n        label_113F:\n            var var2 = 0x01;\n            var var3 = 0x10;\n            var var4 = 0x00;\n            var var5 = arg0;\n            var var6 = var1;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var temp1 = var4;\n            memory[temp1:temp1 + 0x20] = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = var3;\n            var temp2 = keccak256(memory[0x00:0x00 + temp1 + 0x40]);\n            storage[temp2] = !!var2 | (storage[temp2] & ~0xff);\n            var2 = 0x11a9;\n            var3 = arg1;\n            var4 = var1;\n        \n            if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n        \n            var2 = func_1191(var3, var4);\n            var3 = 0x0f;\n            var4 = 0x00;\n            var5 = arg0;\n            var6 = var1;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var temp3 = var4;\n            memory[temp3:temp3 + 0x20] = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var3;\n            storage[keccak256(memory[0x00:0x00 + temp3 + 0x40])] = var2;\n            var1 = var1 + 0x01;\n        \n            if (var1 >= memory[arg0:arg0 + 0x20]) { goto label_11E6; }\n            else { goto label_113F; }\n        }\n    }\n    \n    function func_1191(var arg0, var arg1) returns (var r0) {\n        arg0 = memory[arg1 * 0x20 + arg0 + 0x20:arg1 * 0x20 + arg0 + 0x20 + 0x20];\n        arg1 = 0x0de0b6b3a7640000;\n        r0 = func_2CB4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (!var1) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_1230; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1) {\n        label_1230:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x01;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function authorizeProvider(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n    \n        if (!(storage[keccak256(memory[var0:var0 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x0b;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3 & temp0;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8563cf3307d6904af4525af51010bc07d34ec3154f552d9e00f64ed395dc0470, msg.sender]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function setBurnRate(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = arg0 > 0x00;\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_1379:\n            storage[0x0a] = arg0;\n            return 0x01;\n        } else if (arg0 <= 0x03e8) { goto label_1379; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0 & temp0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp2;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x00;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])] < arg2;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] < arg2) {\n            var temp11 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp11;\n            memory[0x20:0x40] = 0x01;\n            var temp12 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp11 & msg.sender;\n            memory[0x20:0x40] = temp12;\n            var2 = storage[keccak256(memory[0x00:0x40])] >= arg2;\n        \n            if (!var2) { goto label_13FE; }\n            else { goto label_13F9; }\n        } else if (!var2) {\n        label_13FE:\n        \n            if (!var2) {\n            label_14D2:\n                return 0x00;\n            } else {\n            label_1404:\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                var var3 = storage[keccak256(memory[0x00:0x40])];\n                var2 = 0x1426;\n                var var4 = arg2;\n                var2 = func_2CE3(var3, var4);\n                var temp3 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg1 & temp3;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                memory[0x00:0x20] = arg0 & temp3;\n                var2 = 0x1455;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var4 = arg2;\n                var2 = func_2C9D(var3, var4);\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var2 = 0x1478;\n                var3 = var1;\n                var4 = arg2;\n                var2 = func_2C9D(var3, var4);\n                var temp4 = 0x02 ** 0xa0 - 0x01;\n                var temp5 = arg0 & temp4;\n                memory[0x00:0x20] = temp5;\n                memory[0x20:0x40] = 0x01;\n                var temp6 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = temp4 & msg.sender;\n                memory[0x20:0x40] = temp6;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var temp7 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                var temp8 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp7;\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = arg2;\n                var temp10 = memory[0x40:0x60];\n                log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [memory[0x00:0x20], stack[-6] & 0x02 ** 0xa0 - 0x01, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n                return 0x01;\n            }\n        } else {\n        label_13F9:\n        \n            if (arg2 <= 0x00) { goto label_14D2; }\n            else { goto label_1404; }\n        }\n    }\n    \n    function setExchangeFormula(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = 0x00;\n        var var2 = 0x150f;\n        var var3 = 0x0de0b6b3a7640000;\n        var var4 = arg0;\n        var2 = func_2C07(var3, var4);\n    \n        if (var2 <= var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x00;\n        var2 = 0x152d;\n        var3 = 0x0de0b6b3a7640000;\n        var4 = arg0;\n        var2 = func_2D0B(var3, var4);\n    \n        if (var2 <= var1) { revert(memory[0x00:0x00]); }\n    \n        storage[0x15] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x15] & ~0xffffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function exchangeFormula() returns (var r0) { return storage[0x15] & 0x02 ** 0xa0 - 0x01; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function exchangeIsRunning() returns (var r0) { return storage[0x15] / 0x02 ** 0xa0 & 0xff; }\n    \n    function updateExchangeStatus(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        if (!arg0) {\n        label_1607:\n            storage[0x15] = !!arg0 * 0x02 ** 0xa0 | (storage[0x15] & ~0xff0000000000000000000000000000000000000000);\n            return 0x01;\n        } else {\n            var var1 = 0x00;\n            var var2 = 0x15d1;\n            var var3 = 0x0de0b6b3a7640000;\n            var var4 = storage[0x15] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_2C07(var3, var4);\n        \n            if (var2 <= var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00;\n            var2 = 0x15fd;\n            var3 = 0x0de0b6b3a7640000;\n            var4 = storage[0x15] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_2D0B(var3, var4);\n        \n            if (var2 > var1) { goto label_1607; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function purchaseWolk(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x15] / 0x02 ** 0xa0 & 0xff;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_166C:\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x1690;\n            var var3 = msg.value;\n            var var4 = storage[0x15] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_2D0B(var3, var4);\n            var1 = var2;\n        \n            if (var1 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x16ab;\n            var3 = storage[0x02];\n            var4 = var1;\n            var2 = func_2CE3(var3, var4);\n            storage[0x02] = var2;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n            var2 = 0x16d1;\n            var4 = var1;\n            var2 = func_2CE3(var3, var4);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n            var2 = 0x16f7;\n            var3 = storage[0x05];\n            var4 = msg.value;\n            var2 = func_2CE3(var3, var4);\n            storage[0x05] = var2;\n            var temp0 = arg0;\n            var temp1 = var1;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = temp1;\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x7ff6ea1c893a974b2f363e8f8e474a1b52958080d1fffe0d085c286de30035d2, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp1;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [memory[0x00:0x20], address(this), stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return temp1;\n        } else if (storage[0x08] / 0x02 ** 0xa0 & 0xff) { goto label_166C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function finalizeOpenSale() {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = !(storage[0x08] / 0x02 ** 0xa8 & 0xff);\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_17C5:\n            storage[0x08] = (storage[0x08] & ~0xff000000000000000000000000000000000000000000) | 0x02 ** 0xa8;\n            storage[0x13] = block.number;\n            var1 = 0x1809;\n            var var2 = 0x1800;\n            var var3 = storage[0x02];\n            var var4 = 0x0f;\n            var2 = func_2CB4(var3, var4);\n            var1 = func_1800(var2);\n            var temp1 = var1;\n            storage[0x05] = temp1;\n            var1 = 0x1823;\n            var3 = temp1;\n            var2 = address(this).balance;\n            var1 = func_2C9D(var2, var3);\n            var temp2 = var1;\n            var0 = temp2;\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n        \n            if (temp4) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (storage[0x02] >= 0x295be96e64066972000000) { goto label_17C5; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1800(var arg0) returns (var r0) {\n        var var0 = 0x0186a0;\n        var var1 = 0x00;\n        var var2 = var1;\n    \n        if (var0 <= var2) { assert(); }\n    \n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        var2 = var4 / var3;\n        var3 = var0;\n        var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        if (arg0 == var0 * var2 + var4 % var3) { return var2; }\n        else { assert(); }\n    }\n    \n    function func_18B6(var arg0) returns (var r0) {\n        var var0 = 0x0f;\n        var var1 = 0x00;\n        var var2 = var1;\n    \n        if (var0 <= var2) { assert(); }\n    \n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        var2 = var4 / var3;\n        var3 = var0;\n        var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        if (arg0 == var0 * var2 + var4 % var3) { return var2; }\n        else { assert(); }\n    }\n    \n    function settleBuyer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (!!(storage[keccak256(memory[var3:var3 + 0x40])] & 0xff) != 0x01) { assert(); }\n    \n        if (!(storage[0x09] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var4 = storage[0x0a] > 0x00;\n    \n        if (var4) {\n            var4 = storage[0x0a] <= 0x03e8;\n        \n            if (!var4) { goto label_1A4B; }\n            else { goto label_1A20; }\n        } else if (!var4) {\n        label_1A4B:\n        \n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_1A56:\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            var4 = storage[keccak256(memory[0x00:0x40])] >= arg1;\n        \n            if (storage[keccak256(memory[0x00:0x40])] >= arg1) {\n                if (!var4) { revert(memory[0x00:0x00]); }\n            \n            label_1A8A:\n                var4 = 0x1aa0;\n                var var5 = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                var var6 = arg1;\n                var4 = func_2DE0(var5, var6);\n                var1 = var4;\n                var4 = 0x1ab9;\n                var5 = 0x1ab1;\n                var6 = arg1;\n                var var7 = storage[0x0a];\n                var5 = func_2CB4(var6, var7);\n                var4 = func_1AB1(var5);\n                var2 = var4;\n            \n                if (var1 < 0x01) {\n                    var temp14 = var2;\n                    var1 = temp14;\n                \n                    if (var1 <= var1) { goto label_1AD4; }\n                    else { goto label_1AD1; }\n                } else if (var1 <= var2) {\n                label_1AD4:\n                    var4 = 0x1ade;\n                    var5 = arg1;\n                    var6 = var1;\n                    var4 = func_2C9D(var5, var6);\n                \n                label_1ADE:\n                    memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var3 = var4;\n                    var4 = 0x1b04;\n                    var5 = storage[keccak256(memory[0x00:0x40])];\n                    var6 = arg1;\n                    var4 = func_2C9D(var5, var6);\n                    var temp0 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = arg0 & temp0;\n                    memory[0x20:0x40] = 0x00;\n                    storage[keccak256(memory[0x00:0x40])] = var4;\n                    memory[0x00:0x20] = temp0 & msg.sender;\n                    var5 = storage[keccak256(memory[0x00:0x40])];\n                    var4 = 0x1b34;\n                    var6 = var3;\n                    var4 = func_2CE3(var5, var6);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x00;\n                    storage[keccak256(memory[0x00:0x40])] = var4;\n                    var5 = storage[0x02];\n                    var4 = 0x1b5a;\n                    var6 = var1;\n                    var4 = func_2C9D(var5, var6);\n                    storage[0x02] = var4;\n                    var temp1 = 0x02 ** 0xa0 - 0x01;\n                    var temp2 = arg0;\n                    var temp3 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                    var temp4 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp3;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = var3;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], stack[-7] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n                    var temp7 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                    var temp8 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp7;\n                    var temp9 = var1;\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = temp9;\n                    var temp11 = memory[0x40:0x60];\n                    log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [memory[0x00:0x20], stack[-7] & 0x02 ** 0xa0 - 0x01, 0x00]);\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = temp9;\n                    var temp13 = memory[0x40:0x60];\n                    log(memory[temp13:temp13 + (temp12 + 0x20) - temp13], [0xa02fa7af120761e5cdeff8bc117c44fd425d0f51fd27155746f84421d87d18e6, stack[-7] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n                    return 0x01;\n                } else {\n                label_1AD1:\n                    var1 = var2;\n                    var4 = 0x1ade;\n                    var5 = arg1;\n                    var6 = var1;\n                    var4 = func_2C9D(var5, var6);\n                    goto label_1ADE;\n                }\n            } else if (arg1 > 0x00) { goto label_1A8A; }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n        label_1A20:\n            var temp15 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp15;\n            memory[0x20:0x40] = 0x0b;\n            var temp16 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp15 & msg.sender;\n            memory[0x20:0x40] = temp16;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_1A56; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_1AB1(var arg0) returns (var r0) {\n        var var0 = 0x2710;\n        var var1 = 0x00;\n        var var2 = var1;\n    \n        if (var0 <= var2) { assert(); }\n    \n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        var2 = var4 / var3;\n        var3 = var0;\n        var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        if (arg0 == var0 * var2 + var4 % var3) { return var2; }\n        else { assert(); }\n    }\n    \n    function refund() {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0e;\n        var var1 = var0;\n        var var2 = storage[keccak256(memory[var1:var1 + 0x40])] > var1;\n    \n        if (var2) {\n            var2 = !(storage[0x08] / 0x02 ** 0xa0 & 0xff);\n        \n            if (!var2) { goto label_1C5D; }\n            else { goto label_1C4B; }\n        } else if (!var2) {\n        label_1C5D:\n        \n            if (!var2) {\n            label_1C6A:\n            \n                if (!var2) { revert(memory[0x00:0x00]); }\n            \n            label_1C75:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x00;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                var temp1 = storage[temp0];\n                memory[0x20:0x40] = 0x0e;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                var temp3 = storage[temp2];\n                storage[temp0] = 0x00;\n                storage[temp2] = 0x00;\n                var0 = temp1;\n                var1 = temp3;\n                var var3 = storage[0x02];\n                var2 = 0x1cb4;\n                var var4 = var0;\n                var2 = func_2C9D(var3, var4);\n                storage[0x02] = var2;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var0;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xf505eb6e610340eed3eea0048f8ec258cda0927f73be2d293288fde9a546f1ab, msg.sender]);\n                var temp6 = var1;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = temp6;\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xb6c0eca8138e097d71e2dd31e19a1266487f0553f170b7260ffe68bcbe9ff8a7, msg.sender]);\n                var temp9 = memory[0x40:0x60];\n                var temp10;\n                temp10, memory[temp9:temp9 + 0x00] = address(msg.sender).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp9:temp9 + memory[0x40:0x60] - temp9]);\n            \n                if (temp10) { return; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n            label_1C64:\n            \n                if (block.number > storage[0x13]) { goto label_1C75; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_1C4B:\n            var2 = storage[0x02] < 0x295be96e64066972000000;\n        \n            if (!var2) { goto label_1C6A; }\n            else { goto label_1C64; }\n        }\n    }\n    \n    function end_block() returns (var r0) { return storage[0x13]; }\n    \n    function settleSeller(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n    \n        if (!!(storage[keccak256(memory[var4:var4 + 0x40])] & 0xff) != 0x01) { assert(); }\n    \n        if (!(storage[0x09] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0c;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var var5 = var1 > 0x00;\n    \n        if (var5) {\n            var5 = var1 <= 0x0fa0;\n        \n            if (!var5) { goto label_1DEB; }\n            else { goto label_1DE6; }\n        } else if (!var5) {\n        label_1DEB:\n        \n            if (!var5) { revert(memory[0x00:0x00]); }\n        \n        label_1DF6:\n            var5 = 0x1e00;\n            var var6 = msg.sender;\n            var var7 = arg1;\n            var5 = func_2E77(var6, var7);\n            var2 = var5;\n            var5 = 0x1e17;\n            var6 = 0x1ab1;\n            var7 = arg1;\n            var var8 = var1;\n            var6 = func_2CB4(var7, var8);\n            var5 = func_1AB1(var6);\n            var3 = var5;\n        \n            if (var2 < 0x01) {\n                var temp5 = var3;\n                var2 = temp5;\n            \n                if (var2 <= var2) { goto label_1E32; }\n                else { goto label_1E2F; }\n            } else if (var2 <= var3) {\n            label_1E32:\n                var5 = 0x1e3c;\n                var6 = arg1;\n                var7 = var2;\n                var5 = func_2C9D(var6, var7);\n            \n            label_1E3C:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x00;\n                var4 = var5;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < var4) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var5 = 0x1e88;\n                var7 = var4;\n                var5 = func_2CE3(var6, var7);\n                var temp0 = arg0;\n                memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                var temp1 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp1;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = var4;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [memory[0x00:0x20], msg.sender, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return 0x01;\n            } else {\n            label_1E2F:\n                var2 = var3;\n                var5 = 0x1e3c;\n                var6 = arg1;\n                var7 = var2;\n                var5 = func_2C9D(var6, var7);\n                goto label_1E3C;\n            }\n        } else {\n        label_1DE6:\n        \n            if (arg1 > 0x00) { goto label_1DF6; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function tokenGenerationMin() returns (var r0) { return 0x295be96e64066972000000; }\n    \n    function deauthorizeProvider(var arg0) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x0b;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3 & temp0;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x79485d41c145ee4d7ebf84793ab927ebb3f929101dba7db48702ef527d02cf83, msg.sender]);\n        return 0x01;\n    }\n    \n    function checkAuthorization(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x0b;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function checkServiceFee(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function maxPerExchangeBP() returns (var r0) { return storage[0x14]; }\n    \n    function grantService(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp1;\n        memory[0x20:0x40] = 0x0b;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp1 & msg.sender;\n        memory[0x20:0x40] = temp2;\n        var1 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n        var var2 = var1;\n    \n        if (var2) {\n            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x07;\n        \n            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { goto label_20DF; }\n            else { goto label_2062; }\n        } else if (!var2) {\n        label_20DF:\n            var0 = 0x00;\n        \n        label_11EB:\n            return var0;\n        } else {\n        label_2062:\n            var temp3 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp3;\n            memory[0x20:0x40] = 0x0b;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            var temp5 = arg1;\n            memory[0x00:0x20] = temp3 & temp5;\n            memory[0x20:0x40] = temp4;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            storage[temp6] = (storage[temp6] & ~0xff) | 0x01;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = temp5 & 0x02 ** 0xa0 - 0x01;\n            var temp8 = memory[0x40:0x60];\n            log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0x8563cf3307d6904af4525af51010bc07d34ec3154f552d9e00f64ed395dc0470, msg.sender]);\n            var0 = 0x01;\n            goto label_11EB;\n        }\n    }\n    \n    function acceptOwnership() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x04] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[temp2:temp2 + 0x20] = temp3 & temp1 & storage[0x03];\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = temp3 & storage[0x04] & temp1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp2 + 0x40) - temp4], [0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a]);\n        var temp5 = storage[0x04];\n        var temp6 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[0x03] = (temp5 & 0x02 ** 0xa0 - 0x01) | (temp6 & storage[0x03]);\n        storage[0x04] = temp6 & temp5;\n    }\n    \n    function totalTokens() returns (var r0) { return storage[0x02]; }\n    \n    function burnFormula() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function participantBalance(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0f;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function percentageETHReserve() returns (var r0) { return 0x0f; }\n    \n    function owner() returns (var r0) { return storage[0x03] & 0x02 ** 0xa0 - 0x01; }\n    \n    function removeService(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x0b;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg1;\n        memory[0x00:0x20] = temp4 & temp1;\n        memory[0x20:0x40] = temp3;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = storage[temp5] & ~0xff;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp4 & 0x02 ** 0xa0 - 0x01;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0x79485d41c145ee4d7ebf84793ab927ebb3f929101dba7db48702ef527d02cf83, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function multisigWallet() returns (var r0) { return storage[0x06] & 0x02 ** 0xa0 - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x04;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x574f4c4b00000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function estLiquidationCap() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(storage[0x08] / 0x02 ** 0xa8 & 0xff)) { return 0x00; }\n    \n        var var2 = 0x22ea;\n        var var3 = 0x1ab1;\n        var var4 = storage[0x02];\n        var var5 = storage[0x14];\n        var3 = func_2CB4(var4, var5);\n        var2 = func_1AB1(var3);\n        var1 = var2;\n    \n        if (var1 >= 0x056bc75e2d63100000) {\n            var0 = var1;\n        \n        label_2316:\n            return var0;\n        } else {\n            var1 = 0x056bc75e2d63100000;\n            var0 = var1;\n            goto label_2316;\n        }\n    }\n    \n    function burnBasisPoints() returns (var r0) { return storage[0x0a]; }\n    \n    function reserveBalance() returns (var r0) { return storage[0x05]; }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = var0;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])] >= arg1;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] >= arg1) {\n            if (!var1) {\n            label_240C:\n                var0 = 0x00;\n            \n            label_1294:\n                return var0;\n            } else {\n            label_2356:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x00;\n                var var2 = storage[keccak256(memory[0x00:0x40])];\n                var1 = 0x2378;\n                var var3 = arg1;\n                var1 = func_2C9D(var2, var3);\n                var temp0 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp0 & msg.sender;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                memory[0x00:0x20] = arg0 & temp0;\n                var1 = 0x23a7;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var3 = arg1;\n                var1 = func_2CE3(var2, var3);\n                var temp1 = arg0;\n                memory[0x00:0x20] = temp1 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                var temp3 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp2;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = arg1;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n                var0 = 0x01;\n                goto label_1294;\n            }\n        } else if (arg1 <= 0x00) { goto label_240C; }\n        else { goto label_2356; }\n    }\n    \n    function setMaxPerExchange(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = arg0 >= 0x0a;\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_2453:\n            storage[0x14] = arg0;\n            return 0x01;\n        } else if (arg0 <= 0x64) { goto label_2453; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function wolkGenesis(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = storage[0x02] < 0x01;\n    \n        if (var1) {\n            var1 = block.number <= arg1;\n        \n            if (!var1) { goto label_249A; }\n            else { goto label_2496; }\n        } else if (!var1) {\n        label_249A:\n        \n            if (!var1) {\n            label_24A5:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n            label_24B0:\n                storage[0x11] = arg0;\n                storage[0x12] = arg1;\n                storage[0x13] = arg2;\n                var temp1 = 0x02 ** 0xa0 - 0x01;\n                var temp2 = ~0xffffffffffffffffffffffffffffffffffffffff;\n                storage[0x06] = (temp2 & storage[0x06]) | (arg3 & temp1);\n                storage[0x08] = (temp2 & storage[0x08]) | (temp1 & arg4);\n                memory[0x00:0x20] = msg.sender & temp1;\n                memory[0x20:0x40] = 0x07;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n                return 0x01;\n            } else {\n            label_24A1:\n            \n                if (arg1 > arg0) { goto label_24B0; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_2496:\n            var1 = arg2 > arg1;\n        \n            if (!var1) { goto label_24A5; }\n            else { goto label_24A1; }\n        }\n    }\n    \n    function settlementIsRunning() returns (var r0) { return storage[0x09] / 0x02 ** 0xa0 & 0xff; }\n    \n    function tokenGenerationMax() returns (var r0) { return 0x7c13bc4b2c133c56000000; }\n    \n    function start_block() returns (var r0) { return storage[0x12]; }\n    \n    function openSaleCompleted() returns (var r0) { return storage[0x08] / 0x02 ** 0xa8 & 0xff; }\n    \n    function updateSettlementStatus(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        storage[0x09] = !!arg0 * 0x02 ** 0xa0 | (storage[0x09] & ~0xff0000000000000000000000000000000000000000);\n        return 0x01;\n    }\n    \n    function presale_start_block() returns (var r0) { return storage[0x11]; }\n    \n    function newOwner() returns (var r0) { return storage[0x04] & 0x02 ** 0xa0 - 0x01; }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function allSaleCompleted() returns (var r0) { return storage[0x08] / 0x02 ** 0xa0 & 0xff; }\n    \n    function removeParticipant(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var1 = 0x00;\n    \n        if (var1 >= memory[arg0:arg0 + 0x20]) {\n        label_26A5:\n            return 0x01;\n        } else {\n        label_2623:\n            var var2 = 0x00;\n            var var3 = 0x10;\n            var var4 = 0x00;\n            var var5 = arg0;\n            var var6 = var1;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var temp1 = var4;\n            memory[temp1:temp1 + 0x20] = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = var3;\n            var temp2 = keccak256(memory[0x00:0x00 + temp1 + 0x40]);\n            var temp3 = !!var2 | (storage[temp2] & ~0xff);\n            var2 = 0x00;\n            storage[temp2] = temp3;\n            var3 = 0x0f;\n            var4 = var2;\n            var5 = arg0;\n            var6 = var1;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var temp4 = var4;\n            memory[temp4:temp4 + 0x20] = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var3;\n            storage[keccak256(memory[0x00:0x00 + temp4 + 0x40])] = var2;\n            var1 = var1 + 0x01;\n        \n            if (var1 >= memory[arg0:arg0 + 0x20]) { goto label_26A5; }\n            else { goto label_2623; }\n        }\n    }\n    \n    function setServiceFee(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = arg1 <= 0x00;\n    \n        if (var1) {\n            if (!var1) {\n            label_2715:\n                var temp1 = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp1;\n                memory[0x20:0x40] = 0x0c;\n                var temp2 = arg1;\n                storage[keccak256(memory[0x00:0x40])] = temp2;\n                memory[0x20:0x40] = 0x07;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = temp2;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xe273f117e317b5f79c25ba280145c5a051fac58dc8482e8b2a14d04023521dcc, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                var0 = 0x01;\n            \n            label_1294:\n                return var0;\n            } else {\n            label_26E3:\n                var0 = 0x00;\n                memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x07;\n                var temp6 = keccak256(memory[var0:var0 + 0x40]);\n                storage[temp6] = storage[temp6] & ~0xff;\n                memory[0x20:0x40] = 0x0c;\n                storage[keccak256(memory[var0:var0 + 0x40])] = var0;\n                goto label_1294;\n            }\n        } else if (arg1 <= 0x0fa0) { goto label_2715; }\n        else { goto label_26E3; }\n    }\n    \n    function wolkSale() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp1 == temp1 & arg0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x04] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x04] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function setBurnFormula(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var2 = 0x2828;\n        var var3 = arg0;\n        var var4 = 0x0de0b6b3a7640000;\n        var2 = func_2DE0(var3, var4);\n        var1 = var2;\n    \n        if (var1 <= 0x2d79883d2000) { revert(memory[0x00:0x00]); }\n    \n        storage[0x09] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x09] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function setFeeFormula(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (!!(storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) != 0x01) { assert(); }\n    \n        var var2 = 0x28ab;\n        var var3 = arg0;\n        var var4 = 0x0de0b6b3a7640000;\n        var2 = func_2E77(var3, var4);\n        var1 = var2;\n    \n        if (var1 <= 0x2d79883d2000) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x0d;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = (arg0 & temp0) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function tokenGenerationEvent(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x10;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = storage[keccak256(memory[var2:var2 + 0x40])] & 0xff;\n    \n        if (var3) {\n            var3 = !(storage[0x08] / 0x02 ** 0xa8 & 0xff);\n        \n            if (!var3) { goto label_2953; }\n            else { goto label_2944; }\n        } else if (!var3) {\n        label_2953:\n        \n            if (!var3) {\n            label_2961:\n            \n                if (!var3) {\n                label_296D:\n                \n                    if (!var3) { revert(memory[0x00:0x00]); }\n                \n                label_2978:\n                    var0 = 0x03e8;\n                \n                    if (storage[0x02] < 0x295be96e64066972000000) {\n                        var0 = 0x0499;\n                        goto label_2A43;\n                    } else if (storage[0x02] < 0x31a17e847807b1bc000000) {\n                        var0 = 0x0477;\n                        goto label_2A43;\n                    } else if (storage[0x02] < 0x39e7139a8c08fa06000000) {\n                        var0 = 0x0457;\n                        goto label_2A43;\n                    } else if (storage[0x02] < 0x422ca8b0a00a4250000000) {\n                        var0 = 0x0439;\n                        goto label_2A43;\n                    } else if (storage[0x02] < 0x4a723dc6b40b8a9a000000) {\n                        var0 = 0x041d;\n                        goto label_2A43;\n                    } else if (storage[0x02] >= 0x52b7d2dcc80cd2e4000000) {\n                        var0 = 0x03e8;\n                    \n                    label_2A43:\n                        var3 = block.number < storage[0x12];\n                    \n                        if (!var3) {\n                            if (!var3) {\n                            label_2AC7:\n                            \n                                if (block.number < storage[0x12]) { revert(memory[0x00:0x00]); }\n                            \n                            label_2AD6:\n                                var3 = 0x2ae1;\n                                var var4 = msg.value;\n                                var var5 = var0;\n                                var3 = func_2CB4(var4, var5);\n                                var temp0 = var3;\n                                var1 = temp0;\n                                var3 = 0x2aef;\n                                var4 = storage[0x02];\n                                var5 = var1;\n                                var3 = func_2CE3(var4, var5);\n                                var2 = var3;\n                            \n                                if (var2 > 0x7c13bc4b2c133c56000000) { revert(memory[0x00:0x00]); }\n                            \n                                storage[0x02] = var2;\n                                var temp1 = 0x02 ** 0xa0 - 0x01;\n                                var temp2 = arg0;\n                                var temp3 = memory[0x00:0x20];\n                                memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                                var temp4 = memory[0x00:0x20];\n                                memory[0x00:0x20] = temp3;\n                                var temp5 = memory[0x40:0x60];\n                                memory[temp5:temp5 + 0x20] = var1;\n                                var temp6 = memory[0x40:0x60];\n                                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], address(this), stack[-4] & 0x02 ** 0xa0 - 0x01]);\n                                memory[0x00:0x20] = temp2 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x00;\n                                var4 = storage[keccak256(memory[0x00:0x40])];\n                                var3 = 0x2b60;\n                                var5 = var1;\n                                var3 = func_2CE3(var4, var5);\n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x00;\n                                storage[keccak256(memory[0x00:0x40])] = var3;\n                                memory[0x20:0x40] = 0x0e;\n                                var4 = storage[keccak256(memory[0x00:0x40])];\n                                var3 = 0x2b8d;\n                                var5 = msg.value;\n                                var3 = func_2CE3(var4, var5);\n                                var temp7 = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x00:0x20] = temp7;\n                                memory[0x20:0x40] = 0x0e;\n                                storage[keccak256(memory[0x00:0x40])] = var3;\n                                var temp8 = memory[0x40:0x60];\n                                memory[temp8:temp8 + 0x20] = var1;\n                                var temp9 = memory[0x40:0x60];\n                                log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x7ff6ea1c893a974b2f363e8f8e474a1b52958080d1fffe0d085c286de30035d2, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n                                return;\n                            } else {\n                            label_2A61:\n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x0f;\n                            \n                                if (storage[keccak256(memory[0x00:0x40])] < msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x0f;\n                                var3 = 0x2aa9;\n                                var4 = storage[keccak256(memory[0x00:0x40])];\n                                var5 = msg.value;\n                                var3 = func_2C9D(var4, var5);\n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x0f;\n                                storage[keccak256(memory[0x00:0x40])] = var3;\n                                goto label_2AD6;\n                            }\n                        } else if (block.number < storage[0x11]) { goto label_2AC7; }\n                        else { goto label_2A61; }\n                    } else {\n                        var0 = 0x0402;\n                        goto label_2A43;\n                    }\n                } else {\n                label_2968:\n                \n                    if (msg.value > 0x00) { goto label_2978; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_295A:\n                var3 = block.number <= storage[0x13];\n            \n                if (!var3) { goto label_296D; }\n                else { goto label_2968; }\n            }\n        } else {\n        label_2944:\n            var3 = !(storage[0x08] / 0x02 ** 0xa0 & 0xff);\n        \n            if (!var3) { goto label_2961; }\n            else { goto label_295A; }\n        }\n    }\n    \n    function checkFeeSchedule(var arg0) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x0d;\n        return storage[keccak256(memory[0x00:0x40])] & temp0;\n    }\n    \n    function func_2C07(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1 & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0xf7a4c45c;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = storage[0x02];\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = storage[0x05];\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0xff & 0x0f;\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = arg0;\n        var var4 = temp0 + 0x84;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (temp1) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2C9D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_2CB4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_2CD0:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_2CD0;\n        }\n    }\n    \n    function func_2CE3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n        var var2 = var1 >= temp0;\n    \n        if (var1 >= temp0) {\n            if (!var2) { assert(); }\n        \n        label_2CD8:\n            return var1;\n        } else if (var1 >= arg1) { goto label_2CD8; }\n        else { assert(); }\n    }\n    \n    function func_2D0B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1 & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x949dfa63;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = storage[0x02];\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = storage[0x05];\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0xff & 0x0f;\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = arg0;\n        var var4 = temp0 + 0x84;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (temp1) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2DE0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) {\n            var0 = 0x00;\n        \n        label_11EB:\n            return var0;\n        } else {\n            var var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var3 = 0x926f949e;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = arg1;\n            var var4 = temp0 + 0x24;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = 0x00;\n            var var10 = var2;\n        \n            if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n        \n            if (!temp1) { revert(memory[0x00:0x00]); }\n        \n            var1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            var0 = var1;\n            goto label_11EB;\n        }\n    }\n    \n    function func_2E77(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x0d;\n        var var0 = 0x00;\n        var var1 = temp0 & storage[keccak256(memory[var0:var0 + 0x40])];\n        var var2 = var0;\n    \n        if (!var1) { return 0x00; }\n    \n        var var3 = var1 & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x3e81d56e;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = arg1;\n        var var5 = temp1 + 0x24;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (temp2) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_02A2:\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (!(storage[0x08] / 0x02 ** 0xa8 & 0xff)) {\n                var0 = address(this);\n                var1 = 0xfa6b129d;\n                var2 = msg.value;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n                memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = msg.sender;\n                var3 = temp2 + 0x24;\n                var4 = 0x00;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = var2;\n                var9 = var0;\n            \n                if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp3;\n                temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x25ee).value(var8)(memory[var7:var7 + var6]);\n            \n                if (temp3) { stop(); }\n                else { revert(memory[0x00:0x00]); }\n            } else if (block.number < storage[0x13]) { revert(memory[0x00:0x00]); }\n            else {\n                var var0 = address(this);\n                var var1 = 0x3d8c9b8c;\n                var var2 = msg.value;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n                var var3 = temp0 + 0x24;\n                var var4 = 0x20;\n                var var5 = memory[0x40:0x60];\n                var var6 = var3 - var5;\n                var var7 = var5;\n                var var8 = var2;\n                var var9 = var0;\n            \n                if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp1;\n                temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x25ee).value(var8)(memory[var7:var7 + var6]);\n            \n                if (temp1) { stop(); }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x310e16) {\n                // Dispatch table entry for sellWolk(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24];\n                var1 = sellWolk(var2);\n            \n            label_03CC:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var1;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f1;\n                var2 = name();\n            \n            label_03F1:\n                var temp6 = memory[0x40:0x60];\n                var3 = temp6;\n                memory[var3:var3 + 0x20] = 0x20;\n                var4 = var3;\n                var temp7 = var4 + 0x20;\n                var temp8 = var2;\n                memory[temp7:temp7 + 0x20] = memory[temp8:temp8 + 0x20];\n                var5 = temp7 + 0x20;\n                var6 = temp8 + 0x20;\n                var7 = memory[temp8:temp8 + 0x20];\n                var8 = var7;\n                var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_042E:\n                    var temp9 = var7;\n                    var5 = temp9 + var5;\n                    var6 = temp9 & 0x1f;\n                \n                    if (!var6) {\n                        var temp10 = memory[0x40:0x60];\n                        return memory[temp10:temp10 + var5 - temp10];\n                    } else {\n                        var temp11 = var6;\n                        var temp12 = var5 - temp11;\n                        memory[temp12:temp12 + 0x20] = ~(0x0100 ** (0x20 - temp11) - 0x01) & memory[temp12:temp12 + 0x20];\n                        var temp13 = memory[0x40:0x60];\n                        return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n                    }\n                } else {\n                label_041E:\n                    var temp14 = var11;\n                    memory[var9 + temp14:var9 + temp14 + 0x20] = memory[var10 + temp14:var10 + temp14 + 0x20];\n                    var11 = temp14 + 0x20;\n                \n                    if (var11 >= var8) { goto label_042E; }\n                    else { goto label_041E; }\n                }\n            } else if (var0 == 0x079ee6b3) {\n                // Dispatch table entry for addParticipant(address[],uint256[])\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp15 = msg.data[0x04:0x24];\n                var temp16 = msg.data[temp15 + 0x04:temp15 + 0x04 + 0x20];\n                var temp17 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp17 + temp16 * 0x20 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp16;\n                var temp18 = temp16 * 0x20;\n                memory[temp17 + 0x20:temp17 + 0x20 + temp18] = msg.data[temp15 + 0x24:temp15 + 0x24 + temp18];\n                var2 = temp17;\n                var temp19 = msg.data[0x24:0x44] + 0x04;\n                var temp20 = msg.data[temp19:temp19 + 0x20];\n                var temp21 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp21 + temp20 * 0x20 + 0x20;\n                memory[temp21:temp21 + 0x20] = temp20;\n                var temp22 = temp20 * 0x20;\n                memory[temp21 + 0x20:temp21 + 0x20 + temp22] = msg.data[temp19 + 0x20:temp19 + 0x20 + temp22];\n                var3 = temp21;\n                var1 = addParticipant(var2, var3);\n            \n            label_04F8:\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = !!var1;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x112ea262) {\n                // Dispatch table entry for authorizeProvider(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = authorizeProvider(var2);\n                goto label_04F8;\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var1 = totalSupply();\n                goto label_03CC;\n            } else if (var0 == 0x189d165e) {\n                // Dispatch table entry for setBurnRate(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24];\n                var1 = setBurnRate(var2);\n                goto label_04F8;\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp25 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp25 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp25;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_04F8;\n            } else if (var0 == 0x2659d8ef) {\n                // Dispatch table entry for setExchangeFormula(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = setExchangeFormula(var2);\n                goto label_04F8;\n            } else if (var0 == 0x2f7a407b) {\n                // Dispatch table entry for exchangeFormula()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = exchangeFormula();\n            \n            label_0646:\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = decimals();\n                goto label_03CC;\n            } else if (var0 == 0x32c6f315) {\n                // Dispatch table entry for exchangeIsRunning()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = exchangeIsRunning();\n                goto label_04F8;\n            } else if (var0 == 0x3bee0613) {\n                // Dispatch table entry for updateExchangeStatus(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = updateExchangeStatus(var2);\n                goto label_04F8;\n            } else if (var0 == 0x3d8c9b8c) {\n                // Dispatch table entry for purchaseWolk(address)\n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = purchaseWolk(var2);\n                goto label_03CC;\n            } else if (var0 == 0x421521b1) {\n                // Dispatch table entry for finalizeOpenSale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b2;\n                finalizeOpenSale();\n                stop();\n            } else if (var0 == 0x4bb278f3) {\n                // Dispatch table entry for finalize()\n                var1 = 0x03b2;\n                var2 = 0x00;\n                var3 = var2;\n                var temp28 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x08] & temp28 != temp28 & msg.sender) { assert(); }\n            \n                var4 = storage[0x08] / 0x02 ** 0xa8 & 0xff;\n            \n                if (!var4) {\n                    if (!var4) { revert(memory[0x00:0x00]); }\n                \n                label_18A6:\n                    var4 = 0x18bd;\n                    var5 = 0x18b6;\n                    var6 = msg.value;\n                    var7 = 0x0186a0;\n                    var5 = func_2CB4(var6, var7);\n                    var4 = func_18B6(var5);\n                    var temp29 = var4;\n                    var2 = temp29;\n                    var4 = 0x18cb;\n                    var5 = storage[0x02];\n                    var6 = var2;\n                    var4 = func_2CE3(var5, var6);\n                    var3 = var4;\n                    storage[0x02] = var3;\n                    var4 = 0x18e0;\n                    var5 = storage[0x05];\n                    var6 = msg.value;\n                    var4 = func_2CE3(var5, var6);\n                    storage[0x05] = var4;\n                    var temp30 = 0x02 ** 0xa0 - 0x01;\n                    var temp31 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                    var temp32 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp31;\n                    var temp33 = memory[0x40:0x60];\n                    memory[temp33:temp33 + 0x20] = var2;\n                    var temp34 = memory[0x40:0x60];\n                    log(memory[temp34:temp34 + (temp33 + 0x20) - temp34], [memory[0x00:0x20], address(this), storage[0x08] & 0x02 ** 0xa0 - 0x01]);\n                    memory[0x00:0x20] = storage[0x08] & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = 0x193a;\n                    var5 = storage[keccak256(memory[0x00:0x40])];\n                    var6 = var2;\n                    var4 = func_2CE3(var5, var6);\n                    var temp35 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = temp35 & storage[0x08];\n                    memory[0x20:0x40] = 0x00;\n                    storage[keccak256(memory[0x00:0x40])] = var4;\n                    var temp36 = memory[0x40:0x60];\n                    memory[temp36:temp36 + 0x20] = var2;\n                    var temp37 = memory[0x40:0x60];\n                    log(memory[temp37:temp37 + (temp36 + 0x20) - temp37], [0x7ff6ea1c893a974b2f363e8f8e474a1b52958080d1fffe0d085c286de30035d2, storage[0x08] & 0x02 ** 0xa0 - 0x01]);\n                    storage[0x08] = (storage[0x08] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n                    // Error: Could not resolve jump destination!\n                } else if (!(storage[0x08] / 0x02 ** 0xa0 & 0xff)) { goto label_18A6; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x54b8dfcb) {\n                // Dispatch table entry for settleBuyer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = settleBuyer(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b2;\n                refund();\n                stop();\n            } else if (var0 == 0x5e0b1259) {\n                // Dispatch table entry for end_block()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = end_block();\n                goto label_03CC;\n            } else if (var0 == 0x64da8ad3) {\n                // Dispatch table entry for settleSeller(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = settleSeller(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x6712e0be) {\n                // Dispatch table entry for tokenGenerationMin()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = tokenGenerationMin();\n                goto label_03CC;\n            } else if (var0 == 0x673b57e9) {\n                // Dispatch table entry for deauthorizeProvider(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = deauthorizeProvider(var2);\n                goto label_04F8;\n            } else if (var0 == 0x685c234a) {\n                // Dispatch table entry for checkAuthorization(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp38 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp38 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp38;\n                var1 = checkAuthorization(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x6c9c1d41) {\n                // Dispatch table entry for checkServiceFee(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = checkServiceFee(var2);\n                goto label_03CC;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_03CC;\n            } else if (var0 == 0x714d497a) {\n                // Dispatch table entry for maxPerExchangeBP()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = maxPerExchangeBP();\n                goto label_03CC;\n            } else if (var0 == 0x726df9cc) {\n                // Dispatch table entry for grantService(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp39 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp39 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp39;\n                var1 = grantService(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x79ba5097) {\n                // Dispatch table entry for acceptOwnership()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b2;\n                acceptOwnership();\n                stop();\n            } else if (var0 == 0x7e1c0c09) {\n                // Dispatch table entry for totalTokens()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = totalTokens();\n                goto label_03CC;\n            } else if (var0 == 0x823ba0b8) {\n                // Dispatch table entry for burnFormula()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = burnFormula();\n                goto label_0646;\n            } else if (var0 == 0x826c69b8) {\n                // Dispatch table entry for participantBalance(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = participantBalance(var2);\n                goto label_03CC;\n            } else if (var0 == 0x847dc0a7) {\n                // Dispatch table entry for percentageETHReserve()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09c3;\n                var2 = percentageETHReserve();\n                var temp40 = memory[0x40:0x60];\n                memory[temp40:temp40 + 0x20] = var2 & 0xff;\n                var temp41 = memory[0x40:0x60];\n                return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = owner();\n                goto label_0646;\n            } else if (var0 == 0x8ea8e149) {\n                // Dispatch table entry for removeService(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp42 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp42 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp42;\n                var1 = removeService(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0x9075becf) {\n                // Dispatch table entry for multisigWallet()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = multisigWallet();\n                goto label_0646;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f1;\n                var2 = symbol();\n                goto label_03F1;\n            } else if (var0 == 0x99dd1ed9) {\n                // Dispatch table entry for estLiquidationCap()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var1 = estLiquidationCap();\n                goto label_03CC;\n            } else if (var0 == 0x9a436c9b) {\n                // Dispatch table entry for burnBasisPoints()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = burnBasisPoints();\n                goto label_03CC;\n            } else if (var0 == 0xa10954fe) {\n                // Dispatch table entry for reserveBalance()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = reserveBalance();\n                goto label_03CC;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0xacac0b9f) {\n                // Dispatch table entry for setMaxPerExchange(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24];\n                var1 = setMaxPerExchange(var2);\n                goto label_04F8;\n            } else if (var0 == 0xad7e01c8) {\n                // Dispatch table entry for wolkGenesis(uint256,uint256,uint256,address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64];\n                var temp43 = 0x02 ** 0xa0 - 0x01;\n                var5 = temp43 & msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4] & temp43;\n                var1 = wolkGenesis(var2, var3, var4, var5, var6);\n                goto label_04F8;\n            } else if (var0 == 0xb1a9bd77) {\n                // Dispatch table entry for settlementIsRunning()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = settlementIsRunning();\n                goto label_04F8;\n            } else if (var0 == 0xb57e6ea1) {\n                // Dispatch table entry for tokenGenerationMax()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = tokenGenerationMax();\n                goto label_03CC;\n            } else if (var0 == 0xb87fb3db) {\n                // Dispatch table entry for start_block()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = start_block();\n                goto label_03CC;\n            } else if (var0 == 0xbcbfe43c) {\n                // Dispatch table entry for openSaleCompleted()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = openSaleCompleted();\n                goto label_04F8;\n            } else if (var0 == 0xc5b15057) {\n                // Dispatch table entry for updateSettlementStatus(bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = !!msg.data[0x04:0x24];\n                var1 = updateSettlementStatus(var2);\n                goto label_04F8;\n            } else if (var0 == 0xcba9c0e0) {\n                // Dispatch table entry for presale_start_block()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = presale_start_block();\n                goto label_03CC;\n            } else if (var0 == 0xd4ee1d90) {\n                // Dispatch table entry for newOwner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = newOwner();\n                goto label_0646;\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var temp44 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp44 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp44;\n                var1 = allowance(var2, var3);\n                goto label_03CC;\n            } else if (var0 == 0xde179108) {\n                // Dispatch table entry for allSaleCompleted()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = allSaleCompleted();\n                goto label_04F8;\n            } else if (var0 == 0xe814c941) {\n                // Dispatch table entry for removeParticipant(address[])\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var temp45 = msg.data[0x04:0x24];\n                var temp46 = msg.data[temp45 + 0x04:temp45 + 0x04 + 0x20];\n                var temp47 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp47 + temp46 * 0x20 + 0x20;\n                memory[temp47:temp47 + 0x20] = temp46;\n                var temp48 = temp46 * 0x20;\n                memory[temp47 + 0x20:temp47 + 0x20 + temp48] = msg.data[temp45 + 0x24:temp45 + 0x24 + temp48];\n                var2 = temp47;\n                var1 = removeParticipant(var2);\n                goto label_04F8;\n            } else if (var0 == 0xef2fa169) {\n                // Dispatch table entry for setServiceFee(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = setServiceFee(var2, var3);\n                goto label_04F8;\n            } else if (var0 == 0xf2e1192a) {\n                // Dispatch table entry for wolkSale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = wolkSale();\n                goto label_0646;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03b2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf7dadf7d) {\n                // Dispatch table entry for setBurnFormula(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = setBurnFormula(var2);\n                goto label_04F8;\n            } else if (var0 == 0xf7fca4f4) {\n                // Dispatch table entry for setFeeFormula(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f8;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = setFeeFormula(var2);\n                goto label_04F8;\n            } else if (var0 == 0xfa6b129d) {\n                // Dispatch table entry for tokenGenerationEvent(address)\n                var1 = 0x03b2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                tokenGenerationEvent(var2);\n                stop();\n            } else if (var0 == 0xff0935b1) {\n                // Dispatch table entry for checkFeeSchedule(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0646;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = checkFeeSchedule(var2);\n                goto label_0646;\n            } else { goto label_02A2; }\n        }\n    }\n    \n    function sellWolk(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = storage[0x15] / 0x0100 ** 0x14 & 0xff;\n    \n        if (!var3) {\n            if (!var3) { revert(memory[0x00:0x00]); }\n        \n        label_0F57:\n            var3 = 0x0f5f;\n            var3 = estLiquidationCap();\n        \n        label_0F5F:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var1 = var3;\n        \n            if (storage[keccak256(memory[0x00:0x40])] < arg0) { revert(memory[0x00:0x00]); }\n        \n            if (var1 < arg0) { revert(memory[0x00:0x00]); }\n        \n            var3 = 0x0fac;\n            var var4 = arg0;\n            var var5 = storage[0x15] & 0x02 ** 0xa0 - 0x01;\n            var3 = func_2C07(var4, var5);\n            var2 = var3;\n        \n            if (address(this).balance <= var2) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            var4 = storage[keccak256(memory[0x00:0x40])];\n            var3 = 0x0fe8;\n            var5 = arg0;\n            var3 = func_2C9D(var4, var5);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var3;\n            var3 = 0x100e;\n            var4 = storage[0x02];\n            var5 = arg0;\n            var3 = func_2C9D(var4, var5);\n            storage[0x02] = var3;\n            var3 = 0x1025;\n            var4 = address(this).balance;\n            var5 = var2;\n            var3 = func_2C9D(var4, var5);\n            storage[0x05] = var3;\n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xf505eb6e610340eed3eea0048f8ec258cda0927f73be2d293288fde9a546f1ab, msg.sender]);\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp0;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], msg.sender, 0x00]);\n            var temp7 = var2;\n            var temp8 = memory[0x40:0x60];\n            var temp9;\n            temp9, memory[temp8:temp8 + 0x00] = address(msg.sender).call.gas(!temp7 * 0x08fc).value(temp7)(memory[temp8:temp8 + memory[0x40:0x60] - temp8]);\n        \n            if (temp9) { return var2; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (storage[0x08] / 0x02 ** 0xa0 & 0xff) { goto label_0F57; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x13;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x576f6c6b2050726f746f636f6c20546f6b656e00000000000000000000000000;\n        return r0;\n    }\n    \n    function addParticipant(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        if (memory[arg0:arg0 + 0x20] != memory[arg1:arg1 + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x00;\n    \n        if (var1 >= memory[arg0:arg0 + 0x20]) {\n        label_11E6:\n            return 0x01;\n        } else {\n        label_113F:\n            var var2 = 0x01;\n            var var3 = 0x10;\n            var var4 = 0x00;\n            var var5 = arg0;\n            var var6 = var1;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var temp1 = var4;\n            memory[temp1:temp1 + 0x20] = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = var3;\n            var temp2 = keccak256(memory[0x00:0x00 + temp1 + 0x40]);\n            storage[temp2] = !!var2 | (storage[temp2] & ~0xff);\n            var2 = 0x11a9;\n            var3 = arg1;\n            var4 = var1;\n        \n            if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n        \n            var2 = func_1191(var3, var4);\n            var3 = 0x0f;\n            var4 = 0x00;\n            var5 = arg0;\n            var6 = var1;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var temp3 = var4;\n            memory[temp3:temp3 + 0x20] = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var3;\n            storage[keccak256(memory[0x00:0x00 + temp3 + 0x40])] = var2;\n            var1 = var1 + 0x01;\n        \n            if (var1 >= memory[arg0:arg0 + 0x20]) { goto label_11E6; }\n            else { goto label_113F; }\n        }\n    }\n    \n    function func_1191(var arg0, var arg1) returns (var r0) {\n        arg0 = memory[arg1 * 0x20 + arg0 + 0x20:arg1 * 0x20 + arg0 + 0x20 + 0x20];\n        arg1 = 0x0de0b6b3a7640000;\n        r0 = func_2CB4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (!var1) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x01;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_1230; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1) {\n        label_1230:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x01;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function authorizeProvider(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n    \n        if (!(storage[keccak256(memory[var0:var0 + 0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x0b;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3 & temp0;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x8563cf3307d6904af4525af51010bc07d34ec3154f552d9e00f64ed395dc0470, msg.sender]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x02]; }\n    \n    function setBurnRate(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = arg0 > 0x00;\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_1379:\n            storage[0x0a] = arg0;\n            return 0x01;\n        } else if (arg0 <= 0x03e8) { goto label_1379; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0 & temp0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp2;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x00;\n        var var0 = 0x00;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])] < arg2;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] < arg2) {\n            var temp11 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp11;\n            memory[0x20:0x40] = 0x01;\n            var temp12 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp11 & msg.sender;\n            memory[0x20:0x40] = temp12;\n            var2 = storage[keccak256(memory[0x00:0x40])] >= arg2;\n        \n            if (!var2) { goto label_13FE; }\n            else { goto label_13F9; }\n        } else if (!var2) {\n        label_13FE:\n        \n            if (!var2) {\n            label_14D2:\n                return 0x00;\n            } else {\n            label_1404:\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                var var3 = storage[keccak256(memory[0x00:0x40])];\n                var2 = 0x1426;\n                var var4 = arg2;\n                var2 = func_2CE3(var3, var4);\n                var temp3 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg1 & temp3;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                memory[0x00:0x20] = arg0 & temp3;\n                var2 = 0x1455;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var4 = arg2;\n                var2 = func_2C9D(var3, var4);\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var2 = 0x1478;\n                var3 = var1;\n                var4 = arg2;\n                var2 = func_2C9D(var3, var4);\n                var temp4 = 0x02 ** 0xa0 - 0x01;\n                var temp5 = arg0 & temp4;\n                memory[0x00:0x20] = temp5;\n                memory[0x20:0x40] = 0x01;\n                var temp6 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = temp4 & msg.sender;\n                memory[0x20:0x40] = temp6;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var temp7 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                var temp8 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp7;\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = arg2;\n                var temp10 = memory[0x40:0x60];\n                log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [memory[0x00:0x20], stack[-6] & 0x02 ** 0xa0 - 0x01, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n                return 0x01;\n            }\n        } else {\n        label_13F9:\n        \n            if (arg2 <= 0x00) { goto label_14D2; }\n            else { goto label_1404; }\n        }\n    }\n    \n    function setExchangeFormula(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = 0x00;\n        var var2 = 0x150f;\n        var var3 = 0x0de0b6b3a7640000;\n        var var4 = arg0;\n        var2 = func_2C07(var3, var4);\n    \n        if (var2 <= var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x00;\n        var2 = 0x152d;\n        var3 = 0x0de0b6b3a7640000;\n        var4 = arg0;\n        var2 = func_2D0B(var3, var4);\n    \n        if (var2 <= var1) { revert(memory[0x00:0x00]); }\n    \n        storage[0x15] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x15] & ~0xffffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function exchangeFormula() returns (var r0) { return storage[0x15] & 0x02 ** 0xa0 - 0x01; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function exchangeIsRunning() returns (var r0) { return storage[0x15] / 0x02 ** 0xa0 & 0xff; }\n    \n    function updateExchangeStatus(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        if (!arg0) {\n        label_1607:\n            storage[0x15] = !!arg0 * 0x02 ** 0xa0 | (storage[0x15] & ~0xff0000000000000000000000000000000000000000);\n            return 0x01;\n        } else {\n            var var1 = 0x00;\n            var var2 = 0x15d1;\n            var var3 = 0x0de0b6b3a7640000;\n            var var4 = storage[0x15] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_2C07(var3, var4);\n        \n            if (var2 <= var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00;\n            var2 = 0x15fd;\n            var3 = 0x0de0b6b3a7640000;\n            var4 = storage[0x15] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_2D0B(var3, var4);\n        \n            if (var2 > var1) { goto label_1607; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function purchaseWolk(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x15] / 0x02 ** 0xa0 & 0xff;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_166C:\n        \n            if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x1690;\n            var var3 = msg.value;\n            var var4 = storage[0x15] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_2D0B(var3, var4);\n            var1 = var2;\n        \n            if (var1 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x16ab;\n            var3 = storage[0x02];\n            var4 = var1;\n            var2 = func_2CE3(var3, var4);\n            storage[0x02] = var2;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n            var2 = 0x16d1;\n            var4 = var1;\n            var2 = func_2CE3(var3, var4);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n            var2 = 0x16f7;\n            var3 = storage[0x05];\n            var4 = msg.value;\n            var2 = func_2CE3(var3, var4);\n            storage[0x05] = var2;\n            var temp0 = arg0;\n            var temp1 = var1;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = temp1;\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x7ff6ea1c893a974b2f363e8f8e474a1b52958080d1fffe0d085c286de30035d2, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp1;\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [memory[0x00:0x20], address(this), stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return temp1;\n        } else if (storage[0x08] / 0x02 ** 0xa0 & 0xff) { goto label_166C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function finalizeOpenSale() {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = !(storage[0x08] / 0x02 ** 0xa8 & 0xff);\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_17C5:\n            storage[0x08] = (storage[0x08] & ~0xff000000000000000000000000000000000000000000) | 0x02 ** 0xa8;\n            storage[0x13] = block.number;\n            var1 = 0x1809;\n            var var2 = 0x1800;\n            var var3 = storage[0x02];\n            var var4 = 0x0f;\n            var2 = func_2CB4(var3, var4);\n            var1 = func_1800(var2);\n            var temp1 = var1;\n            storage[0x05] = temp1;\n            var1 = 0x1823;\n            var3 = temp1;\n            var2 = address(this).balance;\n            var1 = func_2C9D(var2, var3);\n            var temp2 = var1;\n            var0 = temp2;\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n        \n            if (temp4) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (storage[0x02] >= 0x295be96e64066972000000) { goto label_17C5; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1800(var arg0) returns (var r0) {\n        var var0 = 0x0186a0;\n        var var1 = 0x00;\n        var var2 = var1;\n    \n        if (var0 <= var2) { assert(); }\n    \n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        var2 = var4 / var3;\n        var3 = var0;\n        var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        if (arg0 == var0 * var2 + var4 % var3) { return var2; }\n        else { assert(); }\n    }\n    \n    function func_18B6(var arg0) returns (var r0) {\n        var var0 = 0x0f;\n        var var1 = 0x00;\n        var var2 = var1;\n    \n        if (var0 <= var2) { assert(); }\n    \n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        var2 = var4 / var3;\n        var3 = var0;\n        var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        if (arg0 == var0 * var2 + var4 % var3) { return var2; }\n        else { assert(); }\n    }\n    \n    function settleBuyer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (!!(storage[keccak256(memory[var3:var3 + 0x40])] & 0xff) != 0x01) { assert(); }\n    \n        if (!(storage[0x09] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var4 = storage[0x0a] > 0x00;\n    \n        if (var4) {\n            var4 = storage[0x0a] <= 0x03e8;\n        \n            if (!var4) { goto label_1A4B; }\n            else { goto label_1A20; }\n        } else if (!var4) {\n        label_1A4B:\n        \n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_1A56:\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x00;\n            var4 = storage[keccak256(memory[0x00:0x40])] >= arg1;\n        \n            if (storage[keccak256(memory[0x00:0x40])] >= arg1) {\n                if (!var4) { revert(memory[0x00:0x00]); }\n            \n            label_1A8A:\n                var4 = 0x1aa0;\n                var var5 = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                var var6 = arg1;\n                var4 = func_2DE0(var5, var6);\n                var1 = var4;\n                var4 = 0x1ab9;\n                var5 = 0x1ab1;\n                var6 = arg1;\n                var var7 = storage[0x0a];\n                var5 = func_2CB4(var6, var7);\n                var4 = func_1AB1(var5);\n                var2 = var4;\n            \n                if (var1 < 0x01) {\n                    var temp14 = var2;\n                    var1 = temp14;\n                \n                    if (var1 <= var1) { goto label_1AD4; }\n                    else { goto label_1AD1; }\n                } else if (var1 <= var2) {\n                label_1AD4:\n                    var4 = 0x1ade;\n                    var5 = arg1;\n                    var6 = var1;\n                    var4 = func_2C9D(var5, var6);\n                \n                label_1ADE:\n                    memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x00;\n                    var3 = var4;\n                    var4 = 0x1b04;\n                    var5 = storage[keccak256(memory[0x00:0x40])];\n                    var6 = arg1;\n                    var4 = func_2C9D(var5, var6);\n                    var temp0 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = arg0 & temp0;\n                    memory[0x20:0x40] = 0x00;\n                    storage[keccak256(memory[0x00:0x40])] = var4;\n                    memory[0x00:0x20] = temp0 & msg.sender;\n                    var5 = storage[keccak256(memory[0x00:0x40])];\n                    var4 = 0x1b34;\n                    var6 = var3;\n                    var4 = func_2CE3(var5, var6);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x00;\n                    storage[keccak256(memory[0x00:0x40])] = var4;\n                    var5 = storage[0x02];\n                    var4 = 0x1b5a;\n                    var6 = var1;\n                    var4 = func_2C9D(var5, var6);\n                    storage[0x02] = var4;\n                    var temp1 = 0x02 ** 0xa0 - 0x01;\n                    var temp2 = arg0;\n                    var temp3 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                    var temp4 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp3;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = var3;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], stack[-7] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n                    var temp7 = memory[0x00:0x20];\n                    memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                    var temp8 = memory[0x00:0x20];\n                    memory[0x00:0x20] = temp7;\n                    var temp9 = var1;\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = temp9;\n                    var temp11 = memory[0x40:0x60];\n                    log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [memory[0x00:0x20], stack[-7] & 0x02 ** 0xa0 - 0x01, 0x00]);\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = temp9;\n                    var temp13 = memory[0x40:0x60];\n                    log(memory[temp13:temp13 + (temp12 + 0x20) - temp13], [0xa02fa7af120761e5cdeff8bc117c44fd425d0f51fd27155746f84421d87d18e6, stack[-7] & 0x02 ** 0xa0 - 0x01, msg.sender]);\n                    return 0x01;\n                } else {\n                label_1AD1:\n                    var1 = var2;\n                    var4 = 0x1ade;\n                    var5 = arg1;\n                    var6 = var1;\n                    var4 = func_2C9D(var5, var6);\n                    goto label_1ADE;\n                }\n            } else if (arg1 > 0x00) { goto label_1A8A; }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n        label_1A20:\n            var temp15 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp15;\n            memory[0x20:0x40] = 0x0b;\n            var temp16 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp15 & msg.sender;\n            memory[0x20:0x40] = temp16;\n        \n            if (storage[keccak256(memory[0x00:0x40])] & 0xff) { goto label_1A56; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_1AB1(var arg0) returns (var r0) {\n        var var0 = 0x2710;\n        var var1 = 0x00;\n        var var2 = var1;\n    \n        if (var0 <= var2) { assert(); }\n    \n        var var3 = var0;\n        var var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        var2 = var4 / var3;\n        var3 = var0;\n        var4 = arg0;\n    \n        if (!var3) { assert(); }\n    \n        if (arg0 == var0 * var2 + var4 % var3) { return var2; }\n        else { assert(); }\n    }\n    \n    function refund() {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0e;\n        var var1 = var0;\n        var var2 = storage[keccak256(memory[var1:var1 + 0x40])] > var1;\n    \n        if (var2) {\n            var2 = !(storage[0x08] / 0x02 ** 0xa0 & 0xff);\n        \n            if (!var2) { goto label_1C5D; }\n            else { goto label_1C4B; }\n        } else if (!var2) {\n        label_1C5D:\n        \n            if (!var2) {\n            label_1C6A:\n            \n                if (!var2) { revert(memory[0x00:0x00]); }\n            \n            label_1C75:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x00;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                var temp1 = storage[temp0];\n                memory[0x20:0x40] = 0x0e;\n                var temp2 = keccak256(memory[0x00:0x40]);\n                var temp3 = storage[temp2];\n                storage[temp0] = 0x00;\n                storage[temp2] = 0x00;\n                var0 = temp1;\n                var1 = temp3;\n                var var3 = storage[0x02];\n                var2 = 0x1cb4;\n                var var4 = var0;\n                var2 = func_2C9D(var3, var4);\n                storage[0x02] = var2;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var0;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xf505eb6e610340eed3eea0048f8ec258cda0927f73be2d293288fde9a546f1ab, msg.sender]);\n                var temp6 = var1;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = temp6;\n                var temp8 = memory[0x40:0x60];\n                log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0xb6c0eca8138e097d71e2dd31e19a1266487f0553f170b7260ffe68bcbe9ff8a7, msg.sender]);\n                var temp9 = memory[0x40:0x60];\n                var temp10;\n                temp10, memory[temp9:temp9 + 0x00] = address(msg.sender).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp9:temp9 + memory[0x40:0x60] - temp9]);\n            \n                if (temp10) { return; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n            label_1C64:\n            \n                if (block.number > storage[0x13]) { goto label_1C75; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_1C4B:\n            var2 = storage[0x02] < 0x295be96e64066972000000;\n        \n            if (!var2) { goto label_1C6A; }\n            else { goto label_1C64; }\n        }\n    }\n    \n    function end_block() returns (var r0) { return storage[0x13]; }\n    \n    function settleSeller(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n    \n        if (!!(storage[keccak256(memory[var4:var4 + 0x40])] & 0xff) != 0x01) { assert(); }\n    \n        if (!(storage[0x09] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0c;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var var5 = var1 > 0x00;\n    \n        if (var5) {\n            var5 = var1 <= 0x0fa0;\n        \n            if (!var5) { goto label_1DEB; }\n            else { goto label_1DE6; }\n        } else if (!var5) {\n        label_1DEB:\n        \n            if (!var5) { revert(memory[0x00:0x00]); }\n        \n        label_1DF6:\n            var5 = 0x1e00;\n            var var6 = msg.sender;\n            var var7 = arg1;\n            var5 = func_2E77(var6, var7);\n            var2 = var5;\n            var5 = 0x1e17;\n            var6 = 0x1ab1;\n            var7 = arg1;\n            var var8 = var1;\n            var6 = func_2CB4(var7, var8);\n            var5 = func_1AB1(var6);\n            var3 = var5;\n        \n            if (var2 < 0x01) {\n                var temp5 = var3;\n                var2 = temp5;\n            \n                if (var2 <= var2) { goto label_1E32; }\n                else { goto label_1E2F; }\n            } else if (var2 <= var3) {\n            label_1E32:\n                var5 = 0x1e3c;\n                var6 = arg1;\n                var7 = var2;\n                var5 = func_2C9D(var6, var7);\n            \n            label_1E3C:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x00;\n                var4 = var5;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < var4) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                var6 = storage[keccak256(memory[0x00:0x40])];\n                var5 = 0x1e88;\n                var7 = var4;\n                var5 = func_2CE3(var6, var7);\n                var temp0 = arg0;\n                memory[0x00:0x20] = temp0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var5;\n                var temp1 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp1;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = var4;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [memory[0x00:0x20], msg.sender, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return 0x01;\n            } else {\n            label_1E2F:\n                var2 = var3;\n                var5 = 0x1e3c;\n                var6 = arg1;\n                var7 = var2;\n                var5 = func_2C9D(var6, var7);\n                goto label_1E3C;\n            }\n        } else {\n        label_1DE6:\n        \n            if (arg1 > 0x00) { goto label_1DF6; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function tokenGenerationMin() returns (var r0) { return 0x295be96e64066972000000; }\n    \n    function deauthorizeProvider(var arg0) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = temp0 & msg.sender;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x0b;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg0;\n        memory[0x00:0x20] = temp3 & temp0;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp3 & 0x02 ** 0xa0 - 0x01;\n        var temp6 = memory[0x40:0x60];\n        log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0x79485d41c145ee4d7ebf84793ab927ebb3f929101dba7db48702ef527d02cf83, msg.sender]);\n        return 0x01;\n    }\n    \n    function checkAuthorization(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x0b;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function checkServiceFee(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function maxPerExchangeBP() returns (var r0) { return storage[0x14]; }\n    \n    function grantService(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp1;\n        memory[0x20:0x40] = 0x0b;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp1 & msg.sender;\n        memory[0x20:0x40] = temp2;\n        var1 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n        var var2 = var1;\n    \n        if (var2) {\n            memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x07;\n        \n            if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { goto label_20DF; }\n            else { goto label_2062; }\n        } else if (!var2) {\n        label_20DF:\n            var0 = 0x00;\n        \n        label_11EB:\n            return var0;\n        } else {\n        label_2062:\n            var temp3 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp3;\n            memory[0x20:0x40] = 0x0b;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            var temp5 = arg1;\n            memory[0x00:0x20] = temp3 & temp5;\n            memory[0x20:0x40] = temp4;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            storage[temp6] = (storage[temp6] & ~0xff) | 0x01;\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = temp5 & 0x02 ** 0xa0 - 0x01;\n            var temp8 = memory[0x40:0x60];\n            log(memory[temp8:temp8 + (temp7 + 0x20) - temp8], [0x8563cf3307d6904af4525af51010bc07d34ec3154f552d9e00f64ed395dc0470, msg.sender]);\n            var0 = 0x01;\n            goto label_11EB;\n        }\n    }\n    \n    function acceptOwnership() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x04] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = memory[0x40:0x60];\n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[temp2:temp2 + 0x20] = temp3 & temp1 & storage[0x03];\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = temp3 & storage[0x04] & temp1;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp2 + 0x40) - temp4], [0x343765429aea5a34b3ff6a3785a98a5abb2597aca87bfbb58632c173d585373a]);\n        var temp5 = storage[0x04];\n        var temp6 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[0x03] = (temp5 & 0x02 ** 0xa0 - 0x01) | (temp6 & storage[0x03]);\n        storage[0x04] = temp6 & temp5;\n    }\n    \n    function totalTokens() returns (var r0) { return storage[0x02]; }\n    \n    function burnFormula() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function participantBalance(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0f;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function percentageETHReserve() returns (var r0) { return 0x0f; }\n    \n    function owner() returns (var r0) { return storage[0x03] & 0x02 ** 0xa0 - 0x01; }\n    \n    function removeService(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg0 & temp1;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = 0x0b;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var temp4 = arg1;\n        memory[0x00:0x20] = temp4 & temp1;\n        memory[0x20:0x40] = temp3;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = storage[temp5] & ~0xff;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp4 & 0x02 ** 0xa0 - 0x01;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0x79485d41c145ee4d7ebf84793ab927ebb3f929101dba7db48702ef527d02cf83, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function multisigWallet() returns (var r0) { return storage[0x06] & 0x02 ** 0xa0 - 0x01; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x04;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x574f4c4b00000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function estLiquidationCap() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(storage[0x08] / 0x02 ** 0xa8 & 0xff)) { return 0x00; }\n    \n        var var2 = 0x22ea;\n        var var3 = 0x1ab1;\n        var var4 = storage[0x02];\n        var var5 = storage[0x14];\n        var3 = func_2CB4(var4, var5);\n        var2 = func_1AB1(var3);\n        var1 = var2;\n    \n        if (var1 >= 0x056bc75e2d63100000) {\n            var0 = var1;\n        \n        label_2316:\n            return var0;\n        } else {\n            var1 = 0x056bc75e2d63100000;\n            var0 = var1;\n            goto label_2316;\n        }\n    }\n    \n    function burnBasisPoints() returns (var r0) { return storage[0x0a]; }\n    \n    function reserveBalance() returns (var r0) { return storage[0x05]; }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = var0;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])] >= arg1;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] >= arg1) {\n            if (!var1) {\n            label_240C:\n                var0 = 0x00;\n            \n            label_1294:\n                return var0;\n            } else {\n            label_2356:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x00;\n                var var2 = storage[keccak256(memory[0x00:0x40])];\n                var1 = 0x2378;\n                var var3 = arg1;\n                var1 = func_2C9D(var2, var3);\n                var temp0 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp0 & msg.sender;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                memory[0x00:0x20] = arg0 & temp0;\n                var1 = 0x23a7;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var3 = arg1;\n                var1 = func_2CE3(var2, var3);\n                var temp1 = arg0;\n                memory[0x00:0x20] = temp1 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                var temp3 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp2;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = arg1;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [memory[0x00:0x20], msg.sender, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n                var0 = 0x01;\n                goto label_1294;\n            }\n        } else if (arg1 <= 0x00) { goto label_240C; }\n        else { goto label_2356; }\n    }\n    \n    function setMaxPerExchange(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = arg0 >= 0x0a;\n    \n        if (!var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_2453:\n            storage[0x14] = arg0;\n            return 0x01;\n        } else if (arg0 <= 0x64) { goto label_2453; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function wolkGenesis(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = storage[0x02] < 0x01;\n    \n        if (var1) {\n            var1 = block.number <= arg1;\n        \n            if (!var1) { goto label_249A; }\n            else { goto label_2496; }\n        } else if (!var1) {\n        label_249A:\n        \n            if (!var1) {\n            label_24A5:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n            label_24B0:\n                storage[0x11] = arg0;\n                storage[0x12] = arg1;\n                storage[0x13] = arg2;\n                var temp1 = 0x02 ** 0xa0 - 0x01;\n                var temp2 = ~0xffffffffffffffffffffffffffffffffffffffff;\n                storage[0x06] = (temp2 & storage[0x06]) | (arg3 & temp1);\n                storage[0x08] = (temp2 & storage[0x08]) | (temp1 & arg4);\n                memory[0x00:0x20] = msg.sender & temp1;\n                memory[0x20:0x40] = 0x07;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n                return 0x01;\n            } else {\n            label_24A1:\n            \n                if (arg1 > arg0) { goto label_24B0; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_2496:\n            var1 = arg2 > arg1;\n        \n            if (!var1) { goto label_24A5; }\n            else { goto label_24A1; }\n        }\n    }\n    \n    function settlementIsRunning() returns (var r0) { return storage[0x09] / 0x02 ** 0xa0 & 0xff; }\n    \n    function tokenGenerationMax() returns (var r0) { return 0x7c13bc4b2c133c56000000; }\n    \n    function start_block() returns (var r0) { return storage[0x12]; }\n    \n    function openSaleCompleted() returns (var r0) { return storage[0x08] / 0x02 ** 0xa8 & 0xff; }\n    \n    function updateSettlementStatus(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        storage[0x09] = !!arg0 * 0x02 ** 0xa0 | (storage[0x09] & ~0xff0000000000000000000000000000000000000000);\n        return 0x01;\n    }\n    \n    function presale_start_block() returns (var r0) { return storage[0x11]; }\n    \n    function newOwner() returns (var r0) { return storage[0x04] & 0x02 ** 0xa0 - 0x01; }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x01;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function allSaleCompleted() returns (var r0) { return storage[0x08] / 0x02 ** 0xa0 & 0xff; }\n    \n    function removeParticipant(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var1 = 0x00;\n    \n        if (var1 >= memory[arg0:arg0 + 0x20]) {\n        label_26A5:\n            return 0x01;\n        } else {\n        label_2623:\n            var var2 = 0x00;\n            var var3 = 0x10;\n            var var4 = 0x00;\n            var var5 = arg0;\n            var var6 = var1;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var temp1 = var4;\n            memory[temp1:temp1 + 0x20] = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = var3;\n            var temp2 = keccak256(memory[0x00:0x00 + temp1 + 0x40]);\n            var temp3 = !!var2 | (storage[temp2] & ~0xff);\n            var2 = 0x00;\n            storage[temp2] = temp3;\n            var3 = 0x0f;\n            var4 = var2;\n            var5 = arg0;\n            var6 = var1;\n        \n            if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n        \n            var temp4 = var4;\n            memory[temp4:temp4 + 0x20] = memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var3;\n            storage[keccak256(memory[0x00:0x00 + temp4 + 0x40])] = var2;\n            var1 = var1 + 0x01;\n        \n            if (var1 >= memory[arg0:arg0 + 0x20]) { goto label_26A5; }\n            else { goto label_2623; }\n        }\n    }\n    \n    function setServiceFee(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var1 = arg1 <= 0x00;\n    \n        if (var1) {\n            if (!var1) {\n            label_2715:\n                var temp1 = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp1;\n                memory[0x20:0x40] = 0x0c;\n                var temp2 = arg1;\n                storage[keccak256(memory[0x00:0x40])] = temp2;\n                memory[0x20:0x40] = 0x07;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = temp2;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xe273f117e317b5f79c25ba280145c5a051fac58dc8482e8b2a14d04023521dcc, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                var0 = 0x01;\n            \n            label_1294:\n                return var0;\n            } else {\n            label_26E3:\n                var0 = 0x00;\n                memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x07;\n                var temp6 = keccak256(memory[var0:var0 + 0x40]);\n                storage[temp6] = storage[temp6] & ~0xff;\n                memory[0x20:0x40] = 0x0c;\n                storage[keccak256(memory[var0:var0 + 0x40])] = var0;\n                goto label_1294;\n            }\n        } else if (arg1 <= 0x0fa0) { goto label_2715; }\n        else { goto label_26E3; }\n    }\n    \n    function wolkSale() returns (var r0) { return storage[0x08] & 0x02 ** 0xa0 - 0x01; }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp1 == temp1 & arg0) { revert(memory[0x00:0x00]); }\n    \n        storage[0x04] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x04] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function setBurnFormula(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x03] & temp0 != temp0 & msg.sender) { assert(); }\n    \n        var var2 = 0x2828;\n        var var3 = arg0;\n        var var4 = 0x0de0b6b3a7640000;\n        var2 = func_2DE0(var3, var4);\n        var1 = var2;\n    \n        if (var1 <= 0x2d79883d2000) { revert(memory[0x00:0x00]); }\n    \n        storage[0x09] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x09] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function setFeeFormula(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (!!(storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) != 0x01) { assert(); }\n    \n        var var2 = 0x28ab;\n        var var3 = arg0;\n        var var4 = 0x0de0b6b3a7640000;\n        var2 = func_2E77(var3, var4);\n        var1 = var2;\n    \n        if (var1 <= 0x2d79883d2000) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = 0x0d;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        storage[temp1] = (arg0 & temp0) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        return 0x01;\n    }\n    \n    function tokenGenerationEvent(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x10;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = storage[keccak256(memory[var2:var2 + 0x40])] & 0xff;\n    \n        if (var3) {\n            var3 = !(storage[0x08] / 0x02 ** 0xa8 & 0xff);\n        \n            if (!var3) { goto label_2953; }\n            else { goto label_2944; }\n        } else if (!var3) {\n        label_2953:\n        \n            if (!var3) {\n            label_2961:\n            \n                if (!var3) {\n                label_296D:\n                \n                    if (!var3) { revert(memory[0x00:0x00]); }\n                \n                label_2978:\n                    var0 = 0x03e8;\n                \n                    if (storage[0x02] < 0x295be96e64066972000000) {\n                        var0 = 0x0499;\n                        goto label_2A43;\n                    } else if (storage[0x02] < 0x31a17e847807b1bc000000) {\n                        var0 = 0x0477;\n                        goto label_2A43;\n                    } else if (storage[0x02] < 0x39e7139a8c08fa06000000) {\n                        var0 = 0x0457;\n                        goto label_2A43;\n                    } else if (storage[0x02] < 0x422ca8b0a00a4250000000) {\n                        var0 = 0x0439;\n                        goto label_2A43;\n                    } else if (storage[0x02] < 0x4a723dc6b40b8a9a000000) {\n                        var0 = 0x041d;\n                        goto label_2A43;\n                    } else if (storage[0x02] >= 0x52b7d2dcc80cd2e4000000) {\n                        var0 = 0x03e8;\n                    \n                    label_2A43:\n                        var3 = block.number < storage[0x12];\n                    \n                        if (!var3) {\n                            if (!var3) {\n                            label_2AC7:\n                            \n                                if (block.number < storage[0x12]) { revert(memory[0x00:0x00]); }\n                            \n                            label_2AD6:\n                                var3 = 0x2ae1;\n                                var var4 = msg.value;\n                                var var5 = var0;\n                                var3 = func_2CB4(var4, var5);\n                                var temp0 = var3;\n                                var1 = temp0;\n                                var3 = 0x2aef;\n                                var4 = storage[0x02];\n                                var5 = var1;\n                                var3 = func_2CE3(var4, var5);\n                                var2 = var3;\n                            \n                                if (var2 > 0x7c13bc4b2c133c56000000) { revert(memory[0x00:0x00]); }\n                            \n                                storage[0x02] = var2;\n                                var temp1 = 0x02 ** 0xa0 - 0x01;\n                                var temp2 = arg0;\n                                var temp3 = memory[0x00:0x20];\n                                memory[0x00:0x20] = code[0x2f1e:0x2f3e];\n                                var temp4 = memory[0x00:0x20];\n                                memory[0x00:0x20] = temp3;\n                                var temp5 = memory[0x40:0x60];\n                                memory[temp5:temp5 + 0x20] = var1;\n                                var temp6 = memory[0x40:0x60];\n                                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [memory[0x00:0x20], address(this), stack[-4] & 0x02 ** 0xa0 - 0x01]);\n                                memory[0x00:0x20] = temp2 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x00;\n                                var4 = storage[keccak256(memory[0x00:0x40])];\n                                var3 = 0x2b60;\n                                var5 = var1;\n                                var3 = func_2CE3(var4, var5);\n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x00;\n                                storage[keccak256(memory[0x00:0x40])] = var3;\n                                memory[0x20:0x40] = 0x0e;\n                                var4 = storage[keccak256(memory[0x00:0x40])];\n                                var3 = 0x2b8d;\n                                var5 = msg.value;\n                                var3 = func_2CE3(var4, var5);\n                                var temp7 = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x00:0x20] = temp7;\n                                memory[0x20:0x40] = 0x0e;\n                                storage[keccak256(memory[0x00:0x40])] = var3;\n                                var temp8 = memory[0x40:0x60];\n                                memory[temp8:temp8 + 0x20] = var1;\n                                var temp9 = memory[0x40:0x60];\n                                log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x7ff6ea1c893a974b2f363e8f8e474a1b52958080d1fffe0d085c286de30035d2, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n                                return;\n                            } else {\n                            label_2A61:\n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x0f;\n                            \n                                if (storage[keccak256(memory[0x00:0x40])] < msg.value) { revert(memory[0x00:0x00]); }\n                            \n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x0f;\n                                var3 = 0x2aa9;\n                                var4 = storage[keccak256(memory[0x00:0x40])];\n                                var5 = msg.value;\n                                var3 = func_2C9D(var4, var5);\n                                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                                memory[0x20:0x40] = 0x0f;\n                                storage[keccak256(memory[0x00:0x40])] = var3;\n                                goto label_2AD6;\n                            }\n                        } else if (block.number < storage[0x11]) { goto label_2AC7; }\n                        else { goto label_2A61; }\n                    } else {\n                        var0 = 0x0402;\n                        goto label_2A43;\n                    }\n                } else {\n                label_2968:\n                \n                    if (msg.value > 0x00) { goto label_2978; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_295A:\n                var3 = block.number <= storage[0x13];\n            \n                if (!var3) { goto label_296D; }\n                else { goto label_2968; }\n            }\n        } else {\n        label_2944:\n            var3 = !(storage[0x08] / 0x02 ** 0xa0 & 0xff);\n        \n            if (!var3) { goto label_2961; }\n            else { goto label_295A; }\n        }\n    }\n    \n    function checkFeeSchedule(var arg0) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x0d;\n        return storage[keccak256(memory[0x00:0x40])] & temp0;\n    }\n    \n    function func_2C07(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1 & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0xf7a4c45c;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = storage[0x02];\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = storage[0x05];\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0xff & 0x0f;\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = arg0;\n        var var4 = temp0 + 0x84;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (temp1) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2C9D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_2CB4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_2CD0:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_2CD0;\n        }\n    }\n    \n    function func_2CE3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n        var var2 = var1 >= temp0;\n    \n        if (var1 >= temp0) {\n            if (!var2) { assert(); }\n        \n        label_2CD8:\n            return var1;\n        } else if (var1 >= arg1) { goto label_2CD8; }\n        else { assert(); }\n    }\n    \n    function func_2D0B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1 & 0x02 ** 0xa0 - 0x01;\n        var var3 = 0x949dfa63;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = storage[0x02];\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = storage[0x05];\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0xff & 0x0f;\n        memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = arg0;\n        var var4 = temp0 + 0x84;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n    \n        if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n    \n        if (temp1) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_2DE0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) {\n            var0 = 0x00;\n        \n        label_11EB:\n            return var0;\n        } else {\n            var var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var3 = 0x926f949e;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = arg1;\n            var var4 = temp0 + 0x24;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = 0x00;\n            var var10 = var2;\n        \n            if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n        \n            if (!temp1) { revert(memory[0x00:0x00]); }\n        \n            var1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            var0 = var1;\n            goto label_11EB;\n        }\n    }\n    \n    function func_2E77(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x0d;\n        var var0 = 0x00;\n        var var1 = temp0 & storage[keccak256(memory[var0:var0 + 0x40])];\n        var var2 = var0;\n    \n        if (!var1) { return 0x00; }\n    \n        var var3 = var1 & 0x02 ** 0xa0 - 0x01;\n        var var4 = 0x3e81d56e;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = arg1;\n        var var5 = temp1 + 0x24;\n        var var6 = 0x20;\n        var var7 = memory[0x40:0x60];\n        var var8 = var5 - var7;\n        var var9 = var7;\n        var var10 = 0x00;\n        var var11 = var3;\n    \n        if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n    \n        if (temp2) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 45.72983956336975,
	"usage": {
		"completion_tokens": 450,
		"prompt_tokens": 30022,
		"total_tokens": 30472
	}
}