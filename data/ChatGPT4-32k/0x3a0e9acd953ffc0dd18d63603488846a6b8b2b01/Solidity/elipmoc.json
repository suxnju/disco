{
	"address": "0x3a0e9acd953ffc0dd18d63603488846a6b8b2b01",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is Solidity contract code rewritten from the provided decompiled code:\n\n```solidity\npragma solidity ^0.6.0;\n\ncontract MyContract {\n    uint256 private _minDeposit;\n    mapping (address => uint256) private _fallback;\n    address private _confirmOwner;\n    address private _changeOwner;\n    address private _initTokenBank;\n\n    function changeOwner(address newOwner) public { \n        require(_changeOwner == msg.sender, \"Only the current owner can change the owner\");\n        _confirmOwner = newOwner;\n    }\n\n    function confirmOwner() public { \n        require(msg.sender == _confirmOwner, \"Only the confirmed owner can confirm the ownership\");\n        _changeOwner = _confirmOwner;\n    }\n\n    function Bal() public view returns(uint256) { \n        return (address(this)).balance;\n    }\n\n    function withdrawToken(address tokenContract, uint256 amount, address to) public { \n        require(_changeOwner == msg.sender, \"Only the owner can withdraw tokens\");\n        IERC20(tokenContract).transfer(to, amount);\n    }\n\n    function deposit() public payable { \n        require(msg.value > _minDeposit, \"Deposit amount is less than minimum required deposit\");\n        _fallback[msg.sender] += msg.value;\n    }\n\n    function holders(address addr) public view returns(uint256) { \n        return _fallback[addr];\n    }\n\n    function withdrawToHolder(address addr, uint256 amount) public { \n        require(_changeOwner == msg.sender, \"Only the owner can withdraw to holder\");\n        require(_fallback[addr] >= amount, \"Withdrawal amount is more than the available amount for this holder\");\n        _fallback[addr] -= amount;\n    }\n\n    fallback() external payable { \n        require(msg.value > _minDeposit, \"Deposit amount is less than minimum required deposit\");\n        _fallback[msg.sender] += msg.value;\n    }\n\n    function minDeposit() public view returns(uint256) { \n        return _minDeposit;\n    }\n\n    function initTokenBank() public { \n        _initTokenBank = msg.sender;\n        _minDeposit = 1 ether;\n    }\n\n    function withdrawTokenToHolder(address holder, address tokenContract, uint256 amount) public { \n        require(_changeOwner == msg.sender, \"Only the owner can withdraw tokens to holder\");\n        require(_fallback[holder] > 0, \"Holder does not have any tokens\");\n        _fallback[holder] = 0;\n        IERC20(tokenContract).transfer(holder, amount);\n    }\n}\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n```\nThis contract uses the IERC20 interface to interact with ERC20 tokens. The `withdrawToken` and `withdrawTokenToHolder` functions use this interface to transfer tokens. \n\nPlease note that this contract uses Solidity version 0.6.0. You may want to adjust this value based on your needs.",
				"role": "assistant"
			}
		}
	],
	"created": 1701458520,
	"id": "chatcmpl-8R3NIdezjV9UIuaJsb7lMvNacL9hZ",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.16 14:39 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _minDeposit; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _fallback; // STORAGE[0x4]\naddress _confirmOwner; // STORAGE[0x0] bytes 0 to 19\naddress _changeOwner; // STORAGE[0x1] bytes 0 to 19\naddress _initTokenBank; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction changeOwner(address varg0) public nonPayable { \n    if (_changeOwner == msg.sender) {\n        _confirmOwner = varg0;\n    }\n}\n\nfunction confirmOwner() public nonPayable { \n    if (msg.sender == _confirmOwner) {\n        _changeOwner = _confirmOwner;\n    }\n}\n\nfunction Bal() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction WithdrawToken(address varg0, uint256 varg1, address varg2) public nonPayable { \n    if (_changeOwner == msg.sender) {\n        v0 = varg0.transfer(varg2, varg1).gas(msg.gas - 25710);\n    }\n}\n\nfunction Deposit() public payable { \n    if (msg.value > _minDeposit) {\n        _fallback[msg.sender] = _fallback[msg.sender] + msg.value;\n    }\n}\n\nfunction Holders(address varg0) public nonPayable { \n    return _fallback[varg0];\n}\n\nfunction WithdrawToHolder(address varg0, uint256 varg1) public payable { \n    if (_changeOwner == msg.sender) {\n        if (_fallback[msg.sender] > 0) {\n            if (_fallback[varg0] >= varg1) {\n                _fallback[varg0] = _fallback[varg0] - varg1;\n            }\n        }\n    }\n}\n\nfunction fallback() public payable { \n    if (msg.value > _minDeposit) {\n        _fallback[msg.sender] = _fallback[msg.sender] + msg.value;\n    }\n}\n\nfunction MinDeposit() public nonPayable { \n    return _minDeposit;\n}\n\nfunction initTokenBank() public nonPayable { \n    _initTokenBank = msg.sender;\n    _minDeposit = 0xde0b6b3a7640000;\n}\n\nfunction WitdrawTokenToHolder(address varg0, address varg1, uint256 varg2) public nonPayable { \n    if (_changeOwner == msg.sender) {\n        if (_fallback[varg0] > 0) {\n            _fallback[varg0] = 0;\n            if (_changeOwner == msg.sender) {\n                v0 = varg1.transfer(varg0, varg2).gas(msg.gas - 25710);\n            }\n        }\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x11bcd830 == function_selector) {\n            MinDeposit();\n        } else if (0x290b1e5f == function_selector) {\n            initTokenBank();\n        } else if (0x2e2a51bd == function_selector) {\n            WitdrawTokenToHolder(address,address,uint256);\n        } else if (0xa6f9dae1 == function_selector) {\n            changeOwner(address);\n        } else if (0xbd9b6d86 == function_selector) {\n            confirmOwner();\n        } else if (0xbea69bb9 == function_selector) {\n            Bal();\n        } else if (0xc7de2d13 == function_selector) {\n            WithdrawToken(address,uint256,address);\n        } else if (0xed21248c == function_selector) {\n            Deposit();\n        } else if (0xeec0ddd7 == function_selector) {\n            Holders(address);\n        } else if (0xf8ff612e == function_selector) {\n            WithdrawToHolder(address,uint256);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 14:39 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _minDeposit; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _fallback; // STORAGE[0x4]\naddress _confirmOwner; // STORAGE[0x0] bytes 0 to 19\naddress _changeOwner; // STORAGE[0x1] bytes 0 to 19\naddress _initTokenBank; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction changeOwner(address varg0) public nonPayable { \n    if (_changeOwner == msg.sender) {\n        _confirmOwner = varg0;\n    }\n}\n\nfunction confirmOwner() public nonPayable { \n    if (msg.sender == _confirmOwner) {\n        _changeOwner = _confirmOwner;\n    }\n}\n\nfunction Bal() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction WithdrawToken(address varg0, uint256 varg1, address varg2) public nonPayable { \n    if (_changeOwner == msg.sender) {\n        v0 = varg0.transfer(varg2, varg1).gas(msg.gas - 25710);\n    }\n}\n\nfunction Deposit() public payable { \n    if (msg.value > _minDeposit) {\n        _fallback[msg.sender] = _fallback[msg.sender] + msg.value;\n    }\n}\n\nfunction Holders(address varg0) public nonPayable { \n    return _fallback[varg0];\n}\n\nfunction WithdrawToHolder(address varg0, uint256 varg1) public payable { \n    if (_changeOwner == msg.sender) {\n        if (_fallback[msg.sender] > 0) {\n            if (_fallback[varg0] >= varg1) {\n                _fallback[varg0] = _fallback[varg0] - varg1;\n            }\n        }\n    }\n}\n\nfunction fallback() public payable { \n    if (msg.value > _minDeposit) {\n        _fallback[msg.sender] = _fallback[msg.sender] + msg.value;\n    }\n}\n\nfunction MinDeposit() public nonPayable { \n    return _minDeposit;\n}\n\nfunction initTokenBank() public nonPayable { \n    _initTokenBank = msg.sender;\n    _minDeposit = 0xde0b6b3a7640000;\n}\n\nfunction WitdrawTokenToHolder(address varg0, address varg1, uint256 varg2) public nonPayable { \n    if (_changeOwner == msg.sender) {\n        if (_fallback[varg0] > 0) {\n            _fallback[varg0] = 0;\n            if (_changeOwner == msg.sender) {\n                v0 = varg1.transfer(varg0, varg2).gas(msg.gas - 25710);\n            }\n        }\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x11bcd830 == function_selector) {\n            MinDeposit();\n        } else if (0x290b1e5f == function_selector) {\n            initTokenBank();\n        } else if (0x2e2a51bd == function_selector) {\n            WitdrawTokenToHolder(address,address,uint256);\n        } else if (0xa6f9dae1 == function_selector) {\n            changeOwner(address);\n        } else if (0xbd9b6d86 == function_selector) {\n            confirmOwner();\n        } else if (0xbea69bb9 == function_selector) {\n            Bal();\n        } else if (0xc7de2d13 == function_selector) {\n            WithdrawToken(address,uint256,address);\n        } else if (0xed21248c == function_selector) {\n            Deposit();\n        } else if (0xeec0ddd7 == function_selector) {\n            Holders(address);\n        } else if (0xf8ff612e == function_selector) {\n            WithdrawToHolder(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.16 14:39 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _minDeposit; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _fallback; // STORAGE[0x4]\naddress _confirmOwner; // STORAGE[0x0] bytes 0 to 19\naddress _changeOwner; // STORAGE[0x1] bytes 0 to 19\naddress _initTokenBank; // STORAGE[0x2] bytes 0 to 19\n\n\nfunction changeOwner(address varg0) public nonPayable { \n    if (_changeOwner == msg.sender) {\n        _confirmOwner = varg0;\n    }\n}\n\nfunction confirmOwner() public nonPayable { \n    if (msg.sender == _confirmOwner) {\n        _changeOwner = _confirmOwner;\n    }\n}\n\nfunction Bal() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction WithdrawToken(address varg0, uint256 varg1, address varg2) public nonPayable { \n    if (_changeOwner == msg.sender) {\n        v0 = varg0.transfer(varg2, varg1).gas(msg.gas - 25710);\n    }\n}\n\nfunction Deposit() public payable { \n    if (msg.value > _minDeposit) {\n        _fallback[msg.sender] = _fallback[msg.sender] + msg.value;\n    }\n}\n\nfunction Holders(address varg0) public nonPayable { \n    return _fallback[varg0];\n}\n\nfunction WithdrawToHolder(address varg0, uint256 varg1) public payable { \n    if (_changeOwner == msg.sender) {\n        if (_fallback[msg.sender] > 0) {\n            if (_fallback[varg0] >= varg1) {\n                _fallback[varg0] = _fallback[varg0] - varg1;\n            }\n        }\n    }\n}\n\nfunction fallback() public payable { \n    if (msg.value > _minDeposit) {\n        _fallback[msg.sender] = _fallback[msg.sender] + msg.value;\n    }\n}\n\nfunction MinDeposit() public nonPayable { \n    return _minDeposit;\n}\n\nfunction initTokenBank() public nonPayable { \n    _initTokenBank = msg.sender;\n    _minDeposit = 0xde0b6b3a7640000;\n}\n\nfunction WitdrawTokenToHolder(address varg0, address varg1, uint256 varg2) public nonPayable { \n    if (_changeOwner == msg.sender) {\n        if (_fallback[varg0] > 0) {\n            _fallback[varg0] = 0;\n            if (_changeOwner == msg.sender) {\n                v0 = varg1.transfer(varg0, varg2).gas(msg.gas - 25710);\n            }\n        }\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x11bcd830 == function_selector) {\n            MinDeposit();\n        } else if (0x290b1e5f == function_selector) {\n            initTokenBank();\n        } else if (0x2e2a51bd == function_selector) {\n            WitdrawTokenToHolder(address,address,uint256);\n        } else if (0xa6f9dae1 == function_selector) {\n            changeOwner(address);\n        } else if (0xbd9b6d86 == function_selector) {\n            confirmOwner();\n        } else if (0xbea69bb9 == function_selector) {\n            Bal();\n        } else if (0xc7de2d13 == function_selector) {\n            WithdrawToken(address,uint256,address);\n        } else if (0xed21248c == function_selector) {\n            Deposit();\n        } else if (0xeec0ddd7 == function_selector) {\n            Holders(address);\n        } else if (0xf8ff612e == function_selector) {\n            WithdrawToHolder(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 40.455445289611816,
	"usage": {
		"completion_tokens": 610,
		"prompt_tokens": 955,
		"total_tokens": 1565
	}
}