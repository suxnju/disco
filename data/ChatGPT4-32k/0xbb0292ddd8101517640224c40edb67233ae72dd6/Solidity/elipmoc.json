{
	"address": "0xbb0292ddd8101517640224c40edb67233ae72dd6",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity code version of the decompiled EVM Bytecode:\n\n```\npragma solidity ^0.6.0;\n\ncontract Crowdsale {\n    uint256 public _fundingGoal;\n    uint256 public _hardCap;\n    uint256 public _amountRaisedPreSale;\n    uint256 public _amountRaisedICO;\n    uint256 public _contractDeployedTime;\n    uint256 private stor_6;\n    uint256 private stor_7;\n    uint256 private stor_8;\n    uint256 public _presaleEndTime;\n    uint256 public _deadline;\n    uint256 public _price;\n    mapping (address => uint256) public _balanceOf;\n    uint256 public _stage;\n    uint256 public _against;\n    uint256 public _lastVoteTime;\n    uint256 private stor_13;\n    address public _owner;\n    uint8 private stor_b_0_0;\n    uint8 public _icoSuccess;\n    uint8 public _crowdsaleClosed;\n    address public _token;\n    address private stor_e_2_21;\n    address private stor_f_0_19;\n\n    event FundTransfer(address, uint256, bool);\n    event GoalReached(uint256);\n    event OwnershipTransferred(address, address);\n\n    fallback() external payable { \n        // Implementation of the fallback function\n    }\n\n    function checkGoalReached() public { \n        // Implementation of the checkGoalReached function\n    }\n\n    function closePresale() public { \n        // Implementation of the closePresale function\n    }\n\n    function voteRelease() public { \n        // Implementation of the voteRelease function\n    }\n\n    function voteAgainst() public { \n        // Implementation of the voteAgainst function\n    }\n\n    function countVotes() public { \n        // Implementation of the countVotes function\n    }\n\n    function safeWithdrawal() public { \n        // Implementation of the safeWithdrawal function\n    }\n\n    function transferOwnership(address newOwner) public { \n        require(msg.sender == _owner);\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function _SafeMul(uint256 a, uint256 b) private pure returns (uint256) { \n        if (b == 0) {\n            return 0;\n        }\n        uint256 c = a * b;\n        assert(c / b == a);\n        return c;\n    }\n}\n```\n\nNote: The implementation of each function depends on the original contract, this is just a skeleton.",
				"role": "assistant"
			}
		}
	],
	"created": 1701459829,
	"id": "chatcmpl-8R3iPHNzzJ8MxWEw5tbT5aOARpGbC",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 23:53 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _hardCap; // STORAGE[0x2]\nuint256 _amountRaisedPreSale; // STORAGE[0x3]\nuint256 _amountRaisedICO; // STORAGE[0x4]\nuint256 _contractDeployedTime; // STORAGE[0x5]\nuint256 stor_6; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 _presaleEndTime; // STORAGE[0x9]\nuint256 _deadline; // STORAGE[0xa]\nuint256 _price; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xd]\nuint256 _stage; // STORAGE[0x10]\nuint256 _against; // STORAGE[0x11]\nuint256 _lastVoteTime; // STORAGE[0x12]\nuint256 stor_13; // STORAGE[0x13]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_b_0_0; // STORAGE[0xb] bytes 0 to 0\nuint8 _icoSuccess; // STORAGE[0xe] bytes 0 to 0\nuint8 _crowdsaleClosed; // STORAGE[0xe] bytes 1 to 1\naddress _token; // STORAGE[0xc] bytes 0 to 19\naddress stor_e_2_21; // STORAGE[0xe] bytes 2 to 21\naddress stor_f_0_19; // STORAGE[0xf] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(uint256);\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v0, v1 = _token.lockOf(msg.sender).gas(msg.gas - 710);\n    require(v0);\n    v2 = v3 = !v1;\n    if (v3) {\n        v2 = v4 = !_crowdsaleClosed;\n    }\n    if (v2) {\n        v2 = v5 = _stage < 2;\n    }\n    if (v2) {\n        v2 = v6 = msg.value >= 0x16345785d8a0000;\n    }\n    require(v2);\n    v7 = v8 = _stage == 1;\n    if (v8) {\n        assert(_presaleEndTime + stor_7 >= _presaleEndTime);\n        v7 = v9 = block.timestamp < _presaleEndTime + stor_7;\n        if (block.timestamp >= _presaleEndTime + stor_7) {\n            v7 = v10 = _amountRaisedPreSale + _amountRaisedICO + msg.value > _hardCap;\n        }\n    }\n    require(!v7);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    if (_stage != 0) {\n        _amountRaisedICO = _amountRaisedICO + msg.value;\n        assert(stor_b_0_0);\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v11, v12 = _token.mint(msg.sender, msg.value / _price).gas(msg.gas - 710);\n        require(v11);\n    } else {\n        _amountRaisedPreSale = _amountRaisedPreSale + msg.value;\n        v13 = _SafeMul(2, msg.value);\n        assert(stor_b_0_0);\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v14, v15 = _token.mint(msg.sender, v13 / _price).gas(msg.gas - 710);\n        require(v14);\n    }\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\nfunction 0x1ca7(uint256 varg0) private { \n    v0 = _SafeMul(67, varg0);\n    assert(100);\n    v1 = stor_e_2_21.call().value(v0 / 100).gas(!(v0 / 100) * 2300);\n    require(v1);\n    v2 = _SafeMul(67, varg0);\n    assert(100);\n    assert(v2 / 100 <= varg0);\n    v3 = varg0 - v2 / 100;\n    v4 = stor_f_0_19.call().value(v3).gas(!v3 * 2300);\n    require(v4);\n    return ;\n}\n\nfunction checkGoalReached() public nonPayable { \n    v0 = v1 = 0;\n    v2 = v3 = _stage > 0;\n    if (v3) {\n        v2 = block.timestamp >= _deadline;\n    }\n    if (v2) {\n        v4 = v5 = _stage == 1;\n        if (v5) {\n            v4 = !_crowdsaleClosed;\n        }\n        require(v4);\n        if (_amountRaisedPreSale + _amountRaisedICO >= _fundingGoal) {\n            v6 = v7 = _amountRaisedICO / 3;\n            if (!_icoSuccess) {\n                v6 = v8 = v7 + _amountRaisedPreSale / 3;\n            }\n            v9 = v10 = 400;\n            v11 = v12 = 2825;\n            v13 = v14 = 67;\n            MEM[32 + MEM[64]] = 0;\n            require(_token.code.size);\n            v15, v16 = _token.totalSupply().gas(msg.gas - 710);\n            require(v15);\n            while (1) {\n                v17 = v18 = v16 == 0;\n                if (v18) {\n                    goto 0x9a60x9b8B0x5a7;\n                }\n                assert(v16);\n                v17 = v19 = v16 * v13 / v16 == v13;\n                if (v17) {\n                    break;\n                }\n                assert(v17);\n                assert(v9);\n                0x1ca7(v6);\n                _icoSuccess = 1;\n                MEM[32 + MEM[64]] = 0;\n                require(_token.code.size);\n                v20, v21 = _token.mint(stor_e_2_21, v0).gas(msg.gas - 710);\n                require(v20);\n                MEM[32 + MEM[64]] = 0;\n                require(_token.code.size);\n                v22, v23 = _token.mint(stor_f_0_19, v16 * v13 / v9).gas(msg.gas - 710);\n                require(v22);\n                _stage = 2;\n                _lastVoteTime = block.timestamp;\n                emit GoalReached(_amountRaisedPreSale + _amountRaisedICO);\n                goto {'0xbd4B0x5a7', '0xb09B0x5a7'};\n                assert(v9);\n                v0 = v24 = v16 * v13 / v9;\n                v9 = v25 = 400;\n                v11 = v26 = 3028;\n                v13 = v27 = 33;\n                MEM[32 + MEM[64]] = 0;\n                require(_token.code.size);\n                v28 = _token.totalSupply().gas(msg.gas - 710);\n                require(v28);\n                v16 = v29 = MEM[MEM[64]];\n            }\n        }\n        _crowdsaleClosed = 1;\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v30, v31 = _token.finishMinting().gas(msg.gas - 710);\n        require(v30);\n    }\n}\n\nfunction presaleEndTime() public nonPayable { \n    return _presaleEndTime;\n}\n\nfunction amountRaisedPreSale() public nonPayable { \n    return _amountRaisedPreSale;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction amountRaisedICO() public nonPayable { \n    return _amountRaisedICO;\n}\n\nfunction voteRelease() public nonPayable { \n    v0 = v1 = _stage == 2;\n    if (_stage != 2) {\n        v0 = v2 = _stage == 3;\n    }\n    if (!v0) {\n        v0 = v3 = _stage == 4;\n    }\n    if (v0) {\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v4, v0 = _token.lockOf(msg.sender).gas(msg.gas - 710);\n        require(v4);\n    }\n    require(v0);\n    require(_token.code.size);\n    v5 = _token.setLock(msg.sender, 0).gas(msg.gas - 710);\n    require(v5);\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v6, v7 = _token.balanceOf(msg.sender).gas(msg.gas - 710);\n    require(v6);\n    assert(v7 <= _against);\n    _against = _against - v7;\n}\n\nfunction closePresale() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        assert(_contractDeployedTime <= block.timestamp);\n        v0 = v2 = block.timestamp - _contractDeployedTime > stor_6;\n    }\n    if (v0) {\n        v0 = _stage == 0;\n    }\n    require(v0);\n    _stage = 1;\n    _presaleEndTime = block.timestamp;\n    assert(stor_8 + stor_7 >= stor_8);\n    assert(block.timestamp + (stor_8 + stor_7) >= block.timestamp);\n    _deadline = block.timestamp + (stor_8 + stor_7);\n    v3 = _SafeMul(5, _amountRaisedPreSale);\n    if (v3 <= 0x21e19e0c9bab2400000) {\n        _hardCap = 0x21e19e0c9bab2400000;\n    } else {\n        v4 = _SafeMul(5, _amountRaisedPreSale);\n        _hardCap = v4;\n    }\n    if (_amountRaisedPreSale >= _fundingGoal) {\n        0x1ca7(_amountRaisedPreSale / 3);\n        _icoSuccess = 1;\n        emit GoalReached(_amountRaisedPreSale);\n    }\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction icoSuccess() public nonPayable { \n    return _icoSuccess;\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction voteAgainst() public nonPayable { \n    v0 = v1 = _stage == 2;\n    if (_stage != 2) {\n        v0 = v2 = _stage == 3;\n    }\n    if (v0) {\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v3, v4 = _token.lockOf(msg.sender).gas(msg.gas - 710);\n        require(v3);\n        v0 = v5 = !v4;\n    }\n    require(v0);\n    require(_token.code.size);\n    v6 = _token.setLock(msg.sender, 1).gas(msg.gas - 710);\n    require(v6);\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v7, v8 = _token.balanceOf(msg.sender).gas(msg.gas - 710);\n    require(v7);\n    assert(_against + v8 >= _against);\n    _against = _against + v8;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction countVotes() public nonPayable { \n    v0 = v1 = _icoSuccess;\n    if (v1) {\n        v0 = v2 = _stage == 2;\n        if (_stage != 2) {\n            v0 = _stage == 3;\n        }\n    }\n    if (v0) {\n        assert(_lastVoteTime <= block.timestamp);\n        v0 = v3 = block.timestamp - _lastVoteTime > stor_13;\n    }\n    require(v0);\n    _lastVoteTime = block.timestamp;\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v4, v5 = _token.totalSupply().gas(msg.gas - 710);\n    require(v4);\n    assert(2);\n    if (_against <= v5 >> 1) {\n        0x1ca7(_amountRaisedICO / 3 + _amountRaisedPreSale / 3);\n        _stage += 1;\n    } else {\n        _icoSuccess = 0;\n    }\n}\n\nfunction stage() public nonPayable { \n    return _stage;\n}\n\nfunction crowdsaleClosed() public nonPayable { \n    return _crowdsaleClosed;\n}\n\nfunction lastVoteTime() public nonPayable { \n    return _lastVoteTime;\n}\n\nfunction against() public nonPayable { \n    return _against;\n}\n\nfunction contractDeployedTime() public nonPayable { \n    return _contractDeployedTime;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction hardCap() public nonPayable { \n    return _hardCap;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    v0 = v1 = 0;\n    v2 = v3 = _crowdsaleClosed;\n    if (v3) {\n        v2 = !_icoSuccess;\n    }\n    require(v2);\n    if (_stage != 1) {\n        if (_stage != 2) {\n            if (_stage == 3) {\n                v0 = v4 = _balanceOf[msg.sender] / 3;\n            }\n        } else {\n            v5 = _SafeMul(2, _balanceOf[msg.sender]);\n            assert(3);\n            v0 = v6 = v5 / 3;\n        }\n    } else {\n        v0 = v7 = _balanceOf[msg.sender];\n    }\n    _balanceOf[msg.sender] = 0;\n    if (v0 > 0) {\n        v8 = msg.sender.call().value(v0).gas(!v0 * 2300);\n        require(v8);\n        emit FundTransfer(msg.sender, v0, 0);\n    }\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x249b7c19 == function_selector) {\n            presaleEndTime();\n        } else if (0x255c8244 == function_selector) {\n            amountRaisedPreSale();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x344eca75 == function_selector) {\n            amountRaisedICO();\n        } else if (0x5ef3f3d1 == function_selector) {\n            voteRelease();\n        } else if (0x63cea450 == function_selector) {\n            closePresale();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7118f854 == function_selector) {\n            icoSuccess();\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9f396cff == function_selector) {\n            voteAgainst();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xb647990a == function_selector) {\n            countVotes();\n        } else if (0xc040e6b8 == function_selector) {\n            stage();\n        } else if (0xccb07cef == function_selector) {\n            crowdsaleClosed();\n        } else if (0xdac17430 == function_selector) {\n            lastVoteTime();\n        } else if (0xdc50af26 == function_selector) {\n            against();\n        } else if (0xe1727fc6 == function_selector) {\n            contractDeployedTime();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfb86a404 == function_selector) {\n            hardCap();\n        } else if (0xfc0c546a == function_selector) {\n            token();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 23:53 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _hardCap; // STORAGE[0x2]\nuint256 _amountRaisedPreSale; // STORAGE[0x3]\nuint256 _amountRaisedICO; // STORAGE[0x4]\nuint256 _contractDeployedTime; // STORAGE[0x5]\nuint256 stor_6; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 _presaleEndTime; // STORAGE[0x9]\nuint256 _deadline; // STORAGE[0xa]\nuint256 _price; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xd]\nuint256 _stage; // STORAGE[0x10]\nuint256 _against; // STORAGE[0x11]\nuint256 _lastVoteTime; // STORAGE[0x12]\nuint256 stor_13; // STORAGE[0x13]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_b_0_0; // STORAGE[0xb] bytes 0 to 0\nuint8 _icoSuccess; // STORAGE[0xe] bytes 0 to 0\nuint8 _crowdsaleClosed; // STORAGE[0xe] bytes 1 to 1\naddress _token; // STORAGE[0xc] bytes 0 to 19\naddress stor_e_2_21; // STORAGE[0xe] bytes 2 to 21\naddress stor_f_0_19; // STORAGE[0xf] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(uint256);\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v0, v1 = _token.lockOf(msg.sender).gas(msg.gas - 710);\n    require(v0);\n    v2 = v3 = !v1;\n    if (v3) {\n        v2 = v4 = !_crowdsaleClosed;\n    }\n    if (v2) {\n        v2 = v5 = _stage < 2;\n    }\n    if (v2) {\n        v2 = v6 = msg.value >= 0x16345785d8a0000;\n    }\n    require(v2);\n    v7 = v8 = _stage == 1;\n    if (v8) {\n        assert(_presaleEndTime + stor_7 >= _presaleEndTime);\n        v7 = v9 = block.timestamp < _presaleEndTime + stor_7;\n        if (block.timestamp >= _presaleEndTime + stor_7) {\n            v7 = v10 = _amountRaisedPreSale + _amountRaisedICO + msg.value > _hardCap;\n        }\n    }\n    require(!v7);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    if (_stage != 0) {\n        _amountRaisedICO = _amountRaisedICO + msg.value;\n        assert(stor_b_0_0);\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v11, v12 = _token.mint(msg.sender, msg.value / _price).gas(msg.gas - 710);\n        require(v11);\n    } else {\n        _amountRaisedPreSale = _amountRaisedPreSale + msg.value;\n        v13 = _SafeMul(2, msg.value);\n        assert(stor_b_0_0);\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v14, v15 = _token.mint(msg.sender, v13 / _price).gas(msg.gas - 710);\n        require(v14);\n    }\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\nfunction 0x1ca7(uint256 varg0) private { \n    v0 = _SafeMul(67, varg0);\n    assert(100);\n    v1 = stor_e_2_21.call().value(v0 / 100).gas(!(v0 / 100) * 2300);\n    require(v1);\n    v2 = _SafeMul(67, varg0);\n    assert(100);\n    assert(v2 / 100 <= varg0);\n    v3 = varg0 - v2 / 100;\n    v4 = stor_f_0_19.call().value(v3).gas(!v3 * 2300);\n    require(v4);\n    return ;\n}\n\nfunction checkGoalReached() public nonPayable { \n    v0 = v1 = 0;\n    v2 = v3 = _stage > 0;\n    if (v3) {\n        v2 = block.timestamp >= _deadline;\n    }\n    if (v2) {\n        v4 = v5 = _stage == 1;\n        if (v5) {\n            v4 = !_crowdsaleClosed;\n        }\n        require(v4);\n        if (_amountRaisedPreSale + _amountRaisedICO >= _fundingGoal) {\n            v6 = v7 = _amountRaisedICO / 3;\n            if (!_icoSuccess) {\n                v6 = v8 = v7 + _amountRaisedPreSale / 3;\n            }\n            v9 = v10 = 400;\n            v11 = v12 = 2825;\n            v13 = v14 = 67;\n            MEM[32 + MEM[64]] = 0;\n            require(_token.code.size);\n            v15, v16 = _token.totalSupply().gas(msg.gas - 710);\n            require(v15);\n            while (1) {\n                v17 = v18 = v16 == 0;\n                if (v18) {\n                    goto 0x9a60x9b8B0x5a7;\n                }\n                assert(v16);\n                v17 = v19 = v16 * v13 / v16 == v13;\n                if (v17) {\n                    break;\n                }\n                assert(v17);\n                assert(v9);\n                0x1ca7(v6);\n                _icoSuccess = 1;\n                MEM[32 + MEM[64]] = 0;\n                require(_token.code.size);\n                v20, v21 = _token.mint(stor_e_2_21, v0).gas(msg.gas - 710);\n                require(v20);\n                MEM[32 + MEM[64]] = 0;\n                require(_token.code.size);\n                v22, v23 = _token.mint(stor_f_0_19, v16 * v13 / v9).gas(msg.gas - 710);\n                require(v22);\n                _stage = 2;\n                _lastVoteTime = block.timestamp;\n                emit GoalReached(_amountRaisedPreSale + _amountRaisedICO);\n                goto {'0xbd4B0x5a7', '0xb09B0x5a7'};\n                assert(v9);\n                v0 = v24 = v16 * v13 / v9;\n                v9 = v25 = 400;\n                v11 = v26 = 3028;\n                v13 = v27 = 33;\n                MEM[32 + MEM[64]] = 0;\n                require(_token.code.size);\n                v28 = _token.totalSupply().gas(msg.gas - 710);\n                require(v28);\n                v16 = v29 = MEM[MEM[64]];\n            }\n        }\n        _crowdsaleClosed = 1;\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v30, v31 = _token.finishMinting().gas(msg.gas - 710);\n        require(v30);\n    }\n}\n\nfunction presaleEndTime() public nonPayable { \n    return _presaleEndTime;\n}\n\nfunction amountRaisedPreSale() public nonPayable { \n    return _amountRaisedPreSale;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction amountRaisedICO() public nonPayable { \n    return _amountRaisedICO;\n}\n\nfunction voteRelease() public nonPayable { \n    v0 = v1 = _stage == 2;\n    if (_stage != 2) {\n        v0 = v2 = _stage == 3;\n    }\n    if (!v0) {\n        v0 = v3 = _stage == 4;\n    }\n    if (v0) {\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v4, v0 = _token.lockOf(msg.sender).gas(msg.gas - 710);\n        require(v4);\n    }\n    require(v0);\n    require(_token.code.size);\n    v5 = _token.setLock(msg.sender, 0).gas(msg.gas - 710);\n    require(v5);\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v6, v7 = _token.balanceOf(msg.sender).gas(msg.gas - 710);\n    require(v6);\n    assert(v7 <= _against);\n    _against = _against - v7;\n}\n\nfunction closePresale() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        assert(_contractDeployedTime <= block.timestamp);\n        v0 = v2 = block.timestamp - _contractDeployedTime > stor_6;\n    }\n    if (v0) {\n        v0 = _stage == 0;\n    }\n    require(v0);\n    _stage = 1;\n    _presaleEndTime = block.timestamp;\n    assert(stor_8 + stor_7 >= stor_8);\n    assert(block.timestamp + (stor_8 + stor_7) >= block.timestamp);\n    _deadline = block.timestamp + (stor_8 + stor_7);\n    v3 = _SafeMul(5, _amountRaisedPreSale);\n    if (v3 <= 0x21e19e0c9bab2400000) {\n        _hardCap = 0x21e19e0c9bab2400000;\n    } else {\n        v4 = _SafeMul(5, _amountRaisedPreSale);\n        _hardCap = v4;\n    }\n    if (_amountRaisedPreSale >= _fundingGoal) {\n        0x1ca7(_amountRaisedPreSale / 3);\n        _icoSuccess = 1;\n        emit GoalReached(_amountRaisedPreSale);\n    }\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction icoSuccess() public nonPayable { \n    return _icoSuccess;\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction voteAgainst() public nonPayable { \n    v0 = v1 = _stage == 2;\n    if (_stage != 2) {\n        v0 = v2 = _stage == 3;\n    }\n    if (v0) {\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v3, v4 = _token.lockOf(msg.sender).gas(msg.gas - 710);\n        require(v3);\n        v0 = v5 = !v4;\n    }\n    require(v0);\n    require(_token.code.size);\n    v6 = _token.setLock(msg.sender, 1).gas(msg.gas - 710);\n    require(v6);\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v7, v8 = _token.balanceOf(msg.sender).gas(msg.gas - 710);\n    require(v7);\n    assert(_against + v8 >= _against);\n    _against = _against + v8;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction countVotes() public nonPayable { \n    v0 = v1 = _icoSuccess;\n    if (v1) {\n        v0 = v2 = _stage == 2;\n        if (_stage != 2) {\n            v0 = _stage == 3;\n        }\n    }\n    if (v0) {\n        assert(_lastVoteTime <= block.timestamp);\n        v0 = v3 = block.timestamp - _lastVoteTime > stor_13;\n    }\n    require(v0);\n    _lastVoteTime = block.timestamp;\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v4, v5 = _token.totalSupply().gas(msg.gas - 710);\n    require(v4);\n    assert(2);\n    if (_against <= v5 >> 1) {\n        0x1ca7(_amountRaisedICO / 3 + _amountRaisedPreSale / 3);\n        _stage += 1;\n    } else {\n        _icoSuccess = 0;\n    }\n}\n\nfunction stage() public nonPayable { \n    return _stage;\n}\n\nfunction crowdsaleClosed() public nonPayable { \n    return _crowdsaleClosed;\n}\n\nfunction lastVoteTime() public nonPayable { \n    return _lastVoteTime;\n}\n\nfunction against() public nonPayable { \n    return _against;\n}\n\nfunction contractDeployedTime() public nonPayable { \n    return _contractDeployedTime;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction hardCap() public nonPayable { \n    return _hardCap;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    v0 = v1 = 0;\n    v2 = v3 = _crowdsaleClosed;\n    if (v3) {\n        v2 = !_icoSuccess;\n    }\n    require(v2);\n    if (_stage != 1) {\n        if (_stage != 2) {\n            if (_stage == 3) {\n                v0 = v4 = _balanceOf[msg.sender] / 3;\n            }\n        } else {\n            v5 = _SafeMul(2, _balanceOf[msg.sender]);\n            assert(3);\n            v0 = v6 = v5 / 3;\n        }\n    } else {\n        v0 = v7 = _balanceOf[msg.sender];\n    }\n    _balanceOf[msg.sender] = 0;\n    if (v0 > 0) {\n        v8 = msg.sender.call().value(v0).gas(!v0 * 2300);\n        require(v8);\n        emit FundTransfer(msg.sender, v0, 0);\n    }\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x249b7c19 == function_selector) {\n            presaleEndTime();\n        } else if (0x255c8244 == function_selector) {\n            amountRaisedPreSale();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x344eca75 == function_selector) {\n            amountRaisedICO();\n        } else if (0x5ef3f3d1 == function_selector) {\n            voteRelease();\n        } else if (0x63cea450 == function_selector) {\n            closePresale();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7118f854 == function_selector) {\n            icoSuccess();\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9f396cff == function_selector) {\n            voteAgainst();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xb647990a == function_selector) {\n            countVotes();\n        } else if (0xc040e6b8 == function_selector) {\n            stage();\n        } else if (0xccb07cef == function_selector) {\n            crowdsaleClosed();\n        } else if (0xdac17430 == function_selector) {\n            lastVoteTime();\n        } else if (0xdc50af26 == function_selector) {\n            against();\n        } else if (0xe1727fc6 == function_selector) {\n            contractDeployedTime();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfb86a404 == function_selector) {\n            hardCap();\n        } else if (0xfc0c546a == function_selector) {\n            token();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 23:53 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _hardCap; // STORAGE[0x2]\nuint256 _amountRaisedPreSale; // STORAGE[0x3]\nuint256 _amountRaisedICO; // STORAGE[0x4]\nuint256 _contractDeployedTime; // STORAGE[0x5]\nuint256 stor_6; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 _presaleEndTime; // STORAGE[0x9]\nuint256 _deadline; // STORAGE[0xa]\nuint256 _price; // STORAGE[0xb]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xd]\nuint256 _stage; // STORAGE[0x10]\nuint256 _against; // STORAGE[0x11]\nuint256 _lastVoteTime; // STORAGE[0x12]\nuint256 stor_13; // STORAGE[0x13]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_b_0_0; // STORAGE[0xb] bytes 0 to 0\nuint8 _icoSuccess; // STORAGE[0xe] bytes 0 to 0\nuint8 _crowdsaleClosed; // STORAGE[0xe] bytes 1 to 1\naddress _token; // STORAGE[0xc] bytes 0 to 19\naddress stor_e_2_21; // STORAGE[0xe] bytes 2 to 21\naddress stor_f_0_19; // STORAGE[0xf] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(uint256);\nOwnershipTransferred(address, address);\n\nfunction fallback() public payable { \n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v0, v1 = _token.lockOf(msg.sender).gas(msg.gas - 710);\n    require(v0);\n    v2 = v3 = !v1;\n    if (v3) {\n        v2 = v4 = !_crowdsaleClosed;\n    }\n    if (v2) {\n        v2 = v5 = _stage < 2;\n    }\n    if (v2) {\n        v2 = v6 = msg.value >= 0x16345785d8a0000;\n    }\n    require(v2);\n    v7 = v8 = _stage == 1;\n    if (v8) {\n        assert(_presaleEndTime + stor_7 >= _presaleEndTime);\n        v7 = v9 = block.timestamp < _presaleEndTime + stor_7;\n        if (block.timestamp >= _presaleEndTime + stor_7) {\n            v7 = v10 = _amountRaisedPreSale + _amountRaisedICO + msg.value > _hardCap;\n        }\n    }\n    require(!v7);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    if (_stage != 0) {\n        _amountRaisedICO = _amountRaisedICO + msg.value;\n        assert(stor_b_0_0);\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v11, v12 = _token.mint(msg.sender, msg.value / _price).gas(msg.gas - 710);\n        require(v11);\n    } else {\n        _amountRaisedPreSale = _amountRaisedPreSale + msg.value;\n        v13 = _SafeMul(2, msg.value);\n        assert(stor_b_0_0);\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v14, v15 = _token.mint(msg.sender, v13 / _price).gas(msg.gas - 710);\n        require(v14);\n    }\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\nfunction 0x1ca7(uint256 varg0) private { \n    v0 = _SafeMul(67, varg0);\n    assert(100);\n    v1 = stor_e_2_21.call().value(v0 / 100).gas(!(v0 / 100) * 2300);\n    require(v1);\n    v2 = _SafeMul(67, varg0);\n    assert(100);\n    assert(v2 / 100 <= varg0);\n    v3 = varg0 - v2 / 100;\n    v4 = stor_f_0_19.call().value(v3).gas(!v3 * 2300);\n    require(v4);\n    return ;\n}\n\nfunction checkGoalReached() public nonPayable { \n    v0 = v1 = 0;\n    v2 = v3 = _stage > 0;\n    if (v3) {\n        v2 = block.timestamp >= _deadline;\n    }\n    if (v2) {\n        v4 = v5 = _stage == 1;\n        if (v5) {\n            v4 = !_crowdsaleClosed;\n        }\n        require(v4);\n        if (_amountRaisedPreSale + _amountRaisedICO >= _fundingGoal) {\n            v6 = v7 = _amountRaisedICO / 3;\n            if (!_icoSuccess) {\n                v6 = v8 = v7 + _amountRaisedPreSale / 3;\n            }\n            v9 = v10 = 400;\n            v11 = v12 = 2825;\n            v13 = v14 = 67;\n            MEM[32 + MEM[64]] = 0;\n            require(_token.code.size);\n            v15, v16 = _token.totalSupply().gas(msg.gas - 710);\n            require(v15);\n            while (1) {\n                v17 = v18 = v16 == 0;\n                if (v18) {\n                    goto 0x9a60x9b8B0x5a7;\n                }\n                assert(v16);\n                v17 = v19 = v16 * v13 / v16 == v13;\n                if (v17) {\n                    break;\n                }\n                assert(v17);\n                assert(v9);\n                0x1ca7(v6);\n                _icoSuccess = 1;\n                MEM[32 + MEM[64]] = 0;\n                require(_token.code.size);\n                v20, v21 = _token.mint(stor_e_2_21, v0).gas(msg.gas - 710);\n                require(v20);\n                MEM[32 + MEM[64]] = 0;\n                require(_token.code.size);\n                v22, v23 = _token.mint(stor_f_0_19, v16 * v13 / v9).gas(msg.gas - 710);\n                require(v22);\n                _stage = 2;\n                _lastVoteTime = block.timestamp;\n                emit GoalReached(_amountRaisedPreSale + _amountRaisedICO);\n                goto {'0xbd4B0x5a7', '0xb09B0x5a7'};\n                assert(v9);\n                v0 = v24 = v16 * v13 / v9;\n                v9 = v25 = 400;\n                v11 = v26 = 3028;\n                v13 = v27 = 33;\n                MEM[32 + MEM[64]] = 0;\n                require(_token.code.size);\n                v28 = _token.totalSupply().gas(msg.gas - 710);\n                require(v28);\n                v16 = v29 = MEM[MEM[64]];\n            }\n        }\n        _crowdsaleClosed = 1;\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v30, v31 = _token.finishMinting().gas(msg.gas - 710);\n        require(v30);\n    }\n}\n\nfunction presaleEndTime() public nonPayable { \n    return _presaleEndTime;\n}\n\nfunction amountRaisedPreSale() public nonPayable { \n    return _amountRaisedPreSale;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction amountRaisedICO() public nonPayable { \n    return _amountRaisedICO;\n}\n\nfunction voteRelease() public nonPayable { \n    v0 = v1 = _stage == 2;\n    if (_stage != 2) {\n        v0 = v2 = _stage == 3;\n    }\n    if (!v0) {\n        v0 = v3 = _stage == 4;\n    }\n    if (v0) {\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v4, v0 = _token.lockOf(msg.sender).gas(msg.gas - 710);\n        require(v4);\n    }\n    require(v0);\n    require(_token.code.size);\n    v5 = _token.setLock(msg.sender, 0).gas(msg.gas - 710);\n    require(v5);\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v6, v7 = _token.balanceOf(msg.sender).gas(msg.gas - 710);\n    require(v6);\n    assert(v7 <= _against);\n    _against = _against - v7;\n}\n\nfunction closePresale() public nonPayable { \n    v0 = v1 = msg.sender == _owner;\n    if (msg.sender != _owner) {\n        assert(_contractDeployedTime <= block.timestamp);\n        v0 = v2 = block.timestamp - _contractDeployedTime > stor_6;\n    }\n    if (v0) {\n        v0 = _stage == 0;\n    }\n    require(v0);\n    _stage = 1;\n    _presaleEndTime = block.timestamp;\n    assert(stor_8 + stor_7 >= stor_8);\n    assert(block.timestamp + (stor_8 + stor_7) >= block.timestamp);\n    _deadline = block.timestamp + (stor_8 + stor_7);\n    v3 = _SafeMul(5, _amountRaisedPreSale);\n    if (v3 <= 0x21e19e0c9bab2400000) {\n        _hardCap = 0x21e19e0c9bab2400000;\n    } else {\n        v4 = _SafeMul(5, _amountRaisedPreSale);\n        _hardCap = v4;\n    }\n    if (_amountRaisedPreSale >= _fundingGoal) {\n        0x1ca7(_amountRaisedPreSale / 3);\n        _icoSuccess = 1;\n        emit GoalReached(_amountRaisedPreSale);\n    }\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction icoSuccess() public nonPayable { \n    return _icoSuccess;\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction voteAgainst() public nonPayable { \n    v0 = v1 = _stage == 2;\n    if (_stage != 2) {\n        v0 = v2 = _stage == 3;\n    }\n    if (v0) {\n        MEM[32 + MEM[64]] = 0;\n        require(_token.code.size);\n        v3, v4 = _token.lockOf(msg.sender).gas(msg.gas - 710);\n        require(v3);\n        v0 = v5 = !v4;\n    }\n    require(v0);\n    require(_token.code.size);\n    v6 = _token.setLock(msg.sender, 1).gas(msg.gas - 710);\n    require(v6);\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v7, v8 = _token.balanceOf(msg.sender).gas(msg.gas - 710);\n    require(v7);\n    assert(_against + v8 >= _against);\n    _against = _against + v8;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction countVotes() public nonPayable { \n    v0 = v1 = _icoSuccess;\n    if (v1) {\n        v0 = v2 = _stage == 2;\n        if (_stage != 2) {\n            v0 = _stage == 3;\n        }\n    }\n    if (v0) {\n        assert(_lastVoteTime <= block.timestamp);\n        v0 = v3 = block.timestamp - _lastVoteTime > stor_13;\n    }\n    require(v0);\n    _lastVoteTime = block.timestamp;\n    MEM[32 + MEM[64]] = 0;\n    require(_token.code.size);\n    v4, v5 = _token.totalSupply().gas(msg.gas - 710);\n    require(v4);\n    assert(2);\n    if (_against <= v5 >> 1) {\n        0x1ca7(_amountRaisedICO / 3 + _amountRaisedPreSale / 3);\n        _stage += 1;\n    } else {\n        _icoSuccess = 0;\n    }\n}\n\nfunction stage() public nonPayable { \n    return _stage;\n}\n\nfunction crowdsaleClosed() public nonPayable { \n    return _crowdsaleClosed;\n}\n\nfunction lastVoteTime() public nonPayable { \n    return _lastVoteTime;\n}\n\nfunction against() public nonPayable { \n    return _against;\n}\n\nfunction contractDeployedTime() public nonPayable { \n    return _contractDeployedTime;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction hardCap() public nonPayable { \n    return _hardCap;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    v0 = v1 = 0;\n    v2 = v3 = _crowdsaleClosed;\n    if (v3) {\n        v2 = !_icoSuccess;\n    }\n    require(v2);\n    if (_stage != 1) {\n        if (_stage != 2) {\n            if (_stage == 3) {\n                v0 = v4 = _balanceOf[msg.sender] / 3;\n            }\n        } else {\n            v5 = _SafeMul(2, _balanceOf[msg.sender]);\n            assert(3);\n            v0 = v6 = v5 / 3;\n        }\n    } else {\n        v0 = v7 = _balanceOf[msg.sender];\n    }\n    _balanceOf[msg.sender] = 0;\n    if (v0 > 0) {\n        v8 = msg.sender.call().value(v0).gas(!v0 * 2300);\n        require(v8);\n        emit FundTransfer(msg.sender, v0, 0);\n    }\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 * varg0;\n    v1 = v2 = varg1 == 0;\n    if (varg1 != 0) {\n        assert(varg1);\n        v1 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x249b7c19 == function_selector) {\n            presaleEndTime();\n        } else if (0x255c8244 == function_selector) {\n            amountRaisedPreSale();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x344eca75 == function_selector) {\n            amountRaisedICO();\n        } else if (0x5ef3f3d1 == function_selector) {\n            voteRelease();\n        } else if (0x63cea450 == function_selector) {\n            closePresale();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7118f854 == function_selector) {\n            icoSuccess();\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x9f396cff == function_selector) {\n            voteAgainst();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xb647990a == function_selector) {\n            countVotes();\n        } else if (0xc040e6b8 == function_selector) {\n            stage();\n        } else if (0xccb07cef == function_selector) {\n            crowdsaleClosed();\n        } else if (0xdac17430 == function_selector) {\n            lastVoteTime();\n        } else if (0xdc50af26 == function_selector) {\n            against();\n        } else if (0xe1727fc6 == function_selector) {\n            contractDeployedTime();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfb86a404 == function_selector) {\n            hardCap();\n        } else if (0xfc0c546a == function_selector) {\n            token();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 37.038395166397095,
	"usage": {
		"completion_tokens": 525,
		"prompt_tokens": 3939,
		"total_tokens": 4464
	}
}