{
	"address": "0xe10339af2c2b22706ea5d4cbb713a49d4b7ab2fc",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity contract version of the decompiled code:\n\n```sol\npragma solidity ^0.8.0;\n\ncontract Token {\n    mapping (address => uint256) private _balanceOf;\n    uint256 private _totalSupply;\n    uint256 private _mint;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    function burn(uint256 amount) public returns (bool) {\n        require(_balanceOf[msg.sender] >= amount, \"Insufficient balance\");\n        _balanceOf[msg.sender] -= amount;\n        _totalSupply -= amount;\n        return true;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"STK\";\n    }\n\n    function mint(uint256 amount) public payable {\n        require(msg.value >= _mint * amount, \"Insufficient value\");\n        _totalSupply += amount;\n        _balanceOf[msg.sender] += amount;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(_balanceOf[msg.sender] >= value, \"Insufficient balance\");\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    fallback() external payable {\n        revert(\"Fallback function called\");\n    }\n\n    function name() public pure returns (string memory) {\n        return \"SuperToken\";\n    }\n}\n```\nPlease note, I've made some assumptions about the contract and cleaned up some parts to better fit typical Solidity style:\n- All state variables were made private with an underscore prefix.\n- Function visibility specified as `public` or `external` where appropriate.\n- `symbol` and `name` functions now return hardcoded strings.\n- Removed data length checks, as Solidity handles these automatically.\n- Removed the function selector logic, as function calls are handled directly in Solidity.\n- Added error messages to `require` statements for better debugging.\n- The `mint` function is payable and mints tokens proportional to the Ether sent. The `_mint` variable is assumed to be the exchange rate.\n- `decimals` function returns a hardcoded 18, which is a common choice for ERC-20 tokens.",
				"role": "assistant"
			}
		}
	],
	"created": 1701467544,
	"id": "chatcmpl-8R5iquHjrfYpv4UWT6x6zGFzwYNTO",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.26 00:43 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nuint256 _mint; // STORAGE[0x2]\n\n// Events\nTransfer(address, address, uint256);\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x53544b0000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction mint(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.value >= _mint * varg0);\n    _totalSupply = _totalSupply + varg0;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(_balanceOf[msg.sender] >= varg1);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (10) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffff & 'SuperToken';\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa0712d68 == function_selector) {\n            mint(uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 00:43 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nuint256 _mint; // STORAGE[0x2]\n\n// Events\nTransfer(address, address, uint256);\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x53544b0000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction mint(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.value >= _mint * varg0);\n    _totalSupply = _totalSupply + varg0;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(_balanceOf[msg.sender] >= varg1);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (10) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffff & 'SuperToken';\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa0712d68 == function_selector) {\n            mint(uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 00:43 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x0]\nuint256 _totalSupply; // STORAGE[0x1]\nuint256 _mint; // STORAGE[0x2]\n\n// Events\nTransfer(address, address, uint256);\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    return 1;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x53544b0000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction mint(uint256 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.value >= _mint * varg0);\n    _totalSupply = _totalSupply + varg0;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + varg0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(_balanceOf[msg.sender] >= varg1);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (10) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffff & 'SuperToken';\n    }\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa0712d68 == function_selector) {\n            mint(uint256);\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 19.889528036117554,
	"usage": {
		"completion_tokens": 519,
		"prompt_tokens": 926,
		"total_tokens": 1445
	}
}