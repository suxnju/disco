{
	"address": "0xaf7aea249098f2c2f50cc11d4000ccf798194373",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "In Solidity, a possible interpretation of the decompiled code could look like this:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    uint256 storage_12;\n    uint256 storage_13;\n    uint256 storage_14;\n    uint256 storage_05;\n    uint256 storage_16;\n    uint256 storage_15;\n    uint256 storage_04;\n    uint256 storage_01;\n    uint256 storage_00;\n    uint256 storage_03;\n    uint256 storage_06;\n    uint256 storage_07;\n    uint256 storage_0d;\n    uint256 storage_0c;\n    uint256 storage_0e;\n    uint256 storage_0f;\n    uint256 storage_10;\n    uint256 storage_11;\n    uint256 storage_02;\n\n    function main() public {\n        // Implementation based on the logic provided in the decompiled code\n    }\n\n    function toZT(uint arg0) public returns (uint) {\n        // Implementation based on the logic provided in the decompiled code\n    }\n\n    function creator() public view returns (address) {\n        return address(storage_01 & (2 ** 160 - 1));\n    }\n\n    function rateAngelDayEnd() public view returns (uint256) {\n        return storage_0d;\n    }\n\n    function ztToken() public view returns (address) {\n        return address(storage_16 & (2 ** 160 - 1));\n    }\n\n    function endCrowdsale() public {\n        // Implementation based on the logic provided in the decompiled code\n    }\n\n    function rateFirstWeekEnd() public view returns (uint256) {\n        return storage_0e;\n    }\n\n    function beneficiary() public view returns (address) {\n        return address(storage_00 & (2 ** 160 - 1));\n    }\n\n    function withdraw() public {\n        // Implementation based on the logic provided in the decompiled code\n    }\n\n    function rateAngelDay() public view returns (uint256) {\n        return storage_07;\n    }\n\n    function rateLastWeekEnd() public view returns (uint256) {\n        return storage_11;\n    }\n\n    function rateSecondWeekEnd() public view returns (uint256) {\n        return storage_0f;\n    }\n\n    function rateThirdWeekEnd() public view returns (uint256) {\n        return storage_10;\n    }\n\n    // Other similar function implementations go here...\n\n}\n```\nPlease note that the decompiled code provided is not a complete Solidity code. The actual Solidity code would include the implementation of the functions based on the logic provided in the decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474501,
	"id": "chatcmpl-8MvO16hugrjK9ttGfTug7SRjuAKP9",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0172:\n            var var0 = 0x00;\n            var var1 = var0;\n            var var2 = var1;\n            var var3 = var2;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = storage[0x12] & 0xff;\n        \n            if (var6 > 0x02) { assert(); }\n        \n            if (var6 != var5) { revert(memory[0x00:0x00]); }\n        \n            if (block.timestamp <= storage[0x13]) { revert(memory[0x00:0x00]); }\n        \n            if (block.timestamp >= storage[0x14]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value < storage[0x05]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.sender;\n            var1 = msg.value;\n            var5 = 0x01d0;\n            var6 = msg.value;\n            var5 = toZT(var6);\n            var temp0 = var5;\n            var2 = temp0;\n            var5 = storage[0x16] & 0x02 ** 0xa0 - 0x01;\n            var6 = 0x867904b4;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = var2;\n            var var7 = temp1 + 0x44;\n            var var8 = 0x20;\n            var var9 = memory[0x40:0x60];\n            var var10 = var7 - var9;\n            var var11 = var9;\n            var var12 = 0x00;\n            var var13 = var5;\n        \n            if (!address(var13).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            if (block.timestamp > storage[0x13] + storage[0x0c]) {\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x17;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                var temp4 = var1;\n                storage[temp3] = temp4 + storage[temp3];\n                var temp5 = temp4 + storage[0x15];\n                storage[0x15] = temp5;\n            \n                if (temp5 < storage[0x04]) { stop(); }\n            \n            label_032C:\n                storage[0x12] = (storage[0x12] & ~0xff) | 0x01;\n                stop();\n            } else {\n                var temp6 = (var1 * 0x05) / 0x03e8;\n                var3 = temp6;\n                var temp7 = memory[0x40:0x60];\n                var temp8;\n                temp8, memory[temp7:temp7 + 0x00] = address(storage[0x01] & 0x02 ** 0xa0 - 0x01).call.gas(!var3 * 0x08fc).value(var3)(memory[temp7:temp7 + memory[0x40:0x60] - temp7]);\n            \n                if (!temp8) { revert(memory[0x00:0x00]); }\n            \n                var temp9 = var1 - var3;\n                var temp10 = memory[0x40:0x60];\n                var temp11;\n                temp11, memory[temp10:temp10 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp9 * 0x08fc).value(temp9)(memory[temp10:temp10 + memory[0x40:0x60] - temp10]);\n            \n                if (!temp11) { revert(memory[0x00:0x00]); }\n            \n                var temp12 = var1 + storage[0x15];\n                storage[0x15] = temp12;\n            \n                if (temp12 < storage[0x04]) { stop(); }\n                else { goto label_032C; }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x02d05d3f) {\n                // Dispatch table entry for creator()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = creator();\n            \n            label_035C:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x1722a8b0) {\n                // Dispatch table entry for rateAngelDayEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateAngelDayEnd();\n            \n            label_038B:\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x19e66508) {\n                // Dispatch table entry for ztToken()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = ztToken();\n                goto label_035C;\n            } else if (var0 == 0x2095f2d4) {\n                // Dispatch table entry for endCrowdsale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03df;\n                endCrowdsale();\n                stop();\n            } else if (var0 == 0x2a1be747) {\n                // Dispatch table entry for rateFirstWeekEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateFirstWeekEnd();\n                goto label_038B;\n            } else if (var0 == 0x38af3eed) {\n                // Dispatch table entry for beneficiary()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = beneficiary();\n                goto label_035C;\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03df;\n                withdraw();\n                stop();\n            } else if (var0 == 0x3f3a78d5) {\n                // Dispatch table entry for rateAngelDay()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateAngelDay();\n                goto label_038B;\n            } else if (var0 == 0x46287ddb) {\n                // Dispatch table entry for rateLastWeekEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateLastWeekEnd();\n                goto label_038B;\n            } else if (var0 == 0x51c5d54d) {\n                // Dispatch table entry for rateSecondWeekEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateSecondWeekEnd();\n                goto label_038B;\n            } else if (var0 == 0x51ded741) {\n                // Dispatch table entry for rateThirdWeekEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateThirdWeekEnd();\n                goto label_038B;\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03df;\n                refund();\n                stop();\n            } else if (var0 == 0x5f48f393) {\n                // Dispatch table entry for maxAmount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = maxAmount();\n                goto label_038B;\n            } else if (var0 == 0x612472fe) {\n                // Dispatch table entry for toZT(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = msg.data[0x04:0x24];\n                var1 = toZT(var2);\n                goto label_038B;\n            } else if (var0 == 0x6fb66278) {\n                // Dispatch table entry for ratePreICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = ratePreICO();\n                goto label_038B;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_038B;\n            } else if (var0 == 0x9b2cb5d8) {\n                // Dispatch table entry for minAmount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = minAmount();\n                goto label_038B;\n            } else if (var0 == 0x9c472c70) {\n                // Dispatch table entry for rateSecondWeek()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateSecondWeek();\n                goto label_038B;\n            } else if (var0 == 0x9c5e9023) {\n                // Dispatch table entry for confirmBeneficiary()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03df;\n                confirmBeneficiary();\n                stop();\n            } else if (var0 == 0xa969574d) {\n                // Dispatch table entry for ratePreICOEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = ratePreICOEnd();\n                goto label_038B;\n            } else if (var0 == 0xb2394040) {\n                // Dispatch table entry for rateThirdWeek()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateThirdWeek();\n                goto label_038B;\n            } else if (var0 == 0xb3007dc6) {\n                // Dispatch table entry for rateFirstWeek()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateFirstWeek();\n                goto label_038B;\n            } else if (var0 == 0xb65a1350) {\n                // Dispatch table entry for rateLastWeek()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateLastWeek();\n                goto label_038B;\n            } else if (var0 == 0xbe9a6555) {\n                // Dispatch table entry for start()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = start();\n                goto label_038B;\n            } else if (var0 == 0xc040e6b8) {\n                // Dispatch table entry for stage()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06c1;\n                var2 = stage();\n                var3 = memory[0x40:0x60];\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 > 0x02) { assert(); }\n            \n                var temp17 = var4;\n                memory[temp17:temp17 + 0x20] = var5 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0xcbf2ad23) {\n                // Dispatch table entry for confirmedBy()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = confirmedBy();\n                goto label_035C;\n            } else if (var0 == 0xefbe1c1c) {\n                // Dispatch table entry for end()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = end();\n                goto label_038B;\n            } else if (var0 == 0xf0ea4bfc) {\n                // Dispatch table entry for raised()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = raised();\n                goto label_038B;\n            } else if (var0 == 0xf1d841f1) {\n                // Dispatch table entry for minAcceptedAmount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = minAcceptedAmount();\n                goto label_038B;\n            } else { goto label_0172; }\n        }\n    }\n    \n    function toZT(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = 0x01;\n        var var6 = storage[0x12] & 0xff;\n    \n        if (var6 > 0x02) { assert(); }\n    \n        var temp0 = var6 != var5;\n        var5 = temp0;\n    \n        if (var5) {\n            var5 = block.timestamp >= storage[0x13];\n        \n            if (!var5) { goto label_07BB; }\n            else { goto label_07B4; }\n        } else if (!var5) {\n        label_07BB:\n        \n            if (!var5) {\n            label_0846:\n                var2 = (var1 * arg0 * 0x05f5e100) / 0x0de0b6b3a7640000;\n            \n                if (storage[0x15] <= storage[0x03]) {\n                label_08A6:\n                    return var2;\n                } else {\n                    var5 = storage[0x03];\n                    var6 = storage[0x15];\n                \n                    if (!var5) { assert(); }\n                \n                    var3 = var6 / var5;\n                    var4 = 0x00;\n                \n                    if (var4 >= var3) { goto label_08A6; }\n                \n                label_088E:\n                    var2 = (var2 * 0x399304c9) / 0x3b9aca00;\n                    var4 = var4 + 0x01;\n                \n                    if (var4 >= var3) { goto label_08A6; }\n                    else { goto label_088E; }\n                }\n            } else {\n            label_07C1:\n            \n                if (block.timestamp <= storage[0x13] + storage[0x0c]) {\n                    var1 = storage[0x06];\n                    goto label_0846;\n                } else if (block.timestamp <= storage[0x13] + storage[0x0d]) {\n                    var1 = storage[0x07];\n                    goto label_0846;\n                } else if (block.timestamp <= storage[0x13] + storage[0x0e]) {\n                    var1 = storage[0x08];\n                    goto label_0846;\n                } else if (block.timestamp <= storage[0x13] + storage[0x0f]) {\n                    var1 = storage[0x09];\n                    goto label_0846;\n                } else if (block.timestamp <= storage[0x13] + storage[0x10]) {\n                    var1 = storage[0x0a];\n                    goto label_0846;\n                } else if (block.timestamp > storage[0x13] + storage[0x11]) { goto label_0846; }\n                else {\n                    var1 = storage[0x0b];\n                    goto label_0846;\n                }\n            }\n        } else {\n        label_07B4:\n        \n            if (block.timestamp > storage[0x14]) { goto label_0846; }\n            else { goto label_07C1; }\n        }\n    }\n    \n    function creator() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function rateAngelDayEnd() returns (var r0) { return storage[0x0d]; }\n    \n    function ztToken() returns (var r0) { return storage[0x16] & 0x02 ** 0xa0 - 0x01; }\n    \n    function endCrowdsale() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x12] & 0xff;\n    \n        if (var2 > 0x02) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (block.timestamp < storage[0x14]) { revert(memory[0x00:0x00]); }\n    \n        storage[0x12] = (storage[0x12] & ~0xff) | 0x01;\n    }\n    \n    function rateFirstWeekEnd() returns (var r0) { return storage[0x0e]; }\n    \n    function beneficiary() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x01;\n        var var3 = var2;\n        var var4 = storage[0x12] & 0xff;\n    \n        if (var4 > 0x02) { assert(); }\n    \n        if (var4 != var3) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x15] < storage[0x03]) { revert(memory[0x00:0x00]); }\n    \n        var0 = address(this).balance;\n        var temp0 = (var0 * 0x05) / 0x03e8;\n        var1 = temp0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x01] & 0x02 ** 0xa0 - 0x01).call.gas(!var1 * 0x08fc).value(var1)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var0 - var1;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n    \n        if (!temp5) { revert(memory[0x00:0x00]); }\n    \n        storage[0x12] = (storage[0x12] & ~0xff) | 0x02;\n    }\n    \n    function rateAngelDay() returns (var r0) { return storage[0x07]; }\n    \n    function rateLastWeekEnd() returns (var r0) { return storage[0x11]; }\n    \n    function rateSecondWeekEnd() returns (var r0) { return storage[0x0f]; }\n    \n    function rateThirdWeekEnd() returns (var r0) { return storage[0x10]; }\n    \n    function refund() {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = var1;\n        var var3 = storage[0x12] & 0xff;\n    \n        if (var3 > 0x02) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x15] >= storage[0x03]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x17;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        storage[temp0] = 0x00;\n        var0 = temp1;\n        var2 = var0 > 0x00;\n    \n        if (var2) {\n            var temp2 = var0;\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n        \n            if (temp4) { goto label_0AC1; }\n            else { goto label_0AA6; }\n        } else if (!var2) {\n        label_0AC1:\n            return;\n        } else {\n        label_0AA6:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x17;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            return;\n        }\n    }\n    \n    function maxAmount() returns (var r0) { return storage[0x04]; }\n    \n    function ratePreICO() returns (var r0) { return storage[0x06]; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function minAmount() returns (var r0) { return storage[0x03]; }\n    \n    function rateSecondWeek() returns (var r0) { return storage[0x09]; }\n    \n    function confirmBeneficiary() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = msg.sender | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function ratePreICOEnd() returns (var r0) { return storage[0x0c]; }\n    \n    function rateThirdWeek() returns (var r0) { return storage[0x0a]; }\n    \n    function rateFirstWeek() returns (var r0) { return storage[0x08]; }\n    \n    function rateLastWeek() returns (var r0) { return storage[0x0b]; }\n    \n    function start() returns (var r0) { return storage[0x13]; }\n    \n    function stage() returns (var r0) { return storage[0x12] & 0xff; }\n    \n    function confirmedBy() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function end() returns (var r0) { return storage[0x14]; }\n    \n    function raised() returns (var r0) { return storage[0x15]; }\n    \n    function minAcceptedAmount() returns (var r0) { return storage[0x05]; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0172:\n            var var0 = 0x00;\n            var var1 = var0;\n            var var2 = var1;\n            var var3 = var2;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = storage[0x12] & 0xff;\n        \n            if (var6 > 0x02) { assert(); }\n        \n            if (var6 != var5) { revert(memory[0x00:0x00]); }\n        \n            if (block.timestamp <= storage[0x13]) { revert(memory[0x00:0x00]); }\n        \n            if (block.timestamp >= storage[0x14]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value < storage[0x05]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.sender;\n            var1 = msg.value;\n            var5 = 0x01d0;\n            var6 = msg.value;\n            var5 = toZT(var6);\n            var temp0 = var5;\n            var2 = temp0;\n            var5 = storage[0x16] & 0x02 ** 0xa0 - 0x01;\n            var6 = 0x867904b4;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = var2;\n            var var7 = temp1 + 0x44;\n            var var8 = 0x20;\n            var var9 = memory[0x40:0x60];\n            var var10 = var7 - var9;\n            var var11 = var9;\n            var var12 = 0x00;\n            var var13 = var5;\n        \n            if (!address(var13).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            if (block.timestamp > storage[0x13] + storage[0x0c]) {\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x17;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                var temp4 = var1;\n                storage[temp3] = temp4 + storage[temp3];\n                var temp5 = temp4 + storage[0x15];\n                storage[0x15] = temp5;\n            \n                if (temp5 < storage[0x04]) { stop(); }\n            \n            label_032C:\n                storage[0x12] = (storage[0x12] & ~0xff) | 0x01;\n                stop();\n            } else {\n                var temp6 = (var1 * 0x05) / 0x03e8;\n                var3 = temp6;\n                var temp7 = memory[0x40:0x60];\n                var temp8;\n                temp8, memory[temp7:temp7 + 0x00] = address(storage[0x01] & 0x02 ** 0xa0 - 0x01).call.gas(!var3 * 0x08fc).value(var3)(memory[temp7:temp7 + memory[0x40:0x60] - temp7]);\n            \n                if (!temp8) { revert(memory[0x00:0x00]); }\n            \n                var temp9 = var1 - var3;\n                var temp10 = memory[0x40:0x60];\n                var temp11;\n                temp11, memory[temp10:temp10 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp9 * 0x08fc).value(temp9)(memory[temp10:temp10 + memory[0x40:0x60] - temp10]);\n            \n                if (!temp11) { revert(memory[0x00:0x00]); }\n            \n                var temp12 = var1 + storage[0x15];\n                storage[0x15] = temp12;\n            \n                if (temp12 < storage[0x04]) { stop(); }\n                else { goto label_032C; }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x02d05d3f) {\n                // Dispatch table entry for creator()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = creator();\n            \n            label_035C:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x1722a8b0) {\n                // Dispatch table entry for rateAngelDayEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateAngelDayEnd();\n            \n            label_038B:\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x19e66508) {\n                // Dispatch table entry for ztToken()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = ztToken();\n                goto label_035C;\n            } else if (var0 == 0x2095f2d4) {\n                // Dispatch table entry for endCrowdsale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03df;\n                endCrowdsale();\n                stop();\n            } else if (var0 == 0x2a1be747) {\n                // Dispatch table entry for rateFirstWeekEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateFirstWeekEnd();\n                goto label_038B;\n            } else if (var0 == 0x38af3eed) {\n                // Dispatch table entry for beneficiary()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = beneficiary();\n                goto label_035C;\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03df;\n                withdraw();\n                stop();\n            } else if (var0 == 0x3f3a78d5) {\n                // Dispatch table entry for rateAngelDay()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateAngelDay();\n                goto label_038B;\n            } else if (var0 == 0x46287ddb) {\n                // Dispatch table entry for rateLastWeekEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateLastWeekEnd();\n                goto label_038B;\n            } else if (var0 == 0x51c5d54d) {\n                // Dispatch table entry for rateSecondWeekEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateSecondWeekEnd();\n                goto label_038B;\n            } else if (var0 == 0x51ded741) {\n                // Dispatch table entry for rateThirdWeekEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateThirdWeekEnd();\n                goto label_038B;\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03df;\n                refund();\n                stop();\n            } else if (var0 == 0x5f48f393) {\n                // Dispatch table entry for maxAmount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = maxAmount();\n                goto label_038B;\n            } else if (var0 == 0x612472fe) {\n                // Dispatch table entry for toZT(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = msg.data[0x04:0x24];\n                var1 = toZT(var2);\n                goto label_038B;\n            } else if (var0 == 0x6fb66278) {\n                // Dispatch table entry for ratePreICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = ratePreICO();\n                goto label_038B;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_038B;\n            } else if (var0 == 0x9b2cb5d8) {\n                // Dispatch table entry for minAmount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = minAmount();\n                goto label_038B;\n            } else if (var0 == 0x9c472c70) {\n                // Dispatch table entry for rateSecondWeek()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateSecondWeek();\n                goto label_038B;\n            } else if (var0 == 0x9c5e9023) {\n                // Dispatch table entry for confirmBeneficiary()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03df;\n                confirmBeneficiary();\n                stop();\n            } else if (var0 == 0xa969574d) {\n                // Dispatch table entry for ratePreICOEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = ratePreICOEnd();\n                goto label_038B;\n            } else if (var0 == 0xb2394040) {\n                // Dispatch table entry for rateThirdWeek()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateThirdWeek();\n                goto label_038B;\n            } else if (var0 == 0xb3007dc6) {\n                // Dispatch table entry for rateFirstWeek()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateFirstWeek();\n                goto label_038B;\n            } else if (var0 == 0xb65a1350) {\n                // Dispatch table entry for rateLastWeek()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateLastWeek();\n                goto label_038B;\n            } else if (var0 == 0xbe9a6555) {\n                // Dispatch table entry for start()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = start();\n                goto label_038B;\n            } else if (var0 == 0xc040e6b8) {\n                // Dispatch table entry for stage()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06c1;\n                var2 = stage();\n                var3 = memory[0x40:0x60];\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 > 0x02) { assert(); }\n            \n                var temp17 = var4;\n                memory[temp17:temp17 + 0x20] = var5 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0xcbf2ad23) {\n                // Dispatch table entry for confirmedBy()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = confirmedBy();\n                goto label_035C;\n            } else if (var0 == 0xefbe1c1c) {\n                // Dispatch table entry for end()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = end();\n                goto label_038B;\n            } else if (var0 == 0xf0ea4bfc) {\n                // Dispatch table entry for raised()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = raised();\n                goto label_038B;\n            } else if (var0 == 0xf1d841f1) {\n                // Dispatch table entry for minAcceptedAmount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = minAcceptedAmount();\n                goto label_038B;\n            } else { goto label_0172; }\n        }\n    }\n    \n    function toZT(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = 0x01;\n        var var6 = storage[0x12] & 0xff;\n    \n        if (var6 > 0x02) { assert(); }\n    \n        var temp0 = var6 != var5;\n        var5 = temp0;\n    \n        if (var5) {\n            var5 = block.timestamp >= storage[0x13];\n        \n            if (!var5) { goto label_07BB; }\n            else { goto label_07B4; }\n        } else if (!var5) {\n        label_07BB:\n        \n            if (!var5) {\n            label_0846:\n                var2 = (var1 * arg0 * 0x05f5e100) / 0x0de0b6b3a7640000;\n            \n                if (storage[0x15] <= storage[0x03]) {\n                label_08A6:\n                    return var2;\n                } else {\n                    var5 = storage[0x03];\n                    var6 = storage[0x15];\n                \n                    if (!var5) { assert(); }\n                \n                    var3 = var6 / var5;\n                    var4 = 0x00;\n                \n                    if (var4 >= var3) { goto label_08A6; }\n                \n                label_088E:\n                    var2 = (var2 * 0x399304c9) / 0x3b9aca00;\n                    var4 = var4 + 0x01;\n                \n                    if (var4 >= var3) { goto label_08A6; }\n                    else { goto label_088E; }\n                }\n            } else {\n            label_07C1:\n            \n                if (block.timestamp <= storage[0x13] + storage[0x0c]) {\n                    var1 = storage[0x06];\n                    goto label_0846;\n                } else if (block.timestamp <= storage[0x13] + storage[0x0d]) {\n                    var1 = storage[0x07];\n                    goto label_0846;\n                } else if (block.timestamp <= storage[0x13] + storage[0x0e]) {\n                    var1 = storage[0x08];\n                    goto label_0846;\n                } else if (block.timestamp <= storage[0x13] + storage[0x0f]) {\n                    var1 = storage[0x09];\n                    goto label_0846;\n                } else if (block.timestamp <= storage[0x13] + storage[0x10]) {\n                    var1 = storage[0x0a];\n                    goto label_0846;\n                } else if (block.timestamp > storage[0x13] + storage[0x11]) { goto label_0846; }\n                else {\n                    var1 = storage[0x0b];\n                    goto label_0846;\n                }\n            }\n        } else {\n        label_07B4:\n        \n            if (block.timestamp > storage[0x14]) { goto label_0846; }\n            else { goto label_07C1; }\n        }\n    }\n    \n    function creator() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function rateAngelDayEnd() returns (var r0) { return storage[0x0d]; }\n    \n    function ztToken() returns (var r0) { return storage[0x16] & 0x02 ** 0xa0 - 0x01; }\n    \n    function endCrowdsale() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x12] & 0xff;\n    \n        if (var2 > 0x02) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (block.timestamp < storage[0x14]) { revert(memory[0x00:0x00]); }\n    \n        storage[0x12] = (storage[0x12] & ~0xff) | 0x01;\n    }\n    \n    function rateFirstWeekEnd() returns (var r0) { return storage[0x0e]; }\n    \n    function beneficiary() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x01;\n        var var3 = var2;\n        var var4 = storage[0x12] & 0xff;\n    \n        if (var4 > 0x02) { assert(); }\n    \n        if (var4 != var3) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x15] < storage[0x03]) { revert(memory[0x00:0x00]); }\n    \n        var0 = address(this).balance;\n        var temp0 = (var0 * 0x05) / 0x03e8;\n        var1 = temp0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x01] & 0x02 ** 0xa0 - 0x01).call.gas(!var1 * 0x08fc).value(var1)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var0 - var1;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n    \n        if (!temp5) { revert(memory[0x00:0x00]); }\n    \n        storage[0x12] = (storage[0x12] & ~0xff) | 0x02;\n    }\n    \n    function rateAngelDay() returns (var r0) { return storage[0x07]; }\n    \n    function rateLastWeekEnd() returns (var r0) { return storage[0x11]; }\n    \n    function rateSecondWeekEnd() returns (var r0) { return storage[0x0f]; }\n    \n    function rateThirdWeekEnd() returns (var r0) { return storage[0x10]; }\n    \n    function refund() {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = var1;\n        var var3 = storage[0x12] & 0xff;\n    \n        if (var3 > 0x02) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x15] >= storage[0x03]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x17;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        storage[temp0] = 0x00;\n        var0 = temp1;\n        var2 = var0 > 0x00;\n    \n        if (var2) {\n            var temp2 = var0;\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n        \n            if (temp4) { goto label_0AC1; }\n            else { goto label_0AA6; }\n        } else if (!var2) {\n        label_0AC1:\n            return;\n        } else {\n        label_0AA6:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x17;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            return;\n        }\n    }\n    \n    function maxAmount() returns (var r0) { return storage[0x04]; }\n    \n    function ratePreICO() returns (var r0) { return storage[0x06]; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function minAmount() returns (var r0) { return storage[0x03]; }\n    \n    function rateSecondWeek() returns (var r0) { return storage[0x09]; }\n    \n    function confirmBeneficiary() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = msg.sender | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function ratePreICOEnd() returns (var r0) { return storage[0x0c]; }\n    \n    function rateThirdWeek() returns (var r0) { return storage[0x0a]; }\n    \n    function rateFirstWeek() returns (var r0) { return storage[0x08]; }\n    \n    function rateLastWeek() returns (var r0) { return storage[0x0b]; }\n    \n    function start() returns (var r0) { return storage[0x13]; }\n    \n    function stage() returns (var r0) { return storage[0x12] & 0xff; }\n    \n    function confirmedBy() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function end() returns (var r0) { return storage[0x14]; }\n    \n    function raised() returns (var r0) { return storage[0x15]; }\n    \n    function minAcceptedAmount() returns (var r0) { return storage[0x05]; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0172:\n            var var0 = 0x00;\n            var var1 = var0;\n            var var2 = var1;\n            var var3 = var2;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = storage[0x12] & 0xff;\n        \n            if (var6 > 0x02) { assert(); }\n        \n            if (var6 != var5) { revert(memory[0x00:0x00]); }\n        \n            if (block.timestamp <= storage[0x13]) { revert(memory[0x00:0x00]); }\n        \n            if (block.timestamp >= storage[0x14]) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value < storage[0x05]) { revert(memory[0x00:0x00]); }\n        \n            var0 = msg.sender;\n            var1 = msg.value;\n            var5 = 0x01d0;\n            var6 = msg.value;\n            var5 = toZT(var6);\n            var temp0 = var5;\n            var2 = temp0;\n            var5 = storage[0x16] & 0x02 ** 0xa0 - 0x01;\n            var6 = 0x867904b4;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = (var6 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = var2;\n            var var7 = temp1 + 0x44;\n            var var8 = 0x20;\n            var var9 = memory[0x40:0x60];\n            var var10 = var7 - var9;\n            var var11 = var9;\n            var var12 = 0x00;\n            var var13 = var5;\n        \n            if (!address(var13).code.length) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas - 0x02c6).value(var12)(memory[var11:var11 + var10]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n        \n            if (block.timestamp > storage[0x13] + storage[0x0c]) {\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x17;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                var temp4 = var1;\n                storage[temp3] = temp4 + storage[temp3];\n                var temp5 = temp4 + storage[0x15];\n                storage[0x15] = temp5;\n            \n                if (temp5 < storage[0x04]) { stop(); }\n            \n            label_032C:\n                storage[0x12] = (storage[0x12] & ~0xff) | 0x01;\n                stop();\n            } else {\n                var temp6 = (var1 * 0x05) / 0x03e8;\n                var3 = temp6;\n                var temp7 = memory[0x40:0x60];\n                var temp8;\n                temp8, memory[temp7:temp7 + 0x00] = address(storage[0x01] & 0x02 ** 0xa0 - 0x01).call.gas(!var3 * 0x08fc).value(var3)(memory[temp7:temp7 + memory[0x40:0x60] - temp7]);\n            \n                if (!temp8) { revert(memory[0x00:0x00]); }\n            \n                var temp9 = var1 - var3;\n                var temp10 = memory[0x40:0x60];\n                var temp11;\n                temp11, memory[temp10:temp10 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp9 * 0x08fc).value(temp9)(memory[temp10:temp10 + memory[0x40:0x60] - temp10]);\n            \n                if (!temp11) { revert(memory[0x00:0x00]); }\n            \n                var temp12 = var1 + storage[0x15];\n                storage[0x15] = temp12;\n            \n                if (temp12 < storage[0x04]) { stop(); }\n                else { goto label_032C; }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x02d05d3f) {\n                // Dispatch table entry for creator()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = creator();\n            \n            label_035C:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x1722a8b0) {\n                // Dispatch table entry for rateAngelDayEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateAngelDayEnd();\n            \n            label_038B:\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x19e66508) {\n                // Dispatch table entry for ztToken()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = ztToken();\n                goto label_035C;\n            } else if (var0 == 0x2095f2d4) {\n                // Dispatch table entry for endCrowdsale()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03df;\n                endCrowdsale();\n                stop();\n            } else if (var0 == 0x2a1be747) {\n                // Dispatch table entry for rateFirstWeekEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateFirstWeekEnd();\n                goto label_038B;\n            } else if (var0 == 0x38af3eed) {\n                // Dispatch table entry for beneficiary()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = beneficiary();\n                goto label_035C;\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03df;\n                withdraw();\n                stop();\n            } else if (var0 == 0x3f3a78d5) {\n                // Dispatch table entry for rateAngelDay()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateAngelDay();\n                goto label_038B;\n            } else if (var0 == 0x46287ddb) {\n                // Dispatch table entry for rateLastWeekEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateLastWeekEnd();\n                goto label_038B;\n            } else if (var0 == 0x51c5d54d) {\n                // Dispatch table entry for rateSecondWeekEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateSecondWeekEnd();\n                goto label_038B;\n            } else if (var0 == 0x51ded741) {\n                // Dispatch table entry for rateThirdWeekEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateThirdWeekEnd();\n                goto label_038B;\n            } else if (var0 == 0x590e1ae3) {\n                // Dispatch table entry for refund()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03df;\n                refund();\n                stop();\n            } else if (var0 == 0x5f48f393) {\n                // Dispatch table entry for maxAmount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = maxAmount();\n                goto label_038B;\n            } else if (var0 == 0x612472fe) {\n                // Dispatch table entry for toZT(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = msg.data[0x04:0x24];\n                var1 = toZT(var2);\n                goto label_038B;\n            } else if (var0 == 0x6fb66278) {\n                // Dispatch table entry for ratePreICO()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = ratePreICO();\n                goto label_038B;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_038B;\n            } else if (var0 == 0x9b2cb5d8) {\n                // Dispatch table entry for minAmount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = minAmount();\n                goto label_038B;\n            } else if (var0 == 0x9c472c70) {\n                // Dispatch table entry for rateSecondWeek()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateSecondWeek();\n                goto label_038B;\n            } else if (var0 == 0x9c5e9023) {\n                // Dispatch table entry for confirmBeneficiary()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03df;\n                confirmBeneficiary();\n                stop();\n            } else if (var0 == 0xa969574d) {\n                // Dispatch table entry for ratePreICOEnd()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = ratePreICOEnd();\n                goto label_038B;\n            } else if (var0 == 0xb2394040) {\n                // Dispatch table entry for rateThirdWeek()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateThirdWeek();\n                goto label_038B;\n            } else if (var0 == 0xb3007dc6) {\n                // Dispatch table entry for rateFirstWeek()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateFirstWeek();\n                goto label_038B;\n            } else if (var0 == 0xb65a1350) {\n                // Dispatch table entry for rateLastWeek()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = rateLastWeek();\n                goto label_038B;\n            } else if (var0 == 0xbe9a6555) {\n                // Dispatch table entry for start()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = start();\n                goto label_038B;\n            } else if (var0 == 0xc040e6b8) {\n                // Dispatch table entry for stage()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06c1;\n                var2 = stage();\n                var3 = memory[0x40:0x60];\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 > 0x02) { assert(); }\n            \n                var temp17 = var4;\n                memory[temp17:temp17 + 0x20] = var5 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0xcbf2ad23) {\n                // Dispatch table entry for confirmedBy()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035c;\n                var2 = confirmedBy();\n                goto label_035C;\n            } else if (var0 == 0xefbe1c1c) {\n                // Dispatch table entry for end()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = end();\n                goto label_038B;\n            } else if (var0 == 0xf0ea4bfc) {\n                // Dispatch table entry for raised()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = raised();\n                goto label_038B;\n            } else if (var0 == 0xf1d841f1) {\n                // Dispatch table entry for minAcceptedAmount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = minAcceptedAmount();\n                goto label_038B;\n            } else { goto label_0172; }\n        }\n    }\n    \n    function toZT(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = 0x01;\n        var var6 = storage[0x12] & 0xff;\n    \n        if (var6 > 0x02) { assert(); }\n    \n        var temp0 = var6 != var5;\n        var5 = temp0;\n    \n        if (var5) {\n            var5 = block.timestamp >= storage[0x13];\n        \n            if (!var5) { goto label_07BB; }\n            else { goto label_07B4; }\n        } else if (!var5) {\n        label_07BB:\n        \n            if (!var5) {\n            label_0846:\n                var2 = (var1 * arg0 * 0x05f5e100) / 0x0de0b6b3a7640000;\n            \n                if (storage[0x15] <= storage[0x03]) {\n                label_08A6:\n                    return var2;\n                } else {\n                    var5 = storage[0x03];\n                    var6 = storage[0x15];\n                \n                    if (!var5) { assert(); }\n                \n                    var3 = var6 / var5;\n                    var4 = 0x00;\n                \n                    if (var4 >= var3) { goto label_08A6; }\n                \n                label_088E:\n                    var2 = (var2 * 0x399304c9) / 0x3b9aca00;\n                    var4 = var4 + 0x01;\n                \n                    if (var4 >= var3) { goto label_08A6; }\n                    else { goto label_088E; }\n                }\n            } else {\n            label_07C1:\n            \n                if (block.timestamp <= storage[0x13] + storage[0x0c]) {\n                    var1 = storage[0x06];\n                    goto label_0846;\n                } else if (block.timestamp <= storage[0x13] + storage[0x0d]) {\n                    var1 = storage[0x07];\n                    goto label_0846;\n                } else if (block.timestamp <= storage[0x13] + storage[0x0e]) {\n                    var1 = storage[0x08];\n                    goto label_0846;\n                } else if (block.timestamp <= storage[0x13] + storage[0x0f]) {\n                    var1 = storage[0x09];\n                    goto label_0846;\n                } else if (block.timestamp <= storage[0x13] + storage[0x10]) {\n                    var1 = storage[0x0a];\n                    goto label_0846;\n                } else if (block.timestamp > storage[0x13] + storage[0x11]) { goto label_0846; }\n                else {\n                    var1 = storage[0x0b];\n                    goto label_0846;\n                }\n            }\n        } else {\n        label_07B4:\n        \n            if (block.timestamp > storage[0x14]) { goto label_0846; }\n            else { goto label_07C1; }\n        }\n    }\n    \n    function creator() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function rateAngelDayEnd() returns (var r0) { return storage[0x0d]; }\n    \n    function ztToken() returns (var r0) { return storage[0x16] & 0x02 ** 0xa0 - 0x01; }\n    \n    function endCrowdsale() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x12] & 0xff;\n    \n        if (var2 > 0x02) { assert(); }\n    \n        if (var2 != var1) { revert(memory[0x00:0x00]); }\n    \n        if (block.timestamp < storage[0x14]) { revert(memory[0x00:0x00]); }\n    \n        storage[0x12] = (storage[0x12] & ~0xff) | 0x01;\n    }\n    \n    function rateFirstWeekEnd() returns (var r0) { return storage[0x0e]; }\n    \n    function beneficiary() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x01;\n        var var3 = var2;\n        var var4 = storage[0x12] & 0xff;\n    \n        if (var4 > 0x02) { assert(); }\n    \n        if (var4 != var3) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x15] < storage[0x03]) { revert(memory[0x00:0x00]); }\n    \n        var0 = address(this).balance;\n        var temp0 = (var0 * 0x05) / 0x03e8;\n        var1 = temp0;\n        var temp1 = memory[0x40:0x60];\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(storage[0x01] & 0x02 ** 0xa0 - 0x01).call.gas(!var1 * 0x08fc).value(var1)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n    \n        if (!temp2) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var0 - var1;\n        var temp4 = memory[0x40:0x60];\n        var temp5;\n        temp5, memory[temp4:temp4 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp3 * 0x08fc).value(temp3)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n    \n        if (!temp5) { revert(memory[0x00:0x00]); }\n    \n        storage[0x12] = (storage[0x12] & ~0xff) | 0x02;\n    }\n    \n    function rateAngelDay() returns (var r0) { return storage[0x07]; }\n    \n    function rateLastWeekEnd() returns (var r0) { return storage[0x11]; }\n    \n    function rateSecondWeekEnd() returns (var r0) { return storage[0x0f]; }\n    \n    function rateThirdWeekEnd() returns (var r0) { return storage[0x10]; }\n    \n    function refund() {\n        var var0 = 0x00;\n        var var1 = 0x01;\n        var var2 = var1;\n        var var3 = storage[0x12] & 0xff;\n    \n        if (var3 > 0x02) { assert(); }\n    \n        if (var3 != var2) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x15] >= storage[0x03]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x17;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        storage[temp0] = 0x00;\n        var0 = temp1;\n        var2 = var0 > 0x00;\n    \n        if (var2) {\n            var temp2 = var0;\n            var temp3 = memory[0x40:0x60];\n            var temp4;\n            temp4, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n        \n            if (temp4) { goto label_0AC1; }\n            else { goto label_0AA6; }\n        } else if (!var2) {\n        label_0AC1:\n            return;\n        } else {\n        label_0AA6:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x17;\n            storage[keccak256(memory[0x00:0x40])] = var0;\n            return;\n        }\n    }\n    \n    function maxAmount() returns (var r0) { return storage[0x04]; }\n    \n    function ratePreICO() returns (var r0) { return storage[0x06]; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x17;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function minAmount() returns (var r0) { return storage[0x03]; }\n    \n    function rateSecondWeek() returns (var r0) { return storage[0x09]; }\n    \n    function confirmBeneficiary() {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = msg.sender | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function ratePreICOEnd() returns (var r0) { return storage[0x0c]; }\n    \n    function rateThirdWeek() returns (var r0) { return storage[0x0a]; }\n    \n    function rateFirstWeek() returns (var r0) { return storage[0x08]; }\n    \n    function rateLastWeek() returns (var r0) { return storage[0x0b]; }\n    \n    function start() returns (var r0) { return storage[0x13]; }\n    \n    function stage() returns (var r0) { return storage[0x12] & 0xff; }\n    \n    function confirmedBy() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function end() returns (var r0) { return storage[0x14]; }\n    \n    function raised() returns (var r0) { return storage[0x15]; }\n    \n    function minAcceptedAmount() returns (var r0) { return storage[0x05]; }\n}\n\n.",
	"status": "1",
	"time_cost": 35.19649410247803,
	"usage": {
		"completion_tokens": 550,
		"prompt_tokens": 6186,
		"total_tokens": 6736
	}
}