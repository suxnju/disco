{
	"address": "0xa8df33a40fe2e3278e4d94a974f70778043fbd20",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here is a Solidity smart contract that follows the logic of the decompiled code:\n\n```solidity\npragma solidity ^0.8.4;\n\ncontract Crowdsale {\n    uint256 private _fundingGoal;\n    uint256 private _amountRaised;\n    uint256 private _deadline;\n    uint256 private _price;\n    uint256 private _usd;\n    uint256 private _bonus;\n    mapping (address => uint256) private _balanceOf;\n    address private _owner;\n    bool private _safeWithdrawal;\n    address private _beneficiary;\n    address private _tokenReward;\n\n    event FundTransfer(address indexed receiver, uint256 amount, bool isContribution);\n    event GoalReached(address recipient, uint256 totalAmountRaised);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    constructor(address owner, address beneficiary, uint256 fundingGoal, uint256 price, address tokenReward) {\n        _owner = owner;\n        _beneficiary = beneficiary;\n        _fundingGoal = fundingGoal;\n        _price = price;\n        _tokenReward = tokenReward;\n    }\n\n    function checkGoalReached() public {\n        require(block.timestamp >= _deadline);\n        if (_amountRaised >= _fundingGoal) {\n            _safeWithdrawal = true;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n    }\n\n    function setUSDPrice(uint256 newPrice) public {\n        require(msg.sender == _owner);\n        _usd = newPrice;\n    }\n\n    function deadline() public view returns (uint256) {\n        return _deadline;\n    }\n\n    function beneficiary() public view returns (address) {\n        return _beneficiary;\n    }\n\n    function tokenReward() public view returns (address) {\n        return _tokenReward;\n    }\n\n    function balanceOf(address user) public view returns (uint256) {\n        return _balanceOf[user];\n    }\n\n    function bonus() public view returns (uint256) {\n        return _bonus;\n    }\n\n    function fundingGoal() public view returns (uint256) {\n        return _fundingGoal;\n    }\n\n    function amountRaised() public view returns (uint256) {\n        return _amountRaised;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function price() public view returns (uint256) {\n        return _price;\n    }\n\n    function finishCrowdsale() public {\n        require(msg.sender == _owner);\n        _deadline = block.timestamp;\n    }\n\n    function changeBonus(uint256 newBonus) public {\n        require(msg.sender == _owner);\n        _bonus = newBonus;\n    }\n\n    function usd() public view returns (uint256) {\n        return _usd;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner);\n        require(newOwner != address(0));\n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    function safeWithdrawal() public {\n        if (block.timestamp >= _deadline && !_safeWithdrawal) {\n            uint256 amount = _balanceOf[msg.sender];\n            _balanceOf[msg.sender] = 0;\n            payable(msg.sender).transfer(amount);\n            emit FundTransfer(msg.sender, amount, false);\n        }\n    }\n\n    receive() external payable {\n        require(msg.value > 0);\n        _balanceOf[msg.sender] += msg.value;\n        _amountRaised += msg.value;\n        uint256 tokenAmount = msg.value / _price;\n        // TokenReward is an ERC20 token\n        // IERC20(_tokenReward).transfer(msg.sender, tokenAmount);\n        emit FundTransfer(msg.sender, msg.value, true);\n    }\n}\n```\nPlease note that this code is simplified and might require additional validation and error handling. Also, the `TokenReward` variable is supposed to be an ERC20 token, so you might need to include the interface of ERC20 in order to interact with it.",
				"role": "assistant"
			}
		}
	],
	"created": 1701456437,
	"id": "chatcmpl-8R2phI4VUkYrA9DltNnIEbRzbKKm1",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.14 07:00 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x2]\nuint256 _amountRaised; // STORAGE[0x3]\nuint256 _deadline; // STORAGE[0x4]\nuint256 _price; // STORAGE[0x5]\nuint256 _usd; // STORAGE[0x6]\nuint256 _bonus; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\nuint8 _safeWithdrawal; // STORAGE[0xa] bytes 0 to 0\nuint8 stor_a_1_1; // STORAGE[0xa] bytes 1 to 1\naddress _beneficiary; // STORAGE[0x1] bytes 0 to 19\naddress _tokenReward; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\nOwnershipTransferred(address, address);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            _safeWithdrawal = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        stor_a_1_1 = 1;\n    }\n}\n\nfunction setUSDPrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _usd = varg0;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction bonus() public nonPayable { \n    return _bonus;\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction finshCrowdsale() public nonPayable { \n    require(msg.sender == _owner);\n    _deadline = block.timestamp;\n    stor_a_1_1 = 1;\n}\n\nfunction changeBonus(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _bonus = varg0;\n}\n\nfunction usd() public nonPayable { \n    return _usd;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (!_safeWithdrawal) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(!_balanceOf[msg.sender] * 2300);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = _safeWithdrawal;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v3) {\n                _safeWithdrawal = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction 0x6b1(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = v1 = varg1 * varg0;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    require(_beneficiary != 0);\n    require(!stor_a_1_1);\n    require(msg.value != 0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    assert(stor_5_0_0);\n    v0 = 0x6b1(0xde0b6b3a7640000, msg.value / _price);\n    v1 = 0x6b1(_bonus, v0);\n    assert(100);\n    assert(v0 + v1 / 100 >= v0);\n    require(_tokenReward.code.size);\n    v2 = _tokenReward.transfer(msg.sender, v0 + v1 / 100).gas(msg.gas - 710);\n    require(v2);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x147d959a == function_selector) {\n            setUSDPrice(uint256);\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x75b4d78c == function_selector) {\n            bonus();\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xb14f6439 == function_selector) {\n            finshCrowdsale();\n        } else if (0xc1ff808d == function_selector) {\n            changeBonus(uint256);\n        } else if (0xd63a6ccd == function_selector) {\n            usd();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 07:00 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x2]\nuint256 _amountRaised; // STORAGE[0x3]\nuint256 _deadline; // STORAGE[0x4]\nuint256 _price; // STORAGE[0x5]\nuint256 _usd; // STORAGE[0x6]\nuint256 _bonus; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\nuint8 _safeWithdrawal; // STORAGE[0xa] bytes 0 to 0\nuint8 stor_a_1_1; // STORAGE[0xa] bytes 1 to 1\naddress _beneficiary; // STORAGE[0x1] bytes 0 to 19\naddress _tokenReward; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\nOwnershipTransferred(address, address);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            _safeWithdrawal = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        stor_a_1_1 = 1;\n    }\n}\n\nfunction setUSDPrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _usd = varg0;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction bonus() public nonPayable { \n    return _bonus;\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction finshCrowdsale() public nonPayable { \n    require(msg.sender == _owner);\n    _deadline = block.timestamp;\n    stor_a_1_1 = 1;\n}\n\nfunction changeBonus(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _bonus = varg0;\n}\n\nfunction usd() public nonPayable { \n    return _usd;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (!_safeWithdrawal) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(!_balanceOf[msg.sender] * 2300);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = _safeWithdrawal;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v3) {\n                _safeWithdrawal = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction 0x6b1(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = v1 = varg1 * varg0;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    require(_beneficiary != 0);\n    require(!stor_a_1_1);\n    require(msg.value != 0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    assert(stor_5_0_0);\n    v0 = 0x6b1(0xde0b6b3a7640000, msg.value / _price);\n    v1 = 0x6b1(_bonus, v0);\n    assert(100);\n    assert(v0 + v1 / 100 >= v0);\n    require(_tokenReward.code.size);\n    v2 = _tokenReward.transfer(msg.sender, v0 + v1 / 100).gas(msg.gas - 710);\n    require(v2);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x147d959a == function_selector) {\n            setUSDPrice(uint256);\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x75b4d78c == function_selector) {\n            bonus();\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xb14f6439 == function_selector) {\n            finshCrowdsale();\n        } else if (0xc1ff808d == function_selector) {\n            changeBonus(uint256);\n        } else if (0xd63a6ccd == function_selector) {\n            usd();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 07:00 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x2]\nuint256 _amountRaised; // STORAGE[0x3]\nuint256 _deadline; // STORAGE[0x4]\nuint256 _price; // STORAGE[0x5]\nuint256 _usd; // STORAGE[0x6]\nuint256 _bonus; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\nuint8 _safeWithdrawal; // STORAGE[0xa] bytes 0 to 0\nuint8 stor_a_1_1; // STORAGE[0xa] bytes 1 to 1\naddress _beneficiary; // STORAGE[0x1] bytes 0 to 19\naddress _tokenReward; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\nOwnershipTransferred(address, address);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            _safeWithdrawal = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        stor_a_1_1 = 1;\n    }\n}\n\nfunction setUSDPrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _usd = varg0;\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction bonus() public nonPayable { \n    return _bonus;\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction finshCrowdsale() public nonPayable { \n    require(msg.sender == _owner);\n    _deadline = block.timestamp;\n    stor_a_1_1 = 1;\n}\n\nfunction changeBonus(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _bonus = varg0;\n}\n\nfunction usd() public nonPayable { \n    return _usd;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 != 0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (!_safeWithdrawal) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(!_balanceOf[msg.sender] * 2300);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = _safeWithdrawal;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v3) {\n                _safeWithdrawal = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction 0x6b1(uint256 varg0, uint256 varg1) private { \n    if (varg1 != 0) {\n        v0 = v1 = varg1 * varg0;\n        assert(varg1);\n        assert(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction fallback() public payable { \n    require(_beneficiary != 0);\n    require(!stor_a_1_1);\n    require(msg.value != 0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    assert(stor_5_0_0);\n    v0 = 0x6b1(0xde0b6b3a7640000, msg.value / _price);\n    v1 = 0x6b1(_bonus, v0);\n    assert(100);\n    assert(v0 + v1 / 100 >= v0);\n    require(_tokenReward.code.size);\n    v2 = _tokenReward.transfer(msg.sender, v0 + v1 / 100).gas(msg.gas - 710);\n    require(v2);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x147d959a == function_selector) {\n            setUSDPrice(uint256);\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x75b4d78c == function_selector) {\n            bonus();\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xb14f6439 == function_selector) {\n            finshCrowdsale();\n        } else if (0xc1ff808d == function_selector) {\n            changeBonus(uint256);\n        } else if (0xd63a6ccd == function_selector) {\n            usd();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 44.724265575408936,
	"usage": {
		"completion_tokens": 821,
		"prompt_tokens": 1656,
		"total_tokens": 2477
	}
}