{
	"address": "0x6de3cc59152e19f108378984f45e20a34c9f6338",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_010E:\n            var var0 = 0x0116;\n            func_03A3();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x27dc297e) {\n                // Dispatch table entry for __callback(bytes32,string)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x0116;\n                var var2 = msg.data[0x04:0x24];\n                var temp0 = msg.data[0x24:0x44];\n                var temp1 = msg.data[temp0 + 0x04:temp0 + 0x04 + 0x20];\n                var temp2 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp2:temp2 + 0x20] = temp1;\n                memory[temp2 + 0x20:temp2 + 0x20 + temp1] = msg.data[temp0 + 0x24:temp0 + 0x24 + temp1];\n                var var3 = temp2;\n                var var4 = 0x0443;\n                var var5 = var2;\n                var var6 = var3;\n                var var7 = 0x00;\n                var var8 = memory[0x40:0x60];\n            \n                if (MSIZE() < var8) {\n                    func_0429(var5, var6, var7, var8);\n                    // Error: Could not resolve jump destination!\n                } else {\n                    var temp3 = MSIZE();\n                    var temp4 = var7;\n                    memory[temp3:temp3 + 0x20] = temp4;\n                    memory[0x40:0x60] = temp3 + (temp4 + 0x1f & ~0x1f) + 0x20;\n                    var7 = temp3;\n                    __callback(var5, var6, var7);\n                    // Error: Could not resolve method call return address!\n                }\n            } else if (var0 == 0x2cca664b) {\n                // Dispatch table entry for totalPlayerWinnings()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0181;\n                var2 = totalPlayerWinnings();\n            \n            label_0181:\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var2;\n                var temp6 = memory[0x40:0x60];\n                return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n            } else if (var0 == 0x2d462dbb) { goto label_010E; }\n                // Dispatch table entry for rollLo()\n            else if (var0 == 0x2e5b2168) {\n                // Dispatch table entry for maxBet()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0181;\n                var2 = maxBet();\n                goto label_0181;\n            } else if (var0 == 0x38bbfa50) {\n                // Dispatch table entry for __callback(bytes32,string,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0116;\n                var2 = msg.data[0x04:0x24];\n                var temp7 = msg.data[0x24:0x44];\n                var temp8 = msg.data[temp7 + 0x04:temp7 + 0x04 + 0x20];\n                var temp9 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp9 + (temp8 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp9:temp9 + 0x20] = temp8;\n                memory[temp9 + 0x20:temp9 + 0x20 + temp8] = msg.data[temp7 + 0x24:temp7 + 0x24 + temp8];\n                var3 = temp9;\n                var temp10 = msg.data[0x44:0x64] + 0x04;\n                var temp11 = msg.data[temp10:temp10 + 0x20];\n                var temp12 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp12 + (temp11 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp12:temp12 + 0x20] = temp11;\n                memory[temp12 + 0x20:temp12 + 0x20 + temp11] = msg.data[temp10 + 0x20:temp10 + 0x20 + temp11];\n                var4 = temp12;\n                __callback(var2, var3, var4);\n                stop();\n            } else if (var0 == 0x49714815) {\n                // Dispatch table entry for ownerKillContract()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0116;\n                var temp13 = 0x02 ** 0xa0 - 0x01;\n            \n                if (storage[0x05] & temp13 == temp13 & msg.sender) { selfdestruct(storage[0x05] & 0x02 ** 0xa0 - 0x01); }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x5c812737) {\n                // Dispatch table entry for payoutMultiplier()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0181;\n                var2 = payoutMultiplier();\n                goto label_0181;\n            } else if (var0 == 0x7ac37d58) {\n                // Dispatch table entry for ownerTransferEther(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0116;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                ownerTransferEther(var2, var3);\n                stop();\n            } else if (var0 == 0x7b1aa45f) {\n                // Dispatch table entry for ownerDeposit()\n                var1 = 0x0116;\n                ownerDeposit();\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a1;\n                var2 = owner();\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x9619367d) {\n                // Dispatch table entry for minBet()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0181;\n                var2 = minBet();\n                goto label_0181;\n            } else if (var0 == 0x96834e36) {\n                // Dispatch table entry for ownerSetStandardFee(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0116;\n                var2 = msg.data[0x04:0x24];\n                ownerSetStandardFee(var2);\n                stop();\n            } else if (var0 == 0x98a1e1ba) {\n                // Dispatch table entry for ownerSetLimits(uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0116;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                ownerSetLimits(var2, var3);\n                stop();\n            } else if (var0 == 0xb5a02db1) {\n                // Dispatch table entry for totalHouseWinnings()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0181;\n                var2 = totalHouseWinnings();\n                goto label_0181;\n            } else if (var0 == 0xc91cd9d0) {\n                // Dispatch table entry for minimumNumber()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0181;\n                var2 = minimumNumber();\n                goto label_0181;\n            } else if (var0 == 0xc9660d07) {\n                // Dispatch table entry for ownerSetEdgeRangeAndPayout(uint256,uint256,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0116;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64];\n                ownerSetEdgeRangeAndPayout(var2, var3, var4);\n                stop();\n            } else if (var0 == 0xcd5e3c5d) { goto label_010E; }\n                // Dispatch table entry for roll()\n            else if (var0 == 0xcf094497) {\n                // Dispatch table entry for betCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0181;\n                var2 = betCount();\n                goto label_0181;\n            } else if (var0 == 0xed81a68e) {\n                // Dispatch table entry for edgeRange()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0181;\n                var2 = edgeRange();\n                goto label_0181;\n            } else if (var0 == 0xf68016b7) {\n                // Dispatch table entry for gasLimit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0181;\n                var2 = gasLimit();\n                goto label_0181;\n            } else if (var0 == 0xf8140a7e) {\n                // Dispatch table entry for standardFee()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0181;\n                var2 = standardFee();\n                goto label_0181;\n            } else if (var0 == 0xf9befdef) {\n                // Dispatch table entry for ownerSetGasLimit(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0116;\n                var2 = msg.data[0x04:0x24];\n                ownerSetGasLimit(var2);\n                stop();\n            } else { goto label_010E; }\n        }\n    }\n    \n    function func_03A3() {\n        var var0 = 0x00;\n        var var1 = msg.value > storage[0x08];\n    \n        if (var1) {\n            if (var1) { revert(memory[0x00:0x00]); }\n        \n        label_03C0:\n            var1 = 0x03cf;\n            var var2 = 0x00;\n            var var3 = 0x02;\n            var var4 = storage[0x0b];\n            var1 = func_089D(var2, var3, var4);\n            memory[0x00:0x20] = var1;\n            memory[0x20:0x40] = 0x10;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            storage[temp0] = msg.sender | (storage[temp0] & ~(0x02 ** 0xa0 - 0x01));\n            memory[0x20:0x40] = 0x11;\n            storage[keccak256(memory[0x00:0x40])] = msg.value;\n            memory[0x20:0x40] = 0x12;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = storage[temp1] & ~0xff;\n            return;\n        } else if (msg.value >= storage[0x07]) { goto label_03C0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0429(var arg0, var arg1, var arg2, var arg3) {\n        var temp0 = arg2;\n        var temp1 = arg3;\n        memory[temp1:temp1 + 0x20] = temp0;\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f & ~0x1f) + 0x20;\n        arg2 = temp1;\n        __callback(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function totalPlayerWinnings() returns (var r0) { return storage[0x0e]; }\n    \n    function maxBet() returns (var r0) { return storage[0x08]; }\n    \n    function __callback(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x045e;\n        var2 = func_0B91();\n    \n        if (msg.sender != var2 & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x048a;\n        var var3 = storage[0x06];\n        var var4 = 0x01;\n        var2 = func_0D32(var3, var4);\n        storage[0x06] = var2;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x11;\n        var0 = storage[keccak256(memory[0x00:0x40])];\n        var2 = 0x04a9;\n        var3 = arg0;\n        var4 = arg1;\n        var var5 = arg2;\n        var2 = func_0D48(var3, var4, var5);\n        var2 = !!(var2 & 0xff);\n    \n        if (var2) {\n            if (!var2) {\n            label_04C2:\n                var2 = 0x010000;\n                var3 = var2;\n                var temp0 = arg1;\n                var4 = temp0;\n                var5 = memory[0x40:0x60];\n                var var6 = var5;\n                var var7 = var4 + 0x20;\n                var var8 = memory[var4:var4 + 0x20];\n                var var9 = var8;\n                var var10 = var6;\n                var var11 = var7;\n            \n                if (var9 < 0x20) {\n                label_04F7:\n                    var temp1 = 0x0100 ** (0x20 - var9) - 0x01;\n                    var temp2 = var10;\n                    memory[temp2:temp2 + 0x20] = (memory[temp2:temp2 + 0x20] & temp1) | (memory[var11:var11 + 0x20] & ~temp1);\n                    var temp3 = memory[0x40:0x60];\n                    var4 = keccak256(memory[temp3:temp3 + (var8 + var6) - temp3]);\n                \n                    if (!var3) { assert(); }\n                \n                    var3 = var4 % var3 * 0x64;\n                \n                    if (!var2) { assert(); }\n                \n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x12;\n                    var1 = var3 / var2;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] & 0xff) {\n                    label_071A:\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x10;\n                        var temp4 = keccak256(memory[0x00:0x40]);\n                        storage[temp4] = storage[temp4] & ~(0x02 ** 0xa0 - 0x01);\n                        memory[0x20:0x40] = 0x11;\n                        storage[keccak256(memory[0x00:0x40])] = 0x00;\n                        memory[0x20:0x40] = 0x12;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        storage[temp5] = storage[temp5] & ~0xff;\n                        return;\n                    } else if (var1 + storage[0x0d] >= 0x32 - storage[0x09]) {\n                        var temp6 = arg0;\n                        memory[0x00:0x20] = temp6;\n                        memory[0x20:0x40] = 0x12;\n                        var temp7 = storage[keccak256(memory[0x00:0x40])];\n                        memory[0x20:0x40] = 0x10;\n                        var temp8 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                        var temp9 = memory[0x40:0x60];\n                        memory[temp9:temp9 + 0x20] = var1 + storage[0x0d];\n                        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = var0;\n                        memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = !!0x00;\n                        var temp10 = memory[0x40:0x60];\n                        log(memory[temp10:temp10 + (temp9 + 0x60) - temp10], [0x7865f6116ad9c4556523ded997c85b71d9debf96b7ef58b865f988a7fe4860cd, storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01, !!(storage[keccak256(memory[0x00:0x40])] & 0xff)]);\n                        memory[0x00:0x20] = temp6;\n                        memory[0x20:0x40] = 0x10;\n                        var temp11 = memory[0x40:0x60];\n                        var temp12;\n                        temp12, memory[temp11:temp11 + 0x00] = address(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01).call.gas(0x00).value(0x01)(memory[temp11:temp11 + memory[0x40:0x60] - temp11]);\n                    \n                        if (!temp12) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = 0x0716;\n                        var3 = storage[0x0f];\n                        var4 = var0 * storage[0x0a];\n                        var2 = func_0D32(var3, var4);\n                        storage[0x0f] = var2;\n                        goto label_071A;\n                    } else {\n                        var temp13 = arg0;\n                        memory[0x00:0x20] = temp13;\n                        memory[0x20:0x40] = 0x12;\n                        var temp14 = storage[keccak256(memory[0x00:0x40])];\n                        memory[0x20:0x40] = 0x10;\n                        var temp15 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                        var temp16 = var0;\n                        var temp17 = memory[0x40:0x60];\n                        memory[temp17:temp17 + 0x20] = var1 + storage[0x0d];\n                        memory[temp17 + 0x20:temp17 + 0x20 + 0x20] = temp16;\n                        memory[temp17 + 0x40:temp17 + 0x40 + 0x20] = !!0x01;\n                        var temp18 = memory[0x40:0x60];\n                        log(memory[temp18:temp18 + (temp17 + 0x60) - temp18], [0x7865f6116ad9c4556523ded997c85b71d9debf96b7ef58b865f988a7fe4860cd, storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01, !!(storage[keccak256(memory[0x00:0x40])] & 0xff)]);\n                        memory[0x00:0x20] = temp13;\n                        memory[0x20:0x40] = 0x10;\n                        var temp19 = temp16 * storage[0x0a] - storage[0x0c];\n                        var temp20 = memory[0x40:0x60];\n                        var temp21;\n                        temp21, memory[temp20:temp20 + 0x00] = address(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01).call.gas(!temp19 * 0x08fc).value(temp19)(memory[temp20:temp20 + memory[0x40:0x60] - temp20]);\n                    \n                        if (!temp21) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = 0x0645;\n                        var3 = storage[0x0f];\n                        var4 = var0 * storage[0x0a];\n                        var2 = func_0D32(var3, var4);\n                        storage[0x0e] = var2;\n                        goto label_071A;\n                    }\n                } else {\n                label_04E1:\n                    var temp22 = var11;\n                    var temp23 = var10;\n                    memory[temp23:temp23 + 0x20] = memory[temp22:temp22 + 0x20];\n                    var9 = var9 + ~0x1f;\n                    var10 = temp23 + 0x20;\n                    var11 = temp22 + 0x20;\n                \n                    if (var9 < 0x20) { goto label_04F7; }\n                    else { goto label_04E1; }\n                }\n            } else {\n            label_04BE:\n                goto label_071A;\n            }\n        } else if (memory[arg2:arg2 + 0x20]) { goto label_04C2; }\n        else { goto label_04BE; }\n    }\n    \n    function payoutMultiplier() returns (var r0) { return storage[0x0a]; }\n    \n    function ownerTransferEther(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg1;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n    \n        if (temp3) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function ownerDeposit() {}\n    \n    function owner() returns (var r0) { return storage[0x05] & 0x02 ** 0xa0 - 0x01; }\n    \n    function minBet() returns (var r0) { return storage[0x07]; }\n    \n    function ownerSetStandardFee(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0c] = arg0;\n    }\n    \n    function ownerSetLimits(var arg0, var arg1) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = arg0;\n        storage[0x08] = arg1;\n    }\n    \n    function totalHouseWinnings() returns (var r0) { return storage[0x0f]; }\n    \n    function minimumNumber() returns (var r0) { return storage[0x0d]; }\n    \n    function ownerSetEdgeRangeAndPayout(var arg0, var arg1, var arg2) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x09] = arg0;\n        storage[0x0a] = arg1;\n        storage[0x0d] = arg2;\n    }\n    \n    function betCount() returns (var r0) { return storage[0x06]; }\n    \n    function edgeRange() returns (var r0) { return storage[0x09]; }\n    \n    function gasLimit() returns (var r0) { return storage[0x0b]; }\n    \n    function standardFee() returns (var r0) { return storage[0x0c]; }\n    \n    function ownerSetGasLimit(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x0b] = arg0;\n    }\n    \n    function func_089D(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x08a7;\n        var1 = func_299D();\n        var var2 = 0x08af;\n        var2 = func_299D();\n        var var3 = 0x08b7;\n        var3 = func_299D();\n        var var4 = 0x00;\n        var var5 = 0x08c1;\n        var5 = func_29AF();\n        var var6 = 0x00;\n        var var7 = !arg1;\n    \n        if (var7) {\n            if (var7) { revert(memory[0x00:0x00]); }\n        \n        label_08DA:\n            var7 = 0x01;\n            var var8 = memory[0x40:0x60];\n        \n            if (MSIZE() < var8) {\n                var temp0 = var7;\n                var temp1 = var8;\n                memory[temp1:temp1 + 0x20] = temp0;\n                memory[0x40:0x60] = temp1 + (temp0 + 0x1f & ~0x1f) + 0x20;\n                var1 = temp1;\n                var7 = arg1 * 0x02 ** 0xf8;\n                var8 = var1;\n                var var9 = 0x00;\n            \n                if (var9 >= memory[var8:var8 + 0x20]) { assert(); }\n            \n            label_0914:\n                memory[var8 + 0x20 + var9:var8 + 0x20 + var9 + 0x01] = byte(var7 & ~(0x02 ** 0xf8 - 0x01), 0x00);\n                var7 = 0x20;\n                var8 = memory[0x40:0x60];\n            \n                if (MSIZE() < var8) {\n                    var temp2 = var7;\n                    var temp3 = var8;\n                    memory[temp3:temp3 + 0x20] = temp2;\n                    memory[0x40:0x60] = temp3 + (temp2 + 0x1f & ~0x1f) + 0x20;\n                    var2 = temp3;\n                    var7 = 0x20;\n                    var8 = memory[0x40:0x60];\n                \n                    if (MSIZE() < var8) {\n                    label_0961:\n                        var temp4 = var7;\n                        var temp5 = var8;\n                        memory[temp5:temp5 + 0x20] = temp4;\n                        memory[0x40:0x60] = temp5 + (temp4 + 0x1f & ~0x1f) + 0x20;\n                        var3 = temp5;\n                        var7 = 0x0980;\n                        var7 = func_0E72();\n                    \n                    label_0980:\n                        var4 = var7;\n                        var temp6 = var2;\n                        memory[temp6:temp6 + 0x20] = 0x20;\n                        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = block.blockHash(block.number - 0x01) ~ block.coinbase ~ block.timestamp;\n                        var temp7 = var3;\n                        memory[temp7:temp7 + 0x20] = 0x20;\n                        memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var4;\n                        var temp8 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp8 + 0x60;\n                        memory[temp8:temp8 + 0x20] = temp6;\n                        var temp9 = temp8 + 0x20;\n                        memory[temp9:temp9 + 0x20] = var1;\n                        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = temp7;\n                        var5 = temp8;\n                        var7 = 0x09fb;\n                        var8 = arg0;\n                        var temp10 = memory[0x40:0x60];\n                        var9 = temp10;\n                        memory[0x40:0x60] = var9 + 0x40;\n                        memory[var9:var9 + 0x20] = 0x06;\n                        memory[var9 + 0x20:var9 + 0x20 + 0x20] = 0x72616e646f6d0000000000000000000000000000000000000000000000000000;\n                        var var10 = var5;\n                        var var11 = arg2;\n                        var7 = func_0FF3(var8, var9, var10, var11);\n                        var temp11 = var7;\n                        var6 = temp11;\n                        var7 = 0x0b84;\n                        var8 = var6;\n                        var9 = arg0 * 0x01000000000000000000000000000000000000000000000000;\n                        var temp12 = var5;\n                        var10 = memory[temp12 + 0x20:temp12 + 0x20 + 0x20];\n                        var11 = 0x02;\n                        var temp13 = memory[temp12:temp12 + 0x20];\n                        var var12 = temp13;\n                        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                        var var13 = memory[0x40:0x60];\n                        var var14 = var13;\n                        var var16 = memory[var12:var12 + 0x20];\n                        var var15 = var12 + 0x20;\n                        var var17 = var16;\n                        var var18 = var14;\n                        var var19 = var15;\n                    \n                        if (var17 < 0x20) {\n                            func_0A5E(var5, var8, var9, var10, var11, var12, var13, var14, var15, var16, var17, var18, var19);\n                            return var6;\n                        } else {\n                        label_0A48:\n                            var temp14 = var19;\n                            var temp15 = var18;\n                            memory[temp15:temp15 + 0x20] = memory[temp14:temp14 + 0x20];\n                            var17 = var17 + ~0x1f;\n                            var18 = temp15 + 0x20;\n                            var19 = temp14 + 0x20;\n                        \n                            if (var17 >= 0x20) { goto label_0A48; }\n                        \n                            func_0A5E(var5, var8, var9, var10, var11, var12, var13, var14, var15, var16, var17, var18, var19);\n                            // Error: Could not resolve method call return address!\n                        }\n                    } else {\n                    label_095F:\n                        var temp16 = MSIZE();\n                        var temp17 = var7;\n                        memory[temp16:temp16 + 0x20] = temp17;\n                        memory[0x40:0x60] = temp16 + (temp17 + 0x1f & ~0x1f) + 0x20;\n                        var3 = temp16;\n                        var7 = 0x0980;\n                        var7 = func_0E72();\n                        goto label_0980;\n                    }\n                } else {\n                    var temp18 = MSIZE();\n                    var temp19 = var7;\n                    memory[temp18:temp18 + 0x20] = temp19;\n                    memory[0x40:0x60] = temp18 + (temp19 + 0x1f & ~0x1f) + 0x20;\n                    var2 = temp18;\n                    var7 = 0x20;\n                    var8 = memory[0x40:0x60];\n                \n                    if (MSIZE() < var8) { goto label_0961; }\n                    else { goto label_095F; }\n                }\n            } else {\n                var temp20 = MSIZE();\n                var temp21 = var7;\n                memory[temp20:temp20 + 0x20] = temp21;\n                memory[0x40:0x60] = temp20 + (temp21 + 0x1f & ~0x1f) + 0x20;\n                var1 = temp20;\n                var7 = arg1 * 0x02 ** 0xf8;\n                var8 = var1;\n                var9 = 0x00;\n            \n                if (var9 < memory[var8:var8 + 0x20]) { goto label_0914; }\n                else { assert(); }\n            }\n        } else if (arg1 <= 0x20) { goto label_08DA; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0A5E(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10, var arg11, var arg12) {\n        var temp0 = 0x0100 ** (0x20 - arg10) - 0x01;\n        var temp1 = arg11;\n        memory[temp1:temp1 + 0x20] = (memory[arg12:arg12 + 0x20] & ~temp0) | (memory[temp1:temp1 + 0x20] & temp0);\n        arg5 = arg9 + arg7;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x20] = address(arg4).call.gas(msg.gas - 0x646e)(memory[temp2:temp2 + arg5 - temp2]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        arg4 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        arg5 = memory[arg0 + 0x40:arg0 + 0x40 + 0x20];\n        var temp4 = memory[0x40:0x60];\n        arg6 = temp4;\n        memory[arg6:arg6 + 0x20] = arg2 & ~0xffffffffffffffffffffffffffffffffffffffffffffffff;\n        arg7 = arg6 + 0x08;\n        var temp5 = arg3;\n        arg9 = memory[temp5:temp5 + 0x20];\n        arg8 = temp5 + 0x20;\n        arg10 = arg9;\n        arg11 = arg7;\n        arg12 = arg8;\n    \n        if (arg10 < 0x20) {\n        label_0AFE:\n            var temp6 = 0x0100 ** (0x20 - arg10) - 0x01;\n            var temp7 = arg11;\n            memory[temp7:temp7 + 0x20] = (memory[temp7:temp7 + 0x20] & temp6) | (memory[arg12:arg12 + 0x20] & ~temp6);\n            var temp8 = arg9 + arg7;\n            memory[temp8:temp8 + 0x20] = arg4;\n            arg7 = temp8 + 0x20;\n            var temp9 = arg5;\n            arg8 = temp9 + 0x20;\n            arg9 = memory[temp9:temp9 + 0x20];\n            arg10 = arg9;\n            arg11 = arg7;\n            arg12 = arg8;\n        \n            if (arg10 < 0x20) {\n            label_0B50:\n                var temp10 = 0x0100 ** (0x20 - arg10) - 0x01;\n                var temp11 = arg11;\n                memory[temp11:temp11 + 0x20] = (memory[temp11:temp11 + 0x20] & temp10) | (memory[arg12:arg12 + 0x20] & ~temp10);\n                var temp12 = memory[0x40:0x60];\n                arg2 = keccak256(memory[temp12:temp12 + (arg9 + arg7) - temp12]);\n                memory[0x00:0x20] = arg1;\n                memory[0x20:0x40] = 0x03;\n                storage[keccak256(memory[0x00:0x40])] = arg2;\n                return;\n            } else {\n            label_0B3A:\n                var temp13 = arg12;\n                var temp14 = arg11;\n                memory[temp14:temp14 + 0x20] = memory[temp13:temp13 + 0x20];\n                arg10 = arg10 + ~0x1f;\n                arg11 = temp14 + 0x20;\n                arg12 = temp13 + 0x20;\n            \n                if (arg10 < 0x20) { goto label_0B50; }\n                else { goto label_0B3A; }\n            }\n        } else {\n        label_0AE8:\n            var temp15 = arg12;\n            var temp16 = arg11;\n            memory[temp16:temp16 + 0x20] = memory[temp15:temp15 + 0x20];\n            arg10 = arg10 + ~0x1f;\n            arg11 = temp16 + 0x20;\n            arg12 = temp15 + 0x20;\n        \n            if (arg10 < 0x20) { goto label_0AFE; }\n            else { goto label_0AE8; }\n        }\n    }\n    \n    function func_0B91() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !(storage[var0] & 0x02 ** 0xa0 - 0x01);\n    \n        if (var1) {\n        label_0BBC:\n        \n            if (!var1) {\n            label_0BCD:\n                var1 = storage[0x00] & 0x02 ** 0xa0 - 0x01;\n                var var2 = 0x38cc4831;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n                var var3 = temp0 + 0x04;\n                var var4 = 0x20;\n                var var5 = memory[0x40:0x60];\n                var var6 = var3 - var5;\n                var var7 = var5;\n                var var8 = 0x00;\n                var var9 = var1;\n            \n                if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp1;\n                temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n            \n                if (!temp1) { revert(memory[0x00:0x00]); }\n            \n                var temp2 = 0x02 ** 0xa0 - 0x01;\n            \n                if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] & temp2 == temp2 & storage[0x01]) {\n                label_0CCA:\n                    var1 = storage[0x01] & 0x02 ** 0xa0 - 0x01;\n                    var2 = 0xc281d19e;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n                    var3 = temp3 + 0x04;\n                    var4 = 0x20;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                \n                    if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp4;\n                    temp4, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n                \n                    if (temp4) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var1 = storage[0x00] & 0x02 ** 0xa0 - 0x01;\n                    var2 = 0x38cc4831;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n                    var3 = temp5 + 0x04;\n                    var4 = 0x20;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                \n                    if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp6;\n                    temp6, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n                \n                    if (!temp6) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x01] = (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    goto label_0CCA;\n                }\n            } else {\n                var1 = 0x0bcb;\n                var2 = 0x00;\n                var1 = func_11FE(var2);\n                goto label_0BCD;\n            }\n        } else {\n            var1 = 0x0bba;\n            var2 = storage[0x00] & 0x02 ** 0xa0 - 0x01;\n            var1 = func_11FA(var2);\n            var1 = !var1;\n            goto label_0BBC;\n        }\n    }\n    \n    function func_0D32(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0D48(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg2;\n        var var3 = 0x00;\n    \n        if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n    \n        var2 = memory[var3 + var2 + 0x20:var3 + var2 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) != 0x4c00000000000000000000000000000000000000000000000000000000000000;\n    \n        if (var2) {\n        label_0DEA:\n        \n            if (var2) {\n            label_0E32:\n            \n                if (!var2) {\n                    var2 = 0x0e53;\n                    var3 = arg2;\n                    var var4 = arg0;\n                    var var5 = arg1;\n                    var var6 = 0x0e4e;\n                    var6 = func_1525();\n                    var2 = func_0E4E(var3, var4, var5, var6);\n                    var1 = var2;\n                \n                    if (var1) {\n                        var0 = 0x00;\n                    \n                    label_0E6A:\n                        return var0;\n                    } else {\n                        var0 = 0x02;\n                        goto label_0E6A;\n                    }\n                } else {\n                    var0 = 0x01;\n                    goto label_0E6A;\n                }\n            } else {\n                var2 = arg2;\n                var3 = 0x02;\n            \n                if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n            \n                var2 = memory[var3 + var2 + 0x20:var3 + var2 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & 0xff00000000000000000000000000000000000000000000000000000000000000 != 0x02 ** 0xf8;\n                goto label_0E32;\n            }\n        } else {\n            var2 = arg2;\n            var3 = 0x01;\n        \n            if (var3 >= memory[var2:var2 + 0x20]) { assert(); }\n        \n            var2 = memory[var3 + var2 + 0x20:var3 + var2 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) != 0x5000000000000000000000000000000000000000000000000000000000000000;\n            goto label_0DEA;\n        }\n    }\n    \n    function func_0E4E(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x15d8;\n        var2 = func_299D();\n        var var3 = 0x15e0;\n        var3 = func_299D();\n        var var4 = 0x15e8;\n        var4 = func_299D();\n        var var5 = 0x15f0;\n        var5 = func_299D();\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x15fb;\n        var8 = func_299D();\n        var var9 = arg0;\n        var var10 = 0x45;\n    \n        if (var10 >= memory[var9:var9 + 0x20]) { assert(); }\n    \n        var1 = (memory[var10 + var9 + 0x20:var10 + var9 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8 + 0x66;\n        var9 = 0x20;\n        var10 = memory[0x40:0x60];\n    \n        if (MSIZE() < var10) {\n            var temp0 = var9;\n            var temp1 = var10;\n            memory[temp1:temp1 + 0x20] = temp0;\n            memory[0x40:0x60] = temp1 + (temp0 + 0x1f & ~0x1f) + 0x20;\n            var2 = temp1;\n            var9 = 0x1653;\n            var10 = arg0;\n            var var11 = var1;\n            var var12 = 0x20;\n            var var13 = var2;\n            var var14 = 0x00;\n            var9 = func_1F0A(var10, var11, var12, var13, var14);\n        \n        label_1653:\n            var9 = 0x02;\n            var temp2 = arg3;\n            var10 = temp2;\n            var11 = arg1;\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var12 = memory[0x40:0x60];\n            var13 = var12;\n            var14 = var10 + 0x20;\n            var var15 = memory[var10:var10 + 0x20];\n            var var16 = var15;\n            var var17 = var13;\n            var var18 = var14;\n        \n            if (var16 < 0x20) {\n            label_1690:\n                var temp3 = 0x0100 ** (0x20 - var16) - 0x01;\n                var temp4 = var17;\n                memory[temp4:temp4 + 0x20] = (memory[temp4:temp4 + 0x20] & temp3) | (memory[var18:var18 + 0x20] & ~temp3);\n                var temp5 = var15 + var13;\n                memory[temp5:temp5 + 0x20] = var11;\n                var10 = temp5 + 0x20;\n                var temp6 = memory[0x40:0x60];\n                var temp7;\n                temp7, memory[temp6:temp6 + 0x20] = address(var9).call.gas(msg.gas - 0x646e)(memory[temp6:temp6 + var10 - temp6]);\n            \n                if (!temp7) { revert(memory[0x00:0x00]); }\n            \n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                var temp9 = memory[0x40:0x60];\n                var9 = keccak256(memory[temp9:temp9 + (temp8 + 0x20) - temp9]);\n                var temp10 = var2;\n                var10 = temp10;\n                var11 = memory[0x40:0x60];\n                var12 = var11;\n                var14 = memory[var10:var10 + 0x20];\n                var13 = var10 + 0x20;\n                var15 = var14;\n                var16 = var12;\n                var17 = var13;\n            \n                if (var15 < 0x20) {\n                label_1721:\n                    var temp11 = 0x0100 ** (0x20 - var15) - 0x01;\n                    var temp12 = var16;\n                    memory[temp12:temp12 + 0x20] = (memory[temp12:temp12 + 0x20] & temp11) | (memory[var17:var17 + 0x20] & ~temp11);\n                    var temp13 = memory[0x40:0x60];\n                \n                    if (keccak256(memory[temp13:temp13 + (var14 + var12) - temp13]) == var9) {\n                        var9 = arg0;\n                        var10 = var1 + 0x4a;\n                    \n                        if (var10 >= memory[var9:var9 + 0x20]) { assert(); }\n                    \n                        var9 = (memory[var10 + var9 + 0x20:var10 + var9 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8 + 0x02;\n                        var10 = memory[0x40:0x60];\n                    \n                        if (MSIZE() < var10) {\n                            var temp14 = var9;\n                            var temp15 = var10;\n                            memory[temp15:temp15 + 0x20] = temp14;\n                            memory[0x40:0x60] = temp15 + (temp14 + 0x1f & ~0x1f) + 0x20;\n                            var3 = temp15;\n                            var9 = 0x17bd;\n                            var10 = arg0;\n                            var11 = var1 + 0x49;\n                            var12 = memory[var3:var3 + 0x20];\n                            var13 = var3;\n                            var14 = 0x00;\n                            var9 = func_1F0A(var10, var11, var12, var13, var14);\n                        \n                        label_17BD:\n                            var9 = 0x1875;\n                            var10 = 0x02;\n                            var temp16 = var3;\n                            var11 = temp16;\n                            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                            var12 = memory[0x40:0x60];\n                            var13 = var12;\n                            var14 = var11 + 0x20;\n                            var15 = memory[var11:var11 + 0x20];\n                            var16 = var15;\n                            var17 = var13;\n                            var18 = var14;\n                        \n                            if (var16 < 0x20) {\n                                var9 = func_17FC(arg0, arg2, var1, var10, var11, var12, var13, var14, var15, var16, var17, var18);\n                            \n                                if (var9) {\n                                    var9 = 0x29;\n                                    var10 = memory[0x40:0x60];\n                                \n                                    if (MSIZE() < var10) {\n                                        var temp17 = var9;\n                                        var temp18 = var10;\n                                        memory[temp18:temp18 + 0x20] = temp17;\n                                        memory[0x40:0x60] = temp18 + (temp17 + 0x1f & ~0x1f) + 0x20;\n                                        var4 = temp18;\n                                        var9 = 0x18bc;\n                                        var10 = arg0;\n                                        var11 = var1 + 0x20;\n                                        var12 = 0x29;\n                                        var13 = var4;\n                                        var14 = 0x00;\n                                        var9 = func_1F0A(var10, var11, var12, var13, var14);\n                                    \n                                    label_18BC:\n                                        var9 = 0x40;\n                                        var10 = memory[var9:var9 + 0x20];\n                                    \n                                        if (MSIZE() < var10) {\n                                            var temp19 = var9;\n                                            var temp20 = var10;\n                                            memory[temp20:temp20 + 0x20] = temp19;\n                                            memory[0x40:0x60] = temp20 + (temp19 + 0x1f & ~0x1f) + 0x20;\n                                            var5 = temp20;\n                                            var6 = var1 + 0x20 + 0x29 + memory[var3:var3 + 0x20] + 0x41;\n                                            var9 = 0x1903;\n                                            var10 = arg0;\n                                            var11 = var6 - 0x40;\n                                            var12 = 0x40;\n                                            var13 = var5;\n                                            var14 = 0x00;\n                                            var9 = func_1F0A(var10, var11, var12, var13, var14);\n                                        \n                                        label_1903:\n                                            var9 = 0x02;\n                                            var temp21 = var5;\n                                            var10 = temp21;\n                                            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                                            var11 = memory[0x40:0x60];\n                                            var12 = var11;\n                                            var13 = var10 + 0x20;\n                                            var14 = memory[var10:var10 + 0x20];\n                                            var15 = var14;\n                                            var16 = var12;\n                                            var17 = var13;\n                                        \n                                            if (var15 < 0x20) {\n                                            label_193F:\n                                                var temp22 = 0x0100 ** (0x20 - var15) - 0x01;\n                                                var temp23 = var16;\n                                                memory[temp23:temp23 + 0x20] = (memory[var17:var17 + 0x20] & ~temp22) | (memory[temp23:temp23 + 0x20] & temp22);\n                                                var10 = var14 + var12;\n                                                var temp24 = memory[0x40:0x60];\n                                                var temp25;\n                                                temp25, memory[temp24:temp24 + 0x20] = address(var9).call.gas(msg.gas - 0x646e)(memory[temp24:temp24 + var10 - temp24]);\n                                            \n                                                if (!temp25) { revert(memory[0x00:0x00]); }\n                                            \n                                                var7 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                                                var temp26 = var4;\n                                                var9 = temp26;\n                                                var10 = var7;\n                                                var11 = memory[0x40:0x60];\n                                                var12 = var11;\n                                                var14 = memory[var9:var9 + 0x20];\n                                                var13 = var9 + 0x20;\n                                                var15 = var14;\n                                                var16 = var12;\n                                                var17 = var13;\n                                            \n                                                if (var15 < 0x20) {\n                                                label_19BD:\n                                                    var temp27 = 0x0100 ** (0x20 - var15) - 0x01;\n                                                    var temp28 = var16;\n                                                    memory[temp28:temp28 + 0x20] = (memory[temp28:temp28 + 0x20] & temp27) | (memory[var17:var17 + 0x20] & ~temp27);\n                                                    var temp29 = var14 + var12;\n                                                    memory[temp29:temp29 + 0x20] = var10;\n                                                    var temp30 = memory[0x40:0x60];\n                                                    var temp31 = keccak256(memory[temp30:temp30 + (temp29 + 0x20) - temp30]);\n                                                    memory[0x00:0x20] = arg1;\n                                                    memory[0x20:0x40] = 0x03;\n                                                \n                                                    if (storage[keccak256(memory[0x00:0x40])] != temp31) {\n                                                        var0 = 0x00;\n                                                    \n                                                    label_1B4B:\n                                                        return var0;\n                                                    } else {\n                                                        memory[0x00:0x20] = arg1;\n                                                        memory[0x20:0x40] = 0x03;\n                                                        storage[keccak256(memory[0x00:0x40])] = 0x00;\n                                                        var9 = 0x49;\n                                                        var10 = memory[0x40:0x60];\n                                                    \n                                                        if (MSIZE() < var10) {\n                                                            var temp32 = var9;\n                                                            var temp33 = var10;\n                                                            memory[temp33:temp33 + 0x20] = temp32;\n                                                            memory[0x40:0x60] = temp33 + (temp32 + 0x1f & ~0x1f) + 0x20;\n                                                            var8 = temp33;\n                                                            var9 = 0x1a56;\n                                                            var10 = arg0;\n                                                            var11 = var1;\n                                                            var12 = 0x49;\n                                                            var13 = var8;\n                                                            var14 = 0x00;\n                                                            var9 = func_1F0A(var10, var11, var12, var13, var14);\n                                                        \n                                                        label_1A56:\n                                                            var9 = 0x1ae7;\n                                                            var10 = 0x02;\n                                                            var temp34 = var8;\n                                                            var11 = temp34;\n                                                            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                                                            var12 = memory[0x40:0x60];\n                                                            var13 = var12;\n                                                            var15 = memory[var11:var11 + 0x20];\n                                                            var14 = var11 + 0x20;\n                                                            var16 = var15;\n                                                            var17 = var13;\n                                                            var18 = var14;\n                                                        \n                                                            if (var16 < 0x20) {\n                                                                var temp35 = 0x0100 ** (0x20 - var16) - 0x01;\n                                                                var temp36 = var17;\n                                                                memory[temp36:temp36 + 0x20] = (memory[var18:var18 + 0x20] & ~temp35) | (memory[temp36:temp36 + 0x20] & temp35);\n                                                                var11 = var15 + var13;\n                                                                var temp37 = memory[0x40:0x60];\n                                                                var temp38;\n                                                                temp38, memory[temp37:temp37 + 0x20] = address(var10).call.gas(msg.gas - 0x646e)(memory[temp37:temp37 + var11 - temp37]);\n                                                            \n                                                                if (!temp38) { revert(memory[0x00:0x00]); }\n                                                            \n                                                                var10 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                                                                var11 = var3;\n                                                                var12 = var5;\n                                                                var13 = 0x00;\n                                                                var14 = var13;\n                                                                var15 = 0x00;\n                                                                var16 = var15;\n                                                                var17 = 0x00;\n                                                                var18 = 0x1fe1;\n                                                                var18 = func_299D();\n                                                                var var19 = 0x00;\n                                                                var var20 = 0x1feb;\n                                                                var20 = func_299D();\n                                                                var var21 = 0x20;\n                                                                var var22 = memory[0x40:0x60];\n                                                            \n                                                                if (MSIZE() < var22) {\n                                                                    var temp39 = var21;\n                                                                    var temp40 = var22;\n                                                                    memory[temp40:temp40 + 0x20] = temp39;\n                                                                    var21 = 0x20;\n                                                                    memory[0x40:0x60] = var21 + temp40 + (temp39 + 0x1f & ~0x1f);\n                                                                    var18 = temp40;\n                                                                    var22 = var11;\n                                                                    var var23 = 0x03;\n                                                                \n                                                                    if (var23 >= memory[var22:var22 + 0x20]) { assert(); }\n                                                                \n                                                                label_201E:\n                                                                    var temp41 = (memory[var23 + var22 + 0x20:var23 + var22 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8 - var21 + 0x04;\n                                                                    var19 = temp41;\n                                                                    var21 = 0x204c;\n                                                                    var22 = var11;\n                                                                    var23 = var19;\n                                                                    var var24 = 0x20;\n                                                                    var var25 = var18;\n                                                                    var var26 = 0x00;\n                                                                    var21 = func_1F0A(var22, var23, var24, var25, var26);\n                                                                    var18 = var21;\n                                                                    var21 = 0x20;\n                                                                    var22 = memory[0x40:0x60];\n                                                                \n                                                                    if (MSIZE() < var22) {\n                                                                        var temp42 = var21;\n                                                                        var temp43 = var22;\n                                                                        memory[temp43:temp43 + 0x20] = temp42;\n                                                                        memory[0x40:0x60] = temp43 + (temp42 + 0x1f & ~0x1f) + 0x20;\n                                                                        var20 = temp43;\n                                                                        var temp44 = var19 + 0x22;\n                                                                        var19 = temp44;\n                                                                        var21 = 0x20b5;\n                                                                        var22 = var11;\n                                                                        var23 = 0x20;\n                                                                        var24 = var22;\n                                                                        var25 = var19 - 0x01;\n                                                                    \n                                                                        if (var25 >= memory[var24:var24 + 0x20]) { assert(); }\n                                                                    \n                                                                        var21 = func_208F(var19, var20, var22, var23, var24, var25);\n                                                                    \n                                                                    label_20B5:\n                                                                        var20 = var21;\n                                                                        var16 = memory[var18 + 0x20:var18 + 0x20 + 0x20];\n                                                                        var temp45 = memory[var20 + 0x20:var20 + 0x20 + 0x20];\n                                                                        var17 = temp45;\n                                                                        var21 = 0x20d2;\n                                                                        var22 = var10;\n                                                                        var23 = 0x1b;\n                                                                        var24 = var16;\n                                                                        var25 = var17;\n                                                                        var21, var22 = func_295D(var22, var23, var24, var25);\n                                                                        var14 = var21;\n                                                                        var15 = var22;\n                                                                        var21 = var15 & 0x02 ** 0xa0 - 0x01;\n                                                                        var temp46 = var12;\n                                                                        var22 = temp46;\n                                                                        var23 = memory[0x40:0x60];\n                                                                        var24 = var23;\n                                                                        var26 = memory[var22:var22 + 0x20];\n                                                                        var25 = var22 + 0x20;\n                                                                        var var27 = var26;\n                                                                        var var28 = var24;\n                                                                        var var29 = var25;\n                                                                    \n                                                                        if (var27 < 0x20) {\n                                                                        label_2111:\n                                                                            var temp47 = 0x0100 ** (0x20 - var27) - 0x01;\n                                                                            var temp48 = var28;\n                                                                            memory[temp48:temp48 + 0x20] = (memory[temp48:temp48 + 0x20] & temp47) | (memory[var29:var29 + 0x20] & ~temp47);\n                                                                            var temp49 = memory[0x40:0x60];\n                                                                        \n                                                                            if (keccak256(memory[temp49:temp49 + (var26 + var24) - temp49]) & 0x02 ** 0xa0 - 0x01 != var21) {\n                                                                                var21 = 0x2163;\n                                                                                var22 = var10;\n                                                                                var23 = 0x1c;\n                                                                                var24 = var16;\n                                                                                var25 = var17;\n                                                                                var21, var22 = func_295D(var22, var23, var24, var25);\n                                                                                var14 = var21;\n                                                                                var15 = var22;\n                                                                                var21 = var15 & 0x02 ** 0xa0 - 0x01;\n                                                                                var temp50 = var12;\n                                                                                var22 = temp50;\n                                                                                var23 = memory[0x40:0x60];\n                                                                                var24 = var23;\n                                                                                var25 = var22 + 0x20;\n                                                                                var26 = memory[var22:var22 + 0x20];\n                                                                                var27 = var26;\n                                                                                var28 = var24;\n                                                                                var29 = var25;\n                                                                            \n                                                                                if (var27 < 0x20) {\n                                                                                label_21A2:\n                                                                                    var temp51 = 0x0100 ** (0x20 - var27) - 0x01;\n                                                                                    var temp52 = var28;\n                                                                                    memory[temp52:temp52 + 0x20] = (memory[temp52:temp52 + 0x20] & temp51) | (memory[var29:var29 + 0x20] & ~temp51);\n                                                                                    var temp53 = memory[0x40:0x60];\n                                                                                    var13 = keccak256(memory[temp53:temp53 + (var26 + var24) - temp53]) & 0x02 ** 0xa0 - 0x01 == var21;\n                                                                                \n                                                                                label_21DC:\n                                                                                    var9 = var13;\n                                                                                    // Error: Could not resolve jump destination!\n                                                                                } else {\n                                                                                label_218C:\n                                                                                    var temp54 = var29;\n                                                                                    var temp55 = var28;\n                                                                                    memory[temp55:temp55 + 0x20] = memory[temp54:temp54 + 0x20];\n                                                                                    var27 = var27 + ~0x1f;\n                                                                                    var28 = temp55 + 0x20;\n                                                                                    var29 = temp54 + 0x20;\n                                                                                \n                                                                                    if (var27 < 0x20) { goto label_21A2; }\n                                                                                    else { goto label_218C; }\n                                                                                }\n                                                                            } else {\n                                                                                var13 = 0x01;\n                                                                                goto label_21DC;\n                                                                            }\n                                                                        } else {\n                                                                        label_20FB:\n                                                                            var temp56 = var29;\n                                                                            var temp57 = var28;\n                                                                            memory[temp57:temp57 + 0x20] = memory[temp56:temp56 + 0x20];\n                                                                            var27 = var27 + ~0x1f;\n                                                                            var28 = temp57 + 0x20;\n                                                                            var29 = temp56 + 0x20;\n                                                                        \n                                                                            if (var27 < 0x20) { goto label_2111; }\n                                                                            else { goto label_20FB; }\n                                                                        }\n                                                                    } else {\n                                                                        var temp58 = MSIZE();\n                                                                        var temp59 = var21;\n                                                                        memory[temp58:temp58 + 0x20] = temp59;\n                                                                        memory[0x40:0x60] = temp58 + (temp59 + 0x1f & ~0x1f) + 0x20;\n                                                                        var20 = temp58;\n                                                                        var temp60 = var19 + 0x22;\n                                                                        var19 = temp60;\n                                                                        var21 = 0x20b5;\n                                                                        var22 = var11;\n                                                                        var23 = 0x20;\n                                                                        var24 = var22;\n                                                                        var25 = var19 - 0x01;\n                                                                    \n                                                                        if (var25 >= memory[var24:var24 + 0x20]) { assert(); }\n                                                                    \n                                                                        var21 = func_208F(var19, var20, var22, var23, var24, var25);\n                                                                        goto label_20B5;\n                                                                    }\n                                                                } else {\n                                                                    var temp61 = MSIZE();\n                                                                    var temp62 = var21;\n                                                                    memory[temp61:temp61 + 0x20] = temp62;\n                                                                    var21 = 0x20;\n                                                                    memory[0x40:0x60] = var21 + temp61 + (temp62 + 0x1f & ~0x1f);\n                                                                    var18 = temp61;\n                                                                    var22 = var11;\n                                                                    var23 = 0x03;\n                                                                \n                                                                    if (var23 < memory[var22:var22 + 0x20]) { goto label_201E; }\n                                                                    else { assert(); }\n                                                                }\n                                                            } else {\n                                                                var9 = func_1A7F(var3, var5, var10, var11, var12, var13, var14, var15, var16, var17, var18);\n                                                            \n                                                                if (var9) {\n                                                                    memory[0x00:0x20] = var7;\n                                                                    memory[0x20:0x40] = 0x04;\n                                                                \n                                                                    if (storage[keccak256(memory[0x00:0x40])] & 0xff) {\n                                                                    label_1B36:\n                                                                        memory[0x00:0x20] = var7;\n                                                                        memory[0x20:0x40] = 0x04;\n                                                                        var0 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n                                                                        goto label_1B4B;\n                                                                    } else {\n                                                                        var9 = 0x1b18;\n                                                                        var10 = arg0;\n                                                                        var11 = var6;\n                                                                        var9 = func_21EA(var10, var11);\n                                                                        memory[0x00:0x20] = var7;\n                                                                        memory[0x20:0x40] = 0x04;\n                                                                        var temp63 = keccak256(memory[0x00:0x40]);\n                                                                        storage[temp63] = !!var9 | (storage[temp63] & ~0xff);\n                                                                        goto label_1B36;\n                                                                    }\n                                                                } else {\n                                                                    var0 = 0x00;\n                                                                    goto label_1B4B;\n                                                                }\n                                                            }\n                                                        } else {\n                                                            var temp64 = MSIZE();\n                                                            var temp65 = var9;\n                                                            memory[temp64:temp64 + 0x20] = temp65;\n                                                            memory[0x40:0x60] = temp64 + (temp65 + 0x1f & ~0x1f) + 0x20;\n                                                            var8 = temp64;\n                                                            var9 = 0x1a56;\n                                                            var10 = arg0;\n                                                            var11 = var1;\n                                                            var12 = 0x49;\n                                                            var13 = var8;\n                                                            var14 = 0x00;\n                                                            var9 = func_1F0A(var10, var11, var12, var13, var14);\n                                                            goto label_1A56;\n                                                        }\n                                                    }\n                                                } else {\n                                                label_19A7:\n                                                    var temp66 = var17;\n                                                    var temp67 = var16;\n                                                    memory[temp67:temp67 + 0x20] = memory[temp66:temp66 + 0x20];\n                                                    var15 = var15 + ~0x1f;\n                                                    var16 = temp67 + 0x20;\n                                                    var17 = temp66 + 0x20;\n                                                \n                                                    if (var15 < 0x20) { goto label_19BD; }\n                                                    else { goto label_19A7; }\n                                                }\n                                            } else {\n                                            label_1929:\n                                                var temp68 = var17;\n                                                var temp69 = var16;\n                                                memory[temp69:temp69 + 0x20] = memory[temp68:temp68 + 0x20];\n                                                var15 = var15 + ~0x1f;\n                                                var16 = temp69 + 0x20;\n                                                var17 = temp68 + 0x20;\n                                            \n                                                if (var15 < 0x20) { goto label_193F; }\n                                                else { goto label_1929; }\n                                            }\n                                        } else {\n                                            var temp70 = MSIZE();\n                                            var temp71 = var9;\n                                            memory[temp70:temp70 + 0x20] = temp71;\n                                            memory[0x40:0x60] = temp70 + (temp71 + 0x1f & ~0x1f) + 0x20;\n                                            var5 = temp70;\n                                            var6 = var1 + 0x20 + 0x29 + memory[var3:var3 + 0x20] + 0x41;\n                                            var9 = 0x1903;\n                                            var10 = arg0;\n                                            var11 = var6 - 0x40;\n                                            var12 = 0x40;\n                                            var13 = var5;\n                                            var14 = 0x00;\n                                            var9 = func_1F0A(var10, var11, var12, var13, var14);\n                                            goto label_1903;\n                                        }\n                                    } else {\n                                        var temp72 = MSIZE();\n                                        var temp73 = var9;\n                                        memory[temp72:temp72 + 0x20] = temp73;\n                                        memory[0x40:0x60] = temp72 + (temp73 + 0x1f & ~0x1f) + 0x20;\n                                        var4 = temp72;\n                                        var9 = 0x18bc;\n                                        var10 = arg0;\n                                        var11 = var1 + 0x20;\n                                        var12 = 0x29;\n                                        var13 = var4;\n                                        var14 = 0x00;\n                                        var9 = func_1F0A(var10, var11, var12, var13, var14);\n                                        goto label_18BC;\n                                    }\n                                } else {\n                                    var0 = 0x00;\n                                    goto label_1B4B;\n                                }\n                            } else {\n                            label_17E6:\n                                var temp74 = var18;\n                                var temp75 = var17;\n                                memory[temp75:temp75 + 0x20] = memory[temp74:temp74 + 0x20];\n                                var16 = var16 + ~0x1f;\n                                var17 = temp75 + 0x20;\n                                var18 = temp74 + 0x20;\n                            \n                                if (var16 >= 0x20) { goto label_17E6; }\n                            \n                                var9 = func_17FC(arg0, arg2, var1, var10, var11, var12, var13, var14, var15, var16, var17, var18);\n                                // Error: Could not resolve method call return address!\n                            }\n                        } else {\n                            var temp76 = MSIZE();\n                            var temp77 = var9;\n                            memory[temp76:temp76 + 0x20] = temp77;\n                            memory[0x40:0x60] = temp76 + (temp77 + 0x1f & ~0x1f) + 0x20;\n                            var3 = temp76;\n                            var9 = 0x17bd;\n                            var10 = arg0;\n                            var11 = var1 + 0x49;\n                            var12 = memory[var3:var3 + 0x20];\n                            var13 = var3;\n                            var14 = 0x00;\n                            var9 = func_1F0A(var10, var11, var12, var13, var14);\n                            goto label_17BD;\n                        }\n                    } else {\n                        var0 = 0x00;\n                        goto label_1B4B;\n                    }\n                } else {\n                label_170B:\n                    var temp78 = var17;\n                    var temp79 = var16;\n                    memory[temp79:temp79 + 0x20] = memory[temp78:temp78 + 0x20];\n                    var15 = var15 + ~0x1f;\n                    var16 = temp79 + 0x20;\n                    var17 = temp78 + 0x20;\n                \n                    if (var15 < 0x20) { goto label_1721; }\n                    else { goto label_170B; }\n                }\n            } else {\n            label_167A:\n                var temp80 = var18;\n                var temp81 = var17;\n                memory[temp81:temp81 + 0x20] = memory[temp80:temp80 + 0x20];\n                var16 = var16 + ~0x1f;\n                var17 = temp81 + 0x20;\n                var18 = temp80 + 0x20;\n            \n                if (var16 < 0x20) { goto label_1690; }\n                else { goto label_167A; }\n            }\n        } else {\n            var temp82 = MSIZE();\n            var temp83 = var9;\n            memory[temp82:temp82 + 0x20] = temp83;\n            memory[0x40:0x60] = temp82 + (temp83 + 0x1f & ~0x1f) + 0x20;\n            var2 = temp82;\n            var9 = 0x1653;\n            var10 = arg0;\n            var11 = var1;\n            var12 = 0x20;\n            var13 = var2;\n            var14 = 0x00;\n            var9 = func_1F0A(var10, var11, var12, var13, var14);\n            goto label_1653;\n        }\n    }\n    \n    function func_0E72() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !(storage[var0] & 0x02 ** 0xa0 - 0x01);\n    \n        if (var1) {\n        label_0E9D:\n        \n            if (!var1) {\n            label_0EAE:\n                var1 = storage[0x00] & 0x02 ** 0xa0 - 0x01;\n                var var2 = 0x38cc4831;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n                var var3 = temp0 + 0x04;\n                var var4 = 0x20;\n                var var5 = memory[0x40:0x60];\n                var var6 = var3 - var5;\n                var var7 = var5;\n                var var8 = 0x00;\n                var var9 = var1;\n            \n                if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp1;\n                temp1, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n            \n                if (!temp1) { revert(memory[0x00:0x00]); }\n            \n                var temp2 = 0x02 ** 0xa0 - 0x01;\n            \n                if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] & temp2 == temp2 & storage[0x01]) {\n                label_0FAB:\n                    var1 = storage[0x01] & 0x02 ** 0xa0 - 0x01;\n                    var2 = 0xabaa5f3e;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n                    var3 = temp3 + 0x04;\n                    var4 = 0x20;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                \n                    if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp4;\n                    temp4, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n                \n                    if (temp4) { return memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var1 = storage[0x00] & 0x02 ** 0xa0 - 0x01;\n                    var2 = 0x38cc4831;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = (var2 & 0xffffffff) * 0x02 ** 0xe0;\n                    var3 = temp5 + 0x04;\n                    var4 = 0x20;\n                    var5 = memory[0x40:0x60];\n                    var6 = var3 - var5;\n                    var7 = var5;\n                    var8 = 0x00;\n                    var9 = var1;\n                \n                    if (!address(var9).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp6;\n                    temp6, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas - 0x02c6).value(var8)(memory[var7:var7 + var6]);\n                \n                    if (!temp6) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x01] = (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    goto label_0FAB;\n                }\n            } else {\n                var1 = 0x0eac;\n                var2 = 0x00;\n                var1 = func_11FE(var2);\n                goto label_0EAE;\n            }\n        } else {\n            var1 = 0x0e9b;\n            var2 = storage[0x00] & 0x02 ** 0xa0 - 0x01;\n            var1 = func_11FA(var2);\n            var1 = !var1;\n            goto label_0E9D;\n        }\n    }\n    \n    function func_0FF3(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0ffd;\n        var1 = func_299D();\n        var var2 = !(storage[0x00] & 0x02 ** 0xa0 - 0x01);\n    \n        if (var2) {\n        label_1027:\n        \n            if (!var2) {\n            label_1038:\n                var2 = storage[0x00] & 0x02 ** 0xa0 - 0x01;\n                var var3 = 0x38cc4831;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n                var var4 = temp0 + 0x04;\n                var var5 = 0x20;\n                var var6 = memory[0x40:0x60];\n                var var7 = var4 - var6;\n                var var8 = var6;\n                var var9 = 0x00;\n                var var10 = var2;\n            \n                if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp1;\n                temp1, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n            \n                if (!temp1) { revert(memory[0x00:0x00]); }\n            \n                var temp2 = 0x02 ** 0xa0 - 0x01;\n            \n                if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] & temp2 == temp2 & storage[0x01]) {\n                label_1135:\n                    var2 = 0x03;\n                    var3 = memory[0x40:0x60];\n                \n                    if (MSIZE() < var3) {\n                        var temp3 = var2;\n                        var temp4 = var3;\n                        var3 = temp3;\n                        var2 = temp4;\n                        memory[var2:var2 + 0x20] = var3;\n                        memory[0x40:0x60] = var2 + var3 * 0x20 + 0x20;\n                    \n                        if (!var3) {\n                        label_117A:\n                            var temp5 = var2;\n                            var1 = temp5;\n                            var2 = memory[arg2:arg2 + 0x20];\n                            var3 = var1;\n                            var4 = 0x00;\n                        \n                            if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n                        \n                            memory[var3 + var4 * 0x20 + 0x20:var3 + var4 * 0x20 + 0x20 + 0x20] = var2;\n                            var2 = memory[arg2 + 0x20:arg2 + 0x20 + 0x20];\n                            var3 = var1;\n                            var4 = 0x01;\n                        \n                            if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n                        \n                            memory[var4 * 0x20 + var3 + 0x20:var4 * 0x20 + var3 + 0x20 + 0x20] = var2;\n                            var2 = memory[arg2 + 0x40:arg2 + 0x40 + 0x20];\n                            var3 = var1;\n                            var4 = 0x02;\n                        \n                            if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n                        \n                            memory[var3 + var4 * 0x20 + 0x20:var3 + var4 * 0x20 + 0x20 + 0x20] = var2;\n                            var2 = 0x11de;\n                            var3 = arg0;\n                            var4 = arg1;\n                            var5 = var1;\n                            var6 = arg3;\n                            return func_1B5B(var3, var4, var5, var6);\n                        } else {\n                        label_115B:\n                            var4 = var2 + 0x20;\n                            var5 = 0x1167;\n                            var5 = func_299D();\n                        \n                        label_1167:\n                            var temp6 = var4;\n                            memory[temp6:temp6 + 0x20] = var5;\n                            var4 = temp6 + 0x20;\n                            var3 = var3 - 0x01;\n                        \n                            if (var3) {\n                                var5 = 0x1167;\n                                var5 = func_299D();\n                                goto label_1167;\n                            } else {\n                                var3 = var4;\n                                goto label_117A;\n                            }\n                        }\n                    } else {\n                        var temp7 = MSIZE();\n                        var temp8 = var2;\n                        var2 = temp7;\n                        var3 = temp8;\n                        memory[var2:var2 + 0x20] = var3;\n                        memory[0x40:0x60] = var2 + var3 * 0x20 + 0x20;\n                    \n                        if (!var3) { goto label_117A; }\n                        else { goto label_115B; }\n                    }\n                } else {\n                    var2 = storage[0x00] & 0x02 ** 0xa0 - 0x01;\n                    var3 = 0x38cc4831;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = (var3 & 0xffffffff) * 0x02 ** 0xe0;\n                    var4 = temp9 + 0x04;\n                    var5 = 0x20;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = 0x00;\n                    var10 = var2;\n                \n                    if (!address(var10).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp10;\n                    temp10, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas - 0x02c6).value(var9)(memory[var8:var8 + var7]);\n                \n                    if (!temp10) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x01] = (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    goto label_1135;\n                }\n            } else {\n                var2 = 0x1036;\n                var3 = 0x00;\n                var2 = func_11FE(var3);\n                goto label_1038;\n            }\n        } else {\n            var2 = 0x1025;\n            var3 = storage[0x00] & 0x02 ** 0xa0 - 0x01;\n            var2 = func_11FA(var3);\n            var2 = !var2;\n            goto label_1027;\n        }\n    }\n    \n    function func_11FA(var arg0) returns (var r0) { return address(arg0).code.length; }\n    \n    function func_11FE(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x121e;\n        var var3 = 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed;\n        var2 = func_11FA(var3);\n    \n        if (var2 <= var1) {\n            var1 = 0x00;\n            var2 = 0x12ad;\n            var3 = 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1;\n            var2 = func_11FA(var3);\n        \n            if (var2 <= var1) {\n                var1 = 0x00;\n                var2 = 0x1334;\n                var3 = 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e;\n                var2 = func_11FA(var3);\n            \n                if (var2 <= var1) {\n                    var1 = 0x00;\n                    var2 = 0x13bb;\n                    var3 = 0x146500cfd35b22e4a392fe0adc06de1a1368ed48;\n                    var2 = func_11FA(var3);\n                \n                    if (var2 <= var1) {\n                        var1 = 0x00;\n                        var2 = 0x1442;\n                        var3 = 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475;\n                        var2 = func_11FA(var3);\n                    \n                        if (var2 <= var1) {\n                            var1 = 0x00;\n                            var2 = 0x1495;\n                            var3 = 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf;\n                            var2 = func_11FA(var3);\n                        \n                            if (var2 <= var1) {\n                                var1 = 0x00;\n                                var2 = 0x14e8;\n                                var3 = 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa;\n                                var2 = func_11FA(var3);\n                            \n                                if (var2 <= var1) {\n                                    var0 = 0x00;\n                                \n                                label_1520:\n                                    return var0;\n                                } else {\n                                    storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0x51efaf4c8b3c9afbd5ab9f4bbc82784ab6ef8faa;\n                                    var0 = 0x01;\n                                    goto label_1520;\n                                }\n                            } else {\n                                storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0x20e12a1f859b3feae5fb2a0a32c18f5a65555bbf;\n                                var0 = 0x01;\n                                goto label_1520;\n                            }\n                        } else {\n                            storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0x6f485c8bf6fc43ea212e93bbf8ce046c7f1cb475;\n                            var0 = 0x01;\n                            goto label_1520;\n                        }\n                    } else {\n                        storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0x146500cfd35b22e4a392fe0adc06de1a1368ed48;\n                        var1 = 0x1286;\n                        var temp0 = memory[0x40:0x60];\n                        var2 = temp0;\n                        memory[0x40:0x60] = var2 + 0x40;\n                        memory[var2:var2 + 0x20] = 0x0b;\n                        memory[var2 + 0x20:var2 + 0x20 + 0x20] = 0x6574685f72696e6b656279000000000000000000000000000000000000000000;\n                    \n                    label_1EF7:\n                        var temp1 = var2;\n                        var3 = 0x0443;\n                        var var4 = 0x02;\n                        var var5 = temp1 + 0x20;\n                        var var6 = memory[temp1:temp1 + 0x20];\n                        var temp2 = var4;\n                        var temp3 = storage[temp2];\n                        memory[0x00:0x20] = temp2;\n                        var var7 = keccak256(memory[0x00:0x20]);\n                        var temp4 = var5;\n                        var5 = var7 + ((!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02 + 0x1f) / 0x20;\n                        var var8 = temp4;\n                    \n                        if (0x1f < var6) {\n                            var temp5 = var6;\n                            storage[var4] = temp5 + temp5 + 0x01;\n                        \n                            if (!temp5) {\n                            label_2A4A:\n                                var temp6 = var5;\n                                var5 = 0x2a56;\n                                var6 = temp6;\n                                var5 = func_2A5A(var6, var7);\n                                var3 = var4;\n                                // Error: Could not resolve jump destination!\n                            } else {\n                                var temp7 = var6;\n                                var temp8 = var8;\n                                var6 = temp8;\n                                var8 = var6 + temp7;\n                            \n                                if (var8 <= var6) { goto label_2A4A; }\n                            \n                            label_2A38:\n                                var temp9 = var6;\n                                var temp10 = var7;\n                                storage[temp10] = memory[temp9:temp9 + 0x20];\n                                var6 = temp9 + 0x20;\n                                var7 = temp10 + 0x01;\n                                var8 = var8;\n                            \n                                if (var8 <= var6) { goto label_2A4A; }\n                                else { goto label_2A38; }\n                            }\n                        } else {\n                            var temp11 = var6;\n                            storage[var4] = temp11 + temp11 | (memory[var8:var8 + 0x20] & ~0xff);\n                            goto label_2A4A;\n                        }\n                    }\n                } else {\n                    storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0xb7a07bcf2ba2f2703b24c0691b5278999c59ac7e;\n                    var1 = 0x1286;\n                    var temp12 = memory[0x40:0x60];\n                    var2 = temp12;\n                    memory[0x40:0x60] = var2 + 0x40;\n                    memory[var2:var2 + 0x20] = 0x09;\n                    memory[var2 + 0x20:var2 + 0x20 + 0x20] = 0x6574685f6b6f76616e0000000000000000000000000000000000000000000000;\n                    goto label_1EF7;\n                }\n            } else {\n                storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0xc03a2615d5efaf5f49f60b7bb6583eaec212fdf1;\n                var1 = 0x1286;\n                var temp13 = memory[0x40:0x60];\n                var2 = temp13;\n                memory[0x40:0x60] = var2 + 0x40;\n                memory[var2:var2 + 0x20] = 0x0c;\n                memory[var2 + 0x20:var2 + 0x20 + 0x20] = 0x6574685f726f707374656e330000000000000000000000000000000000000000;\n                goto label_1EF7;\n            }\n        } else {\n            storage[0x00] = (storage[0x00] & ~(0x02 ** 0xa0 - 0x01)) | 0x1d3b2638a7cc9f2cb3d298a3da7a90b67e5506ed;\n            var1 = 0x1286;\n            var temp14 = memory[0x40:0x60];\n            var2 = temp14;\n            memory[0x40:0x60] = var2 + 0x40;\n            memory[var2:var2 + 0x20] = 0x0b;\n            memory[var2 + 0x20:var2 + 0x20 + 0x20] = 0x6574685f6d61696e6e6574000000000000000000000000000000000000000000;\n            goto label_1EF7;\n        }\n    }\n    \n    function func_1525() returns (var r0) {\n        var var0 = 0x152d;\n        var0 = func_299D();\n        var temp0 = storage[0x02];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var var1 = temp2;\n        var var2 = 0x02;\n        var var3 = temp1;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var temp3 = storage[var5];\n        var var6 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var6) {\n        label_15C3:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp4 = var4;\n            var temp5 = temp4 + var6;\n            var4 = temp5;\n            memory[0x00:0x20] = var5;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp4 + 0x20;\n        \n            if (var4 <= var6) { goto label_15BA; }\n        \n        label_15A6:\n            var temp7 = var5;\n            var temp8 = var6;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var5 = temp7 + 0x01;\n            var6 = temp8 + 0x20;\n        \n            if (var4 > var6) { goto label_15A6; }\n        \n        label_15BA:\n            var temp9 = var4;\n            var temp10 = temp9 + (var6 - temp9 & 0x1f);\n            var6 = temp9;\n            var4 = temp10;\n            goto label_15C3;\n        } else {\n            var temp11 = var4;\n            memory[temp11:temp11 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp11 + 0x20;\n            var6 = var6;\n            goto label_15C3;\n        }\n    }\n    \n    function func_17FC(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10, var arg11) returns (var r0) {\n        var temp0 = 0x0100 ** (0x20 - arg9) - 0x01;\n        var temp1 = arg10;\n        memory[temp1:temp1 + 0x20] = (memory[arg11:arg11 + 0x20] & ~temp0) | (memory[temp1:temp1 + 0x20] & temp0);\n        arg4 = arg8 + arg6;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x20] = address(arg3).call.gas(msg.gas - 0x646e)(memory[temp2:temp2 + arg4 - temp2]);\n    \n        if (!temp3) { revert(memory[0x00:0x00]); }\n    \n        arg3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        arg4 = arg1;\n        arg5 = arg0;\n        arg6 = arg2 + 0x28;\n    \n        if (arg6 >= memory[arg5:arg5 + 0x20]) { assert(); }\n    \n        arg5 = (memory[arg6 + arg5 + 0x20:arg6 + arg5 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8;\n        arg6 = 0x00;\n        arg7 = 0x01;\n        arg8 = arg6;\n    \n        if (arg8 >= arg5) {\n        label_1FC8:\n            return arg7;\n        } else {\n        label_1F6E:\n            arg9 = arg4;\n            arg10 = arg8;\n        \n            if (arg10 >= memory[arg9:arg9 + 0x20]) { assert(); }\n        \n            arg9 = memory[arg10 + arg9 + 0x20:arg10 + arg9 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01);\n            arg10 = arg3;\n            arg11 = arg8;\n        \n            if (arg11 >= 0x20) { assert(); }\n        \n            if (byte(arg10, arg11) * 0x02 ** 0xf8 & ~(0x02 ** 0xf8 - 0x01) == arg9) {\n                arg8 = arg8 + 0x01;\n            \n            label_1F65:\n            \n                if (arg8 >= arg5) { goto label_1FC8; }\n                else { goto label_1F6E; }\n            } else {\n                arg7 = 0x00;\n                arg8 = arg8 + 0x01;\n                goto label_1F65;\n            }\n        }\n    }\n    \n    function func_1A7F(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10) returns (var r0) {\n        var temp0 = arg10;\n        var temp1 = arg9;\n        memory[temp1:temp1 + 0x20] = memory[temp0:temp0 + 0x20];\n        arg8 = arg8 + ~0x1f;\n        arg9 = temp1 + 0x20;\n        arg10 = temp0 + 0x20;\n    \n        if (arg8 < 0x20) {\n            var temp2 = 0x0100 ** (0x20 - arg8) - 0x01;\n            var temp3 = arg9;\n            memory[temp3:temp3 + 0x20] = (memory[arg10:arg10 + 0x20] & ~temp2) | (memory[temp3:temp3 + 0x20] & temp2);\n            arg3 = arg7 + arg5;\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x20] = address(arg2).call.gas(msg.gas - 0x646e)(memory[temp4:temp4 + arg3 - temp4]);\n        \n            if (!temp5) { revert(memory[0x00:0x00]); }\n        \n            arg2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            arg3 = arg0;\n            arg4 = arg1;\n            arg5 = 0x00;\n            arg6 = arg5;\n            arg7 = 0x00;\n            arg8 = arg7;\n            arg9 = 0x00;\n            arg10 = 0x1fe1;\n            arg10 = func_299D();\n            var var0 = 0x00;\n            var var1 = 0x1feb;\n            var1 = func_299D();\n            var var2 = 0x20;\n            var var3 = memory[0x40:0x60];\n        \n            if (MSIZE() < var3) {\n                var temp6 = var2;\n                var temp7 = var3;\n                memory[temp7:temp7 + 0x20] = temp6;\n                var2 = 0x20;\n                memory[0x40:0x60] = var2 + temp7 + (temp6 + 0x1f & ~0x1f);\n                arg10 = temp7;\n                var3 = arg3;\n                var var4 = 0x03;\n            \n                if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n            \n            label_201E:\n                var temp8 = (memory[var4 + var3 + 0x20:var4 + var3 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8 - var2 + 0x04;\n                var0 = temp8;\n                var2 = 0x204c;\n                var3 = arg3;\n                var4 = var0;\n                var var5 = 0x20;\n                var var6 = arg10;\n                var var7 = 0x00;\n                var2 = func_1F0A(var3, var4, var5, var6, var7);\n                arg10 = var2;\n                var2 = 0x20;\n                var3 = memory[0x40:0x60];\n            \n                if (MSIZE() < var3) {\n                    var temp9 = var2;\n                    var temp10 = var3;\n                    memory[temp10:temp10 + 0x20] = temp9;\n                    memory[0x40:0x60] = temp10 + (temp9 + 0x1f & ~0x1f) + 0x20;\n                    var1 = temp10;\n                    var temp11 = var0 + 0x22;\n                    var0 = temp11;\n                    var2 = 0x20b5;\n                    var3 = arg3;\n                    var4 = 0x20;\n                    var5 = var3;\n                    var6 = var0 - 0x01;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    var2 = func_208F(var0, var1, var3, var4, var5, var6);\n                \n                label_20B5:\n                    var1 = var2;\n                    arg8 = memory[arg10 + 0x20:arg10 + 0x20 + 0x20];\n                    var temp12 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n                    arg9 = temp12;\n                    var2 = 0x20d2;\n                    var3 = arg2;\n                    var4 = 0x1b;\n                    var5 = arg8;\n                    var6 = arg9;\n                    var2, var3 = func_295D(var3, var4, var5, var6);\n                    arg6 = var2;\n                    arg7 = var3;\n                    var2 = arg7 & 0x02 ** 0xa0 - 0x01;\n                    var temp13 = arg4;\n                    var3 = temp13;\n                    var4 = memory[0x40:0x60];\n                    var5 = var4;\n                    var7 = memory[var3:var3 + 0x20];\n                    var6 = var3 + 0x20;\n                    var var8 = var7;\n                    var var9 = var5;\n                    var var10 = var6;\n                \n                    if (var8 < 0x20) {\n                    label_2111:\n                        var temp14 = 0x0100 ** (0x20 - var8) - 0x01;\n                        var temp15 = var9;\n                        memory[temp15:temp15 + 0x20] = (memory[temp15:temp15 + 0x20] & temp14) | (memory[var10:var10 + 0x20] & ~temp14);\n                        var temp16 = memory[0x40:0x60];\n                    \n                        if (keccak256(memory[temp16:temp16 + (var7 + var5) - temp16]) & 0x02 ** 0xa0 - 0x01 != var2) {\n                            var2 = 0x2163;\n                            var3 = arg2;\n                            var4 = 0x1c;\n                            var5 = arg8;\n                            var6 = arg9;\n                            var2, var3 = func_295D(var3, var4, var5, var6);\n                            arg6 = var2;\n                            arg7 = var3;\n                            var2 = arg7 & 0x02 ** 0xa0 - 0x01;\n                            var temp17 = arg4;\n                            var3 = temp17;\n                            var4 = memory[0x40:0x60];\n                            var5 = var4;\n                            var6 = var3 + 0x20;\n                            var7 = memory[var3:var3 + 0x20];\n                            var8 = var7;\n                            var9 = var5;\n                            var10 = var6;\n                        \n                            if (var8 < 0x20) {\n                            label_21A2:\n                                var temp18 = 0x0100 ** (0x20 - var8) - 0x01;\n                                var temp19 = var9;\n                                memory[temp19:temp19 + 0x20] = (memory[temp19:temp19 + 0x20] & temp18) | (memory[var10:var10 + 0x20] & ~temp18);\n                                var temp20 = memory[0x40:0x60];\n                                arg5 = keccak256(memory[temp20:temp20 + (var7 + var5) - temp20]) & 0x02 ** 0xa0 - 0x01 == var2;\n                            \n                            label_21DC:\n                                return arg5;\n                            } else {\n                            label_218C:\n                                var temp21 = var10;\n                                var temp22 = var9;\n                                memory[temp22:temp22 + 0x20] = memory[temp21:temp21 + 0x20];\n                                var8 = var8 + ~0x1f;\n                                var9 = temp22 + 0x20;\n                                var10 = temp21 + 0x20;\n                            \n                                if (var8 < 0x20) { goto label_21A2; }\n                                else { goto label_218C; }\n                            }\n                        } else {\n                            arg5 = 0x01;\n                            goto label_21DC;\n                        }\n                    } else {\n                    label_20FB:\n                        var temp23 = var10;\n                        var temp24 = var9;\n                        memory[temp24:temp24 + 0x20] = memory[temp23:temp23 + 0x20];\n                        var8 = var8 + ~0x1f;\n                        var9 = temp24 + 0x20;\n                        var10 = temp23 + 0x20;\n                    \n                        if (var8 < 0x20) { goto label_2111; }\n                        else { goto label_20FB; }\n                    }\n                } else {\n                    var temp25 = MSIZE();\n                    var temp26 = var2;\n                    memory[temp25:temp25 + 0x20] = temp26;\n                    memory[0x40:0x60] = temp25 + (temp26 + 0x1f & ~0x1f) + 0x20;\n                    var1 = temp25;\n                    var temp27 = var0 + 0x22;\n                    var0 = temp27;\n                    var2 = 0x20b5;\n                    var3 = arg3;\n                    var4 = 0x20;\n                    var5 = var3;\n                    var6 = var0 - 0x01;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    var2 = func_208F(var0, var1, var3, var4, var5, var6);\n                    goto label_20B5;\n                }\n            } else {\n                var temp28 = MSIZE();\n                var temp29 = var2;\n                memory[temp28:temp28 + 0x20] = temp29;\n                var2 = 0x20;\n                memory[0x40:0x60] = var2 + temp28 + (temp29 + 0x1f & ~0x1f);\n                arg10 = temp28;\n                var3 = arg3;\n                var4 = 0x03;\n            \n                if (var4 < memory[var3:var3 + 0x20]) { goto label_201E; }\n                else { assert(); }\n            }\n        } else {\n            r0 = func_1A7F(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_1B5B(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x1b66;\n        var2 = func_299D();\n        var var3 = !(storage[0x00] & 0x02 ** 0xa0 - 0x01);\n    \n        if (var3) {\n        label_1B90:\n        \n            if (!var3) {\n            label_1BA1:\n                var3 = storage[0x00] & 0x02 ** 0xa0 - 0x01;\n                var var4 = 0x38cc4831;\n                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n                var var5 = temp0 + 0x04;\n                var var6 = 0x20;\n                var var7 = memory[0x40:0x60];\n                var var8 = var5 - var7;\n                var var9 = var7;\n                var var10 = 0x00;\n                var var11 = var3;\n            \n                if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n            \n                var temp1;\n                temp1, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n            \n                if (!temp1) { revert(memory[0x00:0x00]); }\n            \n                var temp2 = 0x02 ** 0xa0 - 0x01;\n            \n                if (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] & temp2 == temp2 & storage[0x01]) {\n                label_1C9E:\n                    var3 = storage[0x01] & 0x02 ** 0xa0 - 0x01;\n                    var4 = 0x2ef3accc;\n                    var temp3 = arg1;\n                    var5 = temp3;\n                    var6 = arg3;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n                    var temp5 = temp4 + 0x04;\n                    var7 = temp5;\n                    var8 = var7;\n                    var temp6 = var8 + 0x20;\n                    memory[temp6:temp6 + 0x20] = var6;\n                    var temp7 = temp6 + 0x20;\n                    memory[var8:var8 + 0x20] = temp7 - var8;\n                    memory[temp7:temp7 + 0x20] = memory[var5:var5 + 0x20];\n                    var9 = temp7 + 0x20;\n                    var10 = var5 + 0x20;\n                    var11 = memory[var5:var5 + 0x20];\n                    var var12 = var11;\n                    var var13 = var9;\n                    var var14 = var10;\n                    var var15 = 0x00;\n                \n                    if (var15 >= var12) {\n                    label_1D0F:\n                        var temp8 = var11;\n                        var9 = temp8 + var9;\n                        var10 = temp8 & 0x1f;\n                    \n                        if (!var10) {\n                            var5 = var9;\n                            var6 = 0x20;\n                            var7 = memory[0x40:0x60];\n                            var8 = var5 - var7;\n                            var9 = var7;\n                            var10 = 0x00;\n                            var11 = var3;\n                        \n                            if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n                        \n                        label_1D5B:\n                            var temp9;\n                            temp9, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n                        \n                            if (!temp9) { revert(memory[0x00:0x00]); }\n                        \n                            var1 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                        \n                            if (var1 <= arg3 * tx.gasprice + 0x0de0b6b3a7640000) {\n                                var3 = 0x1d9d;\n                                var4 = arg2;\n                                var3 = func_25E6(var4);\n                                var temp10 = var3;\n                                var2 = temp10;\n                                var3 = storage[0x01] & 0x02 ** 0xa0 - 0x01;\n                                var4 = 0xc55c1cb6;\n                                var5 = var1;\n                                var6 = arg0;\n                                var temp11 = arg1;\n                                var7 = temp11;\n                                var8 = var2;\n                                var9 = arg3;\n                                memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                                var temp12 = memory[0x40:0x60];\n                                memory[temp12:temp12 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n                                var temp13 = temp12 + 0x04;\n                                var10 = temp13;\n                                memory[var10:var10 + 0x20] = var6;\n                                var temp14 = var10 + 0x20;\n                                var11 = temp14;\n                                var12 = var11 + 0x20;\n                                var temp15 = var12 + 0x20;\n                                memory[temp15:temp15 + 0x20] = var9;\n                                var temp16 = temp15 + 0x20;\n                                memory[var11:var11 + 0x20] = temp16 - var10;\n                                memory[temp16:temp16 + 0x20] = memory[var7:var7 + 0x20];\n                                var13 = temp16 + 0x20;\n                                var14 = var7 + 0x20;\n                                var15 = memory[var7:var7 + 0x20];\n                                var var16 = var15;\n                                var var17 = var13;\n                                var var18 = var14;\n                                var var19 = 0x00;\n                            \n                                if (var19 >= var16) {\n                                label_1E1E:\n                                    var temp17 = var15;\n                                    var13 = temp17 + var13;\n                                    var14 = temp17 & 0x1f;\n                                \n                                    if (!var14) {\n                                        var temp18 = var13;\n                                        memory[var12:var12 + 0x20] = temp18 - var10;\n                                        var temp19 = var8;\n                                        memory[temp18:temp18 + 0x20] = memory[temp19:temp19 + 0x20];\n                                        var13 = temp18 + 0x20;\n                                        var14 = temp19 + 0x20;\n                                        var15 = memory[temp19:temp19 + 0x20];\n                                        var16 = var15;\n                                        var17 = var13;\n                                        var18 = var14;\n                                        var19 = 0x00;\n                                    \n                                        if (var19 >= var16) {\n                                        label_1E81:\n                                            var temp20 = var15;\n                                            var13 = temp20 + var13;\n                                            var14 = temp20 & 0x1f;\n                                        \n                                            if (!var14) {\n                                                var6 = var13;\n                                                var7 = 0x20;\n                                                var8 = memory[0x40:0x60];\n                                                var9 = var6 - var8;\n                                                var10 = var8;\n                                                var11 = var5;\n                                                var12 = var3;\n                                            \n                                                if (!address(var12).code.length) { revert(memory[0x00:0x00]); }\n                                            \n                                            label_1ECF:\n                                                var temp21;\n                                                temp21, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x25ee).value(var11)(memory[var10:var10 + var9]);\n                                            \n                                                if (!temp21) { revert(memory[0x00:0x00]); }\n                                            \n                                                var0 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                                            \n                                            label_1EED:\n                                                return var0;\n                                            } else {\n                                                var temp22 = var14;\n                                                var temp23 = var13 - temp22;\n                                                memory[temp23:temp23 + 0x20] = ~(0x0100 ** (0x20 - temp22) - 0x01) & memory[temp23:temp23 + 0x20];\n                                                var6 = temp23 + 0x20;\n                                                var7 = 0x20;\n                                                var8 = memory[0x40:0x60];\n                                                var9 = var6 - var8;\n                                                var10 = var8;\n                                                var11 = var5;\n                                                var12 = var3;\n                                            \n                                                if (address(var12).code.length) { goto label_1ECF; }\n                                                else { revert(memory[0x00:0x00]); }\n                                            }\n                                        } else {\n                                        label_1E72:\n                                            var temp24 = var19;\n                                            memory[temp24 + var17:temp24 + var17 + 0x20] = memory[var18 + temp24:var18 + temp24 + 0x20];\n                                            var19 = temp24 + 0x20;\n                                        \n                                            if (var19 >= var16) { goto label_1E81; }\n                                            else { goto label_1E72; }\n                                        }\n                                    } else {\n                                        var temp25 = var14;\n                                        var temp26 = var13 - temp25;\n                                        memory[temp26:temp26 + 0x20] = ~(0x0100 ** (0x20 - temp25) - 0x01) & memory[temp26:temp26 + 0x20];\n                                        var temp27 = temp26 + 0x20;\n                                        memory[var12:var12 + 0x20] = temp27 - var10;\n                                        var temp28 = var8;\n                                        memory[temp27:temp27 + 0x20] = memory[temp28:temp28 + 0x20];\n                                        var13 = temp27 + 0x20;\n                                        var15 = memory[temp28:temp28 + 0x20];\n                                        var14 = temp28 + 0x20;\n                                        var16 = var15;\n                                        var17 = var13;\n                                        var18 = var14;\n                                        var19 = 0x00;\n                                    \n                                        if (var19 >= var16) { goto label_1E81; }\n                                        else { goto label_1E72; }\n                                    }\n                                } else {\n                                label_1E0F:\n                                    var temp29 = var19;\n                                    memory[temp29 + var17:temp29 + var17 + 0x20] = memory[var18 + temp29:var18 + temp29 + 0x20];\n                                    var19 = temp29 + 0x20;\n                                \n                                    if (var19 >= var16) { goto label_1E1E; }\n                                    else { goto label_1E0F; }\n                                }\n                            } else {\n                                var0 = 0x00;\n                                goto label_1EED;\n                            }\n                        } else {\n                            var temp30 = var10;\n                            var temp31 = var9 - temp30;\n                            memory[temp31:temp31 + 0x20] = ~(0x0100 ** (0x20 - temp30) - 0x01) & memory[temp31:temp31 + 0x20];\n                            var5 = temp31 + 0x20;\n                            var6 = 0x20;\n                            var7 = memory[0x40:0x60];\n                            var8 = var5 - var7;\n                            var9 = var7;\n                            var10 = 0x00;\n                            var11 = var3;\n                        \n                            if (address(var11).code.length) { goto label_1D5B; }\n                            else { revert(memory[0x00:0x00]); }\n                        }\n                    } else {\n                    label_1D00:\n                        var temp32 = var15;\n                        memory[temp32 + var13:temp32 + var13 + 0x20] = memory[var14 + temp32:var14 + temp32 + 0x20];\n                        var15 = temp32 + 0x20;\n                    \n                        if (var15 >= var12) { goto label_1D0F; }\n                        else { goto label_1D00; }\n                    }\n                } else {\n                    var3 = storage[0x00] & 0x02 ** 0xa0 - 0x01;\n                    var4 = 0x38cc4831;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var temp33 = memory[0x40:0x60];\n                    memory[temp33:temp33 + 0x20] = (var4 & 0xffffffff) * 0x02 ** 0xe0;\n                    var5 = temp33 + 0x04;\n                    var6 = 0x20;\n                    var7 = memory[0x40:0x60];\n                    var8 = var5 - var7;\n                    var9 = var7;\n                    var10 = 0x00;\n                    var11 = var3;\n                \n                    if (!address(var11).code.length) { revert(memory[0x00:0x00]); }\n                \n                    var temp34;\n                    temp34, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas - 0x02c6).value(var10)(memory[var9:var9 + var8]);\n                \n                    if (!temp34) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x01] = (memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~(0x02 ** 0xa0 - 0x01));\n                    goto label_1C9E;\n                }\n            } else {\n                var3 = 0x1b9f;\n                var4 = 0x00;\n                var3 = func_11FE(var4);\n                goto label_1BA1;\n            }\n        } else {\n            var3 = 0x1b8e;\n            var4 = storage[0x00] & 0x02 ** 0xa0 - 0x01;\n            var3 = func_11FA(var4);\n            var3 = !var3;\n            goto label_1B90;\n        }\n    }\n    \n    function func_1F0A(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        var var0 = 0x1f12;\n        var0 = func_299D();\n        var var1 = arg4 + arg2;\n        var var2 = 0x00;\n        var var3 = var2;\n    \n        if (memory[arg3:arg3 + 0x20] < var1) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg1;\n        var2 = temp0 + 0x20;\n        var3 = arg4 + 0x20;\n    \n        if (var2 >= temp0 + 0x20 + arg2) {\n        label_1F52:\n            return arg3;\n        } else {\n        label_1F3F:\n            var temp1 = var2;\n            var temp2 = var3;\n            memory[temp2 + arg3:temp2 + arg3 + 0x20] = memory[arg0 + temp1:arg0 + temp1 + 0x20];\n            var2 = temp1 + 0x20;\n            var3 = temp2 + 0x20;\n        \n            if (var2 >= arg1 + 0x20 + arg2) { goto label_1F52; }\n            else { goto label_1F3F; }\n        }\n    }\n    \n    function func_208F(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) returns (var r0) {\n        arg3 = arg0 + ((memory[arg5 + arg4 + 0x20:arg5 + arg4 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8 - arg3);\n        arg4 = 0x20;\n        arg5 = arg1;\n        var var0 = 0x00;\n        r0 = func_1F0A(arg2, arg3, arg4, arg5, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_21EA(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x21f5;\n        var2 = func_299D();\n        var var3 = 0x21fd;\n        var3 = func_299D();\n        var var4 = 0x2205;\n        var4 = func_299D();\n        var var5 = 0x220d;\n        var5 = func_299D();\n        var var6 = 0x2215;\n        var6 = func_299D();\n        var var7 = 0x221d;\n        var7 = func_299D();\n        var var8 = 0x2225;\n        var8 = func_299D();\n        var var9 = arg0;\n        var var10 = arg1 + 0x01;\n    \n        if (var10 >= memory[var9:var9 + 0x20]) { assert(); }\n    \n        var9 = (memory[var10 + var9 + 0x20:var10 + var9 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8 + 0x02;\n        var10 = memory[0x40:0x60];\n    \n        if (MSIZE() < var10) {\n            var temp0 = var9;\n            var temp1 = var10;\n            memory[temp1:temp1 + 0x20] = temp0;\n            memory[0x40:0x60] = temp1 + (temp0 + 0x1f & ~0x1f) + 0x20;\n            var2 = temp1;\n            var9 = 0x2283;\n            var10 = arg0;\n            var var11 = arg1;\n            var var12 = memory[var2:var2 + 0x20];\n            var var13 = var2;\n            var var14 = 0x00;\n            var9 = func_1F0A(var10, var11, var12, var13, var14);\n        \n        label_2283:\n            var9 = 0x40;\n            var10 = memory[var9:var9 + 0x20];\n        \n            if (MSIZE() < var10) {\n                var temp2 = var9;\n                var temp3 = var10;\n                memory[temp3:temp3 + 0x20] = temp2;\n                memory[0x40:0x60] = temp3 + (temp2 + 0x1f & ~0x1f) + 0x20;\n                var3 = temp3;\n                var9 = 0x22b9;\n                var10 = arg0;\n                var11 = 0x04;\n                var12 = 0x40;\n                var13 = var3;\n                var14 = 0x00;\n                var9 = func_1F0A(var10, var11, var12, var13, var14);\n            \n            label_22B9:\n                var9 = 0x62;\n                var10 = memory[0x40:0x60];\n            \n                if (MSIZE() < var10) {\n                    var temp4 = var9;\n                    var temp5 = var10;\n                    memory[temp5:temp5 + 0x20] = temp4;\n                    memory[0x40:0x60] = temp5 + (temp4 + 0x1f & ~0x1f) + 0x20;\n                    var4 = temp5;\n                    var9 = 0x02 ** 0xf8;\n                    var10 = var4;\n                    var11 = 0x00;\n                \n                    if (var11 >= memory[var10:var10 + 0x20]) { assert(); }\n                \n                label_22F2:\n                    memory[var10 + 0x20 + var11:var10 + 0x20 + var11 + 0x01] = byte(var9 & ~(0x02 ** 0xf8 - 0x01), 0x00);\n                    var9 = 0x231c;\n                    var10 = arg0;\n                    var11 = arg1 - 0x41;\n                    var12 = 0x41;\n                    var13 = var4;\n                    var14 = 0x01;\n                    var9 = func_1F0A(var10, var11, var12, var13, var14);\n                    var temp6 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp6 + 0x40;\n                    memory[temp6:temp6 + 0x20] = 0x20;\n                    memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = 0xfd94fa71bc0ba10d39d464d0d8f465efeef0a2764e3887fcc9df41ded20f505c;\n                    var5 = temp6;\n                    var9 = 0x2365;\n                    var10 = var5;\n                    var11 = 0x00;\n                    var12 = 0x20;\n                    var13 = var4;\n                    var14 = 0x42;\n                    var9 = func_1F0A(var10, var11, var12, var13, var14);\n                    var9 = 0x23f6;\n                    var10 = 0x02;\n                    var temp7 = var4;\n                    var11 = temp7;\n                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                    var12 = memory[0x40:0x60];\n                    var13 = var12;\n                    var14 = var11 + 0x20;\n                    var var15 = memory[var11:var11 + 0x20];\n                    var var16 = var15;\n                    var var17 = var13;\n                    var var18 = var14;\n                \n                    if (var16 < 0x20) {\n                        var temp8 = 0x0100 ** (0x20 - var16) - 0x01;\n                        var temp9 = var17;\n                        memory[temp9:temp9 + 0x20] = (memory[var18:var18 + 0x20] & ~temp8) | (memory[temp9:temp9 + 0x20] & temp8);\n                        var11 = var15 + var13;\n                        var temp10 = memory[0x40:0x60];\n                        var temp11;\n                        temp11, memory[temp10:temp10 + 0x20] = address(var10).call.gas(msg.gas - 0x646e)(memory[temp10:temp10 + var11 - temp10]);\n                    \n                        if (!temp11) { revert(memory[0x00:0x00]); }\n                    \n                        var10 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                        var11 = var2;\n                        var12 = var3;\n                    \n                    label_1FD1:\n                        var13 = 0x00;\n                        var14 = var13;\n                        var15 = 0x00;\n                        var16 = var15;\n                        var17 = 0x00;\n                        var18 = 0x1fe1;\n                        var18 = func_299D();\n                        var var19 = 0x00;\n                        var var20 = 0x1feb;\n                        var20 = func_299D();\n                        var var21 = 0x20;\n                        var var22 = memory[0x40:0x60];\n                    \n                        if (MSIZE() < var22) {\n                            var temp12 = var21;\n                            var temp13 = var22;\n                            memory[temp13:temp13 + 0x20] = temp12;\n                            var21 = 0x20;\n                            memory[0x40:0x60] = var21 + temp13 + (temp12 + 0x1f & ~0x1f);\n                            var18 = temp13;\n                            var22 = var11;\n                            var var23 = 0x03;\n                        \n                            if (var23 >= memory[var22:var22 + 0x20]) { assert(); }\n                        \n                        label_201E:\n                            var temp14 = (memory[var23 + var22 + 0x20:var23 + var22 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8 - var21 + 0x04;\n                            var19 = temp14;\n                            var21 = 0x204c;\n                            var22 = var11;\n                            var23 = var19;\n                            var var24 = 0x20;\n                            var var25 = var18;\n                            var var26 = 0x00;\n                            var21 = func_1F0A(var22, var23, var24, var25, var26);\n                            var18 = var21;\n                            var21 = 0x20;\n                            var22 = memory[0x40:0x60];\n                        \n                            if (MSIZE() < var22) {\n                                var temp15 = var21;\n                                var temp16 = var22;\n                                memory[temp16:temp16 + 0x20] = temp15;\n                                memory[0x40:0x60] = temp16 + (temp15 + 0x1f & ~0x1f) + 0x20;\n                                var20 = temp16;\n                                var temp17 = var19 + 0x22;\n                                var19 = temp17;\n                                var21 = 0x20b5;\n                                var22 = var11;\n                                var23 = 0x20;\n                                var24 = var22;\n                                var25 = var19 - 0x01;\n                            \n                                if (var25 >= memory[var24:var24 + 0x20]) { assert(); }\n                            \n                                var21 = func_208F(var19, var20, var22, var23, var24, var25);\n                            \n                            label_20B5:\n                                var20 = var21;\n                                var16 = memory[var18 + 0x20:var18 + 0x20 + 0x20];\n                                var temp18 = memory[var20 + 0x20:var20 + 0x20 + 0x20];\n                                var17 = temp18;\n                                var21 = 0x20d2;\n                                var22 = var10;\n                                var23 = 0x1b;\n                                var24 = var16;\n                                var25 = var17;\n                                var21, var22 = func_295D(var22, var23, var24, var25);\n                                var14 = var21;\n                                var15 = var22;\n                                var21 = var15 & 0x02 ** 0xa0 - 0x01;\n                                var temp19 = var12;\n                                var22 = temp19;\n                                var23 = memory[0x40:0x60];\n                                var24 = var23;\n                                var26 = memory[var22:var22 + 0x20];\n                                var25 = var22 + 0x20;\n                                var var27 = var26;\n                                var var28 = var24;\n                                var var29 = var25;\n                            \n                                if (var27 < 0x20) {\n                                label_2111:\n                                    var temp20 = 0x0100 ** (0x20 - var27) - 0x01;\n                                    var temp21 = var28;\n                                    memory[temp21:temp21 + 0x20] = (memory[temp21:temp21 + 0x20] & temp20) | (memory[var29:var29 + 0x20] & ~temp20);\n                                    var temp22 = memory[0x40:0x60];\n                                \n                                    if (keccak256(memory[temp22:temp22 + (var26 + var24) - temp22]) & 0x02 ** 0xa0 - 0x01 != var21) {\n                                        var21 = 0x2163;\n                                        var22 = var10;\n                                        var23 = 0x1c;\n                                        var24 = var16;\n                                        var25 = var17;\n                                        var21, var22 = func_295D(var22, var23, var24, var25);\n                                        var14 = var21;\n                                        var15 = var22;\n                                        var21 = var15 & 0x02 ** 0xa0 - 0x01;\n                                        var temp23 = var12;\n                                        var22 = temp23;\n                                        var23 = memory[0x40:0x60];\n                                        var24 = var23;\n                                        var25 = var22 + 0x20;\n                                        var26 = memory[var22:var22 + 0x20];\n                                        var27 = var26;\n                                        var28 = var24;\n                                        var29 = var25;\n                                    \n                                        if (var27 < 0x20) {\n                                        label_21A2:\n                                            var temp24 = 0x0100 ** (0x20 - var27) - 0x01;\n                                            var temp25 = var28;\n                                            memory[temp25:temp25 + 0x20] = (memory[temp25:temp25 + 0x20] & temp24) | (memory[var29:var29 + 0x20] & ~temp24);\n                                            var temp26 = memory[0x40:0x60];\n                                            var13 = keccak256(memory[temp26:temp26 + (var26 + var24) - temp26]) & 0x02 ** 0xa0 - 0x01 == var21;\n                                        \n                                        label_21DC:\n                                            var9 = var13;\n                                            // Error: Could not resolve jump destination!\n                                        } else {\n                                        label_218C:\n                                            var temp27 = var29;\n                                            var temp28 = var28;\n                                            memory[temp28:temp28 + 0x20] = memory[temp27:temp27 + 0x20];\n                                            var27 = var27 + ~0x1f;\n                                            var28 = temp28 + 0x20;\n                                            var29 = temp27 + 0x20;\n                                        \n                                            if (var27 < 0x20) { goto label_21A2; }\n                                            else { goto label_218C; }\n                                        }\n                                    } else {\n                                        var13 = 0x01;\n                                        goto label_21DC;\n                                    }\n                                } else {\n                                label_20FB:\n                                    var temp29 = var29;\n                                    var temp30 = var28;\n                                    memory[temp30:temp30 + 0x20] = memory[temp29:temp29 + 0x20];\n                                    var27 = var27 + ~0x1f;\n                                    var28 = temp30 + 0x20;\n                                    var29 = temp29 + 0x20;\n                                \n                                    if (var27 < 0x20) { goto label_2111; }\n                                    else { goto label_20FB; }\n                                }\n                            } else {\n                                var temp31 = MSIZE();\n                                var temp32 = var21;\n                                memory[temp31:temp31 + 0x20] = temp32;\n                                memory[0x40:0x60] = temp31 + (temp32 + 0x1f & ~0x1f) + 0x20;\n                                var20 = temp31;\n                                var temp33 = var19 + 0x22;\n                                var19 = temp33;\n                                var21 = 0x20b5;\n                                var22 = var11;\n                                var23 = 0x20;\n                                var24 = var22;\n                                var25 = var19 - 0x01;\n                            \n                                if (var25 >= memory[var24:var24 + 0x20]) { assert(); }\n                            \n                                var21 = func_208F(var19, var20, var22, var23, var24, var25);\n                                goto label_20B5;\n                            }\n                        } else {\n                            var temp34 = MSIZE();\n                            var temp35 = var21;\n                            memory[temp34:temp34 + 0x20] = temp35;\n                            var21 = 0x20;\n                            memory[0x40:0x60] = var21 + temp34 + (temp35 + 0x1f & ~0x1f);\n                            var18 = temp34;\n                            var22 = var11;\n                            var23 = 0x03;\n                        \n                            if (var23 < memory[var22:var22 + 0x20]) { goto label_201E; }\n                            else { assert(); }\n                        }\n                    } else {\n                        var9 = func_238E(var2, var3, var10, var11, var12, var13, var14, var15, var16, var17, var18);\n                        var1 = var9;\n                    \n                        if (var1) {\n                            var temp36 = memory[0x40:0x60];\n                            memory[0x40:0x60] = temp36 + 0x60;\n                            memory[temp36:temp36 + 0x20] = 0x40;\n                            var temp37 = temp36 + 0x20;\n                            memory[temp37:temp37 + 0x20] = 0x7fb956469c5c9b89840d55b43537e66a98dd4811ea0a27224272c2e5622911e8;\n                            memory[temp37 + 0x20:temp37 + 0x20 + 0x20] = 0x537a2f8e86a46baec82864e98dd01e9ccc2f8bc5dfc9cbe5a91a290498dd96e4;\n                            var6 = temp36;\n                            var9 = 0x42;\n                            var10 = memory[0x40:0x60];\n                        \n                            if (MSIZE() < var10) {\n                                var temp38 = var9;\n                                var temp39 = var10;\n                                memory[temp39:temp39 + 0x20] = temp38;\n                                memory[0x40:0x60] = temp39 + (temp38 + 0x1f & ~0x1f) + 0x20;\n                                var7 = temp39;\n                                var9 = 0xfe00000000000000000000000000000000000000000000000000000000000000;\n                                var10 = var7;\n                                var11 = 0x00;\n                            \n                                if (var11 >= memory[var10:var10 + 0x20]) { assert(); }\n                            \n                            label_24BB:\n                                memory[var10 + 0x20 + var11:var10 + 0x20 + var11 + 0x01] = byte(var9 & ~(0x02 ** 0xf8 - 0x01), 0x00);\n                                var9 = 0x24e3;\n                                var10 = arg0;\n                                var11 = 0x03;\n                                var12 = 0x41;\n                                var13 = var7;\n                                var14 = 0x01;\n                                var9 = func_1F0A(var10, var11, var12, var13, var14);\n                                var9 = arg0;\n                                var10 = 0x45;\n                            \n                                if (var10 >= memory[var9:var9 + 0x20]) { assert(); }\n                            \n                                var9 = (memory[var10 + var9 + 0x20:var10 + var9 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8 + 0x02;\n                                var10 = memory[0x40:0x60];\n                            \n                                if (MSIZE() < var10) {\n                                    var temp40 = var9;\n                                    var temp41 = var10;\n                                    memory[temp41:temp41 + 0x20] = temp40;\n                                    memory[0x40:0x60] = temp41 + (temp40 + 0x1f & ~0x1f) + 0x20;\n                                    var8 = temp41;\n                                    var9 = 0x2541;\n                                    var10 = arg0;\n                                    var11 = 0x44;\n                                    var12 = memory[var8:var8 + 0x20];\n                                    var13 = var8;\n                                    var14 = 0x00;\n                                    var9 = func_1F0A(var10, var11, var12, var13, var14);\n                                \n                                label_2541:\n                                    var9 = 0x25d2;\n                                    var10 = 0x02;\n                                    var temp42 = var7;\n                                    var11 = temp42;\n                                    memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n                                    var12 = memory[0x40:0x60];\n                                    var13 = var12;\n                                    var14 = var11 + 0x20;\n                                    var15 = memory[var11:var11 + 0x20];\n                                    var16 = var15;\n                                    var17 = var13;\n                                    var18 = var14;\n                                \n                                    if (var16 < 0x20) {\n                                        var temp43 = 0x0100 ** (0x20 - var16) - 0x01;\n                                        var temp44 = var17;\n                                        memory[temp44:temp44 + 0x20] = (memory[var18:var18 + 0x20] & ~temp43) | (memory[temp44:temp44 + 0x20] & temp43);\n                                        var11 = var15 + var13;\n                                        var temp45 = memory[0x40:0x60];\n                                        var temp46;\n                                        temp46, memory[temp45:temp45 + 0x20] = address(var10).call.gas(msg.gas - 0x646e)(memory[temp45:temp45 + var11 - temp45]);\n                                    \n                                        if (!temp46) { revert(memory[0x00:0x00]); }\n                                    \n                                        var10 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n                                        var11 = var8;\n                                        var12 = var6;\n                                        goto label_1FD1;\n                                    } else {\n                                        var9 = func_256A(var6, var8, var10, var11, var12, var13, var14, var15, var16, var17, var18);\n                                        var1 = var9;\n                                        var0 = var1;\n                                    \n                                    label_25D8:\n                                        return var0;\n                                    }\n                                } else {\n                                    var temp47 = MSIZE();\n                                    var temp48 = var9;\n                                    memory[temp47:temp47 + 0x20] = temp48;\n                                    memory[0x40:0x60] = temp47 + (temp48 + 0x1f & ~0x1f) + 0x20;\n                                    var8 = temp47;\n                                    var9 = 0x2541;\n                                    var10 = arg0;\n                                    var11 = 0x44;\n                                    var12 = memory[var8:var8 + 0x20];\n                                    var13 = var8;\n                                    var14 = 0x00;\n                                    var9 = func_1F0A(var10, var11, var12, var13, var14);\n                                    goto label_2541;\n                                }\n                            } else {\n                                var temp49 = MSIZE();\n                                var temp50 = var9;\n                                memory[temp49:temp49 + 0x20] = temp50;\n                                memory[0x40:0x60] = temp49 + (temp50 + 0x1f & ~0x1f) + 0x20;\n                                var7 = temp49;\n                                var9 = 0xfe00000000000000000000000000000000000000000000000000000000000000;\n                                var10 = var7;\n                                var11 = 0x00;\n                            \n                                if (var11 < memory[var10:var10 + 0x20]) { goto label_24BB; }\n                                else { assert(); }\n                            }\n                        } else {\n                            var0 = 0x00;\n                            goto label_25D8;\n                        }\n                    }\n                } else {\n                    var temp51 = MSIZE();\n                    var temp52 = var9;\n                    memory[temp51:temp51 + 0x20] = temp52;\n                    memory[0x40:0x60] = temp51 + (temp52 + 0x1f & ~0x1f) + 0x20;\n                    var4 = temp51;\n                    var9 = 0x02 ** 0xf8;\n                    var10 = var4;\n                    var11 = 0x00;\n                \n                    if (var11 < memory[var10:var10 + 0x20]) { goto label_22F2; }\n                    else { assert(); }\n                }\n            } else {\n                var temp53 = MSIZE();\n                var temp54 = var9;\n                memory[temp53:temp53 + 0x20] = temp54;\n                memory[0x40:0x60] = temp53 + (temp54 + 0x1f & ~0x1f) + 0x20;\n                var3 = temp53;\n                var9 = 0x22b9;\n                var10 = arg0;\n                var11 = 0x04;\n                var12 = 0x40;\n                var13 = var3;\n                var14 = 0x00;\n                var9 = func_1F0A(var10, var11, var12, var13, var14);\n                goto label_22B9;\n            }\n        } else {\n            var temp55 = MSIZE();\n            var temp56 = var9;\n            memory[temp55:temp55 + 0x20] = temp56;\n            memory[0x40:0x60] = temp55 + (temp56 + 0x1f & ~0x1f) + 0x20;\n            var2 = temp55;\n            var9 = 0x2283;\n            var10 = arg0;\n            var11 = arg1;\n            var12 = memory[var2:var2 + 0x20];\n            var13 = var2;\n            var14 = 0x00;\n            var9 = func_1F0A(var10, var11, var12, var13, var14);\n            goto label_2283;\n        }\n    }\n    \n    function func_238E(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10) returns (var r0) {\n        var temp0 = arg10;\n        var temp1 = arg9;\n        memory[temp1:temp1 + 0x20] = memory[temp0:temp0 + 0x20];\n        arg8 = arg8 + ~0x1f;\n        arg9 = temp1 + 0x20;\n        arg10 = temp0 + 0x20;\n    \n        if (arg8 < 0x20) {\n            var temp2 = 0x0100 ** (0x20 - arg8) - 0x01;\n            var temp3 = arg9;\n            memory[temp3:temp3 + 0x20] = (memory[arg10:arg10 + 0x20] & ~temp2) | (memory[temp3:temp3 + 0x20] & temp2);\n            arg3 = arg7 + arg5;\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x20] = address(arg2).call.gas(msg.gas - 0x646e)(memory[temp4:temp4 + arg3 - temp4]);\n        \n            if (!temp5) { revert(memory[0x00:0x00]); }\n        \n            arg2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            arg3 = arg0;\n            arg4 = arg1;\n            arg5 = 0x00;\n            arg6 = arg5;\n            arg7 = 0x00;\n            arg8 = arg7;\n            arg9 = 0x00;\n            arg10 = 0x1fe1;\n            arg10 = func_299D();\n            var var0 = 0x00;\n            var var1 = 0x1feb;\n            var1 = func_299D();\n            var var2 = 0x20;\n            var var3 = memory[0x40:0x60];\n        \n            if (MSIZE() < var3) {\n                var temp6 = var2;\n                var temp7 = var3;\n                memory[temp7:temp7 + 0x20] = temp6;\n                var2 = 0x20;\n                memory[0x40:0x60] = var2 + temp7 + (temp6 + 0x1f & ~0x1f);\n                arg10 = temp7;\n                var3 = arg3;\n                var var4 = 0x03;\n            \n                if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n            \n            label_201E:\n                var temp8 = (memory[var4 + var3 + 0x20:var4 + var3 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8 - var2 + 0x04;\n                var0 = temp8;\n                var2 = 0x204c;\n                var3 = arg3;\n                var4 = var0;\n                var var5 = 0x20;\n                var var6 = arg10;\n                var var7 = 0x00;\n                var2 = func_1F0A(var3, var4, var5, var6, var7);\n                arg10 = var2;\n                var2 = 0x20;\n                var3 = memory[0x40:0x60];\n            \n                if (MSIZE() < var3) {\n                    var temp9 = var2;\n                    var temp10 = var3;\n                    memory[temp10:temp10 + 0x20] = temp9;\n                    memory[0x40:0x60] = temp10 + (temp9 + 0x1f & ~0x1f) + 0x20;\n                    var1 = temp10;\n                    var temp11 = var0 + 0x22;\n                    var0 = temp11;\n                    var2 = 0x20b5;\n                    var3 = arg3;\n                    var4 = 0x20;\n                    var5 = var3;\n                    var6 = var0 - 0x01;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    var2 = func_208F(var0, var1, var3, var4, var5, var6);\n                \n                label_20B5:\n                    var1 = var2;\n                    arg8 = memory[arg10 + 0x20:arg10 + 0x20 + 0x20];\n                    var temp12 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n                    arg9 = temp12;\n                    var2 = 0x20d2;\n                    var3 = arg2;\n                    var4 = 0x1b;\n                    var5 = arg8;\n                    var6 = arg9;\n                    var2, var3 = func_295D(var3, var4, var5, var6);\n                    arg6 = var2;\n                    arg7 = var3;\n                    var2 = arg7 & 0x02 ** 0xa0 - 0x01;\n                    var temp13 = arg4;\n                    var3 = temp13;\n                    var4 = memory[0x40:0x60];\n                    var5 = var4;\n                    var7 = memory[var3:var3 + 0x20];\n                    var6 = var3 + 0x20;\n                    var var8 = var7;\n                    var var9 = var5;\n                    var var10 = var6;\n                \n                    if (var8 < 0x20) {\n                    label_2111:\n                        var temp14 = 0x0100 ** (0x20 - var8) - 0x01;\n                        var temp15 = var9;\n                        memory[temp15:temp15 + 0x20] = (memory[temp15:temp15 + 0x20] & temp14) | (memory[var10:var10 + 0x20] & ~temp14);\n                        var temp16 = memory[0x40:0x60];\n                    \n                        if (keccak256(memory[temp16:temp16 + (var7 + var5) - temp16]) & 0x02 ** 0xa0 - 0x01 != var2) {\n                            var2 = 0x2163;\n                            var3 = arg2;\n                            var4 = 0x1c;\n                            var5 = arg8;\n                            var6 = arg9;\n                            var2, var3 = func_295D(var3, var4, var5, var6);\n                            arg6 = var2;\n                            arg7 = var3;\n                            var2 = arg7 & 0x02 ** 0xa0 - 0x01;\n                            var temp17 = arg4;\n                            var3 = temp17;\n                            var4 = memory[0x40:0x60];\n                            var5 = var4;\n                            var6 = var3 + 0x20;\n                            var7 = memory[var3:var3 + 0x20];\n                            var8 = var7;\n                            var9 = var5;\n                            var10 = var6;\n                        \n                            if (var8 < 0x20) {\n                            label_21A2:\n                                var temp18 = 0x0100 ** (0x20 - var8) - 0x01;\n                                var temp19 = var9;\n                                memory[temp19:temp19 + 0x20] = (memory[temp19:temp19 + 0x20] & temp18) | (memory[var10:var10 + 0x20] & ~temp18);\n                                var temp20 = memory[0x40:0x60];\n                                arg5 = keccak256(memory[temp20:temp20 + (var7 + var5) - temp20]) & 0x02 ** 0xa0 - 0x01 == var2;\n                            \n                            label_21DC:\n                                return arg5;\n                            } else {\n                            label_218C:\n                                var temp21 = var10;\n                                var temp22 = var9;\n                                memory[temp22:temp22 + 0x20] = memory[temp21:temp21 + 0x20];\n                                var8 = var8 + ~0x1f;\n                                var9 = temp22 + 0x20;\n                                var10 = temp21 + 0x20;\n                            \n                                if (var8 < 0x20) { goto label_21A2; }\n                                else { goto label_218C; }\n                            }\n                        } else {\n                            arg5 = 0x01;\n                            goto label_21DC;\n                        }\n                    } else {\n                    label_20FB:\n                        var temp23 = var10;\n                        var temp24 = var9;\n                        memory[temp24:temp24 + 0x20] = memory[temp23:temp23 + 0x20];\n                        var8 = var8 + ~0x1f;\n                        var9 = temp24 + 0x20;\n                        var10 = temp23 + 0x20;\n                    \n                        if (var8 < 0x20) { goto label_2111; }\n                        else { goto label_20FB; }\n                    }\n                } else {\n                    var temp25 = MSIZE();\n                    var temp26 = var2;\n                    memory[temp25:temp25 + 0x20] = temp26;\n                    memory[0x40:0x60] = temp25 + (temp26 + 0x1f & ~0x1f) + 0x20;\n                    var1 = temp25;\n                    var temp27 = var0 + 0x22;\n                    var0 = temp27;\n                    var2 = 0x20b5;\n                    var3 = arg3;\n                    var4 = 0x20;\n                    var5 = var3;\n                    var6 = var0 - 0x01;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    var2 = func_208F(var0, var1, var3, var4, var5, var6);\n                    goto label_20B5;\n                }\n            } else {\n                var temp28 = MSIZE();\n                var temp29 = var2;\n                memory[temp28:temp28 + 0x20] = temp29;\n                var2 = 0x20;\n                memory[0x40:0x60] = var2 + temp28 + (temp29 + 0x1f & ~0x1f);\n                arg10 = temp28;\n                var3 = arg3;\n                var4 = 0x03;\n            \n                if (var4 < memory[var3:var3 + 0x20]) { goto label_201E; }\n                else { assert(); }\n            }\n        } else {\n            r0 = func_238E(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_256A(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10) returns (var r0) {\n        var temp0 = arg10;\n        var temp1 = arg9;\n        memory[temp1:temp1 + 0x20] = memory[temp0:temp0 + 0x20];\n        arg8 = arg8 + ~0x1f;\n        arg9 = temp1 + 0x20;\n        arg10 = temp0 + 0x20;\n    \n        if (arg8 < 0x20) {\n            var temp2 = 0x0100 ** (0x20 - arg8) - 0x01;\n            var temp3 = arg9;\n            memory[temp3:temp3 + 0x20] = (memory[arg10:arg10 + 0x20] & ~temp2) | (memory[temp3:temp3 + 0x20] & temp2);\n            arg3 = arg7 + arg5;\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x20] = address(arg2).call.gas(msg.gas - 0x646e)(memory[temp4:temp4 + arg3 - temp4]);\n        \n            if (!temp5) { revert(memory[0x00:0x00]); }\n        \n            arg2 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n            arg3 = arg1;\n            arg4 = arg0;\n            arg5 = 0x00;\n            arg6 = arg5;\n            arg7 = 0x00;\n            arg8 = arg7;\n            arg9 = 0x00;\n            arg10 = 0x1fe1;\n            arg10 = func_299D();\n            var var0 = 0x00;\n            var var1 = 0x1feb;\n            var1 = func_299D();\n            var var2 = 0x20;\n            var var3 = memory[0x40:0x60];\n        \n            if (MSIZE() < var3) {\n                var temp6 = var2;\n                var temp7 = var3;\n                memory[temp7:temp7 + 0x20] = temp6;\n                var2 = 0x20;\n                memory[0x40:0x60] = var2 + temp7 + (temp6 + 0x1f & ~0x1f);\n                arg10 = temp7;\n                var3 = arg3;\n                var var4 = 0x03;\n            \n                if (var4 >= memory[var3:var3 + 0x20]) { assert(); }\n            \n            label_201E:\n                var temp8 = (memory[var4 + var3 + 0x20:var4 + var3 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8) / 0x02 ** 0xf8 - var2 + 0x04;\n                var0 = temp8;\n                var2 = 0x204c;\n                var3 = arg3;\n                var4 = var0;\n                var var5 = 0x20;\n                var var6 = arg10;\n                var var7 = 0x00;\n                var2 = func_1F0A(var3, var4, var5, var6, var7);\n                arg10 = var2;\n                var2 = 0x20;\n                var3 = memory[0x40:0x60];\n            \n                if (MSIZE() < var3) {\n                    var temp9 = var2;\n                    var temp10 = var3;\n                    memory[temp10:temp10 + 0x20] = temp9;\n                    memory[0x40:0x60] = temp10 + (temp9 + 0x1f & ~0x1f) + 0x20;\n                    var1 = temp10;\n                    var temp11 = var0 + 0x22;\n                    var0 = temp11;\n                    var2 = 0x20b5;\n                    var3 = arg3;\n                    var4 = 0x20;\n                    var5 = var3;\n                    var6 = var0 - 0x01;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    var2 = func_208F(var0, var1, var3, var4, var5, var6);\n                \n                label_20B5:\n                    var1 = var2;\n                    arg8 = memory[arg10 + 0x20:arg10 + 0x20 + 0x20];\n                    var temp12 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n                    arg9 = temp12;\n                    var2 = 0x20d2;\n                    var3 = arg2;\n                    var4 = 0x1b;\n                    var5 = arg8;\n                    var6 = arg9;\n                    var2, var3 = func_295D(var3, var4, var5, var6);\n                    arg6 = var2;\n                    arg7 = var3;\n                    var2 = arg7 & 0x02 ** 0xa0 - 0x01;\n                    var temp13 = arg4;\n                    var3 = temp13;\n                    var4 = memory[0x40:0x60];\n                    var5 = var4;\n                    var7 = memory[var3:var3 + 0x20];\n                    var6 = var3 + 0x20;\n                    var var8 = var7;\n                    var var9 = var5;\n                    var var10 = var6;\n                \n                    if (var8 < 0x20) {\n                    label_2111:\n                        var temp14 = 0x0100 ** (0x20 - var8) - 0x01;\n                        var temp15 = var9;\n                        memory[temp15:temp15 + 0x20] = (memory[temp15:temp15 + 0x20] & temp14) | (memory[var10:var10 + 0x20] & ~temp14);\n                        var temp16 = memory[0x40:0x60];\n                    \n                        if (keccak256(memory[temp16:temp16 + (var7 + var5) - temp16]) & 0x02 ** 0xa0 - 0x01 != var2) {\n                            var2 = 0x2163;\n                            var3 = arg2;\n                            var4 = 0x1c;\n                            var5 = arg8;\n                            var6 = arg9;\n                            var2, var3 = func_295D(var3, var4, var5, var6);\n                            arg6 = var2;\n                            arg7 = var3;\n                            var2 = arg7 & 0x02 ** 0xa0 - 0x01;\n                            var temp17 = arg4;\n                            var3 = temp17;\n                            var4 = memory[0x40:0x60];\n                            var5 = var4;\n                            var6 = var3 + 0x20;\n                            var7 = memory[var3:var3 + 0x20];\n                            var8 = var7;\n                            var9 = var5;\n                            var10 = var6;\n                        \n                            if (var8 < 0x20) {\n                            label_21A2:\n                                var temp18 = 0x0100 ** (0x20 - var8) - 0x01;\n                                var temp19 = var9;\n                                memory[temp19:temp19 + 0x20] = (memory[temp19:temp19 + 0x20] & temp18) | (memory[var10:var10 + 0x20] & ~temp18);\n                                var temp20 = memory[0x40:0x60];\n                                arg5 = keccak256(memory[temp20:temp20 + (var7 + var5) - temp20]) & 0x02 ** 0xa0 - 0x01 == var2;\n                            \n                            label_21DC:\n                                return arg5;\n                            } else {\n                            label_218C:\n                                var temp21 = var10;\n                                var temp22 = var9;\n                                memory[temp22:temp22 + 0x20] = memory[temp21:temp21 + 0x20];\n                                var8 = var8 + ~0x1f;\n                                var9 = temp22 + 0x20;\n                                var10 = temp21 + 0x20;\n                            \n                                if (var8 < 0x20) { goto label_21A2; }\n                                else { goto label_218C; }\n                            }\n                        } else {\n                            arg5 = 0x01;\n                            goto label_21DC;\n                        }\n                    } else {\n                    label_20FB:\n                        var temp23 = var10;\n                        var temp24 = var9;\n                        memory[temp24:temp24 + 0x20] = memory[temp23:temp23 + 0x20];\n                        var8 = var8 + ~0x1f;\n                        var9 = temp24 + 0x20;\n                        var10 = temp23 + 0x20;\n                    \n                        if (var8 < 0x20) { goto label_2111; }\n                        else { goto label_20FB; }\n                    }\n                } else {\n                    var temp25 = MSIZE();\n                    var temp26 = var2;\n                    memory[temp25:temp25 + 0x20] = temp26;\n                    memory[0x40:0x60] = temp25 + (temp26 + 0x1f & ~0x1f) + 0x20;\n                    var1 = temp25;\n                    var temp27 = var0 + 0x22;\n                    var0 = temp27;\n                    var2 = 0x20b5;\n                    var3 = arg3;\n                    var4 = 0x20;\n                    var5 = var3;\n                    var6 = var0 - 0x01;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    var2 = func_208F(var0, var1, var3, var4, var5, var6);\n                    goto label_20B5;\n                }\n            } else {\n                var temp28 = MSIZE();\n                var temp29 = var2;\n                memory[temp28:temp28 + 0x20] = temp29;\n                var2 = 0x20;\n                memory[0x40:0x60] = var2 + temp28 + (temp29 + 0x1f & ~0x1f);\n                arg10 = temp28;\n                var3 = arg3;\n                var4 = 0x03;\n            \n                if (var4 < memory[var3:var3 + 0x20]) { goto label_201E; }\n                else { assert(); }\n            }\n        } else {\n            r0 = func_256A(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_25E6(var arg0) returns (var r0) {\n        var var0 = 0x25ee;\n        var0 = func_299D();\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = 0x25f9;\n        var3 = func_299D();\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = 0x2606;\n        var7 = func_299D();\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n        var1 = memory[arg0:arg0 + 0x20];\n        var2 = 0x00;\n        var var11 = var1;\n        var var12 = memory[0x40:0x60];\n    \n        if (MSIZE() < var12) {\n            var temp0 = var12;\n            var temp1 = var11;\n            var12 = temp1;\n            var11 = temp0;\n            memory[var11:var11 + 0x20] = var12;\n            memory[0x40:0x60] = var11 + var12 * 0x20 + 0x20;\n        \n            if (!var12) {\n            label_2657:\n                var3 = var11;\n                var4 = 0x00;\n            \n                if (var4 >= var1) {\n                label_26E4:\n                    var temp2 = var2 + 0x01;\n                    var10 = var10;\n                    var2 = temp2;\n                    var5 = 0x00;\n                    var6 = var1 + 0x80;\n                    var11 = var2;\n                    var12 = memory[0x40:0x60];\n                \n                    if (MSIZE() < var12) {\n                        var temp3 = var11;\n                        var temp4 = var12;\n                        memory[temp4:temp4 + 0x20] = temp3;\n                        memory[0x40:0x60] = temp4 + (temp3 + 0x1f & ~0x1f) + 0x20;\n                        var7 = temp4;\n                    \n                        if (0x01 <= var5) {\n                        label_276D:\n                            var4 = 0x00;\n                        \n                            if (var4 >= var1) {\n                            label_294D:\n                                return var7;\n                            } else {\n                            label_277B:\n                                var11 = 0x5f00000000000000000000000000000000000000000000000000000000000000;\n                                var12 = var7;\n                                var var13 = var5;\n                            \n                                if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n                            \n                                memory[var12 + 0x20 + var13:var12 + 0x20 + var13 + 0x01] = byte(var11 & ~(0x02 ** 0xf8 - 0x01), 0x00);\n                                var5 = var5 + 0x01;\n                                var10 = var10;\n                                var8 = 0x00;\n                                var11 = var3;\n                                var12 = var4;\n                            \n                                if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n                            \n                            label_27D6:\n                            \n                                if (var8 >= memory[memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20]:memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20] + 0x20]) {\n                                    var11 = 0xff00000000000000000000000000000000000000000000000000000000000000;\n                                    var12 = var7;\n                                    var13 = var5;\n                                \n                                    if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n                                \n                                    memory[var12 + 0x20 + var13:var12 + 0x20 + var13 + 0x01] = byte(var11 & ~(0x02 ** 0xf8 - 0x01), 0x00);\n                                    var4 = var4 + 0x01;\n                                    var10 = var10;\n                                    var5 = var5 + 0x01;\n                                \n                                    if (var4 >= var1) { goto label_294D; }\n                                    else { goto label_277B; }\n                                } else if (var8 % 0x17) {\n                                label_2892:\n                                    var11 = var3;\n                                    var12 = var4;\n                                \n                                    if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n                                \n                                    var temp5 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n                                    var11 = temp5;\n                                    var12 = var8;\n                                \n                                    if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n                                \n                                    var11 = memory[var12 + var11 + 0x20:var12 + var11 + 0x20 + 0x20] / 0x02 ** 0xf8 * 0x02 ** 0xf8;\n                                    var12 = var7;\n                                    var13 = var5;\n                                \n                                    if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n                                \n                                    memory[var12 + 0x20 + var13:var12 + 0x20 + var13 + 0x01] = byte(var11 & ~(0x02 ** 0xf8 - 0x01), 0x00);\n                                    var5 = var5 + 0x01;\n                                    var10 = var10;\n                                    var8 = var8 + 0x01;\n                                    var11 = var3;\n                                    var12 = var4;\n                                \n                                    if (var12 < memory[var11:var11 + 0x20]) { goto label_27D6; }\n                                    else { assert(); }\n                                } else {\n                                    var11 = 0x18;\n                                    var12 = var8;\n                                    var13 = var3;\n                                    var var14 = var4;\n                                \n                                    if (var14 >= memory[var13:var13 + 0x20]) { assert(); }\n                                \n                                    if (memory[memory[var14 * 0x20 + var13 + 0x20:var14 * 0x20 + var13 + 0x20 + 0x20]:memory[var14 * 0x20 + var13 + 0x20:var14 * 0x20 + var13 + 0x20 + 0x20] + 0x20] - var12 >= var11) {\n                                        var9 = 0x40 + 0x17;\n                                        var temp6 = var5;\n                                        var10 = temp6;\n                                    \n                                        if (0x01 <= var10 - var10) { goto label_2892; }\n                                    \n                                    label_2849:\n                                        var11 = var9 * 0x02 ** 0xf8;\n                                        var12 = var5 - var10;\n                                    \n                                        if (var12 >= 0x01) { assert(); }\n                                    \n                                        var11 = byte(var11, var12) * 0x02 ** 0xf8;\n                                        var12 = var7;\n                                        var13 = var5;\n                                    \n                                        if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n                                    \n                                        memory[var12 + 0x20 + var13:var12 + 0x20 + var13 + 0x01] = byte(var11 & ~(0x02 ** 0xf8 - 0x01), 0x00);\n                                        var5 = var5 + 0x01;\n                                        var10 = var10;\n                                    \n                                        if (0x01 <= var5 - var10) { goto label_2892; }\n                                        else { goto label_2849; }\n                                    } else {\n                                        var11 = var8;\n                                        var12 = var3;\n                                        var13 = var4;\n                                    \n                                        if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n                                    \n                                        var11 = memory[memory[var13 * 0x20 + var12 + 0x20:var13 * 0x20 + var12 + 0x20 + 0x20]:memory[var13 * 0x20 + var12 + 0x20:var13 * 0x20 + var12 + 0x20 + 0x20] + 0x20] - var11;\n                                        var9 = var11 + 0x40;\n                                        var temp7 = var5;\n                                        var10 = temp7;\n                                    \n                                        if (0x01 <= var10 - var10) { goto label_2892; }\n                                        else { goto label_2849; }\n                                    }\n                                }\n                            }\n                        } else {\n                        label_2726:\n                            var11 = var6 * 0x02 ** 0xf8;\n                            var12 = var5;\n                        \n                            if (var12 >= 0x01) { assert(); }\n                        \n                            var11 = byte(var11, var12) * 0x02 ** 0xf8;\n                            var12 = var7;\n                            var13 = var5;\n                        \n                            if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n                        \n                            memory[var12 + 0x20 + var13:var12 + 0x20 + var13 + 0x01] = byte(var11 & ~(0x02 ** 0xf8 - 0x01), 0x00);\n                            var5 = var5 + 0x01;\n                            var10 = var10;\n                        \n                            if (0x01 <= var5) { goto label_276D; }\n                            else { goto label_2726; }\n                        }\n                    } else {\n                        var temp8 = MSIZE();\n                        var temp9 = var11;\n                        memory[temp8:temp8 + 0x20] = temp9;\n                        memory[0x40:0x60] = temp8 + (temp9 + 0x1f & ~0x1f) + 0x20;\n                        var7 = temp8;\n                    \n                        if (0x01 <= var5) { goto label_276D; }\n                        else { goto label_2726; }\n                    }\n                } else {\n                label_2668:\n                    var11 = arg0;\n                    var12 = var4;\n                \n                    if (var12 >= memory[var11:var11 + 0x20]) { assert(); }\n                \n                    var11 = memory[var12 * 0x20 + var11 + 0x20:var12 * 0x20 + var11 + 0x20 + 0x20];\n                    var12 = var3;\n                    var13 = var4;\n                \n                    if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n                \n                    memory[var12 + var13 * 0x20 + 0x20:var12 + var13 * 0x20 + 0x20 + 0x20] = var11;\n                    var11 = 0x17;\n                    var12 = 0x01;\n                    var13 = var3;\n                    var14 = var4;\n                \n                    if (var14 >= memory[var13:var13 + 0x20]) { assert(); }\n                \n                    var12 = memory[memory[var14 * 0x20 + var13 + 0x20:var14 * 0x20 + var13 + 0x20 + 0x20]:memory[var14 * 0x20 + var13 + 0x20:var14 * 0x20 + var13 + 0x20 + 0x20] + 0x20] - var12;\n                \n                    if (!var11) { assert(); }\n                \n                    var11 = var12 / var11;\n                    var12 = var3;\n                    var13 = var4;\n                \n                    if (var13 >= memory[var12:var12 + 0x20]) { assert(); }\n                \n                    var2 = memory[memory[var13 * 0x20 + var12 + 0x20:var13 * 0x20 + var12 + 0x20 + 0x20]:memory[var13 * 0x20 + var12 + 0x20:var13 * 0x20 + var12 + 0x20 + 0x20] + 0x20] + var11 + var2 + 0x03;\n                    var10 = var10;\n                    var4 = var4 + 0x01;\n                \n                    if (var4 >= var1) { goto label_26E4; }\n                    else { goto label_2668; }\n                }\n            } else {\n            label_2638:\n                var13 = var11 + 0x20;\n                var14 = 0x2644;\n                var14 = func_299D();\n            \n            label_2644:\n                var temp10 = var13;\n                memory[temp10:temp10 + 0x20] = var14;\n                var13 = temp10 + 0x20;\n                var12 = var12 - 0x01;\n            \n                if (var12) {\n                    var14 = 0x2644;\n                    var14 = func_299D();\n                    goto label_2644;\n                } else {\n                    var12 = var13;\n                    goto label_2657;\n                }\n            }\n        } else {\n            var temp11 = MSIZE();\n            var temp12 = var11;\n            var12 = temp12;\n            var11 = temp11;\n            memory[var11:var11 + 0x20] = var12;\n            memory[0x40:0x60] = var11 + var12 * 0x20 + 0x20;\n        \n            if (!var12) { goto label_2657; }\n            else { goto label_2638; }\n        }\n    }\n    \n    function func_295D(var arg0, var arg1, var arg2, var arg3) returns (var r0, var arg0) {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = arg0;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg1;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = arg2;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = arg3;\n        var temp1;\n        temp1, memory[temp0:temp0 + 0x20] = address(0x01).call.gas(0x0bb8)(memory[temp0:temp0 + 0x80]);\n        arg0 = memory[temp0:temp0 + 0x20];\n        return r0, arg0;\n    }\n    \n    function func_299D() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_29AF() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        var var0 = temp0;\n        memory[0x40:0x60] = var0 + 0x60;\n        var var1 = 0x03;\n        var var2 = var0;\n        var var3 = 0x29c6;\n        var3 = func_299D();\n    \n    label_29C6:\n        var temp1 = var2;\n        memory[temp1:temp1 + 0x20] = var3;\n        var1 = var1 - 0x01;\n        var2 = temp1 + 0x20;\n    \n        if (!var1) { return var0; }\n    \n        var3 = 0x29c6;\n        var3 = func_299D();\n        goto label_29C6;\n    }\n    \n    function func_2A5A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x0d2f;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 > var0) { return func_2A69(arg1, var0); }\n    \n        arg0 = arg1;\n        // Error: Could not resolve jump destination!\n    }\n    \n    function func_2A69(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        storage[temp0] = 0x00;\n        arg1 = temp0 + 0x01;\n    \n        if (arg0 <= arg1) { return arg0; }\n    \n        r0 = func_2A69(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 46551 tokens. Please reduce the length of the messages."
}