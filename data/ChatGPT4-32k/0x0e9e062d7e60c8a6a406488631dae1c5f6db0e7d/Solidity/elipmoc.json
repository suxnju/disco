{
	"address": "0x0e9e062d7e60c8a6a406488631dae1c5f6db0e7d",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the corresponding Solidity contract code for the given decompiled code:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    uint256 private _costWei;\n    address private _owner;\n    uint8 private _enabled;\n\n    event UpdateEnabled(string message);\n    event UpdateCost(uint256 cost);\n    event NewText(string text1, string text2);\n\n    constructor() {\n        _owner = msg.sender;\n    }\n\n    function enableContract() public {\n        require(msg.sender == _owner, \"Only the contract owner can enable the contract.\");\n        _enabled = 1;\n        emit UpdateEnabled(\"Texting has been enabled\");\n    }\n\n    function pauseContract() public {\n        require(msg.sender == _owner, \"Only the contract owner can pause the contract.\");\n        _enabled = 0;\n        emit UpdateEnabled(\"Texting has been disabled\");\n    }\n\n    function withdraw() public {\n        require(msg.sender == _owner, \"Only the contract owner can withdraw.\");\n        require(address(this).balance > 0, \"Contract balance is 0\");\n        payable(_owner).transfer(address(this).balance);\n    }\n\n    function costWei() public view returns (uint256) {\n        return _costWei;\n    }\n\n    function changeCost(uint256 newCost) public {\n        require(msg.sender == _owner, \"Only the contract owner can change the cost.\");\n        _costWei = newCost;\n        emit UpdateCost(newCost);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner, \"Only the contract owner can transfer ownership.\");\n        _owner = newOwner;\n    }\n\n    function enabled() public view returns (uint8) {\n        return _enabled;\n    }\n\n    function sendText(string memory text1, string memory text2) public payable {\n        require(_enabled == 1, \"Texting is currently disabled.\");\n        require(msg.value >= _costWei, \"Insufficient funds to send text.\");\n        emit NewText(text1, text2);\n    }\n}\n```\n\nPlease note that the function `__function_selector__` and the direct manipulation of memory in `sendText` function from the EVM Bytecode are not represented in above Solidity code because they are lower level details that are automatically handled by the Solidity compiler.",
				"role": "assistant"
			}
		}
	],
	"created": 1702473525,
	"id": "chatcmpl-8VJQLEitrzSdpAnjreRJfWz1iSkps",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.14 08:03 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _costWei; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _enabled; // STORAGE[0x2] bytes 0 to 0\n\n// Events\nUpdateEnabled(string);\nUpdateCost(uint256);\nNewText(string, string);\n\nfunction enableContract() public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    _enabled = 1;\n    emit UpdateEnabled('Texting has been enabled');\n}\n\nfunction withdraw() public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    v0 = _owner.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    assert(v0);\n}\n\nfunction pauseContract() public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    _enabled = 0;\n    emit UpdateEnabled('Texting has been disabled');\n}\n\nfunction costWei() public payable { \n    assert(!msg.value);\n    return _costWei;\n}\n\nfunction changeCost(uint256 varg0) public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    _costWei = varg0;\n    emit UpdateCost(varg0);\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction transferOwnership(address varg0) public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    _owner = varg0;\n}\n\nfunction enabled() public payable { \n    assert(!msg.value);\n    return _enabled;\n}\n\nfunction sendText(string varg0, string varg1) public payable { \n    v0 = new bytes[](varg0.length);\n    CALLDATACOPY(v0.data, 36 + varg0, varg0.length);\n    v1 = new bytes[](varg1.length);\n    CALLDATACOPY(v1.data, 36 + varg1, varg1.length);\n    require(_enabled);\n    require(msg.value >= _costWei);\n    v2 = new array[](v0.length);\n    v3 = v4 = v2.data;\n    v5 = v6 = v0.length;\n    v7 = v8 = v0.data;\n    if (v6 != 0) {\n        while (1) {\n            MEM[v3] = MEM[v7];\n            if (v5 <= 32) {\n                break;\n            }\n            v5 = v5 + ~31;\n            v3 += 32;\n            v7 += 32;\n        }\n    }\n    if (0x1f & v6) {\n        MEM[v6 + v4 - (0x1f & v6)] = ~(256 ** (32 - (0x1f & v6)) - 1) & MEM[v6 + v4 - (0x1f & v6)];\n    }\n    v9 = new array[](v1.length);\n    v10 = v11 = v1.length;\n    v12 = v13 = v9.data;\n    v14 = v15 = v1.data;\n    if (v11) {\n        while (1) {\n            MEM[v12] = MEM[v14];\n            if (v10 <= 32) {\n                break;\n            }\n            v10 = v10 + ~31;\n            v12 += 32;\n            v14 += 32;\n        }\n    }\n    v16 = v17 = v11 + v13;\n    if (0x1f & v11) {\n        MEM[v17 - (0x1f & v11)] = ~(256 ** (32 - (0x1f & v11)) - 1) & MEM[v17 - (0x1f & v11)];\n    }\n    emit NewText(v2, v9);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x238dafe0) {\n            enabled();\n        } else if (0x30ac3052 == function_selector) {\n            sendText(string,string);\n        } else if (0x367edd32 == function_selector) {\n            enableContract();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x439766ce == function_selector) {\n            pauseContract();\n        } else if (0x44097d70 == function_selector) {\n            costWei();\n        } else if (0x5cb85cd2 == function_selector) {\n            changeCost(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    throw();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.14 08:03 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _costWei; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _enabled; // STORAGE[0x2] bytes 0 to 0\n\n// Events\nUpdateEnabled(string);\nUpdateCost(uint256);\nNewText(string, string);\n\nfunction enableContract() public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    _enabled = 1;\n    emit UpdateEnabled('Texting has been enabled');\n}\n\nfunction withdraw() public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    v0 = _owner.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    assert(v0);\n}\n\nfunction pauseContract() public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    _enabled = 0;\n    emit UpdateEnabled('Texting has been disabled');\n}\n\nfunction costWei() public payable { \n    assert(!msg.value);\n    return _costWei;\n}\n\nfunction changeCost(uint256 varg0) public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    _costWei = varg0;\n    emit UpdateCost(varg0);\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction transferOwnership(address varg0) public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    _owner = varg0;\n}\n\nfunction enabled() public payable { \n    assert(!msg.value);\n    return _enabled;\n}\n\nfunction sendText(string varg0, string varg1) public payable { \n    v0 = new bytes[](varg0.length);\n    CALLDATACOPY(v0.data, 36 + varg0, varg0.length);\n    v1 = new bytes[](varg1.length);\n    CALLDATACOPY(v1.data, 36 + varg1, varg1.length);\n    require(_enabled);\n    require(msg.value >= _costWei);\n    v2 = new array[](v0.length);\n    v3 = v4 = v2.data;\n    v5 = v6 = v0.length;\n    v7 = v8 = v0.data;\n    if (v6 != 0) {\n        while (1) {\n            MEM[v3] = MEM[v7];\n            if (v5 <= 32) {\n                break;\n            }\n            v5 = v5 + ~31;\n            v3 += 32;\n            v7 += 32;\n        }\n    }\n    if (0x1f & v6) {\n        MEM[v6 + v4 - (0x1f & v6)] = ~(256 ** (32 - (0x1f & v6)) - 1) & MEM[v6 + v4 - (0x1f & v6)];\n    }\n    v9 = new array[](v1.length);\n    v10 = v11 = v1.length;\n    v12 = v13 = v9.data;\n    v14 = v15 = v1.data;\n    if (v11) {\n        while (1) {\n            MEM[v12] = MEM[v14];\n            if (v10 <= 32) {\n                break;\n            }\n            v10 = v10 + ~31;\n            v12 += 32;\n            v14 += 32;\n        }\n    }\n    v16 = v17 = v11 + v13;\n    if (0x1f & v11) {\n        MEM[v17 - (0x1f & v11)] = ~(256 ** (32 - (0x1f & v11)) - 1) & MEM[v17 - (0x1f & v11)];\n    }\n    emit NewText(v2, v9);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x238dafe0) {\n            enabled();\n        } else if (0x30ac3052 == function_selector) {\n            sendText(string,string);\n        } else if (0x367edd32 == function_selector) {\n            enableContract();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x439766ce == function_selector) {\n            pauseContract();\n        } else if (0x44097d70 == function_selector) {\n            costWei();\n        } else if (0x5cb85cd2 == function_selector) {\n            changeCost(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    throw();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.14 08:03 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _costWei; // STORAGE[0x1]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _enabled; // STORAGE[0x2] bytes 0 to 0\n\n// Events\nUpdateEnabled(string);\nUpdateCost(uint256);\nNewText(string, string);\n\nfunction enableContract() public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    _enabled = 1;\n    emit UpdateEnabled('Texting has been enabled');\n}\n\nfunction withdraw() public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    v0 = _owner.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    assert(v0);\n}\n\nfunction pauseContract() public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    _enabled = 0;\n    emit UpdateEnabled('Texting has been disabled');\n}\n\nfunction costWei() public payable { \n    assert(!msg.value);\n    return _costWei;\n}\n\nfunction changeCost(uint256 varg0) public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    _costWei = varg0;\n    emit UpdateCost(varg0);\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction transferOwnership(address varg0) public payable { \n    assert(!msg.value);\n    require(_owner == msg.sender);\n    _owner = varg0;\n}\n\nfunction enabled() public payable { \n    assert(!msg.value);\n    return _enabled;\n}\n\nfunction sendText(string varg0, string varg1) public payable { \n    v0 = new bytes[](varg0.length);\n    CALLDATACOPY(v0.data, 36 + varg0, varg0.length);\n    v1 = new bytes[](varg1.length);\n    CALLDATACOPY(v1.data, 36 + varg1, varg1.length);\n    require(_enabled);\n    require(msg.value >= _costWei);\n    v2 = new array[](v0.length);\n    v3 = v4 = v2.data;\n    v5 = v6 = v0.length;\n    v7 = v8 = v0.data;\n    if (v6 != 0) {\n        while (1) {\n            MEM[v3] = MEM[v7];\n            if (v5 <= 32) {\n                break;\n            }\n            v5 = v5 + ~31;\n            v3 += 32;\n            v7 += 32;\n        }\n    }\n    if (0x1f & v6) {\n        MEM[v6 + v4 - (0x1f & v6)] = ~(256 ** (32 - (0x1f & v6)) - 1) & MEM[v6 + v4 - (0x1f & v6)];\n    }\n    v9 = new array[](v1.length);\n    v10 = v11 = v1.length;\n    v12 = v13 = v9.data;\n    v14 = v15 = v1.data;\n    if (v11) {\n        while (1) {\n            MEM[v12] = MEM[v14];\n            if (v10 <= 32) {\n                break;\n            }\n            v10 = v10 + ~31;\n            v12 += 32;\n            v14 += 32;\n        }\n    }\n    v16 = v17 = v11 + v13;\n    if (0x1f & v11) {\n        MEM[v17 - (0x1f & v11)] = ~(256 ** (32 - (0x1f & v11)) - 1) & MEM[v17 - (0x1f & v11)];\n    }\n    emit NewText(v2, v9);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x238dafe0) {\n            enabled();\n        } else if (0x30ac3052 == function_selector) {\n            sendText(string,string);\n        } else if (0x367edd32 == function_selector) {\n            enableContract();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x439766ce == function_selector) {\n            pauseContract();\n        } else if (0x44097d70 == function_selector) {\n            costWei();\n        } else if (0x5cb85cd2 == function_selector) {\n            changeCost(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    throw();\n}\n.",
	"status": "1",
	"time_cost": 16.088382720947266,
	"usage": {
		"completion_tokens": 499,
		"prompt_tokens": 1155,
		"total_tokens": 1654
	}
}