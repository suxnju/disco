{
	"address": "0xb5c33f965c8899d255c34cdd2a3efa8abcbb3dea",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the contract code in Solidity:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract TokenContract {\n    uint256 private _totalSupply;\n    uint256 private _buyableToken;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint256 private _rate;\n    address private _owner;\n    \n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    \n    constructor() {\n        _owner = msg.sender;\n    }\n    \n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n    \n    function balanceOf(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n    \n    function transfer(address recipient, uint256 amount) public returns (bool) {\n        require(_balanceOf[msg.sender] >= amount, \"Insufficient balance\");\n        _balanceOf[msg.sender] -= amount;\n        _balanceOf[recipient] += amount;\n        emit Transfer(msg.sender, recipient, amount);\n        return true;\n    }\n    \n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n    \n    function approve(address spender, uint256 amount) public returns (bool) {\n        _allowance[msg.sender][spender] = amount;\n        emit Approval(msg.sender, spender, amount);\n        return true;\n    }\n    \n    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {\n        require(_balanceOf[sender] >= amount, \"Insufficient balance\");\n        require(_allowance[sender][msg.sender] >= amount, \"Insufficient allowance\");\n        _balanceOf[sender] -= amount;\n        _balanceOf[recipient] += amount;\n        _allowance[sender][msg.sender] -= amount;\n        emit Transfer(sender, recipient, amount);\n        return true;\n    }\n    \n    function buyTokens() public payable {\n        require(msg.value > 0, \"Must send ether to buy tokens\");\n        uint256 tokensToBuy = msg.value * _rate;\n        require(_buyableToken >= tokensToBuy, \"Not enough tokens available for sale\");\n        _buyableToken -= tokensToBuy;\n        _balanceOf[msg.sender] += tokensToBuy;\n    }\n    \n    function setPrice(uint256 newRate) public {\n        require(msg.sender == _owner, \"Only the owner can set the price\");\n        _rate = newRate;\n    }\n}\n```\n\nThis contract represents a simple ERC20 token with additional functionality to buy tokens directly from the contract. Please note that this code is a simplified version and does not include all safety checks and other features that a real-world contract might have.",
				"role": "assistant"
			}
		}
	],
	"created": 1701459593,
	"id": "chatcmpl-8R3ebOJIkPcFjaoFNDDMXvMy8wWLR",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.13 04:38 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x2]\nuint256 _buyabletoken; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nuint256 stor_c; // STORAGE[0xc]\nuint56 _rATE; // STORAGE[0x1] bytes 0 to 6\naddress _owner; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 + varg0;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction name() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (8) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public payable { \n    assert(!msg.value);\n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    v0 = v1 = _allowance[msg.sender] >= varg2;\n    if (v1) {\n        v0 = v2 = _balanceOf[varg0] >= varg2;\n    }\n    if (v0) {\n        v0 = varg2 > 0;\n    }\n    require(v0);\n    v3 = _SafeSub(varg2, _balanceOf[varg0]);\n    _balanceOf[varg0] = v3;\n    v4 = _SafeAdd(varg2, _balanceOf[varg1]);\n    _balanceOf[varg1] = v4;\n    v5 = _SafeSub(varg2, _allowance[msg.sender]);\n    _allowance[msg.sender] = v5;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public payable { \n    assert(!msg.value);\n    return 18;\n}\n\nfunction buyabletoken() public payable { \n    assert(!msg.value);\n    return _buyabletoken;\n}\n\nfunction RATE() public payable { \n    assert(!msg.value);\n    return _rATE;\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balanceOf[varg0];\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction symbol() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (3) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = varg1 > 0;\n    }\n    require(v0);\n    v2 = _SafeSub(varg1, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v2;\n    v3 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v3;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction buyTokens() public payable { \n    0x532();\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    assert(!msg.value);\n    return _allowance[varg1];\n}\n\nfunction 0x532() private { \n    require(msg.value > 0);\n    v0 = v1 = block.timestamp > stor_7;\n    if (v1) {\n        v0 = v2 = block.timestamp < stor_c;\n    }\n    require(v0);\n    v3 = v4 = block.timestamp > stor_7;\n    if (v4) {\n        v3 = v5 = block.timestamp < stor_8;\n    }\n    if (!v3) {\n        v6 = v7 = block.timestamp > stor_9;\n        if (v7) {\n            v6 = v8 = block.timestamp < stor_a;\n        }\n        if (!v6) {\n            v9 = v10 = block.timestamp > stor_b;\n            if (v10) {\n                v9 = v11 = block.timestamp < stor_c;\n            }\n            if (v9) {\n                _rATE = 1000;\n                0x651(msg.value, msg.sender);\n            }\n        } else {\n            _rATE = 2000;\n            0x651(msg.value, msg.sender);\n        }\n    } else {\n        _rATE = 3000;\n        0x651(msg.value, msg.sender);\n    }\n    return ;\n}\n\nfunction 0x651(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * _rATE;\n    v1 = v2 = varg0 == 0;\n    if (varg0 != 0) {\n        assert(varg0);\n        v1 = v0 / varg0 == _rATE;\n    }\n    assert(v1);\n    require(v0 < _buyabletoken);\n    v3 = address(varg1);\n    v4 = _SafeAdd(v0, _balanceOf[v3]);\n    v5 = address(varg1);\n    _balanceOf[v5] = v4;\n    v6 = _SafeSub(v0, _balanceOf[_owner]);\n    _balanceOf[_owner] = v6;\n    v7 = _SafeSub(v0, _buyabletoken);\n    _buyabletoken = v7;\n    v8 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    assert(v8);\n    return ;\n}\n\nfunction setPrice(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    0x651(varg1, varg0);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0xe4768b == function_selector) {\n            setPrice(address,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x4f1d76ef == function_selector) {\n            buyabletoken();\n        } else if (0x664e9704 == function_selector) {\n            RATE();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xd0febe4c == function_selector) {\n            buyTokens();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    0x532();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 04:38 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x2]\nuint256 _buyabletoken; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nuint256 stor_c; // STORAGE[0xc]\nuint56 _rATE; // STORAGE[0x1] bytes 0 to 6\naddress _owner; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 + varg0;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction name() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (8) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public payable { \n    assert(!msg.value);\n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    v0 = v1 = _allowance[msg.sender] >= varg2;\n    if (v1) {\n        v0 = v2 = _balanceOf[varg0] >= varg2;\n    }\n    if (v0) {\n        v0 = varg2 > 0;\n    }\n    require(v0);\n    v3 = _SafeSub(varg2, _balanceOf[varg0]);\n    _balanceOf[varg0] = v3;\n    v4 = _SafeAdd(varg2, _balanceOf[varg1]);\n    _balanceOf[varg1] = v4;\n    v5 = _SafeSub(varg2, _allowance[msg.sender]);\n    _allowance[msg.sender] = v5;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public payable { \n    assert(!msg.value);\n    return 18;\n}\n\nfunction buyabletoken() public payable { \n    assert(!msg.value);\n    return _buyabletoken;\n}\n\nfunction RATE() public payable { \n    assert(!msg.value);\n    return _rATE;\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balanceOf[varg0];\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction symbol() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (3) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = varg1 > 0;\n    }\n    require(v0);\n    v2 = _SafeSub(varg1, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v2;\n    v3 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v3;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction buyTokens() public payable { \n    0x532();\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    assert(!msg.value);\n    return _allowance[varg1];\n}\n\nfunction 0x532() private { \n    require(msg.value > 0);\n    v0 = v1 = block.timestamp > stor_7;\n    if (v1) {\n        v0 = v2 = block.timestamp < stor_c;\n    }\n    require(v0);\n    v3 = v4 = block.timestamp > stor_7;\n    if (v4) {\n        v3 = v5 = block.timestamp < stor_8;\n    }\n    if (!v3) {\n        v6 = v7 = block.timestamp > stor_9;\n        if (v7) {\n            v6 = v8 = block.timestamp < stor_a;\n        }\n        if (!v6) {\n            v9 = v10 = block.timestamp > stor_b;\n            if (v10) {\n                v9 = v11 = block.timestamp < stor_c;\n            }\n            if (v9) {\n                _rATE = 1000;\n                0x651(msg.value, msg.sender);\n            }\n        } else {\n            _rATE = 2000;\n            0x651(msg.value, msg.sender);\n        }\n    } else {\n        _rATE = 3000;\n        0x651(msg.value, msg.sender);\n    }\n    return ;\n}\n\nfunction 0x651(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * _rATE;\n    v1 = v2 = varg0 == 0;\n    if (varg0 != 0) {\n        assert(varg0);\n        v1 = v0 / varg0 == _rATE;\n    }\n    assert(v1);\n    require(v0 < _buyabletoken);\n    v3 = address(varg1);\n    v4 = _SafeAdd(v0, _balanceOf[v3]);\n    v5 = address(varg1);\n    _balanceOf[v5] = v4;\n    v6 = _SafeSub(v0, _balanceOf[_owner]);\n    _balanceOf[_owner] = v6;\n    v7 = _SafeSub(v0, _buyabletoken);\n    _buyabletoken = v7;\n    v8 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    assert(v8);\n    return ;\n}\n\nfunction setPrice(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    0x651(varg1, varg0);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0xe4768b == function_selector) {\n            setPrice(address,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x4f1d76ef == function_selector) {\n            buyabletoken();\n        } else if (0x664e9704 == function_selector) {\n            RATE();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xd0febe4c == function_selector) {\n            buyTokens();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    0x532();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.13 04:38 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x2]\nuint256 _buyabletoken; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 stor_7; // STORAGE[0x7]\nuint256 stor_8; // STORAGE[0x8]\nuint256 stor_9; // STORAGE[0x9]\nuint256 stor_a; // STORAGE[0xa]\nuint256 stor_b; // STORAGE[0xb]\nuint256 stor_c; // STORAGE[0xc]\nuint56 _rATE; // STORAGE[0x1] bytes 0 to 6\naddress _owner; // STORAGE[0x4] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg1 + varg0;\n    assert(v0 >= varg1);\n    return v0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    assert(varg0 <= varg1);\n    return varg1 - varg0;\n}\n\nfunction name() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (8) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public payable { \n    assert(!msg.value);\n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    v0 = v1 = _allowance[msg.sender] >= varg2;\n    if (v1) {\n        v0 = v2 = _balanceOf[varg0] >= varg2;\n    }\n    if (v0) {\n        v0 = varg2 > 0;\n    }\n    require(v0);\n    v3 = _SafeSub(varg2, _balanceOf[varg0]);\n    _balanceOf[varg0] = v3;\n    v4 = _SafeAdd(varg2, _balanceOf[varg1]);\n    _balanceOf[varg1] = v4;\n    v5 = _SafeSub(varg2, _allowance[msg.sender]);\n    _allowance[msg.sender] = v5;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public payable { \n    assert(!msg.value);\n    return 18;\n}\n\nfunction buyabletoken() public payable { \n    assert(!msg.value);\n    return _buyabletoken;\n}\n\nfunction RATE() public payable { \n    assert(!msg.value);\n    return _rATE;\n}\n\nfunction balanceOf(address varg0) public payable { \n    assert(!msg.value);\n    return _balanceOf[varg0];\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction symbol() public payable { \n    assert(!msg.value);\n    v0 = new array[](v1.length);\n    v2 = v3 = v0.data;\n    v4 = v5 = v1.length;\n    v6 = v7 = v1.data;\n    if (v5 != 0) {\n        while (1) {\n            MEM[v2] = MEM[v6];\n            if (v4 <= 32) {\n                break;\n            }\n            v2 = v2 + 32;\n            v6 = v6 + 32;\n            v4 = v4 - 32;\n        }\n    }\n    if (3) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffff & MEM[v0.data];\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (v1) {\n        v0 = varg1 > 0;\n    }\n    require(v0);\n    v2 = _SafeSub(varg1, _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = v2;\n    v3 = _SafeAdd(varg1, _balanceOf[varg0]);\n    _balanceOf[varg0] = v3;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction buyTokens() public payable { \n    0x532();\n}\n\nfunction allowance(address varg0, address varg1) public payable { \n    assert(!msg.value);\n    return _allowance[varg1];\n}\n\nfunction 0x532() private { \n    require(msg.value > 0);\n    v0 = v1 = block.timestamp > stor_7;\n    if (v1) {\n        v0 = v2 = block.timestamp < stor_c;\n    }\n    require(v0);\n    v3 = v4 = block.timestamp > stor_7;\n    if (v4) {\n        v3 = v5 = block.timestamp < stor_8;\n    }\n    if (!v3) {\n        v6 = v7 = block.timestamp > stor_9;\n        if (v7) {\n            v6 = v8 = block.timestamp < stor_a;\n        }\n        if (!v6) {\n            v9 = v10 = block.timestamp > stor_b;\n            if (v10) {\n                v9 = v11 = block.timestamp < stor_c;\n            }\n            if (v9) {\n                _rATE = 1000;\n                0x651(msg.value, msg.sender);\n            }\n        } else {\n            _rATE = 2000;\n            0x651(msg.value, msg.sender);\n        }\n    } else {\n        _rATE = 3000;\n        0x651(msg.value, msg.sender);\n    }\n    return ;\n}\n\nfunction 0x651(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * _rATE;\n    v1 = v2 = varg0 == 0;\n    if (varg0 != 0) {\n        assert(varg0);\n        v1 = v0 / varg0 == _rATE;\n    }\n    assert(v1);\n    require(v0 < _buyabletoken);\n    v3 = address(varg1);\n    v4 = _SafeAdd(v0, _balanceOf[v3]);\n    v5 = address(varg1);\n    _balanceOf[v5] = v4;\n    v6 = _SafeSub(v0, _balanceOf[_owner]);\n    _balanceOf[_owner] = v6;\n    v7 = _SafeSub(v0, _buyabletoken);\n    _buyabletoken = v7;\n    v8 = _owner.call().value(varg0).gas(!varg0 * 2300);\n    assert(v8);\n    return ;\n}\n\nfunction setPrice(address varg0, uint256 varg1) public payable { \n    assert(!msg.value);\n    0x651(varg1, varg0);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0xe4768b == function_selector) {\n            setPrice(address,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x4f1d76ef == function_selector) {\n            buyabletoken();\n        } else if (0x664e9704 == function_selector) {\n            RATE();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xd0febe4c == function_selector) {\n            buyTokens();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        }\n    }\n    0x532();\n}\n.",
	"status": "1",
	"time_cost": 26.44434428215027,
	"usage": {
		"completion_tokens": 602,
		"prompt_tokens": 2179,
		"total_tokens": 2781
	}
}