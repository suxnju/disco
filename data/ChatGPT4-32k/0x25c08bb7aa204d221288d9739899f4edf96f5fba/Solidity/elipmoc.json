{
	"address": "0x25c08bb7aa204d221288d9739899f4edf96f5fba",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the provided decompiled code, here is a Solidity smart contract that is similar to the functionality described:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    uint256 private _fundingGoal;\n    uint256 private _amountRaised;\n    uint256 private stor_3;\n    uint256 private _deadline;\n    uint256 private _price;\n    uint256 private _initialTokenAmount;\n    uint256 private _currentTokenAmount;\n    mapping (address => uint256) private _balanceOf;\n    address payable private _beneficiary;\n    uint8 private stor_5_0_0;\n    uint8 private stor_a_0_0;\n    uint8 private _fallback;\n    IERC20 private _tokenReward;\n\n    event GoalReached(address _beneficiary, uint256 _amountRaised);\n\n    function checkGoalReached() external {\n        require(block.timestamp >= _deadline, \"Deadline not reached yet\");\n        if (_amountRaised >= _fundingGoal) {\n            stor_a_0_0 = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _fallback = 1;\n    }\n\n    function deadline() external view returns (uint256) { \n        return _deadline;\n    }\n\n    function beneficiary() external view returns (address) { \n        return _beneficiary;\n    }\n\n    function initialTokenAmount() external view returns (uint256) { \n        return _initialTokenAmount;\n    }\n\n    function tokenReward() external view returns (IERC20) { \n        return _tokenReward;\n    }\n\n    function balanceOf(address owner) external view returns (uint256) { \n        return _balanceOf[owner];\n    }\n\n    function bank() external { \n        require(_beneficiary == msg.sender, \"Only beneficiary can call this function\");\n        if (stor_3 > 0) {\n            stor_3 = 0;\n            (bool success,) = _beneficiary.call{value: stor_3, gas: 2300}(\"\");\n            require(success, \"Transfer failed\");\n        }\n    }\n\n    function fundingGoal() external view returns (uint256) { \n        return _fundingGoal;\n    }\n\n    function amountRaised() external view returns (uint256) { \n        return _amountRaised;\n    }\n\n    function price() external view returns (uint256) { \n        return _price;\n    }\n\n    function returnUnsold() external { \n        require(_beneficiary == msg.sender, \"Only beneficiary can call this function\");\n        require(_tokenReward.transfer(_beneficiary, _currentTokenAmount), \"Transfer failed\");\n    }\n\n    function currentTokenAmount() external view returns (uint256) { \n        return _currentTokenAmount;\n    }\n\n    receive() external payable { \n        require(_fallback == 0, \"Fallback is not allowed\");\n        _balanceOf[msg.sender] += msg.value;\n        _amountRaised += msg.value;\n        stor_3 += msg.value;\n        require(stor_5_0_0 != 0, \"stor_5_0_0 must not be zero\");\n        _currentTokenAmount -= msg.value / _price;\n        require(_tokenReward.transfer(msg.sender, msg.value / _price), \"Transfer failed\");\n    }\n}\n\ninterface IERC20 {\n    function transfer(address recipient, uint256 amount) external returns (bool);\n}\n```\n\nPlease note that in Solidity, there is no direct equivalent to the `__function_selector__` function, the above code assumes that the interface of the token contract (`IERC20`) has the `transfer` function. Also, the functionality of `returnUnsoldSafe` function is not clear so I have omitted it from the contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701464983,
	"id": "chatcmpl-8R53XBADBQUsHuiCTCDJICVFPST5k",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 05:45 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nuint256 _deadline; // STORAGE[0x4]\nuint256 _price; // STORAGE[0x5]\nuint256 _initialTokenAmount; // STORAGE[0x6]\nuint256 _currentTokenAmount; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x9]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\nuint8 stor_a_0_0; // STORAGE[0xa] bytes 0 to 0\nuint8 _fallback; // STORAGE[0xa] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            stor_a_0_0 = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _fallback = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction initialTokenAmount() public nonPayable { \n    return _initialTokenAmount;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction bank() public nonPayable { \n    v0 = v1 = _beneficiary == msg.sender;\n    if (v1) {\n        v0 = stor_3 > 0;\n    }\n    if (v0) {\n        stor_3 = 0;\n        v2 = _beneficiary.call().value(stor_3).gas(2300 * !stor_3);\n    }\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction returnUnsold() public nonPayable { \n    if (_beneficiary == msg.sender) {\n        require(_tokenReward.code.size);\n        v0 = _tokenReward.transfer(_beneficiary, _currentTokenAmount).gas(msg.gas - 710);\n        require(v0);\n        goto 0x1a90x290;\n    }\n}\n\nfunction returnUnsoldSafe() public nonPayable { \n    if (_beneficiary == msg.sender) {\n        require(_tokenReward.code.size);\n        v0 = _tokenReward.transfer(_beneficiary, 0x186a0).gas(msg.gas - 710);\n        require(v0);\n        goto 0x1a90x2a3;\n    }\n}\n\nfunction currentTokenAmount() public nonPayable { \n    return _currentTokenAmount;\n}\n\nfunction fallback() public payable { \n    require(!_fallback);\n    if (msg.value > 0) {\n        _balanceOf[msg.sender] += msg.value;\n        _amountRaised += msg.value;\n        stor_3 += msg.value;\n        assert(stor_5_0_0);\n        _currentTokenAmount = _currentTokenAmount - msg.value / _price;\n        require(_tokenReward.code.size);\n        v0 = _tokenReward.transfer(msg.sender, msg.value / _price * 0xde0b6b3a7640000).gas(msg.gas - 710);\n        require(v0);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x1cb3b20) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == uint32(function_selector >> 224)) {\n            deadline();\n        } else if (0x38af3eed == uint32(function_selector >> 224)) {\n            beneficiary();\n        } else if (0x4e505367 == uint32(function_selector >> 224)) {\n            initialTokenAmount();\n        } else if (0x6e66f6e9 == uint32(function_selector >> 224)) {\n            tokenReward();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x76cdb03b == uint32(function_selector >> 224)) {\n            bank();\n        } else if (0x7a3a0e84 == uint32(function_selector >> 224)) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == uint32(function_selector >> 224)) {\n            amountRaised();\n        } else if (0xa035b1fe == uint32(function_selector >> 224)) {\n            price();\n        } else if (0xb2ea088d == uint32(function_selector >> 224)) {\n            returnUnsold();\n        } else if (0xeaf59375 == uint32(function_selector >> 224)) {\n            returnUnsoldSafe();\n        } else if (0xff69ac36 == uint32(function_selector >> 224)) {\n            currentTokenAmount();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 05:45 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nuint256 _deadline; // STORAGE[0x4]\nuint256 _price; // STORAGE[0x5]\nuint256 _initialTokenAmount; // STORAGE[0x6]\nuint256 _currentTokenAmount; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x9]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\nuint8 stor_a_0_0; // STORAGE[0xa] bytes 0 to 0\nuint8 _fallback; // STORAGE[0xa] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            stor_a_0_0 = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _fallback = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction initialTokenAmount() public nonPayable { \n    return _initialTokenAmount;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction bank() public nonPayable { \n    v0 = v1 = _beneficiary == msg.sender;\n    if (v1) {\n        v0 = stor_3 > 0;\n    }\n    if (v0) {\n        stor_3 = 0;\n        v2 = _beneficiary.call().value(stor_3).gas(2300 * !stor_3);\n    }\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction returnUnsold() public nonPayable { \n    if (_beneficiary == msg.sender) {\n        require(_tokenReward.code.size);\n        v0 = _tokenReward.transfer(_beneficiary, _currentTokenAmount).gas(msg.gas - 710);\n        require(v0);\n        goto 0x1a90x290;\n    }\n}\n\nfunction returnUnsoldSafe() public nonPayable { \n    if (_beneficiary == msg.sender) {\n        require(_tokenReward.code.size);\n        v0 = _tokenReward.transfer(_beneficiary, 0x186a0).gas(msg.gas - 710);\n        require(v0);\n        goto 0x1a90x2a3;\n    }\n}\n\nfunction currentTokenAmount() public nonPayable { \n    return _currentTokenAmount;\n}\n\nfunction fallback() public payable { \n    require(!_fallback);\n    if (msg.value > 0) {\n        _balanceOf[msg.sender] += msg.value;\n        _amountRaised += msg.value;\n        stor_3 += msg.value;\n        assert(stor_5_0_0);\n        _currentTokenAmount = _currentTokenAmount - msg.value / _price;\n        require(_tokenReward.code.size);\n        v0 = _tokenReward.transfer(msg.sender, msg.value / _price * 0xde0b6b3a7640000).gas(msg.gas - 710);\n        require(v0);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x1cb3b20) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == uint32(function_selector >> 224)) {\n            deadline();\n        } else if (0x38af3eed == uint32(function_selector >> 224)) {\n            beneficiary();\n        } else if (0x4e505367 == uint32(function_selector >> 224)) {\n            initialTokenAmount();\n        } else if (0x6e66f6e9 == uint32(function_selector >> 224)) {\n            tokenReward();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x76cdb03b == uint32(function_selector >> 224)) {\n            bank();\n        } else if (0x7a3a0e84 == uint32(function_selector >> 224)) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == uint32(function_selector >> 224)) {\n            amountRaised();\n        } else if (0xa035b1fe == uint32(function_selector >> 224)) {\n            price();\n        } else if (0xb2ea088d == uint32(function_selector >> 224)) {\n            returnUnsold();\n        } else if (0xeaf59375 == uint32(function_selector >> 224)) {\n            returnUnsoldSafe();\n        } else if (0xff69ac36 == uint32(function_selector >> 224)) {\n            currentTokenAmount();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 05:45 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 stor_3; // STORAGE[0x3]\nuint256 _deadline; // STORAGE[0x4]\nuint256 _price; // STORAGE[0x5]\nuint256 _initialTokenAmount; // STORAGE[0x6]\nuint256 _currentTokenAmount; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x9]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\nuint8 stor_a_0_0; // STORAGE[0xa] bytes 0 to 0\nuint8 _fallback; // STORAGE[0xa] bytes 1 to 1\naddress _tokenReward; // STORAGE[0x8] bytes 0 to 19\n\n// Events\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            stor_a_0_0 = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _fallback = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction initialTokenAmount() public nonPayable { \n    return _initialTokenAmount;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction bank() public nonPayable { \n    v0 = v1 = _beneficiary == msg.sender;\n    if (v1) {\n        v0 = stor_3 > 0;\n    }\n    if (v0) {\n        stor_3 = 0;\n        v2 = _beneficiary.call().value(stor_3).gas(2300 * !stor_3);\n    }\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction returnUnsold() public nonPayable { \n    if (_beneficiary == msg.sender) {\n        require(_tokenReward.code.size);\n        v0 = _tokenReward.transfer(_beneficiary, _currentTokenAmount).gas(msg.gas - 710);\n        require(v0);\n        goto 0x1a90x290;\n    }\n}\n\nfunction returnUnsoldSafe() public nonPayable { \n    if (_beneficiary == msg.sender) {\n        require(_tokenReward.code.size);\n        v0 = _tokenReward.transfer(_beneficiary, 0x186a0).gas(msg.gas - 710);\n        require(v0);\n        goto 0x1a90x2a3;\n    }\n}\n\nfunction currentTokenAmount() public nonPayable { \n    return _currentTokenAmount;\n}\n\nfunction fallback() public payable { \n    require(!_fallback);\n    if (msg.value > 0) {\n        _balanceOf[msg.sender] += msg.value;\n        _amountRaised += msg.value;\n        stor_3 += msg.value;\n        assert(stor_5_0_0);\n        _currentTokenAmount = _currentTokenAmount - msg.value / _price;\n        require(_tokenReward.code.size);\n        v0 = _tokenReward.transfer(msg.sender, msg.value / _price * 0xde0b6b3a7640000).gas(msg.gas - 710);\n        require(v0);\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (uint32(function_selector >> 224) == 0x1cb3b20) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == uint32(function_selector >> 224)) {\n            deadline();\n        } else if (0x38af3eed == uint32(function_selector >> 224)) {\n            beneficiary();\n        } else if (0x4e505367 == uint32(function_selector >> 224)) {\n            initialTokenAmount();\n        } else if (0x6e66f6e9 == uint32(function_selector >> 224)) {\n            tokenReward();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x76cdb03b == uint32(function_selector >> 224)) {\n            bank();\n        } else if (0x7a3a0e84 == uint32(function_selector >> 224)) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == uint32(function_selector >> 224)) {\n            amountRaised();\n        } else if (0xa035b1fe == uint32(function_selector >> 224)) {\n            price();\n        } else if (0xb2ea088d == uint32(function_selector >> 224)) {\n            returnUnsold();\n        } else if (0xeaf59375 == uint32(function_selector >> 224)) {\n            returnUnsoldSafe();\n        } else if (0xff69ac36 == uint32(function_selector >> 224)) {\n            currentTokenAmount();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 32.224610567092896,
	"usage": {
		"completion_tokens": 769,
		"prompt_tokens": 1316,
		"total_tokens": 2085
	}
}