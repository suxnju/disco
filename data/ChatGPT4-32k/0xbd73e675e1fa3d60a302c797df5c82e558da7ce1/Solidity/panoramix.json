{
	"address": "0xbd73e675e1fa3d60a302c797df5c82e558da7ce1",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\nconst name = 'Pantheon Ecosystem'\nconst decimals = 18\nconst symbol = 'PAN'\n\ndef storage:\n  stor0 is uint256 at storage 0\n  stor1 is uint256 at storage 1\n  stor2 is uint256 at storage 2\n  stor3 is uint256 at storage 3\n  stor4 is uint256 at storage 4\n  stor5 is uint256 at storage 5\n  stor6 is uint256 at storage 6\n  stor7 is uint256 at storage 7\n  stor8 is uint256 at storage 8\n  totalSupply is uint256 at storage 9\n  stor10 is uint256 at storage 10\n  balanceOf is mapping of struct at storage 11\n\ndef totalSupply(): # not payable\n  return totalSupply\n\ndef balanceOf(address account): # not payable\n  return balanceOf[address(account)].field_256\n\n#\n#  Regular functions\n#\n\ndef buyPrice(): # not payable\n  return (stor8 / 10^18)\n\ndef sellPrice(): # not payable\n  if 10000000000 * 10^18 > stor8:\n      revert with 0, 'sub failed'\n  return (stor8 - 10000000000 * 10^18 / 10^18)\n\ndef donate() payable: \n  if stor10 + call.value < stor10:\n      revert with 0, 'add failed'\n  stor10 += call.value\n  log Donation(\n        address addr=call.value,\n        uint256 funds=block.timestamp,\n        uint256 time=caller)\n\ndef expectedFunds(uint256 tokens, bool apply_fee): # not payable\n  if not tokens:\n      return 0\n  if not totalSupply:\n      return 0\n  if 10000000000 * 10^18 > stor8:\n      revert with 0, 'sub failed'\n  if tokens <= totalSupply:\n      if 10000000000 * 10^18 * tokens / 10000000000 * 10^18 != tokens:\n          revert with 0, 'mul failed'\n      if stor8 < stor8 - 10000000000 * 10^18:\n          revert with 0, 'add failed'\n      if 10000000000 * 10^18 * tokens / 10^18 > stor8:\n          revert with 0, 'sub failed'\n      if (2 * stor8) - (10000000000 * 10^18 * tokens / 10^18) < stor8:\n          revert with 0, 'add failed'\n      if not (2 * stor8) + -(10000000000 * 10^18 * tokens / 10^18) - 10000000000 * 10^18:\n          return 0\n      require (2 * stor8) + -(10000000000 * 10^18 * tokens / 10^18) - 10000000000 * 10^18\n      if (-10000000000 * 10^18 * tokens) + (2 * stor8 * tokens) - (10000000000 * 10^18 * tokens / 10^18 * tokens) / (2 * stor8) + -(10000000000 * 10^18 * tokens / 10^18) - 10000000000 * 10^18 != tokens:\n          revert with 0, 'mul failed'\n      if not apply_fee:\n          return ((-10000000000 * 10^18 * tokens) + (2 * stor8 * tokens) - (10000000000 * 10^18 * tokens / 10^18 * tokens) / 2 * 10^18 / 10^18)\n      if not (-10000000000 * 10^18 * tokens) + (2 * stor8 * tokens) - (10000000000 * 10^18 * tokens / 10^18 * tokens) / 2 * 10^18 / 10^18:\n          return 0\n      require (-10000000000 * 10^18 * tokens) + (2 * stor8 * tokens) - (10000000000 * 10^18 * tokens / 10^18 * tokens) / 2 * 10^18 / 10^18\n      if (-10000000000 * 10^18 * tokens) + (2 * stor8 * tokens) - (10000000000 * 10^18 * tokens / 10^18 * tokens) / 2 * 10^18 / 10^18 * stor2 / (-10000000000 * 10^18 * tokens) + (2 * stor8 * tokens) - (10000000000 * 10^18 * tokens / 10^18 * tokens) / 2 * 10^18 / 10^18 != stor2:\n          revert with 0, 'mul failed'\n      require stor3\n      if (-10000000000 * 10^18 * tokens) + (2 * stor8 * tokens) - (10000000000 * 10^18 * tokens / 10^18 * tokens) / 2 * 10^18 / 10^18 * stor2 / stor3 > (-10000000000 * 10^18 * tokens) + (2 * stor8 * tokens) - (10000000000 * 10^18 * tokens / 10^18 * tokens) / 2 * 10^18 / 10^18:\n          revert with 0, 'sub failed'\n      return (((-10000000000 * 10^18 * tokens) + (2 * stor8 * tokens) - (10000000000 * 10^18 * tokens / 10^18 * tokens) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * tokens) + (2 * stor8 * tokens) - (10000000000 * 10^18 * tokens / 10^18 * tokens) / 2 * 10^18 / 10^18 * stor2 / stor3))\n  if 10000000000 * 10^18 * totalSupply / 10000000000 * 10^18 != totalSupply:\n      revert with 0, 'mul failed'\n  if stor8 < stor8 - 10000000000 * 10^18:\n      revert with 0, 'add failed'\n  if 10000000000 * 10^18 * totalSupply / 10^18 > stor8:\n      revert with 0, 'sub failed'\n  if (2 * stor8) - (10000000000 * 10^18 * totalSupply / 10^18) < stor8:\n      revert with 0, 'add failed'\n  if not (2 * stor8) + -(10000000000 * 10^18 * totalSupply / 10^18) - 10000000000 * 10^18:\n      return 0\n  require (2 * stor8) + -(10000000000 * 10^18 * totalSupply / 10^18) - 10000000000 * 10^18\n  if (-10000000000 * 10^18 * totalSupply) + (2 * stor8 * totalSupply) - (10000000000 * 10^18 * totalSupply / 10^18 * totalSupply) / (2 * stor8) + -(10000000000 * 10^18 * totalSupply / 10^18) - 10000000000 * 10^18 != totalSupply:\n      revert with 0, 'mul failed'\n  if not apply_fee:\n      return ((-10000000000 * 10^18 * totalSupply) + (2 * stor8 * totalSupply) - (10000000000 * 10^18 * totalSupply / 10^18 * totalSupply) / 2 * 10^18 / 10^18)\n  if not (-10000000000 * 10^18 * totalSupply) + (2 * stor8 * totalSupply) - (10000000000 * 10^18 * totalSupply / 10^18 * totalSupply) / 2 * 10^18 / 10^18:\n      return 0\n  require (-10000000000 * 10^18 * totalSupply) + (2 * stor8 * totalSupply) - (10000000000 * 10^18 * totalSupply / 10^18 * totalSupply) / 2 * 10^18 / 10^18\n  if (-10000000000 * 10^18 * totalSupply) + (2 * stor8 * totalSupply) - (10000000000 * 10^18 * totalSupply / 10^18 * totalSupply) / 2 * 10^18 / 10^18 * stor2 / (-10000000000 * 10^18 * totalSupply) + (2 * stor8 * totalSupply) - (10000000000 * 10^18 * totalSupply / 10^18 * totalSupply) / 2 * 10^18 / 10^18 != stor2:\n      revert with 0, 'mul failed'\n  require stor3\n  if (-10000000000 * 10^18 * totalSupply) + (2 * stor8 * totalSupply) - (10000000000 * 10^18 * totalSupply / 10^18 * totalSupply) / 2 * 10^18 / 10^18 * stor2 / stor3 > (-10000000000 * 10^18 * totalSupply) + (2 * stor8 * totalSupply) - (10000000000 * 10^18 * totalSupply / 10^18 * totalSupply) / 2 * 10^18 / 10^18:\n      revert with 0, 'sub failed'\n  return (((-10000000000 * 10^18 * totalSupply) + (2 * stor8 * totalSupply) - (10000000000 * 10^18 * totalSupply / 10^18 * totalSupply) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * totalSupply) + (2 * stor8 * totalSupply) - (10000000000 * 10^18 * totalSupply / 10^18 * totalSupply) / 2 * 10^18 / 10^18 * stor2 / stor3))\n\ndef dividendsOf(address _customerAddress): # not payable\n  if balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 < balanceOf[address(_customerAddress)].field_512:\n      revert with 0, 'add failed'\n  require balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 >=\u2032 0\n  if totalSupply <= 0:\n      if balanceOf[address(_customerAddress)].field_1024 >\u2032 0:\n          if balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 - balanceOf[address(_customerAddress)].field_1024 >\u2032 balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768:\n              revert with 0, 'sub failed'\n      else:\n          if balanceOf[address(_customerAddress)].field_1024 >=\u2032 0:\n              require balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 >=\u2032 0\n              return (balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768)\n          if balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 - balanceOf[address(_customerAddress)].field_1024 <\u2032 balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768:\n              revert with 0, 'add failed'\n      require balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 - balanceOf[address(_customerAddress)].field_1024 >=\u2032 0\n      return (balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 - balanceOf[address(_customerAddress)].field_1024)\n  if not stor10:\n      require totalSupply\n      if balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (0 / totalSupply) <\u2032 balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768:\n          revert with 0, 'add failed'\n      if balanceOf[address(_customerAddress)].field_1024 >\u2032 0:\n          if balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (0 / totalSupply) - balanceOf[address(_customerAddress)].field_1024 >\u2032 balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (0 / totalSupply):\n              revert with 0, 'sub failed'\n      else:\n          if balanceOf[address(_customerAddress)].field_1024 >=\u2032 0:\n              require balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (0 / totalSupply) >=\u2032 0\n              return (balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (0 / totalSupply))\n          if balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (0 / totalSupply) - balanceOf[address(_customerAddress)].field_1024 <\u2032 balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (0 / totalSupply):\n              revert with 0, 'add failed'\n      require balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (0 / totalSupply) - balanceOf[address(_customerAddress)].field_1024 >=\u2032 0\n      return (balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (0 / totalSupply) - balanceOf[address(_customerAddress)].field_1024)\n  require stor10\n  if stor10 * balanceOf[address(_customerAddress)].field_256 / stor10 != balanceOf[address(_customerAddress)].field_256:\n      revert with 0, 'mul failed'\n  require totalSupply\n  if balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (stor10 * balanceOf[address(_customerAddress)].field_256 / totalSupply) <\u2032 balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768:\n      revert with 0, 'add failed'\n  if balanceOf[address(_customerAddress)].field_1024 >\u2032 0:\n      if balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (stor10 * balanceOf[address(_customerAddress)].field_256 / totalSupply) - balanceOf[address(_customerAddress)].field_1024 >\u2032 balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (stor10 * balanceOf[address(_customerAddress)].field_256 / totalSupply):\n          revert with 0, 'sub failed'\n  else:\n      if balanceOf[address(_customerAddress)].field_1024 >=\u2032 0:\n          require balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (stor10 * balanceOf[address(_customerAddress)].field_256 / totalSupply) >=\u2032 0\n          return (balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (stor10 * balanceOf[address(_customerAddress)].field_256 / totalSupply))\n      if balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (stor10 * balanceOf[address(_customerAddress)].field_256 / totalSupply) - balanceOf[address(_customerAddress)].field_1024 <\u2032 balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (stor10 * balanceOf[address(_customerAddress)].field_256 / totalSupply):\n          revert with 0, 'add failed'\n  require balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (stor10 * balanceOf[address(_customerAddress)].field_256 / totalSupply) - balanceOf[address(_customerAddress)].field_1024 >=\u2032 0\n  return (balanceOf[address(_customerAddress)].field_512 + balanceOf[address(_customerAddress)].field_768 + (stor10 * balanceOf[address(_customerAddress)].field_256 / totalSupply) - balanceOf[address(_customerAddress)].field_1024)\n\ndef sell(uint256 amount): # not payable\n  if amount <= 0:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Amount of tokens must be greater than zero'\n  if amount > balanceOf[caller].field_256:\n      revert with 0, 'You have not enough tokens'\n  if 10000000000 * 10^18 > stor8:\n      revert with 0, 'sub failed'\n  if 10000000000 * 10^18 * amount / 10000000000 * 10^18 != amount:\n      revert with 0, 'mul failed'\n  if stor8 < stor8 - 10000000000 * 10^18:\n      revert with 0, 'add failed'\n  if 10000000000 * 10^18 * amount / 10^18 > stor8:\n      revert with 0, 'sub failed'\n  if (2 * stor8) - (10000000000 * 10^18 * amount / 10^18) < stor8:\n      revert with 0, 'add failed'\n  if not (2 * stor8) + -(10000000000 * 10^18 * amount / 10^18) - 10000000000 * 10^18:\n      revert with 0, 'Insufficient tokens to do that'\n  require (2 * stor8) + -(10000000000 * 10^18 * amount / 10^18) - 10000000000 * 10^18\n  if (-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / (2 * stor8) + -(10000000000 * 10^18 * amount / 10^18) - 10000000000 * 10^18 != amount:\n      revert with 0, 'mul failed'\n  if not (-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / 2 * 10^18 / 10^18:\n      revert with 0, 'Insufficient tokens to do that'\n  stor8 -= 10000000000 * 10^18 * amount / 10^18\n  require (-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / 2 * 10^18 / 10^18\n  if (-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / 2 * 10^18 / 10^18 * stor2 / (-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / 2 * 10^18 / 10^18 != stor2:\n      revert with 0, 'mul failed'\n  require stor3\n  if (-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / 2 * 10^18 / 10^18 * stor2 / stor3 > (-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / 2 * 10^18 / 10^18:\n      revert with 0, 'sub failed'\n  if not (-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / 2 * 10^18 / 10^18 * stor2 / stor3:\n      revert with 0, 'Insufficient tokens to do that'\n  if totalSupply != amount:\n      if amount > totalSupply:\n          revert with 0, 'sub failed'\n      if not stor10:\n          require totalSupply\n          stor10 = 0 / totalSupply\n      else:\n          require stor10\n          if (totalSupply * stor10) - (amount * stor10) / stor10 != totalSupply - amount:\n              revert with 0, 'mul failed'\n          require totalSupply\n          stor10 = (totalSupply * stor10) - (amount * stor10) / totalSupply\n      if amount > totalSupply:\n          revert with 0, 'sub failed'\n      totalSupply -= amount\n      if amount > balanceOf[caller].field_256:\n          revert with 0, 'sub failed'\n      balanceOf[caller].field_256 -= amount\n      if totalSupply > 0:\n          if not amount:\n              require totalSupply\n              if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'sub failed'\n              balanceOf[caller].field_1024 -= 0 / totalSupply\n          else:\n              require amount\n              if amount * stor10 / amount != stor10:\n                  revert with 0, 'mul failed'\n              require totalSupply\n              if balanceOf[caller].field_1024 - (amount * stor10 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'sub failed'\n              balanceOf[caller].field_1024 -= amount * stor10 / totalSupply\n  else:\n      if not stor10:\n          require totalSupply\n          if amount > totalSupply:\n              revert with 0, 'sub failed'\n          if not stor10:\n              require totalSupply\n              stor10 = 0 / totalSupply\n          else:\n              require stor10\n              if (totalSupply * stor10) - (amount * stor10) / stor10 != totalSupply - amount:\n                  revert with 0, 'mul failed'\n              require totalSupply\n              stor10 = (totalSupply * stor10) - (amount * stor10) / totalSupply\n          if amount > totalSupply:\n              revert with 0, 'sub failed'\n          totalSupply -= amount\n          if amount > balanceOf[caller].field_256:\n              revert with 0, 'sub failed'\n          balanceOf[caller].field_256 -= amount\n          if totalSupply <= 0:\n              if 0 / totalSupply:\n                  if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= 0 / totalSupply\n          else:\n              if not amount:\n                  require totalSupply\n                  if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= 0 / totalSupply\n              else:\n                  require amount\n                  if amount * stor10 / amount != stor10:\n                      revert with 0, 'mul failed'\n                  require totalSupply\n                  if balanceOf[caller].field_1024 - (amount * stor10 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= amount * stor10 / totalSupply\n      else:\n          require stor10\n          if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n              revert with 0, 'mul failed'\n          require totalSupply\n          if amount > totalSupply:\n              revert with 0, 'sub failed'\n          if not stor10:\n              require totalSupply\n              stor10 = 0 / totalSupply\n          else:\n              require stor10\n              if (totalSupply * stor10) - (amount * stor10) / stor10 != totalSupply - amount:\n                  revert with 0, 'mul failed'\n              require totalSupply\n              stor10 = (totalSupply * stor10) - (amount * stor10) / totalSupply\n          if amount > totalSupply:\n              revert with 0, 'sub failed'\n          totalSupply -= amount\n          if amount > balanceOf[caller].field_256:\n              revert with 0, 'sub failed'\n          balanceOf[caller].field_256 -= amount\n          if totalSupply <= 0:\n              if stor10 * balanceOf[caller].field_256 / totalSupply:\n                  if balanceOf[caller].field_1024 - (stor10 * balanceOf[caller].field_256 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= stor10 * balanceOf[caller].field_256 / totalSupply\n          else:\n              if not amount:\n                  require totalSupply\n                  if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= 0 / totalSupply\n              else:\n                  require amount\n                  if amount * stor10 / amount != stor10:\n                      revert with 0, 'mul failed'\n                  require totalSupply\n                  if balanceOf[caller].field_1024 - (amount * stor10 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= amount * stor10 / totalSupply\n  if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n      revert with 0, 'add failed'\n  balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / 2 * 10^18 / 10^18 * stor2 / stor3)\n  if stor10 + ((-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n      revert with 0, 'add failed'\n  stor10 += (-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / 2 * 10^18 / 10^18 * stor2 / stor3\n  log Selling(\n        address addr=amount,\n        uint256 tokens=(-10000000000 * 10^18 * amount) + (2 * stor8 * amount) - (10000000000 * 10^18 * amount / 10^18 * amount) / 2 * 10^18 / 10^18,\n        uint256 funds=stor8 / 10^18,\n        uint256 price=block.timestamp,\n        uint256 time=caller)\n\ndef transfer(address recipient, uint256 amount): # not payable\n  if amount <= 0:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'Amount of tokens must be greater than zero'\n  if amount > balanceOf[caller].field_256:\n      revert with 0, 'You have not enough tokens'\n  if recipient == caller:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'You cannot transfer tokens to yourself'\n  if not amount:\n      revert with 0, 'Insufficient tokens to do that'\n  require amount\n  if amount * stor4 / amount != stor4:\n      revert with 0, 'mul failed'\n  require stor5\n  if amount * stor4 / stor5 > amount:\n      revert with 0, 'sub failed'\n  if not amount * stor4 / stor5:\n      revert with 0, 'Insufficient tokens to do that'\n  if 10000000000 * 10^18 > stor8:\n      revert with 0, 'sub failed'\n  if 10000000000 * 10^18 * amount * stor4 / stor5 / 10000000000 * 10^18 != amount * stor4 / stor5:\n      revert with 0, 'mul failed'\n  if stor8 < stor8 - 10000000000 * 10^18:\n      revert with 0, 'add failed'\n  if 10000000000 * 10^18 * amount * stor4 / stor5 / 10^18 > stor8:\n      revert with 0, 'sub failed'\n  if (2 * stor8) - (10000000000 * 10^18 * amount * stor4 / stor5 / 10^18) < stor8:\n      revert with 0, 'add failed'\n  if not (2 * stor8) + -(10000000000 * 10^18 * amount * stor4 / stor5 / 10^18) - 10000000000 * 10^18:\n      revert with 0, 'Insufficient tokens to do that'\n  require (2 * stor8) + -(10000000000 * 10^18 * amount * stor4 / stor5 / 10^18) - 10000000000 * 10^18\n  if (-10000000000 * 10^18 * amount * stor4 / stor5) + (2 * stor8 * amount * stor4 / stor5) - (10000000000 * 10^18 * amount * stor4 / stor5 / 10^18 * amount * stor4 / stor5) / (2 * stor8) + -(10000000000 * 10^18 * amount * stor4 / stor5 / 10^18) - 10000000000 * 10^18 != amount * stor4 / stor5:\n      revert with 0, 'mul failed'\n  if not (-10000000000 * 10^18 * amount * stor4 / stor5) + (2 * stor8 * amount * stor4 / stor5) - (10000000000 * 10^18 * amount * stor4 / stor5 / 10^18 * amount * stor4 / stor5) / 2 * 10^18 / 10^18:\n      revert with 0, 'Insufficient tokens to do that'\n  stor8 -= 10000000000 * 10^18 * amount * stor4 / stor5 / 10^18\n  if totalSupply != amount:\n      if amount > totalSupply:\n          revert with 0, 'sub failed'\n      if not stor10:\n          require totalSupply\n          stor10 = 0 / totalSupply\n      else:\n          require stor10\n          if (totalSupply * stor10) - (amount * stor10) / stor10 != totalSupply - amount:\n              revert with 0, 'mul failed'\n          require totalSupply\n          stor10 = (totalSupply * stor10) - (amount * stor10) / totalSupply\n      if amount > totalSupply:\n          revert with 0, 'sub failed'\n      totalSupply -= amount\n      if amount > balanceOf[caller].field_256:\n          revert with 0, 'sub failed'\n      balanceOf[caller].field_256 -= amount\n      if totalSupply > 0:\n          if not amount:\n              require totalSupply\n              if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'sub failed'\n              balanceOf[caller].field_1024 -= 0 / totalSupply\n          else:\n              require amount\n              if amount * stor10 / amount != stor10:\n                  revert with 0, 'mul failed'\n              require totalSupply\n              if balanceOf[caller].field_1024 - (amount * stor10 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'sub failed'\n              balanceOf[caller].field_1024 -= amount * stor10 / totalSupply\n  else:\n      if not stor10:\n          require totalSupply\n          if amount > totalSupply:\n              revert with 0, 'sub failed'\n          if not stor10:\n              require totalSupply\n              stor10 = 0 / totalSupply\n          else:\n              require stor10\n              if (totalSupply * stor10) - (amount * stor10) / stor10 != totalSupply - amount:\n                  revert with 0, 'mul failed'\n              require totalSupply\n              stor10 = (totalSupply * stor10) - (amount * stor10) / totalSupply\n          if amount > totalSupply:\n              revert with 0, 'sub failed'\n          totalSupply -= amount\n          if amount > balanceOf[caller].field_256:\n              revert with 0, 'sub failed'\n          balanceOf[caller].field_256 -= amount\n          if totalSupply <= 0:\n              if 0 / totalSupply:\n                  if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= 0 / totalSupply\n          else:\n              if not amount:\n                  require totalSupply\n                  if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= 0 / totalSupply\n              else:\n                  require amount\n                  if amount * stor10 / amount != stor10:\n                      revert with 0, 'mul failed'\n                  require totalSupply\n                  if balanceOf[caller].field_1024 - (amount * stor10 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= amount * stor10 / totalSupply\n      else:\n          require stor10\n          if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n              revert with 0, 'mul failed'\n          require totalSupply\n          if amount > totalSupply:\n              revert with 0, 'sub failed'\n          if not stor10:\n              require totalSupply\n              stor10 = 0 / totalSupply\n          else:\n              require stor10\n              if (totalSupply * stor10) - (amount * stor10) / stor10 != totalSupply - amount:\n                  revert with 0, 'mul failed'\n              require totalSupply\n              stor10 = (totalSupply * stor10) - (amount * stor10) / totalSupply\n          if amount > totalSupply:\n              revert with 0, 'sub failed'\n          totalSupply -= amount\n          if amount > balanceOf[caller].field_256:\n              revert with 0, 'sub failed'\n          balanceOf[caller].field_256 -= amount\n          if totalSupply <= 0:\n              if stor10 * balanceOf[caller].field_256 / totalSupply:\n                  if balanceOf[caller].field_1024 - (stor10 * balanceOf[caller].field_256 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= stor10 * balanceOf[caller].field_256 / totalSupply\n          else:\n              if not amount:\n                  require totalSupply\n                  if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= 0 / totalSupply\n              else:\n                  require amount\n                  if amount * stor10 / amount != stor10:\n                      revert with 0, 'mul failed'\n                  require totalSupply\n                  if balanceOf[caller].field_1024 - (amount * stor10 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= amount * stor10 / totalSupply\n  if totalSupply + amount - (amount * stor4 / stor5) < totalSupply:\n      revert with 0, 'add failed'\n  if totalSupply > 0:\n      if not stor10:\n          require totalSupply\n          stor10 = 0 / totalSupply\n      else:\n          require stor10\n          if (totalSupply * stor10) + (amount * stor10) - (amount * stor4 / stor5 * stor10) / stor10 != totalSupply + amount - (amount * stor4 / stor5):\n              revert with 0, 'mul failed'\n          require totalSupply\n          stor10 = (totalSupply * stor10) + (amount * stor10) - (amount * stor4 / stor5 * stor10) / totalSupply\n  totalSupply = totalSupply + amount - (amount * stor4 / stor5)\n  if balanceOf[address(recipient)].field_256 + amount - (amount * stor4 / stor5) < balanceOf[address(recipient)].field_256:\n      revert with 0, 'add failed'\n  balanceOf[address(recipient)].field_256 = balanceOf[address(recipient)].field_256 + amount - (amount * stor4 / stor5)\n  if totalSupply > 0:\n      if not amount - (amount * stor4 / stor5):\n          require totalSupply\n          if balanceOf[address(recipient)].field_1024 + (0 / totalSupply) <\u2032 balanceOf[address(recipient)].field_1024:\n              revert with 0, 'add failed'\n          balanceOf[address(recipient)].field_1024 += 0 / totalSupply\n      else:\n          require amount - (amount * stor4 / stor5)\n          if (amount * stor10) - (amount * stor4 / stor5 * stor10) / amount - (amount * stor4 / stor5) != stor10:\n              revert with 0, 'mul failed'\n          require totalSupply\n          if balanceOf[address(recipient)].field_1024 + ((amount * stor10) - (amount * stor4 / stor5 * stor10) / totalSupply) <\u2032 balanceOf[address(recipient)].field_1024:\n              revert with 0, 'add failed'\n          balanceOf[address(recipient)].field_1024 += (amount * stor10) - (amount * stor4 / stor5 * stor10) / totalSupply\n  if stor10 + ((-10000000000 * 10^18 * amount * stor4 / stor5) + (2 * stor8 * amount * stor4 / stor5) - (10000000000 * 10^18 * amount * stor4 / stor5 / 10^18 * amount * stor4 / stor5) / 2 * 10^18 / 10^18) < stor10:\n      revert with 0, 'add failed'\n  stor10 += (-10000000000 * 10^18 * amount * stor4 / stor5) + (2 * stor8 * amount * stor4 / stor5) - (10000000000 * 10^18 * amount * stor4 / stor5 / 10^18 * amount * stor4 / stor5) / 2 * 10^18 / 10^18\n  log Transfer(\n        address from=amount,\n        address to=caller,\n        uint256 value=recipient)\n  return 1\n\ndef expectedTokens(uint256 funds, bool apply_fee): # not payable\n  if not funds:\n      return 0\n  if not apply_fee:\n      if not stor8:\n          revert with 0, 'sub failed'\n      require stor8\n      if 2 * stor8 / stor8 != 2:\n          revert with 0, 'mul failed'\n      if 10000000000 * 10^18 > 2 * stor8:\n          revert with 0, 'sub failed'\n      if 80000000000 * 10^18 * funds / 80000000000 * 10^18 != funds:\n          revert with 0, 'mul failed'\n      if not 80000000000 * 10^18 * funds:\n          if not (2 * stor8) - 10000000000 * 10^18:\n              if (2 * stor8) - 10000000000 * 10^18 > 0:\n                  revert with 0, 'sub failed'\n              if not -(2 * stor8) + 10000000000 * 10^18:\n                  if stor8 < stor8:\n                      revert with 0, 'add failed'\n                  else:\n                      return 0\n              require -(2 * stor8) + 10000000000 * 10^18\n              if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                  revert with 0, 'mul failed'\n              if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                  revert with 0, 'mul failed'\n              if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n                  revert with 0, 'add failed'\n              return ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18)\n          require (2 * stor8) - 10000000000 * 10^18\n          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n              revert with 0, 'mul failed'\n          s = (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n          t = (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n          while s < t:\n              require s\n              if ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s < (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s:\n                  revert with 0, 'add failed'\n              s = ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require 80000000000 * 10^18 * funds\n          if 0xe0352f62a19e306ed50b2037ad2000000000000 * funds / 80000000000 * 10^18 * funds != 10^18:\n              revert with 0, 'mul failed'\n          if not (2 * stor8) - 10000000000 * 10^18:\n              if 0xe0352f62a19e306ed50b2037ad2000000000000 * funds < 0:\n                  revert with 0, 'add failed'\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) + 1 < 0xe0352f62a19e306ed50b2037ad2000000000000 * funds:\n                  revert with 0, 'add failed'\n              s = (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) + 1 / 2\n              t = 0xe0352f62a19e306ed50b2037ad2000000000000 * funds\n              while s < t:\n                  require s\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * funds / s) + s < 0xe0352f62a19e306ed50b2037ad2000000000000 * funds / s:\n                      revert with 0, 'add failed'\n                  s = (0xe0352f62a19e306ed50b2037ad2000000000000 * funds / s) + s / 2\n                  t = s\n                  continue \n          else:\n              require (2 * stor8) - 10000000000 * 10^18\n              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                  revert with 0, 'mul failed'\n              if 0xe0352f62a19e306ed50b2037ad2000000000000 * funds < 0:\n                  revert with 0, 'add failed'\n              s = (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n              t = (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n              while s < t:\n                  require s\n                  if ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s < (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s:\n                      revert with 0, 'add failed'\n                  s = ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                  t = s\n                  continue \n  else:\n      if not funds:\n          if not stor8:\n              revert with 0, 'sub failed'\n          require stor8\n          if 2 * stor8 / stor8 != 2:\n              revert with 0, 'mul failed'\n          if 10000000000 * 10^18 > 2 * stor8:\n              revert with 0, 'sub failed'\n          if not (2 * stor8) - 10000000000 * 10^18:\n              if (2 * stor8) - 10000000000 * 10^18 > 0:\n                  revert with 0, 'sub failed'\n              if not -(2 * stor8) + 10000000000 * 10^18:\n                  if stor8 < stor8:\n                      revert with 0, 'add failed'\n                  else:\n                      return 0\n              require -(2 * stor8) + 10000000000 * 10^18\n              if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                  revert with 0, 'mul failed'\n              if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                  revert with 0, 'mul failed'\n              if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n                  revert with 0, 'add failed'\n              return ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18)\n          require (2 * stor8) - 10000000000 * 10^18\n          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n              revert with 0, 'mul failed'\n          s = (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n          t = (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n          while s < t:\n              require s\n              if ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s < (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s:\n                  revert with 0, 'add failed'\n              s = ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require funds\n          if funds * stor0 / funds != stor0:\n              revert with 0, 'mul failed'\n          require stor1\n          if funds * stor0 / stor1 > funds:\n              revert with 0, 'sub failed'\n          if not stor8:\n              revert with 0, 'sub failed'\n          require stor8\n          if 2 * stor8 / stor8 != 2:\n              revert with 0, 'mul failed'\n          if 10000000000 * 10^18 > 2 * stor8:\n              revert with 0, 'sub failed'\n          if (80000000000 * 10^18 * funds) - (80000000000 * 10^18 * funds * stor0 / stor1) / 80000000000 * 10^18 != funds - (funds * stor0 / stor1):\n              revert with 0, 'mul failed'\n          if not (80000000000 * 10^18 * funds) - (80000000000 * 10^18 * funds * stor0 / stor1):\n              if not (2 * stor8) - 10000000000 * 10^18:\n                  if (2 * stor8) - 10000000000 * 10^18 > 0:\n                      revert with 0, 'sub failed'\n                  if not -(2 * stor8) + 10000000000 * 10^18:\n                      if stor8 < stor8:\n                          revert with 0, 'add failed'\n                      else:\n                          return 0\n                  require -(2 * stor8) + 10000000000 * 10^18\n                  if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                      revert with 0, 'mul failed'\n                  if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n                      revert with 0, 'add failed'\n                  return ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18)\n              require (2 * stor8) - 10000000000 * 10^18\n              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                  revert with 0, 'mul failed'\n              s = (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n              t = (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n              while s < t:\n                  require s\n                  if ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s < (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s:\n                      revert with 0, 'add failed'\n                  s = ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                  t = s\n                  continue \n          else:\n              require (80000000000 * 10^18 * funds) - (80000000000 * 10^18 * funds * stor0 / stor1)\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) - (0xe0352f62a19e306ed50b2037ad2000000000000 * funds * stor0 / stor1) / (80000000000 * 10^18 * funds) - (80000000000 * 10^18 * funds * stor0 / stor1) != 10^18:\n                  revert with 0, 'mul failed'\n              if not (2 * stor8) - 10000000000 * 10^18:\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) - (0xe0352f62a19e306ed50b2037ad2000000000000 * funds * stor0 / stor1) < 0:\n                      revert with 0, 'add failed'\n                  s = (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) + (-80000000000000000000000000000 * 10^18 * funds * stor0 / stor1) + 1 / 2\n                  t = (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) - (0xe0352f62a19e306ed50b2037ad2000000000000 * funds * stor0 / stor1)\n                  while s < t:\n                      require s\n                      if ((0xe0352f62a19e306ed50b2037ad2000000000000 * funds) - (0xe0352f62a19e306ed50b2037ad2000000000000 * funds * stor0 / stor1) / s) + s < (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) - (0xe0352f62a19e306ed50b2037ad2000000000000 * funds * stor0 / stor1) / s:\n                          revert with 0, 'add failed'\n                      s = ((0xe0352f62a19e306ed50b2037ad2000000000000 * funds) - (0xe0352f62a19e306ed50b2037ad2000000000000 * funds * stor0 / stor1) / s) + s / 2\n                      t = s\n                      continue \n              else:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) - (0xe0352f62a19e306ed50b2037ad2000000000000 * funds * stor0 / stor1) < 0:\n                      revert with 0, 'add failed'\n                  s = (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) + (-80000000000000000000000000000 * 10^18 * funds * stor0 / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                  t = (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) + (-80000000000000000000000000000 * 10^18 * funds * stor0 / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000\n                  while s < t:\n                      require s\n                      if ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) + (-80000000000000000000000000000 * 10^18 * funds * stor0 / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s < (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) + (-80000000000000000000000000000 * 10^18 * funds * stor0 / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s:\n                          revert with 0, 'add failed'\n                      s = ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * funds) + (-80000000000000000000000000000 * 10^18 * funds * stor0 / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / s) + s / 2\n                      t = s\n                      continue \n  if (2 * stor8) - 10000000000 * 10^18 > t:\n      revert with 0, 'sub failed'\n  if not t + -(2 * stor8) + 10000000000 * 10^18:\n      if stor8 < stor8:\n          revert with 0, 'add failed'\n      else:\n          return 0\n  require t + -(2 * stor8) + 10000000000 * 10^18\n  if (10^18 * t) + (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / t + -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n      revert with 0, 'mul failed'\n  if 10000000000 * 10^18 * (10^18 * t) + (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (10^18 * t) + (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n      revert with 0, 'mul failed'\n  if stor8 + (10000000000 * 10^18 * (10^18 * t) + (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n      revert with 0, 'add failed'\n  return ((10^18 * t) + (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18)\n\ndef withdraw(): # not payable\n  if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n      revert with 0, 'add failed'\n  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n  if totalSupply <= 0:\n      if balanceOf[caller].field_1024 >\u2032 0:\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n              revert with 0, 'sub failed'\n          require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n              revert with 0, 'You have no dividends'\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n              revert with 0, 'add failed'\n          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n          call caller with:\n             value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n               gas 2300 * is_zero(value) wei\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          log Withdrawal(\n                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                uint256 _type=block.timestamp,\n                uint256 amount=caller)\n      else:\n          if balanceOf[caller].field_1024 >=\u2032 0:\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                  revert with 0, 'You have no dividends'\n              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n              call caller with:\n                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              log Withdrawal(\n                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                    uint256 _type=block.timestamp,\n                    uint256 amount=caller)\n          else:\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                  revert with 0, 'add failed'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                  revert with 0, 'You have no dividends'\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n              call caller with:\n                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              log Withdrawal(\n                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                    uint256 _type=block.timestamp,\n                    uint256 amount=caller)\n  else:\n      if not stor10:\n          require totalSupply\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n              revert with 0, 'add failed'\n          if balanceOf[caller].field_1024 >\u2032 0:\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                  revert with 0, 'sub failed'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                  revert with 0, 'You have no dividends'\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n              call caller with:\n                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              log Withdrawal(\n                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                    uint256 _type=block.timestamp,\n                    uint256 amount=caller)\n          else:\n              if balanceOf[caller].field_1024 >=\u2032 0:\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n              else:\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                      revert with 0, 'add failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n      else:\n          require stor10\n          if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n              revert with 0, 'mul failed'\n          require totalSupply\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n              revert with 0, 'add failed'\n          if balanceOf[caller].field_1024 >\u2032 0:\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                  revert with 0, 'sub failed'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                  revert with 0, 'You have no dividends'\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n              call caller with:\n                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              log Withdrawal(\n                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                    uint256 _type=block.timestamp,\n                    uint256 amount=caller)\n          else:\n              if balanceOf[caller].field_1024 >=\u2032 0:\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n              else:\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                      revert with 0, 'add failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n\ndef buy(address _referredBy) payable: \n  if not call.value:\n      revert with 0, 'Incoming funds is too small'\n  require call.value\n  if call.value * stor0 / call.value != stor0:\n      revert with 0, 'mul failed'\n  require stor1\n  if call.value * stor0 / stor1 > call.value:\n      revert with 0, 'sub failed'\n  if not call.value * stor0 / stor1:\n      revert with 0, 'Incoming funds is too small'\n  if not _referredBy:\n      if balanceOf[caller].field_0:\n          if balanceOf[balanceOf[caller].field_0].field_256 >= 10 * 10^18:\n              if not call.value * stor0 / stor1:\n                  if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                      revert with 0, 'add failed'\n                  log ReferralReward(\n                        address referral_addr=call.value,\n                        address referrer_addr=0,\n                        uint256 funds=block.timestamp,\n                        uint256 reward_funds=caller,\n                        uint256 time=balanceOf[caller].field_0)\n                  revert with 0, 'Incoming funds is too small'\n              require call.value * stor0 / stor1\n              if call.value * stor0 / stor1 * stor6 / call.value * stor0 / stor1 != stor6:\n                  revert with 0, 'mul failed'\n              require stor7\n              if call.value * stor0 / stor1 * stor6 / stor7 > call.value * stor0 / stor1:\n                  revert with 0, 'sub failed'\n              if balanceOf[balanceOf[caller].field_0].field_768 + (call.value * stor0 / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n                  revert with 0, 'add failed'\n              balanceOf[balanceOf[caller].field_0].field_768 += call.value * stor0 / stor1 * stor6 / stor7\n              log ReferralReward(\n                    address referral_addr=call.value,\n                    address referrer_addr=call.value * stor0 / stor1 * stor6 / stor7,\n                    uint256 funds=block.timestamp,\n                    uint256 reward_funds=caller,\n                    uint256 time=balanceOf[caller].field_0)\n              if not (call.value * stor0 / stor1) - (call.value * stor0 / stor1 * stor6 / stor7):\n                  revert with 0, 'Incoming funds is too small'\n              if not stor8:\n                  revert with 0, 'sub failed'\n              require stor8\n              if 2 * stor8 / stor8 != 2:\n                  revert with 0, 'mul failed'\n              if 10000000000 * 10^18 > 2 * stor8:\n                  revert with 0, 'sub failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n                  revert with 0, 'mul failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n                  require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                      revert with 0, 'mul failed'\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                      revert with 0, 'add failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  else:\n                      if (2 * stor8) - 10000000000 * 10^18 > 0:\n                          revert with 0, 'sub failed'\n                      if not -(2 * stor8) + 10000000000 * 10^18:\n                          if stor8 < stor8:\n                              revert with 0, 'add failed'\n                      else:\n                          require -(2 * stor8) + 10000000000 * 10^18\n                          if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                              revert with 0, 'mul failed'\n                          if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                              revert with 0, 'mul failed'\n          else:\n              if not call.value * stor0 / stor1:\n                  revert with 0, 'Incoming funds is too small'\n              if not stor8:\n                  revert with 0, 'sub failed'\n              require stor8\n              if 2 * stor8 / stor8 != 2:\n                  revert with 0, 'mul failed'\n              if 10000000000 * 10^18 > 2 * stor8:\n                  revert with 0, 'sub failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n                  revert with 0, 'mul failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n                  require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                      revert with 0, 'mul failed'\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                      revert with 0, 'add failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  else:\n                      if (2 * stor8) - 10000000000 * 10^18 > 0:\n                          revert with 0, 'sub failed'\n                      if not -(2 * stor8) + 10000000000 * 10^18:\n                          if stor8 < stor8:\n                              revert with 0, 'add failed'\n                          revert with 0, 'Incoming funds is too small'\n                      require -(2 * stor8) + 10000000000 * 10^18\n                      if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                      if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n                          revert with 0, 'add failed'\n                      if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                          revert with 0, 'Incoming funds is too small'\n                      stor8 += 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18\n                      if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                          revert with 0, 'add failed'\n                      if totalSupply > 0:\n                          if not stor10:\n                              require totalSupply\n                              stor10 = 0 / totalSupply\n                              if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                                  revert with 0, 'add failed'\n                          else:\n                              require stor10\n                              if (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / stor10 != totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18):\n                                  revert with 0, 'mul failed'\n                              require totalSupply\n                              stor10 = (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / totalSupply\n                      else:\n                          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if totalSupply <= 0:\n                              if stor10 + (call.value * stor0 / stor1) < stor10:\n                                  revert with 0, 'add failed'\n                              stor10 += call.value * stor0 / stor1\n                          else:\n                              if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                                  require (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                                  if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10 / (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 != stor10:\n                                      revert with 0, 'mul failed'\n      else:\n          if not stor8:\n              revert with 0, 'sub failed'\n          require stor8\n          if 2 * stor8 / stor8 != 2:\n              revert with 0, 'mul failed'\n          if 10000000000 * 10^18 > 2 * stor8:\n              revert with 0, 'sub failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n              revert with 0, 'mul failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n              require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                  revert with 0, 'mul failed'\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                  revert with 0, 'add failed'\n          else:\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18 > 0:\n                      revert with 0, 'sub failed'\n                  if not -(2 * stor8) + 10000000000 * 10^18:\n                      if stor8 < stor8:\n                          revert with 0, 'add failed'\n                      revert with 0, 'Incoming funds is too small'\n                  require -(2 * stor8) + 10000000000 * 10^18\n                  if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                      revert with 0, 'mul failed'\n                  if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n                      revert with 0, 'add failed'\n                  if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                      revert with 0, 'Incoming funds is too small'\n                  stor8 += 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18\n                  if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                      revert with 0, 'add failed'\n                  if totalSupply <= 0:\n                      totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                      if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                      if totalSupply <= 0:\n                          if stor10 + (call.value * stor0 / stor1) < stor10:\n                              revert with 0, 'add failed'\n                          stor10 += call.value * stor0 / stor1\n                          log Purchase(\n                                address addr=call.value,\n                                uint256 funds=(-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18,\n                                uint256 tokens=stor8 / 10^18,\n                                uint256 price=block.timestamp,\n                                uint256 time=caller)\n                          stop\n                      if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                          require totalSupply\n                          if balanceOf[caller].field_1024 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 += 0 / totalSupply\n                      else:\n                          require (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10 / (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 != stor10:\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          if balanceOf[caller].field_1024 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10 / totalSupply\n                  else:\n                      if not stor10:\n                          require totalSupply\n                          stor10 = 0 / totalSupply\n                          if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                              revert with 0, 'add failed'\n                          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if totalSupply > 0:\n                      else:\n                          require stor10\n                          if (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / stor10 != totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18):\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          stor10 = (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / totalSupply\n                          if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                              revert with 0, 'add failed'\n                          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  if _referredBy == caller:\n      if not balanceOf[caller].field_0:\n          if not stor8:\n              revert with 0, 'sub failed'\n          require stor8\n          if 2 * stor8 / stor8 != 2:\n              revert with 0, 'mul failed'\n          if 10000000000 * 10^18 > 2 * stor8:\n              revert with 0, 'sub failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n              revert with 0, 'mul failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n              require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                  revert with 0, 'mul failed'\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                  revert with 0, 'add failed'\n          else:\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18 > 0:\n                      revert with 0, 'sub failed'\n                  if not -(2 * stor8) + 10000000000 * 10^18:\n                      if stor8 < stor8:\n                          revert with 0, 'add failed'\n                      revert with 0, 'Incoming funds is too small'\n                  require -(2 * stor8) + 10000000000 * 10^18\n                  if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                      revert with 0, 'mul failed'\n                  if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n                      revert with 0, 'add failed'\n                  if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                      revert with 0, 'Incoming funds is too small'\n                  stor8 += 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18\n                  if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                      revert with 0, 'add failed'\n                  if totalSupply > 0:\n                      if stor10:\n                          require stor10\n                          if (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / stor10 != totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18):\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          stor10 = (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / totalSupply\n                          if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                              revert with 0, 'add failed'\n                          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                              revert with 0, 'add failed'\n                      else:\n                          require totalSupply\n                          stor10 = 0 / totalSupply\n                          if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                              revert with 0, 'add failed'\n                          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                  else:\n                      totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                      if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                      if totalSupply <= 0:\n                          if stor10 + (call.value * stor0 / stor1) < stor10:\n                              revert with 0, 'add failed'\n                          stor10 += call.value * stor0 / stor1\n                          log Purchase(\n                                address addr=call.value,\n                                uint256 funds=(-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18,\n                                uint256 tokens=stor8 / 10^18,\n                                uint256 price=block.timestamp,\n                                uint256 time=caller)\n                          stop\n                      if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                          require totalSupply\n                          if balanceOf[caller].field_1024 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 += 0 / totalSupply\n                      else:\n                          require (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10 / (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 != stor10:\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          if balanceOf[caller].field_1024 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n      else:\n          if balanceOf[balanceOf[caller].field_0].field_256 >= 10 * 10^18:\n              if not call.value * stor0 / stor1:\n                  if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                      revert with 0, 'add failed'\n                  log ReferralReward(\n                        address referral_addr=call.value,\n                        address referrer_addr=0,\n                        uint256 funds=block.timestamp,\n                        uint256 reward_funds=caller,\n                        uint256 time=balanceOf[caller].field_0)\n                  revert with 0, 'Incoming funds is too small'\n              require call.value * stor0 / stor1\n              if call.value * stor0 / stor1 * stor6 / call.value * stor0 / stor1 != stor6:\n                  revert with 0, 'mul failed'\n              require stor7\n              if call.value * stor0 / stor1 * stor6 / stor7 > call.value * stor0 / stor1:\n                  revert with 0, 'sub failed'\n              if balanceOf[balanceOf[caller].field_0].field_768 + (call.value * stor0 / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n                  revert with 0, 'add failed'\n              balanceOf[balanceOf[caller].field_0].field_768 += call.value * stor0 / stor1 * stor6 / stor7\n              log ReferralReward(\n                    address referral_addr=call.value,\n                    address referrer_addr=call.value * stor0 / stor1 * stor6 / stor7,\n                    uint256 funds=block.timestamp,\n                    uint256 reward_funds=caller,\n                    uint256 time=balanceOf[caller].field_0)\n              if not (call.value * stor0 / stor1) - (call.value * stor0 / stor1 * stor6 / stor7):\n                  revert with 0, 'Incoming funds is too small'\n              if not stor8:\n                  revert with 0, 'sub failed'\n              require stor8\n              if 2 * stor8 / stor8 != 2:\n                  revert with 0, 'mul failed'\n              if 10000000000 * 10^18 > 2 * stor8:\n                  revert with 0, 'sub failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n                  revert with 0, 'mul failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n                  require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                      revert with 0, 'mul failed'\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                      revert with 0, 'add failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  else:\n                      if (2 * stor8) - 10000000000 * 10^18 > 0:\n                          revert with 0, 'sub failed'\n                      if not -(2 * stor8) + 10000000000 * 10^18:\n                          if stor8 < stor8:\n                              revert with 0, 'add failed'\n                      else:\n                          require -(2 * stor8) + 10000000000 * 10^18\n                          if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                              revert with 0, 'mul failed'\n                          if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                              revert with 0, 'mul failed'\n          else:\n              if not call.value * stor0 / stor1:\n                  revert with 0, 'Incoming funds is too small'\n              if not stor8:\n                  revert with 0, 'sub failed'\n              require stor8\n              if 2 * stor8 / stor8 != 2:\n                  revert with 0, 'mul failed'\n              if 10000000000 * 10^18 > 2 * stor8:\n                  revert with 0, 'sub failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n                  revert with 0, 'mul failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n                  require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                      revert with 0, 'mul failed'\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                      revert with 0, 'add failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  else:\n                      if (2 * stor8) - 10000000000 * 10^18 > 0:\n                          revert with 0, 'sub failed'\n                      if not -(2 * stor8) + 10000000000 * 10^18:\n                          if stor8 < stor8:\n                              revert with 0, 'add failed'\n                          revert with 0, 'Incoming funds is too small'\n                      require -(2 * stor8) + 10000000000 * 10^18\n                      if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                      if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n                          revert with 0, 'add failed'\n                      if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                          revert with 0, 'Incoming funds is too small'\n                      stor8 += 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18\n                      if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                          revert with 0, 'add failed'\n                      if totalSupply > 0:\n                          if not stor10:\n                              require totalSupply\n                              stor10 = 0 / totalSupply\n                          else:\n                              require stor10\n                              if (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / stor10 != totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18):\n                                  revert with 0, 'mul failed'\n                              require totalSupply\n                              stor10 = (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / totalSupply\n                      else:\n                          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if totalSupply <= 0:\n                              if stor10 + (call.value * stor0 / stor1) < stor10:\n                                  revert with 0, 'add failed'\n                          else:\n                              if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                                  require (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  if balanceOf[caller].field_0:\n      if balanceOf[balanceOf[caller].field_0].field_256 >= 10 * 10^18:\n          if not call.value * stor0 / stor1:\n              if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                  revert with 0, 'add failed'\n              log ReferralReward(\n                    address referral_addr=call.value,\n                    address referrer_addr=0,\n                    uint256 funds=block.timestamp,\n                    uint256 reward_funds=caller,\n                    uint256 time=balanceOf[caller].field_0)\n              revert with 0, 'Incoming funds is too small'\n          require call.value * stor0 / stor1\n          if call.value * stor0 / stor1 * stor6 / call.value * stor0 / stor1 != stor6:\n              revert with 0, 'mul failed'\n          require stor7\n          if call.value * stor0 / stor1 * stor6 / stor7 > call.value * stor0 / stor1:\n              revert with 0, 'sub failed'\n          if balanceOf[balanceOf[caller].field_0].field_768 + (call.value * stor0 / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n              revert with 0, 'add failed'\n          balanceOf[balanceOf[caller].field_0].field_768 += call.value * stor0 / stor1 * stor6 / stor7\n          log ReferralReward(\n                address referral_addr=call.value,\n                address referrer_addr=call.value * stor0 / stor1 * stor6 / stor7,\n                uint256 funds=block.timestamp,\n                uint256 reward_funds=caller,\n                uint256 time=balanceOf[caller].field_0)\n          if not (call.value * stor0 / stor1) - (call.value * stor0 / stor1 * stor6 / stor7):\n              revert with 0, 'Incoming funds is too small'\n          if not stor8:\n              revert with 0, 'sub failed'\n          require stor8\n          if 2 * stor8 / stor8 != 2:\n              revert with 0, 'mul failed'\n          if 10000000000 * 10^18 > 2 * stor8:\n              revert with 0, 'sub failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n              revert with 0, 'mul failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n              require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                  revert with 0, 'mul failed'\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                  revert with 0, 'add failed'\n          else:\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18 > 0:\n                      revert with 0, 'sub failed'\n                  if -(2 * stor8) + 10000000000 * 10^18:\n                      require -(2 * stor8) + 10000000000 * 10^18\n                      if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                          revert with 0, 'mul failed'\n      else:\n          if not call.value * stor0 / stor1:\n              revert with 0, 'Incoming funds is too small'\n          if not stor8:\n              revert with 0, 'sub failed'\n          require stor8\n          if 2 * stor8 / stor8 != 2:\n              revert with 0, 'mul failed'\n          if 10000000000 * 10^18 > 2 * stor8:\n              revert with 0, 'sub failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n              revert with 0, 'mul failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n              require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                  revert with 0, 'mul failed'\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                  revert with 0, 'add failed'\n          else:\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18 > 0:\n                      revert with 0, 'sub failed'\n                  if not -(2 * stor8) + 10000000000 * 10^18:\n                      if stor8 < stor8:\n                          revert with 0, 'add failed'\n                      revert with 0, 'Incoming funds is too small'\n                  require -(2 * stor8) + 10000000000 * 10^18\n                  if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                      revert with 0, 'mul failed'\n                  if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n                      revert with 0, 'add failed'\n                  if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                      revert with 0, 'Incoming funds is too small'\n                  stor8 += 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18\n                  if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                      revert with 0, 'add failed'\n                  if totalSupply > 0:\n                      if not stor10:\n                          require totalSupply\n                          stor10 = 0 / totalSupply\n                      else:\n                          require stor10\n                          if (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / stor10 != totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18):\n                              revert with 0, 'mul failed'\n                  else:\n                      totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                      if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                      if totalSupply > 0:\n                          if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  balanceOf[caller].field_0 = _referredBy\n  if not stor8:\n      revert with 0, 'sub failed'\n  require stor8\n  if 2 * stor8 / stor8 != 2:\n      revert with 0, 'mul failed'\n  if 10000000000 * 10^18 > 2 * stor8:\n      revert with 0, 'sub failed'\n  if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n      revert with 0, 'mul failed'\n  if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n      require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n      if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n          revert with 0, 'mul failed'\n      if (2 * stor8) - 10000000000 * 10^18:\n          require (2 * stor8) - 10000000000 * 10^18\n          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n              revert with 0, 'mul failed'\n      if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n          revert with 0, 'add failed'\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  if (2 * stor8) - 10000000000 * 10^18:\n      require (2 * stor8) - 10000000000 * 10^18\n      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n          revert with 0, 'mul failed'\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  if (2 * stor8) - 10000000000 * 10^18 > 0:\n      revert with 0, 'sub failed'\n  if not -(2 * stor8) + 10000000000 * 10^18:\n      if stor8 < stor8:\n          revert with 0, 'add failed'\n      revert with 0, 'Incoming funds is too small'\n  require -(2 * stor8) + 10000000000 * 10^18\n  if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n      revert with 0, 'mul failed'\n  if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n      revert with 0, 'mul failed'\n  if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n      revert with 0, 'add failed'\n  if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n      revert with 0, 'Incoming funds is too small'\n  stor8 += 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18\n  if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n      revert with 0, 'add failed'\n  if totalSupply > 0:\n      if not stor10:\n          require totalSupply\n          stor10 = 0 / totalSupply\n          if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n              revert with 0, 'add failed'\n          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n          if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n              revert with 0, 'add failed'\n      else:\n          require stor10\n          if (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / stor10 != totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18):\n              revert with 0, 'mul failed'\n          require totalSupply\n          stor10 = (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / totalSupply\n          if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n              revert with 0, 'add failed'\n          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n  if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n      revert with 0, 'add failed'\n  balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n  if totalSupply <= 0:\n      if stor10 + (call.value * stor0 / stor1) < stor10:\n          revert with 0, 'add failed'\n      stor10 += call.value * stor0 / stor1\n      log Purchase(\n            address addr=call.value,\n            uint256 funds=(-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18,\n            uint256 tokens=stor8 / 10^18,\n            uint256 price=block.timestamp,\n            uint256 time=caller)\n      stop\n  if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n      require totalSupply\n      if balanceOf[caller].field_1024 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n          revert with 0, 'add failed'\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  require (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n  if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10 / (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 != stor10:\n      revert with 0, 'mul failed'\n  require totalSupply\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef _fallback(?) payable: # default function\n  mem[128 len calldata.size] = call.data[0 len calldata.size]\n  if not call.value:\n      revert with 0, 'Incoming funds is too small'\n  require call.value\n  if call.value * stor0 / call.value != stor0:\n      revert with 0, 'mul failed'\n  require stor1\n  if call.value * stor0 / stor1 > call.value:\n      revert with 0, 'sub failed'\n  if not call.value * stor0 / stor1:\n      revert with 0, 'Incoming funds is too small'\n  if not mem[128 len 20]:\n      if balanceOf[caller].field_0:\n          if balanceOf[balanceOf[caller].field_0].field_256 >= 10 * 10^18:\n              if not call.value * stor0 / stor1:\n                  if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                      revert with 0, 'add failed'\n                  log ReferralReward(\n                        address referral_addr=call.value,\n                        address referrer_addr=0,\n                        uint256 funds=block.timestamp,\n                        uint256 reward_funds=caller,\n                        uint256 time=balanceOf[caller].field_0)\n                  revert with 0, 'Incoming funds is too small'\n              require call.value * stor0 / stor1\n              if call.value * stor0 / stor1 * stor6 / call.value * stor0 / stor1 != stor6:\n                  revert with 0, 'mul failed'\n              require stor7\n              if call.value * stor0 / stor1 * stor6 / stor7 > call.value * stor0 / stor1:\n                  revert with 0, 'sub failed'\n              if balanceOf[balanceOf[caller].field_0].field_768 + (call.value * stor0 / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n                  revert with 0, 'add failed'\n              balanceOf[balanceOf[caller].field_0].field_768 += call.value * stor0 / stor1 * stor6 / stor7\n              log ReferralReward(\n                    address referral_addr=call.value,\n                    address referrer_addr=call.value * stor0 / stor1 * stor6 / stor7,\n                    uint256 funds=block.timestamp,\n                    uint256 reward_funds=caller,\n                    uint256 time=balanceOf[caller].field_0)\n              if not (call.value * stor0 / stor1) - (call.value * stor0 / stor1 * stor6 / stor7):\n                  revert with 0, 'Incoming funds is too small'\n              if not stor8:\n                  revert with 0, 'sub failed'\n              require stor8\n              if 2 * stor8 / stor8 != 2:\n                  revert with 0, 'mul failed'\n              if 10000000000 * 10^18 > 2 * stor8:\n                  revert with 0, 'sub failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n                  revert with 0, 'mul failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n                  require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                      revert with 0, 'mul failed'\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                      revert with 0, 'add failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  else:\n                      if (2 * stor8) - 10000000000 * 10^18 > 0:\n                          revert with 0, 'sub failed'\n                      if not -(2 * stor8) + 10000000000 * 10^18:\n                          if stor8 < stor8:\n                              revert with 0, 'add failed'\n                      else:\n                          require -(2 * stor8) + 10000000000 * 10^18\n                          if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                              revert with 0, 'mul failed'\n                          if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                              revert with 0, 'mul failed'\n          else:\n              if not call.value * stor0 / stor1:\n                  revert with 0, 'Incoming funds is too small'\n              if not stor8:\n                  revert with 0, 'sub failed'\n              require stor8\n              if 2 * stor8 / stor8 != 2:\n                  revert with 0, 'mul failed'\n              if 10000000000 * 10^18 > 2 * stor8:\n                  revert with 0, 'sub failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n                  revert with 0, 'mul failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n                  require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                      revert with 0, 'mul failed'\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                      revert with 0, 'add failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  else:\n                      if (2 * stor8) - 10000000000 * 10^18 > 0:\n                          revert with 0, 'sub failed'\n                      if not -(2 * stor8) + 10000000000 * 10^18:\n                          if stor8 < stor8:\n                              revert with 0, 'add failed'\n                          revert with 0, 'Incoming funds is too small'\n                      require -(2 * stor8) + 10000000000 * 10^18\n                      if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                      if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n                          revert with 0, 'add failed'\n                      if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                          revert with 0, 'Incoming funds is too small'\n                      stor8 += 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18\n                      if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                          revert with 0, 'add failed'\n                      if totalSupply > 0:\n                          if not stor10:\n                              require totalSupply\n                              stor10 = 0 / totalSupply\n                              if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                                  revert with 0, 'add failed'\n                          else:\n                              require stor10\n                              if (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / stor10 != totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18):\n                                  revert with 0, 'mul failed'\n                              require totalSupply\n                              stor10 = (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / totalSupply\n                      else:\n                          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if totalSupply <= 0:\n                              if stor10 + (call.value * stor0 / stor1) < stor10:\n                                  revert with 0, 'add failed'\n                              stor10 += call.value * stor0 / stor1\n                          else:\n                              if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                                  require (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                                  if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10 / (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 != stor10:\n                                      revert with 0, 'mul failed'\n      else:\n          if not stor8:\n              revert with 0, 'sub failed'\n          require stor8\n          if 2 * stor8 / stor8 != 2:\n              revert with 0, 'mul failed'\n          if 10000000000 * 10^18 > 2 * stor8:\n              revert with 0, 'sub failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n              revert with 0, 'mul failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n              require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                  revert with 0, 'mul failed'\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                  revert with 0, 'add failed'\n          else:\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18 > 0:\n                      revert with 0, 'sub failed'\n                  if not -(2 * stor8) + 10000000000 * 10^18:\n                      if stor8 < stor8:\n                          revert with 0, 'add failed'\n                      revert with 0, 'Incoming funds is too small'\n                  require -(2 * stor8) + 10000000000 * 10^18\n                  if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                      revert with 0, 'mul failed'\n                  if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n                      revert with 0, 'add failed'\n                  if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                      revert with 0, 'Incoming funds is too small'\n                  stor8 += 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18\n                  if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                      revert with 0, 'add failed'\n                  if totalSupply <= 0:\n                      totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                      if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                      if totalSupply <= 0:\n                          if stor10 + (call.value * stor0 / stor1) < stor10:\n                              revert with 0, 'add failed'\n                          stor10 += call.value * stor0 / stor1\n                          log Purchase(\n                                address addr=call.value,\n                                uint256 funds=(-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18,\n                                uint256 tokens=stor8 / 10^18,\n                                uint256 price=block.timestamp,\n                                uint256 time=caller)\n                          stop\n                      if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                          require totalSupply\n                          if balanceOf[caller].field_1024 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 += 0 / totalSupply\n                      else:\n                          require (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10 / (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 != stor10:\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          if balanceOf[caller].field_1024 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10 / totalSupply\n                  else:\n                      if not stor10:\n                          require totalSupply\n                          stor10 = 0 / totalSupply\n                          if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                              revert with 0, 'add failed'\n                          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if totalSupply > 0:\n                      else:\n                          require stor10\n                          if (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / stor10 != totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18):\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          stor10 = (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / totalSupply\n                          if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                              revert with 0, 'add failed'\n                          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  if mem[128 len 20] == caller:\n      if not balanceOf[caller].field_0:\n          if not stor8:\n              revert with 0, 'sub failed'\n          require stor8\n          if 2 * stor8 / stor8 != 2:\n              revert with 0, 'mul failed'\n          if 10000000000 * 10^18 > 2 * stor8:\n              revert with 0, 'sub failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n              revert with 0, 'mul failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n              require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                  revert with 0, 'mul failed'\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                  revert with 0, 'add failed'\n          else:\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18 > 0:\n                      revert with 0, 'sub failed'\n                  if not -(2 * stor8) + 10000000000 * 10^18:\n                      if stor8 < stor8:\n                          revert with 0, 'add failed'\n                      revert with 0, 'Incoming funds is too small'\n                  require -(2 * stor8) + 10000000000 * 10^18\n                  if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                      revert with 0, 'mul failed'\n                  if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n                      revert with 0, 'add failed'\n                  if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                      revert with 0, 'Incoming funds is too small'\n                  stor8 += 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18\n                  if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                      revert with 0, 'add failed'\n                  if totalSupply > 0:\n                      if stor10:\n                          require stor10\n                          if (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / stor10 != totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18):\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          stor10 = (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / totalSupply\n                          if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                              revert with 0, 'add failed'\n                          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                              revert with 0, 'add failed'\n                      else:\n                          require totalSupply\n                          stor10 = 0 / totalSupply\n                          if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                              revert with 0, 'add failed'\n                          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                  else:\n                      totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                      if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                      if totalSupply <= 0:\n                          if stor10 + (call.value * stor0 / stor1) < stor10:\n                              revert with 0, 'add failed'\n                          stor10 += call.value * stor0 / stor1\n                          log Purchase(\n                                address addr=call.value,\n                                uint256 funds=(-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18,\n                                uint256 tokens=stor8 / 10^18,\n                                uint256 price=block.timestamp,\n                                uint256 time=caller)\n                          stop\n                      if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                          require totalSupply\n                          if balanceOf[caller].field_1024 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 += 0 / totalSupply\n                      else:\n                          require (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10 / (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 != stor10:\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          if balanceOf[caller].field_1024 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n      else:\n          if balanceOf[balanceOf[caller].field_0].field_256 >= 10 * 10^18:\n              if not call.value * stor0 / stor1:\n                  if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                      revert with 0, 'add failed'\n                  log ReferralReward(\n                        address referral_addr=call.value,\n                        address referrer_addr=0,\n                        uint256 funds=block.timestamp,\n                        uint256 reward_funds=caller,\n                        uint256 time=balanceOf[caller].field_0)\n                  revert with 0, 'Incoming funds is too small'\n              require call.value * stor0 / stor1\n              if call.value * stor0 / stor1 * stor6 / call.value * stor0 / stor1 != stor6:\n                  revert with 0, 'mul failed'\n              require stor7\n              if call.value * stor0 / stor1 * stor6 / stor7 > call.value * stor0 / stor1:\n                  revert with 0, 'sub failed'\n              if balanceOf[balanceOf[caller].field_0].field_768 + (call.value * stor0 / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n                  revert with 0, 'add failed'\n              balanceOf[balanceOf[caller].field_0].field_768 += call.value * stor0 / stor1 * stor6 / stor7\n              log ReferralReward(\n                    address referral_addr=call.value,\n                    address referrer_addr=call.value * stor0 / stor1 * stor6 / stor7,\n                    uint256 funds=block.timestamp,\n                    uint256 reward_funds=caller,\n                    uint256 time=balanceOf[caller].field_0)\n              if not (call.value * stor0 / stor1) - (call.value * stor0 / stor1 * stor6 / stor7):\n                  revert with 0, 'Incoming funds is too small'\n              if not stor8:\n                  revert with 0, 'sub failed'\n              require stor8\n              if 2 * stor8 / stor8 != 2:\n                  revert with 0, 'mul failed'\n              if 10000000000 * 10^18 > 2 * stor8:\n                  revert with 0, 'sub failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n                  revert with 0, 'mul failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n                  require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                      revert with 0, 'mul failed'\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                      revert with 0, 'add failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  else:\n                      if (2 * stor8) - 10000000000 * 10^18 > 0:\n                          revert with 0, 'sub failed'\n                      if not -(2 * stor8) + 10000000000 * 10^18:\n                          if stor8 < stor8:\n                              revert with 0, 'add failed'\n                      else:\n                          require -(2 * stor8) + 10000000000 * 10^18\n                          if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                              revert with 0, 'mul failed'\n                          if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                              revert with 0, 'mul failed'\n          else:\n              if not call.value * stor0 / stor1:\n                  revert with 0, 'Incoming funds is too small'\n              if not stor8:\n                  revert with 0, 'sub failed'\n              require stor8\n              if 2 * stor8 / stor8 != 2:\n                  revert with 0, 'mul failed'\n              if 10000000000 * 10^18 > 2 * stor8:\n                  revert with 0, 'sub failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n                  revert with 0, 'mul failed'\n              if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n                  require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                      revert with 0, 'mul failed'\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                      revert with 0, 'add failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  else:\n                      if (2 * stor8) - 10000000000 * 10^18 > 0:\n                          revert with 0, 'sub failed'\n                      if not -(2 * stor8) + 10000000000 * 10^18:\n                          if stor8 < stor8:\n                              revert with 0, 'add failed'\n                          revert with 0, 'Incoming funds is too small'\n                      require -(2 * stor8) + 10000000000 * 10^18\n                      if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                      if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n                          revert with 0, 'add failed'\n                      if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                          revert with 0, 'Incoming funds is too small'\n                      stor8 += 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18\n                      if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                          revert with 0, 'add failed'\n                      if totalSupply > 0:\n                          if not stor10:\n                              require totalSupply\n                              stor10 = 0 / totalSupply\n                          else:\n                              require stor10\n                              if (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / stor10 != totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18):\n                                  revert with 0, 'mul failed'\n                              require totalSupply\n                              stor10 = (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / totalSupply\n                      else:\n                          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                          if totalSupply <= 0:\n                              if stor10 + (call.value * stor0 / stor1) < stor10:\n                                  revert with 0, 'add failed'\n                          else:\n                              if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                                  require (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  if balanceOf[caller].field_0:\n      if balanceOf[balanceOf[caller].field_0].field_256 >= 10 * 10^18:\n          if not call.value * stor0 / stor1:\n              if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                  revert with 0, 'add failed'\n              log ReferralReward(\n                    address referral_addr=call.value,\n                    address referrer_addr=0,\n                    uint256 funds=block.timestamp,\n                    uint256 reward_funds=caller,\n                    uint256 time=balanceOf[caller].field_0)\n              revert with 0, 'Incoming funds is too small'\n          require call.value * stor0 / stor1\n          if call.value * stor0 / stor1 * stor6 / call.value * stor0 / stor1 != stor6:\n              revert with 0, 'mul failed'\n          require stor7\n          if call.value * stor0 / stor1 * stor6 / stor7 > call.value * stor0 / stor1:\n              revert with 0, 'sub failed'\n          if balanceOf[balanceOf[caller].field_0].field_768 + (call.value * stor0 / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n              revert with 0, 'add failed'\n          balanceOf[balanceOf[caller].field_0].field_768 += call.value * stor0 / stor1 * stor6 / stor7\n          log ReferralReward(\n                address referral_addr=call.value,\n                address referrer_addr=call.value * stor0 / stor1 * stor6 / stor7,\n                uint256 funds=block.timestamp,\n                uint256 reward_funds=caller,\n                uint256 time=balanceOf[caller].field_0)\n          if not (call.value * stor0 / stor1) - (call.value * stor0 / stor1 * stor6 / stor7):\n              revert with 0, 'Incoming funds is too small'\n          if not stor8:\n              revert with 0, 'sub failed'\n          require stor8\n          if 2 * stor8 / stor8 != 2:\n              revert with 0, 'mul failed'\n          if 10000000000 * 10^18 > 2 * stor8:\n              revert with 0, 'sub failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n              revert with 0, 'mul failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n              require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                  revert with 0, 'mul failed'\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                  revert with 0, 'add failed'\n          else:\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18 > 0:\n                      revert with 0, 'sub failed'\n                  if -(2 * stor8) + 10000000000 * 10^18:\n                      require -(2 * stor8) + 10000000000 * 10^18\n                      if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                          revert with 0, 'mul failed'\n      else:\n          if not call.value * stor0 / stor1:\n              revert with 0, 'Incoming funds is too small'\n          if not stor8:\n              revert with 0, 'sub failed'\n          require stor8\n          if 2 * stor8 / stor8 != 2:\n              revert with 0, 'mul failed'\n          if 10000000000 * 10^18 > 2 * stor8:\n              revert with 0, 'sub failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n              revert with 0, 'mul failed'\n          if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n              require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n                  revert with 0, 'mul failed'\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n                  revert with 0, 'add failed'\n          else:\n              if (2 * stor8) - 10000000000 * 10^18:\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18 > 0:\n                      revert with 0, 'sub failed'\n                  if not -(2 * stor8) + 10000000000 * 10^18:\n                      if stor8 < stor8:\n                          revert with 0, 'add failed'\n                      revert with 0, 'Incoming funds is too small'\n                  require -(2 * stor8) + 10000000000 * 10^18\n                  if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                      revert with 0, 'mul failed'\n                  if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n                      revert with 0, 'add failed'\n                  if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                      revert with 0, 'Incoming funds is too small'\n                  stor8 += 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18\n                  if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n                      revert with 0, 'add failed'\n                  if totalSupply > 0:\n                      if not stor10:\n                          require totalSupply\n                          stor10 = 0 / totalSupply\n                      else:\n                          require stor10\n                          if (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / stor10 != totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18):\n                              revert with 0, 'mul failed'\n                  else:\n                      totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                      if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n                      if totalSupply > 0:\n                          if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  balanceOf[caller].field_0 = mem[128 len 20]\n  if not stor8:\n      revert with 0, 'sub failed'\n  require stor8\n  if 2 * stor8 / stor8 != 2:\n      revert with 0, 'mul failed'\n  if 10000000000 * 10^18 > 2 * stor8:\n      revert with 0, 'sub failed'\n  if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) / 80000000000 * 10^18 != call.value - (call.value * stor0 / stor1):\n      revert with 0, 'mul failed'\n  if (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1):\n      require (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1)\n      if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) / (80000000000 * 10^18 * call.value) - (80000000000 * 10^18 * call.value * stor0 / stor1) != 10^18:\n          revert with 0, 'mul failed'\n      if (2 * stor8) - 10000000000 * 10^18:\n          require (2 * stor8) - 10000000000 * 10^18\n          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n              revert with 0, 'mul failed'\n      if (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value) - (0xe0352f62a19e306ed50b2037ad2000000000000 * call.value * stor0 / stor1) < 0:\n          revert with 0, 'add failed'\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  if (2 * stor8) - 10000000000 * 10^18:\n      require (2 * stor8) - 10000000000 * 10^18\n      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n          revert with 0, 'mul failed'\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  if (2 * stor8) - 10000000000 * 10^18 > 0:\n      revert with 0, 'sub failed'\n  if not -(2 * stor8) + 10000000000 * 10^18:\n      if stor8 < stor8:\n          revert with 0, 'add failed'\n      revert with 0, 'Incoming funds is too small'\n  require -(2 * stor8) + 10000000000 * 10^18\n  if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n      revert with 0, 'mul failed'\n  if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n      revert with 0, 'mul failed'\n  if stor8 + (10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18) < stor8:\n      revert with 0, 'add failed'\n  if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n      revert with 0, 'Incoming funds is too small'\n  stor8 += 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10^18\n  if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n      revert with 0, 'add failed'\n  if totalSupply > 0:\n      if not stor10:\n          require totalSupply\n          stor10 = 0 / totalSupply\n          if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n              revert with 0, 'add failed'\n          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n          if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n              revert with 0, 'add failed'\n      else:\n          require stor10\n          if (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / stor10 != totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18):\n              revert with 0, 'mul failed'\n          require totalSupply\n          stor10 = (totalSupply * stor10) + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10) / totalSupply\n          if totalSupply + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < totalSupply:\n              revert with 0, 'add failed'\n          totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  totalSupply += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n  if balanceOf[caller].field_256 + ((-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18) < balanceOf[caller].field_256:\n      revert with 0, 'add failed'\n  balanceOf[caller].field_256 += (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n  if totalSupply <= 0:\n      if stor10 + (call.value * stor0 / stor1) < stor10:\n          revert with 0, 'add failed'\n      stor10 += call.value * stor0 / stor1\n      log Purchase(\n            address addr=call.value,\n            uint256 funds=(-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18,\n            uint256 tokens=stor8 / 10^18,\n            uint256 price=block.timestamp,\n            uint256 time=caller)\n      stop\n  if not (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n      require totalSupply\n      if balanceOf[caller].field_1024 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n          revert with 0, 'add failed'\n      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n  require (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18\n  if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 * stor10 / (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 != stor10:\n      revert with 0, 'mul failed'\n  require totalSupply\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef reinvest(): # not payable\n  if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n      revert with 0, 'add failed'\n  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n  if totalSupply <= 0:\n      if balanceOf[caller].field_1024 >\u2032 0:\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n              revert with 0, 'sub failed'\n          require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n              revert with 0, 'You have no dividends'\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n              revert with 0, 'add failed'\n          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n          if not balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024:\n              revert with 0, 'Insufficient dividends to do that'\n          require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024\n          if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 != stor0:\n              revert with 0, 'mul failed'\n          require stor1\n          if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 > balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024:\n              revert with 0, 'sub failed'\n          if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n              revert with 0, 'Insufficient dividends to do that'\n          if not balanceOf[caller].field_0:\n              if not stor8:\n                  revert with 0, 'sub failed'\n              require stor8\n              if 2 * stor8 / stor8 != 2:\n                  revert with 0, 'mul failed'\n              if 10000000000 * 10^18 > 2 * stor8:\n                  revert with 0, 'sub failed'\n              if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                  revert with 0, 'mul failed'\n              if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                  require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                      revert with 0, 'mul failed'\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                      revert with 0, 'add failed'\n              else:\n                  if (2 * stor8) - 10000000000 * 10^18:\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                  else:\n                      if (2 * stor8) - 10000000000 * 10^18 > 0:\n                          revert with 0, 'sub failed'\n                      if -(2 * stor8) + 10000000000 * 10^18:\n                          require -(2 * stor8) + 10000000000 * 10^18\n                          if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                              revert with 0, 'mul failed'\n          else:\n              if balanceOf[balanceOf[caller].field_0].field_256 < 10 * 10^18:\n                  if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                      revert with 0, 'Insufficient dividends to do that'\n                  if not stor8:\n                      revert with 0, 'sub failed'\n                  require stor8\n                  if 2 * stor8 / stor8 != 2:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 > 2 * stor8:\n                      revert with 0, 'sub failed'\n                  if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                      revert with 0, 'mul failed'\n                  if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                      if (2 * stor8) - 10000000000 * 10^18:\n                          require (2 * stor8) - 10000000000 * 10^18\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                              revert with 0, 'mul failed'\n                      else:\n                          if (2 * stor8) - 10000000000 * 10^18 > 0:\n                              revert with 0, 'sub failed'\n                          if -(2 * stor8) + 10000000000 * 10^18:\n                              require -(2 * stor8) + 10000000000 * 10^18\n                              if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                                  revert with 0, 'mul failed'\n                  else:\n                      require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                          revert with 0, 'mul failed'\n                      if not (2 * stor8) - 10000000000 * 10^18:\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                              revert with 0, 'add failed'\n                      else:\n                          require (2 * stor8) - 10000000000 * 10^18\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                              revert with 0, 'mul failed'\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                              revert with 0, 'add failed'\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2 >= (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                              if (2 * stor8) - 10000000000 * 10^18 > (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                                  revert with 0, 'sub failed'\n                          else:\n                              require (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                              if ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2) + ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2) < (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2:\n                                  revert with 0, 'add failed'\n              else:\n                  if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                      if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                          revert with 0, 'add failed'\n                      log ReferralReward(\n                            address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                            address referrer_addr=0,\n                            uint256 funds=block.timestamp,\n                            uint256 reward_funds=caller,\n                            uint256 time=balanceOf[caller].field_0)\n                      revert with 0, 'Insufficient dividends to do that'\n                  require (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1\n                  if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 != stor6:\n                      revert with 0, 'mul failed'\n                  require stor7\n                  if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7 > (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                      revert with 0, 'sub failed'\n                  if balanceOf[balanceOf[caller].field_0].field_768 + ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n                      revert with 0, 'add failed'\n                  balanceOf[balanceOf[caller].field_0].field_768 += (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7\n                  log ReferralReward(\n                        address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                        address referrer_addr=(balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7,\n                        uint256 funds=block.timestamp,\n                        uint256 reward_funds=caller,\n                        uint256 time=balanceOf[caller].field_0)\n                  if not ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7):\n                      revert with 0, 'Insufficient dividends to do that'\n                  if not stor8:\n                      revert with 0, 'sub failed'\n                  require stor8\n                  if 2 * stor8 / stor8 != 2:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 > 2 * stor8:\n                      revert with 0, 'sub failed'\n                  if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                      revert with 0, 'mul failed'\n                  if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                      if (2 * stor8) - 10000000000 * 10^18:\n                          require (2 * stor8) - 10000000000 * 10^18\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                              revert with 0, 'mul failed'\n                  else:\n                      require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                          revert with 0, 'mul failed'\n                      if (2 * stor8) - 10000000000 * 10^18:\n                          require (2 * stor8) - 10000000000 * 10^18\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                              revert with 0, 'mul failed'\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                          revert with 0, 'add failed'\n      else:\n          if balanceOf[caller].field_1024 >=\u2032 0:\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                  revert with 0, 'You have no dividends'\n              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n              if not balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                  revert with 0, 'Insufficient dividends to do that'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768\n              if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / balanceOf[caller].field_512 + balanceOf[caller].field_768 != stor0:\n                  revert with 0, 'mul failed'\n              require stor1\n              if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1 > balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                  revert with 0, 'sub failed'\n              if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1:\n                  revert with 0, 'Insufficient dividends to do that'\n              if not balanceOf[caller].field_0:\n                  if not stor8:\n                      revert with 0, 'sub failed'\n                  require stor8\n                  if 2 * stor8 / stor8 != 2:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 > 2 * stor8:\n                      revert with 0, 'sub failed'\n                  if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1):\n                      revert with 0, 'mul failed'\n                  if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1):\n                      require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1)\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1) != 10^18:\n                          revert with 0, 'mul failed'\n                      if (2 * stor8) - 10000000000 * 10^18:\n                          require (2 * stor8) - 10000000000 * 10^18\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                              revert with 0, 'mul failed'\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1) < 0:\n                          revert with 0, 'add failed'\n                  else:\n                      if (2 * stor8) - 10000000000 * 10^18:\n                          require (2 * stor8) - 10000000000 * 10^18\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                              revert with 0, 'mul failed'\n                      else:\n                          if (2 * stor8) - 10000000000 * 10^18 > 0:\n                              revert with 0, 'sub failed'\n                          if -(2 * stor8) + 10000000000 * 10^18:\n                              require -(2 * stor8) + 10000000000 * 10^18\n                              if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                                  revert with 0, 'mul failed'\n                              if 10000000000 * 10^18 * (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18 / 10000000000 * 10^18 != (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / 20000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n              else:\n                  if balanceOf[balanceOf[caller].field_0].field_256 < 10 * 10^18:\n                      if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1:\n                          revert with 0, 'Insufficient dividends to do that'\n                      if not stor8:\n                          revert with 0, 'sub failed'\n                      require stor8\n                      if 2 * stor8 / stor8 != 2:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 > 2 * stor8:\n                          revert with 0, 'sub failed'\n                      if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1):\n                          revert with 0, 'mul failed'\n                      if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1):\n                          if (2 * stor8) - 10000000000 * 10^18:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                          else:\n                              if (2 * stor8) - 10000000000 * 10^18 > 0:\n                                  revert with 0, 'sub failed'\n                              if -(2 * stor8) + 10000000000 * 10^18:\n                                  require -(2 * stor8) + 10000000000 * 10^18\n                                  if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                                      revert with 0, 'mul failed'\n                      else:\n                          require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1)\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1) != 10^18:\n                              revert with 0, 'mul failed'\n                          if (2 * stor8) - 10000000000 * 10^18:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1) < 0:\n                              revert with 0, 'add failed'\n                  else:\n                      if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1:\n                          if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                              revert with 0, 'add failed'\n                          log ReferralReward(\n                                address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                address referrer_addr=0,\n                                uint256 funds=block.timestamp,\n                                uint256 reward_funds=caller,\n                                uint256 time=balanceOf[caller].field_0)\n                          revert with 0, 'Insufficient dividends to do that'\n                      require (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1\n                      if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1 * stor6 / (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1 != stor6:\n                          revert with 0, 'mul failed'\n                      require stor7\n                      if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1 * stor6 / stor7 > (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1:\n                          revert with 0, 'sub failed'\n                      if balanceOf[balanceOf[caller].field_0].field_768 + ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n                          revert with 0, 'add failed'\n                      balanceOf[balanceOf[caller].field_0].field_768 += (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1 * stor6 / stor7\n                      log ReferralReward(\n                            address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                            address referrer_addr=(balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1 * stor6 / stor7,\n                            uint256 funds=block.timestamp,\n                            uint256 reward_funds=caller,\n                            uint256 time=balanceOf[caller].field_0)\n                      if not ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1 * stor6 / stor7):\n                          revert with 0, 'Insufficient dividends to do that'\n                      if not stor8:\n                          revert with 0, 'sub failed'\n                      require stor8\n                      if 2 * stor8 / stor8 != 2:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 > 2 * stor8:\n                          revert with 0, 'sub failed'\n                      if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1):\n                          revert with 0, 'mul failed'\n                      if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1):\n                          if (2 * stor8) - 10000000000 * 10^18:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                      else:\n                          require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1)\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1) != 10^18:\n                              revert with 0, 'mul failed'\n                          if (2 * stor8) - 10000000000 * 10^18:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) / stor1) < 0:\n                              revert with 0, 'add failed'\n          else:\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                  revert with 0, 'add failed'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                  revert with 0, 'You have no dividends'\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n              if not balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024:\n                  revert with 0, 'Insufficient dividends to do that'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024\n              if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 != stor0:\n                  revert with 0, 'mul failed'\n              require stor1\n              if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 > balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024:\n                  revert with 0, 'sub failed'\n              if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                  revert with 0, 'Insufficient dividends to do that'\n              if not balanceOf[caller].field_0:\n                  if not stor8:\n                      revert with 0, 'sub failed'\n                  require stor8\n                  if 2 * stor8 / stor8 != 2:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 > 2 * stor8:\n                      revert with 0, 'sub failed'\n                  if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                      revert with 0, 'mul failed'\n                  if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                      if (2 * stor8) - 10000000000 * 10^18:\n                          require (2 * stor8) - 10000000000 * 10^18\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                              revert with 0, 'mul failed'\n                      else:\n                          if (2 * stor8) - 10000000000 * 10^18 > 0:\n                              revert with 0, 'sub failed'\n                          if -(2 * stor8) + 10000000000 * 10^18:\n                              require -(2 * stor8) + 10000000000 * 10^18\n                              if (-1 * 10^18 * 2 * stor8) + 0x1c06a5ec5433c60ddaa16406f5a400000000000 / -(2 * stor8) + 10000000000 * 10^18 != 10^18:\n                                  revert with 0, 'mul failed'\n                  else:\n                      require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                          revert with 0, 'mul failed'\n                      if (2 * stor8) - 10000000000 * 10^18:\n                          require (2 * stor8) - 10000000000 * 10^18\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                              revert with 0, 'mul failed'\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                          revert with 0, 'add failed'\n              else:\n                  if balanceOf[balanceOf[caller].field_0].field_256 < 10 * 10^18:\n                      if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                          revert with 0, 'Insufficient dividends to do that'\n                      if not stor8:\n                          revert with 0, 'sub failed'\n                      require stor8\n                      if 2 * stor8 / stor8 != 2:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 > 2 * stor8:\n                          revert with 0, 'sub failed'\n                      if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                          revert with 0, 'mul failed'\n                      if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                          if not (2 * stor8) - 10000000000 * 10^18:\n                              if (2 * stor8) - 10000000000 * 10^18 > 0:\n                                  revert with 0, 'sub failed'\n                              if -(2 * stor8) + 10000000000 * 10^18:\n                          else:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2 >= (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                                  if (2 * stor8) - 10000000000 * 10^18 > (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                                      revert with 0, 'sub failed'\n                              else:\n                                  require (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                                  if ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2) + ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2) < (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2:\n                                      revert with 0, 'add failed'\n                      else:\n                          require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                              revert with 0, 'mul failed'\n                          if not (2 * stor8) - 10000000000 * 10^18:\n                              if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                                  revert with 0, 'add failed'\n                              if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 1 / 2 >= (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                                  if (2 * stor8) - 10000000000 * 10^18 > (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                                      revert with 0, 'sub failed'\n                              else:\n                                  require (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 1 / 2\n                                  if ((0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 1 / 2) + ((0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 1 / 2) < (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 1 / 2:\n                                      revert with 0, 'add failed'\n                          else:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                              if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                                  revert with 0, 'add failed'\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2 < (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                                  require (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                  else:\n                      if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                          if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                              revert with 0, 'add failed'\n                          log ReferralReward(\n                                address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                address referrer_addr=0,\n                                uint256 funds=block.timestamp,\n                                uint256 reward_funds=caller,\n                                uint256 time=balanceOf[caller].field_0)\n                          revert with 0, 'Insufficient dividends to do that'\n                      require (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1\n                      if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 != stor6:\n                          revert with 0, 'mul failed'\n                      require stor7\n                      if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7 > (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                          revert with 0, 'sub failed'\n                      if balanceOf[balanceOf[caller].field_0].field_768 + ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n                          revert with 0, 'add failed'\n                      balanceOf[balanceOf[caller].field_0].field_768 += (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7\n                      log ReferralReward(\n                            address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                            address referrer_addr=(balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7,\n                            uint256 funds=block.timestamp,\n                            uint256 reward_funds=caller,\n                            uint256 time=balanceOf[caller].field_0)\n                      if not ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7):\n                          revert with 0, 'Insufficient dividends to do that'\n                      if not stor8:\n                          revert with 0, 'sub failed'\n                      require stor8\n                      if 2 * stor8 / stor8 != 2:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 > 2 * stor8:\n                          revert with 0, 'sub failed'\n                      if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                          revert with 0, 'mul failed'\n                      if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                          if (2 * stor8) - 10000000000 * 10^18:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                      else:\n                          require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                              revert with 0, 'mul failed'\n                          if not (2 * stor8) - 10000000000 * 10^18:\n                              if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                                  revert with 0, 'add failed'\n                          else:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n  else:\n      if stor10:\n          require stor10\n          if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n              revert with 0, 'mul failed'\n          require totalSupply\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n              revert with 0, 'add failed'\n          if balanceOf[caller].field_1024 <=\u2032 0:\n              if balanceOf[caller].field_1024 >=\u2032 0:\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                  if not balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                      revert with 0, 'Insufficient dividends to do that'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                  if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) != stor0:\n                      revert with 0, 'mul failed'\n                  require stor1\n                  if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1 > balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                      revert with 0, 'sub failed'\n                  if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1:\n                      revert with 0, 'Insufficient dividends to do that'\n                  if not balanceOf[caller].field_0:\n                      if not stor8:\n                          revert with 0, 'sub failed'\n                      require stor8\n                      if 2 * stor8 / stor8 != 2:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 > 2 * stor8:\n                          revert with 0, 'sub failed'\n                      if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1):\n                          revert with 0, 'mul failed'\n                      if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1):\n                          if not (2 * stor8) - 10000000000 * 10^18:\n                              if (2 * stor8) - 10000000000 * 10^18 > 0:\n                                  revert with 0, 'sub failed'\n                          else:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2 >= (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                                  if (2 * stor8) - 10000000000 * 10^18 > (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                                      revert with 0, 'sub failed'\n                              else:\n                                  require (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                                  if ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2) + ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2) < (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2:\n                                      revert with 0, 'add failed'\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1)\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) != 10^18:\n                          revert with 0, 'mul failed'\n                      if not (2 * stor8) - 10000000000 * 10^18:\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) < 0:\n                              revert with 0, 'add failed'\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) + 1 / 2 >= (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1):\n                              if (2 * stor8) - 10000000000 * 10^18 > (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1):\n                                  revert with 0, 'sub failed'\n                          else:\n                              require (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) + 1 / 2\n                              if ((0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) / (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) + 1 / 2) + ((0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) + 1 / 2) < (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) / (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) + 1 / 2:\n                                  revert with 0, 'add failed'\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) < 0:\n                          revert with 0, 'add failed'\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2 >= (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if balanceOf[balanceOf[caller].field_0].field_256 < 10 * 10^18:\n                      if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1:\n                          revert with 0, 'Insufficient dividends to do that'\n                      if not stor8:\n                          revert with 0, 'sub failed'\n                      require stor8\n                      if 2 * stor8 / stor8 != 2:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 > 2 * stor8:\n                          revert with 0, 'sub failed'\n                      if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1):\n                          revert with 0, 'mul failed'\n                      if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1):\n                          if (2 * stor8) - 10000000000 * 10^18:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                      else:\n                          require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1)\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) != 10^18:\n                              revert with 0, 'mul failed'\n                          if (2 * stor8) - 10000000000 * 10^18:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) < 0:\n                              revert with 0, 'add failed'\n                  else:\n                      if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1:\n                          if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                              revert with 0, 'add failed'\n                          log ReferralReward(\n                                address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                                address referrer_addr=0,\n                                uint256 funds=block.timestamp,\n                                uint256 reward_funds=caller,\n                                uint256 time=balanceOf[caller].field_0)\n                          revert with 0, 'Insufficient dividends to do that'\n                      require (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1\n                      if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1 * stor6 / (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1 != stor6:\n                          revert with 0, 'mul failed'\n                      require stor7\n                      if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1 * stor6 / stor7 > (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1:\n                          revert with 0, 'sub failed'\n                      if balanceOf[balanceOf[caller].field_0].field_768 + ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n                          revert with 0, 'add failed'\n                      balanceOf[balanceOf[caller].field_0].field_768 += (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1 * stor6 / stor7\n                      log ReferralReward(\n                            address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                            address referrer_addr=(balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1 * stor6 / stor7,\n                            uint256 funds=block.timestamp,\n                            uint256 reward_funds=caller,\n                            uint256 time=balanceOf[caller].field_0)\n                      if not ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1 * stor6 / stor7):\n                          revert with 0, 'Insufficient dividends to do that'\n                      if not stor8:\n                          revert with 0, 'sub failed'\n                      require stor8\n                      if 2 * stor8 / stor8 != 2:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 > 2 * stor8:\n                          revert with 0, 'sub failed'\n                      if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1):\n                          revert with 0, 'mul failed'\n                      if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1):\n                          require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1)\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) / stor1) != 10^18:\n                              revert with 0, 'mul failed'\n                      else:\n                          if (2 * stor8) - 10000000000 * 10^18:\n              else:\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                      revert with 0, 'add failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                  if not balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024:\n                      revert with 0, 'Insufficient dividends to do that'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024\n                  if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 != stor0:\n                      revert with 0, 'mul failed'\n                  require stor1\n                  if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 > balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                      revert with 0, 'Insufficient dividends to do that'\n                  if not balanceOf[caller].field_0:\n                      if not stor8:\n                          revert with 0, 'sub failed'\n                      require stor8\n                      if 2 * stor8 / stor8 != 2:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 > 2 * stor8:\n                          revert with 0, 'sub failed'\n                      if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                          revert with 0, 'mul failed'\n                      if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                          if (2 * stor8) - 10000000000 * 10^18:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                      else:\n                          require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                              revert with 0, 'mul failed'\n                          if (2 * stor8) - 10000000000 * 10^18:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                              revert with 0, 'add failed'\n                  else:\n                      if balanceOf[balanceOf[caller].field_0].field_256 < 10 * 10^18:\n                          if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                              revert with 0, 'Insufficient dividends to do that'\n                          if not stor8:\n                              revert with 0, 'sub failed'\n                          require stor8\n                          if 2 * stor8 / stor8 != 2:\n                              revert with 0, 'mul failed'\n                          if 10000000000 * 10^18 > 2 * stor8:\n                              revert with 0, 'sub failed'\n                          if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                              revert with 0, 'mul failed'\n                          if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                              if (2 * stor8) - 10000000000 * 10^18:\n                                  require (2 * stor8) - 10000000000 * 10^18\n                                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                      revert with 0, 'mul failed'\n                          else:\n                              require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                              if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                                  revert with 0, 'mul failed'\n                              if (2 * stor8) - 10000000000 * 10^18:\n                                  require (2 * stor8) - 10000000000 * 10^18\n                                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                      revert with 0, 'mul failed'\n                              if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                                  revert with 0, 'add failed'\n                      else:\n                          if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                              if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                                  revert with 0, 'add failed'\n                              log ReferralReward(\n                                    address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                    address referrer_addr=0,\n                                    uint256 funds=block.timestamp,\n                                    uint256 reward_funds=caller,\n                                    uint256 time=balanceOf[caller].field_0)\n                              revert with 0, 'Insufficient dividends to do that'\n                          require (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1\n                          if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 != stor6:\n                              revert with 0, 'mul failed'\n                          require stor7\n                          if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7 > (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                              revert with 0, 'sub failed'\n                          if balanceOf[balanceOf[caller].field_0].field_768 + ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n                              revert with 0, 'add failed'\n                          balanceOf[balanceOf[caller].field_0].field_768 += (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7\n                          log ReferralReward(\n                                address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                address referrer_addr=(balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7,\n                                uint256 funds=block.timestamp,\n                                uint256 reward_funds=caller,\n                                uint256 time=balanceOf[caller].field_0)\n                          if not ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7):\n                              revert with 0, 'Insufficient dividends to do that'\n                          if not stor8:\n                              revert with 0, 'sub failed'\n                          require stor8\n                          if 2 * stor8 / stor8 != 2:\n                              revert with 0, 'mul failed'\n                          if 10000000000 * 10^18 > 2 * stor8:\n                              revert with 0, 'sub failed'\n                          if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                              revert with 0, 'mul failed'\n                          if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n          else:\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                  revert with 0, 'sub failed'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                  revert with 0, 'You have no dividends'\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n              if not balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024:\n                  revert with 0, 'Insufficient dividends to do that'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024\n              if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 != stor0:\n                  revert with 0, 'mul failed'\n              require stor1\n              if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 > balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024:\n                  revert with 0, 'sub failed'\n              if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                  revert with 0, 'Insufficient dividends to do that'\n              if not balanceOf[caller].field_0:\n                  if not stor8:\n                      revert with 0, 'sub failed'\n                  require stor8\n                  if 2 * stor8 / stor8 != 2:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 > 2 * stor8:\n                      revert with 0, 'sub failed'\n                  if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                      revert with 0, 'mul failed'\n                  if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                      if not (2 * stor8) - 10000000000 * 10^18:\n                          if (2 * stor8) - 10000000000 * 10^18 > 0:\n                              revert with 0, 'sub failed'\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2 >= (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                      revert with 0, 'mul failed'\n                  if not (2 * stor8) - 10000000000 * 10^18:\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                          revert with 0, 'add failed'\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 1 / 2 >= (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 1 / 2\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                      revert with 0, 'add failed'\n              else:\n                  if balanceOf[balanceOf[caller].field_0].field_256 < 10 * 10^18:\n                      if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                          revert with 0, 'Insufficient dividends to do that'\n                      if not stor8:\n                          revert with 0, 'sub failed'\n                      require stor8\n                      if 2 * stor8 / stor8 != 2:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 > 2 * stor8:\n                          revert with 0, 'sub failed'\n                      if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                          revert with 0, 'mul failed'\n                      if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                          if (2 * stor8) - 10000000000 * 10^18:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                      else:\n                          require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                              revert with 0, 'mul failed'\n                          if (2 * stor8) - 10000000000 * 10^18:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                              revert with 0, 'add failed'\n                  else:\n                      if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                          if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                              revert with 0, 'add failed'\n                          log ReferralReward(\n                                address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                address referrer_addr=0,\n                                uint256 funds=block.timestamp,\n                                uint256 reward_funds=caller,\n                                uint256 time=balanceOf[caller].field_0)\n                          revert with 0, 'Insufficient dividends to do that'\n                      require (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1\n                      if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 != stor6:\n                          revert with 0, 'mul failed'\n                      require stor7\n                      if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7 > (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                          revert with 0, 'sub failed'\n                      if balanceOf[balanceOf[caller].field_0].field_768 + ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n                          revert with 0, 'add failed'\n                      balanceOf[balanceOf[caller].field_0].field_768 += (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7\n                      log ReferralReward(\n                            address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                            address referrer_addr=(balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7,\n                            uint256 funds=block.timestamp,\n                            uint256 reward_funds=caller,\n                            uint256 time=balanceOf[caller].field_0)\n                      if not ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7):\n                          revert with 0, 'Insufficient dividends to do that'\n                      if not stor8:\n                          revert with 0, 'sub failed'\n                      require stor8\n                      if 2 * stor8 / stor8 != 2:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 > 2 * stor8:\n                          revert with 0, 'sub failed'\n                      if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                          revert with 0, 'mul failed'\n                      if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                          require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * stor10 * balanceOf[caller].field_256 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * stor10 * balanceOf[caller].field_256 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (stor10 * balanceOf[caller].field_256 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                              revert with 0, 'mul failed'\n      else:\n          require totalSupply\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n              revert with 0, 'add failed'\n          if balanceOf[caller].field_1024 >\u2032 0:\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                  revert with 0, 'sub failed'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                  revert with 0, 'You have no dividends'\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n              if not balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024:\n                  revert with 0, 'Insufficient dividends to do that'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024\n              if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 != stor0:\n                  revert with 0, 'mul failed'\n              require stor1\n              if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 > balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024:\n                  revert with 0, 'sub failed'\n              if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                  revert with 0, 'Insufficient dividends to do that'\n              if not balanceOf[caller].field_0:\n                  if not stor8:\n                      revert with 0, 'sub failed'\n                  require stor8\n                  if 2 * stor8 / stor8 != 2:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 > 2 * stor8:\n                      revert with 0, 'sub failed'\n                  if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                      revert with 0, 'mul failed'\n                  if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                      if not (2 * stor8) - 10000000000 * 10^18:\n                          if (2 * stor8) - 10000000000 * 10^18 > 0:\n                              revert with 0, 'sub failed'\n                      else:\n                          require (2 * stor8) - 10000000000 * 10^18\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                              revert with 0, 'mul failed'\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2 >= (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                              if (2 * stor8) - 10000000000 * 10^18 > (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                                  revert with 0, 'sub failed'\n                          else:\n                              require (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                              if ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2) + ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2) < (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2:\n                                  revert with 0, 'add failed'\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                      revert with 0, 'mul failed'\n                  if not (2 * stor8) - 10000000000 * 10^18:\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                          revert with 0, 'add failed'\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 1 / 2 >= (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                          if (2 * stor8) - 10000000000 * 10^18 > (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                              revert with 0, 'sub failed'\n                      else:\n                          require (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 1 / 2\n                          if ((0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 1 / 2) + ((0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 1 / 2) < (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 1 / 2:\n                              revert with 0, 'add failed'\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require (2 * stor8) - 10000000000 * 10^18\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                      revert with 0, 'mul failed'\n                  if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                      revert with 0, 'add failed'\n                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2 >= (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              if balanceOf[balanceOf[caller].field_0].field_256 < 10 * 10^18:\n                  if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                      revert with 0, 'Insufficient dividends to do that'\n                  if not stor8:\n                      revert with 0, 'sub failed'\n                  require stor8\n                  if 2 * stor8 / stor8 != 2:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 > 2 * stor8:\n                      revert with 0, 'sub failed'\n                  if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                      revert with 0, 'mul failed'\n                  if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                      if (2 * stor8) - 10000000000 * 10^18:\n                          require (2 * stor8) - 10000000000 * 10^18\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                              revert with 0, 'mul failed'\n                  else:\n                      require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                          revert with 0, 'mul failed'\n                      if (2 * stor8) - 10000000000 * 10^18:\n                          require (2 * stor8) - 10000000000 * 10^18\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                              revert with 0, 'mul failed'\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                          revert with 0, 'add failed'\n              else:\n                  if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                      if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                          revert with 0, 'add failed'\n                      log ReferralReward(\n                            address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                            address referrer_addr=0,\n                            uint256 funds=block.timestamp,\n                            uint256 reward_funds=caller,\n                            uint256 time=balanceOf[caller].field_0)\n                      revert with 0, 'Insufficient dividends to do that'\n                  require (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1\n                  if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 != stor6:\n                      revert with 0, 'mul failed'\n                  require stor7\n                  if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7 > (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                      revert with 0, 'sub failed'\n                  if balanceOf[balanceOf[caller].field_0].field_768 + ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n                      revert with 0, 'add failed'\n                  balanceOf[balanceOf[caller].field_0].field_768 += (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7\n                  log ReferralReward(\n                        address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                        address referrer_addr=(balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7,\n                        uint256 funds=block.timestamp,\n                        uint256 reward_funds=caller,\n                        uint256 time=balanceOf[caller].field_0)\n                  if not ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7):\n                      revert with 0, 'Insufficient dividends to do that'\n                  if not stor8:\n                      revert with 0, 'sub failed'\n                  require stor8\n                  if 2 * stor8 / stor8 != 2:\n                      revert with 0, 'mul failed'\n                  if 10000000000 * 10^18 > 2 * stor8:\n                      revert with 0, 'sub failed'\n                  if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                      revert with 0, 'mul failed'\n                  if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                      require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                          revert with 0, 'mul failed'\n                  else:\n                      if (2 * stor8) - 10000000000 * 10^18:\n          else:\n              if balanceOf[caller].field_1024 <\u2032 0:\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                      revert with 0, 'add failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                  if not balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024:\n                      revert with 0, 'Insufficient dividends to do that'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024\n                  if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 != stor0:\n                      revert with 0, 'mul failed'\n                  require stor1\n                  if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 > balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                      revert with 0, 'Insufficient dividends to do that'\n                  if not balanceOf[caller].field_0:\n                      if not stor8:\n                          revert with 0, 'sub failed'\n                      require stor8\n                      if 2 * stor8 / stor8 != 2:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 > 2 * stor8:\n                          revert with 0, 'sub failed'\n                      if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                          revert with 0, 'mul failed'\n                      if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                          if not (2 * stor8) - 10000000000 * 10^18:\n                              if (2 * stor8) - 10000000000 * 10^18 > 0:\n                                  revert with 0, 'sub failed'\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require (2 * stor8) - 10000000000 * 10^18\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                              revert with 0, 'mul failed'\n                          if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2 >= (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                          revert with 0, 'mul failed'\n                      if not (2 * stor8) - 10000000000 * 10^18:\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                              revert with 0, 'add failed'\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 1 / 2 >= (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * balanceOf[caller].field_1024) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) + 1 / 2\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require (2 * stor8) - 10000000000 * 10^18\n                      if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                          revert with 0, 'mul failed'\n                      if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                          revert with 0, 'add failed'\n                  else:\n                      if balanceOf[balanceOf[caller].field_0].field_256 < 10 * 10^18:\n                          if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                              revert with 0, 'Insufficient dividends to do that'\n                          if not stor8:\n                              revert with 0, 'sub failed'\n                          require stor8\n                          if 2 * stor8 / stor8 != 2:\n                              revert with 0, 'mul failed'\n                          if 10000000000 * 10^18 > 2 * stor8:\n                              revert with 0, 'sub failed'\n                          if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                              revert with 0, 'mul failed'\n                          if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                              if (2 * stor8) - 10000000000 * 10^18:\n                                  require (2 * stor8) - 10000000000 * 10^18\n                                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                      revert with 0, 'mul failed'\n                          else:\n                              require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                              if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                                  revert with 0, 'mul failed'\n                              if (2 * stor8) - 10000000000 * 10^18:\n                                  require (2 * stor8) - 10000000000 * 10^18\n                                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                      revert with 0, 'mul failed'\n                              if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) < 0:\n                                  revert with 0, 'add failed'\n                      else:\n                          if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                              if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                                  revert with 0, 'add failed'\n                              log ReferralReward(\n                                    address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                    address referrer_addr=0,\n                                    uint256 funds=block.timestamp,\n                                    uint256 reward_funds=caller,\n                                    uint256 time=balanceOf[caller].field_0)\n                              revert with 0, 'Insufficient dividends to do that'\n                          require (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1\n                          if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 != stor6:\n                              revert with 0, 'mul failed'\n                          require stor7\n                          if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7 > (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1:\n                              revert with 0, 'sub failed'\n                          if balanceOf[balanceOf[caller].field_0].field_768 + ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n                              revert with 0, 'add failed'\n                          balanceOf[balanceOf[caller].field_0].field_768 += (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7\n                          log ReferralReward(\n                                address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                address referrer_addr=(balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7,\n                                uint256 funds=block.timestamp,\n                                uint256 reward_funds=caller,\n                                uint256 time=balanceOf[caller].field_0)\n                          if not ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1 * stor6 / stor7):\n                              revert with 0, 'Insufficient dividends to do that'\n                          if not stor8:\n                              revert with 0, 'sub failed'\n                          require stor8\n                          if 2 * stor8 / stor8 != 2:\n                              revert with 0, 'mul failed'\n                          if 10000000000 * 10^18 > 2 * stor8:\n                              revert with 0, 'sub failed'\n                          if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                              revert with 0, 'mul failed'\n                          if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1):\n                              require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1)\n                              if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_1024) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * balanceOf[caller].field_1024) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) - (balanceOf[caller].field_1024 * stor0) / stor1) != 10^18:\n                                  revert with 0, 'mul failed'\n              else:\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                  if not balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                      revert with 0, 'Insufficient dividends to do that'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                  if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) != stor0:\n                      revert with 0, 'mul failed'\n                  require stor1\n                  if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1 > balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                      revert with 0, 'sub failed'\n                  if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1:\n                      revert with 0, 'Insufficient dividends to do that'\n                  if not balanceOf[caller].field_0:\n                      if not stor8:\n                          revert with 0, 'sub failed'\n                      require stor8\n                      if 2 * stor8 / stor8 != 2:\n                          revert with 0, 'mul failed'\n                      if 10000000000 * 10^18 > 2 * stor8:\n                          revert with 0, 'sub failed'\n                      if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1):\n                          revert with 0, 'mul failed'\n                      if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1):\n                          if (2 * stor8) - 10000000000 * 10^18:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                          else:\n                              if (2 * stor8) - 10000000000 * 10^18 > 0:\n                                  revert with 0, 'sub failed'\n                              if -(2 * stor8) + 10000000000 * 10^18:\n                                  require -(2 * stor8) + 10000000000 * 10^18\n                      else:\n                          require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1)\n                          if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) != 10^18:\n                              revert with 0, 'mul failed'\n                          if not (2 * stor8) - 10000000000 * 10^18:\n                              if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) < 0:\n                                  revert with 0, 'add failed'\n                          else:\n                              require (2 * stor8) - 10000000000 * 10^18\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                  revert with 0, 'mul failed'\n                              if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) < 0:\n                                  revert with 0, 'add failed'\n                              if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2 >= (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                                  if (2 * stor8) - 10000000000 * 10^18 > (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000:\n                                      revert with 0, 'sub failed'\n                              else:\n                                  require (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2\n                                  if ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2) + ((-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2) < (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) + (-80000000000000000000000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) + 0x4140c78940f6a24fdffc78873d4490d2100000000000001 / 2:\n                                      revert with 0, 'add failed'\n                  else:\n                      if balanceOf[balanceOf[caller].field_0].field_256 < 10 * 10^18:\n                          if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1:\n                              revert with 0, 'Insufficient dividends to do that'\n                          if not stor8:\n                              revert with 0, 'sub failed'\n                          require stor8\n                          if 2 * stor8 / stor8 != 2:\n                              revert with 0, 'mul failed'\n                          if 10000000000 * 10^18 > 2 * stor8:\n                              revert with 0, 'sub failed'\n                          if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1):\n                              revert with 0, 'mul failed'\n                          if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1):\n                              if (2 * stor8) - 10000000000 * 10^18:\n                                  require (2 * stor8) - 10000000000 * 10^18\n                                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                      revert with 0, 'mul failed'\n                          else:\n                              require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1)\n                              if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) != 10^18:\n                                  revert with 0, 'mul failed'\n                              if (2 * stor8) - 10000000000 * 10^18:\n                                  require (2 * stor8) - 10000000000 * 10^18\n                                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                      revert with 0, 'mul failed'\n                              if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) < 0:\n                                  revert with 0, 'add failed'\n                      else:\n                          if not (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1:\n                              if balanceOf[balanceOf[caller].field_0].field_768 < balanceOf[balanceOf[caller].field_0].field_768:\n                                  revert with 0, 'add failed'\n                              log ReferralReward(\n                                    address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                    address referrer_addr=0,\n                                    uint256 funds=block.timestamp,\n                                    uint256 reward_funds=caller,\n                                    uint256 time=balanceOf[caller].field_0)\n                              revert with 0, 'Insufficient dividends to do that'\n                          require (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1\n                          if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1 * stor6 / (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1 != stor6:\n                              revert with 0, 'mul failed'\n                          require stor7\n                          if (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1 * stor6 / stor7 > (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1:\n                              revert with 0, 'sub failed'\n                          if balanceOf[balanceOf[caller].field_0].field_768 + ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1 * stor6 / stor7) < balanceOf[balanceOf[caller].field_0].field_768:\n                              revert with 0, 'add failed'\n                          balanceOf[balanceOf[caller].field_0].field_768 += (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1 * stor6 / stor7\n                          log ReferralReward(\n                                address referral_addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                address referrer_addr=(balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1 * stor6 / stor7,\n                                uint256 funds=block.timestamp,\n                                uint256 reward_funds=caller,\n                                uint256 time=balanceOf[caller].field_0)\n                          if not ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1 * stor6 / stor7):\n                              revert with 0, 'Insufficient dividends to do that'\n                          if not stor8:\n                              revert with 0, 'sub failed'\n                          require stor8\n                          if 2 * stor8 / stor8 != 2:\n                              revert with 0, 'mul failed'\n                          if 10000000000 * 10^18 > 2 * stor8:\n                              revert with 0, 'sub failed'\n                          if (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) / 80000000000 * 10^18 != balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - ((balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1):\n                              revert with 0, 'mul failed'\n                          if not (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1):\n                              if (2 * stor8) - 10000000000 * 10^18:\n                                  require (2 * stor8) - 10000000000 * 10^18\n                                  if (-20000000000 * 10^18 * 2 * stor8) + (2 * stor8 * 2 * stor8) + 0x4140c78940f6a24fdffc78873d4490d2100000000000000 / (2 * stor8) - 10000000000 * 10^18 != (2 * stor8) - 10000000000 * 10^18:\n                                      revert with 0, 'mul failed'\n                          else:\n                              require (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1)\n                              if (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_512) + (0xe0352f62a19e306ed50b2037ad2000000000000 * balanceOf[caller].field_768) + (0xe0352f62a19e306ed50b2037ad2000000000000 * 0 / totalSupply) - (0xe0352f62a19e306ed50b2037ad2000000000000 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) / (80000000000 * 10^18 * balanceOf[caller].field_512) + (80000000000 * 10^18 * balanceOf[caller].field_768) + (80000000000 * 10^18 * 0 / totalSupply) - (80000000000 * 10^18 * (balanceOf[caller].field_512 * stor0) + (balanceOf[caller].field_768 * stor0) + (0 / totalSupply * stor0) / stor1) != 10^18:\n                                  revert with 0, 'mul failed'\n                              if (2 * stor8) - 10000000000 * 10^18:\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef exit(): # not payable\n  if balanceOf[caller].field_256 <= 0:\n      if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n          revert with 0, 'add failed'\n      require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n      if totalSupply <= 0:\n          if balanceOf[caller].field_1024 >\u2032 0:\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                  revert with 0, 'sub failed'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                  revert with 0, 'You have no dividends'\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n              call caller with:\n                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              log Withdrawal(\n                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                    uint256 _type=block.timestamp,\n                    uint256 amount=caller)\n          else:\n              if balanceOf[caller].field_1024 >=\u2032 0:\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n              else:\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                      revert with 0, 'add failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n      else:\n          if not stor10:\n              require totalSupply\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                  revert with 0, 'add failed'\n              if balanceOf[caller].field_1024 >\u2032 0:\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                      revert with 0, 'sub failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n              else:\n                  if balanceOf[caller].field_1024 >=\u2032 0:\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                  else:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n          else:\n              require stor10\n              if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                  revert with 0, 'mul failed'\n              require totalSupply\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                  revert with 0, 'add failed'\n              if balanceOf[caller].field_1024 >\u2032 0:\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                      revert with 0, 'sub failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n              else:\n                  if balanceOf[caller].field_1024 >=\u2032 0:\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                  else:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n      stop\n  if balanceOf[caller].field_256 > balanceOf[caller].field_256:\n      revert with 0, 'You have not enough tokens'\n  if 10000000000 * 10^18 > stor8:\n      revert with 0, 'sub failed'\n  if 10000000000 * 10^18 * balanceOf[caller].field_256 / 10000000000 * 10^18 != balanceOf[caller].field_256:\n      revert with 0, 'mul failed'\n  if stor8 < stor8 - 10000000000 * 10^18:\n      revert with 0, 'add failed'\n  if 10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 > stor8:\n      revert with 0, 'sub failed'\n  if (2 * stor8) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18) < stor8:\n      revert with 0, 'add failed'\n  if not (2 * stor8) + -(10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18) - 10000000000 * 10^18:\n      revert with 0, 'Insufficient tokens to do that'\n  require (2 * stor8) + -(10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18) - 10000000000 * 10^18\n  if (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / (2 * stor8) + -(10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18) - 10000000000 * 10^18 != balanceOf[caller].field_256:\n      revert with 0, 'mul failed'\n  if not (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18:\n      revert with 0, 'Insufficient tokens to do that'\n  stor8 -= 10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18\n  require (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18\n  if (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 != stor2:\n      revert with 0, 'mul failed'\n  require stor3\n  if (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3 > (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18:\n      revert with 0, 'sub failed'\n  if not (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3:\n      revert with 0, 'Insufficient tokens to do that'\n  if totalSupply != balanceOf[caller].field_256:\n      if balanceOf[caller].field_256 > totalSupply:\n          revert with 0, 'sub failed'\n      if not stor10:\n          require totalSupply\n          stor10 = 0 / totalSupply\n          if balanceOf[caller].field_256 > totalSupply:\n              revert with 0, 'sub failed'\n          totalSupply -= balanceOf[caller].field_256\n          if balanceOf[caller].field_256 > balanceOf[caller].field_256:\n              revert with 0, 'sub failed'\n          balanceOf[caller].field_256 = 0\n          if totalSupply <= 0:\n              if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n              if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                  revert with 0, 'add failed'\n              stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n              log Selling(\n                    address addr=balanceOf[caller].field_256,\n                    uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                    uint256 funds=stor8 / 10^18,\n                    uint256 price=block.timestamp,\n                    uint256 time=caller)\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                  revert with 0, 'add failed'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n              if totalSupply <= 0:\n                  if balanceOf[caller].field_1024 >\u2032 0:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'sub failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                  else:\n                      if balanceOf[caller].field_1024 >=\u2032 0:\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n              else:\n                  if not stor10:\n                      require totalSupply\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_1024 >=\u2032 0:\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                  else:\n                      require stor10\n                      if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                          revert with 0, 'mul failed'\n                      require totalSupply\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_1024 >=\u2032 0:\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n              stop\n          if not balanceOf[caller].field_256:\n              require totalSupply\n              if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'sub failed'\n              balanceOf[caller].field_1024 -= 0 / totalSupply\n              if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n              if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                  revert with 0, 'add failed'\n              stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n              log Selling(\n                    address addr=balanceOf[caller].field_256,\n                    uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                    uint256 funds=stor8 / 10^18,\n                    uint256 price=block.timestamp,\n                    uint256 time=caller)\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                  revert with 0, 'add failed'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n              if totalSupply <= 0:\n                  if balanceOf[caller].field_1024 >\u2032 0:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'sub failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                  else:\n                      if balanceOf[caller].field_1024 >=\u2032 0:\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n              else:\n                  if not stor10:\n                      require totalSupply\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_1024 >=\u2032 0:\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                  else:\n                      require stor10\n                      if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                          revert with 0, 'mul failed'\n                      require totalSupply\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_1024 >=\u2032 0:\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n              stop\n          require balanceOf[caller].field_256\n          if balanceOf[caller].field_256 * stor10 / balanceOf[caller].field_256 != stor10:\n              revert with 0, 'mul failed'\n          require totalSupply\n          if balanceOf[caller].field_1024 - (balanceOf[caller].field_256 * stor10 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n              revert with 0, 'sub failed'\n          balanceOf[caller].field_1024 -= balanceOf[caller].field_256 * stor10 / totalSupply\n          if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n              revert with 0, 'add failed'\n          balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n          if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n              revert with 0, 'add failed'\n          stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n          log Selling(\n                address addr=balanceOf[caller].field_256,\n                uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                uint256 funds=stor8 / 10^18,\n                uint256 price=block.timestamp,\n                uint256 time=caller)\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n              revert with 0, 'add failed'\n          require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n          if totalSupply <= 0:\n              if balanceOf[caller].field_1024 >\u2032 0:\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                      revert with 0, 'sub failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n              else:\n                  if balanceOf[caller].field_1024 >=\u2032 0:\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                  else:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n              stop\n          if not stor10:\n              require totalSupply\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                  revert with 0, 'add failed'\n              if balanceOf[caller].field_1024 >\u2032 0:\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                      revert with 0, 'sub failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n              else:\n                  if balanceOf[caller].field_1024 >=\u2032 0:\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                  else:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n              stop\n          require stor10\n          if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n              revert with 0, 'mul failed'\n          require totalSupply\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n              revert with 0, 'add failed'\n          if balanceOf[caller].field_1024 >\u2032 0:\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                  revert with 0, 'sub failed'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                  revert with 0, 'You have no dividends'\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n              call caller with:\n                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              log Withdrawal(\n                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                    uint256 _type=block.timestamp,\n                    uint256 amount=caller)\n              stop\n          if balanceOf[caller].field_1024 >=\u2032 0:\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                  revert with 0, 'You have no dividends'\n              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n              call caller with:\n                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              log Withdrawal(\n                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                    uint256 _type=block.timestamp,\n                    uint256 amount=caller)\n              stop\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n              revert with 0, 'add failed'\n          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n              revert with 0, 'You have no dividends'\n          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n              revert with 0, 'add failed'\n          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n          call caller with:\n             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n               gas 2300 * is_zero(value) wei\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          log Withdrawal(\n                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                uint256 _type=block.timestamp,\n                uint256 amount=caller)\n      else:\n          require stor10\n          if (totalSupply * stor10) - (balanceOf[caller].field_256 * stor10) / stor10 != totalSupply - balanceOf[caller].field_256:\n              revert with 0, 'mul failed'\n          require totalSupply\n          stor10 = (totalSupply * stor10) - (balanceOf[caller].field_256 * stor10) / totalSupply\n          if balanceOf[caller].field_256 > totalSupply:\n              revert with 0, 'sub failed'\n          totalSupply -= balanceOf[caller].field_256\n          if balanceOf[caller].field_256 > balanceOf[caller].field_256:\n              revert with 0, 'sub failed'\n          balanceOf[caller].field_256 = 0\n          if totalSupply <= 0:\n              if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n              if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                  revert with 0, 'add failed'\n              stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n              log Selling(\n                    address addr=balanceOf[caller].field_256,\n                    uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                    uint256 funds=stor8 / 10^18,\n                    uint256 price=block.timestamp,\n                    uint256 time=caller)\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                  revert with 0, 'add failed'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n              if totalSupply <= 0:\n                  if balanceOf[caller].field_1024 >\u2032 0:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'sub failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                  else:\n                      if balanceOf[caller].field_1024 >=\u2032 0:\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n              else:\n                  if not stor10:\n                      require totalSupply\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_1024 >=\u2032 0:\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                  else:\n                      require stor10\n                      if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                          revert with 0, 'mul failed'\n                      require totalSupply\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_1024 >=\u2032 0:\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n              stop\n          if not balanceOf[caller].field_256:\n              require totalSupply\n              if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'sub failed'\n              balanceOf[caller].field_1024 -= 0 / totalSupply\n              if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n              if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                  revert with 0, 'add failed'\n              stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n              log Selling(\n                    address addr=balanceOf[caller].field_256,\n                    uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                    uint256 funds=stor8 / 10^18,\n                    uint256 price=block.timestamp,\n                    uint256 time=caller)\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                  revert with 0, 'add failed'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n              if totalSupply <= 0:\n                  if balanceOf[caller].field_1024 >\u2032 0:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'sub failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                  else:\n                      if balanceOf[caller].field_1024 >=\u2032 0:\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                  stop\n              if not stor10:\n                  require totalSupply\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                      revert with 0, 'add failed'\n                  if balanceOf[caller].field_1024 >\u2032 0:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                          revert with 0, 'sub failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                  else:\n                      if balanceOf[caller].field_1024 >=\u2032 0:\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                              revert with 0, 'add failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                  stop\n              require stor10\n              if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                  revert with 0, 'mul failed'\n              require totalSupply\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                  revert with 0, 'add failed'\n              if balanceOf[caller].field_1024 >\u2032 0:\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                      revert with 0, 'sub failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n                  stop\n              if balanceOf[caller].field_1024 >=\u2032 0:\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n                  stop\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                  revert with 0, 'add failed'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                  revert with 0, 'You have no dividends'\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n              call caller with:\n                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                   gas 2300 * is_zero(value) wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              log Withdrawal(\n                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                    uint256 _type=block.timestamp,\n                    uint256 amount=caller)\n          else:\n              require balanceOf[caller].field_256\n              if balanceOf[caller].field_256 * stor10 / balanceOf[caller].field_256 != stor10:\n                  revert with 0, 'mul failed'\n              require totalSupply\n              if balanceOf[caller].field_1024 - (balanceOf[caller].field_256 * stor10 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                  revert with 0, 'sub failed'\n              balanceOf[caller].field_1024 -= balanceOf[caller].field_256 * stor10 / totalSupply\n              if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                  revert with 0, 'add failed'\n              balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n              if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                  revert with 0, 'add failed'\n              stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n              log Selling(\n                    address addr=balanceOf[caller].field_256,\n                    uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                    uint256 funds=stor8 / 10^18,\n                    uint256 price=block.timestamp,\n                    uint256 time=caller)\n              if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                  revert with 0, 'add failed'\n              require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n              if totalSupply <= 0:\n                  if balanceOf[caller].field_1024 >\u2032 0:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'sub failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                  else:\n                      if balanceOf[caller].field_1024 >=\u2032 0:\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                  stop\n              if not stor10:\n                  require totalSupply\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                      revert with 0, 'add failed'\n                  if balanceOf[caller].field_1024 >\u2032 0:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                          revert with 0, 'sub failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                      stop\n                  if balanceOf[caller].field_1024 >=\u2032 0:\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                      stop\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                      revert with 0, 'add failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n              else:\n                  require stor10\n                  if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                      revert with 0, 'mul failed'\n                  require totalSupply\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                      revert with 0, 'add failed'\n                  if balanceOf[caller].field_1024 <=\u2032 0:\n                      if balanceOf[caller].field_1024 >=\u2032 0:\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                          stop\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                  else:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                          revert with 0, 'sub failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n  else:\n      if not stor10:\n          require totalSupply\n          if balanceOf[caller].field_256 > totalSupply:\n              revert with 0, 'sub failed'\n          if stor10:\n              require stor10\n              if (totalSupply * stor10) - (balanceOf[caller].field_256 * stor10) / stor10 != totalSupply - balanceOf[caller].field_256:\n                  revert with 0, 'mul failed'\n              require totalSupply\n              stor10 = (totalSupply * stor10) - (balanceOf[caller].field_256 * stor10) / totalSupply\n              if balanceOf[caller].field_256 > totalSupply:\n                  revert with 0, 'sub failed'\n              totalSupply -= balanceOf[caller].field_256\n              if balanceOf[caller].field_256 > balanceOf[caller].field_256:\n                  revert with 0, 'sub failed'\n              balanceOf[caller].field_256 = 0\n              if totalSupply <= 0:\n                  if not 0 / totalSupply:\n                      if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                      if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                          revert with 0, 'add failed'\n                      stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                      log Selling(\n                            address addr=balanceOf[caller].field_256,\n                            uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                            uint256 funds=stor8 / 10^18,\n                            uint256 price=block.timestamp,\n                            uint256 time=caller)\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                      if totalSupply <= 0:\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_1024 >=\u2032 0:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                      else:\n                          if not stor10:\n                              require totalSupply\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'add failed'\n                              if balanceOf[caller].field_1024 >\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                      revert with 0, 'sub failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_1024 >=\u2032 0:\n                                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                          revert with 0, 'You have no dividends'\n                                      if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                          revert with 0, 'add failed'\n                                      balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                      call caller with:\n                                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                           gas 2300 * is_zero(value) wei\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      log Withdrawal(\n                                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                            uint256 _type=block.timestamp,\n                                            uint256 amount=caller)\n                                  else:\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                          revert with 0, 'add failed'\n                                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                          revert with 0, 'You have no dividends'\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                          revert with 0, 'add failed'\n                                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                      call caller with:\n                                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                           gas 2300 * is_zero(value) wei\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      log Withdrawal(\n                                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                            uint256 _type=block.timestamp,\n                                            uint256 amount=caller)\n                          else:\n                              require stor10\n                              if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                                  revert with 0, 'mul failed'\n                              require totalSupply\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'add failed'\n                              if balanceOf[caller].field_1024 >\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                      revert with 0, 'sub failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_1024 >=\u2032 0:\n                                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                                          revert with 0, 'You have no dividends'\n                                      if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                          revert with 0, 'add failed'\n                                      balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                                      call caller with:\n                                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                                           gas 2300 * is_zero(value) wei\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      log Withdrawal(\n                                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                                            uint256 _type=block.timestamp,\n                                            uint256 amount=caller)\n                                  else:\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                          revert with 0, 'add failed'\n                                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                          revert with 0, 'You have no dividends'\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                          revert with 0, 'add failed'\n                                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                                      call caller with:\n                                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                                           gas 2300 * is_zero(value) wei\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      log Withdrawal(\n                                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                            uint256 _type=block.timestamp,\n                                            uint256 amount=caller)\n                      stop\n                  if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= 0 / totalSupply\n                  if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                  if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                      revert with 0, 'add failed'\n                  stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                  log Selling(\n                        address addr=balanceOf[caller].field_256,\n                        uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                        uint256 funds=stor8 / 10^18,\n                        uint256 price=block.timestamp,\n                        uint256 time=caller)\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                      revert with 0, 'add failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                  if totalSupply <= 0:\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_1024 >=\u2032 0:\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                      stop\n                  if not stor10:\n                      require totalSupply\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                          stop\n                      if balanceOf[caller].field_1024 >=\u2032 0:\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                          stop\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                  else:\n                      require stor10\n                      if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                          revert with 0, 'mul failed'\n                      require totalSupply\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      if balanceOf[caller].field_1024 <=\u2032 0:\n                          if balanceOf[caller].field_1024 <\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                          stop\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                          revert with 0, 'sub failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n              else:\n                  if balanceOf[caller].field_256:\n                      require balanceOf[caller].field_256\n                      if balanceOf[caller].field_256 * stor10 / balanceOf[caller].field_256 != stor10:\n                          revert with 0, 'mul failed'\n                      require totalSupply\n                      if balanceOf[caller].field_1024 - (balanceOf[caller].field_256 * stor10 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'sub failed'\n                      balanceOf[caller].field_1024 -= balanceOf[caller].field_256 * stor10 / totalSupply\n                      if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                      if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                          revert with 0, 'add failed'\n                      stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                      log Selling(\n                            address addr=balanceOf[caller].field_256,\n                            uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                            uint256 funds=stor8 / 10^18,\n                            uint256 price=block.timestamp,\n                            uint256 time=caller)\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                      if totalSupply <= 0:\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_1024 >=\u2032 0:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                          stop\n                      if stor10:\n                          require stor10\n                          if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                      revert with 0, 'add failed'\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                      else:\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                       gas 2300 * is_zero(value) wei\n                  else:\n                      require totalSupply\n                      if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'sub failed'\n                      balanceOf[caller].field_1024 -= 0 / totalSupply\n                      if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                      if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                          revert with 0, 'add failed'\n                      stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                      log Selling(\n                            address addr=balanceOf[caller].field_256,\n                            uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                            uint256 funds=stor8 / 10^18,\n                            uint256 price=block.timestamp,\n                            uint256 time=caller)\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                      if totalSupply <= 0:\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_1024 >=\u2032 0:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                          stop\n                      if not stor10:\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                      else:\n                          require stor10\n                          if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                                       gas 2300 * is_zero(value) wei\n          else:\n              require totalSupply\n              stor10 = 0 / totalSupply\n              if balanceOf[caller].field_256 > totalSupply:\n                  revert with 0, 'sub failed'\n              totalSupply -= balanceOf[caller].field_256\n              if balanceOf[caller].field_256 > balanceOf[caller].field_256:\n                  revert with 0, 'sub failed'\n              balanceOf[caller].field_256 = 0\n              if totalSupply <= 0:\n                  if not 0 / totalSupply:\n                      if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                      if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                          revert with 0, 'add failed'\n                      stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                      log Selling(\n                            address addr=balanceOf[caller].field_256,\n                            uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                            uint256 funds=stor8 / 10^18,\n                            uint256 price=block.timestamp,\n                            uint256 time=caller)\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                      if totalSupply <= 0:\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_1024 >=\u2032 0:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                      else:\n                          if not stor10:\n                              require totalSupply\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'add failed'\n                              if balanceOf[caller].field_1024 >\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                      revert with 0, 'sub failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_1024 >=\u2032 0:\n                                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                          revert with 0, 'You have no dividends'\n                                      if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                          revert with 0, 'add failed'\n                                      balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                      call caller with:\n                                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                           gas 2300 * is_zero(value) wei\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      log Withdrawal(\n                                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                            uint256 _type=block.timestamp,\n                                            uint256 amount=caller)\n                                  else:\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                          revert with 0, 'add failed'\n                                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                          revert with 0, 'You have no dividends'\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                          revert with 0, 'add failed'\n                                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                      call caller with:\n                                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                           gas 2300 * is_zero(value) wei\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      log Withdrawal(\n                                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                            uint256 _type=block.timestamp,\n                                            uint256 amount=caller)\n                          else:\n                              require stor10\n                              if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                                  revert with 0, 'mul failed'\n                              require totalSupply\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'add failed'\n                              if balanceOf[caller].field_1024 >\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                      revert with 0, 'sub failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_1024 >=\u2032 0:\n                                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                                          revert with 0, 'You have no dividends'\n                                      if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                          revert with 0, 'add failed'\n                                      balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                                      call caller with:\n                                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                                           gas 2300 * is_zero(value) wei\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      log Withdrawal(\n                                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                                            uint256 _type=block.timestamp,\n                                            uint256 amount=caller)\n                                  else:\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                          revert with 0, 'add failed'\n                                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                          revert with 0, 'You have no dividends'\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                          revert with 0, 'add failed'\n                                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                                      call caller with:\n                                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                                           gas 2300 * is_zero(value) wei\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      log Withdrawal(\n                                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                            uint256 _type=block.timestamp,\n                                            uint256 amount=caller)\n                      stop\n                  if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= 0 / totalSupply\n                  if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                  if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                      revert with 0, 'add failed'\n                  stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                  log Selling(\n                        address addr=balanceOf[caller].field_256,\n                        uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                        uint256 funds=stor8 / 10^18,\n                        uint256 price=block.timestamp,\n                        uint256 time=caller)\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                      revert with 0, 'add failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                  if totalSupply <= 0:\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_1024 >=\u2032 0:\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                      stop\n                  if not stor10:\n                      require totalSupply\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_1024 >=\u2032 0:\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                      stop\n                  require stor10\n                  if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                      revert with 0, 'mul failed'\n                  require totalSupply\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                      revert with 0, 'add failed'\n                  if balanceOf[caller].field_1024 >\u2032 0:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                          revert with 0, 'sub failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                      stop\n                  if balanceOf[caller].field_1024 >=\u2032 0:\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                      stop\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                      revert with 0, 'add failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n              else:\n                  if not balanceOf[caller].field_256:\n                      require totalSupply\n                      if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'sub failed'\n                      balanceOf[caller].field_1024 -= 0 / totalSupply\n                      if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                      if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                          revert with 0, 'add failed'\n                      stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                      log Selling(\n                            address addr=balanceOf[caller].field_256,\n                            uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                            uint256 funds=stor8 / 10^18,\n                            uint256 price=block.timestamp,\n                            uint256 time=caller)\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                      if totalSupply <= 0:\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_1024 >=\u2032 0:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                          stop\n                      if not stor10:\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 <=\u2032 0:\n                              if balanceOf[caller].field_1024 >=\u2032 0:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                                  stop\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                          else:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                      else:\n                          require stor10\n                          if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                  else:\n                      require balanceOf[caller].field_256\n                      if balanceOf[caller].field_256 * stor10 / balanceOf[caller].field_256 != stor10:\n                          revert with 0, 'mul failed'\n                      require totalSupply\n                      if balanceOf[caller].field_1024 - (balanceOf[caller].field_256 * stor10 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'sub failed'\n                      balanceOf[caller].field_1024 -= balanceOf[caller].field_256 * stor10 / totalSupply\n                      if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                      if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                          revert with 0, 'add failed'\n                      stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                      log Selling(\n                            address addr=balanceOf[caller].field_256,\n                            uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                            uint256 funds=stor8 / 10^18,\n                            uint256 price=block.timestamp,\n                            uint256 time=caller)\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                      if totalSupply <= 0:\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_1024 >=\u2032 0:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                          stop\n                      if not stor10:\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                      else:\n                          require stor10\n                          if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                                       gas 2300 * is_zero(value) wei\n      else:\n          require stor10\n          if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n              revert with 0, 'mul failed'\n          require totalSupply\n          if balanceOf[caller].field_256 > totalSupply:\n              revert with 0, 'sub failed'\n          if not stor10:\n              require totalSupply\n              stor10 = 0 / totalSupply\n              if balanceOf[caller].field_256 > totalSupply:\n                  revert with 0, 'sub failed'\n              totalSupply -= balanceOf[caller].field_256\n              if balanceOf[caller].field_256 > balanceOf[caller].field_256:\n                  revert with 0, 'sub failed'\n              balanceOf[caller].field_256 = 0\n              if totalSupply <= 0:\n                  if not stor10 * balanceOf[caller].field_256 / totalSupply:\n                      if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                      if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                          revert with 0, 'add failed'\n                      stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                      log Selling(\n                            address addr=balanceOf[caller].field_256,\n                            uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                            uint256 funds=stor8 / 10^18,\n                            uint256 price=block.timestamp,\n                            uint256 time=caller)\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                      if totalSupply <= 0:\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_1024 >=\u2032 0:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                      else:\n                          if not stor10:\n                              require totalSupply\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'add failed'\n                              if balanceOf[caller].field_1024 >\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                      revert with 0, 'sub failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_1024 >=\u2032 0:\n                                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                          revert with 0, 'You have no dividends'\n                                      if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                          revert with 0, 'add failed'\n                                      balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                      call caller with:\n                                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                           gas 2300 * is_zero(value) wei\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      log Withdrawal(\n                                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                            uint256 _type=block.timestamp,\n                                            uint256 amount=caller)\n                                  else:\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                          revert with 0, 'add failed'\n                                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                          revert with 0, 'You have no dividends'\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                          revert with 0, 'add failed'\n                                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                      call caller with:\n                                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                           gas 2300 * is_zero(value) wei\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      log Withdrawal(\n                                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                            uint256 _type=block.timestamp,\n                                            uint256 amount=caller)\n                          else:\n                              require stor10\n                              if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                                  revert with 0, 'mul failed'\n                              require totalSupply\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'add failed'\n                              if balanceOf[caller].field_1024 >\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                      revert with 0, 'sub failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_1024 >=\u2032 0:\n                                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                                          revert with 0, 'You have no dividends'\n                                      if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                          revert with 0, 'add failed'\n                                      balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                                      call caller with:\n                                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                                           gas 2300 * is_zero(value) wei\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      log Withdrawal(\n                                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                                            uint256 _type=block.timestamp,\n                                            uint256 amount=caller)\n                                  else:\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                          revert with 0, 'add failed'\n                                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                          revert with 0, 'You have no dividends'\n                                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                          revert with 0, 'add failed'\n                                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                                      call caller with:\n                                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                                           gas 2300 * is_zero(value) wei\n                                      if not ext_call.success:\n                                          revert with ext_call.return_data[0 len return_data.size]\n                                      log Withdrawal(\n                                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                                            uint256 _type=block.timestamp,\n                                            uint256 amount=caller)\n                      stop\n                  if balanceOf[caller].field_1024 - (stor10 * balanceOf[caller].field_256 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= stor10 * balanceOf[caller].field_256 / totalSupply\n                  if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                  if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                      revert with 0, 'add failed'\n                  stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                  log Selling(\n                        address addr=balanceOf[caller].field_256,\n                        uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                        uint256 funds=stor8 / 10^18,\n                        uint256 price=block.timestamp,\n                        uint256 time=caller)\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                      revert with 0, 'add failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                  if totalSupply <= 0:\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_1024 >=\u2032 0:\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                      stop\n                  if not stor10:\n                      require totalSupply\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                          stop\n                      if balanceOf[caller].field_1024 >=\u2032 0:\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                          stop\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                  else:\n                      require stor10\n                      if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                          revert with 0, 'mul failed'\n                      require totalSupply\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      if balanceOf[caller].field_1024 <=\u2032 0:\n                          if balanceOf[caller].field_1024 <\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                          stop\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                          revert with 0, 'sub failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n              else:\n                  if balanceOf[caller].field_256:\n                      require balanceOf[caller].field_256\n                      if balanceOf[caller].field_256 * stor10 / balanceOf[caller].field_256 != stor10:\n                          revert with 0, 'mul failed'\n                      require totalSupply\n                      if balanceOf[caller].field_1024 - (balanceOf[caller].field_256 * stor10 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'sub failed'\n                      balanceOf[caller].field_1024 -= balanceOf[caller].field_256 * stor10 / totalSupply\n                      if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                      if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                          revert with 0, 'add failed'\n                      stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                      log Selling(\n                            address addr=balanceOf[caller].field_256,\n                            uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                            uint256 funds=stor8 / 10^18,\n                            uint256 price=block.timestamp,\n                            uint256 time=caller)\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                      if totalSupply <= 0:\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_1024 >=\u2032 0:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                          stop\n                      if stor10:\n                          require stor10\n                          if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                      revert with 0, 'add failed'\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                      else:\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                       gas 2300 * is_zero(value) wei\n                  else:\n                      require totalSupply\n                      if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'sub failed'\n                      balanceOf[caller].field_1024 -= 0 / totalSupply\n                      if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                      if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                          revert with 0, 'add failed'\n                      stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                      log Selling(\n                            address addr=balanceOf[caller].field_256,\n                            uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                            uint256 funds=stor8 / 10^18,\n                            uint256 price=block.timestamp,\n                            uint256 time=caller)\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                      if totalSupply <= 0:\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_1024 >=\u2032 0:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                          stop\n                      if not stor10:\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                      else:\n                          require stor10\n                          if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                                       gas 2300 * is_zero(value) wei\n          else:\n              require stor10\n              if (totalSupply * stor10) - (balanceOf[caller].field_256 * stor10) / stor10 != totalSupply - balanceOf[caller].field_256:\n                  revert with 0, 'mul failed'\n              require totalSupply\n              stor10 = (totalSupply * stor10) - (balanceOf[caller].field_256 * stor10) / totalSupply\n              if balanceOf[caller].field_256 > totalSupply:\n                  revert with 0, 'sub failed'\n              totalSupply -= balanceOf[caller].field_256\n              if balanceOf[caller].field_256 > balanceOf[caller].field_256:\n                  revert with 0, 'sub failed'\n              balanceOf[caller].field_256 = 0\n              if totalSupply > 0:\n                  if not balanceOf[caller].field_256:\n                      require totalSupply\n                      if balanceOf[caller].field_1024 - (0 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'sub failed'\n                      balanceOf[caller].field_1024 -= 0 / totalSupply\n                      if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                      if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                          revert with 0, 'add failed'\n                      stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                      log Selling(\n                            address addr=balanceOf[caller].field_256,\n                            uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                            uint256 funds=stor8 / 10^18,\n                            uint256 price=block.timestamp,\n                            uint256 time=caller)\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                          revert with 0, 'add failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                      if totalSupply <= 0:\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_1024 >=\u2032 0:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                              else:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                       gas 2300 * is_zero(value) wei\n                                  if not ext_call.success:\n                                      revert with ext_call.return_data[0 len return_data.size]\n                                  log Withdrawal(\n                                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                        uint256 _type=block.timestamp,\n                                        uint256 amount=caller)\n                          stop\n                      if stor10:\n                          require stor10\n                          if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                      revert with 0, 'add failed'\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                      else:\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                      revert with 0, 'add failed'\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                                  if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                      revert with 0, 'add failed'\n                                  balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                                  call caller with:\n                                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                       gas 2300 * is_zero(value) wei\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require balanceOf[caller].field_256\n                  if balanceOf[caller].field_256 * stor10 / balanceOf[caller].field_256 != stor10:\n                      revert with 0, 'mul failed'\n                  require totalSupply\n                  if balanceOf[caller].field_1024 - (balanceOf[caller].field_256 * stor10 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= balanceOf[caller].field_256 * stor10 / totalSupply\n                  if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                  if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                      revert with 0, 'add failed'\n                  stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                  log Selling(\n                        address addr=balanceOf[caller].field_256,\n                        uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                        uint256 funds=stor8 / 10^18,\n                        uint256 price=block.timestamp,\n                        uint256 time=caller)\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                      revert with 0, 'add failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                  if totalSupply > 0:\n                      if not stor10:\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'sub failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                      revert with 0, 'add failed'\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                      revert with 0, 'You have no dividends'\n                      else:\n                          require stor10\n                          if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                              revert with 0, 'mul failed'\n                          require totalSupply\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          if balanceOf[caller].field_1024 >\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                  revert with 0, 'sub failed'\n                          else:\n                              if balanceOf[caller].field_1024 <\u2032 0:\n                                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                      revert with 0, 'add failed'\n                              else:\n                                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  if balanceOf[caller].field_1024 >\u2032 0:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'sub failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                  else:\n                      if balanceOf[caller].field_1024 >=\u2032 0:\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'add failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                  stop\n              if not stor10 * balanceOf[caller].field_256 / totalSupply:\n                  if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                  if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                      revert with 0, 'add failed'\n                  stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                  log Selling(\n                        address addr=balanceOf[caller].field_256,\n                        uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                        uint256 funds=stor8 / 10^18,\n                        uint256 price=block.timestamp,\n                        uint256 time=caller)\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                      revert with 0, 'add failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                  if totalSupply <= 0:\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_1024 >=\u2032 0:\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                      stop\n                  if not stor10:\n                      require totalSupply\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_1024 >=\u2032 0:\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                      stop\n                  require stor10\n                  if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                      revert with 0, 'mul failed'\n                  require totalSupply\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                      revert with 0, 'add failed'\n                  if balanceOf[caller].field_1024 >\u2032 0:\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                          revert with 0, 'sub failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                      stop\n                  if balanceOf[caller].field_1024 >=\u2032 0:\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                      stop\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                      revert with 0, 'add failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                      revert with 0, 'You have no dividends'\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                  call caller with:\n                     value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 wei\n                       gas 2300 * is_zero(value) wei\n                  if not ext_call.success:\n                      revert with ext_call.return_data[0 len return_data.size]\n                  log Withdrawal(\n                        address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024,\n                        uint256 _type=block.timestamp,\n                        uint256 amount=caller)\n              else:\n                  if balanceOf[caller].field_1024 - (stor10 * balanceOf[caller].field_256 / totalSupply) >\u2032 balanceOf[caller].field_1024:\n                      revert with 0, 'sub failed'\n                  balanceOf[caller].field_1024 -= stor10 * balanceOf[caller].field_256 / totalSupply\n                  if balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < balanceOf[caller].field_512:\n                      revert with 0, 'add failed'\n                  balanceOf[caller].field_512 = balanceOf[caller].field_512 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18) - ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3)\n                  if stor10 + ((-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3) < stor10:\n                      revert with 0, 'add failed'\n                  stor10 += (-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18 * stor2 / stor3\n                  log Selling(\n                        address addr=balanceOf[caller].field_256,\n                        uint256 tokens=(-10000000000 * 10^18 * balanceOf[caller].field_256) + (2 * stor8 * balanceOf[caller].field_256) - (10000000000 * 10^18 * balanceOf[caller].field_256 / 10^18 * balanceOf[caller].field_256) / 2 * 10^18 / 10^18,\n                        uint256 funds=stor8 / 10^18,\n                        uint256 price=block.timestamp,\n                        uint256 time=caller)\n                  if balanceOf[caller].field_512 + balanceOf[caller].field_768 < balanceOf[caller].field_512:\n                      revert with 0, 'add failed'\n                  require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                  if totalSupply <= 0:\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                      else:\n                          if balanceOf[caller].field_1024 >=\u2032 0:\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                          else:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024 wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 - balanceOf[caller].field_1024,\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n                      stop\n                  if not stor10:\n                      require totalSupply\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      if balanceOf[caller].field_1024 <=\u2032 0:\n                          if balanceOf[caller].field_1024 <\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                          balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                          call caller with:\n                             value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) wei\n                               gas 2300 * is_zero(value) wei\n                          if not ext_call.success:\n                              revert with ext_call.return_data[0 len return_data.size]\n                          log Withdrawal(\n                                address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply),\n                                uint256 _type=block.timestamp,\n                                uint256 amount=caller)\n                          stop\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply):\n                          revert with 0, 'sub failed'\n                      require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                          revert with 0, 'You have no dividends'\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                          revert with 0, 'add failed'\n                      balanceOf[caller].field_1024 = balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply)\n                      call caller with:\n                         value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024 wei\n                           gas 2300 * is_zero(value) wei\n                      if not ext_call.success:\n                          revert with ext_call.return_data[0 len return_data.size]\n                      log Withdrawal(\n                            address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (0 / totalSupply) - balanceOf[caller].field_1024,\n                            uint256 _type=block.timestamp,\n                            uint256 amount=caller)\n                  else:\n                      require stor10\n                      if stor10 * balanceOf[caller].field_256 / stor10 != balanceOf[caller].field_256:\n                          revert with 0, 'mul failed'\n                      require totalSupply\n                      if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768:\n                          revert with 0, 'add failed'\n                      if balanceOf[caller].field_1024 >\u2032 0:\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                              revert with 0, 'sub failed'\n                          require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                              revert with 0, 'You have no dividends'\n                          if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                              revert with 0, 'add failed'\n                      else:\n                          if balanceOf[caller].field_1024 <\u2032 0:\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <\u2032 balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply):\n                                  revert with 0, 'add failed'\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) - balanceOf[caller].field_1024 <= 0:\n                                  revert with 0, 'You have no dividends'\n                          else:\n                              require balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) >=\u2032 0\n                              if balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <= 0:\n                                  revert with 0, 'You have no dividends'\n                              if balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) <\u2032 balanceOf[caller].field_1024:\n                                  revert with 0, 'add failed'\n                              balanceOf[caller].field_1024 = balanceOf[caller].field_1024 + balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply)\n                              call caller with:\n                                 value balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply) wei\n                                   gas 2300 * is_zero(value) wei\n                              if not ext_call.success:\n                                  revert with ext_call.return_data[0 len return_data.size]\n                              log Withdrawal(\n                                    address addr=balanceOf[caller].field_512 + balanceOf[caller].field_768 + (stor10 * balanceOf[caller].field_256 / totalSupply),\n                                    uint256 _type=block.timestamp,\n                                    uint256 amount=caller)\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 217042 tokens. Please reduce the length of the messages."
}