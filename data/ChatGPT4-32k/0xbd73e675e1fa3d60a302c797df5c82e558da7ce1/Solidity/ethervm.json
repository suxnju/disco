{
	"address": "0xbd73e675e1fa3d60a302c797df5c82e558da7ce1",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity code for the contract:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping(address => uint256) balances;\n    mapping(address => address) public referrer;\n    uint256 public totalSupply;\n    uint256 public buyPrice;\n    uint256 public sellPrice;\n    string public symbol;\n    string public name;\n    uint8 public decimals;\n\n    function buy(address _referrer) public payable {\n        require(msg.value > 0, \"Insufficient funds to buy tokens\");\n        uint256 tokens = msg.value * buyPrice;\n        require(tokens <= balances[this], \"Insufficient contract tokens\");\n        referrer[msg.sender] = _referrer;\n        balances[this] -= tokens;\n        balances[msg.sender] += tokens;\n        totalSupply += tokens;\n    }\n\n    function sell(uint256 _amount) public {\n        require(balances[msg.sender] >= _amount, \"Insufficient user tokens\");\n        uint256 contractEther = address(this).balance;\n        require(contractEther >= _amount * sellPrice, \"Insufficient contract Ether\");\n        msg.sender.transfer(_amount * sellPrice);\n        balances[msg.sender] -= _amount;\n        balances[this] += _amount;\n        totalSupply -= _amount;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value, \"Insufficient user tokens\");\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function dividendsOf(address _owner) public view returns (uint256 dividends) {\n        return balances[_owner] * sellPrice;\n    }\n\n    function withdraw() public {\n        uint256 dividends = dividendsOf(msg.sender);\n        require(dividends > 0, \"No dividends available\");\n        balances[msg.sender] -= dividends;\n        msg.sender.transfer(dividends);\n    }\n\n    function reinvest() public {\n        uint256 dividends = dividendsOf(msg.sender);\n        require(dividends > 0, \"No dividends available\");\n        balances[msg.sender] -= dividends;\n        uint256 tokens = dividends * buyPrice;\n        balances[msg.sender] += tokens;\n    }\n\n    function exit() public {\n        sell(balances[msg.sender]);\n        withdraw();\n    }\n\n    function donate() public payable {}\n\n    function() public payable {\n        buy(referrer[msg.sender]);\n    }\n}\n```\n\nPlease note that, this is a simplified version of the contract and many important details (like event logs, function visibility, and overflow/underflow protections etc.) are not included. This contract also lacks a constructor function to initialize the contract state variables.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473346,
	"id": "chatcmpl-8Mv5OT1o49QEDLZybyAjBmqojaLJY",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00F0:\n            var var0 = 0x0134;\n            var var1 = 0x012f;\n            var temp0 = msg.data.length;\n            var temp1 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n            var var2 = temp1;\n            memory[var2:var2 + 0x20] = temp0;\n            memory[var2 + 0x20:var2 + 0x20 + temp0] = msg.data[0x00:0x00 + temp0];\n            var1 = func_0567(var2);\n            func_012F(var1);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0177;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = dividendsOf(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var1;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01a2;\n                var2 = name();\n                var temp4 = memory[0x40:0x60];\n                var var3 = temp4;\n                var var4 = var3;\n                var temp5 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp5 - var4;\n                var temp6 = var2;\n                memory[temp5:temp5 + 0x20] = memory[temp6:temp6 + 0x20];\n                var var5 = temp5 + 0x20;\n                var var7 = memory[temp6:temp6 + 0x20];\n                var var6 = temp6 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_01E2:\n                    var temp7 = var7;\n                    var5 = temp7 + var5;\n                    var6 = temp7 & 0x1f;\n                \n                    if (!var6) {\n                        var temp8 = memory[0x40:0x60];\n                        return memory[temp8:temp8 + var5 - temp8];\n                    } else {\n                        var temp9 = var6;\n                        var temp10 = var5 - temp9;\n                        memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                        var temp11 = memory[0x40:0x60];\n                        return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n                    }\n                } else {\n                label_01D0:\n                    var temp12 = var11;\n                    memory[var9 + temp12:var9 + temp12 + 0x20] = memory[var10 + temp12:var10 + temp12 + 0x20];\n                    var11 = temp12 + 0x20;\n                \n                    if (var11 >= var8) { goto label_01E2; }\n                    else { goto label_01D0; }\n                }\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0232;\n                var1 = totalSupply();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x025d;\n                var2 = decimals();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0xff;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028e;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a5;\n                var1 = sellPrice();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var1;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02fc;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0327;\n                var1 = buyPrice();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0352;\n                var2 = symbol();\n                var temp23 = memory[0x40:0x60];\n                var3 = temp23;\n                var4 = var3;\n                var temp24 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp24 - var4;\n                var temp25 = var2;\n                memory[temp24:temp24 + 0x20] = memory[temp25:temp25 + 0x20];\n                var5 = temp24 + 0x20;\n                var7 = memory[temp25:temp25 + 0x20];\n                var6 = temp25 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0392:\n                    var temp26 = var7;\n                    var5 = temp26 + var5;\n                    var6 = temp26 & 0x1f;\n                \n                    if (!var6) {\n                        var temp27 = memory[0x40:0x60];\n                        return memory[temp27:temp27 + var5 - temp27];\n                    } else {\n                        var temp28 = var6;\n                        var temp29 = var5 - temp28;\n                        memory[temp29:temp29 + 0x20] = ~(0x0100 ** (0x20 - temp28) - 0x01) & memory[temp29:temp29 + 0x20];\n                        var temp30 = memory[0x40:0x60];\n                        return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n                    }\n                } else {\n                label_0380:\n                    var temp31 = var11;\n                    memory[var9 + temp31:var9 + temp31 + 0x20] = memory[var10 + temp31:var10 + temp31 + 0x20];\n                    var11 = temp31 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0392; }\n                    else { goto label_0380; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0418;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp32 = memory[0x40:0x60];\n                memory[temp32:temp32 + 0x20] = !!var1;\n                var temp33 = memory[0x40:0x60];\n                return memory[temp33:temp33 + (temp32 + 0x20) - temp33];\n            } else if (var0 == 0xbe2eaad4) {\n                // Dispatch table entry for expectedFunds(uint256,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0469;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = expectedFunds(var2, var3);\n                var temp34 = memory[0x40:0x60];\n                memory[temp34:temp34 + 0x20] = var1;\n                var temp35 = memory[0x40:0x60];\n                return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n            } else if (var0 == 0xc5f60620) {\n                // Dispatch table entry for expectedTokens(uint256,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = expectedTokens(var2, var3);\n                var temp36 = memory[0x40:0x60];\n                memory[temp36:temp36 + 0x20] = var1;\n                var temp37 = memory[0x40:0x60];\n                return memory[temp37:temp37 + (temp36 + 0x20) - temp37];\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f7;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x050e;\n                exit();\n                stop();\n            } else if (var0 == 0xed88c68e) {\n                // Dispatch table entry for donate()\n                var1 = 0x0518;\n                donate();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x054e;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                buy(var2);\n                stop();\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0565;\n                reinvest();\n                stop();\n            } else { goto label_00F0; }\n        }\n    }\n    \n    function func_012F(var arg0) {\n        buy(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0567(var arg0) returns (var r0) { return memory[arg0 + 0x14:arg0 + 0x14 + 0x20]; }\n    \n    function buy(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x05b3;\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x20] = storage[0x00];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x01];\n        var var6 = temp0;\n        var var7 = msg.value;\n        var5, var6 = func_1B94(var6, var7);\n        var1 = var6;\n        var0 = var5;\n    \n        if (var0 != 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n            var2 = keccak256(memory[0x00:0x40]);\n            var5 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff != 0x00;\n        \n            if (var5) {\n                var5 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender;\n            \n                if (!var5) { goto label_070A; }\n                else { goto label_06CB; }\n            } else if (!var5) {\n            label_070A:\n            \n                if (!var5) {\n                label_0753:\n                \n                    if (storage[var2] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) {\n                    label_0843:\n                        var5 = 0x084c;\n                        var6 = var1;\n                        var5, var6 = func_1D35(var6);\n                        var4 = var6;\n                        var3 = var5;\n                    \n                        if (var3 != 0x00) {\n                            storage[0x08] = var4;\n                            var5 = 0x08da;\n                            var6 = msg.sender;\n                            var7 = var3;\n                            func_1E9E(var6, var7);\n                            var5 = 0x08ef;\n                            var6 = storage[0x0a];\n                            var7 = var0;\n                            var5 = func_1FB4(var6, var7);\n                            storage[0x0a] = var5;\n                            var5 = msg.sender;\n                            var6 = 0xd721454499cf9c37b757e03b9d675df451c229048129d6e2d552216a035e6a55;\n                            var7 = msg.value;\n                            var var8 = var3;\n                            var var9 = 0x0de0b6b3a7640000;\n                            var var10 = storage[0x08];\n                        \n                            if (!var9) { assert(); }\n                        \n                            var temp1 = memory[0x40:0x60];\n                            memory[temp1:temp1 + 0x20] = var7;\n                            var temp2 = temp1 + 0x20;\n                            memory[temp2:temp2 + 0x20] = var8;\n                            var temp3 = temp2 + 0x20;\n                            memory[temp3:temp3 + 0x20] = var10 / var9;\n                            var temp4 = temp3 + 0x20;\n                            memory[temp4:temp4 + 0x20] = block.timestamp;\n                            var temp5 = memory[0x40:0x60];\n                            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [stack[-5], stack[-6]]);\n                            return;\n                        } else {\n                            var temp6 = memory[0x40:0x60];\n                            memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp7 = temp6 + 0x04;\n                            var temp8 = temp7 + 0x20;\n                            memory[temp7:temp7 + 0x20] = temp8 - temp7;\n                            memory[temp8:temp8 + 0x20] = 0x1b;\n                            var temp9 = temp8 + 0x20;\n                            memory[temp9:temp9 + 0x20] = 0x496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000;\n                            var temp10 = memory[0x40:0x60];\n                            revert(memory[temp10:temp10 + (temp9 + 0x20) - temp10]);\n                        }\n                    } else {\n                    label_0798:\n                        var5 = 0x07c7;\n                        var6 = msg.sender;\n                        var7 = storage[var2] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var8 = var0;\n                        var9 = msg.value;\n                        var5 = func_1BF7(var6, var7, var8, var9);\n                    \n                    label_07C7:\n                        var0 = var5;\n                    \n                        if (var0 != 0x00) { goto label_0843; }\n                    \n                        var temp11 = memory[0x40:0x60];\n                        memory[temp11:temp11 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                        var temp12 = temp11 + 0x04;\n                        var temp13 = temp12 + 0x20;\n                        memory[temp12:temp12 + 0x20] = temp13 - temp12;\n                        memory[temp13:temp13 + 0x20] = 0x1b;\n                        var temp14 = temp13 + 0x20;\n                        memory[temp14:temp14 + 0x20] = 0x496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000;\n                        var temp15 = memory[0x40:0x60];\n                        revert(memory[temp15:temp15 + (temp14 + 0x20) - temp15]);\n                    }\n                } else {\n                label_0710:\n                    var temp16 = var2;\n                    var temp17 = temp16;\n                    storage[temp17] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp17] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                \n                    if (storage[temp16] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { goto label_0843; }\n                    else { goto label_0798; }\n                }\n            } else {\n            label_06CB:\n            \n                if (storage[var2] & 0xffffffffffffffffffffffffffffffffffffffff != 0x00) { goto label_0753; }\n                else { goto label_0710; }\n            }\n        } else {\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp19 = temp18 + 0x04;\n            var temp20 = temp19 + 0x20;\n            memory[temp19:temp19 + 0x20] = temp20 - temp19;\n            memory[temp20:temp20 + 0x20] = 0x1b;\n            var temp21 = temp20 + 0x20;\n            memory[temp21:temp21 + 0x20] = 0x496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000;\n            var temp22 = memory[0x40:0x60];\n            revert(memory[temp22:temp22 + (temp21 + 0x20) - temp22]);\n        }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0982;\n        var1 = func_2546();\n        var var2 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = storage[temp0 + 0x01];\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = storage[temp0 + 0x02];\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = storage[temp0 + 0x03];\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = storage[temp0 + 0x04];\n        var1 = temp1;\n        var var3 = 0x0a6a;\n        var var4 = memory[var1 + 0x40:var1 + 0x40 + 0x20];\n        var var5 = memory[var1 + 0x60:var1 + 0x60 + 0x20];\n        var3 = func_1FB4(var4, var5);\n        var2 = var3;\n    \n        if (var2 i< 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x09] <= 0x00) {\n        label_0AC2:\n        \n            if (memory[var1 + 0x80:var1 + 0x80 + 0x20] i> 0x00) {\n                var3 = 0x0ae6;\n                var4 = var2;\n                var5 = memory[var1 + 0x80:var1 + 0x80 + 0x20];\n                var3 = func_216F(var4, var5);\n                var2 = var3;\n            \n                if (var2 i>= 0x00) { goto label_0B28; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (memory[var1 + 0x80:var1 + 0x80 + 0x20] i>= 0x00) {\n            label_0B17:\n            \n                if (var2 i< 0x00) { revert(memory[0x00:0x00]); }\n            \n            label_0B28:\n                return var2;\n            } else {\n                var3 = 0x0b14;\n                var4 = var2;\n                var5 = 0x00 - memory[var1 + 0x80:var1 + 0x80 + 0x20];\n                var3 = func_20E5(var4, var5);\n                var2 = var3;\n                goto label_0B17;\n            }\n        } else {\n            var3 = 0x0abf;\n            var4 = storage[0x09];\n            var5 = 0x0aa6;\n            var var6 = storage[0x0a];\n            var var7 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n            var5 = func_203E(var6, var7);\n            var3 = func_0AA6(var2, var4, var5);\n            var2 = var3;\n            goto label_0AC2;\n        }\n    }\n    \n    function func_0AA6(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg2 / arg1;\n        arg1 = arg0;\n        arg2 = temp0;\n        r0 = func_20E5(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x12;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x50616e7468656f6e2045636f73797374656d0000000000000000000000000000;\n        return r0;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x09]; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0b86;\n        var var3 = msg.sender;\n        var2 = dividendsOf(var3);\n        var0 = var2;\n    \n        if (var0 > 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n            var1 = keccak256(memory[0x00:0x40]);\n            var2 = 0x0c58;\n            var3 = storage[var1 + 0x04];\n            var var4 = var0;\n            var2 = func_20E5(var3, var4);\n            storage[var1 + 0x04] = var2;\n            var temp0 = var0;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            var2 = !temp2;\n        \n            if (!var2) {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = var0;\n                var temp4 = temp3 + 0x20;\n                memory[temp4:temp4 + 0x20] = block.timestamp;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb, msg.sender]);\n                return;\n            } else {\n                var temp6 = returndata.length;\n                memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp8 = temp7 + 0x04;\n            var temp9 = temp8 + 0x20;\n            memory[temp8:temp8 + 0x20] = temp9 - temp8;\n            memory[temp9:temp9 + 0x20] = 0x15;\n            var temp10 = temp9 + 0x20;\n            memory[temp10:temp10 + 0x20] = 0x596f752068617665206e6f206469766964656e64730000000000000000000000;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + (temp10 + 0x20) - temp11]);\n        }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0de0b6b3a7640000;\n        var var2 = 0x0d2d;\n        var var3 = storage[0x08];\n        var var4 = 0x204fce5e3e25026110000000;\n        var2 = func_21F9(var3, var4);\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        return storage[keccak256(memory[0x00:0x40]) + 0x01];\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0de0b6b3a7640000;\n        var var2 = storage[0x08];\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x50414e0000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = arg1;\n    \n        if (var5 > 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n        \n            if (var5 > storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp19 = temp18 + 0x04;\n                var temp20 = temp19 + 0x20;\n                memory[temp19:temp19 + 0x20] = temp20 - temp19;\n                memory[temp20:temp20 + 0x20] = 0x1a;\n                var temp21 = temp20 + 0x20;\n                memory[temp21:temp21 + 0x20] = 0x596f752068617665206e6f7420656e6f75676820746f6b656e73000000000000;\n                var temp22 = memory[0x40:0x60];\n                revert(memory[temp22:temp22 + (temp21 + 0x20) - temp22]);\n            } else if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) {\n                var var6 = 0x103c;\n                var temp0 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp0 + 0x40;\n                memory[temp0:temp0 + 0x20] = storage[0x04];\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x05];\n                var var7 = temp0;\n                var var8 = arg1;\n                var6, var7 = func_1B94(var7, var8);\n                var2 = var7;\n                var1 = var6;\n            \n                if (var1 != 0x00) {\n                    var6 = 0x10c2;\n                    var7 = var1;\n                    var6, var7 = func_227E(var7);\n                    var4 = var7;\n                    var3 = var6;\n                \n                    if (var3 != 0x00) {\n                        storage[0x08] = var4;\n                        var6 = 0x1150;\n                        var7 = msg.sender;\n                        var8 = arg1;\n                        func_237B(var7, var8);\n                    \n                    label_1150:\n                        var6 = 0x115a;\n                        var7 = arg0;\n                        var8 = var2;\n                        func_1E9E(var7, var8);\n                        var6 = 0x116f;\n                        var7 = storage[0x0a];\n                        var8 = var3;\n                        var6 = func_1FB4(var7, var8);\n                        storage[0x0a] = var6;\n                        var temp1 = memory[0x40:0x60];\n                        memory[temp1:temp1 + 0x20] = arg1;\n                        var temp2 = memory[0x40:0x60];\n                        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                        return 0x01;\n                    } else {\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                        var temp4 = temp3 + 0x04;\n                        var temp5 = temp4 + 0x20;\n                        memory[temp4:temp4 + 0x20] = temp5 - temp4;\n                        memory[temp5:temp5 + 0x20] = 0x1e;\n                        var temp6 = temp5 + 0x20;\n                        memory[temp6:temp6 + 0x20] = 0x496e73756666696369656e7420746f6b656e7320746f20646f20746861740000;\n                        var temp7 = memory[0x40:0x60];\n                        revert(memory[temp7:temp7 + (temp6 + 0x20) - temp7]);\n                    }\n                } else {\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp9 = temp8 + 0x04;\n                    var temp10 = temp9 + 0x20;\n                    memory[temp9:temp9 + 0x20] = temp10 - temp9;\n                    memory[temp10:temp10 + 0x20] = 0x1e;\n                    var temp11 = temp10 + 0x20;\n                    memory[temp11:temp11 + 0x20] = 0x496e73756666696369656e7420746f6b656e7320746f20646f20746861740000;\n                    var temp12 = memory[0x40:0x60];\n                    revert(memory[temp12:temp12 + (temp11 + 0x20) - temp12]);\n                }\n            } else {\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp14 = temp13 + 0x04;\n                var temp15 = temp14 + 0x20;\n                memory[temp14:temp14 + 0x20] = temp15 - temp14;\n                memory[temp15:temp15 + 0x20] = 0x26;\n                var temp16 = temp15 + 0x20;\n                memory[temp16:temp16 + 0x20] = 0x596f752063616e6e6f74207472616e7366657220746f6b656e7320746f20796f;\n                memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = 0x757273656c660000000000000000000000000000000000000000000000000000;\n                var temp17 = memory[0x40:0x60];\n                revert(memory[temp17:temp17 + (temp16 + 0x40) - temp17]);\n            }\n        } else {\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp24 = temp23 + 0x04;\n            var temp25 = temp24 + 0x20;\n            memory[temp24:temp24 + 0x20] = temp25 - temp24;\n            memory[temp25:temp25 + 0x20] = 0x2a;\n            var temp26 = temp25 + 0x20;\n            memory[temp26:temp26 + 0x20] = 0x416d6f756e74206f6620746f6b656e73206d7573742062652067726561746572;\n            memory[temp26 + 0x20:temp26 + 0x20 + 0x20] = 0x207468616e207a65726f00000000000000000000000000000000000000000000;\n            var temp27 = memory[0x40:0x60];\n            revert(memory[temp27:temp27 + (temp26 + 0x40) - temp27]);\n        }\n    }\n    \n    function expectedFunds(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = arg0 == var2;\n    \n        if (var3) {\n            if (!var3) {\n            label_120C:\n            \n                if (arg0 <= storage[0x09]) {\n                    var3 = 0x1225;\n                    var var4 = arg0;\n                    var3, var4 = func_227E(var4);\n                \n                label_1225:\n                    var1 = var3;\n                \n                    if (!arg1) {\n                    label_1268:\n                        var0 = var1;\n                    \n                    label_126C:\n                        return var0;\n                    } else {\n                        var3 = 0x1261;\n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0x40;\n                        memory[temp0:temp0 + 0x20] = storage[0x02];\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x03];\n                        var4 = temp0;\n                        var var5 = var1;\n                        var3, var4 = func_1B94(var4, var5);\n                        var2 = var4;\n                        var1 = var2;\n                        goto label_1268;\n                    }\n                } else {\n                    arg0 = storage[0x09];\n                    var3 = 0x1225;\n                    var4 = arg0;\n                    var3, var4 = func_227E(var4);\n                    goto label_1225;\n                }\n            } else {\n            label_1204:\n                var0 = 0x00;\n                goto label_126C;\n            }\n        } else if (storage[0x09] != 0x00) { goto label_120C; }\n        else { goto label_1204; }\n    }\n    \n    function expectedTokens(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 == var2) {\n            var0 = 0x00;\n            goto label_12DA;\n        } else if (!arg1) {\n        label_12CA:\n            var var3 = 0x12d3;\n            var var4 = arg0;\n            var3, var4 = func_1D35(var4);\n            var2 = var3;\n            var0 = var2;\n        \n        label_12DA:\n            return var0;\n        } else {\n            var3 = 0x12c3;\n            var temp0 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp0 + 0x40;\n            memory[temp0:temp0 + 0x20] = storage[0x00];\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x01];\n            var4 = temp0;\n            var var5 = arg0;\n            var3, var4 = func_1B94(var4, var5);\n            var1 = var4;\n            arg0 = var1;\n            goto label_12CA;\n        }\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = arg0;\n    \n        if (var5 > 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n        \n            if (var5 <= storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                var var6 = 0x144c;\n                var var7 = arg0;\n                var6, var7 = func_227E(var7);\n                var1 = var7;\n                var0 = var6;\n            \n                if (var0 != 0x00) {\n                    storage[0x08] = var1;\n                    var6 = 0x1503;\n                    var temp0 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp0 + 0x40;\n                    memory[temp0:temp0 + 0x20] = storage[0x02];\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x03];\n                    var7 = temp0;\n                    var var8 = var0;\n                    var6, var7 = func_1B94(var7, var8);\n                    var3 = var7;\n                    var2 = var6;\n                \n                    if (var2 != 0x00) {\n                        var6 = 0x158a;\n                        var7 = msg.sender;\n                        var8 = arg0;\n                        func_237B(var7, var8);\n                    \n                    label_158A:\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x0b;\n                        var4 = keccak256(memory[0x00:0x40]);\n                        var6 = 0x15e2;\n                        var7 = storage[var4 + 0x02];\n                        var8 = var3;\n                        var6 = func_1FB4(var7, var8);\n                        storage[var4 + 0x02] = var6;\n                        var6 = 0x15ff;\n                        var7 = storage[0x0a];\n                        var8 = var2;\n                        var6 = func_1FB4(var7, var8);\n                        storage[0x0a] = var6;\n                        var6 = msg.sender;\n                        var7 = 0xafd310387603da0dcf44f11f54b04254b548c58b194e75f85851e849f0eef307;\n                        var8 = arg0;\n                        var var9 = var0;\n                        var var10 = 0x0de0b6b3a7640000;\n                        var var11 = storage[0x08];\n                    \n                        if (!var10) { assert(); }\n                    \n                        var temp1 = memory[0x40:0x60];\n                        memory[temp1:temp1 + 0x20] = var8;\n                        var temp2 = temp1 + 0x20;\n                        memory[temp2:temp2 + 0x20] = var9;\n                        var temp3 = temp2 + 0x20;\n                        memory[temp3:temp3 + 0x20] = var11 / var10;\n                        var temp4 = temp3 + 0x20;\n                        memory[temp4:temp4 + 0x20] = block.timestamp;\n                        var temp5 = memory[0x40:0x60];\n                        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [stack[-5], stack[-6]]);\n                        return;\n                    } else {\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                        var temp7 = temp6 + 0x04;\n                        var temp8 = temp7 + 0x20;\n                        memory[temp7:temp7 + 0x20] = temp8 - temp7;\n                        memory[temp8:temp8 + 0x20] = 0x1e;\n                        var temp9 = temp8 + 0x20;\n                        memory[temp9:temp9 + 0x20] = 0x496e73756666696369656e7420746f6b656e7320746f20646f20746861740000;\n                        var temp10 = memory[0x40:0x60];\n                        revert(memory[temp10:temp10 + (temp9 + 0x20) - temp10]);\n                    }\n                } else {\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp12 = temp11 + 0x04;\n                    var temp13 = temp12 + 0x20;\n                    memory[temp12:temp12 + 0x20] = temp13 - temp12;\n                    memory[temp13:temp13 + 0x20] = 0x1e;\n                    var temp14 = temp13 + 0x20;\n                    memory[temp14:temp14 + 0x20] = 0x496e73756666696369656e7420746f6b656e7320746f20646f20746861740000;\n                    var temp15 = memory[0x40:0x60];\n                    revert(memory[temp15:temp15 + (temp14 + 0x20) - temp15]);\n                }\n            } else {\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp17 = temp16 + 0x04;\n                var temp18 = temp17 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp18 - temp17;\n                memory[temp18:temp18 + 0x20] = 0x1a;\n                var temp19 = temp18 + 0x20;\n                memory[temp19:temp19 + 0x20] = 0x596f752068617665206e6f7420656e6f75676820746f6b656e73000000000000;\n                var temp20 = memory[0x40:0x60];\n                revert(memory[temp20:temp20 + (temp19 + 0x20) - temp20]);\n            }\n        } else {\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp22 = temp21 + 0x04;\n            var temp23 = temp22 + 0x20;\n            memory[temp22:temp22 + 0x20] = temp23 - temp22;\n            memory[temp23:temp23 + 0x20] = 0x2a;\n            var temp24 = temp23 + 0x20;\n            memory[temp24:temp24 + 0x20] = 0x416d6f756e74206f6620746f6b656e73206d7573742062652067726561746572;\n            memory[temp24 + 0x20:temp24 + 0x20 + 0x20] = 0x207468616e207a65726f00000000000000000000000000000000000000000000;\n            var temp25 = memory[0x40:0x60];\n            revert(memory[temp25:temp25 + (temp24 + 0x40) - temp25]);\n        }\n    }\n    \n    function exit() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n        var var0 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n    \n        if (var0 <= 0x00) {\n        label_16E3:\n            var var1 = 0x16eb;\n            withdraw();\n            return;\n        } else {\n            var1 = 0x16e2;\n            var var2 = var0;\n            sell(var2);\n            goto label_16E3;\n        }\n    }\n    \n    function donate() {\n        var var0 = 0x1703;\n        var var1 = storage[0x0a];\n        var var2 = msg.value;\n        var0 = func_1FB4(var1, var2);\n        storage[0x0a] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = block.timestamp;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x106aac375bbcf013d1e52338bbf9e740009a1a3a6869f8daa1b72aa1620f5fec, msg.sender]);\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x1773;\n        var var7 = msg.sender;\n        var6 = dividendsOf(var7);\n        var0 = var6;\n    \n        if (var0 > 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n            var1 = keccak256(memory[0x00:0x40]);\n            var6 = 0x1845;\n            var7 = storage[var1 + 0x04];\n            var var8 = var0;\n            var6 = func_20E5(var7, var8);\n            storage[var1 + 0x04] = var6;\n            var6 = 0x1880;\n            var temp0 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp0 + 0x40;\n            memory[temp0:temp0 + 0x20] = storage[0x00];\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x01];\n            var7 = temp0;\n            var8 = var0;\n            var6, var7 = func_1B94(var7, var8);\n            var3 = var7;\n            var2 = var6;\n        \n            if (var2 == 0x00) {\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp17 = temp16 + 0x04;\n                var temp18 = temp17 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp18 - temp17;\n                memory[temp18:temp18 + 0x20] = 0x21;\n                var temp19 = temp18 + 0x20;\n                memory[temp19:temp19 + 0x20] = 0x496e73756666696369656e74206469766964656e647320746f20646f20746861;\n                memory[temp19 + 0x20:temp19 + 0x20 + 0x20] = 0x7400000000000000000000000000000000000000000000000000000000000000;\n                var temp20 = memory[0x40:0x60];\n                revert(memory[temp20:temp20 + (temp19 + 0x40) - temp20]);\n            } else if (storage[var1] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) {\n            label_1A39:\n                var6 = 0x1a42;\n                var7 = var3;\n                var6, var7 = func_1D35(var7);\n                var5 = var7;\n                var4 = var6;\n            \n                if (var4 != 0x00) {\n                    storage[0x08] = var5;\n                    var6 = 0x1af6;\n                    var7 = msg.sender;\n                    var8 = var4;\n                    func_1E9E(var7, var8);\n                    var6 = 0x1b0b;\n                    var7 = storage[0x0a];\n                    var8 = var2;\n                    var6 = func_1FB4(var7, var8);\n                    storage[0x0a] = var6;\n                    var6 = msg.sender;\n                    var7 = 0x1abe689c7914cafd54f789eb0851e90cba235302161e81e259ee4c357c374d82;\n                    var8 = var0;\n                    var var9 = var4;\n                    var var10 = 0x0de0b6b3a7640000;\n                    var var11 = storage[0x08];\n                \n                    if (!var10) { assert(); }\n                \n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = var8;\n                    var temp2 = temp1 + 0x20;\n                    memory[temp2:temp2 + 0x20] = var9;\n                    var temp3 = temp2 + 0x20;\n                    memory[temp3:temp3 + 0x20] = var11 / var10;\n                    var temp4 = temp3 + 0x20;\n                    memory[temp4:temp4 + 0x20] = block.timestamp;\n                    var temp5 = memory[0x40:0x60];\n                    log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [stack[-5], stack[-6]]);\n                    return;\n                } else {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp7 = temp6 + 0x04;\n                    var temp8 = temp7 + 0x20;\n                    memory[temp7:temp7 + 0x20] = temp8 - temp7;\n                    memory[temp8:temp8 + 0x20] = 0x21;\n                    var temp9 = temp8 + 0x20;\n                    memory[temp9:temp9 + 0x20] = 0x496e73756666696369656e74206469766964656e647320746f20646f20746861;\n                    memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = 0x7400000000000000000000000000000000000000000000000000000000000000;\n                    var temp10 = memory[0x40:0x60];\n                    revert(memory[temp10:temp10 + (temp9 + 0x40) - temp10]);\n                }\n            } else {\n                var6 = 0x1997;\n                var7 = msg.sender;\n                var8 = storage[var1] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var9 = var2;\n                var10 = var0;\n                var6 = func_1BF7(var7, var8, var9, var10);\n                var2 = var6;\n            \n                if (var2 != 0x00) { goto label_1A39; }\n            \n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp12 = temp11 + 0x04;\n                var temp13 = temp12 + 0x20;\n                memory[temp12:temp12 + 0x20] = temp13 - temp12;\n                memory[temp13:temp13 + 0x20] = 0x21;\n                var temp14 = temp13 + 0x20;\n                memory[temp14:temp14 + 0x20] = 0x496e73756666696369656e74206469766964656e647320746f20646f20746861;\n                memory[temp14 + 0x20:temp14 + 0x20 + 0x20] = 0x7400000000000000000000000000000000000000000000000000000000000000;\n                var temp15 = memory[0x40:0x60];\n                revert(memory[temp15:temp15 + (temp14 + 0x40) - temp15]);\n            }\n        } else {\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp22 = temp21 + 0x04;\n            var temp23 = temp22 + 0x20;\n            memory[temp22:temp22 + 0x20] = temp23 - temp22;\n            memory[temp23:temp23 + 0x20] = 0x15;\n            var temp24 = temp23 + 0x20;\n            memory[temp24:temp24 + 0x20] = 0x596f752068617665206e6f206469766964656e64730000000000000000000000;\n            var temp25 = memory[0x40:0x60];\n            revert(memory[temp25:temp25 + (temp24 + 0x20) - temp25]);\n        }\n    }\n    \n    function func_1B94(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 != 0x00) {\n            var temp0 = arg0;\n            var var2 = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n            var var3 = 0x1bce;\n            var var4 = arg1;\n            var var5 = memory[temp0:temp0 + 0x20];\n            var3 = func_203E(var4, var5);\n        \n            if (!var2) { assert(); }\n        \n            var temp1 = var3 / var2;\n            var0 = temp1;\n            var2 = 0x1bed;\n            var3 = arg1;\n            var4 = var0;\n            var2 = func_21F9(var3, var4);\n            var1 = var2;\n        \n        label_1BF0:\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var1 = 0x00;\n            var0 = var1;\n            goto label_1BF0;\n        }\n    }\n    \n    function func_1BF7(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var1 = keccak256(memory[0x00:0x40]);\n    \n        if (storage[var1 + 0x01] < 0x8ac7230489e80000) { return arg2; }\n    \n        var var4 = 0x1c86;\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x20] = storage[0x06];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x07];\n        var var5 = temp0;\n        var var6 = arg2;\n        var4, var5 = func_1B94(var5, var6);\n        var3 = var5;\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x1ca1;\n        var5 = storage[var1 + 0x03];\n        var6 = var2;\n        var4 = func_1FB4(var5, var6);\n        storage[var1 + 0x03] = var4;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = arg3;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = var2;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = block.timestamp;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x870e4e1dcfab6c09707448d3659b3d8097c084bf06e7467d6029940cd7122ee0, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return var3;\n    }\n    \n    function func_1D35(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x1d72;\n        var var7 = 0x204fce5e3e25026110000000;\n        var var8 = 0x1d64;\n        var var9 = storage[0x08];\n        var var10 = 0x02;\n        var8 = func_203E(var9, var10);\n        var6 = func_1D64(var7, var8);\n        var2 = var6;\n        var6 = 0x1de4;\n        var7 = 0x1dc3;\n        var8 = 0x0de0b6b3a7640000;\n        var9 = 0x1db5;\n        var10 = arg0;\n        var var11 = 0x1da7;\n        var var12 = 0x204fce5e3e25026110000000;\n        var var13 = 0x08;\n        var11 = func_203E(var12, var13);\n        var9 = func_1DA7(var10, var11);\n        var7 = func_1DB5(var8, var9);\n        var6 = func_1DC3(var2, var7);\n        var3 = var6;\n        var6 = 0x1e06;\n        var7 = 0x204fce5e3e25026110000000;\n        var8 = 0x02;\n        var6 = func_203E(var7, var8);\n        var7 = 0x1e3b;\n        var8 = 0x0de0b6b3a7640000;\n        var9 = 0x1e2d;\n        var10 = var2;\n        var11 = 0x1e1f;\n        var12 = var3;\n        var11 = func_24ED(var12);\n        var9 = func_1E1F(var10, var11);\n        var7 = func_1E2D(var8, var9);\n    \n        if (!var6) { assert(); }\n    \n        var temp0 = var7 / var6;\n        var4 = temp0;\n        var6 = 0x1e8d;\n        var7 = 0x0de0b6b3a7640000;\n        var8 = 0x1e72;\n        var9 = 0x204fce5e3e25026110000000;\n        var10 = var4;\n        var8 = func_203E(var9, var10);\n        var6 = func_1E72(var7, var8);\n        arg0 = var6;\n        r0 = var4;\n        return r0, arg0;\n    }\n    \n    function func_1D64(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_21F9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1DA7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_203E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1DB5(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_203E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1DC3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x1dd6;\n        var var1 = arg0;\n        var var2 = var1;\n        var0 = func_203E(var1, var2);\n        var temp0 = arg1;\n        arg1 = var0;\n        var0 = temp0;\n        r0 = func_1FB4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E1F(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_21F9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E2D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_203E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E72(var arg0, var arg1) returns (var r0) {\n        if (!arg0) { assert(); }\n    \n        var temp0 = arg1 / arg0;\n        arg0 = storage[0x08];\n        arg1 = temp0;\n        r0 = func_1FB4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E9E(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = storage[0x09] > 0x00;\n    \n        if (!var1) {\n        label_1F2D:\n            var var2 = 0x1f42;\n            var var3 = storage[0x09];\n            var var4 = arg1;\n            var2 = func_1FB4(var3, var4);\n            storage[0x09] = var2;\n            var2 = 0x1f5f;\n            var3 = storage[var0 + 0x01];\n            var4 = arg1;\n            var2 = func_1FB4(var3, var4);\n            storage[var0 + 0x01] = var2;\n        \n            if (!var1) {\n            label_1FAE:\n                return;\n            } else {\n                var2 = 0x1fa5;\n                var3 = storage[0x09];\n                var4 = 0x1f88;\n                var var5 = arg1;\n                var var6 = storage[0x0a];\n                var4 = func_203E(var5, var6);\n                var2 = func_1F88(var0, var3, var4);\n                storage[var0 + 0x04] = var2;\n                goto label_1FAE;\n            }\n        } else {\n            var2 = storage[0x09];\n            var3 = 0x1f1c;\n            var4 = 0x1f0b;\n            var5 = storage[0x09];\n            var6 = arg1;\n            var4 = func_1FB4(var5, var6);\n            var3 = func_1F0B(var4);\n        \n            if (!var2) { assert(); }\n        \n            storage[0x0a] = var3 / var2;\n            goto label_1F2D;\n        }\n    }\n    \n    function func_1F0B(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x0a];\n        var var0 = temp0;\n        r0 = func_203E(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1F88(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg2 / arg1;\n        arg1 = storage[arg0 + 0x04];\n        arg2 = temp0;\n        r0 = func_20E5(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1FB4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        var temp3 = temp2 + 0x20;\n        memory[temp2:temp2 + 0x20] = temp3 - temp2;\n        memory[temp3:temp3 + 0x20] = 0x0a;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x616464206661696c656400000000000000000000000000000000000000000000;\n        var temp5 = memory[0x40:0x60];\n        revert(memory[temp5:temp5 + (temp4 + 0x20) - temp5]);\n    }\n    \n    function func_203E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 == 0x00) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = temp0 * arg1;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        var temp3 = temp2 + 0x20;\n        memory[temp2:temp2 + 0x20] = temp3 - temp2;\n        memory[temp3:temp3 + 0x20] = 0x0a;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x6d756c206661696c656400000000000000000000000000000000000000000000;\n        var temp5 = memory[0x40:0x60];\n        revert(memory[temp5:temp5 + (temp4 + 0x20) - temp5]);\n    }\n    \n    function func_20E5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 i>= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        var temp3 = temp2 + 0x20;\n        memory[temp2:temp2 + 0x20] = temp3 - temp2;\n        memory[temp3:temp3 + 0x20] = 0x0a;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x616464206661696c656400000000000000000000000000000000000000000000;\n        var temp5 = memory[0x40:0x60];\n        revert(memory[temp5:temp5 + (temp4 + 0x20) - temp5]);\n    }\n    \n    function func_216F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 - arg1;\n    \n        if (var1 i<= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        var temp3 = temp2 + 0x20;\n        memory[temp2:temp2 + 0x20] = temp3 - temp2;\n        memory[temp3:temp3 + 0x20] = 0x0a;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x737562206661696c656400000000000000000000000000000000000000000000;\n        var temp5 = memory[0x40:0x60];\n        revert(memory[temp5:temp5 + (temp4 + 0x20) - temp5]);\n    }\n    \n    function func_21F9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        var temp2 = temp1 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2 - temp1;\n        memory[temp2:temp2 + 0x20] = 0x0a;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = 0x737562206661696c656400000000000000000000000000000000000000000000;\n        var temp4 = memory[0x40:0x60];\n        revert(memory[temp4:temp4 + (temp3 + 0x20) - temp4]);\n    }\n    \n    function func_227E(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x22a7;\n        var var6 = storage[0x08];\n        var var7 = 0x204fce5e3e25026110000000;\n        var5 = func_21F9(var6, var7);\n        var2 = var5;\n        var5 = 0x230b;\n        var6 = 0x0de0b6b3a7640000;\n        var7 = 0x22d4;\n        var var8 = 0x204fce5e3e25026110000000;\n        var var9 = arg0;\n        var7 = func_203E(var8, var9);\n        var5 = func_22D4(var2, var6, var7);\n        var3 = var5;\n        var5 = 0x2329;\n        var6 = 0x0de0b6b3a7640000;\n        var7 = 0x02;\n        var5 = func_203E(var6, var7);\n        var6 = 0x234e;\n        var7 = arg0;\n        var8 = 0x2340;\n        var9 = var2;\n        var var10 = var3;\n        var8 = func_1FB4(var9, var10);\n        var6 = func_2340(var7, var8);\n    \n        if (!var5) { assert(); }\n    \n        var temp0 = var6 / var5;\n        var4 = temp0;\n        var5 = 0x0de0b6b3a7640000;\n        var6 = var4;\n    \n        if (!var5) { assert(); }\n    \n        arg0 = var3;\n        r0 = var6 / var5;\n        return r0, arg0;\n    }\n    \n    function func_22D4(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        arg1 = arg2 / arg1;\n        arg2 = 0x22fd;\n        var var0 = arg0;\n        var var1 = 0x204fce5e3e25026110000000;\n        arg2 = func_1FB4(var0, var1);\n        var temp0 = arg1;\n        arg1 = arg2;\n        arg2 = temp0;\n        r0 = func_21F9(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2340(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_203E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_237B(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = 0x00;\n    \n        if (storage[0x09] != arg1) {\n        label_23F6:\n            var var2 = storage[0x09];\n            var var3 = 0x2422;\n            var var4 = 0x2411;\n            var var5 = storage[0x09];\n            var var6 = arg1;\n            var4 = func_21F9(var5, var6);\n            var3 = func_2411(var4);\n        \n            if (!var2) { assert(); }\n        \n            storage[0x0a] = var3 / var2;\n            var2 = 0x2447;\n            var3 = storage[0x09];\n            var4 = arg1;\n            var2 = func_21F9(var3, var4);\n            storage[0x09] = var2;\n            var2 = 0x2464;\n            var3 = storage[var0 + 0x01];\n            var4 = arg1;\n            var2 = func_21F9(var3, var4);\n            storage[var0 + 0x01] = var2;\n        \n            if (storage[0x09] > 0x00) {\n                var2 = 0x24af;\n                var3 = storage[0x09];\n                var4 = 0x2492;\n                var5 = arg1;\n                var6 = storage[0x0a];\n                var4 = func_203E(var5, var6);\n                var2 = func_2492(var0, var3, var4);\n                storage[var0 + 0x04] = var2;\n                return;\n            } else if (var1 == 0x00) {\n            label_24E6:\n                return;\n            } else {\n                var2 = 0x24dd;\n                var3 = storage[var0 + 0x04];\n                var4 = var1;\n                var2 = func_216F(var3, var4);\n                storage[var0 + 0x04] = var2;\n                goto label_24E6;\n            }\n        } else {\n            var2 = storage[0x09];\n            var3 = 0x23e9;\n            var4 = storage[0x0a];\n            var5 = storage[var0 + 0x01];\n            var3 = func_203E(var4, var5);\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n            goto label_23F6;\n        }\n    }\n    \n    function func_2411(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x0a];\n        var var0 = temp0;\n        r0 = func_203E(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2492(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg2 / arg1;\n        arg1 = storage[arg0 + 0x04];\n        arg2 = temp0;\n        r0 = func_216F(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_24ED(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = 0x24fd;\n        var var4 = arg0;\n        var var5 = 0x01;\n        var3 = func_1FB4(var4, var5);\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_2540:\n            return var0;\n        } else {\n        label_2516:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = 0x252f;\n            var4 = var0;\n            var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = func_2528(var1, var4, var5);\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_2540; }\n            else { goto label_2516; }\n        }\n    }\n    \n    function func_2528(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        arg2 = arg0;\n        r0 = func_1FB4(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2546() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x00;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = 0x00;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = 0x00;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00F0:\n            var var0 = 0x0134;\n            var var1 = 0x012f;\n            var temp0 = msg.data.length;\n            var temp1 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n            var var2 = temp1;\n            memory[var2:var2 + 0x20] = temp0;\n            memory[var2 + 0x20:var2 + 0x20 + temp0] = msg.data[0x00:0x00 + temp0];\n            var1 = func_0567(var2);\n            func_012F(var1);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0177;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = dividendsOf(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var1;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01a2;\n                var2 = name();\n                var temp4 = memory[0x40:0x60];\n                var var3 = temp4;\n                var var4 = var3;\n                var temp5 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp5 - var4;\n                var temp6 = var2;\n                memory[temp5:temp5 + 0x20] = memory[temp6:temp6 + 0x20];\n                var var5 = temp5 + 0x20;\n                var var7 = memory[temp6:temp6 + 0x20];\n                var var6 = temp6 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_01E2:\n                    var temp7 = var7;\n                    var5 = temp7 + var5;\n                    var6 = temp7 & 0x1f;\n                \n                    if (!var6) {\n                        var temp8 = memory[0x40:0x60];\n                        return memory[temp8:temp8 + var5 - temp8];\n                    } else {\n                        var temp9 = var6;\n                        var temp10 = var5 - temp9;\n                        memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                        var temp11 = memory[0x40:0x60];\n                        return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n                    }\n                } else {\n                label_01D0:\n                    var temp12 = var11;\n                    memory[var9 + temp12:var9 + temp12 + 0x20] = memory[var10 + temp12:var10 + temp12 + 0x20];\n                    var11 = temp12 + 0x20;\n                \n                    if (var11 >= var8) { goto label_01E2; }\n                    else { goto label_01D0; }\n                }\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0232;\n                var1 = totalSupply();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x025d;\n                var2 = decimals();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0xff;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028e;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a5;\n                var1 = sellPrice();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var1;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02fc;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0327;\n                var1 = buyPrice();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0352;\n                var2 = symbol();\n                var temp23 = memory[0x40:0x60];\n                var3 = temp23;\n                var4 = var3;\n                var temp24 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp24 - var4;\n                var temp25 = var2;\n                memory[temp24:temp24 + 0x20] = memory[temp25:temp25 + 0x20];\n                var5 = temp24 + 0x20;\n                var7 = memory[temp25:temp25 + 0x20];\n                var6 = temp25 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0392:\n                    var temp26 = var7;\n                    var5 = temp26 + var5;\n                    var6 = temp26 & 0x1f;\n                \n                    if (!var6) {\n                        var temp27 = memory[0x40:0x60];\n                        return memory[temp27:temp27 + var5 - temp27];\n                    } else {\n                        var temp28 = var6;\n                        var temp29 = var5 - temp28;\n                        memory[temp29:temp29 + 0x20] = ~(0x0100 ** (0x20 - temp28) - 0x01) & memory[temp29:temp29 + 0x20];\n                        var temp30 = memory[0x40:0x60];\n                        return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n                    }\n                } else {\n                label_0380:\n                    var temp31 = var11;\n                    memory[var9 + temp31:var9 + temp31 + 0x20] = memory[var10 + temp31:var10 + temp31 + 0x20];\n                    var11 = temp31 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0392; }\n                    else { goto label_0380; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0418;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp32 = memory[0x40:0x60];\n                memory[temp32:temp32 + 0x20] = !!var1;\n                var temp33 = memory[0x40:0x60];\n                return memory[temp33:temp33 + (temp32 + 0x20) - temp33];\n            } else if (var0 == 0xbe2eaad4) {\n                // Dispatch table entry for expectedFunds(uint256,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0469;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = expectedFunds(var2, var3);\n                var temp34 = memory[0x40:0x60];\n                memory[temp34:temp34 + 0x20] = var1;\n                var temp35 = memory[0x40:0x60];\n                return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n            } else if (var0 == 0xc5f60620) {\n                // Dispatch table entry for expectedTokens(uint256,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = expectedTokens(var2, var3);\n                var temp36 = memory[0x40:0x60];\n                memory[temp36:temp36 + 0x20] = var1;\n                var temp37 = memory[0x40:0x60];\n                return memory[temp37:temp37 + (temp36 + 0x20) - temp37];\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f7;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x050e;\n                exit();\n                stop();\n            } else if (var0 == 0xed88c68e) {\n                // Dispatch table entry for donate()\n                var1 = 0x0518;\n                donate();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x054e;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                buy(var2);\n                stop();\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0565;\n                reinvest();\n                stop();\n            } else { goto label_00F0; }\n        }\n    }\n    \n    function func_012F(var arg0) {\n        buy(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0567(var arg0) returns (var r0) { return memory[arg0 + 0x14:arg0 + 0x14 + 0x20]; }\n    \n    function buy(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x05b3;\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x20] = storage[0x00];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x01];\n        var var6 = temp0;\n        var var7 = msg.value;\n        var5, var6 = func_1B94(var6, var7);\n        var1 = var6;\n        var0 = var5;\n    \n        if (var0 != 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n            var2 = keccak256(memory[0x00:0x40]);\n            var5 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff != 0x00;\n        \n            if (var5) {\n                var5 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender;\n            \n                if (!var5) { goto label_070A; }\n                else { goto label_06CB; }\n            } else if (!var5) {\n            label_070A:\n            \n                if (!var5) {\n                label_0753:\n                \n                    if (storage[var2] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) {\n                    label_0843:\n                        var5 = 0x084c;\n                        var6 = var1;\n                        var5, var6 = func_1D35(var6);\n                        var4 = var6;\n                        var3 = var5;\n                    \n                        if (var3 != 0x00) {\n                            storage[0x08] = var4;\n                            var5 = 0x08da;\n                            var6 = msg.sender;\n                            var7 = var3;\n                            func_1E9E(var6, var7);\n                            var5 = 0x08ef;\n                            var6 = storage[0x0a];\n                            var7 = var0;\n                            var5 = func_1FB4(var6, var7);\n                            storage[0x0a] = var5;\n                            var5 = msg.sender;\n                            var6 = 0xd721454499cf9c37b757e03b9d675df451c229048129d6e2d552216a035e6a55;\n                            var7 = msg.value;\n                            var var8 = var3;\n                            var var9 = 0x0de0b6b3a7640000;\n                            var var10 = storage[0x08];\n                        \n                            if (!var9) { assert(); }\n                        \n                            var temp1 = memory[0x40:0x60];\n                            memory[temp1:temp1 + 0x20] = var7;\n                            var temp2 = temp1 + 0x20;\n                            memory[temp2:temp2 + 0x20] = var8;\n                            var temp3 = temp2 + 0x20;\n                            memory[temp3:temp3 + 0x20] = var10 / var9;\n                            var temp4 = temp3 + 0x20;\n                            memory[temp4:temp4 + 0x20] = block.timestamp;\n                            var temp5 = memory[0x40:0x60];\n                            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [stack[-5], stack[-6]]);\n                            return;\n                        } else {\n                            var temp6 = memory[0x40:0x60];\n                            memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp7 = temp6 + 0x04;\n                            var temp8 = temp7 + 0x20;\n                            memory[temp7:temp7 + 0x20] = temp8 - temp7;\n                            memory[temp8:temp8 + 0x20] = 0x1b;\n                            var temp9 = temp8 + 0x20;\n                            memory[temp9:temp9 + 0x20] = 0x496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000;\n                            var temp10 = memory[0x40:0x60];\n                            revert(memory[temp10:temp10 + (temp9 + 0x20) - temp10]);\n                        }\n                    } else {\n                    label_0798:\n                        var5 = 0x07c7;\n                        var6 = msg.sender;\n                        var7 = storage[var2] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var8 = var0;\n                        var9 = msg.value;\n                        var5 = func_1BF7(var6, var7, var8, var9);\n                    \n                    label_07C7:\n                        var0 = var5;\n                    \n                        if (var0 != 0x00) { goto label_0843; }\n                    \n                        var temp11 = memory[0x40:0x60];\n                        memory[temp11:temp11 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                        var temp12 = temp11 + 0x04;\n                        var temp13 = temp12 + 0x20;\n                        memory[temp12:temp12 + 0x20] = temp13 - temp12;\n                        memory[temp13:temp13 + 0x20] = 0x1b;\n                        var temp14 = temp13 + 0x20;\n                        memory[temp14:temp14 + 0x20] = 0x496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000;\n                        var temp15 = memory[0x40:0x60];\n                        revert(memory[temp15:temp15 + (temp14 + 0x20) - temp15]);\n                    }\n                } else {\n                label_0710:\n                    var temp16 = var2;\n                    var temp17 = temp16;\n                    storage[temp17] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp17] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                \n                    if (storage[temp16] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { goto label_0843; }\n                    else { goto label_0798; }\n                }\n            } else {\n            label_06CB:\n            \n                if (storage[var2] & 0xffffffffffffffffffffffffffffffffffffffff != 0x00) { goto label_0753; }\n                else { goto label_0710; }\n            }\n        } else {\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp19 = temp18 + 0x04;\n            var temp20 = temp19 + 0x20;\n            memory[temp19:temp19 + 0x20] = temp20 - temp19;\n            memory[temp20:temp20 + 0x20] = 0x1b;\n            var temp21 = temp20 + 0x20;\n            memory[temp21:temp21 + 0x20] = 0x496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000;\n            var temp22 = memory[0x40:0x60];\n            revert(memory[temp22:temp22 + (temp21 + 0x20) - temp22]);\n        }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0982;\n        var1 = func_2546();\n        var var2 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = storage[temp0 + 0x01];\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = storage[temp0 + 0x02];\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = storage[temp0 + 0x03];\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = storage[temp0 + 0x04];\n        var1 = temp1;\n        var var3 = 0x0a6a;\n        var var4 = memory[var1 + 0x40:var1 + 0x40 + 0x20];\n        var var5 = memory[var1 + 0x60:var1 + 0x60 + 0x20];\n        var3 = func_1FB4(var4, var5);\n        var2 = var3;\n    \n        if (var2 i< 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x09] <= 0x00) {\n        label_0AC2:\n        \n            if (memory[var1 + 0x80:var1 + 0x80 + 0x20] i> 0x00) {\n                var3 = 0x0ae6;\n                var4 = var2;\n                var5 = memory[var1 + 0x80:var1 + 0x80 + 0x20];\n                var3 = func_216F(var4, var5);\n                var2 = var3;\n            \n                if (var2 i>= 0x00) { goto label_0B28; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (memory[var1 + 0x80:var1 + 0x80 + 0x20] i>= 0x00) {\n            label_0B17:\n            \n                if (var2 i< 0x00) { revert(memory[0x00:0x00]); }\n            \n            label_0B28:\n                return var2;\n            } else {\n                var3 = 0x0b14;\n                var4 = var2;\n                var5 = 0x00 - memory[var1 + 0x80:var1 + 0x80 + 0x20];\n                var3 = func_20E5(var4, var5);\n                var2 = var3;\n                goto label_0B17;\n            }\n        } else {\n            var3 = 0x0abf;\n            var4 = storage[0x09];\n            var5 = 0x0aa6;\n            var var6 = storage[0x0a];\n            var var7 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n            var5 = func_203E(var6, var7);\n            var3 = func_0AA6(var2, var4, var5);\n            var2 = var3;\n            goto label_0AC2;\n        }\n    }\n    \n    function func_0AA6(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg2 / arg1;\n        arg1 = arg0;\n        arg2 = temp0;\n        r0 = func_20E5(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x12;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x50616e7468656f6e2045636f73797374656d0000000000000000000000000000;\n        return r0;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x09]; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0b86;\n        var var3 = msg.sender;\n        var2 = dividendsOf(var3);\n        var0 = var2;\n    \n        if (var0 > 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n            var1 = keccak256(memory[0x00:0x40]);\n            var2 = 0x0c58;\n            var3 = storage[var1 + 0x04];\n            var var4 = var0;\n            var2 = func_20E5(var3, var4);\n            storage[var1 + 0x04] = var2;\n            var temp0 = var0;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            var2 = !temp2;\n        \n            if (!var2) {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = var0;\n                var temp4 = temp3 + 0x20;\n                memory[temp4:temp4 + 0x20] = block.timestamp;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb, msg.sender]);\n                return;\n            } else {\n                var temp6 = returndata.length;\n                memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp8 = temp7 + 0x04;\n            var temp9 = temp8 + 0x20;\n            memory[temp8:temp8 + 0x20] = temp9 - temp8;\n            memory[temp9:temp9 + 0x20] = 0x15;\n            var temp10 = temp9 + 0x20;\n            memory[temp10:temp10 + 0x20] = 0x596f752068617665206e6f206469766964656e64730000000000000000000000;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + (temp10 + 0x20) - temp11]);\n        }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0de0b6b3a7640000;\n        var var2 = 0x0d2d;\n        var var3 = storage[0x08];\n        var var4 = 0x204fce5e3e25026110000000;\n        var2 = func_21F9(var3, var4);\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        return storage[keccak256(memory[0x00:0x40]) + 0x01];\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0de0b6b3a7640000;\n        var var2 = storage[0x08];\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x50414e0000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = arg1;\n    \n        if (var5 > 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n        \n            if (var5 > storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp19 = temp18 + 0x04;\n                var temp20 = temp19 + 0x20;\n                memory[temp19:temp19 + 0x20] = temp20 - temp19;\n                memory[temp20:temp20 + 0x20] = 0x1a;\n                var temp21 = temp20 + 0x20;\n                memory[temp21:temp21 + 0x20] = 0x596f752068617665206e6f7420656e6f75676820746f6b656e73000000000000;\n                var temp22 = memory[0x40:0x60];\n                revert(memory[temp22:temp22 + (temp21 + 0x20) - temp22]);\n            } else if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) {\n                var var6 = 0x103c;\n                var temp0 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp0 + 0x40;\n                memory[temp0:temp0 + 0x20] = storage[0x04];\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x05];\n                var var7 = temp0;\n                var var8 = arg1;\n                var6, var7 = func_1B94(var7, var8);\n                var2 = var7;\n                var1 = var6;\n            \n                if (var1 != 0x00) {\n                    var6 = 0x10c2;\n                    var7 = var1;\n                    var6, var7 = func_227E(var7);\n                    var4 = var7;\n                    var3 = var6;\n                \n                    if (var3 != 0x00) {\n                        storage[0x08] = var4;\n                        var6 = 0x1150;\n                        var7 = msg.sender;\n                        var8 = arg1;\n                        func_237B(var7, var8);\n                    \n                    label_1150:\n                        var6 = 0x115a;\n                        var7 = arg0;\n                        var8 = var2;\n                        func_1E9E(var7, var8);\n                        var6 = 0x116f;\n                        var7 = storage[0x0a];\n                        var8 = var3;\n                        var6 = func_1FB4(var7, var8);\n                        storage[0x0a] = var6;\n                        var temp1 = memory[0x40:0x60];\n                        memory[temp1:temp1 + 0x20] = arg1;\n                        var temp2 = memory[0x40:0x60];\n                        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                        return 0x01;\n                    } else {\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                        var temp4 = temp3 + 0x04;\n                        var temp5 = temp4 + 0x20;\n                        memory[temp4:temp4 + 0x20] = temp5 - temp4;\n                        memory[temp5:temp5 + 0x20] = 0x1e;\n                        var temp6 = temp5 + 0x20;\n                        memory[temp6:temp6 + 0x20] = 0x496e73756666696369656e7420746f6b656e7320746f20646f20746861740000;\n                        var temp7 = memory[0x40:0x60];\n                        revert(memory[temp7:temp7 + (temp6 + 0x20) - temp7]);\n                    }\n                } else {\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp9 = temp8 + 0x04;\n                    var temp10 = temp9 + 0x20;\n                    memory[temp9:temp9 + 0x20] = temp10 - temp9;\n                    memory[temp10:temp10 + 0x20] = 0x1e;\n                    var temp11 = temp10 + 0x20;\n                    memory[temp11:temp11 + 0x20] = 0x496e73756666696369656e7420746f6b656e7320746f20646f20746861740000;\n                    var temp12 = memory[0x40:0x60];\n                    revert(memory[temp12:temp12 + (temp11 + 0x20) - temp12]);\n                }\n            } else {\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp14 = temp13 + 0x04;\n                var temp15 = temp14 + 0x20;\n                memory[temp14:temp14 + 0x20] = temp15 - temp14;\n                memory[temp15:temp15 + 0x20] = 0x26;\n                var temp16 = temp15 + 0x20;\n                memory[temp16:temp16 + 0x20] = 0x596f752063616e6e6f74207472616e7366657220746f6b656e7320746f20796f;\n                memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = 0x757273656c660000000000000000000000000000000000000000000000000000;\n                var temp17 = memory[0x40:0x60];\n                revert(memory[temp17:temp17 + (temp16 + 0x40) - temp17]);\n            }\n        } else {\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp24 = temp23 + 0x04;\n            var temp25 = temp24 + 0x20;\n            memory[temp24:temp24 + 0x20] = temp25 - temp24;\n            memory[temp25:temp25 + 0x20] = 0x2a;\n            var temp26 = temp25 + 0x20;\n            memory[temp26:temp26 + 0x20] = 0x416d6f756e74206f6620746f6b656e73206d7573742062652067726561746572;\n            memory[temp26 + 0x20:temp26 + 0x20 + 0x20] = 0x207468616e207a65726f00000000000000000000000000000000000000000000;\n            var temp27 = memory[0x40:0x60];\n            revert(memory[temp27:temp27 + (temp26 + 0x40) - temp27]);\n        }\n    }\n    \n    function expectedFunds(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = arg0 == var2;\n    \n        if (var3) {\n            if (!var3) {\n            label_120C:\n            \n                if (arg0 <= storage[0x09]) {\n                    var3 = 0x1225;\n                    var var4 = arg0;\n                    var3, var4 = func_227E(var4);\n                \n                label_1225:\n                    var1 = var3;\n                \n                    if (!arg1) {\n                    label_1268:\n                        var0 = var1;\n                    \n                    label_126C:\n                        return var0;\n                    } else {\n                        var3 = 0x1261;\n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0x40;\n                        memory[temp0:temp0 + 0x20] = storage[0x02];\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x03];\n                        var4 = temp0;\n                        var var5 = var1;\n                        var3, var4 = func_1B94(var4, var5);\n                        var2 = var4;\n                        var1 = var2;\n                        goto label_1268;\n                    }\n                } else {\n                    arg0 = storage[0x09];\n                    var3 = 0x1225;\n                    var4 = arg0;\n                    var3, var4 = func_227E(var4);\n                    goto label_1225;\n                }\n            } else {\n            label_1204:\n                var0 = 0x00;\n                goto label_126C;\n            }\n        } else if (storage[0x09] != 0x00) { goto label_120C; }\n        else { goto label_1204; }\n    }\n    \n    function expectedTokens(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 == var2) {\n            var0 = 0x00;\n            goto label_12DA;\n        } else if (!arg1) {\n        label_12CA:\n            var var3 = 0x12d3;\n            var var4 = arg0;\n            var3, var4 = func_1D35(var4);\n            var2 = var3;\n            var0 = var2;\n        \n        label_12DA:\n            return var0;\n        } else {\n            var3 = 0x12c3;\n            var temp0 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp0 + 0x40;\n            memory[temp0:temp0 + 0x20] = storage[0x00];\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x01];\n            var4 = temp0;\n            var var5 = arg0;\n            var3, var4 = func_1B94(var4, var5);\n            var1 = var4;\n            arg0 = var1;\n            goto label_12CA;\n        }\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = arg0;\n    \n        if (var5 > 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n        \n            if (var5 <= storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                var var6 = 0x144c;\n                var var7 = arg0;\n                var6, var7 = func_227E(var7);\n                var1 = var7;\n                var0 = var6;\n            \n                if (var0 != 0x00) {\n                    storage[0x08] = var1;\n                    var6 = 0x1503;\n                    var temp0 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp0 + 0x40;\n                    memory[temp0:temp0 + 0x20] = storage[0x02];\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x03];\n                    var7 = temp0;\n                    var var8 = var0;\n                    var6, var7 = func_1B94(var7, var8);\n                    var3 = var7;\n                    var2 = var6;\n                \n                    if (var2 != 0x00) {\n                        var6 = 0x158a;\n                        var7 = msg.sender;\n                        var8 = arg0;\n                        func_237B(var7, var8);\n                    \n                    label_158A:\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x0b;\n                        var4 = keccak256(memory[0x00:0x40]);\n                        var6 = 0x15e2;\n                        var7 = storage[var4 + 0x02];\n                        var8 = var3;\n                        var6 = func_1FB4(var7, var8);\n                        storage[var4 + 0x02] = var6;\n                        var6 = 0x15ff;\n                        var7 = storage[0x0a];\n                        var8 = var2;\n                        var6 = func_1FB4(var7, var8);\n                        storage[0x0a] = var6;\n                        var6 = msg.sender;\n                        var7 = 0xafd310387603da0dcf44f11f54b04254b548c58b194e75f85851e849f0eef307;\n                        var8 = arg0;\n                        var var9 = var0;\n                        var var10 = 0x0de0b6b3a7640000;\n                        var var11 = storage[0x08];\n                    \n                        if (!var10) { assert(); }\n                    \n                        var temp1 = memory[0x40:0x60];\n                        memory[temp1:temp1 + 0x20] = var8;\n                        var temp2 = temp1 + 0x20;\n                        memory[temp2:temp2 + 0x20] = var9;\n                        var temp3 = temp2 + 0x20;\n                        memory[temp3:temp3 + 0x20] = var11 / var10;\n                        var temp4 = temp3 + 0x20;\n                        memory[temp4:temp4 + 0x20] = block.timestamp;\n                        var temp5 = memory[0x40:0x60];\n                        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [stack[-5], stack[-6]]);\n                        return;\n                    } else {\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                        var temp7 = temp6 + 0x04;\n                        var temp8 = temp7 + 0x20;\n                        memory[temp7:temp7 + 0x20] = temp8 - temp7;\n                        memory[temp8:temp8 + 0x20] = 0x1e;\n                        var temp9 = temp8 + 0x20;\n                        memory[temp9:temp9 + 0x20] = 0x496e73756666696369656e7420746f6b656e7320746f20646f20746861740000;\n                        var temp10 = memory[0x40:0x60];\n                        revert(memory[temp10:temp10 + (temp9 + 0x20) - temp10]);\n                    }\n                } else {\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp12 = temp11 + 0x04;\n                    var temp13 = temp12 + 0x20;\n                    memory[temp12:temp12 + 0x20] = temp13 - temp12;\n                    memory[temp13:temp13 + 0x20] = 0x1e;\n                    var temp14 = temp13 + 0x20;\n                    memory[temp14:temp14 + 0x20] = 0x496e73756666696369656e7420746f6b656e7320746f20646f20746861740000;\n                    var temp15 = memory[0x40:0x60];\n                    revert(memory[temp15:temp15 + (temp14 + 0x20) - temp15]);\n                }\n            } else {\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp17 = temp16 + 0x04;\n                var temp18 = temp17 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp18 - temp17;\n                memory[temp18:temp18 + 0x20] = 0x1a;\n                var temp19 = temp18 + 0x20;\n                memory[temp19:temp19 + 0x20] = 0x596f752068617665206e6f7420656e6f75676820746f6b656e73000000000000;\n                var temp20 = memory[0x40:0x60];\n                revert(memory[temp20:temp20 + (temp19 + 0x20) - temp20]);\n            }\n        } else {\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp22 = temp21 + 0x04;\n            var temp23 = temp22 + 0x20;\n            memory[temp22:temp22 + 0x20] = temp23 - temp22;\n            memory[temp23:temp23 + 0x20] = 0x2a;\n            var temp24 = temp23 + 0x20;\n            memory[temp24:temp24 + 0x20] = 0x416d6f756e74206f6620746f6b656e73206d7573742062652067726561746572;\n            memory[temp24 + 0x20:temp24 + 0x20 + 0x20] = 0x207468616e207a65726f00000000000000000000000000000000000000000000;\n            var temp25 = memory[0x40:0x60];\n            revert(memory[temp25:temp25 + (temp24 + 0x40) - temp25]);\n        }\n    }\n    \n    function exit() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n        var var0 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n    \n        if (var0 <= 0x00) {\n        label_16E3:\n            var var1 = 0x16eb;\n            withdraw();\n            return;\n        } else {\n            var1 = 0x16e2;\n            var var2 = var0;\n            sell(var2);\n            goto label_16E3;\n        }\n    }\n    \n    function donate() {\n        var var0 = 0x1703;\n        var var1 = storage[0x0a];\n        var var2 = msg.value;\n        var0 = func_1FB4(var1, var2);\n        storage[0x0a] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = block.timestamp;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x106aac375bbcf013d1e52338bbf9e740009a1a3a6869f8daa1b72aa1620f5fec, msg.sender]);\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x1773;\n        var var7 = msg.sender;\n        var6 = dividendsOf(var7);\n        var0 = var6;\n    \n        if (var0 > 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n            var1 = keccak256(memory[0x00:0x40]);\n            var6 = 0x1845;\n            var7 = storage[var1 + 0x04];\n            var var8 = var0;\n            var6 = func_20E5(var7, var8);\n            storage[var1 + 0x04] = var6;\n            var6 = 0x1880;\n            var temp0 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp0 + 0x40;\n            memory[temp0:temp0 + 0x20] = storage[0x00];\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x01];\n            var7 = temp0;\n            var8 = var0;\n            var6, var7 = func_1B94(var7, var8);\n            var3 = var7;\n            var2 = var6;\n        \n            if (var2 == 0x00) {\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp17 = temp16 + 0x04;\n                var temp18 = temp17 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp18 - temp17;\n                memory[temp18:temp18 + 0x20] = 0x21;\n                var temp19 = temp18 + 0x20;\n                memory[temp19:temp19 + 0x20] = 0x496e73756666696369656e74206469766964656e647320746f20646f20746861;\n                memory[temp19 + 0x20:temp19 + 0x20 + 0x20] = 0x7400000000000000000000000000000000000000000000000000000000000000;\n                var temp20 = memory[0x40:0x60];\n                revert(memory[temp20:temp20 + (temp19 + 0x40) - temp20]);\n            } else if (storage[var1] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) {\n            label_1A39:\n                var6 = 0x1a42;\n                var7 = var3;\n                var6, var7 = func_1D35(var7);\n                var5 = var7;\n                var4 = var6;\n            \n                if (var4 != 0x00) {\n                    storage[0x08] = var5;\n                    var6 = 0x1af6;\n                    var7 = msg.sender;\n                    var8 = var4;\n                    func_1E9E(var7, var8);\n                    var6 = 0x1b0b;\n                    var7 = storage[0x0a];\n                    var8 = var2;\n                    var6 = func_1FB4(var7, var8);\n                    storage[0x0a] = var6;\n                    var6 = msg.sender;\n                    var7 = 0x1abe689c7914cafd54f789eb0851e90cba235302161e81e259ee4c357c374d82;\n                    var8 = var0;\n                    var var9 = var4;\n                    var var10 = 0x0de0b6b3a7640000;\n                    var var11 = storage[0x08];\n                \n                    if (!var10) { assert(); }\n                \n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = var8;\n                    var temp2 = temp1 + 0x20;\n                    memory[temp2:temp2 + 0x20] = var9;\n                    var temp3 = temp2 + 0x20;\n                    memory[temp3:temp3 + 0x20] = var11 / var10;\n                    var temp4 = temp3 + 0x20;\n                    memory[temp4:temp4 + 0x20] = block.timestamp;\n                    var temp5 = memory[0x40:0x60];\n                    log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [stack[-5], stack[-6]]);\n                    return;\n                } else {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp7 = temp6 + 0x04;\n                    var temp8 = temp7 + 0x20;\n                    memory[temp7:temp7 + 0x20] = temp8 - temp7;\n                    memory[temp8:temp8 + 0x20] = 0x21;\n                    var temp9 = temp8 + 0x20;\n                    memory[temp9:temp9 + 0x20] = 0x496e73756666696369656e74206469766964656e647320746f20646f20746861;\n                    memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = 0x7400000000000000000000000000000000000000000000000000000000000000;\n                    var temp10 = memory[0x40:0x60];\n                    revert(memory[temp10:temp10 + (temp9 + 0x40) - temp10]);\n                }\n            } else {\n                var6 = 0x1997;\n                var7 = msg.sender;\n                var8 = storage[var1] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var9 = var2;\n                var10 = var0;\n                var6 = func_1BF7(var7, var8, var9, var10);\n                var2 = var6;\n            \n                if (var2 != 0x00) { goto label_1A39; }\n            \n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp12 = temp11 + 0x04;\n                var temp13 = temp12 + 0x20;\n                memory[temp12:temp12 + 0x20] = temp13 - temp12;\n                memory[temp13:temp13 + 0x20] = 0x21;\n                var temp14 = temp13 + 0x20;\n                memory[temp14:temp14 + 0x20] = 0x496e73756666696369656e74206469766964656e647320746f20646f20746861;\n                memory[temp14 + 0x20:temp14 + 0x20 + 0x20] = 0x7400000000000000000000000000000000000000000000000000000000000000;\n                var temp15 = memory[0x40:0x60];\n                revert(memory[temp15:temp15 + (temp14 + 0x40) - temp15]);\n            }\n        } else {\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp22 = temp21 + 0x04;\n            var temp23 = temp22 + 0x20;\n            memory[temp22:temp22 + 0x20] = temp23 - temp22;\n            memory[temp23:temp23 + 0x20] = 0x15;\n            var temp24 = temp23 + 0x20;\n            memory[temp24:temp24 + 0x20] = 0x596f752068617665206e6f206469766964656e64730000000000000000000000;\n            var temp25 = memory[0x40:0x60];\n            revert(memory[temp25:temp25 + (temp24 + 0x20) - temp25]);\n        }\n    }\n    \n    function func_1B94(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 != 0x00) {\n            var temp0 = arg0;\n            var var2 = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n            var var3 = 0x1bce;\n            var var4 = arg1;\n            var var5 = memory[temp0:temp0 + 0x20];\n            var3 = func_203E(var4, var5);\n        \n            if (!var2) { assert(); }\n        \n            var temp1 = var3 / var2;\n            var0 = temp1;\n            var2 = 0x1bed;\n            var3 = arg1;\n            var4 = var0;\n            var2 = func_21F9(var3, var4);\n            var1 = var2;\n        \n        label_1BF0:\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var1 = 0x00;\n            var0 = var1;\n            goto label_1BF0;\n        }\n    }\n    \n    function func_1BF7(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var1 = keccak256(memory[0x00:0x40]);\n    \n        if (storage[var1 + 0x01] < 0x8ac7230489e80000) { return arg2; }\n    \n        var var4 = 0x1c86;\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x20] = storage[0x06];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x07];\n        var var5 = temp0;\n        var var6 = arg2;\n        var4, var5 = func_1B94(var5, var6);\n        var3 = var5;\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x1ca1;\n        var5 = storage[var1 + 0x03];\n        var6 = var2;\n        var4 = func_1FB4(var5, var6);\n        storage[var1 + 0x03] = var4;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = arg3;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = var2;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = block.timestamp;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x870e4e1dcfab6c09707448d3659b3d8097c084bf06e7467d6029940cd7122ee0, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return var3;\n    }\n    \n    function func_1D35(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x1d72;\n        var var7 = 0x204fce5e3e25026110000000;\n        var var8 = 0x1d64;\n        var var9 = storage[0x08];\n        var var10 = 0x02;\n        var8 = func_203E(var9, var10);\n        var6 = func_1D64(var7, var8);\n        var2 = var6;\n        var6 = 0x1de4;\n        var7 = 0x1dc3;\n        var8 = 0x0de0b6b3a7640000;\n        var9 = 0x1db5;\n        var10 = arg0;\n        var var11 = 0x1da7;\n        var var12 = 0x204fce5e3e25026110000000;\n        var var13 = 0x08;\n        var11 = func_203E(var12, var13);\n        var9 = func_1DA7(var10, var11);\n        var7 = func_1DB5(var8, var9);\n        var6 = func_1DC3(var2, var7);\n        var3 = var6;\n        var6 = 0x1e06;\n        var7 = 0x204fce5e3e25026110000000;\n        var8 = 0x02;\n        var6 = func_203E(var7, var8);\n        var7 = 0x1e3b;\n        var8 = 0x0de0b6b3a7640000;\n        var9 = 0x1e2d;\n        var10 = var2;\n        var11 = 0x1e1f;\n        var12 = var3;\n        var11 = func_24ED(var12);\n        var9 = func_1E1F(var10, var11);\n        var7 = func_1E2D(var8, var9);\n    \n        if (!var6) { assert(); }\n    \n        var temp0 = var7 / var6;\n        var4 = temp0;\n        var6 = 0x1e8d;\n        var7 = 0x0de0b6b3a7640000;\n        var8 = 0x1e72;\n        var9 = 0x204fce5e3e25026110000000;\n        var10 = var4;\n        var8 = func_203E(var9, var10);\n        var6 = func_1E72(var7, var8);\n        arg0 = var6;\n        r0 = var4;\n        return r0, arg0;\n    }\n    \n    function func_1D64(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_21F9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1DA7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_203E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1DB5(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_203E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1DC3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x1dd6;\n        var var1 = arg0;\n        var var2 = var1;\n        var0 = func_203E(var1, var2);\n        var temp0 = arg1;\n        arg1 = var0;\n        var0 = temp0;\n        r0 = func_1FB4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E1F(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_21F9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E2D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_203E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E72(var arg0, var arg1) returns (var r0) {\n        if (!arg0) { assert(); }\n    \n        var temp0 = arg1 / arg0;\n        arg0 = storage[0x08];\n        arg1 = temp0;\n        r0 = func_1FB4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E9E(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = storage[0x09] > 0x00;\n    \n        if (!var1) {\n        label_1F2D:\n            var var2 = 0x1f42;\n            var var3 = storage[0x09];\n            var var4 = arg1;\n            var2 = func_1FB4(var3, var4);\n            storage[0x09] = var2;\n            var2 = 0x1f5f;\n            var3 = storage[var0 + 0x01];\n            var4 = arg1;\n            var2 = func_1FB4(var3, var4);\n            storage[var0 + 0x01] = var2;\n        \n            if (!var1) {\n            label_1FAE:\n                return;\n            } else {\n                var2 = 0x1fa5;\n                var3 = storage[0x09];\n                var4 = 0x1f88;\n                var var5 = arg1;\n                var var6 = storage[0x0a];\n                var4 = func_203E(var5, var6);\n                var2 = func_1F88(var0, var3, var4);\n                storage[var0 + 0x04] = var2;\n                goto label_1FAE;\n            }\n        } else {\n            var2 = storage[0x09];\n            var3 = 0x1f1c;\n            var4 = 0x1f0b;\n            var5 = storage[0x09];\n            var6 = arg1;\n            var4 = func_1FB4(var5, var6);\n            var3 = func_1F0B(var4);\n        \n            if (!var2) { assert(); }\n        \n            storage[0x0a] = var3 / var2;\n            goto label_1F2D;\n        }\n    }\n    \n    function func_1F0B(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x0a];\n        var var0 = temp0;\n        r0 = func_203E(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1F88(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg2 / arg1;\n        arg1 = storage[arg0 + 0x04];\n        arg2 = temp0;\n        r0 = func_20E5(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1FB4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        var temp3 = temp2 + 0x20;\n        memory[temp2:temp2 + 0x20] = temp3 - temp2;\n        memory[temp3:temp3 + 0x20] = 0x0a;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x616464206661696c656400000000000000000000000000000000000000000000;\n        var temp5 = memory[0x40:0x60];\n        revert(memory[temp5:temp5 + (temp4 + 0x20) - temp5]);\n    }\n    \n    function func_203E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 == 0x00) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = temp0 * arg1;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        var temp3 = temp2 + 0x20;\n        memory[temp2:temp2 + 0x20] = temp3 - temp2;\n        memory[temp3:temp3 + 0x20] = 0x0a;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x6d756c206661696c656400000000000000000000000000000000000000000000;\n        var temp5 = memory[0x40:0x60];\n        revert(memory[temp5:temp5 + (temp4 + 0x20) - temp5]);\n    }\n    \n    function func_20E5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 i>= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        var temp3 = temp2 + 0x20;\n        memory[temp2:temp2 + 0x20] = temp3 - temp2;\n        memory[temp3:temp3 + 0x20] = 0x0a;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x616464206661696c656400000000000000000000000000000000000000000000;\n        var temp5 = memory[0x40:0x60];\n        revert(memory[temp5:temp5 + (temp4 + 0x20) - temp5]);\n    }\n    \n    function func_216F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 - arg1;\n    \n        if (var1 i<= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        var temp3 = temp2 + 0x20;\n        memory[temp2:temp2 + 0x20] = temp3 - temp2;\n        memory[temp3:temp3 + 0x20] = 0x0a;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x737562206661696c656400000000000000000000000000000000000000000000;\n        var temp5 = memory[0x40:0x60];\n        revert(memory[temp5:temp5 + (temp4 + 0x20) - temp5]);\n    }\n    \n    function func_21F9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        var temp2 = temp1 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2 - temp1;\n        memory[temp2:temp2 + 0x20] = 0x0a;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = 0x737562206661696c656400000000000000000000000000000000000000000000;\n        var temp4 = memory[0x40:0x60];\n        revert(memory[temp4:temp4 + (temp3 + 0x20) - temp4]);\n    }\n    \n    function func_227E(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x22a7;\n        var var6 = storage[0x08];\n        var var7 = 0x204fce5e3e25026110000000;\n        var5 = func_21F9(var6, var7);\n        var2 = var5;\n        var5 = 0x230b;\n        var6 = 0x0de0b6b3a7640000;\n        var7 = 0x22d4;\n        var var8 = 0x204fce5e3e25026110000000;\n        var var9 = arg0;\n        var7 = func_203E(var8, var9);\n        var5 = func_22D4(var2, var6, var7);\n        var3 = var5;\n        var5 = 0x2329;\n        var6 = 0x0de0b6b3a7640000;\n        var7 = 0x02;\n        var5 = func_203E(var6, var7);\n        var6 = 0x234e;\n        var7 = arg0;\n        var8 = 0x2340;\n        var9 = var2;\n        var var10 = var3;\n        var8 = func_1FB4(var9, var10);\n        var6 = func_2340(var7, var8);\n    \n        if (!var5) { assert(); }\n    \n        var temp0 = var6 / var5;\n        var4 = temp0;\n        var5 = 0x0de0b6b3a7640000;\n        var6 = var4;\n    \n        if (!var5) { assert(); }\n    \n        arg0 = var3;\n        r0 = var6 / var5;\n        return r0, arg0;\n    }\n    \n    function func_22D4(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        arg1 = arg2 / arg1;\n        arg2 = 0x22fd;\n        var var0 = arg0;\n        var var1 = 0x204fce5e3e25026110000000;\n        arg2 = func_1FB4(var0, var1);\n        var temp0 = arg1;\n        arg1 = arg2;\n        arg2 = temp0;\n        r0 = func_21F9(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2340(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_203E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_237B(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = 0x00;\n    \n        if (storage[0x09] != arg1) {\n        label_23F6:\n            var var2 = storage[0x09];\n            var var3 = 0x2422;\n            var var4 = 0x2411;\n            var var5 = storage[0x09];\n            var var6 = arg1;\n            var4 = func_21F9(var5, var6);\n            var3 = func_2411(var4);\n        \n            if (!var2) { assert(); }\n        \n            storage[0x0a] = var3 / var2;\n            var2 = 0x2447;\n            var3 = storage[0x09];\n            var4 = arg1;\n            var2 = func_21F9(var3, var4);\n            storage[0x09] = var2;\n            var2 = 0x2464;\n            var3 = storage[var0 + 0x01];\n            var4 = arg1;\n            var2 = func_21F9(var3, var4);\n            storage[var0 + 0x01] = var2;\n        \n            if (storage[0x09] > 0x00) {\n                var2 = 0x24af;\n                var3 = storage[0x09];\n                var4 = 0x2492;\n                var5 = arg1;\n                var6 = storage[0x0a];\n                var4 = func_203E(var5, var6);\n                var2 = func_2492(var0, var3, var4);\n                storage[var0 + 0x04] = var2;\n                return;\n            } else if (var1 == 0x00) {\n            label_24E6:\n                return;\n            } else {\n                var2 = 0x24dd;\n                var3 = storage[var0 + 0x04];\n                var4 = var1;\n                var2 = func_216F(var3, var4);\n                storage[var0 + 0x04] = var2;\n                goto label_24E6;\n            }\n        } else {\n            var2 = storage[0x09];\n            var3 = 0x23e9;\n            var4 = storage[0x0a];\n            var5 = storage[var0 + 0x01];\n            var3 = func_203E(var4, var5);\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n            goto label_23F6;\n        }\n    }\n    \n    function func_2411(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x0a];\n        var var0 = temp0;\n        r0 = func_203E(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2492(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg2 / arg1;\n        arg1 = storage[arg0 + 0x04];\n        arg2 = temp0;\n        r0 = func_216F(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_24ED(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = 0x24fd;\n        var var4 = arg0;\n        var var5 = 0x01;\n        var3 = func_1FB4(var4, var5);\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_2540:\n            return var0;\n        } else {\n        label_2516:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = 0x252f;\n            var4 = var0;\n            var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = func_2528(var1, var4, var5);\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_2540; }\n            else { goto label_2516; }\n        }\n    }\n    \n    function func_2528(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        arg2 = arg0;\n        r0 = func_1FB4(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2546() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x00;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = 0x00;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = 0x00;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00F0:\n            var var0 = 0x0134;\n            var var1 = 0x012f;\n            var temp0 = msg.data.length;\n            var temp1 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n            var var2 = temp1;\n            memory[var2:var2 + 0x20] = temp0;\n            memory[var2 + 0x20:var2 + 0x20 + temp0] = msg.data[0x00:0x00 + temp0];\n            var1 = func_0567(var2);\n            func_012F(var1);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x65318b) {\n                // Dispatch table entry for dividendsOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0177;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = dividendsOf(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var1;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01a2;\n                var2 = name();\n                var temp4 = memory[0x40:0x60];\n                var var3 = temp4;\n                var var4 = var3;\n                var temp5 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp5 - var4;\n                var temp6 = var2;\n                memory[temp5:temp5 + 0x20] = memory[temp6:temp6 + 0x20];\n                var var5 = temp5 + 0x20;\n                var var7 = memory[temp6:temp6 + 0x20];\n                var var6 = temp6 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_01E2:\n                    var temp7 = var7;\n                    var5 = temp7 + var5;\n                    var6 = temp7 & 0x1f;\n                \n                    if (!var6) {\n                        var temp8 = memory[0x40:0x60];\n                        return memory[temp8:temp8 + var5 - temp8];\n                    } else {\n                        var temp9 = var6;\n                        var temp10 = var5 - temp9;\n                        memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                        var temp11 = memory[0x40:0x60];\n                        return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n                    }\n                } else {\n                label_01D0:\n                    var temp12 = var11;\n                    memory[var9 + temp12:var9 + temp12 + 0x20] = memory[var10 + temp12:var10 + temp12 + 0x20];\n                    var11 = temp12 + 0x20;\n                \n                    if (var11 >= var8) { goto label_01E2; }\n                    else { goto label_01D0; }\n                }\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0232;\n                var1 = totalSupply();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x025d;\n                var2 = decimals();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0xff;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x028e;\n                withdraw();\n                stop();\n            } else if (var0 == 0x4b750334) {\n                // Dispatch table entry for sellPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02a5;\n                var1 = sellPrice();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var1;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02fc;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x8620410b) {\n                // Dispatch table entry for buyPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0327;\n                var1 = buyPrice();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0352;\n                var2 = symbol();\n                var temp23 = memory[0x40:0x60];\n                var3 = temp23;\n                var4 = var3;\n                var temp24 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp24 - var4;\n                var temp25 = var2;\n                memory[temp24:temp24 + 0x20] = memory[temp25:temp25 + 0x20];\n                var5 = temp24 + 0x20;\n                var7 = memory[temp25:temp25 + 0x20];\n                var6 = temp25 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0392:\n                    var temp26 = var7;\n                    var5 = temp26 + var5;\n                    var6 = temp26 & 0x1f;\n                \n                    if (!var6) {\n                        var temp27 = memory[0x40:0x60];\n                        return memory[temp27:temp27 + var5 - temp27];\n                    } else {\n                        var temp28 = var6;\n                        var temp29 = var5 - temp28;\n                        memory[temp29:temp29 + 0x20] = ~(0x0100 ** (0x20 - temp28) - 0x01) & memory[temp29:temp29 + 0x20];\n                        var temp30 = memory[0x40:0x60];\n                        return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n                    }\n                } else {\n                label_0380:\n                    var temp31 = var11;\n                    memory[var9 + temp31:var9 + temp31 + 0x20] = memory[var10 + temp31:var10 + temp31 + 0x20];\n                    var11 = temp31 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0392; }\n                    else { goto label_0380; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0418;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp32 = memory[0x40:0x60];\n                memory[temp32:temp32 + 0x20] = !!var1;\n                var temp33 = memory[0x40:0x60];\n                return memory[temp33:temp33 + (temp32 + 0x20) - temp33];\n            } else if (var0 == 0xbe2eaad4) {\n                // Dispatch table entry for expectedFunds(uint256,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0469;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = expectedFunds(var2, var3);\n                var temp34 = memory[0x40:0x60];\n                memory[temp34:temp34 + 0x20] = var1;\n                var temp35 = memory[0x40:0x60];\n                return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n            } else if (var0 == 0xc5f60620) {\n                // Dispatch table entry for expectedTokens(uint256,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = expectedTokens(var2, var3);\n                var temp36 = memory[0x40:0x60];\n                memory[temp36:temp36 + 0x20] = var1;\n                var temp37 = memory[0x40:0x60];\n                return memory[temp37:temp37 + (temp36 + 0x20) - temp37];\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f7;\n                var2 = msg.data[0x04:0x24];\n                sell(var2);\n                stop();\n            } else if (var0 == 0xe9fad8ee) {\n                // Dispatch table entry for exit()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x050e;\n                exit();\n                stop();\n            } else if (var0 == 0xed88c68e) {\n                // Dispatch table entry for donate()\n                var1 = 0x0518;\n                donate();\n                stop();\n            } else if (var0 == 0xf088d547) {\n                // Dispatch table entry for buy(address)\n                var1 = 0x054e;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                buy(var2);\n                stop();\n            } else if (var0 == 0xfdb5a03e) {\n                // Dispatch table entry for reinvest()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0565;\n                reinvest();\n                stop();\n            } else { goto label_00F0; }\n        }\n    }\n    \n    function func_012F(var arg0) {\n        buy(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0567(var arg0) returns (var r0) { return memory[arg0 + 0x14:arg0 + 0x14 + 0x20]; }\n    \n    function buy(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x05b3;\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x20] = storage[0x00];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x01];\n        var var6 = temp0;\n        var var7 = msg.value;\n        var5, var6 = func_1B94(var6, var7);\n        var1 = var6;\n        var0 = var5;\n    \n        if (var0 != 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n            var2 = keccak256(memory[0x00:0x40]);\n            var5 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff != 0x00;\n        \n            if (var5) {\n                var5 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender;\n            \n                if (!var5) { goto label_070A; }\n                else { goto label_06CB; }\n            } else if (!var5) {\n            label_070A:\n            \n                if (!var5) {\n                label_0753:\n                \n                    if (storage[var2] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) {\n                    label_0843:\n                        var5 = 0x084c;\n                        var6 = var1;\n                        var5, var6 = func_1D35(var6);\n                        var4 = var6;\n                        var3 = var5;\n                    \n                        if (var3 != 0x00) {\n                            storage[0x08] = var4;\n                            var5 = 0x08da;\n                            var6 = msg.sender;\n                            var7 = var3;\n                            func_1E9E(var6, var7);\n                            var5 = 0x08ef;\n                            var6 = storage[0x0a];\n                            var7 = var0;\n                            var5 = func_1FB4(var6, var7);\n                            storage[0x0a] = var5;\n                            var5 = msg.sender;\n                            var6 = 0xd721454499cf9c37b757e03b9d675df451c229048129d6e2d552216a035e6a55;\n                            var7 = msg.value;\n                            var var8 = var3;\n                            var var9 = 0x0de0b6b3a7640000;\n                            var var10 = storage[0x08];\n                        \n                            if (!var9) { assert(); }\n                        \n                            var temp1 = memory[0x40:0x60];\n                            memory[temp1:temp1 + 0x20] = var7;\n                            var temp2 = temp1 + 0x20;\n                            memory[temp2:temp2 + 0x20] = var8;\n                            var temp3 = temp2 + 0x20;\n                            memory[temp3:temp3 + 0x20] = var10 / var9;\n                            var temp4 = temp3 + 0x20;\n                            memory[temp4:temp4 + 0x20] = block.timestamp;\n                            var temp5 = memory[0x40:0x60];\n                            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [stack[-5], stack[-6]]);\n                            return;\n                        } else {\n                            var temp6 = memory[0x40:0x60];\n                            memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp7 = temp6 + 0x04;\n                            var temp8 = temp7 + 0x20;\n                            memory[temp7:temp7 + 0x20] = temp8 - temp7;\n                            memory[temp8:temp8 + 0x20] = 0x1b;\n                            var temp9 = temp8 + 0x20;\n                            memory[temp9:temp9 + 0x20] = 0x496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000;\n                            var temp10 = memory[0x40:0x60];\n                            revert(memory[temp10:temp10 + (temp9 + 0x20) - temp10]);\n                        }\n                    } else {\n                    label_0798:\n                        var5 = 0x07c7;\n                        var6 = msg.sender;\n                        var7 = storage[var2] & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var8 = var0;\n                        var9 = msg.value;\n                        var5 = func_1BF7(var6, var7, var8, var9);\n                    \n                    label_07C7:\n                        var0 = var5;\n                    \n                        if (var0 != 0x00) { goto label_0843; }\n                    \n                        var temp11 = memory[0x40:0x60];\n                        memory[temp11:temp11 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                        var temp12 = temp11 + 0x04;\n                        var temp13 = temp12 + 0x20;\n                        memory[temp12:temp12 + 0x20] = temp13 - temp12;\n                        memory[temp13:temp13 + 0x20] = 0x1b;\n                        var temp14 = temp13 + 0x20;\n                        memory[temp14:temp14 + 0x20] = 0x496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000;\n                        var temp15 = memory[0x40:0x60];\n                        revert(memory[temp15:temp15 + (temp14 + 0x20) - temp15]);\n                    }\n                } else {\n                label_0710:\n                    var temp16 = var2;\n                    var temp17 = temp16;\n                    storage[temp17] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp17] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                \n                    if (storage[temp16] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { goto label_0843; }\n                    else { goto label_0798; }\n                }\n            } else {\n            label_06CB:\n            \n                if (storage[var2] & 0xffffffffffffffffffffffffffffffffffffffff != 0x00) { goto label_0753; }\n                else { goto label_0710; }\n            }\n        } else {\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp19 = temp18 + 0x04;\n            var temp20 = temp19 + 0x20;\n            memory[temp19:temp19 + 0x20] = temp20 - temp19;\n            memory[temp20:temp20 + 0x20] = 0x1b;\n            var temp21 = temp20 + 0x20;\n            memory[temp21:temp21 + 0x20] = 0x496e636f6d696e672066756e647320697320746f6f20736d616c6c0000000000;\n            var temp22 = memory[0x40:0x60];\n            revert(memory[temp22:temp22 + (temp21 + 0x20) - temp22]);\n        }\n    }\n    \n    function dividendsOf(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0982;\n        var1 = func_2546();\n        var var2 = 0x00;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + 0xa0;\n        memory[temp1:temp1 + 0x20] = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = storage[temp0 + 0x01];\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = storage[temp0 + 0x02];\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = storage[temp0 + 0x03];\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = storage[temp0 + 0x04];\n        var1 = temp1;\n        var var3 = 0x0a6a;\n        var var4 = memory[var1 + 0x40:var1 + 0x40 + 0x20];\n        var var5 = memory[var1 + 0x60:var1 + 0x60 + 0x20];\n        var3 = func_1FB4(var4, var5);\n        var2 = var3;\n    \n        if (var2 i< 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x09] <= 0x00) {\n        label_0AC2:\n        \n            if (memory[var1 + 0x80:var1 + 0x80 + 0x20] i> 0x00) {\n                var3 = 0x0ae6;\n                var4 = var2;\n                var5 = memory[var1 + 0x80:var1 + 0x80 + 0x20];\n                var3 = func_216F(var4, var5);\n                var2 = var3;\n            \n                if (var2 i>= 0x00) { goto label_0B28; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (memory[var1 + 0x80:var1 + 0x80 + 0x20] i>= 0x00) {\n            label_0B17:\n            \n                if (var2 i< 0x00) { revert(memory[0x00:0x00]); }\n            \n            label_0B28:\n                return var2;\n            } else {\n                var3 = 0x0b14;\n                var4 = var2;\n                var5 = 0x00 - memory[var1 + 0x80:var1 + 0x80 + 0x20];\n                var3 = func_20E5(var4, var5);\n                var2 = var3;\n                goto label_0B17;\n            }\n        } else {\n            var3 = 0x0abf;\n            var4 = storage[0x09];\n            var5 = 0x0aa6;\n            var var6 = storage[0x0a];\n            var var7 = memory[var1 + 0x20:var1 + 0x20 + 0x20];\n            var5 = func_203E(var6, var7);\n            var3 = func_0AA6(var2, var4, var5);\n            var2 = var3;\n            goto label_0AC2;\n        }\n    }\n    \n    function func_0AA6(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg2 / arg1;\n        arg1 = arg0;\n        arg2 = temp0;\n        r0 = func_20E5(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x12;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x50616e7468656f6e2045636f73797374656d0000000000000000000000000000;\n        return r0;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x09]; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0b86;\n        var var3 = msg.sender;\n        var2 = dividendsOf(var3);\n        var0 = var2;\n    \n        if (var0 > 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n            var1 = keccak256(memory[0x00:0x40]);\n            var2 = 0x0c58;\n            var3 = storage[var1 + 0x04];\n            var var4 = var0;\n            var2 = func_20E5(var3, var4);\n            storage[var1 + 0x04] = var2;\n            var temp0 = var0;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            var2 = !temp2;\n        \n            if (!var2) {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = var0;\n                var temp4 = temp3 + 0x20;\n                memory[temp4:temp4 + 0x20] = block.timestamp;\n                var temp5 = memory[0x40:0x60];\n                log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xdf273cb619d95419a9cd0ec88123a0538c85064229baa6363788f743fff90deb, msg.sender]);\n                return;\n            } else {\n                var temp6 = returndata.length;\n                memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp8 = temp7 + 0x04;\n            var temp9 = temp8 + 0x20;\n            memory[temp8:temp8 + 0x20] = temp9 - temp8;\n            memory[temp9:temp9 + 0x20] = 0x15;\n            var temp10 = temp9 + 0x20;\n            memory[temp10:temp10 + 0x20] = 0x596f752068617665206e6f206469766964656e64730000000000000000000000;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + (temp10 + 0x20) - temp11]);\n        }\n    }\n    \n    function sellPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0de0b6b3a7640000;\n        var var2 = 0x0d2d;\n        var var3 = storage[0x08];\n        var var4 = 0x204fce5e3e25026110000000;\n        var2 = func_21F9(var3, var4);\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        return storage[keccak256(memory[0x00:0x40]) + 0x01];\n    }\n    \n    function buyPrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0de0b6b3a7640000;\n        var var2 = storage[0x08];\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x03;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x50414e0000000000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = arg1;\n    \n        if (var5 > 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n        \n            if (var5 > storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp19 = temp18 + 0x04;\n                var temp20 = temp19 + 0x20;\n                memory[temp19:temp19 + 0x20] = temp20 - temp19;\n                memory[temp20:temp20 + 0x20] = 0x1a;\n                var temp21 = temp20 + 0x20;\n                memory[temp21:temp21 + 0x20] = 0x596f752068617665206e6f7420656e6f75676820746f6b656e73000000000000;\n                var temp22 = memory[0x40:0x60];\n                revert(memory[temp22:temp22 + (temp21 + 0x20) - temp22]);\n            } else if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) {\n                var var6 = 0x103c;\n                var temp0 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp0 + 0x40;\n                memory[temp0:temp0 + 0x20] = storage[0x04];\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x05];\n                var var7 = temp0;\n                var var8 = arg1;\n                var6, var7 = func_1B94(var7, var8);\n                var2 = var7;\n                var1 = var6;\n            \n                if (var1 != 0x00) {\n                    var6 = 0x10c2;\n                    var7 = var1;\n                    var6, var7 = func_227E(var7);\n                    var4 = var7;\n                    var3 = var6;\n                \n                    if (var3 != 0x00) {\n                        storage[0x08] = var4;\n                        var6 = 0x1150;\n                        var7 = msg.sender;\n                        var8 = arg1;\n                        func_237B(var7, var8);\n                    \n                    label_1150:\n                        var6 = 0x115a;\n                        var7 = arg0;\n                        var8 = var2;\n                        func_1E9E(var7, var8);\n                        var6 = 0x116f;\n                        var7 = storage[0x0a];\n                        var8 = var3;\n                        var6 = func_1FB4(var7, var8);\n                        storage[0x0a] = var6;\n                        var temp1 = memory[0x40:0x60];\n                        memory[temp1:temp1 + 0x20] = arg1;\n                        var temp2 = memory[0x40:0x60];\n                        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                        return 0x01;\n                    } else {\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                        var temp4 = temp3 + 0x04;\n                        var temp5 = temp4 + 0x20;\n                        memory[temp4:temp4 + 0x20] = temp5 - temp4;\n                        memory[temp5:temp5 + 0x20] = 0x1e;\n                        var temp6 = temp5 + 0x20;\n                        memory[temp6:temp6 + 0x20] = 0x496e73756666696369656e7420746f6b656e7320746f20646f20746861740000;\n                        var temp7 = memory[0x40:0x60];\n                        revert(memory[temp7:temp7 + (temp6 + 0x20) - temp7]);\n                    }\n                } else {\n                    var temp8 = memory[0x40:0x60];\n                    memory[temp8:temp8 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp9 = temp8 + 0x04;\n                    var temp10 = temp9 + 0x20;\n                    memory[temp9:temp9 + 0x20] = temp10 - temp9;\n                    memory[temp10:temp10 + 0x20] = 0x1e;\n                    var temp11 = temp10 + 0x20;\n                    memory[temp11:temp11 + 0x20] = 0x496e73756666696369656e7420746f6b656e7320746f20646f20746861740000;\n                    var temp12 = memory[0x40:0x60];\n                    revert(memory[temp12:temp12 + (temp11 + 0x20) - temp12]);\n                }\n            } else {\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp14 = temp13 + 0x04;\n                var temp15 = temp14 + 0x20;\n                memory[temp14:temp14 + 0x20] = temp15 - temp14;\n                memory[temp15:temp15 + 0x20] = 0x26;\n                var temp16 = temp15 + 0x20;\n                memory[temp16:temp16 + 0x20] = 0x596f752063616e6e6f74207472616e7366657220746f6b656e7320746f20796f;\n                memory[temp16 + 0x20:temp16 + 0x20 + 0x20] = 0x757273656c660000000000000000000000000000000000000000000000000000;\n                var temp17 = memory[0x40:0x60];\n                revert(memory[temp17:temp17 + (temp16 + 0x40) - temp17]);\n            }\n        } else {\n            var temp23 = memory[0x40:0x60];\n            memory[temp23:temp23 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp24 = temp23 + 0x04;\n            var temp25 = temp24 + 0x20;\n            memory[temp24:temp24 + 0x20] = temp25 - temp24;\n            memory[temp25:temp25 + 0x20] = 0x2a;\n            var temp26 = temp25 + 0x20;\n            memory[temp26:temp26 + 0x20] = 0x416d6f756e74206f6620746f6b656e73206d7573742062652067726561746572;\n            memory[temp26 + 0x20:temp26 + 0x20 + 0x20] = 0x207468616e207a65726f00000000000000000000000000000000000000000000;\n            var temp27 = memory[0x40:0x60];\n            revert(memory[temp27:temp27 + (temp26 + 0x40) - temp27]);\n        }\n    }\n    \n    function expectedFunds(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = arg0 == var2;\n    \n        if (var3) {\n            if (!var3) {\n            label_120C:\n            \n                if (arg0 <= storage[0x09]) {\n                    var3 = 0x1225;\n                    var var4 = arg0;\n                    var3, var4 = func_227E(var4);\n                \n                label_1225:\n                    var1 = var3;\n                \n                    if (!arg1) {\n                    label_1268:\n                        var0 = var1;\n                    \n                    label_126C:\n                        return var0;\n                    } else {\n                        var3 = 0x1261;\n                        var temp0 = memory[0x40:0x60];\n                        memory[0x40:0x60] = temp0 + 0x40;\n                        memory[temp0:temp0 + 0x20] = storage[0x02];\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x03];\n                        var4 = temp0;\n                        var var5 = var1;\n                        var3, var4 = func_1B94(var4, var5);\n                        var2 = var4;\n                        var1 = var2;\n                        goto label_1268;\n                    }\n                } else {\n                    arg0 = storage[0x09];\n                    var3 = 0x1225;\n                    var4 = arg0;\n                    var3, var4 = func_227E(var4);\n                    goto label_1225;\n                }\n            } else {\n            label_1204:\n                var0 = 0x00;\n                goto label_126C;\n            }\n        } else if (storage[0x09] != 0x00) { goto label_120C; }\n        else { goto label_1204; }\n    }\n    \n    function expectedTokens(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 == var2) {\n            var0 = 0x00;\n            goto label_12DA;\n        } else if (!arg1) {\n        label_12CA:\n            var var3 = 0x12d3;\n            var var4 = arg0;\n            var3, var4 = func_1D35(var4);\n            var2 = var3;\n            var0 = var2;\n        \n        label_12DA:\n            return var0;\n        } else {\n            var3 = 0x12c3;\n            var temp0 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp0 + 0x40;\n            memory[temp0:temp0 + 0x20] = storage[0x00];\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x01];\n            var4 = temp0;\n            var var5 = arg0;\n            var3, var4 = func_1B94(var4, var5);\n            var1 = var4;\n            arg0 = var1;\n            goto label_12CA;\n        }\n    }\n    \n    function sell(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = arg0;\n    \n        if (var5 > 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n        \n            if (var5 <= storage[keccak256(memory[0x00:0x40]) + 0x01]) {\n                var var6 = 0x144c;\n                var var7 = arg0;\n                var6, var7 = func_227E(var7);\n                var1 = var7;\n                var0 = var6;\n            \n                if (var0 != 0x00) {\n                    storage[0x08] = var1;\n                    var6 = 0x1503;\n                    var temp0 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp0 + 0x40;\n                    memory[temp0:temp0 + 0x20] = storage[0x02];\n                    memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x03];\n                    var7 = temp0;\n                    var var8 = var0;\n                    var6, var7 = func_1B94(var7, var8);\n                    var3 = var7;\n                    var2 = var6;\n                \n                    if (var2 != 0x00) {\n                        var6 = 0x158a;\n                        var7 = msg.sender;\n                        var8 = arg0;\n                        func_237B(var7, var8);\n                    \n                    label_158A:\n                        memory[0x00:0x20] = msg.sender;\n                        memory[0x20:0x40] = 0x0b;\n                        var4 = keccak256(memory[0x00:0x40]);\n                        var6 = 0x15e2;\n                        var7 = storage[var4 + 0x02];\n                        var8 = var3;\n                        var6 = func_1FB4(var7, var8);\n                        storage[var4 + 0x02] = var6;\n                        var6 = 0x15ff;\n                        var7 = storage[0x0a];\n                        var8 = var2;\n                        var6 = func_1FB4(var7, var8);\n                        storage[0x0a] = var6;\n                        var6 = msg.sender;\n                        var7 = 0xafd310387603da0dcf44f11f54b04254b548c58b194e75f85851e849f0eef307;\n                        var8 = arg0;\n                        var var9 = var0;\n                        var var10 = 0x0de0b6b3a7640000;\n                        var var11 = storage[0x08];\n                    \n                        if (!var10) { assert(); }\n                    \n                        var temp1 = memory[0x40:0x60];\n                        memory[temp1:temp1 + 0x20] = var8;\n                        var temp2 = temp1 + 0x20;\n                        memory[temp2:temp2 + 0x20] = var9;\n                        var temp3 = temp2 + 0x20;\n                        memory[temp3:temp3 + 0x20] = var11 / var10;\n                        var temp4 = temp3 + 0x20;\n                        memory[temp4:temp4 + 0x20] = block.timestamp;\n                        var temp5 = memory[0x40:0x60];\n                        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [stack[-5], stack[-6]]);\n                        return;\n                    } else {\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                        var temp7 = temp6 + 0x04;\n                        var temp8 = temp7 + 0x20;\n                        memory[temp7:temp7 + 0x20] = temp8 - temp7;\n                        memory[temp8:temp8 + 0x20] = 0x1e;\n                        var temp9 = temp8 + 0x20;\n                        memory[temp9:temp9 + 0x20] = 0x496e73756666696369656e7420746f6b656e7320746f20646f20746861740000;\n                        var temp10 = memory[0x40:0x60];\n                        revert(memory[temp10:temp10 + (temp9 + 0x20) - temp10]);\n                    }\n                } else {\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp12 = temp11 + 0x04;\n                    var temp13 = temp12 + 0x20;\n                    memory[temp12:temp12 + 0x20] = temp13 - temp12;\n                    memory[temp13:temp13 + 0x20] = 0x1e;\n                    var temp14 = temp13 + 0x20;\n                    memory[temp14:temp14 + 0x20] = 0x496e73756666696369656e7420746f6b656e7320746f20646f20746861740000;\n                    var temp15 = memory[0x40:0x60];\n                    revert(memory[temp15:temp15 + (temp14 + 0x20) - temp15]);\n                }\n            } else {\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp17 = temp16 + 0x04;\n                var temp18 = temp17 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp18 - temp17;\n                memory[temp18:temp18 + 0x20] = 0x1a;\n                var temp19 = temp18 + 0x20;\n                memory[temp19:temp19 + 0x20] = 0x596f752068617665206e6f7420656e6f75676820746f6b656e73000000000000;\n                var temp20 = memory[0x40:0x60];\n                revert(memory[temp20:temp20 + (temp19 + 0x20) - temp20]);\n            }\n        } else {\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp22 = temp21 + 0x04;\n            var temp23 = temp22 + 0x20;\n            memory[temp22:temp22 + 0x20] = temp23 - temp22;\n            memory[temp23:temp23 + 0x20] = 0x2a;\n            var temp24 = temp23 + 0x20;\n            memory[temp24:temp24 + 0x20] = 0x416d6f756e74206f6620746f6b656e73206d7573742062652067726561746572;\n            memory[temp24 + 0x20:temp24 + 0x20 + 0x20] = 0x207468616e207a65726f00000000000000000000000000000000000000000000;\n            var temp25 = memory[0x40:0x60];\n            revert(memory[temp25:temp25 + (temp24 + 0x40) - temp25]);\n        }\n    }\n    \n    function exit() {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0b;\n        var var0 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n    \n        if (var0 <= 0x00) {\n        label_16E3:\n            var var1 = 0x16eb;\n            withdraw();\n            return;\n        } else {\n            var1 = 0x16e2;\n            var var2 = var0;\n            sell(var2);\n            goto label_16E3;\n        }\n    }\n    \n    function donate() {\n        var var0 = 0x1703;\n        var var1 = storage[0x0a];\n        var var2 = msg.value;\n        var0 = func_1FB4(var1, var2);\n        storage[0x0a] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = block.timestamp;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x106aac375bbcf013d1e52338bbf9e740009a1a3a6869f8daa1b72aa1620f5fec, msg.sender]);\n    }\n    \n    function reinvest() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x1773;\n        var var7 = msg.sender;\n        var6 = dividendsOf(var7);\n        var0 = var6;\n    \n        if (var0 > 0x00) {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0b;\n            var1 = keccak256(memory[0x00:0x40]);\n            var6 = 0x1845;\n            var7 = storage[var1 + 0x04];\n            var var8 = var0;\n            var6 = func_20E5(var7, var8);\n            storage[var1 + 0x04] = var6;\n            var6 = 0x1880;\n            var temp0 = memory[0x40:0x60];\n            memory[0x40:0x60] = temp0 + 0x40;\n            memory[temp0:temp0 + 0x20] = storage[0x00];\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x01];\n            var7 = temp0;\n            var8 = var0;\n            var6, var7 = func_1B94(var7, var8);\n            var3 = var7;\n            var2 = var6;\n        \n            if (var2 == 0x00) {\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp17 = temp16 + 0x04;\n                var temp18 = temp17 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp18 - temp17;\n                memory[temp18:temp18 + 0x20] = 0x21;\n                var temp19 = temp18 + 0x20;\n                memory[temp19:temp19 + 0x20] = 0x496e73756666696369656e74206469766964656e647320746f20646f20746861;\n                memory[temp19 + 0x20:temp19 + 0x20 + 0x20] = 0x7400000000000000000000000000000000000000000000000000000000000000;\n                var temp20 = memory[0x40:0x60];\n                revert(memory[temp20:temp20 + (temp19 + 0x40) - temp20]);\n            } else if (storage[var1] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) {\n            label_1A39:\n                var6 = 0x1a42;\n                var7 = var3;\n                var6, var7 = func_1D35(var7);\n                var5 = var7;\n                var4 = var6;\n            \n                if (var4 != 0x00) {\n                    storage[0x08] = var5;\n                    var6 = 0x1af6;\n                    var7 = msg.sender;\n                    var8 = var4;\n                    func_1E9E(var7, var8);\n                    var6 = 0x1b0b;\n                    var7 = storage[0x0a];\n                    var8 = var2;\n                    var6 = func_1FB4(var7, var8);\n                    storage[0x0a] = var6;\n                    var6 = msg.sender;\n                    var7 = 0x1abe689c7914cafd54f789eb0851e90cba235302161e81e259ee4c357c374d82;\n                    var8 = var0;\n                    var var9 = var4;\n                    var var10 = 0x0de0b6b3a7640000;\n                    var var11 = storage[0x08];\n                \n                    if (!var10) { assert(); }\n                \n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = var8;\n                    var temp2 = temp1 + 0x20;\n                    memory[temp2:temp2 + 0x20] = var9;\n                    var temp3 = temp2 + 0x20;\n                    memory[temp3:temp3 + 0x20] = var11 / var10;\n                    var temp4 = temp3 + 0x20;\n                    memory[temp4:temp4 + 0x20] = block.timestamp;\n                    var temp5 = memory[0x40:0x60];\n                    log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [stack[-5], stack[-6]]);\n                    return;\n                } else {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp7 = temp6 + 0x04;\n                    var temp8 = temp7 + 0x20;\n                    memory[temp7:temp7 + 0x20] = temp8 - temp7;\n                    memory[temp8:temp8 + 0x20] = 0x21;\n                    var temp9 = temp8 + 0x20;\n                    memory[temp9:temp9 + 0x20] = 0x496e73756666696369656e74206469766964656e647320746f20646f20746861;\n                    memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = 0x7400000000000000000000000000000000000000000000000000000000000000;\n                    var temp10 = memory[0x40:0x60];\n                    revert(memory[temp10:temp10 + (temp9 + 0x40) - temp10]);\n                }\n            } else {\n                var6 = 0x1997;\n                var7 = msg.sender;\n                var8 = storage[var1] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var9 = var2;\n                var10 = var0;\n                var6 = func_1BF7(var7, var8, var9, var10);\n                var2 = var6;\n            \n                if (var2 != 0x00) { goto label_1A39; }\n            \n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var temp12 = temp11 + 0x04;\n                var temp13 = temp12 + 0x20;\n                memory[temp12:temp12 + 0x20] = temp13 - temp12;\n                memory[temp13:temp13 + 0x20] = 0x21;\n                var temp14 = temp13 + 0x20;\n                memory[temp14:temp14 + 0x20] = 0x496e73756666696369656e74206469766964656e647320746f20646f20746861;\n                memory[temp14 + 0x20:temp14 + 0x20 + 0x20] = 0x7400000000000000000000000000000000000000000000000000000000000000;\n                var temp15 = memory[0x40:0x60];\n                revert(memory[temp15:temp15 + (temp14 + 0x40) - temp15]);\n            }\n        } else {\n            var temp21 = memory[0x40:0x60];\n            memory[temp21:temp21 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp22 = temp21 + 0x04;\n            var temp23 = temp22 + 0x20;\n            memory[temp22:temp22 + 0x20] = temp23 - temp22;\n            memory[temp23:temp23 + 0x20] = 0x15;\n            var temp24 = temp23 + 0x20;\n            memory[temp24:temp24 + 0x20] = 0x596f752068617665206e6f206469766964656e64730000000000000000000000;\n            var temp25 = memory[0x40:0x60];\n            revert(memory[temp25:temp25 + (temp24 + 0x20) - temp25]);\n        }\n    }\n    \n    function func_1B94(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 != 0x00) {\n            var temp0 = arg0;\n            var var2 = memory[temp0 + 0x20:temp0 + 0x20 + 0x20];\n            var var3 = 0x1bce;\n            var var4 = arg1;\n            var var5 = memory[temp0:temp0 + 0x20];\n            var3 = func_203E(var4, var5);\n        \n            if (!var2) { assert(); }\n        \n            var temp1 = var3 / var2;\n            var0 = temp1;\n            var2 = 0x1bed;\n            var3 = arg1;\n            var4 = var0;\n            var2 = func_21F9(var3, var4);\n            var1 = var2;\n        \n        label_1BF0:\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var1 = 0x00;\n            var0 = var1;\n            goto label_1BF0;\n        }\n    }\n    \n    function func_1BF7(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var1 = keccak256(memory[0x00:0x40]);\n    \n        if (storage[var1 + 0x01] < 0x8ac7230489e80000) { return arg2; }\n    \n        var var4 = 0x1c86;\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x20] = storage[0x06];\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = storage[0x07];\n        var var5 = temp0;\n        var var6 = arg2;\n        var4, var5 = func_1B94(var5, var6);\n        var3 = var5;\n        var temp1 = var4;\n        var2 = temp1;\n        var4 = 0x1ca1;\n        var5 = storage[var1 + 0x03];\n        var6 = var2;\n        var4 = func_1FB4(var5, var6);\n        storage[var1 + 0x03] = var4;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = arg3;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = var2;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = block.timestamp;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x870e4e1dcfab6c09707448d3659b3d8097c084bf06e7467d6029940cd7122ee0, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return var3;\n    }\n    \n    function func_1D35(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x1d72;\n        var var7 = 0x204fce5e3e25026110000000;\n        var var8 = 0x1d64;\n        var var9 = storage[0x08];\n        var var10 = 0x02;\n        var8 = func_203E(var9, var10);\n        var6 = func_1D64(var7, var8);\n        var2 = var6;\n        var6 = 0x1de4;\n        var7 = 0x1dc3;\n        var8 = 0x0de0b6b3a7640000;\n        var9 = 0x1db5;\n        var10 = arg0;\n        var var11 = 0x1da7;\n        var var12 = 0x204fce5e3e25026110000000;\n        var var13 = 0x08;\n        var11 = func_203E(var12, var13);\n        var9 = func_1DA7(var10, var11);\n        var7 = func_1DB5(var8, var9);\n        var6 = func_1DC3(var2, var7);\n        var3 = var6;\n        var6 = 0x1e06;\n        var7 = 0x204fce5e3e25026110000000;\n        var8 = 0x02;\n        var6 = func_203E(var7, var8);\n        var7 = 0x1e3b;\n        var8 = 0x0de0b6b3a7640000;\n        var9 = 0x1e2d;\n        var10 = var2;\n        var11 = 0x1e1f;\n        var12 = var3;\n        var11 = func_24ED(var12);\n        var9 = func_1E1F(var10, var11);\n        var7 = func_1E2D(var8, var9);\n    \n        if (!var6) { assert(); }\n    \n        var temp0 = var7 / var6;\n        var4 = temp0;\n        var6 = 0x1e8d;\n        var7 = 0x0de0b6b3a7640000;\n        var8 = 0x1e72;\n        var9 = 0x204fce5e3e25026110000000;\n        var10 = var4;\n        var8 = func_203E(var9, var10);\n        var6 = func_1E72(var7, var8);\n        arg0 = var6;\n        r0 = var4;\n        return r0, arg0;\n    }\n    \n    function func_1D64(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_21F9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1DA7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_203E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1DB5(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_203E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1DC3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x1dd6;\n        var var1 = arg0;\n        var var2 = var1;\n        var0 = func_203E(var1, var2);\n        var temp0 = arg1;\n        arg1 = var0;\n        var0 = temp0;\n        r0 = func_1FB4(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E1F(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_21F9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E2D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_203E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E72(var arg0, var arg1) returns (var r0) {\n        if (!arg0) { assert(); }\n    \n        var temp0 = arg1 / arg0;\n        arg0 = storage[0x08];\n        arg1 = temp0;\n        r0 = func_1FB4(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1E9E(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = storage[0x09] > 0x00;\n    \n        if (!var1) {\n        label_1F2D:\n            var var2 = 0x1f42;\n            var var3 = storage[0x09];\n            var var4 = arg1;\n            var2 = func_1FB4(var3, var4);\n            storage[0x09] = var2;\n            var2 = 0x1f5f;\n            var3 = storage[var0 + 0x01];\n            var4 = arg1;\n            var2 = func_1FB4(var3, var4);\n            storage[var0 + 0x01] = var2;\n        \n            if (!var1) {\n            label_1FAE:\n                return;\n            } else {\n                var2 = 0x1fa5;\n                var3 = storage[0x09];\n                var4 = 0x1f88;\n                var var5 = arg1;\n                var var6 = storage[0x0a];\n                var4 = func_203E(var5, var6);\n                var2 = func_1F88(var0, var3, var4);\n                storage[var0 + 0x04] = var2;\n                goto label_1FAE;\n            }\n        } else {\n            var2 = storage[0x09];\n            var3 = 0x1f1c;\n            var4 = 0x1f0b;\n            var5 = storage[0x09];\n            var6 = arg1;\n            var4 = func_1FB4(var5, var6);\n            var3 = func_1F0B(var4);\n        \n            if (!var2) { assert(); }\n        \n            storage[0x0a] = var3 / var2;\n            goto label_1F2D;\n        }\n    }\n    \n    function func_1F0B(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x0a];\n        var var0 = temp0;\n        r0 = func_203E(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1F88(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg2 / arg1;\n        arg1 = storage[arg0 + 0x04];\n        arg2 = temp0;\n        r0 = func_20E5(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1FB4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        var temp3 = temp2 + 0x20;\n        memory[temp2:temp2 + 0x20] = temp3 - temp2;\n        memory[temp3:temp3 + 0x20] = 0x0a;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x616464206661696c656400000000000000000000000000000000000000000000;\n        var temp5 = memory[0x40:0x60];\n        revert(memory[temp5:temp5 + (temp4 + 0x20) - temp5]);\n    }\n    \n    function func_203E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 == 0x00) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = temp0 * arg1;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        var temp3 = temp2 + 0x20;\n        memory[temp2:temp2 + 0x20] = temp3 - temp2;\n        memory[temp3:temp3 + 0x20] = 0x0a;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x6d756c206661696c656400000000000000000000000000000000000000000000;\n        var temp5 = memory[0x40:0x60];\n        revert(memory[temp5:temp5 + (temp4 + 0x20) - temp5]);\n    }\n    \n    function func_20E5(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 i>= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        var temp3 = temp2 + 0x20;\n        memory[temp2:temp2 + 0x20] = temp3 - temp2;\n        memory[temp3:temp3 + 0x20] = 0x0a;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x616464206661696c656400000000000000000000000000000000000000000000;\n        var temp5 = memory[0x40:0x60];\n        revert(memory[temp5:temp5 + (temp4 + 0x20) - temp5]);\n    }\n    \n    function func_216F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 - arg1;\n    \n        if (var1 i<= temp0) { return var1; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp2 = temp1 + 0x04;\n        var temp3 = temp2 + 0x20;\n        memory[temp2:temp2 + 0x20] = temp3 - temp2;\n        memory[temp3:temp3 + 0x20] = 0x0a;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = 0x737562206661696c656400000000000000000000000000000000000000000000;\n        var temp5 = memory[0x40:0x60];\n        revert(memory[temp5:temp5 + (temp4 + 0x20) - temp5]);\n    }\n    \n    function func_21F9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        var temp2 = temp1 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2 - temp1;\n        memory[temp2:temp2 + 0x20] = 0x0a;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = 0x737562206661696c656400000000000000000000000000000000000000000000;\n        var temp4 = memory[0x40:0x60];\n        revert(memory[temp4:temp4 + (temp3 + 0x20) - temp4]);\n    }\n    \n    function func_227E(var arg0) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x22a7;\n        var var6 = storage[0x08];\n        var var7 = 0x204fce5e3e25026110000000;\n        var5 = func_21F9(var6, var7);\n        var2 = var5;\n        var5 = 0x230b;\n        var6 = 0x0de0b6b3a7640000;\n        var7 = 0x22d4;\n        var var8 = 0x204fce5e3e25026110000000;\n        var var9 = arg0;\n        var7 = func_203E(var8, var9);\n        var5 = func_22D4(var2, var6, var7);\n        var3 = var5;\n        var5 = 0x2329;\n        var6 = 0x0de0b6b3a7640000;\n        var7 = 0x02;\n        var5 = func_203E(var6, var7);\n        var6 = 0x234e;\n        var7 = arg0;\n        var8 = 0x2340;\n        var9 = var2;\n        var var10 = var3;\n        var8 = func_1FB4(var9, var10);\n        var6 = func_2340(var7, var8);\n    \n        if (!var5) { assert(); }\n    \n        var temp0 = var6 / var5;\n        var4 = temp0;\n        var5 = 0x0de0b6b3a7640000;\n        var6 = var4;\n    \n        if (!var5) { assert(); }\n    \n        arg0 = var3;\n        r0 = var6 / var5;\n        return r0, arg0;\n    }\n    \n    function func_22D4(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        arg1 = arg2 / arg1;\n        arg2 = 0x22fd;\n        var var0 = arg0;\n        var var1 = 0x204fce5e3e25026110000000;\n        arg2 = func_1FB4(var0, var1);\n        var temp0 = arg1;\n        arg1 = arg2;\n        arg2 = temp0;\n        r0 = func_21F9(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2340(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_203E(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_237B(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = 0x00;\n    \n        if (storage[0x09] != arg1) {\n        label_23F6:\n            var var2 = storage[0x09];\n            var var3 = 0x2422;\n            var var4 = 0x2411;\n            var var5 = storage[0x09];\n            var var6 = arg1;\n            var4 = func_21F9(var5, var6);\n            var3 = func_2411(var4);\n        \n            if (!var2) { assert(); }\n        \n            storage[0x0a] = var3 / var2;\n            var2 = 0x2447;\n            var3 = storage[0x09];\n            var4 = arg1;\n            var2 = func_21F9(var3, var4);\n            storage[0x09] = var2;\n            var2 = 0x2464;\n            var3 = storage[var0 + 0x01];\n            var4 = arg1;\n            var2 = func_21F9(var3, var4);\n            storage[var0 + 0x01] = var2;\n        \n            if (storage[0x09] > 0x00) {\n                var2 = 0x24af;\n                var3 = storage[0x09];\n                var4 = 0x2492;\n                var5 = arg1;\n                var6 = storage[0x0a];\n                var4 = func_203E(var5, var6);\n                var2 = func_2492(var0, var3, var4);\n                storage[var0 + 0x04] = var2;\n                return;\n            } else if (var1 == 0x00) {\n            label_24E6:\n                return;\n            } else {\n                var2 = 0x24dd;\n                var3 = storage[var0 + 0x04];\n                var4 = var1;\n                var2 = func_216F(var3, var4);\n                storage[var0 + 0x04] = var2;\n                goto label_24E6;\n            }\n        } else {\n            var2 = storage[0x09];\n            var3 = 0x23e9;\n            var4 = storage[0x0a];\n            var5 = storage[var0 + 0x01];\n            var3 = func_203E(var4, var5);\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n            goto label_23F6;\n        }\n    }\n    \n    function func_2411(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x0a];\n        var var0 = temp0;\n        r0 = func_203E(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2492(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        var temp0 = arg2 / arg1;\n        arg1 = storage[arg0 + 0x04];\n        arg2 = temp0;\n        r0 = func_216F(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_24ED(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x02;\n        var var3 = 0x24fd;\n        var var4 = arg0;\n        var var5 = 0x01;\n        var3 = func_1FB4(var4, var5);\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var0 = arg0;\n    \n        if (var1 >= var0) {\n        label_2540:\n            return var0;\n        } else {\n        label_2516:\n            var0 = var1;\n            var2 = 0x02;\n            var3 = 0x252f;\n            var4 = var0;\n            var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var3 = func_2528(var1, var4, var5);\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2;\n        \n            if (var1 >= var0) { goto label_2540; }\n            else { goto label_2516; }\n        }\n    }\n    \n    function func_2528(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        arg2 = arg0;\n        r0 = func_1FB4(arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2546() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = 0x00;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = 0x00;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = 0x00;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 36.448118448257446,
	"usage": {
		"completion_tokens": 573,
		"prompt_tokens": 20417,
		"total_tokens": 20990
	}
}