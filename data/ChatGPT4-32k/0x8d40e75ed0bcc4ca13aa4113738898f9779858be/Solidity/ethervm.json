{
	"address": "0x8d40e75ed0bcc4ca13aa4113738898f9779858be",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's the Solidity code for the given EVM bytecode:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    address public owner;\n    address public tokenAddress;\n    uint256 public minPrice;\n    uint256 public maxPrice;\n    uint256 public tokensForSale;\n    uint256 public currentPrice;\n    \n    modifier onlyOwner {\n        require(msg.sender == owner, \"Only owner can perform this function\");\n        _;\n    }\n    \n    constructor() public {\n        owner = msg.sender;\n    }\n    \n    function setTokenAddress(address _tokenAddress) public onlyOwner {\n        tokenAddress = _tokenAddress;\n    }\n    \n    function setMinPrice(uint256 _minPrice) public onlyOwner {\n        minPrice = _minPrice;\n    }\n    \n    function setMaxPrice(uint256 _maxPrice) public onlyOwner {\n        maxPrice = _maxPrice;\n    }\n    \n    function setTokensForSale(uint256 _tokensForSale) public onlyOwner {\n        tokensForSale = _tokensForSale;\n    }\n    \n    function setCurrentPrice(uint256 _currentPrice) public onlyOwner {\n        currentPrice = _currentPrice;\n    }\n    \n    function transferOwnership(address newOwner) public onlyOwner {\n        require(newOwner != address(0), \"New owner address cannot be 0x0\");\n        owner = newOwner;\n    }\n\n    function withdraw(uint256 amount) public onlyOwner {\n        require(address(this).balance >= amount, \"Contract doesn't have enough balance\");\n        msg.sender.transfer(amount);\n    }\n}\n```\n\nPlease note that decompiling EVM bytecode to Solidity is not a straightforward task and the above Solidity code is an approximation. The original contract could have different functionality or additional functions not reflected in the provided EVM bytecode. Also, due to the complexity of the provided EVM bytecode, some parts are not implemented in the Solidity code. Please verify and adjust the contract according to your needs.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471717,
	"id": "chatcmpl-8Muf7K9qnH3LzRp64VPFQrNtISnEX",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00DB:\n            var var0 = 0x00;\n        \n            if (msg.value <= 0x016345785d8a0000) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x06] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0a;\n            var var2 = storage[0x02];\n            var var3 = msg.value;\n        \n            if (!var2) { assert(); }\n        \n            var2 = var3 / var2;\n        \n            if (!var1) { assert(); }\n        \n            var0 = var2 / var1;\n        \n            if (var0 <= storage[0x06]) {\n                var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = 0xa9059cbb;\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp1 = temp0 + 0x04;\n                memory[temp1:temp1 + 0x20] = msg.sender;\n                var temp2 = temp1 + 0x20;\n                memory[temp2:temp2 + 0x20] = var0;\n                var3 = temp2 + 0x20;\n                var var4 = 0x20;\n                var var5 = memory[0x40:0x60];\n                var var6 = var3 - var5;\n                var var7 = var5;\n                var var8 = 0x00;\n                var var9 = var1;\n                var var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n            label_0206:\n                var temp3;\n                temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp3;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    if (!memory[var1:var1 + 0x20]) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x06] = storage[0x06] - var0;\n                    var1 = storage[0x05] * 0x0f4240;\n                    var2 = storage[0x04] - storage[0x03] * (storage[0x05] - storage[0x06]) * 0x0f4240;\n                \n                    if (!var1) { assert(); }\n                \n                    storage[0x02] = storage[0x03] + var2 / var1;\n                    stop();\n                } else {\n                    var temp4 = returndata.length;\n                    memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var0 = storage[0x06];\n                var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = 0xa9059cbb;\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp6 = temp5 + 0x04;\n                memory[temp6:temp6 + 0x20] = msg.sender;\n                var temp7 = temp6 + 0x20;\n                memory[temp7:temp7 + 0x20] = var0;\n                var3 = temp7 + 0x20;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (!var10) { goto label_0206; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x08be73bc) {\n                // Dispatch table entry for 0x08be73bc (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02b5;\n                var2 = msg.data[0x04:0x24];\n                var1 = func_064D(var2);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x12aef8c3) {\n                // Dispatch table entry for tokensForSale()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02e4;\n                var2 = tokensForSale();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x26a4e8d2) {\n                // Dispatch table entry for setTokenAddress(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = setTokenAddress(var2);\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = !!var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x5ea8cd12) {\n                // Dispatch table entry for setMinPrice(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0380;\n                var2 = msg.data[0x04:0x24];\n                var1 = setMinPrice(var2);\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = !!var1;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x7473933e) {\n                // Dispatch table entry for 0x7473933e (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03af;\n                var2 = func_08B2();\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var2;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03da;\n                var2 = owner();\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n            } else if (var0 == 0x9d1b464a) {\n                // Dispatch table entry for currentPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0431;\n                var2 = currentPrice();\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = var2;\n                var temp21 = memory[0x40:0x60];\n                return memory[temp21:temp21 + (temp20 + 0x20) - temp21];\n            } else if (var0 == 0x9d76ea58) {\n                // Dispatch table entry for tokenAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x045c;\n                var2 = tokenAddress();\n                var temp22 = memory[0x40:0x60];\n                memory[temp22:temp22 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n            } else if (var0 == 0xe37d4fed) {\n                // Dispatch table entry for withdrawToFounders(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04c9;\n                var2 = msg.data[0x04:0x24];\n                var1 = withdrawToFounders(var2);\n                var temp24 = memory[0x40:0x60];\n                memory[temp24:temp24 + 0x20] = var1 & 0xff;\n                var temp25 = memory[0x40:0x60];\n                return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n            } else if (var0 == 0xe38d6b5c) {\n                // Dispatch table entry for maxPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04fa;\n                var2 = maxPrice();\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0xe45be8eb) {\n                // Dispatch table entry for minPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0525;\n                var2 = minPrice();\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = var2;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else if (var0 == 0xeea62217) {\n                // Dispatch table entry for setTokensForSale(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0566;\n                var2 = msg.data[0x04:0x24];\n                var1 = setTokensForSale(var2);\n                var temp30 = memory[0x40:0x60];\n                memory[temp30:temp30 + 0x20] = !!var1;\n                var temp31 = memory[0x40:0x60];\n                return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05c1;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf43952e3) {\n                // Dispatch table entry for setMaxPrice(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ee;\n                var2 = msg.data[0x04:0x24];\n                var1 = setMaxPrice(var2);\n                var temp32 = memory[0x40:0x60];\n                memory[temp32:temp32 + 0x20] = !!var1;\n                var temp33 = memory[0x40:0x60];\n                return memory[temp33:temp33 + (temp32 + 0x20) - temp33];\n            } else if (var0 == 0xfe7dbbe7) {\n                // Dispatch table entry for 0xfe7dbbe7 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0633;\n                var2 = msg.data[0x04:0x24];\n                var1 = func_0D84(var2);\n                var temp34 = memory[0x40:0x60];\n                memory[temp34:temp34 + 0x20] = !!var1;\n                var temp35 = memory[0x40:0x60];\n                return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n            } else { goto label_00DB; }\n        }\n    }\n    \n    function func_064D(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_06F4:\n            storage[0x02] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_06F4; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function tokensForSale() returns (var r0) { return storage[0x05]; }\n    \n    function setTokenAddress(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_07B1:\n            storage[0x01] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_07B1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setMinPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_08A2:\n            storage[0x03] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_08A2; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_08B2() returns (var r0) { return storage[0x06]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function currentPrice() returns (var r0) { return storage[0x02]; }\n    \n    function tokenAddress() returns (var r0) { return storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function withdrawToFounders(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var4) {\n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_09B4:\n            var4 = 0x02;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var1 = var5 / var4;\n            var3 = 0x00;\n            var2 = 0x00;\n        \n            if (var2 & 0xff >= 0x02) {\n            label_0A60:\n                return var3;\n            } else {\n            label_09DD:\n                var4 = 0x07;\n                var5 = var2 & 0xff;\n            \n                if (var5 >= 0x02) { assert(); }\n            \n                var temp0 = var1;\n                var temp1 = memory[0x40:0x60];\n                var temp2;\n                temp2, memory[temp1:temp1 + 0x00] = address(storage[var5 + var4] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            \n                if (temp2) {\n                    var2 = var2 + 0x01;\n                \n                label_09D0:\n                \n                    if (var2 & 0xff >= 0x02) { goto label_0A60; }\n                    else { goto label_09DD; }\n                } else {\n                    var3 = var3 + 0x01;\n                    var2 = var2 + 0x01;\n                    goto label_09D0;\n                }\n            }\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_09B4; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function maxPrice() returns (var r0) { return storage[0x04]; }\n    \n    function minPrice() returns (var r0) { return storage[0x03]; }\n    \n    function setTokensForSale(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0B1E:\n            storage[0x05] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_0B1E; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferOwnership(var arg0) {\n        var var0 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0BD3:\n        \n            if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_0BD3; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setMaxPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0D74:\n            storage[0x04] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_0D74; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0D84(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0E2B:\n            storage[0x06] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_0E2B; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00DB:\n            var var0 = 0x00;\n        \n            if (msg.value <= 0x016345785d8a0000) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x06] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0a;\n            var var2 = storage[0x02];\n            var var3 = msg.value;\n        \n            if (!var2) { assert(); }\n        \n            var2 = var3 / var2;\n        \n            if (!var1) { assert(); }\n        \n            var0 = var2 / var1;\n        \n            if (var0 <= storage[0x06]) {\n                var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = 0xa9059cbb;\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp1 = temp0 + 0x04;\n                memory[temp1:temp1 + 0x20] = msg.sender;\n                var temp2 = temp1 + 0x20;\n                memory[temp2:temp2 + 0x20] = var0;\n                var3 = temp2 + 0x20;\n                var var4 = 0x20;\n                var var5 = memory[0x40:0x60];\n                var var6 = var3 - var5;\n                var var7 = var5;\n                var var8 = 0x00;\n                var var9 = var1;\n                var var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n            label_0206:\n                var temp3;\n                temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp3;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    if (!memory[var1:var1 + 0x20]) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x06] = storage[0x06] - var0;\n                    var1 = storage[0x05] * 0x0f4240;\n                    var2 = storage[0x04] - storage[0x03] * (storage[0x05] - storage[0x06]) * 0x0f4240;\n                \n                    if (!var1) { assert(); }\n                \n                    storage[0x02] = storage[0x03] + var2 / var1;\n                    stop();\n                } else {\n                    var temp4 = returndata.length;\n                    memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var0 = storage[0x06];\n                var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = 0xa9059cbb;\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp6 = temp5 + 0x04;\n                memory[temp6:temp6 + 0x20] = msg.sender;\n                var temp7 = temp6 + 0x20;\n                memory[temp7:temp7 + 0x20] = var0;\n                var3 = temp7 + 0x20;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (!var10) { goto label_0206; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x08be73bc) {\n                // Dispatch table entry for 0x08be73bc (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02b5;\n                var2 = msg.data[0x04:0x24];\n                var1 = func_064D(var2);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x12aef8c3) {\n                // Dispatch table entry for tokensForSale()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02e4;\n                var2 = tokensForSale();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x26a4e8d2) {\n                // Dispatch table entry for setTokenAddress(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = setTokenAddress(var2);\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = !!var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x5ea8cd12) {\n                // Dispatch table entry for setMinPrice(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0380;\n                var2 = msg.data[0x04:0x24];\n                var1 = setMinPrice(var2);\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = !!var1;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x7473933e) {\n                // Dispatch table entry for 0x7473933e (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03af;\n                var2 = func_08B2();\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var2;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03da;\n                var2 = owner();\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n            } else if (var0 == 0x9d1b464a) {\n                // Dispatch table entry for currentPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0431;\n                var2 = currentPrice();\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = var2;\n                var temp21 = memory[0x40:0x60];\n                return memory[temp21:temp21 + (temp20 + 0x20) - temp21];\n            } else if (var0 == 0x9d76ea58) {\n                // Dispatch table entry for tokenAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x045c;\n                var2 = tokenAddress();\n                var temp22 = memory[0x40:0x60];\n                memory[temp22:temp22 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n            } else if (var0 == 0xe37d4fed) {\n                // Dispatch table entry for withdrawToFounders(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04c9;\n                var2 = msg.data[0x04:0x24];\n                var1 = withdrawToFounders(var2);\n                var temp24 = memory[0x40:0x60];\n                memory[temp24:temp24 + 0x20] = var1 & 0xff;\n                var temp25 = memory[0x40:0x60];\n                return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n            } else if (var0 == 0xe38d6b5c) {\n                // Dispatch table entry for maxPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04fa;\n                var2 = maxPrice();\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0xe45be8eb) {\n                // Dispatch table entry for minPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0525;\n                var2 = minPrice();\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = var2;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else if (var0 == 0xeea62217) {\n                // Dispatch table entry for setTokensForSale(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0566;\n                var2 = msg.data[0x04:0x24];\n                var1 = setTokensForSale(var2);\n                var temp30 = memory[0x40:0x60];\n                memory[temp30:temp30 + 0x20] = !!var1;\n                var temp31 = memory[0x40:0x60];\n                return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05c1;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf43952e3) {\n                // Dispatch table entry for setMaxPrice(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ee;\n                var2 = msg.data[0x04:0x24];\n                var1 = setMaxPrice(var2);\n                var temp32 = memory[0x40:0x60];\n                memory[temp32:temp32 + 0x20] = !!var1;\n                var temp33 = memory[0x40:0x60];\n                return memory[temp33:temp33 + (temp32 + 0x20) - temp33];\n            } else if (var0 == 0xfe7dbbe7) {\n                // Dispatch table entry for 0xfe7dbbe7 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0633;\n                var2 = msg.data[0x04:0x24];\n                var1 = func_0D84(var2);\n                var temp34 = memory[0x40:0x60];\n                memory[temp34:temp34 + 0x20] = !!var1;\n                var temp35 = memory[0x40:0x60];\n                return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n            } else { goto label_00DB; }\n        }\n    }\n    \n    function func_064D(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_06F4:\n            storage[0x02] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_06F4; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function tokensForSale() returns (var r0) { return storage[0x05]; }\n    \n    function setTokenAddress(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_07B1:\n            storage[0x01] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_07B1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setMinPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_08A2:\n            storage[0x03] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_08A2; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_08B2() returns (var r0) { return storage[0x06]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function currentPrice() returns (var r0) { return storage[0x02]; }\n    \n    function tokenAddress() returns (var r0) { return storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function withdrawToFounders(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var4) {\n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_09B4:\n            var4 = 0x02;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var1 = var5 / var4;\n            var3 = 0x00;\n            var2 = 0x00;\n        \n            if (var2 & 0xff >= 0x02) {\n            label_0A60:\n                return var3;\n            } else {\n            label_09DD:\n                var4 = 0x07;\n                var5 = var2 & 0xff;\n            \n                if (var5 >= 0x02) { assert(); }\n            \n                var temp0 = var1;\n                var temp1 = memory[0x40:0x60];\n                var temp2;\n                temp2, memory[temp1:temp1 + 0x00] = address(storage[var5 + var4] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            \n                if (temp2) {\n                    var2 = var2 + 0x01;\n                \n                label_09D0:\n                \n                    if (var2 & 0xff >= 0x02) { goto label_0A60; }\n                    else { goto label_09DD; }\n                } else {\n                    var3 = var3 + 0x01;\n                    var2 = var2 + 0x01;\n                    goto label_09D0;\n                }\n            }\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_09B4; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function maxPrice() returns (var r0) { return storage[0x04]; }\n    \n    function minPrice() returns (var r0) { return storage[0x03]; }\n    \n    function setTokensForSale(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0B1E:\n            storage[0x05] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_0B1E; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferOwnership(var arg0) {\n        var var0 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0BD3:\n        \n            if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_0BD3; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setMaxPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0D74:\n            storage[0x04] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_0D74; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0D84(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0E2B:\n            storage[0x06] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_0E2B; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_00DB:\n            var var0 = 0x00;\n        \n            if (msg.value <= 0x016345785d8a0000) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x06] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x02] <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0a;\n            var var2 = storage[0x02];\n            var var3 = msg.value;\n        \n            if (!var2) { assert(); }\n        \n            var2 = var3 / var2;\n        \n            if (!var1) { assert(); }\n        \n            var0 = var2 / var1;\n        \n            if (var0 <= storage[0x06]) {\n                var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = 0xa9059cbb;\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp1 = temp0 + 0x04;\n                memory[temp1:temp1 + 0x20] = msg.sender;\n                var temp2 = temp1 + 0x20;\n                memory[temp2:temp2 + 0x20] = var0;\n                var3 = temp2 + 0x20;\n                var var4 = 0x20;\n                var var5 = memory[0x40:0x60];\n                var var6 = var3 - var5;\n                var var7 = var5;\n                var var8 = 0x00;\n                var var9 = var1;\n                var var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n            label_0206:\n                var temp3;\n                temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp3;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    if (!memory[var1:var1 + 0x20]) { revert(memory[0x00:0x00]); }\n                \n                    storage[0x06] = storage[0x06] - var0;\n                    var1 = storage[0x05] * 0x0f4240;\n                    var2 = storage[0x04] - storage[0x03] * (storage[0x05] - storage[0x06]) * 0x0f4240;\n                \n                    if (!var1) { assert(); }\n                \n                    storage[0x02] = storage[0x03] + var2 / var1;\n                    stop();\n                } else {\n                    var temp4 = returndata.length;\n                    memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var0 = storage[0x06];\n                var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = 0xa9059cbb;\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp6 = temp5 + 0x04;\n                memory[temp6:temp6 + 0x20] = msg.sender;\n                var temp7 = temp6 + 0x20;\n                memory[temp7:temp7 + 0x20] = var0;\n                var3 = temp7 + 0x20;\n                var4 = 0x20;\n                var5 = memory[0x40:0x60];\n                var6 = var3 - var5;\n                var7 = var5;\n                var8 = 0x00;\n                var9 = var1;\n                var10 = !address(var9).code.length;\n            \n                if (!var10) { goto label_0206; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x08be73bc) {\n                // Dispatch table entry for 0x08be73bc (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02b5;\n                var2 = msg.data[0x04:0x24];\n                var1 = func_064D(var2);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x12aef8c3) {\n                // Dispatch table entry for tokensForSale()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02e4;\n                var2 = tokensForSale();\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x26a4e8d2) {\n                // Dispatch table entry for setTokenAddress(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = setTokenAddress(var2);\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = !!var1;\n                var temp13 = memory[0x40:0x60];\n                return memory[temp13:temp13 + (temp12 + 0x20) - temp13];\n            } else if (var0 == 0x5ea8cd12) {\n                // Dispatch table entry for setMinPrice(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0380;\n                var2 = msg.data[0x04:0x24];\n                var1 = setMinPrice(var2);\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = !!var1;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x7473933e) {\n                // Dispatch table entry for 0x7473933e (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03af;\n                var2 = func_08B2();\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var2;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03da;\n                var2 = owner();\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n            } else if (var0 == 0x9d1b464a) {\n                // Dispatch table entry for currentPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0431;\n                var2 = currentPrice();\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = var2;\n                var temp21 = memory[0x40:0x60];\n                return memory[temp21:temp21 + (temp20 + 0x20) - temp21];\n            } else if (var0 == 0x9d76ea58) {\n                // Dispatch table entry for tokenAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x045c;\n                var2 = tokenAddress();\n                var temp22 = memory[0x40:0x60];\n                memory[temp22:temp22 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n            } else if (var0 == 0xe37d4fed) {\n                // Dispatch table entry for withdrawToFounders(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04c9;\n                var2 = msg.data[0x04:0x24];\n                var1 = withdrawToFounders(var2);\n                var temp24 = memory[0x40:0x60];\n                memory[temp24:temp24 + 0x20] = var1 & 0xff;\n                var temp25 = memory[0x40:0x60];\n                return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n            } else if (var0 == 0xe38d6b5c) {\n                // Dispatch table entry for maxPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04fa;\n                var2 = maxPrice();\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0xe45be8eb) {\n                // Dispatch table entry for minPrice()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0525;\n                var2 = minPrice();\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = var2;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else if (var0 == 0xeea62217) {\n                // Dispatch table entry for setTokensForSale(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0566;\n                var2 = msg.data[0x04:0x24];\n                var1 = setTokensForSale(var2);\n                var temp30 = memory[0x40:0x60];\n                memory[temp30:temp30 + 0x20] = !!var1;\n                var temp31 = memory[0x40:0x60];\n                return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05c1;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf43952e3) {\n                // Dispatch table entry for setMaxPrice(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ee;\n                var2 = msg.data[0x04:0x24];\n                var1 = setMaxPrice(var2);\n                var temp32 = memory[0x40:0x60];\n                memory[temp32:temp32 + 0x20] = !!var1;\n                var temp33 = memory[0x40:0x60];\n                return memory[temp33:temp33 + (temp32 + 0x20) - temp33];\n            } else if (var0 == 0xfe7dbbe7) {\n                // Dispatch table entry for 0xfe7dbbe7 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0633;\n                var2 = msg.data[0x04:0x24];\n                var1 = func_0D84(var2);\n                var temp34 = memory[0x40:0x60];\n                memory[temp34:temp34 + 0x20] = !!var1;\n                var temp35 = memory[0x40:0x60];\n                return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n            } else { goto label_00DB; }\n        }\n    }\n    \n    function func_064D(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_06F4:\n            storage[0x02] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_06F4; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function tokensForSale() returns (var r0) { return storage[0x05]; }\n    \n    function setTokenAddress(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_07B1:\n            storage[0x01] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_07B1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setMinPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_08A2:\n            storage[0x03] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_08A2; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_08B2() returns (var r0) { return storage[0x06]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function currentPrice() returns (var r0) { return storage[0x02]; }\n    \n    function tokenAddress() returns (var r0) { return storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function withdrawToFounders(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var4) {\n            if (!var4) { revert(memory[0x00:0x00]); }\n        \n        label_09B4:\n            var4 = 0x02;\n            var var5 = arg0;\n        \n            if (!var4) { assert(); }\n        \n            var1 = var5 / var4;\n            var3 = 0x00;\n            var2 = 0x00;\n        \n            if (var2 & 0xff >= 0x02) {\n            label_0A60:\n                return var3;\n            } else {\n            label_09DD:\n                var4 = 0x07;\n                var5 = var2 & 0xff;\n            \n                if (var5 >= 0x02) { assert(); }\n            \n                var temp0 = var1;\n                var temp1 = memory[0x40:0x60];\n                var temp2;\n                temp2, memory[temp1:temp1 + 0x00] = address(storage[var5 + var4] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            \n                if (temp2) {\n                    var2 = var2 + 0x01;\n                \n                label_09D0:\n                \n                    if (var2 & 0xff >= 0x02) { goto label_0A60; }\n                    else { goto label_09DD; }\n                } else {\n                    var3 = var3 + 0x01;\n                    var2 = var2 + 0x01;\n                    goto label_09D0;\n                }\n            }\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_09B4; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function maxPrice() returns (var r0) { return storage[0x04]; }\n    \n    function minPrice() returns (var r0) { return storage[0x03]; }\n    \n    function setTokensForSale(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0B1E:\n            storage[0x05] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_0B1E; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferOwnership(var arg0) {\n        var var0 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0BD3:\n        \n            if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            storage[0x00] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_0BD3; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function setMaxPrice(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0D74:\n            storage[0x04] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_0D74; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0D84(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_0E2B:\n            storage[0x06] = arg0;\n            return 0x01;\n        } else if (msg.sender == 0xffffffffffffffffffffffffffffffffffffffff & 0x630cc4c83fcc1121fed041126227d25bbeb51959) { goto label_0E2B; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 19.62716841697693,
	"usage": {
		"completion_tokens": 402,
		"prompt_tokens": 5527,
		"total_tokens": 5929
	}
}