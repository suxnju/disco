{
	"address": "0x007d42b9192b8c087b0d3e6ef73aae48e74b41c1",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure! Here is a Solidity version of the contract based on the decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract InvestmentContract {\n    address payable public owner;\n    uint256 public totalPaidOut;\n    uint256 public totalDeposited;\n    uint256 public totalDividends;\n    uint256 public balance;\n    string public messageToInvestors;\n    address[] public investors;\n    uint256[] public stor1;\n    uint256[] public stor2;\n    uint256[] public stor3;\n    uint256[] public stor4;\n    uint256[] public stor5;\n    uint256[] public stor6;\n    uint256[] public stor7;\n    uint256[] public stor8;\n    uint256[] public stor9;\n    uint256[] public stor10;\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Caller is not owner\");\n        _;\n    }\n\n    constructor() {\n        owner = payable(msg.sender);\n    }\n\n    function newMessage(string calldata _new_sms) external onlyOwner {\n        messageToInvestors = _new_sms;\n    }\n\n    function newOwner(address payable _new_owner) external onlyOwner {\n        owner = _new_owner;\n        messageToInvestors = \"The contract has a new manager!\";\n    }\n\n    function manualDeposit() external payable onlyOwner {\n        balance += msg.value;\n        messageToInvestors = \"Manual Deposit received from the Manager\";\n    }\n\n    function emergency() external onlyOwner {\n        owner.transfer(balance);\n        balance = 0;\n        messageToInvestors = \"Emergency Withdraw has been issued!\";\n    }\n\n    function enter() external payable {\n        require(msg.value >= 2 ether, \"Minimum deposit is 2 ether\");\n        totalDeposited += msg.value;\n        balance += msg.value;\n        investors.push(msg.sender);\n        messageToInvestors = \"New Investor has joined us!\";\n    }\n\n    function fallback() external payable {\n        require(msg.value >= 2 ether, \"Minimum deposit is 2 ether\");\n        totalDeposited += msg.value;\n        balance += msg.value;\n        investors.push(msg.sender);\n        messageToInvestors = \"New Investor has joined us!\";\n    }\n}\n```\n\nPlease note that this is a rewritten version of the contract based on the decompiled pseudo code and it's assumed that the contract's intent is to serve as a simple investment contract where users can deposit ether and the owner can manually deposit ether, change the owner, post messages to investors, and withdraw all funds in case of an emergency. \n\nThe actual logic might be more complex as the decompiled pseudo code is quite cryptic and hard to understand without further context. Also, the contract lacks a lot of functionality based on the decompiled code such as dividend calculation and payout, which is mentioned but not fully implemented. In a real-world scenario, more information and a better understanding of the original contract and its purpose would be required to create an accurate and secure Solidity contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473080,
	"id": "chatcmpl-8Mv16JwAYdwliD2xYcNyKrCDyzYXm",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\ndef storage:\n  stor0 is array of struct at storage 0\n  stor1 is array of uint256 at storage 1\n  stor2 is array of uint256 at storage 2\n  balance is uint256 at storage 3\n  totaldeposited is uint256 at storage 4\n  totalpaidout is uint256 at storage 5\n  totaldividends is uint256 at storage 6\n  message_To_Investors is array of uint256 at storage 7\n  owner is addr at storage 8\n  stor8 is uint256 at storage 8\n  stor38971441815954291753963644440956123609054264817261647753096923611481829733346 is array of addr at storage 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e2\n  stor38971441815954291753963644440956123609054264817261647753096923611481829733349 is array of addr at storage 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5\n  stor38971441815954291753963644440956123609054264817261647753096923611481829733350 is array of uint256 at storage 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e6\n  stor61587084245117611172629852450465480611646058697269570417053482988027362866146 is array of uint256 at storage 0x88290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e2\n  stor61587084245117611172629852450465480611646058697269570417053482988027362866149 is array of uint256 at storage 0x88290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5\n\ndef totalpaidout() payable: \n  return totalpaidout\n\ndef owner() payable: \n  return addr(owner)\n\ndef Message_To_Investors() payable: \n  return uint256(message_To_Investors[0 len message_To_Investors.length].field_0)\n\ndef fees() payable: \n  return stor2.length\n\ndef total_investors() payable: \n  return stor1.length\n\ndef balance() payable: \n  return balance\n\ndef totaldividends() payable: \n  return totaldividends\n\ndef totaldeposited() payable: \n  return totaldeposited\n\n#\n#  Regular functions\n#\n\ndef NewMessage(string _new_sms) payable: \n  if caller == addr(owner):\n      uint256(message_To_Investors[].field_0) = Array(len=_new_sms.length, data=_new_sms[all])\n\ndef investors(uint256 _param1) payable: \n  require _param1 < stor0.length\n  return stor5629[_param1], uint256(stor[(3 * _param1) + code.data[3476 len 32]]), stor8829[_param1]\n\ndef NewOwner(address _new_owner) payable: \n  if caller == addr(owner):\n      uint256(stor8) = _new_owner or Mask(96, 160, uint256(stor8))\n      uint8(message_To_Investors.length) = 62\n      Mask(248, 0, message_To_Investors.length.field_8) = 'The contract has a new manager!'\n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n\ndef ManualDeposit() payable: \n  if caller == addr(owner):\n      mem[128] = 'Manual Deposit received from the'\n      mem[160] = ' Manager'\n      message_To_Investors.length = 81\n      s = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      idx = 128\n      while 168 > idx:\n          uint256(stor[s]) = mem[idx]\n          s = s + 1\n          idx = idx + 32\n          continue \n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c8\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n\ndef Emergency() payable: \n  if caller == addr(owner):\n      if balance:\n          call addr(owner) with:\n             value balance wei\n               gas 0 wei\n          balance = 0\n          mem[128] = 'Emergency Withdraw has been issu'\n          mem[160] = 'ed!'\n          message_To_Investors.length = 71\n          s = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n          idx = 128\n          while 163 > idx:\n              uint256(stor[s]) = mem[idx]\n              s = s + 1\n              idx = idx + 32\n              continue \n          idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c8\n          while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n              uint256(stor[idx]) = 0\n              idx = idx + 1\n              continue \n\ndef NewManualInvestor(address _new_investor, uint256 _new_amount) payable: \n  if caller == addr(owner):\n      totaldeposited += _new_amount\n      stor1.length = stor0.length + 1\n      stor0.length++\n      if not stor0.length <= stor0.length + 1:\n          idx = (3 * stor0.length) + 3\n          while 3 * stor0.length > idx:\n              addr(stor0[idx].field_0) = 0\n              uint256(stor0[idx].field_256) = 0\n              uint256(stor0[idx].field_512) = 0\n              idx = idx + 1\n              continue \n      require stor0.length - 1 < stor0.length\n      uint256(stor5629[stor0.length]) = _new_investor or Mask(96, 160, uint256(stor5629[stor0.length]))\n      uint256(stor[code.data[3476 len 32] + (3 * stor0.length) - 3]) = _new_amount\n      stor8829[stor0.length] = 10^10 * _new_amount / totaldeposited\n      mem[128] = 'New manual Investor has been add'\n      mem[160] = 'ed by the Manager!'\n      message_To_Investors.length = 101\n      s = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      idx = 128\n      while 178 > idx:\n          uint256(stor[s]) = mem[idx]\n          s = s + 1\n          idx = idx + 32\n          continue \n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c8\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n\ndef Enter() payable: \n  if call.value < 2 * 10^18:\n      call addr(owner) with:\n         value call.value / 100 wei\n           gas 0 wei\n      totalpaidout += call.value / 100\n      if stor0.length:\n          if call.value - (call.value / 100):\n              idx = 0\n              s = 0\n              while idx < stor0.length:\n                  mem[0] = 0\n                  call stor5629[idx] with:\n                     value (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10 wei\n                       gas 0 wei\n                  totalpaidout += (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  totaldividends += (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  idx = idx + 1\n                  s = (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  continue \n              uint8(message_To_Investors.length) = 58\n              Mask(248, 0, message_To_Investors.length.field_8) = 'Dividends have been paid out!' / 256\n              idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n              while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n                  uint256(stor[idx]) = 0\n                  idx = idx + 1\n                  continue \n  else:\n      stor2.length = call.value / 100\n      totaldeposited += call.value\n      balance = call.value - (call.value / 100) + balance\n      idx = 0\n      while idx < stor0.length:\n          mem[0] = 0\n          if stor5629[idx] != caller:\n              idx = idx + 1\n              continue \n          require idx < stor0.length\n          uint256(stor[code.data[3476 len 32] + (3 * idx)]) = call.value - (call.value / 100) + uint256(stor[code.data[3476 len 32] + (3 * idx)])\n          stor8829[idx] = 10^10 * stor5629[idx] / totaldeposited\n          if stor2.length:\n              call addr(owner) with:\n                 value stor2.length wei\n                   gas 0 wei\n              totalpaidout += stor2.length\n          stop\n      stor1.length = stor0.length + 1\n      stor0.length++\n      if not stor0.length <= stor0.length + 1:\n          idx = (3 * stor0.length) + 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e8\n          while (3 * stor0.length) + 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5 > idx:\n              addr(stor[idx]) = 0\n              stor1[idx] = 0\n              stor2[idx] = 0\n              idx = idx + 1\n              continue \n      require stor0.length - 1 < stor0.length\n      addr(stor5629[stor0.length]) = caller\n      uint256(stor[code.data[3476 len 32] + (3 * stor0.length) - 3]) = call.value - (call.value / 100)\n      stor8829[stor0.length] = 10^10 * call.value - (call.value / 100) / totaldeposited\n      uint8(message_To_Investors.length) = 54\n      Mask(248, 0, message_To_Investors.length.field_8) = 'New Investor has joined us!' / 256\n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n      idx = 0\n      while idx < stor0.length:\n          mem[0] = 0\n          stor8829[idx] = 10^10 * uint256(stor[code.data[3476 len 32] + (3 * idx)]) / totaldeposited\n          idx = idx + 1\n          continue \n      if stor2.length:\n          call addr(owner) with:\n             value stor2.length wei\n               gas 0 wei\n          totalpaidout += stor2.length\n\ndef _fallback() payable: # default function\n  if call.value < 2 * 10^18:\n      call addr(owner) with:\n         value call.value / 100 wei\n           gas 0 wei\n      totalpaidout += call.value / 100\n      if stor0.length:\n          if call.value - (call.value / 100):\n              idx = 0\n              s = 0\n              while idx < stor0.length:\n                  mem[0] = 0\n                  call stor5629[idx] with:\n                     value (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10 wei\n                       gas 0 wei\n                  totalpaidout += (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  totaldividends += (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  idx = idx + 1\n                  s = (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  continue \n              uint8(message_To_Investors.length) = 58\n              Mask(248, 0, message_To_Investors.length.field_8) = 'Dividends have been paid out!' / 256\n              idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n              while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n                  uint256(stor[idx]) = 0\n                  idx = idx + 1\n                  continue \n  else:\n      stor2.length = call.value / 100\n      totaldeposited += call.value\n      balance = call.value - (call.value / 100) + balance\n      idx = 0\n      while idx < stor0.length:\n          mem[0] = 0\n          if stor5629[idx] != caller:\n              idx = idx + 1\n              continue \n          require idx < stor0.length\n          uint256(stor[code.data[3476 len 32] + (3 * idx)]) = call.value - (call.value / 100) + uint256(stor[code.data[3476 len 32] + (3 * idx)])\n          stor8829[idx] = 10^10 * stor5629[idx] / totaldeposited\n          if stor2.length:\n              call addr(owner) with:\n                 value stor2.length wei\n                   gas 0 wei\n              totalpaidout += stor2.length\n          stop\n      stor1.length = stor0.length + 1\n      stor0.length++\n      if not stor0.length <= stor0.length + 1:\n          idx = (3 * stor0.length) + 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e8\n          while (3 * stor0.length) + 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5 > idx:\n              addr(stor[idx]) = 0\n              stor1[idx] = 0\n              stor2[idx] = 0\n              idx = idx + 1\n              continue \n      require stor0.length - 1 < stor0.length\n      addr(stor5629[stor0.length]) = caller\n      uint256(stor[code.data[3476 len 32] + (3 * stor0.length) - 3]) = call.value - (call.value / 100)\n      stor8829[stor0.length] = 10^10 * call.value - (call.value / 100) / totaldeposited\n      uint8(message_To_Investors.length) = 54\n      Mask(248, 0, message_To_Investors.length.field_8) = 'New Investor has joined us!' / 256\n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n      idx = 0\n      while idx < stor0.length:\n          mem[0] = 0\n          stor8829[idx] = 10^10 * uint256(stor[code.data[3476 len 32] + (3 * idx)]) / totaldeposited\n          idx = idx + 1\n          continue \n      if stor2.length:\n          call addr(owner) with:\n             value stor2.length wei\n               gas 0 wei\n          totalpaidout += stor2.length\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: # Palkeoramix decompiler. \n\ndef storage:\n  stor0 is array of struct at storage 0\n  stor1 is array of uint256 at storage 1\n  stor2 is array of uint256 at storage 2\n  balance is uint256 at storage 3\n  totaldeposited is uint256 at storage 4\n  totalpaidout is uint256 at storage 5\n  totaldividends is uint256 at storage 6\n  message_To_Investors is array of uint256 at storage 7\n  owner is addr at storage 8\n  stor8 is uint256 at storage 8\n  stor38971441815954291753963644440956123609054264817261647753096923611481829733346 is array of addr at storage 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e2\n  stor38971441815954291753963644440956123609054264817261647753096923611481829733349 is array of addr at storage 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5\n  stor38971441815954291753963644440956123609054264817261647753096923611481829733350 is array of uint256 at storage 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e6\n  stor61587084245117611172629852450465480611646058697269570417053482988027362866146 is array of uint256 at storage 0x88290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e2\n  stor61587084245117611172629852450465480611646058697269570417053482988027362866149 is array of uint256 at storage 0x88290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5\n\ndef totalpaidout() payable: \n  return totalpaidout\n\ndef owner() payable: \n  return addr(owner)\n\ndef Message_To_Investors() payable: \n  return uint256(message_To_Investors[0 len message_To_Investors.length].field_0)\n\ndef fees() payable: \n  return stor2.length\n\ndef total_investors() payable: \n  return stor1.length\n\ndef balance() payable: \n  return balance\n\ndef totaldividends() payable: \n  return totaldividends\n\ndef totaldeposited() payable: \n  return totaldeposited\n\n#\n#  Regular functions\n#\n\ndef NewMessage(string _new_sms) payable: \n  if caller == addr(owner):\n      uint256(message_To_Investors[].field_0) = Array(len=_new_sms.length, data=_new_sms[all])\n\ndef investors(uint256 _param1) payable: \n  require _param1 < stor0.length\n  return stor5629[_param1], uint256(stor[(3 * _param1) + code.data[3476 len 32]]), stor8829[_param1]\n\ndef NewOwner(address _new_owner) payable: \n  if caller == addr(owner):\n      uint256(stor8) = _new_owner or Mask(96, 160, uint256(stor8))\n      uint8(message_To_Investors.length) = 62\n      Mask(248, 0, message_To_Investors.length.field_8) = 'The contract has a new manager!'\n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n\ndef ManualDeposit() payable: \n  if caller == addr(owner):\n      mem[128] = 'Manual Deposit received from the'\n      mem[160] = ' Manager'\n      message_To_Investors.length = 81\n      s = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      idx = 128\n      while 168 > idx:\n          uint256(stor[s]) = mem[idx]\n          s = s + 1\n          idx = idx + 32\n          continue \n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c8\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n\ndef Emergency() payable: \n  if caller == addr(owner):\n      if balance:\n          call addr(owner) with:\n             value balance wei\n               gas 0 wei\n          balance = 0\n          mem[128] = 'Emergency Withdraw has been issu'\n          mem[160] = 'ed!'\n          message_To_Investors.length = 71\n          s = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n          idx = 128\n          while 163 > idx:\n              uint256(stor[s]) = mem[idx]\n              s = s + 1\n              idx = idx + 32\n              continue \n          idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c8\n          while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n              uint256(stor[idx]) = 0\n              idx = idx + 1\n              continue \n\ndef NewManualInvestor(address _new_investor, uint256 _new_amount) payable: \n  if caller == addr(owner):\n      totaldeposited += _new_amount\n      stor1.length = stor0.length + 1\n      stor0.length++\n      if not stor0.length <= stor0.length + 1:\n          idx = (3 * stor0.length) + 3\n          while 3 * stor0.length > idx:\n              addr(stor0[idx].field_0) = 0\n              uint256(stor0[idx].field_256) = 0\n              uint256(stor0[idx].field_512) = 0\n              idx = idx + 1\n              continue \n      require stor0.length - 1 < stor0.length\n      uint256(stor5629[stor0.length]) = _new_investor or Mask(96, 160, uint256(stor5629[stor0.length]))\n      uint256(stor[code.data[3476 len 32] + (3 * stor0.length) - 3]) = _new_amount\n      stor8829[stor0.length] = 10^10 * _new_amount / totaldeposited\n      mem[128] = 'New manual Investor has been add'\n      mem[160] = 'ed by the Manager!'\n      message_To_Investors.length = 101\n      s = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      idx = 128\n      while 178 > idx:\n          uint256(stor[s]) = mem[idx]\n          s = s + 1\n          idx = idx + 32\n          continue \n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c8\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n\ndef Enter() payable: \n  if call.value < 2 * 10^18:\n      call addr(owner) with:\n         value call.value / 100 wei\n           gas 0 wei\n      totalpaidout += call.value / 100\n      if stor0.length:\n          if call.value - (call.value / 100):\n              idx = 0\n              s = 0\n              while idx < stor0.length:\n                  mem[0] = 0\n                  call stor5629[idx] with:\n                     value (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10 wei\n                       gas 0 wei\n                  totalpaidout += (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  totaldividends += (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  idx = idx + 1\n                  s = (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  continue \n              uint8(message_To_Investors.length) = 58\n              Mask(248, 0, message_To_Investors.length.field_8) = 'Dividends have been paid out!' / 256\n              idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n              while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n                  uint256(stor[idx]) = 0\n                  idx = idx + 1\n                  continue \n  else:\n      stor2.length = call.value / 100\n      totaldeposited += call.value\n      balance = call.value - (call.value / 100) + balance\n      idx = 0\n      while idx < stor0.length:\n          mem[0] = 0\n          if stor5629[idx] != caller:\n              idx = idx + 1\n              continue \n          require idx < stor0.length\n          uint256(stor[code.data[3476 len 32] + (3 * idx)]) = call.value - (call.value / 100) + uint256(stor[code.data[3476 len 32] + (3 * idx)])\n          stor8829[idx] = 10^10 * stor5629[idx] / totaldeposited\n          if stor2.length:\n              call addr(owner) with:\n                 value stor2.length wei\n                   gas 0 wei\n              totalpaidout += stor2.length\n          stop\n      stor1.length = stor0.length + 1\n      stor0.length++\n      if not stor0.length <= stor0.length + 1:\n          idx = (3 * stor0.length) + 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e8\n          while (3 * stor0.length) + 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5 > idx:\n              addr(stor[idx]) = 0\n              stor1[idx] = 0\n              stor2[idx] = 0\n              idx = idx + 1\n              continue \n      require stor0.length - 1 < stor0.length\n      addr(stor5629[stor0.length]) = caller\n      uint256(stor[code.data[3476 len 32] + (3 * stor0.length) - 3]) = call.value - (call.value / 100)\n      stor8829[stor0.length] = 10^10 * call.value - (call.value / 100) / totaldeposited\n      uint8(message_To_Investors.length) = 54\n      Mask(248, 0, message_To_Investors.length.field_8) = 'New Investor has joined us!' / 256\n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n      idx = 0\n      while idx < stor0.length:\n          mem[0] = 0\n          stor8829[idx] = 10^10 * uint256(stor[code.data[3476 len 32] + (3 * idx)]) / totaldeposited\n          idx = idx + 1\n          continue \n      if stor2.length:\n          call addr(owner) with:\n             value stor2.length wei\n               gas 0 wei\n          totalpaidout += stor2.length\n\ndef _fallback() payable: # default function\n  if call.value < 2 * 10^18:\n      call addr(owner) with:\n         value call.value / 100 wei\n           gas 0 wei\n      totalpaidout += call.value / 100\n      if stor0.length:\n          if call.value - (call.value / 100):\n              idx = 0\n              s = 0\n              while idx < stor0.length:\n                  mem[0] = 0\n                  call stor5629[idx] with:\n                     value (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10 wei\n                       gas 0 wei\n                  totalpaidout += (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  totaldividends += (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  idx = idx + 1\n                  s = (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  continue \n              uint8(message_To_Investors.length) = 58\n              Mask(248, 0, message_To_Investors.length.field_8) = 'Dividends have been paid out!' / 256\n              idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n              while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n                  uint256(stor[idx]) = 0\n                  idx = idx + 1\n                  continue \n  else:\n      stor2.length = call.value / 100\n      totaldeposited += call.value\n      balance = call.value - (call.value / 100) + balance\n      idx = 0\n      while idx < stor0.length:\n          mem[0] = 0\n          if stor5629[idx] != caller:\n              idx = idx + 1\n              continue \n          require idx < stor0.length\n          uint256(stor[code.data[3476 len 32] + (3 * idx)]) = call.value - (call.value / 100) + uint256(stor[code.data[3476 len 32] + (3 * idx)])\n          stor8829[idx] = 10^10 * stor5629[idx] / totaldeposited\n          if stor2.length:\n              call addr(owner) with:\n                 value stor2.length wei\n                   gas 0 wei\n              totalpaidout += stor2.length\n          stop\n      stor1.length = stor0.length + 1\n      stor0.length++\n      if not stor0.length <= stor0.length + 1:\n          idx = (3 * stor0.length) + 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e8\n          while (3 * stor0.length) + 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5 > idx:\n              addr(stor[idx]) = 0\n              stor1[idx] = 0\n              stor2[idx] = 0\n              idx = idx + 1\n              continue \n      require stor0.length - 1 < stor0.length\n      addr(stor5629[stor0.length]) = caller\n      uint256(stor[code.data[3476 len 32] + (3 * stor0.length) - 3]) = call.value - (call.value / 100)\n      stor8829[stor0.length] = 10^10 * call.value - (call.value / 100) / totaldeposited\n      uint8(message_To_Investors.length) = 54\n      Mask(248, 0, message_To_Investors.length.field_8) = 'New Investor has joined us!' / 256\n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n      idx = 0\n      while idx < stor0.length:\n          mem[0] = 0\n          stor8829[idx] = 10^10 * uint256(stor[code.data[3476 len 32] + (3 * idx)]) / totaldeposited\n          idx = idx + 1\n          continue \n      if stor2.length:\n          call addr(owner) with:\n             value stor2.length wei\n               gas 0 wei\n          totalpaidout += stor2.length\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: # Palkeoramix decompiler. \n\ndef storage:\n  stor0 is array of struct at storage 0\n  stor1 is array of uint256 at storage 1\n  stor2 is array of uint256 at storage 2\n  balance is uint256 at storage 3\n  totaldeposited is uint256 at storage 4\n  totalpaidout is uint256 at storage 5\n  totaldividends is uint256 at storage 6\n  message_To_Investors is array of uint256 at storage 7\n  owner is addr at storage 8\n  stor8 is uint256 at storage 8\n  stor38971441815954291753963644440956123609054264817261647753096923611481829733346 is array of addr at storage 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e2\n  stor38971441815954291753963644440956123609054264817261647753096923611481829733349 is array of addr at storage 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5\n  stor38971441815954291753963644440956123609054264817261647753096923611481829733350 is array of uint256 at storage 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e6\n  stor61587084245117611172629852450465480611646058697269570417053482988027362866146 is array of uint256 at storage 0x88290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e2\n  stor61587084245117611172629852450465480611646058697269570417053482988027362866149 is array of uint256 at storage 0x88290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5\n\ndef totalpaidout() payable: \n  return totalpaidout\n\ndef owner() payable: \n  return addr(owner)\n\ndef Message_To_Investors() payable: \n  return uint256(message_To_Investors[0 len message_To_Investors.length].field_0)\n\ndef fees() payable: \n  return stor2.length\n\ndef total_investors() payable: \n  return stor1.length\n\ndef balance() payable: \n  return balance\n\ndef totaldividends() payable: \n  return totaldividends\n\ndef totaldeposited() payable: \n  return totaldeposited\n\n#\n#  Regular functions\n#\n\ndef NewMessage(string _new_sms) payable: \n  if caller == addr(owner):\n      uint256(message_To_Investors[].field_0) = Array(len=_new_sms.length, data=_new_sms[all])\n\ndef investors(uint256 _param1) payable: \n  require _param1 < stor0.length\n  return stor5629[_param1], uint256(stor[(3 * _param1) + code.data[3476 len 32]]), stor8829[_param1]\n\ndef NewOwner(address _new_owner) payable: \n  if caller == addr(owner):\n      uint256(stor8) = _new_owner or Mask(96, 160, uint256(stor8))\n      uint8(message_To_Investors.length) = 62\n      Mask(248, 0, message_To_Investors.length.field_8) = 'The contract has a new manager!'\n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n\ndef ManualDeposit() payable: \n  if caller == addr(owner):\n      mem[128] = 'Manual Deposit received from the'\n      mem[160] = ' Manager'\n      message_To_Investors.length = 81\n      s = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      idx = 128\n      while 168 > idx:\n          uint256(stor[s]) = mem[idx]\n          s = s + 1\n          idx = idx + 32\n          continue \n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c8\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n\ndef Emergency() payable: \n  if caller == addr(owner):\n      if balance:\n          call addr(owner) with:\n             value balance wei\n               gas 0 wei\n          balance = 0\n          mem[128] = 'Emergency Withdraw has been issu'\n          mem[160] = 'ed!'\n          message_To_Investors.length = 71\n          s = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n          idx = 128\n          while 163 > idx:\n              uint256(stor[s]) = mem[idx]\n              s = s + 1\n              idx = idx + 32\n              continue \n          idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c8\n          while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n              uint256(stor[idx]) = 0\n              idx = idx + 1\n              continue \n\ndef NewManualInvestor(address _new_investor, uint256 _new_amount) payable: \n  if caller == addr(owner):\n      totaldeposited += _new_amount\n      stor1.length = stor0.length + 1\n      stor0.length++\n      if not stor0.length <= stor0.length + 1:\n          idx = (3 * stor0.length) + 3\n          while 3 * stor0.length > idx:\n              addr(stor0[idx].field_0) = 0\n              uint256(stor0[idx].field_256) = 0\n              uint256(stor0[idx].field_512) = 0\n              idx = idx + 1\n              continue \n      require stor0.length - 1 < stor0.length\n      uint256(stor5629[stor0.length]) = _new_investor or Mask(96, 160, uint256(stor5629[stor0.length]))\n      uint256(stor[code.data[3476 len 32] + (3 * stor0.length) - 3]) = _new_amount\n      stor8829[stor0.length] = 10^10 * _new_amount / totaldeposited\n      mem[128] = 'New manual Investor has been add'\n      mem[160] = 'ed by the Manager!'\n      message_To_Investors.length = 101\n      s = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      idx = 128\n      while 178 > idx:\n          uint256(stor[s]) = mem[idx]\n          s = s + 1\n          idx = idx + 32\n          continue \n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c8\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n\ndef Enter() payable: \n  if call.value < 2 * 10^18:\n      call addr(owner) with:\n         value call.value / 100 wei\n           gas 0 wei\n      totalpaidout += call.value / 100\n      if stor0.length:\n          if call.value - (call.value / 100):\n              idx = 0\n              s = 0\n              while idx < stor0.length:\n                  mem[0] = 0\n                  call stor5629[idx] with:\n                     value (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10 wei\n                       gas 0 wei\n                  totalpaidout += (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  totaldividends += (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  idx = idx + 1\n                  s = (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  continue \n              uint8(message_To_Investors.length) = 58\n              Mask(248, 0, message_To_Investors.length.field_8) = 'Dividends have been paid out!' / 256\n              idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n              while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n                  uint256(stor[idx]) = 0\n                  idx = idx + 1\n                  continue \n  else:\n      stor2.length = call.value / 100\n      totaldeposited += call.value\n      balance = call.value - (call.value / 100) + balance\n      idx = 0\n      while idx < stor0.length:\n          mem[0] = 0\n          if stor5629[idx] != caller:\n              idx = idx + 1\n              continue \n          require idx < stor0.length\n          uint256(stor[code.data[3476 len 32] + (3 * idx)]) = call.value - (call.value / 100) + uint256(stor[code.data[3476 len 32] + (3 * idx)])\n          stor8829[idx] = 10^10 * stor5629[idx] / totaldeposited\n          if stor2.length:\n              call addr(owner) with:\n                 value stor2.length wei\n                   gas 0 wei\n              totalpaidout += stor2.length\n          stop\n      stor1.length = stor0.length + 1\n      stor0.length++\n      if not stor0.length <= stor0.length + 1:\n          idx = (3 * stor0.length) + 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e8\n          while (3 * stor0.length) + 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5 > idx:\n              addr(stor[idx]) = 0\n              stor1[idx] = 0\n              stor2[idx] = 0\n              idx = idx + 1\n              continue \n      require stor0.length - 1 < stor0.length\n      addr(stor5629[stor0.length]) = caller\n      uint256(stor[code.data[3476 len 32] + (3 * stor0.length) - 3]) = call.value - (call.value / 100)\n      stor8829[stor0.length] = 10^10 * call.value - (call.value / 100) / totaldeposited\n      uint8(message_To_Investors.length) = 54\n      Mask(248, 0, message_To_Investors.length.field_8) = 'New Investor has joined us!' / 256\n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n      idx = 0\n      while idx < stor0.length:\n          mem[0] = 0\n          stor8829[idx] = 10^10 * uint256(stor[code.data[3476 len 32] + (3 * idx)]) / totaldeposited\n          idx = idx + 1\n          continue \n      if stor2.length:\n          call addr(owner) with:\n             value stor2.length wei\n               gas 0 wei\n          totalpaidout += stor2.length\n\ndef _fallback() payable: # default function\n  if call.value < 2 * 10^18:\n      call addr(owner) with:\n         value call.value / 100 wei\n           gas 0 wei\n      totalpaidout += call.value / 100\n      if stor0.length:\n          if call.value - (call.value / 100):\n              idx = 0\n              s = 0\n              while idx < stor0.length:\n                  mem[0] = 0\n                  call stor5629[idx] with:\n                     value (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10 wei\n                       gas 0 wei\n                  totalpaidout += (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  totaldividends += (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  idx = idx + 1\n                  s = (call.value * stor8829[idx]) - (call.value / 100 * stor8829[idx]) / 10^10\n                  continue \n              uint8(message_To_Investors.length) = 58\n              Mask(248, 0, message_To_Investors.length.field_8) = 'Dividends have been paid out!' / 256\n              idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n              while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n                  uint256(stor[idx]) = 0\n                  idx = idx + 1\n                  continue \n  else:\n      stor2.length = call.value / 100\n      totaldeposited += call.value\n      balance = call.value - (call.value / 100) + balance\n      idx = 0\n      while idx < stor0.length:\n          mem[0] = 0\n          if stor5629[idx] != caller:\n              idx = idx + 1\n              continue \n          require idx < stor0.length\n          uint256(stor[code.data[3476 len 32] + (3 * idx)]) = call.value - (call.value / 100) + uint256(stor[code.data[3476 len 32] + (3 * idx)])\n          stor8829[idx] = 10^10 * stor5629[idx] / totaldeposited\n          if stor2.length:\n              call addr(owner) with:\n                 value stor2.length wei\n                   gas 0 wei\n              totalpaidout += stor2.length\n          stop\n      stor1.length = stor0.length + 1\n      stor0.length++\n      if not stor0.length <= stor0.length + 1:\n          idx = (3 * stor0.length) + 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e8\n          while (3 * stor0.length) + 0x56290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5 > idx:\n              addr(stor[idx]) = 0\n              stor1[idx] = 0\n              stor2[idx] = 0\n              idx = idx + 1\n              continue \n      require stor0.length - 1 < stor0.length\n      addr(stor5629[stor0.length]) = caller\n      uint256(stor[code.data[3476 len 32] + (3 * stor0.length) - 3]) = call.value - (call.value / 100)\n      stor8829[stor0.length] = 10^10 * call.value - (call.value / 100) / totaldeposited\n      uint8(message_To_Investors.length) = 54\n      Mask(248, 0, message_To_Investors.length.field_8) = 'New Investor has joined us!' / 256\n      idx = 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6\n      while (message_To_Investors.length + 31 / 32) + 0x63a66cc928b5edb82af9bd49922954155ab7b0942694bea4ce44661d9a8736c6 > idx:\n          uint256(stor[idx]) = 0\n          idx = idx + 1\n          continue \n      idx = 0\n      while idx < stor0.length:\n          mem[0] = 0\n          stor8829[idx] = 10^10 * uint256(stor[code.data[3476 len 32] + (3 * idx)]) / totaldeposited\n          idx = idx + 1\n          continue \n      if stor2.length:\n          call addr(owner) with:\n             value stor2.length wei\n               gas 0 wei\n          totalpaidout += stor2.length\n\n.",
	"status": "1",
	"time_cost": 52.53460073471069,
	"usage": {
		"completion_tokens": 612,
		"prompt_tokens": 4358,
		"total_tokens": 4970
	}
}