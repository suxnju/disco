{
	"address": "0x23ea10cc1e6ebdb499d24e45369a35f43627062f",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled code, the Solidity contract may look like:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    uint256 storage0;\n    uint256 storage1;\n    address storage2;\n    \n    function init(uint256 arg0, address arg1) external returns (bool success) {\n        require(msg.sender == storage2, \"Not Authorized\");\n        require(!(storage1 & 0xff), \"Already Initialized\");\n        require(arg0 > 0, \"Rate cannot be zero\");\n        require(arg1 != address(0), \"Invalid address\");\n        storage0 = arg0;\n        storage1 = (uint256(arg1) * 0x0100 ** 0x01) | (storage1 & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01));\n        storage1 = (storage1 & ~0xff) | 0x01;\n        return true;\n    }\n    \n    function isInitialized() public view returns (bool isInit) {\n        return (storage1 & 0xff) != 0;\n    }\n    \n    function func_0214() public view returns (address addr) {\n        return address(storage1 / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function burn() external returns (bool success) {\n        require((storage1 & 0xff), \"Not Initialized\");\n        // Implementation missing\n    }\n    \n    function func_06A6() public view returns (uint256 value) {\n        return storage0;\n    }\n    \n    function owner() public view returns (address ownerAddress) {\n        return address(storage2 & 0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_0918(uint256 arg0, uint256 arg1) internal pure returns (uint256 result) {\n        if (arg0 == 0) {\n            return 0;\n        }\n        uint256 product = arg0 * arg1;\n        require(product / arg0 == arg1, \"SafeMath: multiplication overflow\");\n        return product;\n    }\n}\n```\n\nPlease note, this is a high-level approximation of the contract. The implementation for the `burn()` function and other details might not be accurate due to the complexity and the lack of context. Also, the function names are approximated as they are not recoverable from the EVM Bytecode.",
				"role": "assistant"
			}
		}
	],
	"created": 1700470683,
	"id": "chatcmpl-8MuORPFk9tJQqXUJj8DmN3Konkipi",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (var0 == 0x392e53cd) {\n            // Dispatch table entry for isInitialized()\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x006c;\n            var var2 = isInitialized();\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = !!var2;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n        } else if (var0 == 0x41232f6b) {\n            // Dispatch table entry for 0x41232f6b (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x009b;\n            var2 = func_0214();\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n        } else if (var0 == 0x44df8e70) {\n            // Dispatch table entry for burn()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00f2;\n            var1 = burn();\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = !!var1;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n        } else if (var0 == 0x456a7cd8) {\n            // Dispatch table entry for 0x456a7cd8 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0121;\n            var2 = func_06A6();\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var2;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x014c;\n            var2 = owner();\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n        } else if (var0 == 0xb792e6ec) {\n            // Dispatch table entry for init(uint256,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01e7;\n            var2 = 0x04;\n            var var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = init(var2, var3);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = !!var1;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n        } else { stop(); }\n    }\n    \n    function init(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = 0x00;\n    \n        if (storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x01] & 0xff) {\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp12 = temp11 + 0x04;\n            var temp13 = temp12 + 0x20;\n            memory[temp12:temp12 + 0x20] = temp13 - temp12;\n            memory[temp13:temp13 + 0x20] = 0x1f;\n            var temp14 = temp13 + 0x20;\n            memory[temp14:temp14 + 0x20] = 0x636f6e747261637420697320616c726561647920696e697469616c697a656400;\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + (temp14 + 0x20) - temp15]);\n        } else if (arg0 <= 0x00) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp7 = temp6 + 0x04;\n            var temp8 = temp7 + 0x20;\n            memory[temp7:temp7 + 0x20] = temp8 - temp7;\n            memory[temp8:temp8 + 0x20] = 0x13;\n            var temp9 = temp8 + 0x20;\n            memory[temp9:temp9 + 0x20] = 0x726174652063616e6e6f74206265207a65726f00000000000000000000000000;\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + (temp9 + 0x20) - temp10]);\n        } else if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n            storage[0x00] = arg0;\n            storage[0x01] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x01 | (storage[0x01] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01));\n            storage[0x01] = (storage[0x01] & ~0xff) | 0x01;\n            return 0x01;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp2 = temp1 + 0x04;\n            var temp3 = temp2 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp3 - temp2;\n            memory[temp3:temp3 + 0x20] = 0x22;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x22] = code[0x09e3:0x0a05];\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + (temp4 + 0x40) - temp5]);\n        }\n    }\n    \n    function isInitialized() returns (var r0) { return storage[0x01] & 0xff; }\n    \n    function func_0214() returns (var r0) { return storage[0x01] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function burn() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x01] & 0xff) {\n            var var1 = 0x00;\n            var var2 = storage[0x01] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = 0x70a08231;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = msg.sender;\n            var var4 = temp1 + 0x20;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = var2;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var6:var6 + var5] = address(var9).staticcall.gas(msg.gas)(memory[var8:var8 + var7]);\n            var5 = !temp2;\n        \n            if (!var5) {\n                var2 = memory[0x40:0x60];\n                var3 = returndata.length;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp3 = memory[var2:var2 + 0x20];\n                var1 = temp3;\n                var2 = 0x00;\n                var3 = 0x03a8;\n                var4 = var1;\n                var5 = storage[0x00];\n                var3 = func_0918(var4, var5);\n                var2 = var3;\n            \n                if (address(this).balance >= var2) {\n                    var3 = storage[0x01] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var4 = 0x23b872dd;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = (var4 & 0xffffffff) << 0xe0;\n                    var temp5 = temp4 + 0x04;\n                    memory[temp5:temp5 + 0x20] = msg.sender;\n                    var temp6 = temp5 + 0x20;\n                    memory[temp6:temp6 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                    var temp7 = temp6 + 0x20;\n                    memory[temp7:temp7 + 0x20] = var1;\n                    var5 = temp7 + 0x20;\n                    var6 = 0x20;\n                    var7 = memory[0x40:0x60];\n                    var8 = var5 - var7;\n                    var9 = var7;\n                    var10 = 0x00;\n                    var var11 = var3;\n                    var var12 = !address(var11).code.length;\n                \n                    if (var12) { revert(memory[0x00:0x00]); }\n                \n                    var temp8;\n                    temp8, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n                    var6 = !temp8;\n                \n                    if (!var6) {\n                        var3 = memory[0x40:0x60];\n                        var4 = returndata.length;\n                    \n                        if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        if (memory[var3:var3 + 0x20]) {\n                            var3 = msg.sender;\n                            var temp9 = memory[0x40:0x60];\n                            var temp10;\n                            temp10, memory[temp9:temp9 + 0x00] = address(var3 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(msg.gas).value(var2)(memory[temp9:temp9 + memory[0x40:0x60] - temp9]);\n                            var5 = returndata.length;\n                            var6 = var5;\n                        \n                            if (var6 == 0x00) {\n                                var0 = var4;\n                            \n                                if (var0) {\n                                label_0651:\n                                    var temp11 = memory[0x40:0x60];\n                                    memory[temp11:temp11 + 0x20] = var2;\n                                    var temp12 = memory[0x40:0x60];\n                                    log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0x73f04af9dcc582a923ec15d3eea990fe34adabfff2879e28d44572e01a54abb6, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3]]);\n                                    return var0;\n                                } else {\n                                label_05E4:\n                                    var temp13 = memory[0x40:0x60];\n                                    memory[temp13:temp13 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                                    var temp14 = temp13 + 0x04;\n                                    var temp15 = temp14 + 0x20;\n                                    memory[temp14:temp14 + 0x20] = temp15 - temp14;\n                                    memory[temp15:temp15 + 0x20] = 0x18;\n                                    var temp16 = temp15 + 0x20;\n                                    memory[temp16:temp16 + 0x20] = 0x5472616e73666572206f66204574686572206661696c65640000000000000000;\n                                    var temp17 = memory[0x40:0x60];\n                                    revert(memory[temp17:temp17 + (temp16 + 0x20) - temp17]);\n                                }\n                            } else {\n                                var temp18 = memory[0x40:0x60];\n                                var5 = temp18;\n                                memory[0x40:0x60] = var5 + (returndata.length + 0x3f & ~0x1f);\n                                memory[var5:var5 + 0x20] = returndata.length;\n                                var temp19 = returndata.length;\n                                memory[var5 + 0x20:var5 + 0x20 + temp19] = returndata[0x00:0x00 + temp19];\n                                var0 = var4;\n                            \n                                if (var0) { goto label_0651; }\n                                else { goto label_05E4; }\n                            }\n                        } else {\n                            var temp20 = memory[0x40:0x60];\n                            memory[temp20:temp20 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp21 = temp20 + 0x04;\n                            var temp22 = temp21 + 0x20;\n                            memory[temp21:temp21 + 0x20] = temp22 - temp21;\n                            memory[temp22:temp22 + 0x20] = 0x25;\n                            var temp23 = temp22 + 0x20;\n                            memory[temp23:temp23 + 0x25] = code[0x0a05:0x0a2a];\n                            var temp24 = memory[0x40:0x60];\n                            revert(memory[temp24:temp24 + (temp23 + 0x40) - temp24]);\n                        }\n                    } else {\n                        var temp25 = returndata.length;\n                        memory[0x00:0x00 + temp25] = returndata[0x00:0x00 + temp25];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp26 = memory[0x40:0x60];\n                    memory[temp26:temp26 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp27 = temp26 + 0x04;\n                    var temp28 = temp27 + 0x20;\n                    memory[temp27:temp27 + 0x20] = temp28 - temp27;\n                    memory[temp28:temp28 + 0x20] = 0x23;\n                    var temp29 = temp28 + 0x20;\n                    memory[temp29:temp29 + 0x23] = code[0x099f:0x09c2];\n                    var temp30 = memory[0x40:0x60];\n                    revert(memory[temp30:temp30 + (temp29 + 0x40) - temp30]);\n                }\n            } else {\n                var temp31 = returndata.length;\n                memory[0x00:0x00 + temp31] = returndata[0x00:0x00 + temp31];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp32 = memory[0x40:0x60];\n            memory[temp32:temp32 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp33 = temp32 + 0x04;\n            var temp34 = temp33 + 0x20;\n            memory[temp33:temp33 + 0x20] = temp34 - temp33;\n            memory[temp34:temp34 + 0x20] = 0x1b;\n            var temp35 = temp34 + 0x20;\n            memory[temp35:temp35 + 0x20] = 0x636f6e7472616374206973206e6f7420696e697469616c697a65640000000000;\n            var temp36 = memory[0x40:0x60];\n            revert(memory[temp36:temp36 + (temp35 + 0x20) - temp36]);\n        }\n    }\n    \n    function func_06A6() returns (var r0) { return storage[0x00]; }\n    \n    function owner() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_0918(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 == var0) { return 0x00; }\n    \n        var var1 = arg0 * arg1;\n        var var2 = arg1;\n        var var3 = arg0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        var temp2 = temp1 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2 - temp1;\n        memory[temp2:temp2 + 0x20] = 0x21;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x21] = code[0x09c2:0x09e3];\n        var temp4 = memory[0x40:0x60];\n        revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (var0 == 0x392e53cd) {\n            // Dispatch table entry for isInitialized()\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x006c;\n            var var2 = isInitialized();\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = !!var2;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n        } else if (var0 == 0x41232f6b) {\n            // Dispatch table entry for 0x41232f6b (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x009b;\n            var2 = func_0214();\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n        } else if (var0 == 0x44df8e70) {\n            // Dispatch table entry for burn()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00f2;\n            var1 = burn();\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = !!var1;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n        } else if (var0 == 0x456a7cd8) {\n            // Dispatch table entry for 0x456a7cd8 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0121;\n            var2 = func_06A6();\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var2;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x014c;\n            var2 = owner();\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n        } else if (var0 == 0xb792e6ec) {\n            // Dispatch table entry for init(uint256,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01e7;\n            var2 = 0x04;\n            var var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = init(var2, var3);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = !!var1;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n        } else { stop(); }\n    }\n    \n    function init(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = 0x00;\n    \n        if (storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x01] & 0xff) {\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp12 = temp11 + 0x04;\n            var temp13 = temp12 + 0x20;\n            memory[temp12:temp12 + 0x20] = temp13 - temp12;\n            memory[temp13:temp13 + 0x20] = 0x1f;\n            var temp14 = temp13 + 0x20;\n            memory[temp14:temp14 + 0x20] = 0x636f6e747261637420697320616c726561647920696e697469616c697a656400;\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + (temp14 + 0x20) - temp15]);\n        } else if (arg0 <= 0x00) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp7 = temp6 + 0x04;\n            var temp8 = temp7 + 0x20;\n            memory[temp7:temp7 + 0x20] = temp8 - temp7;\n            memory[temp8:temp8 + 0x20] = 0x13;\n            var temp9 = temp8 + 0x20;\n            memory[temp9:temp9 + 0x20] = 0x726174652063616e6e6f74206265207a65726f00000000000000000000000000;\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + (temp9 + 0x20) - temp10]);\n        } else if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n            storage[0x00] = arg0;\n            storage[0x01] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x01 | (storage[0x01] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01));\n            storage[0x01] = (storage[0x01] & ~0xff) | 0x01;\n            return 0x01;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp2 = temp1 + 0x04;\n            var temp3 = temp2 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp3 - temp2;\n            memory[temp3:temp3 + 0x20] = 0x22;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x22] = code[0x09e3:0x0a05];\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + (temp4 + 0x40) - temp5]);\n        }\n    }\n    \n    function isInitialized() returns (var r0) { return storage[0x01] & 0xff; }\n    \n    function func_0214() returns (var r0) { return storage[0x01] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function burn() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x01] & 0xff) {\n            var var1 = 0x00;\n            var var2 = storage[0x01] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = 0x70a08231;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = msg.sender;\n            var var4 = temp1 + 0x20;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = var2;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var6:var6 + var5] = address(var9).staticcall.gas(msg.gas)(memory[var8:var8 + var7]);\n            var5 = !temp2;\n        \n            if (!var5) {\n                var2 = memory[0x40:0x60];\n                var3 = returndata.length;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp3 = memory[var2:var2 + 0x20];\n                var1 = temp3;\n                var2 = 0x00;\n                var3 = 0x03a8;\n                var4 = var1;\n                var5 = storage[0x00];\n                var3 = func_0918(var4, var5);\n                var2 = var3;\n            \n                if (address(this).balance >= var2) {\n                    var3 = storage[0x01] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var4 = 0x23b872dd;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = (var4 & 0xffffffff) << 0xe0;\n                    var temp5 = temp4 + 0x04;\n                    memory[temp5:temp5 + 0x20] = msg.sender;\n                    var temp6 = temp5 + 0x20;\n                    memory[temp6:temp6 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                    var temp7 = temp6 + 0x20;\n                    memory[temp7:temp7 + 0x20] = var1;\n                    var5 = temp7 + 0x20;\n                    var6 = 0x20;\n                    var7 = memory[0x40:0x60];\n                    var8 = var5 - var7;\n                    var9 = var7;\n                    var10 = 0x00;\n                    var var11 = var3;\n                    var var12 = !address(var11).code.length;\n                \n                    if (var12) { revert(memory[0x00:0x00]); }\n                \n                    var temp8;\n                    temp8, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n                    var6 = !temp8;\n                \n                    if (!var6) {\n                        var3 = memory[0x40:0x60];\n                        var4 = returndata.length;\n                    \n                        if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        if (memory[var3:var3 + 0x20]) {\n                            var3 = msg.sender;\n                            var temp9 = memory[0x40:0x60];\n                            var temp10;\n                            temp10, memory[temp9:temp9 + 0x00] = address(var3 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(msg.gas).value(var2)(memory[temp9:temp9 + memory[0x40:0x60] - temp9]);\n                            var5 = returndata.length;\n                            var6 = var5;\n                        \n                            if (var6 == 0x00) {\n                                var0 = var4;\n                            \n                                if (var0) {\n                                label_0651:\n                                    var temp11 = memory[0x40:0x60];\n                                    memory[temp11:temp11 + 0x20] = var2;\n                                    var temp12 = memory[0x40:0x60];\n                                    log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0x73f04af9dcc582a923ec15d3eea990fe34adabfff2879e28d44572e01a54abb6, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3]]);\n                                    return var0;\n                                } else {\n                                label_05E4:\n                                    var temp13 = memory[0x40:0x60];\n                                    memory[temp13:temp13 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                                    var temp14 = temp13 + 0x04;\n                                    var temp15 = temp14 + 0x20;\n                                    memory[temp14:temp14 + 0x20] = temp15 - temp14;\n                                    memory[temp15:temp15 + 0x20] = 0x18;\n                                    var temp16 = temp15 + 0x20;\n                                    memory[temp16:temp16 + 0x20] = 0x5472616e73666572206f66204574686572206661696c65640000000000000000;\n                                    var temp17 = memory[0x40:0x60];\n                                    revert(memory[temp17:temp17 + (temp16 + 0x20) - temp17]);\n                                }\n                            } else {\n                                var temp18 = memory[0x40:0x60];\n                                var5 = temp18;\n                                memory[0x40:0x60] = var5 + (returndata.length + 0x3f & ~0x1f);\n                                memory[var5:var5 + 0x20] = returndata.length;\n                                var temp19 = returndata.length;\n                                memory[var5 + 0x20:var5 + 0x20 + temp19] = returndata[0x00:0x00 + temp19];\n                                var0 = var4;\n                            \n                                if (var0) { goto label_0651; }\n                                else { goto label_05E4; }\n                            }\n                        } else {\n                            var temp20 = memory[0x40:0x60];\n                            memory[temp20:temp20 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp21 = temp20 + 0x04;\n                            var temp22 = temp21 + 0x20;\n                            memory[temp21:temp21 + 0x20] = temp22 - temp21;\n                            memory[temp22:temp22 + 0x20] = 0x25;\n                            var temp23 = temp22 + 0x20;\n                            memory[temp23:temp23 + 0x25] = code[0x0a05:0x0a2a];\n                            var temp24 = memory[0x40:0x60];\n                            revert(memory[temp24:temp24 + (temp23 + 0x40) - temp24]);\n                        }\n                    } else {\n                        var temp25 = returndata.length;\n                        memory[0x00:0x00 + temp25] = returndata[0x00:0x00 + temp25];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp26 = memory[0x40:0x60];\n                    memory[temp26:temp26 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp27 = temp26 + 0x04;\n                    var temp28 = temp27 + 0x20;\n                    memory[temp27:temp27 + 0x20] = temp28 - temp27;\n                    memory[temp28:temp28 + 0x20] = 0x23;\n                    var temp29 = temp28 + 0x20;\n                    memory[temp29:temp29 + 0x23] = code[0x099f:0x09c2];\n                    var temp30 = memory[0x40:0x60];\n                    revert(memory[temp30:temp30 + (temp29 + 0x40) - temp30]);\n                }\n            } else {\n                var temp31 = returndata.length;\n                memory[0x00:0x00 + temp31] = returndata[0x00:0x00 + temp31];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp32 = memory[0x40:0x60];\n            memory[temp32:temp32 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp33 = temp32 + 0x04;\n            var temp34 = temp33 + 0x20;\n            memory[temp33:temp33 + 0x20] = temp34 - temp33;\n            memory[temp34:temp34 + 0x20] = 0x1b;\n            var temp35 = temp34 + 0x20;\n            memory[temp35:temp35 + 0x20] = 0x636f6e7472616374206973206e6f7420696e697469616c697a65640000000000;\n            var temp36 = memory[0x40:0x60];\n            revert(memory[temp36:temp36 + (temp35 + 0x20) - temp36]);\n        }\n    }\n    \n    function func_06A6() returns (var r0) { return storage[0x00]; }\n    \n    function owner() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_0918(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 == var0) { return 0x00; }\n    \n        var var1 = arg0 * arg1;\n        var var2 = arg1;\n        var var3 = arg0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        var temp2 = temp1 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2 - temp1;\n        memory[temp2:temp2 + 0x20] = 0x21;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x21] = code[0x09c2:0x09e3];\n        var temp4 = memory[0x40:0x60];\n        revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) { stop(); }\n    \n        var var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (var0 == 0x392e53cd) {\n            // Dispatch table entry for isInitialized()\n            var var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x006c;\n            var var2 = isInitialized();\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = !!var2;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n        } else if (var0 == 0x41232f6b) {\n            // Dispatch table entry for 0x41232f6b (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x009b;\n            var2 = func_0214();\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n        } else if (var0 == 0x44df8e70) {\n            // Dispatch table entry for burn()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x00f2;\n            var1 = burn();\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = !!var1;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n        } else if (var0 == 0x456a7cd8) {\n            // Dispatch table entry for 0x456a7cd8 (unknown)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0121;\n            var2 = func_06A6();\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var2;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x014c;\n            var2 = owner();\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp9 = memory[0x40:0x60];\n            return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n        } else if (var0 == 0xb792e6ec) {\n            // Dispatch table entry for init(uint256,address)\n            var1 = msg.value;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01e7;\n            var2 = 0x04;\n            var var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var1 = init(var2, var3);\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = !!var1;\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n        } else { stop(); }\n    }\n    \n    function init(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = 0x00;\n    \n        if (storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff != msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x01] & 0xff) {\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp12 = temp11 + 0x04;\n            var temp13 = temp12 + 0x20;\n            memory[temp12:temp12 + 0x20] = temp13 - temp12;\n            memory[temp13:temp13 + 0x20] = 0x1f;\n            var temp14 = temp13 + 0x20;\n            memory[temp14:temp14 + 0x20] = 0x636f6e747261637420697320616c726561647920696e697469616c697a656400;\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + (temp14 + 0x20) - temp15]);\n        } else if (arg0 <= 0x00) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp7 = temp6 + 0x04;\n            var temp8 = temp7 + 0x20;\n            memory[temp7:temp7 + 0x20] = temp8 - temp7;\n            memory[temp8:temp8 + 0x20] = 0x13;\n            var temp9 = temp8 + 0x20;\n            memory[temp9:temp9 + 0x20] = 0x726174652063616e6e6f74206265207a65726f00000000000000000000000000;\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + (temp9 + 0x20) - temp10]);\n        } else if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff != 0xffffffffffffffffffffffffffffffffffffffff & 0x00) {\n            storage[0x00] = arg0;\n            storage[0x01] = (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) * 0x0100 ** 0x01 | (storage[0x01] & ~(0xffffffffffffffffffffffffffffffffffffffff * 0x0100 ** 0x01));\n            storage[0x01] = (storage[0x01] & ~0xff) | 0x01;\n            return 0x01;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp2 = temp1 + 0x04;\n            var temp3 = temp2 + 0x20;\n            memory[temp2:temp2 + 0x20] = temp3 - temp2;\n            memory[temp3:temp3 + 0x20] = 0x22;\n            var temp4 = temp3 + 0x20;\n            memory[temp4:temp4 + 0x22] = code[0x09e3:0x0a05];\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + (temp4 + 0x40) - temp5]);\n        }\n    }\n    \n    function isInitialized() returns (var r0) { return storage[0x01] & 0xff; }\n    \n    function func_0214() returns (var r0) { return storage[0x01] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function burn() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x01] & 0xff) {\n            var var1 = 0x00;\n            var var2 = storage[0x01] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var3 = 0x70a08231;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = msg.sender;\n            var var4 = temp1 + 0x20;\n            var var5 = 0x20;\n            var var6 = memory[0x40:0x60];\n            var var7 = var4 - var6;\n            var var8 = var6;\n            var var9 = var2;\n            var var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var6:var6 + var5] = address(var9).staticcall.gas(msg.gas)(memory[var8:var8 + var7]);\n            var5 = !temp2;\n        \n            if (!var5) {\n                var2 = memory[0x40:0x60];\n                var3 = returndata.length;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp3 = memory[var2:var2 + 0x20];\n                var1 = temp3;\n                var2 = 0x00;\n                var3 = 0x03a8;\n                var4 = var1;\n                var5 = storage[0x00];\n                var3 = func_0918(var4, var5);\n                var2 = var3;\n            \n                if (address(this).balance >= var2) {\n                    var3 = storage[0x01] / 0x0100 ** 0x01 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var4 = 0x23b872dd;\n                    var temp4 = memory[0x40:0x60];\n                    memory[temp4:temp4 + 0x20] = (var4 & 0xffffffff) << 0xe0;\n                    var temp5 = temp4 + 0x04;\n                    memory[temp5:temp5 + 0x20] = msg.sender;\n                    var temp6 = temp5 + 0x20;\n                    memory[temp6:temp6 + 0x20] = 0xffffffffffffffffffffffffffffffffffffffff & 0xffffffffffffffffffffffffffffffffffffffff & 0x00;\n                    var temp7 = temp6 + 0x20;\n                    memory[temp7:temp7 + 0x20] = var1;\n                    var5 = temp7 + 0x20;\n                    var6 = 0x20;\n                    var7 = memory[0x40:0x60];\n                    var8 = var5 - var7;\n                    var9 = var7;\n                    var10 = 0x00;\n                    var var11 = var3;\n                    var var12 = !address(var11).code.length;\n                \n                    if (var12) { revert(memory[0x00:0x00]); }\n                \n                    var temp8;\n                    temp8, memory[var7:var7 + var6] = address(var11).call.gas(msg.gas).value(var10)(memory[var9:var9 + var8]);\n                    var6 = !temp8;\n                \n                    if (!var6) {\n                        var3 = memory[0x40:0x60];\n                        var4 = returndata.length;\n                    \n                        if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        if (memory[var3:var3 + 0x20]) {\n                            var3 = msg.sender;\n                            var temp9 = memory[0x40:0x60];\n                            var temp10;\n                            temp10, memory[temp9:temp9 + 0x00] = address(var3 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(msg.gas).value(var2)(memory[temp9:temp9 + memory[0x40:0x60] - temp9]);\n                            var5 = returndata.length;\n                            var6 = var5;\n                        \n                            if (var6 == 0x00) {\n                                var0 = var4;\n                            \n                                if (var0) {\n                                label_0651:\n                                    var temp11 = memory[0x40:0x60];\n                                    memory[temp11:temp11 + 0x20] = var2;\n                                    var temp12 = memory[0x40:0x60];\n                                    log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0x73f04af9dcc582a923ec15d3eea990fe34adabfff2879e28d44572e01a54abb6, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3]]);\n                                    return var0;\n                                } else {\n                                label_05E4:\n                                    var temp13 = memory[0x40:0x60];\n                                    memory[temp13:temp13 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                                    var temp14 = temp13 + 0x04;\n                                    var temp15 = temp14 + 0x20;\n                                    memory[temp14:temp14 + 0x20] = temp15 - temp14;\n                                    memory[temp15:temp15 + 0x20] = 0x18;\n                                    var temp16 = temp15 + 0x20;\n                                    memory[temp16:temp16 + 0x20] = 0x5472616e73666572206f66204574686572206661696c65640000000000000000;\n                                    var temp17 = memory[0x40:0x60];\n                                    revert(memory[temp17:temp17 + (temp16 + 0x20) - temp17]);\n                                }\n                            } else {\n                                var temp18 = memory[0x40:0x60];\n                                var5 = temp18;\n                                memory[0x40:0x60] = var5 + (returndata.length + 0x3f & ~0x1f);\n                                memory[var5:var5 + 0x20] = returndata.length;\n                                var temp19 = returndata.length;\n                                memory[var5 + 0x20:var5 + 0x20 + temp19] = returndata[0x00:0x00 + temp19];\n                                var0 = var4;\n                            \n                                if (var0) { goto label_0651; }\n                                else { goto label_05E4; }\n                            }\n                        } else {\n                            var temp20 = memory[0x40:0x60];\n                            memory[temp20:temp20 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp21 = temp20 + 0x04;\n                            var temp22 = temp21 + 0x20;\n                            memory[temp21:temp21 + 0x20] = temp22 - temp21;\n                            memory[temp22:temp22 + 0x20] = 0x25;\n                            var temp23 = temp22 + 0x20;\n                            memory[temp23:temp23 + 0x25] = code[0x0a05:0x0a2a];\n                            var temp24 = memory[0x40:0x60];\n                            revert(memory[temp24:temp24 + (temp23 + 0x40) - temp24]);\n                        }\n                    } else {\n                        var temp25 = returndata.length;\n                        memory[0x00:0x00 + temp25] = returndata[0x00:0x00 + temp25];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp26 = memory[0x40:0x60];\n                    memory[temp26:temp26 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp27 = temp26 + 0x04;\n                    var temp28 = temp27 + 0x20;\n                    memory[temp27:temp27 + 0x20] = temp28 - temp27;\n                    memory[temp28:temp28 + 0x20] = 0x23;\n                    var temp29 = temp28 + 0x20;\n                    memory[temp29:temp29 + 0x23] = code[0x099f:0x09c2];\n                    var temp30 = memory[0x40:0x60];\n                    revert(memory[temp30:temp30 + (temp29 + 0x40) - temp30]);\n                }\n            } else {\n                var temp31 = returndata.length;\n                memory[0x00:0x00 + temp31] = returndata[0x00:0x00 + temp31];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp32 = memory[0x40:0x60];\n            memory[temp32:temp32 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var temp33 = temp32 + 0x04;\n            var temp34 = temp33 + 0x20;\n            memory[temp33:temp33 + 0x20] = temp34 - temp33;\n            memory[temp34:temp34 + 0x20] = 0x1b;\n            var temp35 = temp34 + 0x20;\n            memory[temp35:temp35 + 0x20] = 0x636f6e7472616374206973206e6f7420696e697469616c697a65640000000000;\n            var temp36 = memory[0x40:0x60];\n            revert(memory[temp36:temp36 + (temp35 + 0x20) - temp36]);\n        }\n    }\n    \n    function func_06A6() returns (var r0) { return storage[0x00]; }\n    \n    function owner() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_0918(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 == var0) { return 0x00; }\n    \n        var var1 = arg0 * arg1;\n        var var2 = arg1;\n        var var3 = arg0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        var temp2 = temp1 + 0x20;\n        memory[temp1:temp1 + 0x20] = temp2 - temp1;\n        memory[temp2:temp2 + 0x20] = 0x21;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x21] = code[0x09c2:0x09e3];\n        var temp4 = memory[0x40:0x60];\n        revert(memory[temp4:temp4 + (temp3 + 0x40) - temp4]);\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 37.116342306137085,
	"usage": {
		"completion_tokens": 499,
		"prompt_tokens": 4737,
		"total_tokens": 5236
	}
}