{
	"address": "0x072b4b3008eb2177cce628123d24e75a8e34b9b0",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code based on the decompiled code. Please note that this is a rough approximation and may not be accurate due to the nature of EVM bytecode and potential loss of information during decompilation.\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    uint public MAX_OWNER_COUNT = 0x32;\n    mapping(address => uint) owners;\n    uint public dailyLimit;\n    uint public lastDay;\n    uint public transactionCount;\n    uint public required;\n    uint public spentToday;\n    \n    function isOwner(address _address) external view returns (uint) {\n        return owners[_address];\n    }\n    \n    function addOwner(address _address) external {\n        require(msg.sender == address(this));\n        require(owners[_address] == 0);\n        require(_address != address(0));\n        if (transactionCount + 1 > MAX_OWNER_COUNT) {\n            revert();\n        }\n        owners[_address] = 1;\n        transactionCount++;\n    }\n    \n    function removeOwner(address _address) external {\n        require(msg.sender == address(this));\n        require(owners[_address] == 1);\n        owners[_address] = 0;\n        transactionCount--;\n    }\n    \n    function replaceOwner(address _oldAddress, address _newAddress) external {\n        require(msg.sender == address(this));\n        require(owners[_oldAddress] == 1);\n        require(owners[_newAddress] == 0);\n        require(_newAddress != address(0));\n        owners[_oldAddress] = 0;\n        owners[_newAddress] = 1;\n    }\n    \n    function changeRequirement(uint _required) external {\n        require(msg.sender == address(this));\n        require(_required <= transactionCount);\n        required = _required;\n    }\n    \n    function changeDailyLimit(uint _dailyLimit) external {\n        require(msg.sender == address(this));\n        dailyLimit = _dailyLimit;\n    }\n    \n    function executeTransaction(uint _transactionId) external {\n        require(msg.sender == address(this));\n        require(owners[msg.sender] == 1);\n        require(transactionCount >= required);\n        // transaction execution logic\n    }\n    \n    function confirmTransaction(uint _transactionId) external {\n        require(msg.sender == address(this));\n        require(owners[msg.sender] == 1);\n        require(transactionCount >= required);\n        // transaction confirmation logic\n    }\n    \n    function revokeConfirmation(uint _transactionId) external {\n        require(msg.sender == address(this));\n        require(owners[msg.sender] == 1);\n        // transaction confirmation revocation logic\n    }\n    \n    function getConfirmationCount(uint _transactionId) external view returns (uint) {\n        // logic to return count of confirmations\n    }\n    \n    function getTransactionCount(bool _pending, bool _executed) external view returns (uint) {\n        // logic to return transaction count based on status\n    }\n    \n    function getOwners() external view returns (address[] memory) {\n        // logic to return list of owners\n    }\n    \n    function getConfirmations(uint _transactionId) external view returns (address[] memory) {\n        // logic to return list of addresses who confirmed the transaction\n    }\n    \n    function getTransactionIds(uint _from, uint _to, bool _pending, bool _executed) external view returns (uint[] memory) {\n        // logic to return list of transaction IDs\n    }\n}\n```",
				"role": "assistant"
			}
		}
	],
	"created": 1700471355,
	"id": "chatcmpl-8MuZH1P8do4yGmsS61ubgo8BEd606",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0153:\n        \n            if (msg.value <= 0x00) { stop(); }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = msg.value;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x01b2;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = isOwner(var2);\n            \n            label_0222:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2 = confirmations(var2, var3);\n                goto label_0222;\n            } else if (var0 == 0x4bc9fdc2) {\n                // Dispatch table entry for calcMaxWithdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var1 = calcMaxWithdraw();\n            \n            label_026B:\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                goto label_026B;\n            } else if (var0 == 0x67eeba0c) {\n                // Dispatch table entry for dailyLimit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = dailyLimit();\n                goto label_026B;\n            } else if (var0 == 0x6b0c932d) {\n                // Dispatch table entry for lastDay()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = lastDay();\n                goto label_026B;\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                goto label_0222;\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                goto label_026B;\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0321;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp8 = memory[0x40:0x60];\n                var var6 = temp8;\n                memory[var6:var6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[var6 + 0x20:var6 + 0x20 + 0x20] = var3;\n                memory[var6 + 0x60:var6 + 0x60 + 0x20] = !!var5;\n                memory[var6 + 0x40:var6 + 0x40 + 0x20] = 0x80;\n                var var7 = var6 + 0x40;\n                var temp9 = var6 + 0x80;\n                var temp10 = var4;\n                memory[temp9:temp9 + 0x20] = memory[temp10:temp10 + 0x20];\n                var var8 = temp9 + 0x20;\n                var var10 = memory[temp10:temp10 + 0x20];\n                var var9 = temp10 + 0x20;\n                var var11 = var10;\n                var var12 = var8;\n                var var13 = var9;\n                var var14 = 0x00;\n            \n                if (var14 >= var11) {\n                label_037B:\n                    var temp11 = var10;\n                    var8 = temp11 + var8;\n                    var9 = temp11 & 0x1f;\n                \n                    if (!var9) {\n                        var temp12 = memory[0x40:0x60];\n                        return memory[temp12:temp12 + var8 - temp12];\n                    } else {\n                        var temp13 = var9;\n                        var temp14 = var8 - temp13;\n                        memory[temp14:temp14 + 0x20] = ~(0x0100 ** (0x20 - temp13) - 0x01) & memory[temp14:temp14 + 0x20];\n                        var temp15 = memory[0x40:0x60];\n                        return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n                    }\n                } else {\n                label_036C:\n                    var temp16 = var14;\n                    memory[temp16 + var12:temp16 + var12 + 0x20] = memory[var13 + temp16:var13 + temp16 + 0x20];\n                    var14 = temp16 + 0x20;\n                \n                    if (var14 >= var11) { goto label_037B; }\n                    else { goto label_036C; }\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var1 = getOwners();\n            \n            label_03CC:\n                var temp17 = memory[0x40:0x60];\n                var2 = temp17;\n                memory[var2:var2 + 0x20] = 0x20;\n                var3 = var2;\n                var temp18 = var3 + 0x20;\n                var temp19 = var1;\n                memory[temp18:temp18 + 0x20] = memory[temp19:temp19 + 0x20];\n                var4 = temp18 + 0x20;\n                var5 = temp19 + 0x20;\n                var6 = memory[temp19:temp19 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_040B:\n                    var temp20 = memory[0x40:0x60];\n                    return memory[temp20:temp20 + (var6 + var4) - temp20];\n                } else {\n                label_03FC:\n                    var temp21 = var10;\n                    memory[temp21 + var8:temp21 + var8 + 0x20] = memory[var9 + temp21:var9 + temp21 + 0x20];\n                    var10 = temp21 + 0x20;\n                \n                    if (var10 >= var7) { goto label_040B; }\n                    else { goto label_03FC; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                goto label_03CC;\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                goto label_03CC;\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = transactionCount();\n                goto label_026B;\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp22 = msg.data[0x44:0x64];\n                var temp23 = msg.data[temp22 + 0x04:temp22 + 0x04 + 0x20];\n                var temp24 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp24 + (temp23 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp24:temp24 + 0x20] = temp23;\n                memory[temp24 + 0x20:temp24 + 0x20 + temp23] = msg.data[temp22 + 0x24:temp22 + 0x24 + temp23];\n                var4 = temp24;\n                var5 = 0x00;\n                var6 = 0x108d;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var10 = 0x00;\n                var11 = var7;\n            \n                if (!(var11 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                var10 = storage[0x05];\n                var temp25 = memory[0x40:0x60];\n                var12 = temp25;\n                memory[0x40:0x60] = var12 + 0x80;\n                memory[var12:var12 + 0x20] = var7 & 0x02 ** 0xa0 - 0x01;\n                memory[var12 + 0x20:var12 + 0x20 + 0x20] = var8;\n                memory[var12 + 0x40:var12 + 0x40 + 0x20] = var9;\n                memory[var12 + 0x60:var12 + 0x60 + 0x20] = 0x00;\n                memory[0x00:0x20] = var10;\n                memory[0x20:0x40] = 0x00;\n                var temp26 = keccak256(memory[0x00:0x40]);\n                var13 = temp26;\n                storage[var13] = (memory[var12:var12 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[var13] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                storage[var13 + 0x01] = memory[var12 + 0x20:var12 + 0x20 + 0x20];\n                var temp27 = memory[var12 + 0x40:var12 + 0x40 + 0x20];\n                var14 = 0x1514;\n                var var15 = var13 + 0x02;\n                var var16 = temp27 + 0x20;\n                var var17 = memory[temp27:temp27 + 0x20];\n                var temp28 = var15;\n                var temp29 = storage[temp28];\n                memory[0x00:0x20] = temp28;\n                var var18 = keccak256(memory[0x00:0x20]);\n                var var19 = var16;\n                var16 = var18 + ((!(temp29 & 0x01) * 0x0100 - 0x01 & temp29) / 0x02 + 0x1f) / 0x20;\n            \n                if (0x1f < var17) {\n                    var temp30 = var17;\n                    storage[var15] = temp30 + temp30 + 0x01;\n                \n                    if (!temp30) {\n                    label_165F:\n                        var temp31 = var16;\n                        var16 = 0x166b;\n                        var17 = temp31;\n                        var temp32 = var17;\n                        var17 = 0x088d;\n                        var temp33 = var18;\n                        var18 = temp32;\n                        var19 = temp33;\n                    \n                        if (var18 <= var19) {\n                            var17 = func_166B(var18, var19);\n                            var16 = var17;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                        label_167E:\n                            var temp34 = var19;\n                            storage[temp34] = 0x00;\n                            var19 = temp34 + 0x01;\n                        \n                            if (var18 > var19) { goto label_167E; }\n                        \n                            var17 = func_166B(var18, var19);\n                            // Error: Could not resolve method call return address!\n                        }\n                    } else {\n                        var temp35 = var17;\n                        var temp36 = var19;\n                        var17 = temp36;\n                        var19 = var17 + temp35;\n                    \n                        if (var19 <= var17) { goto label_165F; }\n                    \n                    label_164D:\n                        var temp37 = var17;\n                        var temp38 = var18;\n                        storage[temp38] = memory[temp37:temp37 + 0x20];\n                        var17 = temp37 + 0x20;\n                        var18 = temp38 + 0x01;\n                        var19 = var19;\n                    \n                        if (var19 <= var17) { goto label_165F; }\n                        else { goto label_164D; }\n                    }\n                } else {\n                    var temp39 = var17;\n                    storage[var15] = temp39 + temp39 | (memory[var19:var19 + 0x20] & ~0xff);\n                    goto label_165F;\n                }\n            } else if (var0 == 0xcea08621) {\n                // Dispatch table entry for changeDailyLimit(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                changeDailyLimit(var2);\n                stop();\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = MAX_OWNER_COUNT();\n                goto label_026B;\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = required();\n                goto label_026B;\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var temp40 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp40 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp40;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else if (var0 == 0xf059cf2b) {\n                // Dispatch table entry for spentToday()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = spentToday();\n                goto label_026B;\n            } else { goto label_0153; }\n        }\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xff;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] + ~0x00) {\n        label_06DC:\n            var var2 = storage[0x03] + ~0x00;\n            var var3 = 0x06ef;\n            var var4 = 0x03;\n            var var5 = var2;\n            func_15B6(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_0708:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n                var3 = storage[0x03];\n                var2 = 0x0708;\n                changeRequirement(var3);\n                goto label_0708;\n            }\n        } else {\n        label_062B:\n            var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var4] & 0x02 ** 0xa0 - 0x01 != var2) {\n                var1 = var1;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] + ~0x00) { goto label_06DC; }\n                else { goto label_062B; }\n            } else {\n                var2 = 0x03;\n                var temp2 = storage[var2];\n                var3 = temp2 + ~0x00;\n            \n                if (var3 >= temp2) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var temp3 = storage[keccak256(memory[0x00:0x20]) + var3];\n                var3 = 0x03;\n                var2 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp4 = keccak256(memory[0x00:0x20]) + var4;\n                storage[temp4] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_06DC;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg0;\n        var var2 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var3 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function calcMaxWithdraw() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (block.timestamp > storage[0x07] + 0x015180) {\n            var0 = storage[0x06];\n            goto label_088D;\n        } else if (storage[0x06] >= storage[0x08]) { return storage[0x06] - storage[0x08]; }\n        else {\n            var0 = 0x00;\n        \n        label_088D:\n            return var0;\n        }\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x05]) {\n        label_08F5:\n            return var0;\n        } else {\n        label_089F:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_08E1; }\n                else { goto label_08C3; }\n            } else if (var2) {\n            label_08E1:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0894:\n                \n                    if (var1 >= storage[0x05]) { goto label_08F5; }\n                    else { goto label_089F; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0894;\n                }\n            } else {\n            label_08C3:\n                var2 = arg1;\n            \n                if (!var2) { goto label_08E1; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_08E1;\n            }\n        }\n    }\n    \n    function dailyLimit() returns (var r0) { return storage[0x06]; }\n    \n    function lastDay() returns (var r0) { return storage[0x07]; }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var0 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0989; }\n            else { goto label_0986; }\n        } else if (var4) {\n        label_0989:\n        \n            if (var4) {\n            label_0992:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_099C:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var var5 = storage[0x03];\n                var4 = 0x03;\n                var var6 = var5 + 0x01;\n                var var7 = 0x09d4;\n                var var8 = var4;\n                var var9 = var6;\n                func_15B6(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = keccak256(memory[0x00:0x20]) + var5;\n                var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n                storage[temp1] = temp2 | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + memory[0x40:0x60] - temp3], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n            label_098F:\n            \n                if (var2) { goto label_099C; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0986:\n            var4 = !var3;\n        \n            if (var4) { goto label_0992; }\n            else { goto label_098F; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x03]) {\n        label_0AB9:\n            return var0;\n        } else {\n        label_0A4C:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var5 = 0x03;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff) {\n                var temp1 = var1 + 0x01;\n                var1 = temp1;\n            \n                if (var1 != storage[0x04]) { goto label_0AB1; }\n                else { goto label_0AA9; }\n            } else if (var1 != storage[0x04]) {\n            label_0AB1:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_0AB9; }\n                else { goto label_0A4C; }\n            } else {\n            label_0AA9:\n                var0 = 0x01;\n                goto label_0AB9;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x03]) {\n        label_0B29:\n            return var0;\n        } else {\n        label_0ACF:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var4 = 0x03;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_0AC4:\n            \n                if (var1 >= storage[0x03]) { goto label_0B29; }\n                else { goto label_0ACF; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_0AC4;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r2 = temp0;\n        r1 = storage[r2 + 0x01];\n        var temp1 = r2 + 0x02;\n        var temp2 = storage[temp1];\n        var temp3 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r3 = temp4;\n        var var3 = temp1;\n        var var4 = temp3;\n        memory[r3:r3 + 0x20] = var4;\n        var var5 = r3 + 0x20;\n        var var6 = var3;\n        var temp5 = storage[var6];\n        var var7 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n    \n        if (!var7) {\n        label_0BFA:\n            var temp6 = storage[r2 + 0x03];\n            r2 = r3;\n            r3 = temp6 & 0xff;\n            return arg0, r1, r2, r3;\n        } else if (0x1f < var7) {\n            var temp7 = var5;\n            var temp8 = temp7 + var7;\n            var5 = temp8;\n            memory[0x00:0x20] = var6;\n            var temp9 = keccak256(memory[0x00:0x20]);\n            memory[temp7:temp7 + 0x20] = storage[temp9];\n            var6 = temp9 + 0x01;\n            var7 = temp7 + 0x20;\n        \n            if (var5 <= var7) { goto label_0BF1; }\n        \n        label_0BDD:\n            var temp10 = var6;\n            var temp11 = var7;\n            memory[temp11:temp11 + 0x20] = storage[temp10];\n            var6 = temp10 + 0x01;\n            var7 = temp11 + 0x20;\n        \n            if (var5 > var7) { goto label_0BDD; }\n        \n        label_0BF1:\n            var temp12 = var5;\n            var temp13 = temp12 + (var7 - temp12 & 0x1f);\n            var7 = temp12;\n            var5 = temp13;\n            goto label_0BFA;\n        } else {\n            var temp14 = var5;\n            memory[temp14:temp14 + 0x20] = storage[var6] / 0x0100 * 0x0100;\n            var5 = temp14 + 0x20;\n            var7 = var7;\n            goto label_0BFA;\n        }\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x0c15;\n        var0 = func_15DF();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_0C6B:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { goto label_0C6B; }\n        \n        label_0C4D:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_0C4D; }\n            else { goto label_0C6B; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x0c7d;\n        var0 = func_15DF();\n        var var1 = 0x0c85;\n        var1 = func_15DF();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var4;\n            var temp1 = var5;\n            memory[temp1:temp1 + 0x20] = temp0;\n            memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n            var1 = temp1;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_0D2D:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_0D92:\n                        return var0;\n                    } else {\n                    label_0D5D:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_0D92; }\n                        else { goto label_0D5D; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_0D92; }\n                    else { goto label_0D5D; }\n                }\n            } else {\n            label_0CBF:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_0D01; }\n                    else { goto label_0CE3; }\n                } else if (var4) {\n                label_0D01:\n                \n                    if (!var4) {\n                    label_0D25:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_0D2D; }\n                        else { goto label_0CBF; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var2 = var2 + 0x01;\n                        var3 = var3;\n                        goto label_0D25;\n                    }\n                } else {\n                label_0CE3:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_0D01; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_0D01;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_0D2D; }\n            else { goto label_0CBF; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x0da5;\n        var0 = func_15DF();\n        var var1 = 0x0dad;\n        var1 = func_15DF();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x03];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_0E8A:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_0EF9:\n                        return var0;\n                    } else {\n                    label_0EB9:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_0EF9; }\n                        else { goto label_0EB9; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_0EF9; }\n                    else { goto label_0EB9; }\n                }\n            } else {\n            label_0DE9:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var6 = 0x03;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x40])] & 0xff)) {\n                label_0E82:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_0E8A; }\n                    else { goto label_0DE9; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[keccak256(memory[0x00:0x20]) + var5] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                    var3 = var3;\n                    var2 = var2 + 0x01;\n                    goto label_0E82;\n                }\n            }\n        } else {\n            var temp7 = MSIZE();\n            var temp8 = var4;\n            memory[temp7:temp7 + 0x20] = temp8;\n            memory[0x40:0x60] = temp7 + temp8 * 0x20 + 0x20;\n            var1 = temp7;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_0E8A; }\n            else { goto label_0DE9; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_0F42; }\n            else { goto label_0F3F; }\n        } else if (var2) {\n        label_0F42:\n        \n            if (var2) {\n            label_0F4B:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_0F55:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_0F48:\n            \n                if (var0) { goto label_0F55; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0F3F:\n            var2 = !var1;\n        \n            if (var2) { goto label_0F4B; }\n            else { goto label_0F48; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var2 = arg0;\n        var var3 = msg.sender;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x1079;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function changeDailyLimit(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        storage[0x06] = temp0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xc71bdc6afaf9b1aa90a7078191d4fc1adf3bf680fca3183697df6b0dc226bca2]);\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var2 = arg1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1211:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = ~0xff;\n            storage[temp2] = temp3 & storage[temp2];\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & temp0;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = (temp3 & storage[temp5]) | 0x01;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n        label_1188:\n            var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var5] & 0x02 ** 0xa0 - 0x01 != var3) {\n                var2 = var2;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1211; }\n                else { goto label_1188; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp8 = keccak256(memory[0x00:0x20]) + var5;\n                storage[temp8] = (var3 & 0x02 ** 0xa0 - 0x01) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_1211;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = var0;\n        var var1 = var0;\n        var var2 = arg0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n        var var3 = 0x12ef;\n        var var4 = arg0;\n        var3 = isConfirmed(var4);\n        var1 = var3;\n        var3 = var1;\n    \n        if (var3) {\n        label_1322:\n        \n            if (!var3) {\n            label_1465:\n                return;\n            } else {\n                var temp0 = var0 + 0x03;\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n            \n                if (var1) {\n                    var temp1 = var0;\n                    var3 = storage[temp1] & 0x02 ** 0xa0 - 0x01;\n                    var4 = storage[temp1 + 0x01];\n                    var var5 = temp1 + 0x02;\n                    var var6 = memory[0x40:0x60];\n                    var var7 = var6;\n                    var var8 = var5;\n                    var temp2 = storage[var8];\n                    var var9 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n                \n                    if (!var9) {\n                    label_13C8:\n                        var temp3 = memory[0x40:0x60];\n                        var temp4;\n                        temp4, memory[temp3:temp3 + 0x00] = address(var3).call.gas(msg.gas).value(var4)(memory[temp3:temp3 + var7 - temp3]);\n                    \n                        if (!temp4) {\n                            var temp5 = memory[0x40:0x60];\n                            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-4]]);\n                            var temp6 = var0 + 0x03;\n                            storage[temp6] = storage[temp6] & ~0xff;\n                        \n                            if (var1) { goto label_1465; }\n                        \n                            storage[0x08] = storage[0x08] - storage[var0 + 0x01];\n                            goto label_1465;\n                        } else {\n                            var temp7 = memory[0x40:0x60];\n                            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-4]]);\n                            goto label_1465;\n                        }\n                    } else {\n                    label_1382:\n                    \n                        if (0x1f < var9) {\n                            var temp8 = var7;\n                            var temp9 = temp8 + var9;\n                            var7 = temp9;\n                            memory[0x00:0x20] = var8;\n                            var temp10 = keccak256(memory[0x00:0x20]);\n                            memory[temp8:temp8 + 0x20] = storage[temp10];\n                            var8 = temp10 + 0x01;\n                            var9 = temp8 + 0x20;\n                        \n                            if (var7 <= var9) { goto label_13BF; }\n                        \n                        label_13AB:\n                            var temp11 = var8;\n                            var temp12 = var9;\n                            memory[temp12:temp12 + 0x20] = storage[temp11];\n                            var8 = temp11 + 0x01;\n                            var9 = temp12 + 0x20;\n                        \n                            if (var7 > var9) { goto label_13AB; }\n                        \n                        label_13BF:\n                            var temp13 = var7;\n                            var temp14 = temp13 + (var9 - temp13 & 0x1f);\n                            var9 = temp13;\n                            var7 = temp14;\n                            goto label_13C8;\n                        } else {\n                            var temp15 = var7;\n                            memory[temp15:temp15 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n                            var7 = temp15 + 0x20;\n                            var9 = var9;\n                            goto label_13C8;\n                        }\n                    }\n                } else {\n                    var temp16 = var0;\n                    storage[0x08] = storage[temp16 + 0x01] + storage[0x08];\n                    var4 = storage[temp16 + 0x01];\n                    var3 = storage[temp16] & 0x02 ** 0xa0 - 0x01;\n                    var5 = temp16 + 0x02;\n                    var6 = memory[0x40:0x60];\n                    var7 = var6;\n                    var8 = var5;\n                    var temp17 = storage[var8];\n                    var9 = (!(temp17 & 0x01) * 0x0100 - 0x01 & temp17) / 0x02;\n                \n                    if (!var9) { goto label_13C8; }\n                    else { goto label_1382; }\n                }\n            }\n        } else {\n            var temp18 = storage[var0 + 0x02];\n            var3 = !((!(temp18 & 0x01) * 0x0100 + ~0x00 & temp18) / 0x02);\n        \n            if (!var3) { goto label_1322; }\n        \n            var3 = 0x1322;\n            var4 = storage[var0 + 0x01];\n            var3 = func_156E(var4);\n            goto label_1322;\n        }\n    }\n    \n    function spentToday() returns (var r0) { return storage[0x08]; }\n    \n    function func_156E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (block.timestamp <= storage[0x07] + 0x015180) {\n            var var1 = storage[0x08] + arg0 > storage[0x06];\n        \n            if (var1) {\n            label_15A0:\n            \n                if (!var1) {\n                label_15AD:\n                    return 0x01;\n                } else {\n                label_15A6:\n                    return 0x00;\n                }\n            } else {\n            label_1598:\n                var temp0 = storage[0x08];\n            \n                if (temp0 + arg0 >= temp0) { goto label_15AD; }\n                else { goto label_15A6; }\n            }\n        } else {\n            storage[0x07] = block.timestamp;\n            storage[0x08] = 0x00;\n            var1 = storage[0x08] + arg0 > storage[0x06];\n        \n            if (var1) { goto label_15A0; }\n            else { goto label_1598; }\n        }\n    }\n    \n    function func_15B6(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        var temp3 = keccak256(memory[0x00:0x20]);\n        var temp4 = var0;\n        var0 = 0x15da;\n        var var1 = temp3 + temp4;\n        var var2 = arg1 + temp3;\n        var temp5 = var1;\n        var1 = 0x088d;\n        var temp6 = var2;\n        var2 = temp5;\n        var var3 = temp6;\n    \n        if (var2 <= var3) {\n            var1 = func_166B(var2, var3);\n            var0 = var1;\n            // Error: Could not resolve jump destination!\n        } else {\n        label_167E:\n            var temp7 = var3;\n            storage[temp7] = 0x00;\n            var3 = temp7 + 0x01;\n        \n            if (var2 > var3) { goto label_167E; }\n        \n            var1 = func_166B(var2, var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_15DF() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_166B(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0153:\n        \n            if (msg.value <= 0x00) { stop(); }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = msg.value;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x01b2;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = isOwner(var2);\n            \n            label_0222:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2 = confirmations(var2, var3);\n                goto label_0222;\n            } else if (var0 == 0x4bc9fdc2) {\n                // Dispatch table entry for calcMaxWithdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var1 = calcMaxWithdraw();\n            \n            label_026B:\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                goto label_026B;\n            } else if (var0 == 0x67eeba0c) {\n                // Dispatch table entry for dailyLimit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = dailyLimit();\n                goto label_026B;\n            } else if (var0 == 0x6b0c932d) {\n                // Dispatch table entry for lastDay()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = lastDay();\n                goto label_026B;\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                goto label_0222;\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                goto label_026B;\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0321;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp8 = memory[0x40:0x60];\n                var var6 = temp8;\n                memory[var6:var6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[var6 + 0x20:var6 + 0x20 + 0x20] = var3;\n                memory[var6 + 0x60:var6 + 0x60 + 0x20] = !!var5;\n                memory[var6 + 0x40:var6 + 0x40 + 0x20] = 0x80;\n                var var7 = var6 + 0x40;\n                var temp9 = var6 + 0x80;\n                var temp10 = var4;\n                memory[temp9:temp9 + 0x20] = memory[temp10:temp10 + 0x20];\n                var var8 = temp9 + 0x20;\n                var var10 = memory[temp10:temp10 + 0x20];\n                var var9 = temp10 + 0x20;\n                var var11 = var10;\n                var var12 = var8;\n                var var13 = var9;\n                var var14 = 0x00;\n            \n                if (var14 >= var11) {\n                label_037B:\n                    var temp11 = var10;\n                    var8 = temp11 + var8;\n                    var9 = temp11 & 0x1f;\n                \n                    if (!var9) {\n                        var temp12 = memory[0x40:0x60];\n                        return memory[temp12:temp12 + var8 - temp12];\n                    } else {\n                        var temp13 = var9;\n                        var temp14 = var8 - temp13;\n                        memory[temp14:temp14 + 0x20] = ~(0x0100 ** (0x20 - temp13) - 0x01) & memory[temp14:temp14 + 0x20];\n                        var temp15 = memory[0x40:0x60];\n                        return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n                    }\n                } else {\n                label_036C:\n                    var temp16 = var14;\n                    memory[temp16 + var12:temp16 + var12 + 0x20] = memory[var13 + temp16:var13 + temp16 + 0x20];\n                    var14 = temp16 + 0x20;\n                \n                    if (var14 >= var11) { goto label_037B; }\n                    else { goto label_036C; }\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var1 = getOwners();\n            \n            label_03CC:\n                var temp17 = memory[0x40:0x60];\n                var2 = temp17;\n                memory[var2:var2 + 0x20] = 0x20;\n                var3 = var2;\n                var temp18 = var3 + 0x20;\n                var temp19 = var1;\n                memory[temp18:temp18 + 0x20] = memory[temp19:temp19 + 0x20];\n                var4 = temp18 + 0x20;\n                var5 = temp19 + 0x20;\n                var6 = memory[temp19:temp19 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_040B:\n                    var temp20 = memory[0x40:0x60];\n                    return memory[temp20:temp20 + (var6 + var4) - temp20];\n                } else {\n                label_03FC:\n                    var temp21 = var10;\n                    memory[temp21 + var8:temp21 + var8 + 0x20] = memory[var9 + temp21:var9 + temp21 + 0x20];\n                    var10 = temp21 + 0x20;\n                \n                    if (var10 >= var7) { goto label_040B; }\n                    else { goto label_03FC; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                goto label_03CC;\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                goto label_03CC;\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = transactionCount();\n                goto label_026B;\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp22 = msg.data[0x44:0x64];\n                var temp23 = msg.data[temp22 + 0x04:temp22 + 0x04 + 0x20];\n                var temp24 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp24 + (temp23 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp24:temp24 + 0x20] = temp23;\n                memory[temp24 + 0x20:temp24 + 0x20 + temp23] = msg.data[temp22 + 0x24:temp22 + 0x24 + temp23];\n                var4 = temp24;\n                var5 = 0x00;\n                var6 = 0x108d;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var10 = 0x00;\n                var11 = var7;\n            \n                if (!(var11 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                var10 = storage[0x05];\n                var temp25 = memory[0x40:0x60];\n                var12 = temp25;\n                memory[0x40:0x60] = var12 + 0x80;\n                memory[var12:var12 + 0x20] = var7 & 0x02 ** 0xa0 - 0x01;\n                memory[var12 + 0x20:var12 + 0x20 + 0x20] = var8;\n                memory[var12 + 0x40:var12 + 0x40 + 0x20] = var9;\n                memory[var12 + 0x60:var12 + 0x60 + 0x20] = 0x00;\n                memory[0x00:0x20] = var10;\n                memory[0x20:0x40] = 0x00;\n                var temp26 = keccak256(memory[0x00:0x40]);\n                var13 = temp26;\n                storage[var13] = (memory[var12:var12 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[var13] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                storage[var13 + 0x01] = memory[var12 + 0x20:var12 + 0x20 + 0x20];\n                var temp27 = memory[var12 + 0x40:var12 + 0x40 + 0x20];\n                var14 = 0x1514;\n                var var15 = var13 + 0x02;\n                var var16 = temp27 + 0x20;\n                var var17 = memory[temp27:temp27 + 0x20];\n                var temp28 = var15;\n                var temp29 = storage[temp28];\n                memory[0x00:0x20] = temp28;\n                var var18 = keccak256(memory[0x00:0x20]);\n                var var19 = var16;\n                var16 = var18 + ((!(temp29 & 0x01) * 0x0100 - 0x01 & temp29) / 0x02 + 0x1f) / 0x20;\n            \n                if (0x1f < var17) {\n                    var temp30 = var17;\n                    storage[var15] = temp30 + temp30 + 0x01;\n                \n                    if (!temp30) {\n                    label_165F:\n                        var temp31 = var16;\n                        var16 = 0x166b;\n                        var17 = temp31;\n                        var temp32 = var17;\n                        var17 = 0x088d;\n                        var temp33 = var18;\n                        var18 = temp32;\n                        var19 = temp33;\n                    \n                        if (var18 <= var19) {\n                            var17 = func_166B(var18, var19);\n                            var16 = var17;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                        label_167E:\n                            var temp34 = var19;\n                            storage[temp34] = 0x00;\n                            var19 = temp34 + 0x01;\n                        \n                            if (var18 > var19) { goto label_167E; }\n                        \n                            var17 = func_166B(var18, var19);\n                            // Error: Could not resolve method call return address!\n                        }\n                    } else {\n                        var temp35 = var17;\n                        var temp36 = var19;\n                        var17 = temp36;\n                        var19 = var17 + temp35;\n                    \n                        if (var19 <= var17) { goto label_165F; }\n                    \n                    label_164D:\n                        var temp37 = var17;\n                        var temp38 = var18;\n                        storage[temp38] = memory[temp37:temp37 + 0x20];\n                        var17 = temp37 + 0x20;\n                        var18 = temp38 + 0x01;\n                        var19 = var19;\n                    \n                        if (var19 <= var17) { goto label_165F; }\n                        else { goto label_164D; }\n                    }\n                } else {\n                    var temp39 = var17;\n                    storage[var15] = temp39 + temp39 | (memory[var19:var19 + 0x20] & ~0xff);\n                    goto label_165F;\n                }\n            } else if (var0 == 0xcea08621) {\n                // Dispatch table entry for changeDailyLimit(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                changeDailyLimit(var2);\n                stop();\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = MAX_OWNER_COUNT();\n                goto label_026B;\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = required();\n                goto label_026B;\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var temp40 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp40 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp40;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else if (var0 == 0xf059cf2b) {\n                // Dispatch table entry for spentToday()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = spentToday();\n                goto label_026B;\n            } else { goto label_0153; }\n        }\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xff;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] + ~0x00) {\n        label_06DC:\n            var var2 = storage[0x03] + ~0x00;\n            var var3 = 0x06ef;\n            var var4 = 0x03;\n            var var5 = var2;\n            func_15B6(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_0708:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n                var3 = storage[0x03];\n                var2 = 0x0708;\n                changeRequirement(var3);\n                goto label_0708;\n            }\n        } else {\n        label_062B:\n            var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var4] & 0x02 ** 0xa0 - 0x01 != var2) {\n                var1 = var1;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] + ~0x00) { goto label_06DC; }\n                else { goto label_062B; }\n            } else {\n                var2 = 0x03;\n                var temp2 = storage[var2];\n                var3 = temp2 + ~0x00;\n            \n                if (var3 >= temp2) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var temp3 = storage[keccak256(memory[0x00:0x20]) + var3];\n                var3 = 0x03;\n                var2 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp4 = keccak256(memory[0x00:0x20]) + var4;\n                storage[temp4] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_06DC;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg0;\n        var var2 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var3 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function calcMaxWithdraw() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (block.timestamp > storage[0x07] + 0x015180) {\n            var0 = storage[0x06];\n            goto label_088D;\n        } else if (storage[0x06] >= storage[0x08]) { return storage[0x06] - storage[0x08]; }\n        else {\n            var0 = 0x00;\n        \n        label_088D:\n            return var0;\n        }\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x05]) {\n        label_08F5:\n            return var0;\n        } else {\n        label_089F:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_08E1; }\n                else { goto label_08C3; }\n            } else if (var2) {\n            label_08E1:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0894:\n                \n                    if (var1 >= storage[0x05]) { goto label_08F5; }\n                    else { goto label_089F; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0894;\n                }\n            } else {\n            label_08C3:\n                var2 = arg1;\n            \n                if (!var2) { goto label_08E1; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_08E1;\n            }\n        }\n    }\n    \n    function dailyLimit() returns (var r0) { return storage[0x06]; }\n    \n    function lastDay() returns (var r0) { return storage[0x07]; }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var0 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0989; }\n            else { goto label_0986; }\n        } else if (var4) {\n        label_0989:\n        \n            if (var4) {\n            label_0992:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_099C:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var var5 = storage[0x03];\n                var4 = 0x03;\n                var var6 = var5 + 0x01;\n                var var7 = 0x09d4;\n                var var8 = var4;\n                var var9 = var6;\n                func_15B6(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = keccak256(memory[0x00:0x20]) + var5;\n                var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n                storage[temp1] = temp2 | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + memory[0x40:0x60] - temp3], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n            label_098F:\n            \n                if (var2) { goto label_099C; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0986:\n            var4 = !var3;\n        \n            if (var4) { goto label_0992; }\n            else { goto label_098F; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x03]) {\n        label_0AB9:\n            return var0;\n        } else {\n        label_0A4C:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var5 = 0x03;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff) {\n                var temp1 = var1 + 0x01;\n                var1 = temp1;\n            \n                if (var1 != storage[0x04]) { goto label_0AB1; }\n                else { goto label_0AA9; }\n            } else if (var1 != storage[0x04]) {\n            label_0AB1:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_0AB9; }\n                else { goto label_0A4C; }\n            } else {\n            label_0AA9:\n                var0 = 0x01;\n                goto label_0AB9;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x03]) {\n        label_0B29:\n            return var0;\n        } else {\n        label_0ACF:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var4 = 0x03;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_0AC4:\n            \n                if (var1 >= storage[0x03]) { goto label_0B29; }\n                else { goto label_0ACF; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_0AC4;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r2 = temp0;\n        r1 = storage[r2 + 0x01];\n        var temp1 = r2 + 0x02;\n        var temp2 = storage[temp1];\n        var temp3 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r3 = temp4;\n        var var3 = temp1;\n        var var4 = temp3;\n        memory[r3:r3 + 0x20] = var4;\n        var var5 = r3 + 0x20;\n        var var6 = var3;\n        var temp5 = storage[var6];\n        var var7 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n    \n        if (!var7) {\n        label_0BFA:\n            var temp6 = storage[r2 + 0x03];\n            r2 = r3;\n            r3 = temp6 & 0xff;\n            return arg0, r1, r2, r3;\n        } else if (0x1f < var7) {\n            var temp7 = var5;\n            var temp8 = temp7 + var7;\n            var5 = temp8;\n            memory[0x00:0x20] = var6;\n            var temp9 = keccak256(memory[0x00:0x20]);\n            memory[temp7:temp7 + 0x20] = storage[temp9];\n            var6 = temp9 + 0x01;\n            var7 = temp7 + 0x20;\n        \n            if (var5 <= var7) { goto label_0BF1; }\n        \n        label_0BDD:\n            var temp10 = var6;\n            var temp11 = var7;\n            memory[temp11:temp11 + 0x20] = storage[temp10];\n            var6 = temp10 + 0x01;\n            var7 = temp11 + 0x20;\n        \n            if (var5 > var7) { goto label_0BDD; }\n        \n        label_0BF1:\n            var temp12 = var5;\n            var temp13 = temp12 + (var7 - temp12 & 0x1f);\n            var7 = temp12;\n            var5 = temp13;\n            goto label_0BFA;\n        } else {\n            var temp14 = var5;\n            memory[temp14:temp14 + 0x20] = storage[var6] / 0x0100 * 0x0100;\n            var5 = temp14 + 0x20;\n            var7 = var7;\n            goto label_0BFA;\n        }\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x0c15;\n        var0 = func_15DF();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_0C6B:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { goto label_0C6B; }\n        \n        label_0C4D:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_0C4D; }\n            else { goto label_0C6B; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x0c7d;\n        var0 = func_15DF();\n        var var1 = 0x0c85;\n        var1 = func_15DF();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var4;\n            var temp1 = var5;\n            memory[temp1:temp1 + 0x20] = temp0;\n            memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n            var1 = temp1;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_0D2D:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_0D92:\n                        return var0;\n                    } else {\n                    label_0D5D:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_0D92; }\n                        else { goto label_0D5D; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_0D92; }\n                    else { goto label_0D5D; }\n                }\n            } else {\n            label_0CBF:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_0D01; }\n                    else { goto label_0CE3; }\n                } else if (var4) {\n                label_0D01:\n                \n                    if (!var4) {\n                    label_0D25:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_0D2D; }\n                        else { goto label_0CBF; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var2 = var2 + 0x01;\n                        var3 = var3;\n                        goto label_0D25;\n                    }\n                } else {\n                label_0CE3:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_0D01; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_0D01;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_0D2D; }\n            else { goto label_0CBF; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x0da5;\n        var0 = func_15DF();\n        var var1 = 0x0dad;\n        var1 = func_15DF();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x03];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_0E8A:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_0EF9:\n                        return var0;\n                    } else {\n                    label_0EB9:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_0EF9; }\n                        else { goto label_0EB9; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_0EF9; }\n                    else { goto label_0EB9; }\n                }\n            } else {\n            label_0DE9:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var6 = 0x03;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x40])] & 0xff)) {\n                label_0E82:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_0E8A; }\n                    else { goto label_0DE9; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[keccak256(memory[0x00:0x20]) + var5] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                    var3 = var3;\n                    var2 = var2 + 0x01;\n                    goto label_0E82;\n                }\n            }\n        } else {\n            var temp7 = MSIZE();\n            var temp8 = var4;\n            memory[temp7:temp7 + 0x20] = temp8;\n            memory[0x40:0x60] = temp7 + temp8 * 0x20 + 0x20;\n            var1 = temp7;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_0E8A; }\n            else { goto label_0DE9; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_0F42; }\n            else { goto label_0F3F; }\n        } else if (var2) {\n        label_0F42:\n        \n            if (var2) {\n            label_0F4B:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_0F55:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_0F48:\n            \n                if (var0) { goto label_0F55; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0F3F:\n            var2 = !var1;\n        \n            if (var2) { goto label_0F4B; }\n            else { goto label_0F48; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var2 = arg0;\n        var var3 = msg.sender;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x1079;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function changeDailyLimit(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        storage[0x06] = temp0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xc71bdc6afaf9b1aa90a7078191d4fc1adf3bf680fca3183697df6b0dc226bca2]);\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var2 = arg1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1211:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = ~0xff;\n            storage[temp2] = temp3 & storage[temp2];\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & temp0;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = (temp3 & storage[temp5]) | 0x01;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n        label_1188:\n            var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var5] & 0x02 ** 0xa0 - 0x01 != var3) {\n                var2 = var2;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1211; }\n                else { goto label_1188; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp8 = keccak256(memory[0x00:0x20]) + var5;\n                storage[temp8] = (var3 & 0x02 ** 0xa0 - 0x01) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_1211;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = var0;\n        var var1 = var0;\n        var var2 = arg0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n        var var3 = 0x12ef;\n        var var4 = arg0;\n        var3 = isConfirmed(var4);\n        var1 = var3;\n        var3 = var1;\n    \n        if (var3) {\n        label_1322:\n        \n            if (!var3) {\n            label_1465:\n                return;\n            } else {\n                var temp0 = var0 + 0x03;\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n            \n                if (var1) {\n                    var temp1 = var0;\n                    var3 = storage[temp1] & 0x02 ** 0xa0 - 0x01;\n                    var4 = storage[temp1 + 0x01];\n                    var var5 = temp1 + 0x02;\n                    var var6 = memory[0x40:0x60];\n                    var var7 = var6;\n                    var var8 = var5;\n                    var temp2 = storage[var8];\n                    var var9 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n                \n                    if (!var9) {\n                    label_13C8:\n                        var temp3 = memory[0x40:0x60];\n                        var temp4;\n                        temp4, memory[temp3:temp3 + 0x00] = address(var3).call.gas(msg.gas).value(var4)(memory[temp3:temp3 + var7 - temp3]);\n                    \n                        if (!temp4) {\n                            var temp5 = memory[0x40:0x60];\n                            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-4]]);\n                            var temp6 = var0 + 0x03;\n                            storage[temp6] = storage[temp6] & ~0xff;\n                        \n                            if (var1) { goto label_1465; }\n                        \n                            storage[0x08] = storage[0x08] - storage[var0 + 0x01];\n                            goto label_1465;\n                        } else {\n                            var temp7 = memory[0x40:0x60];\n                            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-4]]);\n                            goto label_1465;\n                        }\n                    } else {\n                    label_1382:\n                    \n                        if (0x1f < var9) {\n                            var temp8 = var7;\n                            var temp9 = temp8 + var9;\n                            var7 = temp9;\n                            memory[0x00:0x20] = var8;\n                            var temp10 = keccak256(memory[0x00:0x20]);\n                            memory[temp8:temp8 + 0x20] = storage[temp10];\n                            var8 = temp10 + 0x01;\n                            var9 = temp8 + 0x20;\n                        \n                            if (var7 <= var9) { goto label_13BF; }\n                        \n                        label_13AB:\n                            var temp11 = var8;\n                            var temp12 = var9;\n                            memory[temp12:temp12 + 0x20] = storage[temp11];\n                            var8 = temp11 + 0x01;\n                            var9 = temp12 + 0x20;\n                        \n                            if (var7 > var9) { goto label_13AB; }\n                        \n                        label_13BF:\n                            var temp13 = var7;\n                            var temp14 = temp13 + (var9 - temp13 & 0x1f);\n                            var9 = temp13;\n                            var7 = temp14;\n                            goto label_13C8;\n                        } else {\n                            var temp15 = var7;\n                            memory[temp15:temp15 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n                            var7 = temp15 + 0x20;\n                            var9 = var9;\n                            goto label_13C8;\n                        }\n                    }\n                } else {\n                    var temp16 = var0;\n                    storage[0x08] = storage[temp16 + 0x01] + storage[0x08];\n                    var4 = storage[temp16 + 0x01];\n                    var3 = storage[temp16] & 0x02 ** 0xa0 - 0x01;\n                    var5 = temp16 + 0x02;\n                    var6 = memory[0x40:0x60];\n                    var7 = var6;\n                    var8 = var5;\n                    var temp17 = storage[var8];\n                    var9 = (!(temp17 & 0x01) * 0x0100 - 0x01 & temp17) / 0x02;\n                \n                    if (!var9) { goto label_13C8; }\n                    else { goto label_1382; }\n                }\n            }\n        } else {\n            var temp18 = storage[var0 + 0x02];\n            var3 = !((!(temp18 & 0x01) * 0x0100 + ~0x00 & temp18) / 0x02);\n        \n            if (!var3) { goto label_1322; }\n        \n            var3 = 0x1322;\n            var4 = storage[var0 + 0x01];\n            var3 = func_156E(var4);\n            goto label_1322;\n        }\n    }\n    \n    function spentToday() returns (var r0) { return storage[0x08]; }\n    \n    function func_156E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (block.timestamp <= storage[0x07] + 0x015180) {\n            var var1 = storage[0x08] + arg0 > storage[0x06];\n        \n            if (var1) {\n            label_15A0:\n            \n                if (!var1) {\n                label_15AD:\n                    return 0x01;\n                } else {\n                label_15A6:\n                    return 0x00;\n                }\n            } else {\n            label_1598:\n                var temp0 = storage[0x08];\n            \n                if (temp0 + arg0 >= temp0) { goto label_15AD; }\n                else { goto label_15A6; }\n            }\n        } else {\n            storage[0x07] = block.timestamp;\n            storage[0x08] = 0x00;\n            var1 = storage[0x08] + arg0 > storage[0x06];\n        \n            if (var1) { goto label_15A0; }\n            else { goto label_1598; }\n        }\n    }\n    \n    function func_15B6(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        var temp3 = keccak256(memory[0x00:0x20]);\n        var temp4 = var0;\n        var0 = 0x15da;\n        var var1 = temp3 + temp4;\n        var var2 = arg1 + temp3;\n        var temp5 = var1;\n        var1 = 0x088d;\n        var temp6 = var2;\n        var2 = temp5;\n        var var3 = temp6;\n    \n        if (var2 <= var3) {\n            var1 = func_166B(var2, var3);\n            var0 = var1;\n            // Error: Could not resolve jump destination!\n        } else {\n        label_167E:\n            var temp7 = var3;\n            storage[temp7] = 0x00;\n            var3 = temp7 + 0x01;\n        \n            if (var2 > var3) { goto label_167E; }\n        \n            var1 = func_166B(var2, var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_15DF() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_166B(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0153:\n        \n            if (msg.value <= 0x00) { stop(); }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = msg.value;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n            stop();\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var var1 = 0x01b2;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = isOwner(var2);\n            \n            label_0222:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var2 = confirmations(var2, var3);\n                goto label_0222;\n            } else if (var0 == 0x4bc9fdc2) {\n                // Dispatch table entry for calcMaxWithdraw()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var1 = calcMaxWithdraw();\n            \n            label_026B:\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                goto label_026B;\n            } else if (var0 == 0x67eeba0c) {\n                // Dispatch table entry for dailyLimit()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = dailyLimit();\n                goto label_026B;\n            } else if (var0 == 0x6b0c932d) {\n                // Dispatch table entry for lastDay()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = lastDay();\n                goto label_026B;\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                goto label_0222;\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                goto label_026B;\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0321;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp8 = memory[0x40:0x60];\n                var var6 = temp8;\n                memory[var6:var6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                memory[var6 + 0x20:var6 + 0x20 + 0x20] = var3;\n                memory[var6 + 0x60:var6 + 0x60 + 0x20] = !!var5;\n                memory[var6 + 0x40:var6 + 0x40 + 0x20] = 0x80;\n                var var7 = var6 + 0x40;\n                var temp9 = var6 + 0x80;\n                var temp10 = var4;\n                memory[temp9:temp9 + 0x20] = memory[temp10:temp10 + 0x20];\n                var var8 = temp9 + 0x20;\n                var var10 = memory[temp10:temp10 + 0x20];\n                var var9 = temp10 + 0x20;\n                var var11 = var10;\n                var var12 = var8;\n                var var13 = var9;\n                var var14 = 0x00;\n            \n                if (var14 >= var11) {\n                label_037B:\n                    var temp11 = var10;\n                    var8 = temp11 + var8;\n                    var9 = temp11 & 0x1f;\n                \n                    if (!var9) {\n                        var temp12 = memory[0x40:0x60];\n                        return memory[temp12:temp12 + var8 - temp12];\n                    } else {\n                        var temp13 = var9;\n                        var temp14 = var8 - temp13;\n                        memory[temp14:temp14 + 0x20] = ~(0x0100 ** (0x20 - temp13) - 0x01) & memory[temp14:temp14 + 0x20];\n                        var temp15 = memory[0x40:0x60];\n                        return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n                    }\n                } else {\n                label_036C:\n                    var temp16 = var14;\n                    memory[temp16 + var12:temp16 + var12 + 0x20] = memory[var13 + temp16:var13 + temp16 + 0x20];\n                    var14 = temp16 + 0x20;\n                \n                    if (var14 >= var11) { goto label_037B; }\n                    else { goto label_036C; }\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var1 = getOwners();\n            \n            label_03CC:\n                var temp17 = memory[0x40:0x60];\n                var2 = temp17;\n                memory[var2:var2 + 0x20] = 0x20;\n                var3 = var2;\n                var temp18 = var3 + 0x20;\n                var temp19 = var1;\n                memory[temp18:temp18 + 0x20] = memory[temp19:temp19 + 0x20];\n                var4 = temp18 + 0x20;\n                var5 = temp19 + 0x20;\n                var6 = memory[temp19:temp19 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_040B:\n                    var temp20 = memory[0x40:0x60];\n                    return memory[temp20:temp20 + (var6 + var4) - temp20];\n                } else {\n                label_03FC:\n                    var temp21 = var10;\n                    memory[temp21 + var8:temp21 + var8 + 0x20] = memory[var9 + temp21:var9 + temp21 + 0x20];\n                    var10 = temp21 + 0x20;\n                \n                    if (var10 >= var7) { goto label_040B; }\n                    else { goto label_03FC; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                goto label_03CC;\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cc;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                goto label_03CC;\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = transactionCount();\n                goto label_026B;\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var temp22 = msg.data[0x44:0x64];\n                var temp23 = msg.data[temp22 + 0x04:temp22 + 0x04 + 0x20];\n                var temp24 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp24 + (temp23 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp24:temp24 + 0x20] = temp23;\n                memory[temp24 + 0x20:temp24 + 0x20 + temp23] = msg.data[temp22 + 0x24:temp22 + 0x24 + temp23];\n                var4 = temp24;\n                var5 = 0x00;\n                var6 = 0x108d;\n                var7 = var2;\n                var8 = var3;\n                var9 = var4;\n                var10 = 0x00;\n                var11 = var7;\n            \n                if (!(var11 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n            \n                var10 = storage[0x05];\n                var temp25 = memory[0x40:0x60];\n                var12 = temp25;\n                memory[0x40:0x60] = var12 + 0x80;\n                memory[var12:var12 + 0x20] = var7 & 0x02 ** 0xa0 - 0x01;\n                memory[var12 + 0x20:var12 + 0x20 + 0x20] = var8;\n                memory[var12 + 0x40:var12 + 0x40 + 0x20] = var9;\n                memory[var12 + 0x60:var12 + 0x60 + 0x20] = 0x00;\n                memory[0x00:0x20] = var10;\n                memory[0x20:0x40] = 0x00;\n                var temp26 = keccak256(memory[0x00:0x40]);\n                var13 = temp26;\n                storage[var13] = (memory[var12:var12 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[var13] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                storage[var13 + 0x01] = memory[var12 + 0x20:var12 + 0x20 + 0x20];\n                var temp27 = memory[var12 + 0x40:var12 + 0x40 + 0x20];\n                var14 = 0x1514;\n                var var15 = var13 + 0x02;\n                var var16 = temp27 + 0x20;\n                var var17 = memory[temp27:temp27 + 0x20];\n                var temp28 = var15;\n                var temp29 = storage[temp28];\n                memory[0x00:0x20] = temp28;\n                var var18 = keccak256(memory[0x00:0x20]);\n                var var19 = var16;\n                var16 = var18 + ((!(temp29 & 0x01) * 0x0100 - 0x01 & temp29) / 0x02 + 0x1f) / 0x20;\n            \n                if (0x1f < var17) {\n                    var temp30 = var17;\n                    storage[var15] = temp30 + temp30 + 0x01;\n                \n                    if (!temp30) {\n                    label_165F:\n                        var temp31 = var16;\n                        var16 = 0x166b;\n                        var17 = temp31;\n                        var temp32 = var17;\n                        var17 = 0x088d;\n                        var temp33 = var18;\n                        var18 = temp32;\n                        var19 = temp33;\n                    \n                        if (var18 <= var19) {\n                            var17 = func_166B(var18, var19);\n                            var16 = var17;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                        label_167E:\n                            var temp34 = var19;\n                            storage[temp34] = 0x00;\n                            var19 = temp34 + 0x01;\n                        \n                            if (var18 > var19) { goto label_167E; }\n                        \n                            var17 = func_166B(var18, var19);\n                            // Error: Could not resolve method call return address!\n                        }\n                    } else {\n                        var temp35 = var17;\n                        var temp36 = var19;\n                        var17 = temp36;\n                        var19 = var17 + temp35;\n                    \n                        if (var19 <= var17) { goto label_165F; }\n                    \n                    label_164D:\n                        var temp37 = var17;\n                        var temp38 = var18;\n                        storage[temp38] = memory[temp37:temp37 + 0x20];\n                        var17 = temp37 + 0x20;\n                        var18 = temp38 + 0x01;\n                        var19 = var19;\n                    \n                        if (var19 <= var17) { goto label_165F; }\n                        else { goto label_164D; }\n                    }\n                } else {\n                    var temp39 = var17;\n                    storage[var15] = temp39 + temp39 | (memory[var19:var19 + 0x20] & ~0xff);\n                    goto label_165F;\n                }\n            } else if (var0 == 0xcea08621) {\n                // Dispatch table entry for changeDailyLimit(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                changeDailyLimit(var2);\n                stop();\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = MAX_OWNER_COUNT();\n                goto label_026B;\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = required();\n                goto label_026B;\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var temp40 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp40 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp40;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x019a;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else if (var0 == 0xf059cf2b) {\n                // Dispatch table entry for spentToday()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x026b;\n                var2 = spentToday();\n                goto label_026B;\n            } else { goto label_0153; }\n        }\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xff;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] + ~0x00) {\n        label_06DC:\n            var var2 = storage[0x03] + ~0x00;\n            var var3 = 0x06ef;\n            var var4 = 0x03;\n            var var5 = var2;\n            func_15B6(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_0708:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n                var3 = storage[0x03];\n                var2 = 0x0708;\n                changeRequirement(var3);\n                goto label_0708;\n            }\n        } else {\n        label_062B:\n            var2 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var4] & 0x02 ** 0xa0 - 0x01 != var2) {\n                var1 = var1;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] + ~0x00) { goto label_06DC; }\n                else { goto label_062B; }\n            } else {\n                var2 = 0x03;\n                var temp2 = storage[var2];\n                var3 = temp2 + ~0x00;\n            \n                if (var3 >= temp2) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var temp3 = storage[keccak256(memory[0x00:0x20]) + var3];\n                var3 = 0x03;\n                var2 = temp3 & 0x02 ** 0xa0 - 0x01;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp4 = keccak256(memory[0x00:0x20]) + var4;\n                storage[temp4] = (var2 & 0x02 ** 0xa0 - 0x01) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_06DC;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var1 = arg0;\n        var var2 = msg.sender;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var3 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] & ~0xff;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function calcMaxWithdraw() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (block.timestamp > storage[0x07] + 0x015180) {\n            var0 = storage[0x06];\n            goto label_088D;\n        } else if (storage[0x06] >= storage[0x08]) { return storage[0x06] - storage[0x08]; }\n        else {\n            var0 = 0x00;\n        \n        label_088D:\n            return var0;\n        }\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x05]) {\n        label_08F5:\n            return var0;\n        } else {\n        label_089F:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_08E1; }\n                else { goto label_08C3; }\n            } else if (var2) {\n            label_08E1:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0894:\n                \n                    if (var1 >= storage[0x05]) { goto label_08F5; }\n                    else { goto label_089F; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0894;\n                }\n            } else {\n            label_08C3:\n                var2 = arg1;\n            \n                if (!var2) { goto label_08E1; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_08E1;\n            }\n        }\n    }\n    \n    function dailyLimit() returns (var r0) { return storage[0x06]; }\n    \n    function lastDay() returns (var r0) { return storage[0x07]; }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var0 = arg0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (!(var1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0989; }\n            else { goto label_0986; }\n        } else if (var4) {\n        label_0989:\n        \n            if (var4) {\n            label_0992:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_099C:\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var var5 = storage[0x03];\n                var4 = 0x03;\n                var var6 = var5 + 0x01;\n                var var7 = 0x09d4;\n                var var8 = var4;\n                var var9 = var6;\n                func_15B6(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = keccak256(memory[0x00:0x20]) + var5;\n                var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n                storage[temp1] = temp2 | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + memory[0x40:0x60] - temp3], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0x02 ** 0xa0 - 0x01]);\n                return;\n            } else {\n            label_098F:\n            \n                if (var2) { goto label_099C; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0986:\n            var4 = !var3;\n        \n            if (var4) { goto label_0992; }\n            else { goto label_098F; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= storage[0x03]) {\n        label_0AB9:\n            return var0;\n        } else {\n        label_0A4C:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var5 = 0x03;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff) {\n                var temp1 = var1 + 0x01;\n                var1 = temp1;\n            \n                if (var1 != storage[0x04]) { goto label_0AB1; }\n                else { goto label_0AA9; }\n            } else if (var1 != storage[0x04]) {\n            label_0AB1:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_0AB9; }\n                else { goto label_0A4C; }\n            } else {\n            label_0AA9:\n                var0 = 0x01;\n                goto label_0AB9;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (var1 >= storage[0x03]) {\n        label_0B29:\n            return var0;\n        } else {\n        label_0ACF:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var4 = 0x03;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp0 + 0x40])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_0AC4:\n            \n                if (var1 >= storage[0x03]) { goto label_0B29; }\n                else { goto label_0ACF; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_0AC4;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        r2 = temp0;\n        r1 = storage[r2 + 0x01];\n        var temp1 = r2 + 0x02;\n        var temp2 = storage[temp1];\n        var temp3 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r3 = temp4;\n        var var3 = temp1;\n        var var4 = temp3;\n        memory[r3:r3 + 0x20] = var4;\n        var var5 = r3 + 0x20;\n        var var6 = var3;\n        var temp5 = storage[var6];\n        var var7 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n    \n        if (!var7) {\n        label_0BFA:\n            var temp6 = storage[r2 + 0x03];\n            r2 = r3;\n            r3 = temp6 & 0xff;\n            return arg0, r1, r2, r3;\n        } else if (0x1f < var7) {\n            var temp7 = var5;\n            var temp8 = temp7 + var7;\n            var5 = temp8;\n            memory[0x00:0x20] = var6;\n            var temp9 = keccak256(memory[0x00:0x20]);\n            memory[temp7:temp7 + 0x20] = storage[temp9];\n            var6 = temp9 + 0x01;\n            var7 = temp7 + 0x20;\n        \n            if (var5 <= var7) { goto label_0BF1; }\n        \n        label_0BDD:\n            var temp10 = var6;\n            var temp11 = var7;\n            memory[temp11:temp11 + 0x20] = storage[temp10];\n            var6 = temp10 + 0x01;\n            var7 = temp11 + 0x20;\n        \n            if (var5 > var7) { goto label_0BDD; }\n        \n        label_0BF1:\n            var temp12 = var5;\n            var temp13 = temp12 + (var7 - temp12 & 0x1f);\n            var7 = temp12;\n            var5 = temp13;\n            goto label_0BFA;\n        } else {\n            var temp14 = var5;\n            memory[temp14:temp14 + 0x20] = storage[var6] / 0x0100 * 0x0100;\n            var5 = temp14 + 0x20;\n            var7 = var7;\n            goto label_0BFA;\n        }\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x0c15;\n        var0 = func_15DF();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_0C6B:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp4 + 0x01;\n            var6 = temp2 + 0x20;\n        \n            if (var4 <= var6) { goto label_0C6B; }\n        \n        label_0C4D:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0x02 ** 0xa0 - 0x01;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_0C4D; }\n            else { goto label_0C6B; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x0c7d;\n        var0 = func_15DF();\n        var var1 = 0x0c85;\n        var1 = func_15DF();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var4;\n            var temp1 = var5;\n            memory[temp1:temp1 + 0x20] = temp0;\n            memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n            var1 = temp1;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_0D2D:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_0D92:\n                        return var0;\n                    } else {\n                    label_0D5D:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_0D92; }\n                        else { goto label_0D5D; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_0D92; }\n                    else { goto label_0D5D; }\n                }\n            } else {\n            label_0CBF:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_0D01; }\n                    else { goto label_0CE3; }\n                } else if (var4) {\n                label_0D01:\n                \n                    if (!var4) {\n                    label_0D25:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_0D2D; }\n                        else { goto label_0CBF; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4;\n                        var2 = var2 + 0x01;\n                        var3 = var3;\n                        goto label_0D25;\n                    }\n                } else {\n                label_0CE3:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_0D01; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_0D01;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_0D2D; }\n            else { goto label_0CBF; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x0da5;\n        var0 = func_15DF();\n        var var1 = 0x0dad;\n        var1 = func_15DF();\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = storage[0x03];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_0E8A:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_0EF9:\n                        return var0;\n                    } else {\n                    label_0EB9:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_0EF9; }\n                        else { goto label_0EB9; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_0EF9; }\n                    else { goto label_0EB9; }\n                }\n            } else {\n            label_0DE9:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var6 = 0x03;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x40])] & 0xff)) {\n                label_0E82:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_0E8A; }\n                    else { goto label_0DE9; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[keccak256(memory[0x00:0x20]) + var5] & 0x02 ** 0xa0 - 0x01;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var5 + var6 * 0x20 + 0x20:var5 + var6 * 0x20 + 0x20 + 0x20] = var4 & 0x02 ** 0xa0 - 0x01;\n                    var3 = var3;\n                    var2 = var2 + 0x01;\n                    goto label_0E82;\n                }\n            }\n        } else {\n            var temp7 = MSIZE();\n            var temp8 = var4;\n            memory[temp7:temp7 + 0x20] = temp8;\n            memory[0x40:0x60] = temp7 + temp8 * 0x20 + 0x20;\n            var1 = temp7;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_0E8A; }\n            else { goto label_0DE9; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_0F42; }\n            else { goto label_0F3F; }\n        } else if (var2) {\n        label_0F42:\n        \n            if (var2) {\n            label_0F4B:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_0F55:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_0F48:\n            \n                if (var0) { goto label_0F55; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0F3F:\n            var2 = !var1;\n        \n            if (var2) { goto label_0F4B; }\n            else { goto label_0F48; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n        var var2 = arg0;\n        var var3 = msg.sender;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp2;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = (storage[temp4] & ~0xff) | 0x01;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x1079;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function changeDailyLimit(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        storage[0x06] = temp0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = temp0;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xc71bdc6afaf9b1aa90a7078191d4fc1adf3bf680fca3183697df6b0dc226bca2]);\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var1 = arg0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var var2 = arg1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1211:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = arg0 & temp0;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = ~0xff;\n            storage[temp2] = temp3 & storage[temp2];\n            var temp4 = arg1;\n            memory[0x00:0x20] = temp4 & temp0;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            storage[temp5] = (temp3 & storage[temp5]) | 0x01;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0x02 ** 0xa0 - 0x01]);\n            var temp7 = memory[0x40:0x60];\n            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0x02 ** 0xa0 - 0x01]);\n            return;\n        } else {\n        label_1188:\n            var var3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var5] & 0x02 ** 0xa0 - 0x01 != var3) {\n                var2 = var2;\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1211; }\n                else { goto label_1188; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp8 = keccak256(memory[0x00:0x20]) + var5;\n                storage[temp8] = (var3 & 0x02 ** 0xa0 - 0x01) | (storage[temp8] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_1211;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = var0;\n        var var1 = var0;\n        var var2 = arg0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x00;\n        var0 = keccak256(memory[0x00:0x40]);\n        var var3 = 0x12ef;\n        var var4 = arg0;\n        var3 = isConfirmed(var4);\n        var1 = var3;\n        var3 = var1;\n    \n        if (var3) {\n        label_1322:\n        \n            if (!var3) {\n            label_1465:\n                return;\n            } else {\n                var temp0 = var0 + 0x03;\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n            \n                if (var1) {\n                    var temp1 = var0;\n                    var3 = storage[temp1] & 0x02 ** 0xa0 - 0x01;\n                    var4 = storage[temp1 + 0x01];\n                    var var5 = temp1 + 0x02;\n                    var var6 = memory[0x40:0x60];\n                    var var7 = var6;\n                    var var8 = var5;\n                    var temp2 = storage[var8];\n                    var var9 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n                \n                    if (!var9) {\n                    label_13C8:\n                        var temp3 = memory[0x40:0x60];\n                        var temp4;\n                        temp4, memory[temp3:temp3 + 0x00] = address(var3).call.gas(msg.gas).value(var4)(memory[temp3:temp3 + var7 - temp3]);\n                    \n                        if (!temp4) {\n                            var temp5 = memory[0x40:0x60];\n                            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-4]]);\n                            var temp6 = var0 + 0x03;\n                            storage[temp6] = storage[temp6] & ~0xff;\n                        \n                            if (var1) { goto label_1465; }\n                        \n                            storage[0x08] = storage[0x08] - storage[var0 + 0x01];\n                            goto label_1465;\n                        } else {\n                            var temp7 = memory[0x40:0x60];\n                            log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-4]]);\n                            goto label_1465;\n                        }\n                    } else {\n                    label_1382:\n                    \n                        if (0x1f < var9) {\n                            var temp8 = var7;\n                            var temp9 = temp8 + var9;\n                            var7 = temp9;\n                            memory[0x00:0x20] = var8;\n                            var temp10 = keccak256(memory[0x00:0x20]);\n                            memory[temp8:temp8 + 0x20] = storage[temp10];\n                            var8 = temp10 + 0x01;\n                            var9 = temp8 + 0x20;\n                        \n                            if (var7 <= var9) { goto label_13BF; }\n                        \n                        label_13AB:\n                            var temp11 = var8;\n                            var temp12 = var9;\n                            memory[temp12:temp12 + 0x20] = storage[temp11];\n                            var8 = temp11 + 0x01;\n                            var9 = temp12 + 0x20;\n                        \n                            if (var7 > var9) { goto label_13AB; }\n                        \n                        label_13BF:\n                            var temp13 = var7;\n                            var temp14 = temp13 + (var9 - temp13 & 0x1f);\n                            var9 = temp13;\n                            var7 = temp14;\n                            goto label_13C8;\n                        } else {\n                            var temp15 = var7;\n                            memory[temp15:temp15 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n                            var7 = temp15 + 0x20;\n                            var9 = var9;\n                            goto label_13C8;\n                        }\n                    }\n                } else {\n                    var temp16 = var0;\n                    storage[0x08] = storage[temp16 + 0x01] + storage[0x08];\n                    var4 = storage[temp16 + 0x01];\n                    var3 = storage[temp16] & 0x02 ** 0xa0 - 0x01;\n                    var5 = temp16 + 0x02;\n                    var6 = memory[0x40:0x60];\n                    var7 = var6;\n                    var8 = var5;\n                    var temp17 = storage[var8];\n                    var9 = (!(temp17 & 0x01) * 0x0100 - 0x01 & temp17) / 0x02;\n                \n                    if (!var9) { goto label_13C8; }\n                    else { goto label_1382; }\n                }\n            }\n        } else {\n            var temp18 = storage[var0 + 0x02];\n            var3 = !((!(temp18 & 0x01) * 0x0100 + ~0x00 & temp18) / 0x02);\n        \n            if (!var3) { goto label_1322; }\n        \n            var3 = 0x1322;\n            var4 = storage[var0 + 0x01];\n            var3 = func_156E(var4);\n            goto label_1322;\n        }\n    }\n    \n    function spentToday() returns (var r0) { return storage[0x08]; }\n    \n    function func_156E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (block.timestamp <= storage[0x07] + 0x015180) {\n            var var1 = storage[0x08] + arg0 > storage[0x06];\n        \n            if (var1) {\n            label_15A0:\n            \n                if (!var1) {\n                label_15AD:\n                    return 0x01;\n                } else {\n                label_15A6:\n                    return 0x00;\n                }\n            } else {\n            label_1598:\n                var temp0 = storage[0x08];\n            \n                if (temp0 + arg0 >= temp0) { goto label_15AD; }\n                else { goto label_15A6; }\n            }\n        } else {\n            storage[0x07] = block.timestamp;\n            storage[0x08] = 0x00;\n            var1 = storage[0x08] + arg0 > storage[0x06];\n        \n            if (var1) { goto label_15A0; }\n            else { goto label_1598; }\n        }\n    }\n    \n    function func_15B6(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) { return; }\n    \n        memory[0x00:0x20] = arg0;\n        var temp3 = keccak256(memory[0x00:0x20]);\n        var temp4 = var0;\n        var0 = 0x15da;\n        var var1 = temp3 + temp4;\n        var var2 = arg1 + temp3;\n        var temp5 = var1;\n        var1 = 0x088d;\n        var temp6 = var2;\n        var2 = temp5;\n        var var3 = temp6;\n    \n        if (var2 <= var3) {\n            var1 = func_166B(var2, var3);\n            var0 = var1;\n            // Error: Could not resolve jump destination!\n        } else {\n        label_167E:\n            var temp7 = var3;\n            storage[temp7] = 0x00;\n            var3 = temp7 + 0x01;\n        \n            if (var2 > var3) { goto label_167E; }\n        \n            var1 = func_166B(var2, var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_15DF() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_166B(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 47.27682399749756,
	"usage": {
		"completion_tokens": 704,
		"prompt_tokens": 16887,
		"total_tokens": 17591
	}
}