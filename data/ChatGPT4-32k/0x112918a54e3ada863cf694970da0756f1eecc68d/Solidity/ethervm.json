{
	"address": "0x112918a54e3ada863cf694970da0756f1eecc68d",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity version of the specified EVM Bytecode:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    \n    function main() public {\n        /* Code Implementation Here */\n    }\n    \n    function fallback() public {\n        /* Code Implementation Here */\n    }\n    \n    function owners(uint256 arg0) public returns (uint256) {\n        /* Code Implementation Here */\n    }\n    \n    function removeOwner(address arg0) public {\n        /* Code Implementation Here */\n    }\n    \n    function revokeConfirmation(uint256 arg0) public {\n        /* Code Implementation Here */\n    }\n    \n    function isOwner(address arg0) public returns (bool) {\n        /* Code Implementation Here */\n    }\n    \n    function confirmations(uint256 arg0, address arg1) public returns (bool) {\n        /* Code Implementation Here */\n    }\n    \n    function getTransactionCount(bool arg0, bool arg1) public returns (uint256) {\n        /* Code Implementation Here */\n    }\n    \n    function addOwner(address arg0) public {\n        /* Code Implementation Here */\n    }\n    \n    function isConfirmed(uint256 arg0) public returns (bool) {\n        /* Code Implementation Here */\n    }\n    \n    function getConfirmationCount(uint256 arg0) public returns (uint256) {\n        /* Code Implementation Here */\n    }\n    \n    function transactions(uint256 arg0) public returns (address, uint256, bytes memory, bool) {\n        /* Code Implementation Here */\n    }\n    \n    function getOwners() public returns (address[] memory) {\n        /* Code Implementation Here */\n    }\n    \n    function getTransactionIds(uint256 arg0, uint256 arg1, bool arg2, bool arg3) public returns (uint256[] memory) {\n        /* Code Implementation Here */\n    }\n    \n    function getConfirmations(uint256 arg0) public returns (address[] memory) {\n        /* Code Implementation Here */\n    }\n    \n    function transactionCount() public returns (uint256) {\n        /* Code Implementation Here */\n    }\n    \n    function changeRequirement(uint256 arg0) public {\n        /* Code Implementation Here */\n    }\n    \n    function confirmTransaction(uint256 arg0) public {\n        /* Code Implementation Here */\n    }\n    \n    function submitTransaction(address arg0, uint256 arg1, bytes memory arg2) public returns (uint256) {\n        /* Code Implementation Here */\n    }\n    \n    function MAX_OWNER_COUNT() public returns (uint256) {\n        /* Code Implementation Here */\n    }\n    \n    function required() public returns (uint256) {\n        /* Code Implementation Here */\n    }\n    \n    function replaceOwner(address arg0, address arg1) public {\n        /* Code Implementation Here */\n    }\n    \n    function executeTransaction(uint256 arg0) public {\n        /* Code Implementation Here */\n    }\n}\n```\n\nNote: The actual code implementation inside each function is not provided in the given EVM Bytecode, hence the placeholder comment \"Code Implementation Here\". The actual implementation depends on the logic of the contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471633,
	"id": "chatcmpl-8MudlVm6ByT777HWjniX9qaN8BuAH",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0128:\n            var var0 = 0x0130;\n            fallback();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x015d;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020d;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = isOwner(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02b5;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = confirmations(var2, var3);\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0308;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x552079dc) {\n                // Dispatch table entry for fallback()\n                var1 = 0x0326;\n                fallback();\n                stop();\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0369;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0396;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03db;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x041c;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp12 = memory[0x40:0x60];\n                var var6 = temp12;\n                memory[var6:var6 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp13 = var6 + 0x20;\n                memory[temp13:temp13 + 0x20] = var3;\n                var temp14 = temp13 + 0x20;\n                var var7 = temp14;\n                var temp15 = var7 + 0x20;\n                memory[temp15:temp15 + 0x20] = !!var5;\n                var temp16 = temp15 + 0x20;\n                memory[var7:var7 + 0x20] = temp16 - var6;\n                var temp17 = var4;\n                memory[temp16:temp16 + 0x20] = memory[temp17:temp17 + 0x20];\n                var var8 = temp16 + 0x20;\n                var var9 = temp17 + 0x20;\n                var var10 = memory[temp17:temp17 + 0x20];\n                var var11 = var10;\n                var var12 = var8;\n                var var13 = var9;\n                var var14 = 0x00;\n            \n                if (var14 >= var11) {\n                label_049E:\n                    var temp18 = var10;\n                    var8 = temp18 + var8;\n                    var9 = temp18 & 0x1f;\n                \n                    if (!var9) {\n                        var temp19 = memory[0x40:0x60];\n                        return memory[temp19:temp19 + var8 - temp19];\n                    } else {\n                        var temp20 = var9;\n                        var temp21 = var8 - temp20;\n                        memory[temp21:temp21 + 0x20] = ~(0x0100 ** (0x20 - temp20) - 0x01) & memory[temp21:temp21 + 0x20];\n                        var temp22 = memory[0x40:0x60];\n                        return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n                    }\n                } else {\n                label_048C:\n                    var temp23 = var14;\n                    memory[var12 + temp23:var12 + temp23 + 0x20] = memory[var13 + temp23:var13 + temp23 + 0x20];\n                    var14 = temp23 + 0x20;\n                \n                    if (var14 >= var11) { goto label_049E; }\n                    else { goto label_048C; }\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f1;\n                var1 = getOwners();\n                var temp24 = memory[0x40:0x60];\n                var2 = temp24;\n                var3 = var2;\n                var temp25 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp25 - var3;\n                var temp26 = var1;\n                memory[temp25:temp25 + 0x20] = memory[temp26:temp26 + 0x20];\n                var4 = temp25 + 0x20;\n                var5 = temp26 + 0x20;\n                var6 = memory[temp26:temp26 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0534:\n                    var temp27 = memory[0x40:0x60];\n                    return memory[temp27:temp27 + (var6 + var4) - temp27];\n                } else {\n                label_0522:\n                    var temp28 = var10;\n                    memory[var8 + temp28:var8 + temp28 + 0x20] = memory[var9 + temp28:var9 + temp28 + 0x20];\n                    var10 = temp28 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0534; }\n                    else { goto label_0522; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0595;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                var temp29 = memory[0x40:0x60];\n                var2 = temp29;\n                var3 = var2;\n                var temp30 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp30 - var3;\n                var temp31 = var1;\n                memory[temp30:temp30 + 0x20] = memory[temp31:temp31 + 0x20];\n                var4 = temp30 + 0x20;\n                var5 = temp31 + 0x20;\n                var6 = memory[temp31:temp31 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_05D8:\n                    var temp32 = memory[0x40:0x60];\n                    return memory[temp32:temp32 + (var6 + var4) - temp32];\n                } else {\n                label_05C6:\n                    var temp33 = var10;\n                    memory[var8 + temp33:var8 + temp33 + 0x20] = memory[var9 + temp33:var9 + temp33 + 0x20];\n                    var10 = temp33 + 0x20;\n                \n                    if (var10 >= var7) { goto label_05D8; }\n                    else { goto label_05C6; }\n                }\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0617;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                var temp34 = memory[0x40:0x60];\n                var2 = temp34;\n                var3 = var2;\n                var temp35 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp35 - var3;\n                var temp36 = var1;\n                memory[temp35:temp35 + 0x20] = memory[temp36:temp36 + 0x20];\n                var4 = temp35 + 0x20;\n                var5 = temp36 + 0x20;\n                var6 = memory[temp36:temp36 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_065A:\n                    var temp37 = memory[0x40:0x60];\n                    return memory[temp37:temp37 + (var6 + var4) - temp37];\n                } else {\n                label_0648:\n                    var temp38 = var10;\n                    memory[var8 + temp38:var8 + temp38 + 0x20] = memory[var9 + temp38:var9 + temp38 + 0x20];\n                    var10 = temp38 + 0x20;\n                \n                    if (var10 >= var7) { goto label_065A; }\n                    else { goto label_0648; }\n                }\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0683;\n                var2 = transactionCount();\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = var2;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06c4;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06f1;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0784;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var temp41 = msg.data[0x44:0x64] + 0x04;\n                var temp42 = msg.data[temp41:temp41 + 0x20];\n                var temp43 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp43 + (temp42 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp43:temp43 + 0x20] = temp42;\n                memory[temp43 + 0x20:temp43 + 0x20 + temp42] = msg.data[temp41 + 0x20:temp41 + 0x20 + temp42];\n                var4 = temp43;\n                var1 = submitTransaction(var2, var3, var4);\n                var temp44 = memory[0x40:0x60];\n                memory[temp44:temp44 + 0x20] = var1;\n                var temp45 = memory[0x40:0x60];\n                return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07af;\n                var2 = MAX_OWNER_COUNT();\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var2;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07da;\n                var2 = required();\n                var temp48 = memory[0x40:0x60];\n                memory[temp48:temp48 + 0x20] = var2;\n                var temp49 = memory[0x40:0x60];\n                return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0851;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x087e;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_0128; }\n        }\n    }\n    \n    function fallback() {\n        if (msg.value <= 0x00) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xff) | 0x00;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] - 0x01) {\n        label_0B32:\n            var var2 = storage[0x03] - 0x01;\n            var var3 = 0x0b4a;\n            var var5 = var2;\n            var var4 = 0x03;\n            func_2125(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_0B69:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n                var2 = 0x0b68;\n                var3 = storage[0x03];\n                changeRequirement(var3);\n                goto label_0B69;\n            }\n        } else {\n        label_0A1B:\n            var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var4] & 0xffffffffffffffffffffffffffffffffffffffff != var2) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] - 0x01) { goto label_0B32; }\n                else { goto label_0A1B; }\n            } else {\n                var2 = 0x03;\n                var3 = storage[0x03] - 0x01;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[keccak256(memory[0x00:0x20]) + var3] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = keccak256(memory[0x00:0x20]) + var4;\n                storage[temp2] = (var2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_0B32;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        var var2 = msg.sender;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0;\n        memory[0x00:0x20] = var3;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x00;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x05]) {\n        label_0E33:\n            return var0;\n        } else {\n        label_0DBB:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0E1A; }\n                else { goto label_0DED; }\n            } else if (var2) {\n            label_0E1A:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0DB0:\n                \n                    if (var1 >= storage[0x05]) { goto label_0E33; }\n                    else { goto label_0DBB; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0DB0;\n                }\n            } else {\n            label_0DED:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0E1A; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0E1A;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x03] + 0x01;\n        var var2 = temp0;\n        var temp1 = storage[0x04];\n        var var3 = temp1;\n        var var4 = var2 <= 0x32;\n        var var5 = var2 != 0x00;\n        var var6 = var3 <= var2;\n        var var7 = var3 != 0x00;\n        var var8 = var4;\n    \n        if (var8) {\n            var8 = var5;\n        \n            if (!var8) { goto label_0F4B; }\n            else { goto label_0F49; }\n        } else if (!var8) {\n        label_0F4B:\n        \n            if (!var8) {\n            label_0F54:\n            \n                if (!var8) { revert(memory[0x00:0x00]); }\n            \n            label_0F5F:\n                var temp2 = arg0;\n                memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n                var temp4 = storage[0x03] + 0x01;\n                storage[0x03] = temp4;\n                memory[0x00:0x20] = 0x03;\n                var temp5 = keccak256(memory[0x00:0x20]) + (temp4 - 0x01);\n                storage[temp5] = (temp2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp5] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n            label_0F52:\n            \n                if (var7) { goto label_0F5F; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0F49:\n            var8 = var6;\n        \n            if (!var8) { goto label_0F54; }\n            else { goto label_0F52; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n    \n        if (var2 >= storage[0x03]) {\n        label_1148:\n            return var0;\n        } else {\n        label_1086:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var5 = 0x03;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[keccak256(memory[0x00:0x20]) + var6] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff) {\n                var temp2 = var1 + 0x01;\n                var1 = temp2;\n            \n                if (var1 != storage[0x04]) { goto label_113B; }\n                else { goto label_1133; }\n            } else if (var1 != storage[0x04]) {\n            label_113B:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_1148; }\n                else { goto label_1086; }\n            } else {\n            label_1133:\n                return 0x01;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x03]) {\n        label_1215:\n            return var0;\n        } else {\n        label_1166:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var4 = 0x03;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[keccak256(memory[0x00:0x20]) + var5] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_1158:\n            \n                if (var1 >= storage[0x03]) { goto label_1215; }\n                else { goto label_1166; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_1158;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0;\n        var temp1 = r2 + 0x02;\n        var temp2 = storage[temp1];\n        var temp3 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r3 = temp4;\n        var var3 = temp1;\n        var var4 = temp3;\n        memory[r3:r3 + 0x20] = var4;\n        var var5 = r3 + 0x20;\n        var var6 = var3;\n        var temp5 = storage[var6];\n        var var7 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n    \n        if (!var7) {\n        label_12F3:\n            var temp6 = r2;\n            r2 = r3;\n            r3 = storage[temp6 + 0x03] & 0xff;\n            return arg0, r1, r2, r3;\n        } else if (0x1f < var7) {\n            var temp7 = var5;\n            var temp8 = temp7 + var7;\n            var5 = temp8;\n            memory[0x00:0x20] = var6;\n            var temp9 = keccak256(memory[0x00:0x20]);\n            memory[temp7:temp7 + 0x20] = storage[temp9];\n            var6 = temp9 + 0x01;\n            var7 = temp7 + 0x20;\n        \n            if (var5 <= var7) { goto label_12EA; }\n        \n        label_12D6:\n            var temp10 = var6;\n            var temp11 = var7;\n            memory[temp11:temp11 + 0x20] = storage[temp10];\n            var6 = temp10 + 0x01;\n            var7 = temp11 + 0x20;\n        \n            if (var5 > var7) { goto label_12D6; }\n        \n        label_12EA:\n            var temp12 = var5;\n            var temp13 = temp12 + (var7 - temp12 & 0x1f);\n            var7 = temp12;\n            var5 = temp13;\n            goto label_12F3;\n        } else {\n            var temp14 = var5;\n            memory[temp14:temp14 + 0x20] = storage[var6] / 0x0100 * 0x0100;\n            var5 = temp14 + 0x20;\n            var7 = var7;\n            goto label_12F3;\n        }\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_1394:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = temp2 + 0x20;\n            var5 = temp4 + 0x01;\n        \n            if (var4 <= var6) { goto label_1394; }\n        \n        label_134A:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_134A; }\n            else { goto label_1394; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var temp0 = storage[0x05];\n        var temp1 = memory[0x40:0x60];\n        var var5 = temp0;\n        var var4 = temp1;\n        memory[var4:var4 + 0x20] = var5;\n        memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n    \n        if (!var5) {\n            var1 = var4;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_1481:\n                var temp2 = arg1 - arg0;\n                var temp3 = memory[0x40:0x60];\n                var5 = temp2;\n                var4 = temp3;\n                memory[var4:var4 + 0x20] = var5;\n                memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n            \n                if (!var5) {\n                    var0 = var4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_1504:\n                        return var0;\n                    } else {\n                    label_14C2:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_1504; }\n                        else { goto label_14C2; }\n                    }\n                } else {\n                    var temp4 = var5 * 0x20;\n                    memory[var4 + 0x20:var4 + 0x20 + temp4] = code[code.length:code.length + temp4];\n                    var0 = var4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_1504; }\n                    else { goto label_14C2; }\n                }\n            } else {\n            label_13EC:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_144B; }\n                    else { goto label_141E; }\n                } else if (var4) {\n                label_144B:\n                \n                    if (!var4) {\n                    label_1474:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_1481; }\n                        else { goto label_13EC; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var2 = var2 + 0x01;\n                        goto label_1474;\n                    }\n                } else {\n                label_141E:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_144B; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_144B;\n                }\n            }\n        } else {\n            var temp5 = var5 * 0x20;\n            memory[var4 + 0x20:var4 + 0x20 + temp5] = code[code.length:code.length + temp5];\n            var1 = var4;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_1481; }\n            else { goto label_13EC; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var var4 = temp1;\n        var var5 = temp0;\n        memory[var4:var4 + 0x20] = var5;\n        memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n    \n        if (!var5) {\n            var1 = var4;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_1696:\n                var temp2 = var2;\n                var temp3 = memory[0x40:0x60];\n                var4 = temp3;\n                var5 = temp2;\n                memory[var4:var4 + 0x20] = var5;\n                memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n            \n                if (!var5) {\n                    var0 = var4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_1744:\n                        return var0;\n                    } else {\n                    label_16D6:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_1744; }\n                        else { goto label_16D6; }\n                    }\n                } else {\n                    var temp4 = var5 * 0x20;\n                    memory[var4 + 0x20:var4 + 0x20 + temp4] = code[code.length:code.length + temp4];\n                    var0 = var4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_1744; }\n                    else { goto label_16D6; }\n                }\n            } else {\n            label_1563:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var6 = 0x03;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp5 = var5;\n                memory[temp5:temp5 + 0x20] = storage[keccak256(memory[0x00:0x20]) + var7] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp6 = temp5 + 0x20;\n                memory[temp6:temp6 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x20])] & 0xff)) {\n                label_1689:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_1696; }\n                    else { goto label_1563; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[keccak256(memory[0x00:0x20]) + var5] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var2 = var2 + 0x01;\n                    goto label_1689;\n                }\n            }\n        } else {\n            var temp7 = var5 * 0x20;\n            memory[var4 + 0x20:var4 + 0x20 + temp7] = code[code.length:code.length + temp7];\n            var1 = var4;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_1696; }\n            else { goto label_1563; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x03];\n        var var0 = temp0;\n        var temp1 = arg0;\n        var var1 = temp1;\n        var var2 = var0 <= 0x32;\n        var var3 = var0 != 0x00;\n        var var4 = var1 <= var0;\n        var var5 = var1 != 0x00;\n        var var6 = var2;\n    \n        if (var6) {\n            var6 = var3;\n        \n            if (!var6) { goto label_17C7; }\n            else { goto label_17C5; }\n        } else if (!var6) {\n        label_17C7:\n        \n            if (!var6) {\n            label_17D0:\n            \n                if (!var6) { revert(memory[0x00:0x00]); }\n            \n            label_17DB:\n                var temp2 = arg0;\n                storage[0x04] = temp2;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = temp2;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_17CE:\n            \n                if (var5) { goto label_17DB; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_17C5:\n            var6 = var4;\n        \n            if (!var6) { goto label_17D0; }\n            else { goto label_17CE; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x19f8;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function submitTransaction(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1a0c;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var1 = func_1FBD(var2, var3, var4);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x1a17;\n        var2 = var0;\n        confirmTransaction(var2);\n        return var0;\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1C01:\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x00;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n        label_1B2B:\n            var var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var5] & 0xffffffffffffffffffffffffffffffffffffffff != var3) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1C01; }\n                else { goto label_1B2B; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp6 = keccak256(memory[0x00:0x20]) + var5;\n                storage[temp6] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_1C01;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var4 = arg0;\n        memory[0x00:0x20] = var4;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var5 = 0x1e3d;\n        var var6 = arg0;\n        var5 = isConfirmed(var6);\n    \n        if (!var5) {\n        label_1FB5:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x00;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var0 = temp1;\n            var temp2 = var0 + 0x03;\n            storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n            var5 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = storage[var0 + 0x01];\n            var var7 = var0 + 0x02;\n            var var8 = memory[0x40:0x60];\n            var var9 = var8;\n            var var10 = var7;\n            var temp3 = storage[var10];\n            var var11 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n        \n            if (!var11) {\n            label_1F1C:\n                var temp4 = memory[0x40:0x60];\n                var temp5;\n                temp5, memory[temp4:temp4 + 0x00] = address(var5).call.gas(msg.gas).value(var6)(memory[temp4:temp4 + var9 - temp4]);\n            \n                if (!temp5) {\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-6]]);\n                    var temp7 = var0 + 0x03;\n                    storage[temp7] = (storage[temp7] & ~0xff) | 0x00;\n                    goto label_1FB5;\n                } else {\n                    var temp8 = memory[0x40:0x60];\n                    log(memory[temp8:temp8 + memory[0x40:0x60] - temp8], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-6]]);\n                    goto label_1FB5;\n                }\n            } else if (0x1f < var11) {\n                var temp9 = var9;\n                var temp10 = temp9 + var11;\n                var9 = temp10;\n                memory[0x00:0x20] = var10;\n                var temp11 = keccak256(memory[0x00:0x20]);\n                memory[temp9:temp9 + 0x20] = storage[temp11];\n                var10 = temp11 + 0x01;\n                var11 = temp9 + 0x20;\n            \n                if (var9 <= var11) { goto label_1F13; }\n            \n            label_1EFF:\n                var temp12 = var10;\n                var temp13 = var11;\n                memory[temp13:temp13 + 0x20] = storage[temp12];\n                var10 = temp12 + 0x01;\n                var11 = temp13 + 0x20;\n            \n                if (var9 > var11) { goto label_1EFF; }\n            \n            label_1F13:\n                var temp14 = var9;\n                var temp15 = temp14 + (var11 - temp14 & 0x1f);\n                var11 = temp14;\n                var9 = temp15;\n                goto label_1F1C;\n            } else {\n                var temp16 = var9;\n                memory[temp16:temp16 + 0x20] = storage[var10] / 0x0100 * 0x0100;\n                var11 = var11;\n                var9 = temp16 + 0x20;\n                goto label_1F1C;\n            }\n        }\n    }\n    \n    function func_1FBD(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x05];\n        var temp0 = memory[0x40:0x60];\n        var var2 = temp0;\n        memory[0x40:0x60] = var2 + 0x80;\n        memory[var2:var2 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp1 = var2 + 0x20;\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x00;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x00;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var var3 = temp3;\n        var temp4 = var3;\n        storage[temp4] = (memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[var3 + 0x01] = memory[var2 + 0x20:var2 + 0x20 + 0x20];\n        var temp5 = memory[var2 + 0x40:var2 + 0x40 + 0x20];\n        var var4 = 0x20bb;\n        var var5 = var3 + 0x02;\n        var var6 = temp5 + 0x20;\n        var var7 = memory[temp5:temp5 + 0x20];\n        var4 = func_2151(var5, var6, var7);\n        var temp6 = var3 + 0x03;\n        storage[temp6] = !!memory[var2 + 0x60:var2 + 0x60 + 0x20] | (storage[temp6] & ~0xff);\n        storage[0x05] = storage[0x05] + 0x01;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51, stack[-5]]);\n        return var0;\n    }\n    \n    function func_2125(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_214C:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x214b;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_21D1(var1, var2);\n            goto label_214C;\n        }\n    }\n    \n    function func_2151(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_21C0:\n                var temp4 = arg1;\n                arg1 = 0x21cd;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_21D1(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_21BF:\n                    goto label_21C0;\n                } else {\n                label_21AD:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_21BF; }\n                    else { goto label_21AD; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_21C0;\n        }\n    }\n    \n    function func_21D1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x21f3;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_21EF(arg1, var0); }\n    \n    label_21E0:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_21E0; }\n    \n        arg0 = func_21EF(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_21EF(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0128:\n            var var0 = 0x0130;\n            fallback();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x015d;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020d;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = isOwner(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02b5;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = confirmations(var2, var3);\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0308;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x552079dc) {\n                // Dispatch table entry for fallback()\n                var1 = 0x0326;\n                fallback();\n                stop();\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0369;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0396;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03db;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x041c;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp12 = memory[0x40:0x60];\n                var var6 = temp12;\n                memory[var6:var6 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp13 = var6 + 0x20;\n                memory[temp13:temp13 + 0x20] = var3;\n                var temp14 = temp13 + 0x20;\n                var var7 = temp14;\n                var temp15 = var7 + 0x20;\n                memory[temp15:temp15 + 0x20] = !!var5;\n                var temp16 = temp15 + 0x20;\n                memory[var7:var7 + 0x20] = temp16 - var6;\n                var temp17 = var4;\n                memory[temp16:temp16 + 0x20] = memory[temp17:temp17 + 0x20];\n                var var8 = temp16 + 0x20;\n                var var9 = temp17 + 0x20;\n                var var10 = memory[temp17:temp17 + 0x20];\n                var var11 = var10;\n                var var12 = var8;\n                var var13 = var9;\n                var var14 = 0x00;\n            \n                if (var14 >= var11) {\n                label_049E:\n                    var temp18 = var10;\n                    var8 = temp18 + var8;\n                    var9 = temp18 & 0x1f;\n                \n                    if (!var9) {\n                        var temp19 = memory[0x40:0x60];\n                        return memory[temp19:temp19 + var8 - temp19];\n                    } else {\n                        var temp20 = var9;\n                        var temp21 = var8 - temp20;\n                        memory[temp21:temp21 + 0x20] = ~(0x0100 ** (0x20 - temp20) - 0x01) & memory[temp21:temp21 + 0x20];\n                        var temp22 = memory[0x40:0x60];\n                        return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n                    }\n                } else {\n                label_048C:\n                    var temp23 = var14;\n                    memory[var12 + temp23:var12 + temp23 + 0x20] = memory[var13 + temp23:var13 + temp23 + 0x20];\n                    var14 = temp23 + 0x20;\n                \n                    if (var14 >= var11) { goto label_049E; }\n                    else { goto label_048C; }\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f1;\n                var1 = getOwners();\n                var temp24 = memory[0x40:0x60];\n                var2 = temp24;\n                var3 = var2;\n                var temp25 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp25 - var3;\n                var temp26 = var1;\n                memory[temp25:temp25 + 0x20] = memory[temp26:temp26 + 0x20];\n                var4 = temp25 + 0x20;\n                var5 = temp26 + 0x20;\n                var6 = memory[temp26:temp26 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0534:\n                    var temp27 = memory[0x40:0x60];\n                    return memory[temp27:temp27 + (var6 + var4) - temp27];\n                } else {\n                label_0522:\n                    var temp28 = var10;\n                    memory[var8 + temp28:var8 + temp28 + 0x20] = memory[var9 + temp28:var9 + temp28 + 0x20];\n                    var10 = temp28 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0534; }\n                    else { goto label_0522; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0595;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                var temp29 = memory[0x40:0x60];\n                var2 = temp29;\n                var3 = var2;\n                var temp30 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp30 - var3;\n                var temp31 = var1;\n                memory[temp30:temp30 + 0x20] = memory[temp31:temp31 + 0x20];\n                var4 = temp30 + 0x20;\n                var5 = temp31 + 0x20;\n                var6 = memory[temp31:temp31 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_05D8:\n                    var temp32 = memory[0x40:0x60];\n                    return memory[temp32:temp32 + (var6 + var4) - temp32];\n                } else {\n                label_05C6:\n                    var temp33 = var10;\n                    memory[var8 + temp33:var8 + temp33 + 0x20] = memory[var9 + temp33:var9 + temp33 + 0x20];\n                    var10 = temp33 + 0x20;\n                \n                    if (var10 >= var7) { goto label_05D8; }\n                    else { goto label_05C6; }\n                }\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0617;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                var temp34 = memory[0x40:0x60];\n                var2 = temp34;\n                var3 = var2;\n                var temp35 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp35 - var3;\n                var temp36 = var1;\n                memory[temp35:temp35 + 0x20] = memory[temp36:temp36 + 0x20];\n                var4 = temp35 + 0x20;\n                var5 = temp36 + 0x20;\n                var6 = memory[temp36:temp36 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_065A:\n                    var temp37 = memory[0x40:0x60];\n                    return memory[temp37:temp37 + (var6 + var4) - temp37];\n                } else {\n                label_0648:\n                    var temp38 = var10;\n                    memory[var8 + temp38:var8 + temp38 + 0x20] = memory[var9 + temp38:var9 + temp38 + 0x20];\n                    var10 = temp38 + 0x20;\n                \n                    if (var10 >= var7) { goto label_065A; }\n                    else { goto label_0648; }\n                }\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0683;\n                var2 = transactionCount();\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = var2;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06c4;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06f1;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0784;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var temp41 = msg.data[0x44:0x64] + 0x04;\n                var temp42 = msg.data[temp41:temp41 + 0x20];\n                var temp43 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp43 + (temp42 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp43:temp43 + 0x20] = temp42;\n                memory[temp43 + 0x20:temp43 + 0x20 + temp42] = msg.data[temp41 + 0x20:temp41 + 0x20 + temp42];\n                var4 = temp43;\n                var1 = submitTransaction(var2, var3, var4);\n                var temp44 = memory[0x40:0x60];\n                memory[temp44:temp44 + 0x20] = var1;\n                var temp45 = memory[0x40:0x60];\n                return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07af;\n                var2 = MAX_OWNER_COUNT();\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var2;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07da;\n                var2 = required();\n                var temp48 = memory[0x40:0x60];\n                memory[temp48:temp48 + 0x20] = var2;\n                var temp49 = memory[0x40:0x60];\n                return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0851;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x087e;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_0128; }\n        }\n    }\n    \n    function fallback() {\n        if (msg.value <= 0x00) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xff) | 0x00;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] - 0x01) {\n        label_0B32:\n            var var2 = storage[0x03] - 0x01;\n            var var3 = 0x0b4a;\n            var var5 = var2;\n            var var4 = 0x03;\n            func_2125(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_0B69:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n                var2 = 0x0b68;\n                var3 = storage[0x03];\n                changeRequirement(var3);\n                goto label_0B69;\n            }\n        } else {\n        label_0A1B:\n            var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var4] & 0xffffffffffffffffffffffffffffffffffffffff != var2) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] - 0x01) { goto label_0B32; }\n                else { goto label_0A1B; }\n            } else {\n                var2 = 0x03;\n                var3 = storage[0x03] - 0x01;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[keccak256(memory[0x00:0x20]) + var3] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = keccak256(memory[0x00:0x20]) + var4;\n                storage[temp2] = (var2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_0B32;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        var var2 = msg.sender;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0;\n        memory[0x00:0x20] = var3;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x00;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x05]) {\n        label_0E33:\n            return var0;\n        } else {\n        label_0DBB:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0E1A; }\n                else { goto label_0DED; }\n            } else if (var2) {\n            label_0E1A:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0DB0:\n                \n                    if (var1 >= storage[0x05]) { goto label_0E33; }\n                    else { goto label_0DBB; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0DB0;\n                }\n            } else {\n            label_0DED:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0E1A; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0E1A;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x03] + 0x01;\n        var var2 = temp0;\n        var temp1 = storage[0x04];\n        var var3 = temp1;\n        var var4 = var2 <= 0x32;\n        var var5 = var2 != 0x00;\n        var var6 = var3 <= var2;\n        var var7 = var3 != 0x00;\n        var var8 = var4;\n    \n        if (var8) {\n            var8 = var5;\n        \n            if (!var8) { goto label_0F4B; }\n            else { goto label_0F49; }\n        } else if (!var8) {\n        label_0F4B:\n        \n            if (!var8) {\n            label_0F54:\n            \n                if (!var8) { revert(memory[0x00:0x00]); }\n            \n            label_0F5F:\n                var temp2 = arg0;\n                memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n                var temp4 = storage[0x03] + 0x01;\n                storage[0x03] = temp4;\n                memory[0x00:0x20] = 0x03;\n                var temp5 = keccak256(memory[0x00:0x20]) + (temp4 - 0x01);\n                storage[temp5] = (temp2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp5] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n            label_0F52:\n            \n                if (var7) { goto label_0F5F; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0F49:\n            var8 = var6;\n        \n            if (!var8) { goto label_0F54; }\n            else { goto label_0F52; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n    \n        if (var2 >= storage[0x03]) {\n        label_1148:\n            return var0;\n        } else {\n        label_1086:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var5 = 0x03;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[keccak256(memory[0x00:0x20]) + var6] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff) {\n                var temp2 = var1 + 0x01;\n                var1 = temp2;\n            \n                if (var1 != storage[0x04]) { goto label_113B; }\n                else { goto label_1133; }\n            } else if (var1 != storage[0x04]) {\n            label_113B:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_1148; }\n                else { goto label_1086; }\n            } else {\n            label_1133:\n                return 0x01;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x03]) {\n        label_1215:\n            return var0;\n        } else {\n        label_1166:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var4 = 0x03;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[keccak256(memory[0x00:0x20]) + var5] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_1158:\n            \n                if (var1 >= storage[0x03]) { goto label_1215; }\n                else { goto label_1166; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_1158;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0;\n        var temp1 = r2 + 0x02;\n        var temp2 = storage[temp1];\n        var temp3 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r3 = temp4;\n        var var3 = temp1;\n        var var4 = temp3;\n        memory[r3:r3 + 0x20] = var4;\n        var var5 = r3 + 0x20;\n        var var6 = var3;\n        var temp5 = storage[var6];\n        var var7 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n    \n        if (!var7) {\n        label_12F3:\n            var temp6 = r2;\n            r2 = r3;\n            r3 = storage[temp6 + 0x03] & 0xff;\n            return arg0, r1, r2, r3;\n        } else if (0x1f < var7) {\n            var temp7 = var5;\n            var temp8 = temp7 + var7;\n            var5 = temp8;\n            memory[0x00:0x20] = var6;\n            var temp9 = keccak256(memory[0x00:0x20]);\n            memory[temp7:temp7 + 0x20] = storage[temp9];\n            var6 = temp9 + 0x01;\n            var7 = temp7 + 0x20;\n        \n            if (var5 <= var7) { goto label_12EA; }\n        \n        label_12D6:\n            var temp10 = var6;\n            var temp11 = var7;\n            memory[temp11:temp11 + 0x20] = storage[temp10];\n            var6 = temp10 + 0x01;\n            var7 = temp11 + 0x20;\n        \n            if (var5 > var7) { goto label_12D6; }\n        \n        label_12EA:\n            var temp12 = var5;\n            var temp13 = temp12 + (var7 - temp12 & 0x1f);\n            var7 = temp12;\n            var5 = temp13;\n            goto label_12F3;\n        } else {\n            var temp14 = var5;\n            memory[temp14:temp14 + 0x20] = storage[var6] / 0x0100 * 0x0100;\n            var5 = temp14 + 0x20;\n            var7 = var7;\n            goto label_12F3;\n        }\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_1394:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = temp2 + 0x20;\n            var5 = temp4 + 0x01;\n        \n            if (var4 <= var6) { goto label_1394; }\n        \n        label_134A:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_134A; }\n            else { goto label_1394; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var temp0 = storage[0x05];\n        var temp1 = memory[0x40:0x60];\n        var var5 = temp0;\n        var var4 = temp1;\n        memory[var4:var4 + 0x20] = var5;\n        memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n    \n        if (!var5) {\n            var1 = var4;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_1481:\n                var temp2 = arg1 - arg0;\n                var temp3 = memory[0x40:0x60];\n                var5 = temp2;\n                var4 = temp3;\n                memory[var4:var4 + 0x20] = var5;\n                memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n            \n                if (!var5) {\n                    var0 = var4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_1504:\n                        return var0;\n                    } else {\n                    label_14C2:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_1504; }\n                        else { goto label_14C2; }\n                    }\n                } else {\n                    var temp4 = var5 * 0x20;\n                    memory[var4 + 0x20:var4 + 0x20 + temp4] = code[code.length:code.length + temp4];\n                    var0 = var4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_1504; }\n                    else { goto label_14C2; }\n                }\n            } else {\n            label_13EC:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_144B; }\n                    else { goto label_141E; }\n                } else if (var4) {\n                label_144B:\n                \n                    if (!var4) {\n                    label_1474:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_1481; }\n                        else { goto label_13EC; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var2 = var2 + 0x01;\n                        goto label_1474;\n                    }\n                } else {\n                label_141E:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_144B; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_144B;\n                }\n            }\n        } else {\n            var temp5 = var5 * 0x20;\n            memory[var4 + 0x20:var4 + 0x20 + temp5] = code[code.length:code.length + temp5];\n            var1 = var4;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_1481; }\n            else { goto label_13EC; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var var4 = temp1;\n        var var5 = temp0;\n        memory[var4:var4 + 0x20] = var5;\n        memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n    \n        if (!var5) {\n            var1 = var4;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_1696:\n                var temp2 = var2;\n                var temp3 = memory[0x40:0x60];\n                var4 = temp3;\n                var5 = temp2;\n                memory[var4:var4 + 0x20] = var5;\n                memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n            \n                if (!var5) {\n                    var0 = var4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_1744:\n                        return var0;\n                    } else {\n                    label_16D6:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_1744; }\n                        else { goto label_16D6; }\n                    }\n                } else {\n                    var temp4 = var5 * 0x20;\n                    memory[var4 + 0x20:var4 + 0x20 + temp4] = code[code.length:code.length + temp4];\n                    var0 = var4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_1744; }\n                    else { goto label_16D6; }\n                }\n            } else {\n            label_1563:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var6 = 0x03;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp5 = var5;\n                memory[temp5:temp5 + 0x20] = storage[keccak256(memory[0x00:0x20]) + var7] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp6 = temp5 + 0x20;\n                memory[temp6:temp6 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x20])] & 0xff)) {\n                label_1689:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_1696; }\n                    else { goto label_1563; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[keccak256(memory[0x00:0x20]) + var5] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var2 = var2 + 0x01;\n                    goto label_1689;\n                }\n            }\n        } else {\n            var temp7 = var5 * 0x20;\n            memory[var4 + 0x20:var4 + 0x20 + temp7] = code[code.length:code.length + temp7];\n            var1 = var4;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_1696; }\n            else { goto label_1563; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x03];\n        var var0 = temp0;\n        var temp1 = arg0;\n        var var1 = temp1;\n        var var2 = var0 <= 0x32;\n        var var3 = var0 != 0x00;\n        var var4 = var1 <= var0;\n        var var5 = var1 != 0x00;\n        var var6 = var2;\n    \n        if (var6) {\n            var6 = var3;\n        \n            if (!var6) { goto label_17C7; }\n            else { goto label_17C5; }\n        } else if (!var6) {\n        label_17C7:\n        \n            if (!var6) {\n            label_17D0:\n            \n                if (!var6) { revert(memory[0x00:0x00]); }\n            \n            label_17DB:\n                var temp2 = arg0;\n                storage[0x04] = temp2;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = temp2;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_17CE:\n            \n                if (var5) { goto label_17DB; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_17C5:\n            var6 = var4;\n        \n            if (!var6) { goto label_17D0; }\n            else { goto label_17CE; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x19f8;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function submitTransaction(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1a0c;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var1 = func_1FBD(var2, var3, var4);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x1a17;\n        var2 = var0;\n        confirmTransaction(var2);\n        return var0;\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1C01:\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x00;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n        label_1B2B:\n            var var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var5] & 0xffffffffffffffffffffffffffffffffffffffff != var3) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1C01; }\n                else { goto label_1B2B; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp6 = keccak256(memory[0x00:0x20]) + var5;\n                storage[temp6] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_1C01;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var4 = arg0;\n        memory[0x00:0x20] = var4;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var5 = 0x1e3d;\n        var var6 = arg0;\n        var5 = isConfirmed(var6);\n    \n        if (!var5) {\n        label_1FB5:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x00;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var0 = temp1;\n            var temp2 = var0 + 0x03;\n            storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n            var5 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = storage[var0 + 0x01];\n            var var7 = var0 + 0x02;\n            var var8 = memory[0x40:0x60];\n            var var9 = var8;\n            var var10 = var7;\n            var temp3 = storage[var10];\n            var var11 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n        \n            if (!var11) {\n            label_1F1C:\n                var temp4 = memory[0x40:0x60];\n                var temp5;\n                temp5, memory[temp4:temp4 + 0x00] = address(var5).call.gas(msg.gas).value(var6)(memory[temp4:temp4 + var9 - temp4]);\n            \n                if (!temp5) {\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-6]]);\n                    var temp7 = var0 + 0x03;\n                    storage[temp7] = (storage[temp7] & ~0xff) | 0x00;\n                    goto label_1FB5;\n                } else {\n                    var temp8 = memory[0x40:0x60];\n                    log(memory[temp8:temp8 + memory[0x40:0x60] - temp8], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-6]]);\n                    goto label_1FB5;\n                }\n            } else if (0x1f < var11) {\n                var temp9 = var9;\n                var temp10 = temp9 + var11;\n                var9 = temp10;\n                memory[0x00:0x20] = var10;\n                var temp11 = keccak256(memory[0x00:0x20]);\n                memory[temp9:temp9 + 0x20] = storage[temp11];\n                var10 = temp11 + 0x01;\n                var11 = temp9 + 0x20;\n            \n                if (var9 <= var11) { goto label_1F13; }\n            \n            label_1EFF:\n                var temp12 = var10;\n                var temp13 = var11;\n                memory[temp13:temp13 + 0x20] = storage[temp12];\n                var10 = temp12 + 0x01;\n                var11 = temp13 + 0x20;\n            \n                if (var9 > var11) { goto label_1EFF; }\n            \n            label_1F13:\n                var temp14 = var9;\n                var temp15 = temp14 + (var11 - temp14 & 0x1f);\n                var11 = temp14;\n                var9 = temp15;\n                goto label_1F1C;\n            } else {\n                var temp16 = var9;\n                memory[temp16:temp16 + 0x20] = storage[var10] / 0x0100 * 0x0100;\n                var11 = var11;\n                var9 = temp16 + 0x20;\n                goto label_1F1C;\n            }\n        }\n    }\n    \n    function func_1FBD(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x05];\n        var temp0 = memory[0x40:0x60];\n        var var2 = temp0;\n        memory[0x40:0x60] = var2 + 0x80;\n        memory[var2:var2 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp1 = var2 + 0x20;\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x00;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x00;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var var3 = temp3;\n        var temp4 = var3;\n        storage[temp4] = (memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[var3 + 0x01] = memory[var2 + 0x20:var2 + 0x20 + 0x20];\n        var temp5 = memory[var2 + 0x40:var2 + 0x40 + 0x20];\n        var var4 = 0x20bb;\n        var var5 = var3 + 0x02;\n        var var6 = temp5 + 0x20;\n        var var7 = memory[temp5:temp5 + 0x20];\n        var4 = func_2151(var5, var6, var7);\n        var temp6 = var3 + 0x03;\n        storage[temp6] = !!memory[var2 + 0x60:var2 + 0x60 + 0x20] | (storage[temp6] & ~0xff);\n        storage[0x05] = storage[0x05] + 0x01;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51, stack[-5]]);\n        return var0;\n    }\n    \n    function func_2125(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_214C:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x214b;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_21D1(var1, var2);\n            goto label_214C;\n        }\n    }\n    \n    function func_2151(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_21C0:\n                var temp4 = arg1;\n                arg1 = 0x21cd;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_21D1(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_21BF:\n                    goto label_21C0;\n                } else {\n                label_21AD:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_21BF; }\n                    else { goto label_21AD; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_21C0;\n        }\n    }\n    \n    function func_21D1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x21f3;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_21EF(arg1, var0); }\n    \n    label_21E0:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_21E0; }\n    \n        arg0 = func_21EF(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_21EF(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0128:\n            var var0 = 0x0130;\n            fallback();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x015d;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e0;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020d;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = isOwner(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02b5;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = confirmations(var2, var3);\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0308;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x552079dc) {\n                // Dispatch table entry for fallback()\n                var1 = 0x0326;\n                fallback();\n                stop();\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0369;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0396;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03db;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x041c;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp12 = memory[0x40:0x60];\n                var var6 = temp12;\n                memory[var6:var6 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp13 = var6 + 0x20;\n                memory[temp13:temp13 + 0x20] = var3;\n                var temp14 = temp13 + 0x20;\n                var var7 = temp14;\n                var temp15 = var7 + 0x20;\n                memory[temp15:temp15 + 0x20] = !!var5;\n                var temp16 = temp15 + 0x20;\n                memory[var7:var7 + 0x20] = temp16 - var6;\n                var temp17 = var4;\n                memory[temp16:temp16 + 0x20] = memory[temp17:temp17 + 0x20];\n                var var8 = temp16 + 0x20;\n                var var9 = temp17 + 0x20;\n                var var10 = memory[temp17:temp17 + 0x20];\n                var var11 = var10;\n                var var12 = var8;\n                var var13 = var9;\n                var var14 = 0x00;\n            \n                if (var14 >= var11) {\n                label_049E:\n                    var temp18 = var10;\n                    var8 = temp18 + var8;\n                    var9 = temp18 & 0x1f;\n                \n                    if (!var9) {\n                        var temp19 = memory[0x40:0x60];\n                        return memory[temp19:temp19 + var8 - temp19];\n                    } else {\n                        var temp20 = var9;\n                        var temp21 = var8 - temp20;\n                        memory[temp21:temp21 + 0x20] = ~(0x0100 ** (0x20 - temp20) - 0x01) & memory[temp21:temp21 + 0x20];\n                        var temp22 = memory[0x40:0x60];\n                        return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n                    }\n                } else {\n                label_048C:\n                    var temp23 = var14;\n                    memory[var12 + temp23:var12 + temp23 + 0x20] = memory[var13 + temp23:var13 + temp23 + 0x20];\n                    var14 = temp23 + 0x20;\n                \n                    if (var14 >= var11) { goto label_049E; }\n                    else { goto label_048C; }\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04f1;\n                var1 = getOwners();\n                var temp24 = memory[0x40:0x60];\n                var2 = temp24;\n                var3 = var2;\n                var temp25 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp25 - var3;\n                var temp26 = var1;\n                memory[temp25:temp25 + 0x20] = memory[temp26:temp26 + 0x20];\n                var4 = temp25 + 0x20;\n                var5 = temp26 + 0x20;\n                var6 = memory[temp26:temp26 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_0534:\n                    var temp27 = memory[0x40:0x60];\n                    return memory[temp27:temp27 + (var6 + var4) - temp27];\n                } else {\n                label_0522:\n                    var temp28 = var10;\n                    memory[var8 + temp28:var8 + temp28 + 0x20] = memory[var9 + temp28:var9 + temp28 + 0x20];\n                    var10 = temp28 + 0x20;\n                \n                    if (var10 >= var7) { goto label_0534; }\n                    else { goto label_0522; }\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0595;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                var temp29 = memory[0x40:0x60];\n                var2 = temp29;\n                var3 = var2;\n                var temp30 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp30 - var3;\n                var temp31 = var1;\n                memory[temp30:temp30 + 0x20] = memory[temp31:temp31 + 0x20];\n                var4 = temp30 + 0x20;\n                var5 = temp31 + 0x20;\n                var6 = memory[temp31:temp31 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_05D8:\n                    var temp32 = memory[0x40:0x60];\n                    return memory[temp32:temp32 + (var6 + var4) - temp32];\n                } else {\n                label_05C6:\n                    var temp33 = var10;\n                    memory[var8 + temp33:var8 + temp33 + 0x20] = memory[var9 + temp33:var9 + temp33 + 0x20];\n                    var10 = temp33 + 0x20;\n                \n                    if (var10 >= var7) { goto label_05D8; }\n                    else { goto label_05C6; }\n                }\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0617;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                var temp34 = memory[0x40:0x60];\n                var2 = temp34;\n                var3 = var2;\n                var temp35 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp35 - var3;\n                var temp36 = var1;\n                memory[temp35:temp35 + 0x20] = memory[temp36:temp36 + 0x20];\n                var4 = temp35 + 0x20;\n                var5 = temp36 + 0x20;\n                var6 = memory[temp36:temp36 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n                var10 = 0x00;\n            \n                if (var10 >= var7) {\n                label_065A:\n                    var temp37 = memory[0x40:0x60];\n                    return memory[temp37:temp37 + (var6 + var4) - temp37];\n                } else {\n                label_0648:\n                    var temp38 = var10;\n                    memory[var8 + temp38:var8 + temp38 + 0x20] = memory[var9 + temp38:var9 + temp38 + 0x20];\n                    var10 = temp38 + 0x20;\n                \n                    if (var10 >= var7) { goto label_065A; }\n                    else { goto label_0648; }\n                }\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0683;\n                var2 = transactionCount();\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = var2;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06c4;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06f1;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0784;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var temp41 = msg.data[0x44:0x64] + 0x04;\n                var temp42 = msg.data[temp41:temp41 + 0x20];\n                var temp43 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp43 + (temp42 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp43:temp43 + 0x20] = temp42;\n                memory[temp43 + 0x20:temp43 + 0x20 + temp42] = msg.data[temp41 + 0x20:temp41 + 0x20 + temp42];\n                var4 = temp43;\n                var1 = submitTransaction(var2, var3, var4);\n                var temp44 = memory[0x40:0x60];\n                memory[temp44:temp44 + 0x20] = var1;\n                var temp45 = memory[0x40:0x60];\n                return memory[temp45:temp45 + (temp44 + 0x20) - temp45];\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07af;\n                var2 = MAX_OWNER_COUNT();\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var2;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07da;\n                var2 = required();\n                var temp48 = memory[0x40:0x60];\n                memory[temp48:temp48 + 0x20] = var2;\n                var temp49 = memory[0x40:0x60];\n                return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0851;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x087e;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_0128; }\n        }\n    }\n    \n    function fallback() {\n        if (msg.value <= 0x00) { return; }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n    }\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[keccak256(memory[0x00:0x20]) + var1] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xff) | 0x00;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] - 0x01) {\n        label_0B32:\n            var var2 = storage[0x03] - 0x01;\n            var var3 = 0x0b4a;\n            var var5 = var2;\n            var var4 = 0x03;\n            func_2125(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_0B69:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n                var2 = 0x0b68;\n                var3 = storage[0x03];\n                changeRequirement(var3);\n                goto label_0B69;\n            }\n        } else {\n        label_0A1B:\n            var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var4] & 0xffffffffffffffffffffffffffffffffffffffff != var2) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] - 0x01) { goto label_0B32; }\n                else { goto label_0A1B; }\n            } else {\n                var2 = 0x03;\n                var3 = storage[0x03] - 0x01;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[keccak256(memory[0x00:0x20]) + var3] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = keccak256(memory[0x00:0x20]) + var4;\n                storage[temp2] = (var2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_0B32;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        var var2 = msg.sender;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0;\n        memory[0x00:0x20] = var3;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x00;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x05]) {\n        label_0E33:\n            return var0;\n        } else {\n        label_0DBB:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0E1A; }\n                else { goto label_0DED; }\n            } else if (var2) {\n            label_0E1A:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0DB0:\n                \n                    if (var1 >= storage[0x05]) { goto label_0E33; }\n                    else { goto label_0DBB; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0DB0;\n                }\n            } else {\n            label_0DED:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0E1A; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0E1A;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x03] + 0x01;\n        var var2 = temp0;\n        var temp1 = storage[0x04];\n        var var3 = temp1;\n        var var4 = var2 <= 0x32;\n        var var5 = var2 != 0x00;\n        var var6 = var3 <= var2;\n        var var7 = var3 != 0x00;\n        var var8 = var4;\n    \n        if (var8) {\n            var8 = var5;\n        \n            if (!var8) { goto label_0F4B; }\n            else { goto label_0F49; }\n        } else if (!var8) {\n        label_0F4B:\n        \n            if (!var8) {\n            label_0F54:\n            \n                if (!var8) { revert(memory[0x00:0x00]); }\n            \n            label_0F5F:\n                var temp2 = arg0;\n                memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n                var temp4 = storage[0x03] + 0x01;\n                storage[0x03] = temp4;\n                memory[0x00:0x20] = 0x03;\n                var temp5 = keccak256(memory[0x00:0x20]) + (temp4 - 0x01);\n                storage[temp5] = (temp2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp5] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n            label_0F52:\n            \n                if (var7) { goto label_0F5F; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0F49:\n            var8 = var6;\n        \n            if (!var8) { goto label_0F54; }\n            else { goto label_0F52; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n    \n        if (var2 >= storage[0x03]) {\n        label_1148:\n            return var0;\n        } else {\n        label_1086:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var5 = 0x03;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[keccak256(memory[0x00:0x20]) + var6] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff) {\n                var temp2 = var1 + 0x01;\n                var1 = temp2;\n            \n                if (var1 != storage[0x04]) { goto label_113B; }\n                else { goto label_1133; }\n            } else if (var1 != storage[0x04]) {\n            label_113B:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_1148; }\n                else { goto label_1086; }\n            } else {\n            label_1133:\n                return 0x01;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x03]) {\n        label_1215:\n            return var0;\n        } else {\n        label_1166:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var4 = 0x03;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[keccak256(memory[0x00:0x20]) + var5] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_1158:\n            \n                if (var1 >= storage[0x03]) { goto label_1215; }\n                else { goto label_1166; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_1158;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0;\n        var temp1 = r2 + 0x02;\n        var temp2 = storage[temp1];\n        var temp3 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + (temp3 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r3 = temp4;\n        var var3 = temp1;\n        var var4 = temp3;\n        memory[r3:r3 + 0x20] = var4;\n        var var5 = r3 + 0x20;\n        var var6 = var3;\n        var temp5 = storage[var6];\n        var var7 = (!(temp5 & 0x01) * 0x0100 - 0x01 & temp5) / 0x02;\n    \n        if (!var7) {\n        label_12F3:\n            var temp6 = r2;\n            r2 = r3;\n            r3 = storage[temp6 + 0x03] & 0xff;\n            return arg0, r1, r2, r3;\n        } else if (0x1f < var7) {\n            var temp7 = var5;\n            var temp8 = temp7 + var7;\n            var5 = temp8;\n            memory[0x00:0x20] = var6;\n            var temp9 = keccak256(memory[0x00:0x20]);\n            memory[temp7:temp7 + 0x20] = storage[temp9];\n            var6 = temp9 + 0x01;\n            var7 = temp7 + 0x20;\n        \n            if (var5 <= var7) { goto label_12EA; }\n        \n        label_12D6:\n            var temp10 = var6;\n            var temp11 = var7;\n            memory[temp11:temp11 + 0x20] = storage[temp10];\n            var6 = temp10 + 0x01;\n            var7 = temp11 + 0x20;\n        \n            if (var5 > var7) { goto label_12D6; }\n        \n        label_12EA:\n            var temp12 = var5;\n            var temp13 = temp12 + (var7 - temp12 & 0x1f);\n            var7 = temp12;\n            var5 = temp13;\n            goto label_12F3;\n        } else {\n            var temp14 = var5;\n            memory[temp14:temp14 + 0x20] = storage[var6] / 0x0100 * 0x0100;\n            var5 = temp14 + 0x20;\n            var7 = var7;\n            goto label_12F3;\n        }\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x60;\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_1394:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = temp2 + 0x20;\n            var5 = temp4 + 0x01;\n        \n            if (var4 <= var6) { goto label_1394; }\n        \n        label_134A:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var5 = temp5 + 0x01;\n            var6 = temp6 + 0x20;\n        \n            if (var4 > var6) { goto label_134A; }\n            else { goto label_1394; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var temp0 = storage[0x05];\n        var temp1 = memory[0x40:0x60];\n        var var5 = temp0;\n        var var4 = temp1;\n        memory[var4:var4 + 0x20] = var5;\n        memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n    \n        if (!var5) {\n            var1 = var4;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_1481:\n                var temp2 = arg1 - arg0;\n                var temp3 = memory[0x40:0x60];\n                var5 = temp2;\n                var4 = temp3;\n                memory[var4:var4 + 0x20] = var5;\n                memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n            \n                if (!var5) {\n                    var0 = var4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_1504:\n                        return var0;\n                    } else {\n                    label_14C2:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_1504; }\n                        else { goto label_14C2; }\n                    }\n                } else {\n                    var temp4 = var5 * 0x20;\n                    memory[var4 + 0x20:var4 + 0x20 + temp4] = code[code.length:code.length + temp4];\n                    var0 = var4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_1504; }\n                    else { goto label_14C2; }\n                }\n            } else {\n            label_13EC:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_144B; }\n                    else { goto label_141E; }\n                } else if (var4) {\n                label_144B:\n                \n                    if (!var4) {\n                    label_1474:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_1481; }\n                        else { goto label_13EC; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var2 = var2 + 0x01;\n                        goto label_1474;\n                    }\n                } else {\n                label_141E:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_144B; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_144B;\n                }\n            }\n        } else {\n            var temp5 = var5 * 0x20;\n            memory[var4 + 0x20:var4 + 0x20 + temp5] = code[code.length:code.length + temp5];\n            var1 = var4;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_1481; }\n            else { goto label_13EC; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x60;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var var4 = temp1;\n        var var5 = temp0;\n        memory[var4:var4 + 0x20] = var5;\n        memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n    \n        if (!var5) {\n            var1 = var4;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_1696:\n                var temp2 = var2;\n                var temp3 = memory[0x40:0x60];\n                var4 = temp3;\n                var5 = temp2;\n                memory[var4:var4 + 0x20] = var5;\n                memory[0x40:0x60] = var4 + var5 * 0x20 + 0x20;\n            \n                if (!var5) {\n                    var0 = var4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_1744:\n                        return var0;\n                    } else {\n                    label_16D6:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_1744; }\n                        else { goto label_16D6; }\n                    }\n                } else {\n                    var temp4 = var5 * 0x20;\n                    memory[var4 + 0x20:var4 + 0x20 + temp4] = code[code.length:code.length + temp4];\n                    var0 = var4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_1744; }\n                    else { goto label_16D6; }\n                }\n            } else {\n            label_1563:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var6 = 0x03;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp5 = var5;\n                memory[temp5:temp5 + 0x20] = storage[keccak256(memory[0x00:0x20]) + var7] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp6 = temp5 + 0x20;\n                memory[temp6:temp6 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp6 + 0x20])] & 0xff)) {\n                label_1689:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_1696; }\n                    else { goto label_1563; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[keccak256(memory[0x00:0x20]) + var5] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var2 = var2 + 0x01;\n                    goto label_1689;\n                }\n            }\n        } else {\n            var temp7 = var5 * 0x20;\n            memory[var4 + 0x20:var4 + 0x20 + temp7] = code[code.length:code.length + temp7];\n            var1 = var4;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_1696; }\n            else { goto label_1563; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x03];\n        var var0 = temp0;\n        var temp1 = arg0;\n        var var1 = temp1;\n        var var2 = var0 <= 0x32;\n        var var3 = var0 != 0x00;\n        var var4 = var1 <= var0;\n        var var5 = var1 != 0x00;\n        var var6 = var2;\n    \n        if (var6) {\n            var6 = var3;\n        \n            if (!var6) { goto label_17C7; }\n            else { goto label_17C5; }\n        } else if (!var6) {\n        label_17C7:\n        \n            if (!var6) {\n            label_17D0:\n            \n                if (!var6) { revert(memory[0x00:0x00]); }\n            \n            label_17DB:\n                var temp2 = arg0;\n                storage[0x04] = temp2;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = temp2;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_17CE:\n            \n                if (var5) { goto label_17DB; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_17C5:\n            var6 = var4;\n        \n            if (!var6) { goto label_17D0; }\n            else { goto label_17CE; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x19f8;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function submitTransaction(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1a0c;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var1 = func_1FBD(var2, var3, var4);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x1a17;\n        var2 = var0;\n        confirmTransaction(var2);\n        return var0;\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1C01:\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x00;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n        label_1B2B:\n            var var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[keccak256(memory[0x00:0x20]) + var5] & 0xffffffffffffffffffffffffffffffffffffffff != var3) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1C01; }\n                else { goto label_1B2B; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp6 = keccak256(memory[0x00:0x20]) + var5;\n                storage[temp6] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_1C01;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var4 = arg0;\n        memory[0x00:0x20] = var4;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var5 = 0x1e3d;\n        var var6 = arg0;\n        var5 = isConfirmed(var6);\n    \n        if (!var5) {\n        label_1FB5:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x00;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var0 = temp1;\n            var temp2 = var0 + 0x03;\n            storage[temp2] = (storage[temp2] & ~0xff) | 0x01;\n            var5 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = storage[var0 + 0x01];\n            var var7 = var0 + 0x02;\n            var var8 = memory[0x40:0x60];\n            var var9 = var8;\n            var var10 = var7;\n            var temp3 = storage[var10];\n            var var11 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n        \n            if (!var11) {\n            label_1F1C:\n                var temp4 = memory[0x40:0x60];\n                var temp5;\n                temp5, memory[temp4:temp4 + 0x00] = address(var5).call.gas(msg.gas).value(var6)(memory[temp4:temp4 + var9 - temp4]);\n            \n                if (!temp5) {\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + memory[0x40:0x60] - temp6], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-6]]);\n                    var temp7 = var0 + 0x03;\n                    storage[temp7] = (storage[temp7] & ~0xff) | 0x00;\n                    goto label_1FB5;\n                } else {\n                    var temp8 = memory[0x40:0x60];\n                    log(memory[temp8:temp8 + memory[0x40:0x60] - temp8], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-6]]);\n                    goto label_1FB5;\n                }\n            } else if (0x1f < var11) {\n                var temp9 = var9;\n                var temp10 = temp9 + var11;\n                var9 = temp10;\n                memory[0x00:0x20] = var10;\n                var temp11 = keccak256(memory[0x00:0x20]);\n                memory[temp9:temp9 + 0x20] = storage[temp11];\n                var10 = temp11 + 0x01;\n                var11 = temp9 + 0x20;\n            \n                if (var9 <= var11) { goto label_1F13; }\n            \n            label_1EFF:\n                var temp12 = var10;\n                var temp13 = var11;\n                memory[temp13:temp13 + 0x20] = storage[temp12];\n                var10 = temp12 + 0x01;\n                var11 = temp13 + 0x20;\n            \n                if (var9 > var11) { goto label_1EFF; }\n            \n            label_1F13:\n                var temp14 = var9;\n                var temp15 = temp14 + (var11 - temp14 & 0x1f);\n                var11 = temp14;\n                var9 = temp15;\n                goto label_1F1C;\n            } else {\n                var temp16 = var9;\n                memory[temp16:temp16 + 0x20] = storage[var10] / 0x0100 * 0x0100;\n                var11 = var11;\n                var9 = temp16 + 0x20;\n                goto label_1F1C;\n            }\n        }\n    }\n    \n    function func_1FBD(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x05];\n        var temp0 = memory[0x40:0x60];\n        var var2 = temp0;\n        memory[0x40:0x60] = var2 + 0x80;\n        memory[var2:var2 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp1 = var2 + 0x20;\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x00;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x00;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var var3 = temp3;\n        var temp4 = var3;\n        storage[temp4] = (memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[var3 + 0x01] = memory[var2 + 0x20:var2 + 0x20 + 0x20];\n        var temp5 = memory[var2 + 0x40:var2 + 0x40 + 0x20];\n        var var4 = 0x20bb;\n        var var5 = var3 + 0x02;\n        var var6 = temp5 + 0x20;\n        var var7 = memory[temp5:temp5 + 0x20];\n        var4 = func_2151(var5, var6, var7);\n        var temp6 = var3 + 0x03;\n        storage[temp6] = !!memory[var2 + 0x60:var2 + 0x60 + 0x20] | (storage[temp6] & ~0xff);\n        storage[0x05] = storage[0x05] + 0x01;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51, stack[-5]]);\n        return var0;\n    }\n    \n    function func_2125(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_214C:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x214b;\n            var var1 = temp4;\n            var var2 = temp3 + arg1;\n            var0 = func_21D1(var1, var2);\n            goto label_214C;\n        }\n    }\n    \n    function func_2151(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_21C0:\n                var temp4 = arg1;\n                arg1 = 0x21cd;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_21D1(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = arg2;\n                var temp6 = var1;\n                arg2 = temp6;\n                var1 = arg2 + temp5;\n            \n                if (var1 <= arg2) {\n                label_21BF:\n                    goto label_21C0;\n                } else {\n                label_21AD:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_21BF; }\n                    else { goto label_21AD; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_21C0;\n        }\n    }\n    \n    function func_21D1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x21f3;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_21EF(arg1, var0); }\n    \n    label_21E0:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_21E0; }\n    \n        arg0 = func_21EF(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_21EF(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 46.45790362358093,
	"usage": {
		"completion_tokens": 616,
		"prompt_tokens": 16879,
		"total_tokens": 17495
	}
}