{
	"address": "0x3c1634291868ddffa037222991babfccd8400921",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The following is the Solidity code equivalent of the given decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.4.20;\n\ncontract Contract {\n\n    address private owner;\n    address private multisigAddress;\n    address private auditorAddress;\n    uint256 private storage03;\n    uint256 private storage04;\n    uint256 private storage05;\n    uint256 private storage06;\n    uint256 private storage07;\n    uint256 private storage08;\n    mapping(bytes32 => uint256) private storage;\n    \n    function main() public {\n        // Body of the main function goes here\n    }\n    \n    function func_0F18(uint256 var3) private returns (uint256) {\n        // Body of the func_0F18 function goes here\n    }\n    \n    function func_0F2E(uint256 var1, uint256 var5) private returns (uint256) {\n        // Body of the func_0F2E function goes here\n    }\n    \n    function func_0FA9(uint256 var3, uint256 var4) private returns (uint256) {\n        // Body of the func_0FA9 function goes here\n    }\n    \n    function func_0FC2(address var3, uint256 var4, uint256 var5) private {\n        // Body of the func_0FC2 function goes here\n    }\n    \n    function func_1127(address var3, uint256 var4, uint256 var5) private {\n        // Body of the func_1127 function goes here\n    }\n    \n    function participantClawbackEther(uint256 var2) public {\n        // Body of the participantClawbackEther function goes here\n    }\n    \n    function ownerStartContract() public {\n        // Body of the ownerStartContract function goes here\n    }\n    \n    function refundOf(address var2) public view returns (uint256) {\n        // Body of the refundOf function goes here\n    }\n    \n    function BONUS_TIER_5_LIMIT() public pure returns (uint256) {\n        return 0xf2c0bbda8a07380000;\n    }\n    \n    function BONUS_TIER_7_LIMIT() public pure returns (uint256) {\n        return 0x0166464cb4046ca40000;\n    }\n    \n    function func_16D2(address var2) private returns (uint256) {\n        // Body of the func_16D2 function goes here\n    }\n    \n    function ownerFinishContract() public {\n        // Body of the ownerFinishContract function goes here\n    }\n    \n    function declineKyc(address var2) public {\n        // Body of the declineKyc function goes here\n    }\n    \n    function ownerDeclareRefundFinish() public {\n        // Body of the ownerDeclareRefundFinish function goes here\n    }\n    \n    function PARSECS_TOTAL_AMOUNT() public pure returns (uint256) {\n        return 0x3936608e242080;\n    }\n    \n    function MINIMUM_PARTICIPATION_AMOUNT() public pure returns (uint256) {\n        return 0x016345785d8a0000;\n    }\n    \n    function BONUS_TIER_2_LIMIT() public pure returns (uint256) {\n        return 0x4e39a5d6a888ac0000;\n    }\n    \n    function contractStarted() public view returns (bool) {\n        return storage03 / 0x0100 ** 0x16 & 0xff;\n    }\n    \n    function acceptKyc(address var2) public {\n        // Body of the acceptKyc function goes here\n    }\n    \n    function kycStatus(address var2) public view returns (uint8) {\n        // Body of the kycStatus function goes here\n    }\n    \n    function raisedFunding() public view returns (uint256) {\n        return storage04;\n    }\n    \n    function contractFailed() public view returns (bool) {\n        return storage03 / 0x0100 ** 0x19 & 0xff;\n    }\n    \n    function emergencyWithdrawParsecs(uint256 var2) public {\n        // Body of the emergencyWithdrawParsecs function goes here\n    }\n    \n    function multisigAddress() public view returns (address) {\n        return storage02;\n    }\n    \n    function contractRefundStarted() public view returns (bool) {\n        return storage03 / 0x0100 ** 0x1a & 0xff;\n    }\n    \n    function pendingParsecs() public view returns (uint256) {\n        return storage08;\n    }\n    \n    function pendingFunding() public view returns (uint256) {\n        return storage05;\n    }\n    \n    function ownerPowerUpContract() public {\n        // Body of the ownerPowerUpContract function goes here\n    }\n    \n    function BONUS_TIER_8_LIMIT() public pure returns (uint256) {\n        return 0x01a350b04e36ae7c0000;\n    }\n    \n    function ownerPauseContract() public {\n        // Body of the ownerPauseContract function goes here\n    }\n    \n    function ownerDeclareRefundStart() public {\n        // Body of the ownerDeclareRefundStart function goes here\n    }\n    \n    function BONUS_TIER_9_LIMIT() public pure returns (uint256) {\n        return 0x01f3466cfb5423a80000;\n    }\n    \n    function contractPaused() public view returns (bool) {\n        return storage03 / 0x0100 ** 0x18 & 0xff;\n    }\n    \n    function owner() public view returns (address) {\n        return storage00;\n    }\n    \n    function auditorAddress() public view returns (address) {\n        return auditorAddress;\n    }\n    \n    function contractFinished() public view returns (bool) {\n        return storage03 / 0x0100 ** 0x17 & 0xff;\n    }\n    \n    function BONUS_TIER_1_LIMIT() public pure returns (uint256) {\n        return 0x26c29e47c4844c0000;\n    }\n    \n    function ownerDeclareFailure() public {\n        // Body of the ownerDeclareFailure function goes here\n    }\n    \n    function BONUS_TIER_4_LIMIT() public pure returns (uint256) {\n        return 0xbacedb564f3c180000;\n    }\n    \n    function BONUS_TIER_3_LIMIT() public pure returns (uint256) {\n        return 0x83f289181d84c80000;\n    }\n    \n    function ownerResumeContract() public {\n        // Body of the ownerResumeContract function goes here\n    }\n    \n    function contractPoweredUp() public view returns (bool) {\n        return storage03 / 0x0100 ** 0x14 & 0xff;\n    }\n    \n    function emergencyClawbackEther(uint256 var2) public {\n        // Body of the emergencyClawbackEther function goes here\n    }\n    \n    function PARSECS_PER_ETHER_BASE() public pure returns (uint256) {\n        return 0x012eae09c800;\n    }\n    \n    function spentParsecs() public view returns (uint256) {\n        return storage07;\n    }\n    \n    function contractRefundFinished() public view returns (bool) {\n        return storage03 / 0x0100 ** 0x1b & 0xff;\n    }\n    \n    function refundPoweredUp() public view returns (bool) {\n        return storage03 / 0x0100 ** 0x15 & 0xff;\n    }\n    \n    function emergencyRefundContract() public {\n        // Body of the emergencyRefundContract function goes here\n    }\n    \n    function func_27C5(address var2) private returns (uint256) {\n        // Body of the func_27C5 function goes here\n    }\n    \n    function contributionOf(address var2) public view returns (uint256) {\n        // Body of the contributionOf function goes here\n    }\n    \n    function func_27F5(address var2) private returns (uint256) {\n        // Body of the func_27F5 function goes here\n    }\n    \n    function BONUS_TIER_6_LIMIT() public pure returns (uint256) {\n        return 0x012be3ec123534f00000;\n    }\n    \n    function ownerSetAuditor(address var2) public {\n        // Body of the ownerSetAuditor function goes here\n    }\n    \n    function ownerWithdrawParsecs(uint256 var2) public {\n        // Body of the ownerWithdrawParsecs function goes here\n    }\n    \n    function refundedFunding() public view returns (uint256) {\n        return storage06;\n    }\n    \n    function transferOwnership(address var2) public {\n        // Body of the transferOwnership function goes here\n    }\n    \n    function func_2C4D() private returns (uint256) {\n        // Body of the func_2C4D function goes here\n    }\n    \n    function func_2D62(uint256 var3, uint256 var4) private returns (uint256) {\n        // Body of the func_2D62 function goes here\n    }\n    \n    function func_2D80(uint256 var3, uint256 var6) private returns (uint256) {\n        // Body of the func_2D80 function goes here\n    }\n    \n    function func_2DBB(uint256 var3, uint256 var2) private returns (uint256) {\n        // Body of the func_2DBB function goes here\n    }\n    \n    function func_2DD6(address var3) private {\n        // Body of the func_2DD6 function goes here\n    }\n}\n```\n\nPlease note that the code above is just an approximate representation of the given EVM bytecode due to some implementation details of EVM being not directly translatable to Solidity. The variables and functions are given arbitrary names since their original names are not recoverable from the bytecode. The actual functionality might differ slightly.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474093,
	"id": "chatcmpl-8MvHRQihrDIYPwuaefInt3ONuG8us",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0266:\n            var var0 = 0x00;\n            var var1 = var0;\n        \n            if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (!(storage[0x03] / 0x0100 ** 0x16 & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x03] / 0x0100 ** 0x17 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x03] / 0x0100 ** 0x18 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x03] / 0x0100 ** 0x19 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value < 0x016345785d8a0000) { revert(memory[0x00:0x00]); }\n        \n            var var2 = 0x0313;\n            var var3 = msg.value;\n            var2 = func_0F18(var3);\n            var0 = var2;\n            var2 = 0x0331;\n            var3 = 0x3936608e242080;\n            var var4 = storage[0x07];\n            var2 = func_0FA9(var3, var4);\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0348;\n            var3 = var1;\n            var4 = storage[0x08];\n            var2 = func_0FA9(var3, var4);\n            var1 = var2;\n        \n            if (var0 > var1) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x00;\n        \n            if (var2 > 0x03) { assert(); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0e;\n            var3 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n        \n            if (var3 > 0x03) { assert(); }\n        \n            if (var3 != var2) {\n            label_0426:\n                var2 = 0x01;\n            \n                if (var2 > 0x03) { assert(); }\n            \n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n                var3 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n            \n                if (var3 > 0x03) { assert(); }\n            \n                if (var3 != var2) {\n                    var2 = 0x02;\n                \n                    if (var2 > 0x03) { assert(); }\n                \n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x0e;\n                    var3 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n                \n                    if (var3 > 0x03) { assert(); }\n                \n                    if (var3 != var2) { revert(memory[0x00:0x00]); }\n                \n                    var2 = 0x0517;\n                    var3 = msg.sender;\n                    var4 = msg.value;\n                    var var5 = var0;\n                    func_1127(var3, var4, var5);\n                    stop();\n                } else {\n                    var2 = 0x049c;\n                    var3 = msg.sender;\n                    var4 = msg.value;\n                    var5 = var0;\n                    func_0FC2(var3, var4, var5);\n                    stop();\n                }\n            } else {\n                var2 = 0x01;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n                var3 = keccak256(memory[0x00:0x40]);\n                var5 = 0x01;\n                var4 = ~(var5 * 0xff) & storage[var3];\n                var var6 = var2;\n            \n                if (var6 > 0x03) { assert(); }\n            \n                storage[var3] = var6 * var5 | var4;\n                goto label_0426;\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x3de230) {\n                // Dispatch table entry for participantClawbackEther(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0551;\n                var2 = msg.data[0x04:0x24];\n                participantClawbackEther(var2);\n                stop();\n            } else if (var0 == 0x06d832a3) {\n                // Dispatch table entry for ownerStartContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0568;\n                ownerStartContract();\n                stop();\n            } else if (var0 == 0x07738ad2) {\n                // Dispatch table entry for refundOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ab;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = refundOf(var2);\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = var2;\n                var temp2 = memory[0x40:0x60];\n                return memory[temp2:temp2 + (temp1 + 0x20) - temp2];\n            } else if (var0 == 0x10711911) {\n                // Dispatch table entry for BONUS_TIER_5_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d6;\n                var2 = BONUS_TIER_5_LIMIT();\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = var2;\n                var temp4 = memory[0x40:0x60];\n                return memory[temp4:temp4 + (temp3 + 0x20) - temp4];\n            } else if (var0 == 0x116a6f6c) {\n                // Dispatch table entry for BONUS_TIER_7_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0601;\n                var2 = BONUS_TIER_7_LIMIT();\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var2;\n                var temp6 = memory[0x40:0x60];\n                return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n            } else if (var0 == 0x18452bb1) {\n                // Dispatch table entry for 0x18452bb1 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0658;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = func_16D2(var2);\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = var2;\n                var temp8 = memory[0x40:0x60];\n                return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n            } else if (var0 == 0x1b4fa639) {\n                // Dispatch table entry for ownerFinishContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0683;\n                ownerFinishContract();\n                stop();\n            } else if (var0 == 0x2562b427) {\n                // Dispatch table entry for declineKyc(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06c6;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                declineKyc(var2);\n                stop();\n            } else if (var0 == 0x2603f70c) {\n                // Dispatch table entry for ownerDeclareRefundFinish()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06dd;\n                ownerDeclareRefundFinish();\n                stop();\n            } else if (var0 == 0x295d4756) {\n                // Dispatch table entry for PARSECS_TOTAL_AMOUNT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06f4;\n                var2 = PARSECS_TOTAL_AMOUNT();\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x2e87edd9) {\n                // Dispatch table entry for MINIMUM_PARTICIPATION_AMOUNT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x071f;\n                var2 = MINIMUM_PARTICIPATION_AMOUNT();\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x329f36b5) {\n                // Dispatch table entry for BONUS_TIER_2_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x074a;\n                var2 = BONUS_TIER_2_LIMIT();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var2;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x333f57b3) {\n                // Dispatch table entry for contractStarted()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0775;\n                var2 = contractStarted();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = !!var2;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x358cc6f6) {\n                // Dispatch table entry for acceptKyc(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07d0;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                acceptKyc(var2);\n                stop();\n            } else if (var0 == 0x46cc599e) {\n                // Dispatch table entry for kycStatus(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0813;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = kycStatus(var2);\n                var3 = memory[0x40:0x60];\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 > 0x03) { assert(); }\n            \n                var temp17 = var4;\n                memory[temp17:temp17 + 0x20] = var5 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x49ef026f) {\n                // Dispatch table entry for raisedFunding()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x084c;\n                var2 = raisedFunding();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x516e7be7) {\n                // Dispatch table entry for contractFailed()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0877;\n                var2 = contractFailed();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = !!var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x51819edb) {\n                // Dispatch table entry for emergencyWithdrawParsecs(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08bc;\n                var2 = msg.data[0x04:0x24];\n                emergencyWithdrawParsecs(var2);\n                stop();\n            } else if (var0 == 0x5462870d) {\n                // Dispatch table entry for multisigAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08d3;\n                var2 = multisigAddress();\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x5d94e35c) {\n                // Dispatch table entry for contractRefundStarted()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x092a;\n                var2 = contractRefundStarted();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = !!var2;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x5fc6bd17) {\n                // Dispatch table entry for pendingParsecs()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0959;\n                var2 = pendingParsecs();\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var2;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x636b7e56) {\n                // Dispatch table entry for pendingFunding()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0984;\n                var2 = pendingFunding();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var2;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x688e69d8) {\n                // Dispatch table entry for ownerPowerUpContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09af;\n                ownerPowerUpContract();\n                stop();\n            } else if (var0 == 0x7802857a) {\n                // Dispatch table entry for BONUS_TIER_8_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09c6;\n                var2 = BONUS_TIER_8_LIMIT();\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var2;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x79f90d6c) {\n                // Dispatch table entry for ownerPauseContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09f1;\n                ownerPauseContract();\n                stop();\n            } else if (var0 == 0x80a51c5e) {\n                // Dispatch table entry for ownerDeclareRefundStart()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a08;\n                ownerDeclareRefundStart();\n                stop();\n            } else if (var0 == 0x8550aaf0) {\n                // Dispatch table entry for BONUS_TIER_9_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a1f;\n                var2 = BONUS_TIER_9_LIMIT();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var2;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x8a67456a) {\n                // Dispatch table entry for contractPaused()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a4a;\n                var2 = contractPaused();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = !!var2;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a79;\n                var2 = owner();\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp38 = memory[0x40:0x60];\n                return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n            } else if (var0 == 0x8f654175) {\n                // Dispatch table entry for auditorAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ad0;\n                var2 = auditorAddress();\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0x96f76f11) {\n                // Dispatch table entry for contractFinished()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b27;\n                var2 = contractFinished();\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = !!var2;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0x9fe14580) {\n                // Dispatch table entry for BONUS_TIER_1_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b56;\n                var2 = BONUS_TIER_1_LIMIT();\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = var2;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0xa65ae513) {\n                // Dispatch table entry for ownerDeclareFailure()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b81;\n                ownerDeclareFailure();\n                stop();\n            } else if (var0 == 0xa859eb81) {\n                // Dispatch table entry for BONUS_TIER_4_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b98;\n                var2 = BONUS_TIER_4_LIMIT();\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var2;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0xb175a0d2) {\n                // Dispatch table entry for BONUS_TIER_3_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0bc3;\n                var2 = BONUS_TIER_3_LIMIT();\n                var temp47 = memory[0x40:0x60];\n                memory[temp47:temp47 + 0x20] = var2;\n                var temp48 = memory[0x40:0x60];\n                return memory[temp48:temp48 + (temp47 + 0x20) - temp48];\n            } else if (var0 == 0xb9934b9e) {\n                // Dispatch table entry for ownerResumeContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0bee;\n                ownerResumeContract();\n                stop();\n            } else if (var0 == 0xbb6d8c77) {\n                // Dispatch table entry for contractPoweredUp()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c05;\n                var2 = contractPoweredUp();\n                var temp49 = memory[0x40:0x60];\n                memory[temp49:temp49 + 0x20] = !!var2;\n                var temp50 = memory[0x40:0x60];\n                return memory[temp50:temp50 + (temp49 + 0x20) - temp50];\n            } else if (var0 == 0xbf56cc08) {\n                // Dispatch table entry for emergencyClawbackEther(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c4a;\n                var2 = msg.data[0x04:0x24];\n                emergencyClawbackEther(var2);\n                stop();\n            } else if (var0 == 0xbf664892) {\n                // Dispatch table entry for PARSECS_PER_ETHER_BASE()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c61;\n                var2 = PARSECS_PER_ETHER_BASE();\n                var temp51 = memory[0x40:0x60];\n                memory[temp51:temp51 + 0x20] = var2;\n                var temp52 = memory[0x40:0x60];\n                return memory[temp52:temp52 + (temp51 + 0x20) - temp52];\n            } else if (var0 == 0xc273b05f) {\n                // Dispatch table entry for spentParsecs()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c8c;\n                var2 = spentParsecs();\n                var temp53 = memory[0x40:0x60];\n                memory[temp53:temp53 + 0x20] = var2;\n                var temp54 = memory[0x40:0x60];\n                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n            } else if (var0 == 0xcbfa18ea) {\n                // Dispatch table entry for contractRefundFinished()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0cb7;\n                var2 = contractRefundFinished();\n                var temp55 = memory[0x40:0x60];\n                memory[temp55:temp55 + 0x20] = !!var2;\n                var temp56 = memory[0x40:0x60];\n                return memory[temp56:temp56 + (temp55 + 0x20) - temp56];\n            } else if (var0 == 0xcec36cb4) {\n                // Dispatch table entry for refundPoweredUp()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ce6;\n                var2 = refundPoweredUp();\n                var temp57 = memory[0x40:0x60];\n                memory[temp57:temp57 + 0x20] = !!var2;\n                var temp58 = memory[0x40:0x60];\n                return memory[temp58:temp58 + (temp57 + 0x20) - temp58];\n            } else if (var0 == 0xd6a5e546) {\n                // Dispatch table entry for emergencyRefundContract()\n                var1 = 0x0d08;\n                emergencyRefundContract();\n                stop();\n            } else if (var0 == 0xd6ca58ce) {\n                // Dispatch table entry for 0xd6ca58ce (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0d4b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = func_27C5(var2);\n                var temp59 = memory[0x40:0x60];\n                memory[temp59:temp59 + 0x20] = var2;\n                var temp60 = memory[0x40:0x60];\n                return memory[temp60:temp60 + (temp59 + 0x20) - temp60];\n            } else if (var0 == 0xd7805ece) {\n                // Dispatch table entry for contributionOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0da2;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = contributionOf(var2);\n                var temp61 = memory[0x40:0x60];\n                memory[temp61:temp61 + 0x20] = var2;\n                var temp62 = memory[0x40:0x60];\n                return memory[temp62:temp62 + (temp61 + 0x20) - temp62];\n            } else if (var0 == 0xdcea3170) {\n                // Dispatch table entry for 0xdcea3170 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0df9;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = func_27F5(var2);\n                var temp63 = memory[0x40:0x60];\n                memory[temp63:temp63 + 0x20] = var2;\n                var temp64 = memory[0x40:0x60];\n                return memory[temp64:temp64 + (temp63 + 0x20) - temp64];\n            } else if (var0 == 0xdda72292) {\n                // Dispatch table entry for BONUS_TIER_6_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0e24;\n                var2 = BONUS_TIER_6_LIMIT();\n                var temp65 = memory[0x40:0x60];\n                memory[temp65:temp65 + 0x20] = var2;\n                var temp66 = memory[0x40:0x60];\n                return memory[temp66:temp66 + (temp65 + 0x20) - temp66];\n            } else if (var0 == 0xe85ac5b0) {\n                // Dispatch table entry for ownerSetAuditor(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0e7b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                ownerSetAuditor(var2);\n                stop();\n            } else if (var0 == 0xef8c1d86) {\n                // Dispatch table entry for ownerWithdrawParsecs(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ea8;\n                var2 = msg.data[0x04:0x24];\n                ownerWithdrawParsecs(var2);\n                stop();\n            } else if (var0 == 0xf2263e12) {\n                // Dispatch table entry for refundedFunding()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ebf;\n                var2 = refundedFunding();\n                var temp67 = memory[0x40:0x60];\n                memory[temp67:temp67 + 0x20] = var2;\n                var temp68 = memory[0x40:0x60];\n                return memory[temp68:temp68 + (temp67 + 0x20) - temp68];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0f16;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_0266; }\n        }\n    }\n    \n    function func_0F18(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var1 = 0x03e8;\n        var var4 = 0x0f3d;\n        var var5 = 0x0f2e;\n        var5 = func_2C4D();\n        var4 = func_0F2E(var1, var5);\n        var2 = var4;\n        var4 = 0x0f58;\n        var5 = arg0;\n        var var6 = 0x012eae09c800;\n        var4 = func_2D80(var5, var6);\n        var temp0 = var4;\n        var3 = temp0;\n        var4 = 0x0f6d;\n        var5 = var3;\n        var6 = var2;\n        var4 = func_2D80(var5, var6);\n        var temp1 = var4;\n        var3 = temp1;\n        var4 = 0x0f82;\n        var5 = var3;\n        var6 = var1;\n        var4 = func_2DBB(var5, var6);\n        var temp2 = var4;\n        var3 = temp2;\n        var4 = 0x0f9f;\n        var5 = var3;\n        var6 = 0x0de0b6b3a7640000;\n        return func_2DBB(var5, var6);\n    }\n    \n    function func_0F2E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_2D62(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0FA9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0FC2(var arg0, var arg1, var arg2) {\n        var var0 = 0x1014;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg1;\n        var0 = func_2D62(var1, var2);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x10a9;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_2D62(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x1101;\n        var1 = storage[0x05];\n        var2 = arg1;\n        var0 = func_2D62(var1, var2);\n        storage[0x05] = var0;\n        var0 = 0x111c;\n        var1 = storage[0x08];\n        var2 = arg2;\n        var0 = func_2D62(var1, var2);\n        storage[0x08] = var0;\n    }\n    \n    function func_1127(var arg0, var arg1, var arg2) {\n        var var0 = 0x1179;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x09;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg1;\n        var0 = func_2D62(var1, var2);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x09;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x120e;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0a;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_2D62(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x1266;\n        var1 = storage[0x04];\n        var2 = arg1;\n        var0 = func_2D62(var1, var2);\n        storage[0x04] = var0;\n        var0 = 0x1281;\n        var1 = storage[0x07];\n        var2 = arg2;\n        var0 = func_2D62(var1, var2);\n        storage[0x07] = var0;\n        var temp1 = arg1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = block.timestamp;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xd352f32b90e5c5fd4a396f4f875a55c3995f9c4e3b809bdd44688c7d2bb6338f, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var temp6 = memory[0x40:0x60];\n        var temp7;\n        temp7, memory[temp6:temp6 + 0x00] = address(storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp6:temp6 + memory[0x40:0x60] - temp6]);\n        var0 = !temp7;\n    \n        if (!var0) {\n            var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = 0xa9059cbb;\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp9 = temp8 + 0x04;\n            memory[temp9:temp9 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp10 = temp9 + 0x20;\n            memory[temp10:temp10 + 0x20] = arg2;\n            var2 = temp10 + 0x20;\n            var var3 = 0x00;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            var temp11;\n            temp11, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n            var3 = !temp11;\n        \n            if (!var3) { return; }\n        \n            var temp12 = returndata.length;\n            memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp13 = returndata.length;\n            memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function participantClawbackEther(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (!(storage[0x03] / 0x0100 ** 0x1a & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x1b & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var0 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0d;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = 0x1503;\n        var var4 = var0;\n        var var5 = var1;\n        var3 = func_0FA9(var4, var5);\n        var2 = var3;\n    \n        if (var2 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > var2) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x1545;\n        var4 = var1;\n        var5 = arg0;\n        var3 = func_2D62(var4, var5);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0d;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var3 = 0x159d;\n        var4 = storage[0x06];\n        var5 = arg0;\n        var3 = func_2D62(var4, var5);\n        storage[0x06] = var3;\n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n        var3 = !temp3;\n    \n        if (!var3) { return; }\n    \n        var temp4 = returndata.length;\n        memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function ownerStartContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x16 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x16)) | 0x0100 ** 0x16;\n    }\n    \n    function refundOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function BONUS_TIER_5_LIMIT() returns (var r0) { return 0xf2c0bbda8a07380000; }\n    \n    function BONUS_TIER_7_LIMIT() returns (var r0) { return 0x0166464cb4046ca40000; }\n    \n    function func_16D2(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function ownerFinishContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x16 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x17 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x17)) | 0x0100 ** 0x17;\n    }\n    \n    function declineKyc(var arg0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_184E:\n            var1 = 0x03;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0e;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = storage[var2] & ~0xff;\n            var var4 = 0x01;\n            var var5 = var1;\n        \n            if (var5 > 0x03) { assert(); }\n        \n            storage[var2] = var5 * var4 | var3;\n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = var0;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = block.timestamp;\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xd1d09a184b22a49d90d6bfa621f5de852a0aecf52ef2365064259b47553da487, stack[-7] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0b;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var0 <= 0x00) {\n            label_19A1:\n                return;\n            } else {\n                var1 = 0x1959;\n                var2 = arg0;\n                func_2DD6(var2);\n                var temp4 = var0;\n                var temp5 = memory[0x40:0x60];\n                var temp6;\n                temp6, memory[temp5:temp5 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp5:temp5 + memory[0x40:0x60] - temp5]);\n                var1 = !temp6;\n            \n                if (!var1) { goto label_19A1; }\n            \n                var temp7 = returndata.length;\n                memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else if (msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_184E; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function ownerDeclareRefundFinish() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x19 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x1a & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x1b & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x1b)) | 0x0100 ** 0x1b;\n    }\n    \n    function PARSECS_TOTAL_AMOUNT() returns (var r0) { return 0x3936608e242080; }\n    \n    function MINIMUM_PARTICIPATION_AMOUNT() returns (var r0) { return 0x016345785d8a0000; }\n    \n    function BONUS_TIER_2_LIMIT() returns (var r0) { return 0x4e39a5d6a888ac0000; }\n    \n    function contractStarted() returns (var r0) { return storage[0x03] / 0x0100 ** 0x16 & 0xff; }\n    \n    function acceptKyc(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_1B5C:\n            var2 = 0x02;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0e;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = storage[var3] & ~0xff;\n            var var5 = 0x01;\n            var var6 = var2;\n        \n            if (var6 > 0x03) { assert(); }\n        \n            storage[var3] = var6 * var5 | var4;\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0b;\n            var temp1 = storage[keccak256(memory[0x00:0x40])];\n            var0 = temp1;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0c;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var0;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = block.timestamp;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x2f34592345f4c83c7365e809c535dc13b3d7610ac2fc123f5ec05f646a9e612a, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var2 = var0 > 0x00;\n        \n            if (var2) {\n                if (!var2) {\n                label_1CC0:\n                    return;\n                } else {\n                label_1CAC:\n                    var2 = 0x1cb4;\n                    var3 = arg0;\n                    func_2DD6(var3);\n                    var2 = 0x1cbf;\n                    var3 = arg0;\n                    var4 = var0;\n                    var5 = var1;\n                    func_1127(var3, var4, var5);\n                    goto label_1CC0;\n                }\n            } else if (var1 <= 0x00) { goto label_1CC0; }\n            else { goto label_1CAC; }\n        } else if (msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1B5C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function kycStatus(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0e;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function raisedFunding() returns (var r0) { return storage[0x04]; }\n    \n    function contractFailed() returns (var r0) { return storage[0x03] / 0x0100 ** 0x19 & 0xff; }\n    \n    function emergencyWithdrawParsecs(var arg0) {\n        var var0 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_1DB1:\n        \n            if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x70a08231;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = address(this);\n            var var2 = temp1 + 0x20;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n            var3 = !temp2;\n        \n            if (!var3) {\n                var0 = memory[0x40:0x60];\n                var1 = returndata.length;\n            \n                if (var1 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (arg0 > memory[var0:var0 + 0x20]) { revert(memory[0x00:0x00]); }\n            \n                var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = 0xa9059cbb;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp4 = temp3 + 0x04;\n                memory[temp4:temp4 + 0x20] = msg.sender;\n                var temp5 = temp4 + 0x20;\n                memory[temp5:temp5 + 0x20] = arg0;\n                var2 = temp5 + 0x20;\n                var3 = 0x00;\n                var4 = memory[0x40:0x60];\n                var5 = var2 - var4;\n                var6 = var4;\n                var7 = 0x00;\n                var8 = var0;\n                var9 = !address(var8).code.length;\n            \n                if (var9) { revert(memory[0x00:0x00]); }\n            \n                var temp6;\n                temp6, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n                var3 = !temp6;\n            \n                if (!var3) { return; }\n            \n                var temp7 = returndata.length;\n                memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n                var temp8 = returndata.length;\n                memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else if (msg.sender == storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1DB1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function multisigAddress() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function contractRefundStarted() returns (var r0) { return storage[0x03] / 0x0100 ** 0x1a & 0xff; }\n    \n    function pendingParsecs() returns (var r0) { return storage[0x08]; }\n    \n    function pendingFunding() returns (var r0) { return storage[0x05]; }\n    \n    function ownerPowerUpContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x3936608e242080;\n        var var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x70a08231;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = address(this);\n        var var3 = temp1 + 0x20;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = 0x00;\n        var var9 = var1;\n        var var10 = !address(var9).code.length;\n    \n        if (var10) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n        var4 = !temp2;\n    \n        if (!var4) {\n            var1 = memory[0x40:0x60];\n            var2 = returndata.length;\n        \n            if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (memory[var1:var1 + 0x20] < var0) { revert(memory[0x00:0x00]); }\n        \n            storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x14)) | 0x0100 ** 0x14;\n            return;\n        } else {\n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function BONUS_TIER_8_LIMIT() returns (var r0) { return 0x01a350b04e36ae7c0000; }\n    \n    function ownerPauseContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x16 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x17 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x18 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x18)) | 0x0100 ** 0x18;\n    }\n    \n    function ownerDeclareRefundStart() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x19 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x1a & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] != 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (address(this).balance < storage[0x04]) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x1a)) | 0x0100 ** 0x1a;\n    }\n    \n    function BONUS_TIER_9_LIMIT() returns (var r0) { return 0x01f3466cfb5423a80000; }\n    \n    function contractPaused() returns (var r0) { return storage[0x03] / 0x0100 ** 0x18 & 0xff; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function auditorAddress() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function contractFinished() returns (var r0) { return storage[0x03] / 0x0100 ** 0x17 & 0xff; }\n    \n    function BONUS_TIER_1_LIMIT() returns (var r0) { return 0x26c29e47c4844c0000; }\n    \n    function ownerDeclareFailure() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x19 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x19)) | 0x0100 ** 0x19;\n    }\n    \n    function BONUS_TIER_4_LIMIT() returns (var r0) { return 0xbacedb564f3c180000; }\n    \n    function BONUS_TIER_3_LIMIT() returns (var r0) { return 0x83f289181d84c80000; }\n    \n    function ownerResumeContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x18 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x18)) | 0x00;\n    }\n    \n    function contractPoweredUp() returns (var r0) { return storage[0x03] / 0x0100 ** 0x14 & 0xff; }\n    \n    function emergencyClawbackEther(var arg0) {\n        var var0 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_25E0:\n        \n            if (!(storage[0x03] / 0x0100 ** 0x19 & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (!(storage[0x03] / 0x0100 ** 0x1a & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (!(storage[0x03] / 0x0100 ** 0x1b & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 > address(this).balance) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            var0 = !temp2;\n        \n            if (!var0) { return; }\n        \n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else if (msg.sender == storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_25E0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function PARSECS_PER_ETHER_BASE() returns (var r0) { return 0x012eae09c800; }\n    \n    function spentParsecs() returns (var r0) { return storage[0x07]; }\n    \n    function contractRefundFinished() returns (var r0) { return storage[0x03] / 0x0100 ** 0x1b & 0xff; }\n    \n    function refundPoweredUp() returns (var r0) { return storage[0x03] / 0x0100 ** 0x15 & 0xff; }\n    \n    function emergencyRefundContract() {\n        var var0 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_2799:\n        \n            if (!(storage[0x03] / 0x0100 ** 0x19 & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value > 0x00) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (msg.sender == storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_2799; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_27C5(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function contributionOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_27F5(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function BONUS_TIER_6_LIMIT() returns (var r0) { return 0x012be3ec123534f00000; }\n    \n    function ownerSetAuditor(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function ownerWithdrawParsecs(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x17 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0x70a08231;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = address(this);\n        var var4 = temp1 + 0x20;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n        var var11 = !address(var10).code.length;\n    \n        if (var11) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n        var5 = !temp2;\n    \n        if (!var5) {\n            var2 = memory[0x40:0x60];\n            var3 = returndata.length;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = memory[var2:var2 + 0x20];\n            var0 = temp3;\n            var2 = 0x2a68;\n            var3 = var0;\n            var4 = storage[0x08];\n            var2 = func_0FA9(var3, var4);\n            var1 = var2;\n        \n            if (var1 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (var1 > var0) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 > var1) { revert(memory[0x00:0x00]); }\n        \n            var2 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0xa9059cbb;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp5 = temp4 + 0x04;\n            memory[temp5:temp5 + 0x20] = storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = arg0;\n            var4 = temp6 + 0x20;\n            var5 = 0x00;\n            var6 = memory[0x40:0x60];\n            var7 = var4 - var6;\n            var8 = var6;\n            var9 = 0x00;\n            var10 = var2;\n            var11 = !address(var10).code.length;\n        \n            if (var11) { revert(memory[0x00:0x00]); }\n        \n            var temp7;\n            temp7, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n            var5 = !temp7;\n        \n            if (!var5) { return; }\n        \n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp9 = returndata.length;\n            memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function refundedFunding() returns (var r0) { return storage[0x06]; }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_2C4D() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x2c67;\n        var var3 = storage[0x04];\n        var var4 = storage[0x05];\n        var2 = func_2D62(var3, var4);\n        var1 = var2;\n    \n        if (var1 < 0x26c29e47c4844c0000) {\n            var0 = 0x012c;\n            goto label_2D5E;\n        } else if (var1 < 0x4e39a5d6a888ac0000) {\n            var0 = 0x0113;\n            goto label_2D5E;\n        } else if (var1 < 0x83f289181d84c80000) {\n            var0 = 0xfa;\n            goto label_2D5E;\n        } else if (var1 < 0xbacedb564f3c180000) {\n            var0 = 0xe1;\n            goto label_2D5E;\n        } else if (var1 < 0xf2c0bbda8a07380000) {\n            var0 = 0xc8;\n            goto label_2D5E;\n        } else if (var1 < 0x012be3ec123534f00000) {\n            var0 = 0xaf;\n            goto label_2D5E;\n        } else if (var1 < 0x0166464cb4046ca40000) {\n            var0 = 0x96;\n            goto label_2D5E;\n        } else if (var1 < 0x01a350b04e36ae7c0000) {\n            var0 = 0x64;\n            goto label_2D5E;\n        } else if (var1 >= 0x01f3466cfb5423a80000) {\n            var0 = 0x00;\n        \n        label_2D5E:\n            return var0;\n        } else {\n            var0 = 0x32;\n            goto label_2D5E;\n        }\n    }\n    \n    function func_2D62(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_2D80(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 != 0x00) {\n            var temp0 = arg0;\n            var1 = temp0 * arg1;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_2DB4:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_2DB4;\n        }\n    }\n    \n    function func_2DBB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_2DD6(var arg0) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = temp1;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = 0x2eaf;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = var0;\n        var2 = func_0FA9(var3, var4);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x2f44;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var4 = var1;\n        var2 = func_0FA9(var3, var4);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x2f9c;\n        var3 = storage[0x05];\n        var4 = var0;\n        var2 = func_0FA9(var3, var4);\n        storage[0x05] = var2;\n        var2 = 0x2fb7;\n        var3 = storage[0x08];\n        var4 = var1;\n        var2 = func_0FA9(var3, var4);\n        storage[0x08] = var2;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0266:\n            var var0 = 0x00;\n            var var1 = var0;\n        \n            if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (!(storage[0x03] / 0x0100 ** 0x16 & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x03] / 0x0100 ** 0x17 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x03] / 0x0100 ** 0x18 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x03] / 0x0100 ** 0x19 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value < 0x016345785d8a0000) { revert(memory[0x00:0x00]); }\n        \n            var var2 = 0x0313;\n            var var3 = msg.value;\n            var2 = func_0F18(var3);\n            var0 = var2;\n            var2 = 0x0331;\n            var3 = 0x3936608e242080;\n            var var4 = storage[0x07];\n            var2 = func_0FA9(var3, var4);\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0348;\n            var3 = var1;\n            var4 = storage[0x08];\n            var2 = func_0FA9(var3, var4);\n            var1 = var2;\n        \n            if (var0 > var1) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x00;\n        \n            if (var2 > 0x03) { assert(); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0e;\n            var3 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n        \n            if (var3 > 0x03) { assert(); }\n        \n            if (var3 != var2) {\n            label_0426:\n                var2 = 0x01;\n            \n                if (var2 > 0x03) { assert(); }\n            \n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n                var3 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n            \n                if (var3 > 0x03) { assert(); }\n            \n                if (var3 != var2) {\n                    var2 = 0x02;\n                \n                    if (var2 > 0x03) { assert(); }\n                \n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x0e;\n                    var3 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n                \n                    if (var3 > 0x03) { assert(); }\n                \n                    if (var3 != var2) { revert(memory[0x00:0x00]); }\n                \n                    var2 = 0x0517;\n                    var3 = msg.sender;\n                    var4 = msg.value;\n                    var var5 = var0;\n                    func_1127(var3, var4, var5);\n                    stop();\n                } else {\n                    var2 = 0x049c;\n                    var3 = msg.sender;\n                    var4 = msg.value;\n                    var5 = var0;\n                    func_0FC2(var3, var4, var5);\n                    stop();\n                }\n            } else {\n                var2 = 0x01;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n                var3 = keccak256(memory[0x00:0x40]);\n                var5 = 0x01;\n                var4 = ~(var5 * 0xff) & storage[var3];\n                var var6 = var2;\n            \n                if (var6 > 0x03) { assert(); }\n            \n                storage[var3] = var6 * var5 | var4;\n                goto label_0426;\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x3de230) {\n                // Dispatch table entry for participantClawbackEther(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0551;\n                var2 = msg.data[0x04:0x24];\n                participantClawbackEther(var2);\n                stop();\n            } else if (var0 == 0x06d832a3) {\n                // Dispatch table entry for ownerStartContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0568;\n                ownerStartContract();\n                stop();\n            } else if (var0 == 0x07738ad2) {\n                // Dispatch table entry for refundOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ab;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = refundOf(var2);\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = var2;\n                var temp2 = memory[0x40:0x60];\n                return memory[temp2:temp2 + (temp1 + 0x20) - temp2];\n            } else if (var0 == 0x10711911) {\n                // Dispatch table entry for BONUS_TIER_5_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d6;\n                var2 = BONUS_TIER_5_LIMIT();\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = var2;\n                var temp4 = memory[0x40:0x60];\n                return memory[temp4:temp4 + (temp3 + 0x20) - temp4];\n            } else if (var0 == 0x116a6f6c) {\n                // Dispatch table entry for BONUS_TIER_7_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0601;\n                var2 = BONUS_TIER_7_LIMIT();\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var2;\n                var temp6 = memory[0x40:0x60];\n                return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n            } else if (var0 == 0x18452bb1) {\n                // Dispatch table entry for 0x18452bb1 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0658;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = func_16D2(var2);\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = var2;\n                var temp8 = memory[0x40:0x60];\n                return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n            } else if (var0 == 0x1b4fa639) {\n                // Dispatch table entry for ownerFinishContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0683;\n                ownerFinishContract();\n                stop();\n            } else if (var0 == 0x2562b427) {\n                // Dispatch table entry for declineKyc(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06c6;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                declineKyc(var2);\n                stop();\n            } else if (var0 == 0x2603f70c) {\n                // Dispatch table entry for ownerDeclareRefundFinish()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06dd;\n                ownerDeclareRefundFinish();\n                stop();\n            } else if (var0 == 0x295d4756) {\n                // Dispatch table entry for PARSECS_TOTAL_AMOUNT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06f4;\n                var2 = PARSECS_TOTAL_AMOUNT();\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x2e87edd9) {\n                // Dispatch table entry for MINIMUM_PARTICIPATION_AMOUNT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x071f;\n                var2 = MINIMUM_PARTICIPATION_AMOUNT();\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x329f36b5) {\n                // Dispatch table entry for BONUS_TIER_2_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x074a;\n                var2 = BONUS_TIER_2_LIMIT();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var2;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x333f57b3) {\n                // Dispatch table entry for contractStarted()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0775;\n                var2 = contractStarted();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = !!var2;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x358cc6f6) {\n                // Dispatch table entry for acceptKyc(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07d0;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                acceptKyc(var2);\n                stop();\n            } else if (var0 == 0x46cc599e) {\n                // Dispatch table entry for kycStatus(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0813;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = kycStatus(var2);\n                var3 = memory[0x40:0x60];\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 > 0x03) { assert(); }\n            \n                var temp17 = var4;\n                memory[temp17:temp17 + 0x20] = var5 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x49ef026f) {\n                // Dispatch table entry for raisedFunding()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x084c;\n                var2 = raisedFunding();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x516e7be7) {\n                // Dispatch table entry for contractFailed()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0877;\n                var2 = contractFailed();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = !!var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x51819edb) {\n                // Dispatch table entry for emergencyWithdrawParsecs(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08bc;\n                var2 = msg.data[0x04:0x24];\n                emergencyWithdrawParsecs(var2);\n                stop();\n            } else if (var0 == 0x5462870d) {\n                // Dispatch table entry for multisigAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08d3;\n                var2 = multisigAddress();\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x5d94e35c) {\n                // Dispatch table entry for contractRefundStarted()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x092a;\n                var2 = contractRefundStarted();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = !!var2;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x5fc6bd17) {\n                // Dispatch table entry for pendingParsecs()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0959;\n                var2 = pendingParsecs();\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var2;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x636b7e56) {\n                // Dispatch table entry for pendingFunding()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0984;\n                var2 = pendingFunding();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var2;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x688e69d8) {\n                // Dispatch table entry for ownerPowerUpContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09af;\n                ownerPowerUpContract();\n                stop();\n            } else if (var0 == 0x7802857a) {\n                // Dispatch table entry for BONUS_TIER_8_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09c6;\n                var2 = BONUS_TIER_8_LIMIT();\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var2;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x79f90d6c) {\n                // Dispatch table entry for ownerPauseContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09f1;\n                ownerPauseContract();\n                stop();\n            } else if (var0 == 0x80a51c5e) {\n                // Dispatch table entry for ownerDeclareRefundStart()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a08;\n                ownerDeclareRefundStart();\n                stop();\n            } else if (var0 == 0x8550aaf0) {\n                // Dispatch table entry for BONUS_TIER_9_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a1f;\n                var2 = BONUS_TIER_9_LIMIT();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var2;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x8a67456a) {\n                // Dispatch table entry for contractPaused()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a4a;\n                var2 = contractPaused();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = !!var2;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a79;\n                var2 = owner();\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp38 = memory[0x40:0x60];\n                return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n            } else if (var0 == 0x8f654175) {\n                // Dispatch table entry for auditorAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ad0;\n                var2 = auditorAddress();\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0x96f76f11) {\n                // Dispatch table entry for contractFinished()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b27;\n                var2 = contractFinished();\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = !!var2;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0x9fe14580) {\n                // Dispatch table entry for BONUS_TIER_1_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b56;\n                var2 = BONUS_TIER_1_LIMIT();\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = var2;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0xa65ae513) {\n                // Dispatch table entry for ownerDeclareFailure()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b81;\n                ownerDeclareFailure();\n                stop();\n            } else if (var0 == 0xa859eb81) {\n                // Dispatch table entry for BONUS_TIER_4_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b98;\n                var2 = BONUS_TIER_4_LIMIT();\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var2;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0xb175a0d2) {\n                // Dispatch table entry for BONUS_TIER_3_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0bc3;\n                var2 = BONUS_TIER_3_LIMIT();\n                var temp47 = memory[0x40:0x60];\n                memory[temp47:temp47 + 0x20] = var2;\n                var temp48 = memory[0x40:0x60];\n                return memory[temp48:temp48 + (temp47 + 0x20) - temp48];\n            } else if (var0 == 0xb9934b9e) {\n                // Dispatch table entry for ownerResumeContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0bee;\n                ownerResumeContract();\n                stop();\n            } else if (var0 == 0xbb6d8c77) {\n                // Dispatch table entry for contractPoweredUp()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c05;\n                var2 = contractPoweredUp();\n                var temp49 = memory[0x40:0x60];\n                memory[temp49:temp49 + 0x20] = !!var2;\n                var temp50 = memory[0x40:0x60];\n                return memory[temp50:temp50 + (temp49 + 0x20) - temp50];\n            } else if (var0 == 0xbf56cc08) {\n                // Dispatch table entry for emergencyClawbackEther(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c4a;\n                var2 = msg.data[0x04:0x24];\n                emergencyClawbackEther(var2);\n                stop();\n            } else if (var0 == 0xbf664892) {\n                // Dispatch table entry for PARSECS_PER_ETHER_BASE()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c61;\n                var2 = PARSECS_PER_ETHER_BASE();\n                var temp51 = memory[0x40:0x60];\n                memory[temp51:temp51 + 0x20] = var2;\n                var temp52 = memory[0x40:0x60];\n                return memory[temp52:temp52 + (temp51 + 0x20) - temp52];\n            } else if (var0 == 0xc273b05f) {\n                // Dispatch table entry for spentParsecs()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c8c;\n                var2 = spentParsecs();\n                var temp53 = memory[0x40:0x60];\n                memory[temp53:temp53 + 0x20] = var2;\n                var temp54 = memory[0x40:0x60];\n                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n            } else if (var0 == 0xcbfa18ea) {\n                // Dispatch table entry for contractRefundFinished()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0cb7;\n                var2 = contractRefundFinished();\n                var temp55 = memory[0x40:0x60];\n                memory[temp55:temp55 + 0x20] = !!var2;\n                var temp56 = memory[0x40:0x60];\n                return memory[temp56:temp56 + (temp55 + 0x20) - temp56];\n            } else if (var0 == 0xcec36cb4) {\n                // Dispatch table entry for refundPoweredUp()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ce6;\n                var2 = refundPoweredUp();\n                var temp57 = memory[0x40:0x60];\n                memory[temp57:temp57 + 0x20] = !!var2;\n                var temp58 = memory[0x40:0x60];\n                return memory[temp58:temp58 + (temp57 + 0x20) - temp58];\n            } else if (var0 == 0xd6a5e546) {\n                // Dispatch table entry for emergencyRefundContract()\n                var1 = 0x0d08;\n                emergencyRefundContract();\n                stop();\n            } else if (var0 == 0xd6ca58ce) {\n                // Dispatch table entry for 0xd6ca58ce (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0d4b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = func_27C5(var2);\n                var temp59 = memory[0x40:0x60];\n                memory[temp59:temp59 + 0x20] = var2;\n                var temp60 = memory[0x40:0x60];\n                return memory[temp60:temp60 + (temp59 + 0x20) - temp60];\n            } else if (var0 == 0xd7805ece) {\n                // Dispatch table entry for contributionOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0da2;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = contributionOf(var2);\n                var temp61 = memory[0x40:0x60];\n                memory[temp61:temp61 + 0x20] = var2;\n                var temp62 = memory[0x40:0x60];\n                return memory[temp62:temp62 + (temp61 + 0x20) - temp62];\n            } else if (var0 == 0xdcea3170) {\n                // Dispatch table entry for 0xdcea3170 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0df9;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = func_27F5(var2);\n                var temp63 = memory[0x40:0x60];\n                memory[temp63:temp63 + 0x20] = var2;\n                var temp64 = memory[0x40:0x60];\n                return memory[temp64:temp64 + (temp63 + 0x20) - temp64];\n            } else if (var0 == 0xdda72292) {\n                // Dispatch table entry for BONUS_TIER_6_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0e24;\n                var2 = BONUS_TIER_6_LIMIT();\n                var temp65 = memory[0x40:0x60];\n                memory[temp65:temp65 + 0x20] = var2;\n                var temp66 = memory[0x40:0x60];\n                return memory[temp66:temp66 + (temp65 + 0x20) - temp66];\n            } else if (var0 == 0xe85ac5b0) {\n                // Dispatch table entry for ownerSetAuditor(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0e7b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                ownerSetAuditor(var2);\n                stop();\n            } else if (var0 == 0xef8c1d86) {\n                // Dispatch table entry for ownerWithdrawParsecs(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ea8;\n                var2 = msg.data[0x04:0x24];\n                ownerWithdrawParsecs(var2);\n                stop();\n            } else if (var0 == 0xf2263e12) {\n                // Dispatch table entry for refundedFunding()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ebf;\n                var2 = refundedFunding();\n                var temp67 = memory[0x40:0x60];\n                memory[temp67:temp67 + 0x20] = var2;\n                var temp68 = memory[0x40:0x60];\n                return memory[temp68:temp68 + (temp67 + 0x20) - temp68];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0f16;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_0266; }\n        }\n    }\n    \n    function func_0F18(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var1 = 0x03e8;\n        var var4 = 0x0f3d;\n        var var5 = 0x0f2e;\n        var5 = func_2C4D();\n        var4 = func_0F2E(var1, var5);\n        var2 = var4;\n        var4 = 0x0f58;\n        var5 = arg0;\n        var var6 = 0x012eae09c800;\n        var4 = func_2D80(var5, var6);\n        var temp0 = var4;\n        var3 = temp0;\n        var4 = 0x0f6d;\n        var5 = var3;\n        var6 = var2;\n        var4 = func_2D80(var5, var6);\n        var temp1 = var4;\n        var3 = temp1;\n        var4 = 0x0f82;\n        var5 = var3;\n        var6 = var1;\n        var4 = func_2DBB(var5, var6);\n        var temp2 = var4;\n        var3 = temp2;\n        var4 = 0x0f9f;\n        var5 = var3;\n        var6 = 0x0de0b6b3a7640000;\n        return func_2DBB(var5, var6);\n    }\n    \n    function func_0F2E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_2D62(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0FA9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0FC2(var arg0, var arg1, var arg2) {\n        var var0 = 0x1014;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg1;\n        var0 = func_2D62(var1, var2);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x10a9;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_2D62(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x1101;\n        var1 = storage[0x05];\n        var2 = arg1;\n        var0 = func_2D62(var1, var2);\n        storage[0x05] = var0;\n        var0 = 0x111c;\n        var1 = storage[0x08];\n        var2 = arg2;\n        var0 = func_2D62(var1, var2);\n        storage[0x08] = var0;\n    }\n    \n    function func_1127(var arg0, var arg1, var arg2) {\n        var var0 = 0x1179;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x09;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg1;\n        var0 = func_2D62(var1, var2);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x09;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x120e;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0a;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_2D62(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x1266;\n        var1 = storage[0x04];\n        var2 = arg1;\n        var0 = func_2D62(var1, var2);\n        storage[0x04] = var0;\n        var0 = 0x1281;\n        var1 = storage[0x07];\n        var2 = arg2;\n        var0 = func_2D62(var1, var2);\n        storage[0x07] = var0;\n        var temp1 = arg1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = block.timestamp;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xd352f32b90e5c5fd4a396f4f875a55c3995f9c4e3b809bdd44688c7d2bb6338f, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var temp6 = memory[0x40:0x60];\n        var temp7;\n        temp7, memory[temp6:temp6 + 0x00] = address(storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp6:temp6 + memory[0x40:0x60] - temp6]);\n        var0 = !temp7;\n    \n        if (!var0) {\n            var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = 0xa9059cbb;\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp9 = temp8 + 0x04;\n            memory[temp9:temp9 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp10 = temp9 + 0x20;\n            memory[temp10:temp10 + 0x20] = arg2;\n            var2 = temp10 + 0x20;\n            var var3 = 0x00;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            var temp11;\n            temp11, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n            var3 = !temp11;\n        \n            if (!var3) { return; }\n        \n            var temp12 = returndata.length;\n            memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp13 = returndata.length;\n            memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function participantClawbackEther(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (!(storage[0x03] / 0x0100 ** 0x1a & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x1b & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var0 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0d;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = 0x1503;\n        var var4 = var0;\n        var var5 = var1;\n        var3 = func_0FA9(var4, var5);\n        var2 = var3;\n    \n        if (var2 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > var2) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x1545;\n        var4 = var1;\n        var5 = arg0;\n        var3 = func_2D62(var4, var5);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0d;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var3 = 0x159d;\n        var4 = storage[0x06];\n        var5 = arg0;\n        var3 = func_2D62(var4, var5);\n        storage[0x06] = var3;\n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n        var3 = !temp3;\n    \n        if (!var3) { return; }\n    \n        var temp4 = returndata.length;\n        memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function ownerStartContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x16 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x16)) | 0x0100 ** 0x16;\n    }\n    \n    function refundOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function BONUS_TIER_5_LIMIT() returns (var r0) { return 0xf2c0bbda8a07380000; }\n    \n    function BONUS_TIER_7_LIMIT() returns (var r0) { return 0x0166464cb4046ca40000; }\n    \n    function func_16D2(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function ownerFinishContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x16 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x17 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x17)) | 0x0100 ** 0x17;\n    }\n    \n    function declineKyc(var arg0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_184E:\n            var1 = 0x03;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0e;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = storage[var2] & ~0xff;\n            var var4 = 0x01;\n            var var5 = var1;\n        \n            if (var5 > 0x03) { assert(); }\n        \n            storage[var2] = var5 * var4 | var3;\n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = var0;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = block.timestamp;\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xd1d09a184b22a49d90d6bfa621f5de852a0aecf52ef2365064259b47553da487, stack[-7] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0b;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var0 <= 0x00) {\n            label_19A1:\n                return;\n            } else {\n                var1 = 0x1959;\n                var2 = arg0;\n                func_2DD6(var2);\n                var temp4 = var0;\n                var temp5 = memory[0x40:0x60];\n                var temp6;\n                temp6, memory[temp5:temp5 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp5:temp5 + memory[0x40:0x60] - temp5]);\n                var1 = !temp6;\n            \n                if (!var1) { goto label_19A1; }\n            \n                var temp7 = returndata.length;\n                memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else if (msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_184E; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function ownerDeclareRefundFinish() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x19 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x1a & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x1b & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x1b)) | 0x0100 ** 0x1b;\n    }\n    \n    function PARSECS_TOTAL_AMOUNT() returns (var r0) { return 0x3936608e242080; }\n    \n    function MINIMUM_PARTICIPATION_AMOUNT() returns (var r0) { return 0x016345785d8a0000; }\n    \n    function BONUS_TIER_2_LIMIT() returns (var r0) { return 0x4e39a5d6a888ac0000; }\n    \n    function contractStarted() returns (var r0) { return storage[0x03] / 0x0100 ** 0x16 & 0xff; }\n    \n    function acceptKyc(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_1B5C:\n            var2 = 0x02;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0e;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = storage[var3] & ~0xff;\n            var var5 = 0x01;\n            var var6 = var2;\n        \n            if (var6 > 0x03) { assert(); }\n        \n            storage[var3] = var6 * var5 | var4;\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0b;\n            var temp1 = storage[keccak256(memory[0x00:0x40])];\n            var0 = temp1;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0c;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var0;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = block.timestamp;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x2f34592345f4c83c7365e809c535dc13b3d7610ac2fc123f5ec05f646a9e612a, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var2 = var0 > 0x00;\n        \n            if (var2) {\n                if (!var2) {\n                label_1CC0:\n                    return;\n                } else {\n                label_1CAC:\n                    var2 = 0x1cb4;\n                    var3 = arg0;\n                    func_2DD6(var3);\n                    var2 = 0x1cbf;\n                    var3 = arg0;\n                    var4 = var0;\n                    var5 = var1;\n                    func_1127(var3, var4, var5);\n                    goto label_1CC0;\n                }\n            } else if (var1 <= 0x00) { goto label_1CC0; }\n            else { goto label_1CAC; }\n        } else if (msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1B5C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function kycStatus(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0e;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function raisedFunding() returns (var r0) { return storage[0x04]; }\n    \n    function contractFailed() returns (var r0) { return storage[0x03] / 0x0100 ** 0x19 & 0xff; }\n    \n    function emergencyWithdrawParsecs(var arg0) {\n        var var0 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_1DB1:\n        \n            if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x70a08231;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = address(this);\n            var var2 = temp1 + 0x20;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n            var3 = !temp2;\n        \n            if (!var3) {\n                var0 = memory[0x40:0x60];\n                var1 = returndata.length;\n            \n                if (var1 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (arg0 > memory[var0:var0 + 0x20]) { revert(memory[0x00:0x00]); }\n            \n                var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = 0xa9059cbb;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp4 = temp3 + 0x04;\n                memory[temp4:temp4 + 0x20] = msg.sender;\n                var temp5 = temp4 + 0x20;\n                memory[temp5:temp5 + 0x20] = arg0;\n                var2 = temp5 + 0x20;\n                var3 = 0x00;\n                var4 = memory[0x40:0x60];\n                var5 = var2 - var4;\n                var6 = var4;\n                var7 = 0x00;\n                var8 = var0;\n                var9 = !address(var8).code.length;\n            \n                if (var9) { revert(memory[0x00:0x00]); }\n            \n                var temp6;\n                temp6, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n                var3 = !temp6;\n            \n                if (!var3) { return; }\n            \n                var temp7 = returndata.length;\n                memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n                var temp8 = returndata.length;\n                memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else if (msg.sender == storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1DB1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function multisigAddress() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function contractRefundStarted() returns (var r0) { return storage[0x03] / 0x0100 ** 0x1a & 0xff; }\n    \n    function pendingParsecs() returns (var r0) { return storage[0x08]; }\n    \n    function pendingFunding() returns (var r0) { return storage[0x05]; }\n    \n    function ownerPowerUpContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x3936608e242080;\n        var var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x70a08231;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = address(this);\n        var var3 = temp1 + 0x20;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = 0x00;\n        var var9 = var1;\n        var var10 = !address(var9).code.length;\n    \n        if (var10) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n        var4 = !temp2;\n    \n        if (!var4) {\n            var1 = memory[0x40:0x60];\n            var2 = returndata.length;\n        \n            if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (memory[var1:var1 + 0x20] < var0) { revert(memory[0x00:0x00]); }\n        \n            storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x14)) | 0x0100 ** 0x14;\n            return;\n        } else {\n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function BONUS_TIER_8_LIMIT() returns (var r0) { return 0x01a350b04e36ae7c0000; }\n    \n    function ownerPauseContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x16 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x17 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x18 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x18)) | 0x0100 ** 0x18;\n    }\n    \n    function ownerDeclareRefundStart() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x19 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x1a & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] != 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (address(this).balance < storage[0x04]) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x1a)) | 0x0100 ** 0x1a;\n    }\n    \n    function BONUS_TIER_9_LIMIT() returns (var r0) { return 0x01f3466cfb5423a80000; }\n    \n    function contractPaused() returns (var r0) { return storage[0x03] / 0x0100 ** 0x18 & 0xff; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function auditorAddress() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function contractFinished() returns (var r0) { return storage[0x03] / 0x0100 ** 0x17 & 0xff; }\n    \n    function BONUS_TIER_1_LIMIT() returns (var r0) { return 0x26c29e47c4844c0000; }\n    \n    function ownerDeclareFailure() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x19 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x19)) | 0x0100 ** 0x19;\n    }\n    \n    function BONUS_TIER_4_LIMIT() returns (var r0) { return 0xbacedb564f3c180000; }\n    \n    function BONUS_TIER_3_LIMIT() returns (var r0) { return 0x83f289181d84c80000; }\n    \n    function ownerResumeContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x18 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x18)) | 0x00;\n    }\n    \n    function contractPoweredUp() returns (var r0) { return storage[0x03] / 0x0100 ** 0x14 & 0xff; }\n    \n    function emergencyClawbackEther(var arg0) {\n        var var0 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_25E0:\n        \n            if (!(storage[0x03] / 0x0100 ** 0x19 & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (!(storage[0x03] / 0x0100 ** 0x1a & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (!(storage[0x03] / 0x0100 ** 0x1b & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 > address(this).balance) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            var0 = !temp2;\n        \n            if (!var0) { return; }\n        \n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else if (msg.sender == storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_25E0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function PARSECS_PER_ETHER_BASE() returns (var r0) { return 0x012eae09c800; }\n    \n    function spentParsecs() returns (var r0) { return storage[0x07]; }\n    \n    function contractRefundFinished() returns (var r0) { return storage[0x03] / 0x0100 ** 0x1b & 0xff; }\n    \n    function refundPoweredUp() returns (var r0) { return storage[0x03] / 0x0100 ** 0x15 & 0xff; }\n    \n    function emergencyRefundContract() {\n        var var0 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_2799:\n        \n            if (!(storage[0x03] / 0x0100 ** 0x19 & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value > 0x00) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (msg.sender == storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_2799; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_27C5(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function contributionOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_27F5(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function BONUS_TIER_6_LIMIT() returns (var r0) { return 0x012be3ec123534f00000; }\n    \n    function ownerSetAuditor(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function ownerWithdrawParsecs(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x17 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0x70a08231;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = address(this);\n        var var4 = temp1 + 0x20;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n        var var11 = !address(var10).code.length;\n    \n        if (var11) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n        var5 = !temp2;\n    \n        if (!var5) {\n            var2 = memory[0x40:0x60];\n            var3 = returndata.length;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = memory[var2:var2 + 0x20];\n            var0 = temp3;\n            var2 = 0x2a68;\n            var3 = var0;\n            var4 = storage[0x08];\n            var2 = func_0FA9(var3, var4);\n            var1 = var2;\n        \n            if (var1 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (var1 > var0) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 > var1) { revert(memory[0x00:0x00]); }\n        \n            var2 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0xa9059cbb;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp5 = temp4 + 0x04;\n            memory[temp5:temp5 + 0x20] = storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = arg0;\n            var4 = temp6 + 0x20;\n            var5 = 0x00;\n            var6 = memory[0x40:0x60];\n            var7 = var4 - var6;\n            var8 = var6;\n            var9 = 0x00;\n            var10 = var2;\n            var11 = !address(var10).code.length;\n        \n            if (var11) { revert(memory[0x00:0x00]); }\n        \n            var temp7;\n            temp7, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n            var5 = !temp7;\n        \n            if (!var5) { return; }\n        \n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp9 = returndata.length;\n            memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function refundedFunding() returns (var r0) { return storage[0x06]; }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_2C4D() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x2c67;\n        var var3 = storage[0x04];\n        var var4 = storage[0x05];\n        var2 = func_2D62(var3, var4);\n        var1 = var2;\n    \n        if (var1 < 0x26c29e47c4844c0000) {\n            var0 = 0x012c;\n            goto label_2D5E;\n        } else if (var1 < 0x4e39a5d6a888ac0000) {\n            var0 = 0x0113;\n            goto label_2D5E;\n        } else if (var1 < 0x83f289181d84c80000) {\n            var0 = 0xfa;\n            goto label_2D5E;\n        } else if (var1 < 0xbacedb564f3c180000) {\n            var0 = 0xe1;\n            goto label_2D5E;\n        } else if (var1 < 0xf2c0bbda8a07380000) {\n            var0 = 0xc8;\n            goto label_2D5E;\n        } else if (var1 < 0x012be3ec123534f00000) {\n            var0 = 0xaf;\n            goto label_2D5E;\n        } else if (var1 < 0x0166464cb4046ca40000) {\n            var0 = 0x96;\n            goto label_2D5E;\n        } else if (var1 < 0x01a350b04e36ae7c0000) {\n            var0 = 0x64;\n            goto label_2D5E;\n        } else if (var1 >= 0x01f3466cfb5423a80000) {\n            var0 = 0x00;\n        \n        label_2D5E:\n            return var0;\n        } else {\n            var0 = 0x32;\n            goto label_2D5E;\n        }\n    }\n    \n    function func_2D62(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_2D80(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 != 0x00) {\n            var temp0 = arg0;\n            var1 = temp0 * arg1;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_2DB4:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_2DB4;\n        }\n    }\n    \n    function func_2DBB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_2DD6(var arg0) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = temp1;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = 0x2eaf;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = var0;\n        var2 = func_0FA9(var3, var4);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x2f44;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var4 = var1;\n        var2 = func_0FA9(var3, var4);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x2f9c;\n        var3 = storage[0x05];\n        var4 = var0;\n        var2 = func_0FA9(var3, var4);\n        storage[0x05] = var2;\n        var2 = 0x2fb7;\n        var3 = storage[0x08];\n        var4 = var1;\n        var2 = func_0FA9(var3, var4);\n        storage[0x08] = var2;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0266:\n            var var0 = 0x00;\n            var var1 = var0;\n        \n            if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (!(storage[0x03] / 0x0100 ** 0x16 & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x03] / 0x0100 ** 0x17 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x03] / 0x0100 ** 0x18 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            if (storage[0x03] / 0x0100 ** 0x19 & 0xff) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value < 0x016345785d8a0000) { revert(memory[0x00:0x00]); }\n        \n            var var2 = 0x0313;\n            var var3 = msg.value;\n            var2 = func_0F18(var3);\n            var0 = var2;\n            var2 = 0x0331;\n            var3 = 0x3936608e242080;\n            var var4 = storage[0x07];\n            var2 = func_0FA9(var3, var4);\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0348;\n            var3 = var1;\n            var4 = storage[0x08];\n            var2 = func_0FA9(var3, var4);\n            var1 = var2;\n        \n            if (var0 > var1) { revert(memory[0x00:0x00]); }\n        \n            var2 = 0x00;\n        \n            if (var2 > 0x03) { assert(); }\n        \n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0e;\n            var3 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n        \n            if (var3 > 0x03) { assert(); }\n        \n            if (var3 != var2) {\n            label_0426:\n                var2 = 0x01;\n            \n                if (var2 > 0x03) { assert(); }\n            \n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n                var3 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n            \n                if (var3 > 0x03) { assert(); }\n            \n                if (var3 != var2) {\n                    var2 = 0x02;\n                \n                    if (var2 > 0x03) { assert(); }\n                \n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x0e;\n                    var3 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n                \n                    if (var3 > 0x03) { assert(); }\n                \n                    if (var3 != var2) { revert(memory[0x00:0x00]); }\n                \n                    var2 = 0x0517;\n                    var3 = msg.sender;\n                    var4 = msg.value;\n                    var var5 = var0;\n                    func_1127(var3, var4, var5);\n                    stop();\n                } else {\n                    var2 = 0x049c;\n                    var3 = msg.sender;\n                    var4 = msg.value;\n                    var5 = var0;\n                    func_0FC2(var3, var4, var5);\n                    stop();\n                }\n            } else {\n                var2 = 0x01;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n                var3 = keccak256(memory[0x00:0x40]);\n                var5 = 0x01;\n                var4 = ~(var5 * 0xff) & storage[var3];\n                var var6 = var2;\n            \n                if (var6 > 0x03) { assert(); }\n            \n                storage[var3] = var6 * var5 | var4;\n                goto label_0426;\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x3de230) {\n                // Dispatch table entry for participantClawbackEther(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0551;\n                var2 = msg.data[0x04:0x24];\n                participantClawbackEther(var2);\n                stop();\n            } else if (var0 == 0x06d832a3) {\n                // Dispatch table entry for ownerStartContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0568;\n                ownerStartContract();\n                stop();\n            } else if (var0 == 0x07738ad2) {\n                // Dispatch table entry for refundOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05ab;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = refundOf(var2);\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = var2;\n                var temp2 = memory[0x40:0x60];\n                return memory[temp2:temp2 + (temp1 + 0x20) - temp2];\n            } else if (var0 == 0x10711911) {\n                // Dispatch table entry for BONUS_TIER_5_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d6;\n                var2 = BONUS_TIER_5_LIMIT();\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = var2;\n                var temp4 = memory[0x40:0x60];\n                return memory[temp4:temp4 + (temp3 + 0x20) - temp4];\n            } else if (var0 == 0x116a6f6c) {\n                // Dispatch table entry for BONUS_TIER_7_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0601;\n                var2 = BONUS_TIER_7_LIMIT();\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var2;\n                var temp6 = memory[0x40:0x60];\n                return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n            } else if (var0 == 0x18452bb1) {\n                // Dispatch table entry for 0x18452bb1 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0658;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = func_16D2(var2);\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = var2;\n                var temp8 = memory[0x40:0x60];\n                return memory[temp8:temp8 + (temp7 + 0x20) - temp8];\n            } else if (var0 == 0x1b4fa639) {\n                // Dispatch table entry for ownerFinishContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0683;\n                ownerFinishContract();\n                stop();\n            } else if (var0 == 0x2562b427) {\n                // Dispatch table entry for declineKyc(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06c6;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                declineKyc(var2);\n                stop();\n            } else if (var0 == 0x2603f70c) {\n                // Dispatch table entry for ownerDeclareRefundFinish()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06dd;\n                ownerDeclareRefundFinish();\n                stop();\n            } else if (var0 == 0x295d4756) {\n                // Dispatch table entry for PARSECS_TOTAL_AMOUNT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06f4;\n                var2 = PARSECS_TOTAL_AMOUNT();\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + (temp9 + 0x20) - temp10];\n            } else if (var0 == 0x2e87edd9) {\n                // Dispatch table entry for MINIMUM_PARTICIPATION_AMOUNT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x071f;\n                var2 = MINIMUM_PARTICIPATION_AMOUNT();\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x329f36b5) {\n                // Dispatch table entry for BONUS_TIER_2_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x074a;\n                var2 = BONUS_TIER_2_LIMIT();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var2;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x333f57b3) {\n                // Dispatch table entry for contractStarted()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0775;\n                var2 = contractStarted();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = !!var2;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x358cc6f6) {\n                // Dispatch table entry for acceptKyc(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07d0;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                acceptKyc(var2);\n                stop();\n            } else if (var0 == 0x46cc599e) {\n                // Dispatch table entry for kycStatus(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0813;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = kycStatus(var2);\n                var3 = memory[0x40:0x60];\n                var4 = var3;\n                var5 = var2;\n            \n                if (var5 > 0x03) { assert(); }\n            \n                var temp17 = var4;\n                memory[temp17:temp17 + 0x20] = var5 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x49ef026f) {\n                // Dispatch table entry for raisedFunding()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x084c;\n                var2 = raisedFunding();\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = var2;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x516e7be7) {\n                // Dispatch table entry for contractFailed()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0877;\n                var2 = contractFailed();\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = !!var2;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x51819edb) {\n                // Dispatch table entry for emergencyWithdrawParsecs(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08bc;\n                var2 = msg.data[0x04:0x24];\n                emergencyWithdrawParsecs(var2);\n                stop();\n            } else if (var0 == 0x5462870d) {\n                // Dispatch table entry for multisigAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08d3;\n                var2 = multisigAddress();\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x5d94e35c) {\n                // Dispatch table entry for contractRefundStarted()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x092a;\n                var2 = contractRefundStarted();\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = !!var2;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + (temp25 + 0x20) - temp26];\n            } else if (var0 == 0x5fc6bd17) {\n                // Dispatch table entry for pendingParsecs()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0959;\n                var2 = pendingParsecs();\n                var temp27 = memory[0x40:0x60];\n                memory[temp27:temp27 + 0x20] = var2;\n                var temp28 = memory[0x40:0x60];\n                return memory[temp28:temp28 + (temp27 + 0x20) - temp28];\n            } else if (var0 == 0x636b7e56) {\n                // Dispatch table entry for pendingFunding()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0984;\n                var2 = pendingFunding();\n                var temp29 = memory[0x40:0x60];\n                memory[temp29:temp29 + 0x20] = var2;\n                var temp30 = memory[0x40:0x60];\n                return memory[temp30:temp30 + (temp29 + 0x20) - temp30];\n            } else if (var0 == 0x688e69d8) {\n                // Dispatch table entry for ownerPowerUpContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09af;\n                ownerPowerUpContract();\n                stop();\n            } else if (var0 == 0x7802857a) {\n                // Dispatch table entry for BONUS_TIER_8_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09c6;\n                var2 = BONUS_TIER_8_LIMIT();\n                var temp31 = memory[0x40:0x60];\n                memory[temp31:temp31 + 0x20] = var2;\n                var temp32 = memory[0x40:0x60];\n                return memory[temp32:temp32 + (temp31 + 0x20) - temp32];\n            } else if (var0 == 0x79f90d6c) {\n                // Dispatch table entry for ownerPauseContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x09f1;\n                ownerPauseContract();\n                stop();\n            } else if (var0 == 0x80a51c5e) {\n                // Dispatch table entry for ownerDeclareRefundStart()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a08;\n                ownerDeclareRefundStart();\n                stop();\n            } else if (var0 == 0x8550aaf0) {\n                // Dispatch table entry for BONUS_TIER_9_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a1f;\n                var2 = BONUS_TIER_9_LIMIT();\n                var temp33 = memory[0x40:0x60];\n                memory[temp33:temp33 + 0x20] = var2;\n                var temp34 = memory[0x40:0x60];\n                return memory[temp34:temp34 + (temp33 + 0x20) - temp34];\n            } else if (var0 == 0x8a67456a) {\n                // Dispatch table entry for contractPaused()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a4a;\n                var2 = contractPaused();\n                var temp35 = memory[0x40:0x60];\n                memory[temp35:temp35 + 0x20] = !!var2;\n                var temp36 = memory[0x40:0x60];\n                return memory[temp36:temp36 + (temp35 + 0x20) - temp36];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0a79;\n                var2 = owner();\n                var temp37 = memory[0x40:0x60];\n                memory[temp37:temp37 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp38 = memory[0x40:0x60];\n                return memory[temp38:temp38 + (temp37 + 0x20) - temp38];\n            } else if (var0 == 0x8f654175) {\n                // Dispatch table entry for auditorAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ad0;\n                var2 = auditorAddress();\n                var temp39 = memory[0x40:0x60];\n                memory[temp39:temp39 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp40 = memory[0x40:0x60];\n                return memory[temp40:temp40 + (temp39 + 0x20) - temp40];\n            } else if (var0 == 0x96f76f11) {\n                // Dispatch table entry for contractFinished()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b27;\n                var2 = contractFinished();\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = !!var2;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0x9fe14580) {\n                // Dispatch table entry for BONUS_TIER_1_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b56;\n                var2 = BONUS_TIER_1_LIMIT();\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = var2;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0xa65ae513) {\n                // Dispatch table entry for ownerDeclareFailure()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b81;\n                ownerDeclareFailure();\n                stop();\n            } else if (var0 == 0xa859eb81) {\n                // Dispatch table entry for BONUS_TIER_4_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0b98;\n                var2 = BONUS_TIER_4_LIMIT();\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var2;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0xb175a0d2) {\n                // Dispatch table entry for BONUS_TIER_3_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0bc3;\n                var2 = BONUS_TIER_3_LIMIT();\n                var temp47 = memory[0x40:0x60];\n                memory[temp47:temp47 + 0x20] = var2;\n                var temp48 = memory[0x40:0x60];\n                return memory[temp48:temp48 + (temp47 + 0x20) - temp48];\n            } else if (var0 == 0xb9934b9e) {\n                // Dispatch table entry for ownerResumeContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0bee;\n                ownerResumeContract();\n                stop();\n            } else if (var0 == 0xbb6d8c77) {\n                // Dispatch table entry for contractPoweredUp()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c05;\n                var2 = contractPoweredUp();\n                var temp49 = memory[0x40:0x60];\n                memory[temp49:temp49 + 0x20] = !!var2;\n                var temp50 = memory[0x40:0x60];\n                return memory[temp50:temp50 + (temp49 + 0x20) - temp50];\n            } else if (var0 == 0xbf56cc08) {\n                // Dispatch table entry for emergencyClawbackEther(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c4a;\n                var2 = msg.data[0x04:0x24];\n                emergencyClawbackEther(var2);\n                stop();\n            } else if (var0 == 0xbf664892) {\n                // Dispatch table entry for PARSECS_PER_ETHER_BASE()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c61;\n                var2 = PARSECS_PER_ETHER_BASE();\n                var temp51 = memory[0x40:0x60];\n                memory[temp51:temp51 + 0x20] = var2;\n                var temp52 = memory[0x40:0x60];\n                return memory[temp52:temp52 + (temp51 + 0x20) - temp52];\n            } else if (var0 == 0xc273b05f) {\n                // Dispatch table entry for spentParsecs()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0c8c;\n                var2 = spentParsecs();\n                var temp53 = memory[0x40:0x60];\n                memory[temp53:temp53 + 0x20] = var2;\n                var temp54 = memory[0x40:0x60];\n                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n            } else if (var0 == 0xcbfa18ea) {\n                // Dispatch table entry for contractRefundFinished()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0cb7;\n                var2 = contractRefundFinished();\n                var temp55 = memory[0x40:0x60];\n                memory[temp55:temp55 + 0x20] = !!var2;\n                var temp56 = memory[0x40:0x60];\n                return memory[temp56:temp56 + (temp55 + 0x20) - temp56];\n            } else if (var0 == 0xcec36cb4) {\n                // Dispatch table entry for refundPoweredUp()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ce6;\n                var2 = refundPoweredUp();\n                var temp57 = memory[0x40:0x60];\n                memory[temp57:temp57 + 0x20] = !!var2;\n                var temp58 = memory[0x40:0x60];\n                return memory[temp58:temp58 + (temp57 + 0x20) - temp58];\n            } else if (var0 == 0xd6a5e546) {\n                // Dispatch table entry for emergencyRefundContract()\n                var1 = 0x0d08;\n                emergencyRefundContract();\n                stop();\n            } else if (var0 == 0xd6ca58ce) {\n                // Dispatch table entry for 0xd6ca58ce (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0d4b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = func_27C5(var2);\n                var temp59 = memory[0x40:0x60];\n                memory[temp59:temp59 + 0x20] = var2;\n                var temp60 = memory[0x40:0x60];\n                return memory[temp60:temp60 + (temp59 + 0x20) - temp60];\n            } else if (var0 == 0xd7805ece) {\n                // Dispatch table entry for contributionOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0da2;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = contributionOf(var2);\n                var temp61 = memory[0x40:0x60];\n                memory[temp61:temp61 + 0x20] = var2;\n                var temp62 = memory[0x40:0x60];\n                return memory[temp62:temp62 + (temp61 + 0x20) - temp62];\n            } else if (var0 == 0xdcea3170) {\n                // Dispatch table entry for 0xdcea3170 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0df9;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = func_27F5(var2);\n                var temp63 = memory[0x40:0x60];\n                memory[temp63:temp63 + 0x20] = var2;\n                var temp64 = memory[0x40:0x60];\n                return memory[temp64:temp64 + (temp63 + 0x20) - temp64];\n            } else if (var0 == 0xdda72292) {\n                // Dispatch table entry for BONUS_TIER_6_LIMIT()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0e24;\n                var2 = BONUS_TIER_6_LIMIT();\n                var temp65 = memory[0x40:0x60];\n                memory[temp65:temp65 + 0x20] = var2;\n                var temp66 = memory[0x40:0x60];\n                return memory[temp66:temp66 + (temp65 + 0x20) - temp66];\n            } else if (var0 == 0xe85ac5b0) {\n                // Dispatch table entry for ownerSetAuditor(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0e7b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                ownerSetAuditor(var2);\n                stop();\n            } else if (var0 == 0xef8c1d86) {\n                // Dispatch table entry for ownerWithdrawParsecs(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ea8;\n                var2 = msg.data[0x04:0x24];\n                ownerWithdrawParsecs(var2);\n                stop();\n            } else if (var0 == 0xf2263e12) {\n                // Dispatch table entry for refundedFunding()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0ebf;\n                var2 = refundedFunding();\n                var temp67 = memory[0x40:0x60];\n                memory[temp67:temp67 + 0x20] = var2;\n                var temp68 = memory[0x40:0x60];\n                return memory[temp68:temp68 + (temp67 + 0x20) - temp68];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0f16;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_0266; }\n        }\n    }\n    \n    function func_0F18(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var1 = 0x03e8;\n        var var4 = 0x0f3d;\n        var var5 = 0x0f2e;\n        var5 = func_2C4D();\n        var4 = func_0F2E(var1, var5);\n        var2 = var4;\n        var4 = 0x0f58;\n        var5 = arg0;\n        var var6 = 0x012eae09c800;\n        var4 = func_2D80(var5, var6);\n        var temp0 = var4;\n        var3 = temp0;\n        var4 = 0x0f6d;\n        var5 = var3;\n        var6 = var2;\n        var4 = func_2D80(var5, var6);\n        var temp1 = var4;\n        var3 = temp1;\n        var4 = 0x0f82;\n        var5 = var3;\n        var6 = var1;\n        var4 = func_2DBB(var5, var6);\n        var temp2 = var4;\n        var3 = temp2;\n        var4 = 0x0f9f;\n        var5 = var3;\n        var6 = 0x0de0b6b3a7640000;\n        return func_2DBB(var5, var6);\n    }\n    \n    function func_0F2E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = arg0;\n        var var0 = temp0;\n        r0 = func_2D62(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0FA9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_0FC2(var arg0, var arg1, var arg2) {\n        var var0 = 0x1014;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg1;\n        var0 = func_2D62(var1, var2);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x10a9;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_2D62(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x1101;\n        var1 = storage[0x05];\n        var2 = arg1;\n        var0 = func_2D62(var1, var2);\n        storage[0x05] = var0;\n        var0 = 0x111c;\n        var1 = storage[0x08];\n        var2 = arg2;\n        var0 = func_2D62(var1, var2);\n        storage[0x08] = var0;\n    }\n    \n    function func_1127(var arg0, var arg1, var arg2) {\n        var var0 = 0x1179;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x09;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg1;\n        var0 = func_2D62(var1, var2);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x09;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x120e;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0a;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_2D62(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0a;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var0 = 0x1266;\n        var1 = storage[0x04];\n        var2 = arg1;\n        var0 = func_2D62(var1, var2);\n        storage[0x04] = var0;\n        var0 = 0x1281;\n        var1 = storage[0x07];\n        var2 = arg2;\n        var0 = func_2D62(var1, var2);\n        storage[0x07] = var0;\n        var temp1 = arg1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = arg2;\n        var temp4 = temp3 + 0x20;\n        memory[temp4:temp4 + 0x20] = block.timestamp;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xd352f32b90e5c5fd4a396f4f875a55c3995f9c4e3b809bdd44688c7d2bb6338f, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var temp6 = memory[0x40:0x60];\n        var temp7;\n        temp7, memory[temp6:temp6 + 0x00] = address(storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp6:temp6 + memory[0x40:0x60] - temp6]);\n        var0 = !temp7;\n    \n        if (!var0) {\n            var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var1 = 0xa9059cbb;\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp9 = temp8 + 0x04;\n            memory[temp9:temp9 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp10 = temp9 + 0x20;\n            memory[temp10:temp10 + 0x20] = arg2;\n            var2 = temp10 + 0x20;\n            var var3 = 0x00;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            var temp11;\n            temp11, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n            var3 = !temp11;\n        \n            if (!var3) { return; }\n        \n            var temp12 = returndata.length;\n            memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp13 = returndata.length;\n            memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function participantClawbackEther(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (!(storage[0x03] / 0x0100 ** 0x1a & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x1b & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n        var0 = temp0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0d;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = 0x1503;\n        var var4 = var0;\n        var var5 = var1;\n        var3 = func_0FA9(var4, var5);\n        var2 = var3;\n    \n        if (var2 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > var2) { revert(memory[0x00:0x00]); }\n    \n        var3 = 0x1545;\n        var4 = var1;\n        var5 = arg0;\n        var3 = func_2D62(var4, var5);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0d;\n        storage[keccak256(memory[0x00:0x40])] = var3;\n        var3 = 0x159d;\n        var4 = storage[0x06];\n        var5 = arg0;\n        var3 = func_2D62(var4, var5);\n        storage[0x06] = var3;\n        var temp1 = arg0;\n        var temp2 = memory[0x40:0x60];\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n        var3 = !temp3;\n    \n        if (!var3) { return; }\n    \n        var temp4 = returndata.length;\n        memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function ownerStartContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x16 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x16)) | 0x0100 ** 0x16;\n    }\n    \n    function refundOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function BONUS_TIER_5_LIMIT() returns (var r0) { return 0xf2c0bbda8a07380000; }\n    \n    function BONUS_TIER_7_LIMIT() returns (var r0) { return 0x0166464cb4046ca40000; }\n    \n    function func_16D2(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function ownerFinishContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x16 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x17 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x17)) | 0x0100 ** 0x17;\n    }\n    \n    function declineKyc(var arg0) {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) {\n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n        label_184E:\n            var1 = 0x03;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0e;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = storage[var2] & ~0xff;\n            var var4 = 0x01;\n            var var5 = var1;\n        \n            if (var5 > 0x03) { assert(); }\n        \n            storage[var2] = var5 * var4 | var3;\n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = var0;\n            var temp2 = temp1 + 0x20;\n            memory[temp2:temp2 + 0x20] = block.timestamp;\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0xd1d09a184b22a49d90d6bfa621f5de852a0aecf52ef2365064259b47553da487, stack[-7] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0b;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var0 <= 0x00) {\n            label_19A1:\n                return;\n            } else {\n                var1 = 0x1959;\n                var2 = arg0;\n                func_2DD6(var2);\n                var temp4 = var0;\n                var temp5 = memory[0x40:0x60];\n                var temp6;\n                temp6, memory[temp5:temp5 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp5:temp5 + memory[0x40:0x60] - temp5]);\n                var1 = !temp6;\n            \n                if (!var1) { goto label_19A1; }\n            \n                var temp7 = returndata.length;\n                memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else if (msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_184E; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function ownerDeclareRefundFinish() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x19 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x1a & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x1b & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x1b)) | 0x0100 ** 0x1b;\n    }\n    \n    function PARSECS_TOTAL_AMOUNT() returns (var r0) { return 0x3936608e242080; }\n    \n    function MINIMUM_PARTICIPATION_AMOUNT() returns (var r0) { return 0x016345785d8a0000; }\n    \n    function BONUS_TIER_2_LIMIT() returns (var r0) { return 0x4e39a5d6a888ac0000; }\n    \n    function contractStarted() returns (var r0) { return storage[0x03] / 0x0100 ** 0x16 & 0xff; }\n    \n    function acceptKyc(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_1B5C:\n            var2 = 0x02;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0e;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = storage[var3] & ~0xff;\n            var var5 = 0x01;\n            var var6 = var2;\n        \n            if (var6 > 0x03) { assert(); }\n        \n            storage[var3] = var6 * var5 | var4;\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0b;\n            var temp1 = storage[keccak256(memory[0x00:0x40])];\n            var0 = temp1;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x0c;\n            var1 = storage[keccak256(memory[0x00:0x40])];\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var0;\n            var temp3 = temp2 + 0x20;\n            memory[temp3:temp3 + 0x20] = block.timestamp;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x2f34592345f4c83c7365e809c535dc13b3d7610ac2fc123f5ec05f646a9e612a, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var2 = var0 > 0x00;\n        \n            if (var2) {\n                if (!var2) {\n                label_1CC0:\n                    return;\n                } else {\n                label_1CAC:\n                    var2 = 0x1cb4;\n                    var3 = arg0;\n                    func_2DD6(var3);\n                    var2 = 0x1cbf;\n                    var3 = arg0;\n                    var4 = var0;\n                    var5 = var1;\n                    func_1127(var3, var4, var5);\n                    goto label_1CC0;\n                }\n            } else if (var1 <= 0x00) { goto label_1CC0; }\n            else { goto label_1CAC; }\n        } else if (msg.sender == storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1B5C; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function kycStatus(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0e;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function raisedFunding() returns (var r0) { return storage[0x04]; }\n    \n    function contractFailed() returns (var r0) { return storage[0x03] / 0x0100 ** 0x19 & 0xff; }\n    \n    function emergencyWithdrawParsecs(var arg0) {\n        var var0 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_1DB1:\n        \n            if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x70a08231;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp1 = temp0 + 0x04;\n            memory[temp1:temp1 + 0x20] = address(this);\n            var var2 = temp1 + 0x20;\n            var var3 = 0x20;\n            var var4 = memory[0x40:0x60];\n            var var5 = var2 - var4;\n            var var6 = var4;\n            var var7 = 0x00;\n            var var8 = var0;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n            var3 = !temp2;\n        \n            if (!var3) {\n                var0 = memory[0x40:0x60];\n                var1 = returndata.length;\n            \n                if (var1 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (arg0 > memory[var0:var0 + 0x20]) { revert(memory[0x00:0x00]); }\n            \n                var0 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = 0xa9059cbb;\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = (var1 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                var temp4 = temp3 + 0x04;\n                memory[temp4:temp4 + 0x20] = msg.sender;\n                var temp5 = temp4 + 0x20;\n                memory[temp5:temp5 + 0x20] = arg0;\n                var2 = temp5 + 0x20;\n                var3 = 0x00;\n                var4 = memory[0x40:0x60];\n                var5 = var2 - var4;\n                var6 = var4;\n                var7 = 0x00;\n                var8 = var0;\n                var9 = !address(var8).code.length;\n            \n                if (var9) { revert(memory[0x00:0x00]); }\n            \n                var temp6;\n                temp6, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas).value(var7)(memory[var6:var6 + var5]);\n                var3 = !temp6;\n            \n                if (!var3) { return; }\n            \n                var temp7 = returndata.length;\n                memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n                var temp8 = returndata.length;\n                memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else if (msg.sender == storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1DB1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function multisigAddress() returns (var r0) { return storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function contractRefundStarted() returns (var r0) { return storage[0x03] / 0x0100 ** 0x1a & 0xff; }\n    \n    function pendingParsecs() returns (var r0) { return storage[0x08]; }\n    \n    function pendingFunding() returns (var r0) { return storage[0x05]; }\n    \n    function ownerPowerUpContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x3936608e242080;\n        var var1 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var2 = 0x70a08231;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var2 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = address(this);\n        var var3 = temp1 + 0x20;\n        var var4 = 0x20;\n        var var5 = memory[0x40:0x60];\n        var var6 = var3 - var5;\n        var var7 = var5;\n        var var8 = 0x00;\n        var var9 = var1;\n        var var10 = !address(var9).code.length;\n    \n        if (var10) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n        var4 = !temp2;\n    \n        if (!var4) {\n            var1 = memory[0x40:0x60];\n            var2 = returndata.length;\n        \n            if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            if (memory[var1:var1 + 0x20] < var0) { revert(memory[0x00:0x00]); }\n        \n            storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x14)) | 0x0100 ** 0x14;\n            return;\n        } else {\n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function BONUS_TIER_8_LIMIT() returns (var r0) { return 0x01a350b04e36ae7c0000; }\n    \n    function ownerPauseContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x16 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x17 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x18 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x18)) | 0x0100 ** 0x18;\n    }\n    \n    function ownerDeclareRefundStart() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x19 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x1a & 0xff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x05] != 0x00) { revert(memory[0x00:0x00]); }\n    \n        if (address(this).balance < storage[0x04]) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x1a)) | 0x0100 ** 0x1a;\n    }\n    \n    function BONUS_TIER_9_LIMIT() returns (var r0) { return 0x01f3466cfb5423a80000; }\n    \n    function contractPaused() returns (var r0) { return storage[0x03] / 0x0100 ** 0x18 & 0xff; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function auditorAddress() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function contractFinished() returns (var r0) { return storage[0x03] / 0x0100 ** 0x17 & 0xff; }\n    \n    function BONUS_TIER_1_LIMIT() returns (var r0) { return 0x26c29e47c4844c0000; }\n    \n    function ownerDeclareFailure() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x19 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x19)) | 0x0100 ** 0x19;\n    }\n    \n    function BONUS_TIER_4_LIMIT() returns (var r0) { return 0xbacedb564f3c180000; }\n    \n    function BONUS_TIER_3_LIMIT() returns (var r0) { return 0x83f289181d84c80000; }\n    \n    function ownerResumeContract() {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x18 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x18)) | 0x00;\n    }\n    \n    function contractPoweredUp() returns (var r0) { return storage[0x03] / 0x0100 ** 0x14 & 0xff; }\n    \n    function emergencyClawbackEther(var arg0) {\n        var var0 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_25E0:\n        \n            if (!(storage[0x03] / 0x0100 ** 0x19 & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (!(storage[0x03] / 0x0100 ** 0x1a & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (!(storage[0x03] / 0x0100 ** 0x1b & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 > address(this).balance) { revert(memory[0x00:0x00]); }\n        \n            var temp0 = arg0;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!temp0 * 0x08fc).value(temp0)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n            var0 = !temp2;\n        \n            if (!var0) { return; }\n        \n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else if (msg.sender == storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_25E0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function PARSECS_PER_ETHER_BASE() returns (var r0) { return 0x012eae09c800; }\n    \n    function spentParsecs() returns (var r0) { return storage[0x07]; }\n    \n    function contractRefundFinished() returns (var r0) { return storage[0x03] / 0x0100 ** 0x1b & 0xff; }\n    \n    function refundPoweredUp() returns (var r0) { return storage[0x03] / 0x0100 ** 0x15 & 0xff; }\n    \n    function emergencyRefundContract() {\n        var var0 = msg.sender == storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_2799:\n        \n            if (!(storage[0x03] / 0x0100 ** 0x19 & 0xff)) { revert(memory[0x00:0x00]); }\n        \n            if (msg.value > 0x00) { return; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (msg.sender == storage[0x02] & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_2799; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_27C5(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function contributionOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_27F5(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function BONUS_TIER_6_LIMIT() returns (var r0) { return 0x012be3ec123534f00000; }\n    \n    function ownerSetAuditor(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function ownerWithdrawParsecs(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x03] / 0x0100 ** 0x17 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0x70a08231;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n        var temp1 = temp0 + 0x04;\n        memory[temp1:temp1 + 0x20] = address(this);\n        var var4 = temp1 + 0x20;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = 0x00;\n        var var10 = var2;\n        var var11 = !address(var10).code.length;\n    \n        if (var11) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n        var5 = !temp2;\n    \n        if (!var5) {\n            var2 = memory[0x40:0x60];\n            var3 = returndata.length;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = memory[var2:var2 + 0x20];\n            var0 = temp3;\n            var2 = 0x2a68;\n            var3 = var0;\n            var4 = storage[0x08];\n            var2 = func_0FA9(var3, var4);\n            var1 = var2;\n        \n            if (var1 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (var1 > var0) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 > var1) { revert(memory[0x00:0x00]); }\n        \n            var2 = storage[0x01] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0xa9059cbb;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = (var3 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n            var temp5 = temp4 + 0x04;\n            memory[temp5:temp5 + 0x20] = storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp6 = temp5 + 0x20;\n            memory[temp6:temp6 + 0x20] = arg0;\n            var4 = temp6 + 0x20;\n            var5 = 0x00;\n            var6 = memory[0x40:0x60];\n            var7 = var4 - var6;\n            var8 = var6;\n            var9 = 0x00;\n            var10 = var2;\n            var11 = !address(var10).code.length;\n        \n            if (var11) { revert(memory[0x00:0x00]); }\n        \n            var temp7;\n            temp7, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n            var5 = !temp7;\n        \n            if (!var5) { return; }\n        \n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp9 = returndata.length;\n            memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function refundedFunding() returns (var r0) { return storage[0x06]; }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_2C4D() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x2c67;\n        var var3 = storage[0x04];\n        var var4 = storage[0x05];\n        var2 = func_2D62(var3, var4);\n        var1 = var2;\n    \n        if (var1 < 0x26c29e47c4844c0000) {\n            var0 = 0x012c;\n            goto label_2D5E;\n        } else if (var1 < 0x4e39a5d6a888ac0000) {\n            var0 = 0x0113;\n            goto label_2D5E;\n        } else if (var1 < 0x83f289181d84c80000) {\n            var0 = 0xfa;\n            goto label_2D5E;\n        } else if (var1 < 0xbacedb564f3c180000) {\n            var0 = 0xe1;\n            goto label_2D5E;\n        } else if (var1 < 0xf2c0bbda8a07380000) {\n            var0 = 0xc8;\n            goto label_2D5E;\n        } else if (var1 < 0x012be3ec123534f00000) {\n            var0 = 0xaf;\n            goto label_2D5E;\n        } else if (var1 < 0x0166464cb4046ca40000) {\n            var0 = 0x96;\n            goto label_2D5E;\n        } else if (var1 < 0x01a350b04e36ae7c0000) {\n            var0 = 0x64;\n            goto label_2D5E;\n        } else if (var1 >= 0x01f3466cfb5423a80000) {\n            var0 = 0x00;\n        \n        label_2D5E:\n            return var0;\n        } else {\n            var0 = 0x32;\n            goto label_2D5E;\n        }\n    }\n    \n    function func_2D62(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_2D80(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 != 0x00) {\n            var temp0 = arg0;\n            var1 = temp0 * arg1;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_2DB4:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_2DB4;\n        }\n    }\n    \n    function func_2DBB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_2DD6(var arg0) {\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = temp1;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = 0x2eaf;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        var var3 = storage[keccak256(memory[0x00:0x40])];\n        var var4 = var0;\n        var2 = func_0FA9(var3, var4);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0b;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x2f44;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        var3 = storage[keccak256(memory[0x00:0x40])];\n        var4 = var1;\n        var2 = func_0FA9(var3, var4);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x0c;\n        storage[keccak256(memory[0x00:0x40])] = var2;\n        var2 = 0x2f9c;\n        var3 = storage[0x05];\n        var4 = var0;\n        var2 = func_0FA9(var3, var4);\n        storage[0x05] = var2;\n        var2 = 0x2fb7;\n        var3 = storage[0x08];\n        var4 = var1;\n        var2 = func_0FA9(var3, var4);\n        storage[0x08] = var2;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 159.9202070236206,
	"usage": {
		"completion_tokens": 2103,
		"prompt_tokens": 19462,
		"total_tokens": 21565
	}
}