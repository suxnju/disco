{
	"address": "0xe1f008f468eac1590f5a759ebecbc5c40822bf76",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity contract code corresponding to the decompiled code could look like this:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract MyToken {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    address public owner;\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Burn(address indexed from, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event FrozenFunds(address target, bool frozen);\n\n    constructor(string memory tokenName, string memory tokenSymbol, uint8 decimalUnits, uint256 initialSupply) public {\n        owner = msg.sender;\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n        totalSupply = initialSupply;\n        balanceOf[owner] = totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        totalSupply -= _value;\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function freezeAccount(address target, bool freeze) public {\n        require(msg.sender == owner);\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public {\n        require(msg.sender == owner);\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function buy() public payable {\n        uint amount = msg.value / buyPrice;\n        require(balanceOf[this] >= amount);\n        balanceOf[msg.sender] += amount;\n        balanceOf[this] -= amount;\n        emit Transfer(this, msg.sender, amount);\n    }\n\n    function sell(uint256 amount) public {\n        require(balanceOf[msg.sender] >= amount);\n        balanceOf[this] += amount;\n        balanceOf[msg.sender] -= amount;\n        msg.sender.transfer(amount * sellPrice);\n        emit Transfer(msg.sender, this, amount);\n    }\n}\n```\n\nNote: The above code is a simplified version of the contract inferred from the decompiled code. The contract might include more complex logic and checks as per the specific requirements of the original contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701462033,
	"id": "chatcmpl-8R4Hxb0ZIZQ1Aywbv4Y4NMhYc3oyM",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 09:41 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 _sellPrice; // STORAGE[0x7]\nuint256 _buy; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\n\n// Events\nApproval(address, address, uint256);\nBurn(address, uint256);\nTransfer(address, address, uint256);\nFrozenFunds(address, bool);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction setPrices(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _sellPrice = varg0;\n    _buy = varg1;\n}\n\nfunction 0x169a(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0);\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    v2 = address(varg1);\n    require(_balanceOf[v2] + varg0 >= _balanceOf[v1]);\n    v3 = address(varg2);\n    require(!(0xff & _frozenAccount[v3]));\n    v4 = address(varg1);\n    require(!(0xff & _frozenAccount[v4]));\n    v5 = address(varg2);\n    _balanceOf[v5] = _balanceOf[v5] - varg0;\n    v6 = address(varg1);\n    _balanceOf[v6] = _balanceOf[v6] + varg0;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x169a(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    _totalSupply = _totalSupply + varg1;\n    emit Transfer(0, address(this), varg1);\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction buyPrice() public nonPayable { \n    return _buy;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    assert(_buy);\n    0x169a(msg.value / _buy, msg.sender, this);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x169a(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!((varg2.length > 0x100000000) | (36 + varg2 + varg2.length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[](varg2.length);\n    CALLDATACOPY(v0.data, 36 + varg2, varg2.length);\n    MEM[v0.data + varg2.length] = 0;\n    v1 = v2 = 0;\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 = v4 + 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas);\n        require(v8); // checks call status, propagates error data on error\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require((address(this)).balance >= varg0 * _sellPrice);\n    0x169a(varg0, this, msg.sender);\n    v0 = msg.sender.call().value(varg0 * _sellPrice).gas(!(varg0 * _sellPrice) * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x5fefda7 == function_selector) {\n            setPrices(uint256,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 09:41 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 _sellPrice; // STORAGE[0x7]\nuint256 _buy; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\n\n// Events\nApproval(address, address, uint256);\nBurn(address, uint256);\nTransfer(address, address, uint256);\nFrozenFunds(address, bool);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction setPrices(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _sellPrice = varg0;\n    _buy = varg1;\n}\n\nfunction 0x169a(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0);\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    v2 = address(varg1);\n    require(_balanceOf[v2] + varg0 >= _balanceOf[v1]);\n    v3 = address(varg2);\n    require(!(0xff & _frozenAccount[v3]));\n    v4 = address(varg1);\n    require(!(0xff & _frozenAccount[v4]));\n    v5 = address(varg2);\n    _balanceOf[v5] = _balanceOf[v5] - varg0;\n    v6 = address(varg1);\n    _balanceOf[v6] = _balanceOf[v6] + varg0;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x169a(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    _totalSupply = _totalSupply + varg1;\n    emit Transfer(0, address(this), varg1);\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction buyPrice() public nonPayable { \n    return _buy;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    assert(_buy);\n    0x169a(msg.value / _buy, msg.sender, this);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x169a(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!((varg2.length > 0x100000000) | (36 + varg2 + varg2.length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[](varg2.length);\n    CALLDATACOPY(v0.data, 36 + varg2, varg2.length);\n    MEM[v0.data + varg2.length] = 0;\n    v1 = v2 = 0;\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 = v4 + 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas);\n        require(v8); // checks call status, propagates error data on error\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require((address(this)).balance >= varg0 * _sellPrice);\n    0x169a(varg0, this, msg.sender);\n    v0 = msg.sender.call().value(varg0 * _sellPrice).gas(!(varg0 * _sellPrice) * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x5fefda7 == function_selector) {\n            setPrices(uint256,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 09:41 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 _sellPrice; // STORAGE[0x7]\nuint256 _buy; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0x9]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\n\n// Events\nApproval(address, address, uint256);\nBurn(address, uint256);\nTransfer(address, address, uint256);\nFrozenFunds(address, bool);\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction setPrices(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _sellPrice = varg0;\n    _buy = varg1;\n}\n\nfunction 0x169a(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1) != 0);\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    v2 = address(varg1);\n    require(_balanceOf[v2] + varg0 >= _balanceOf[v1]);\n    v3 = address(varg2);\n    require(!(0xff & _frozenAccount[v3]));\n    v4 = address(varg1);\n    require(!(0xff & _frozenAccount[v4]));\n    v5 = address(varg2);\n    _balanceOf[v5] = _balanceOf[v5] - varg0;\n    v6 = address(varg1);\n    _balanceOf[v6] = _balanceOf[v6] + varg0;\n    emit Transfer(address(varg2), address(varg1), varg0);\n    return ;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x169a(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(_balanceOf[msg.sender] >= varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    _totalSupply = _totalSupply + varg1;\n    emit Transfer(0, address(this), varg1);\n    emit Transfer(address(this), varg0, varg1);\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction buyPrice() public nonPayable { \n    return _buy;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 = v5 + 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    assert(_buy);\n    0x169a(msg.value / _buy, msg.sender, this);\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    0x169a(varg1, varg0, msg.sender);\n    return 1;\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    require(msg.data.length - 4 >= 96);\n    require(varg2 <= 0x100000000);\n    require(4 + varg2 + 32 <= 4 + (msg.data.length - 4));\n    require(!((varg2.length > 0x100000000) | (36 + varg2 + varg2.length > 4 + (msg.data.length - 4))));\n    v0 = new bytes[](varg2.length);\n    CALLDATACOPY(v0.data, 36 + varg2, varg2.length);\n    MEM[v0.data + varg2.length] = 0;\n    v1 = v2 = 0;\n    _allowance[msg.sender] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 = v4 + 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas);\n        require(v8); // checks call status, propagates error data on error\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require((address(this)).balance >= varg0 * _sellPrice);\n    0x169a(varg0, this, msg.sender);\n    v0 = msg.sender.call().value(varg0 * _sellPrice).gas(!(varg0 * _sellPrice) * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x5fefda7 == function_selector) {\n            setPrices(uint256,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 47.937124729156494,
	"usage": {
		"completion_tokens": 778,
		"prompt_tokens": 3035,
		"total_tokens": 3813
	}
}