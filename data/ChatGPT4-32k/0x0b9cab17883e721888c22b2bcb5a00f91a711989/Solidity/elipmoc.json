{
	"address": "0x0b9cab17883e721888c22b2bcb5a00f91a711989",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code that corresponds to the given decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    uint256[] private _standard;\n    uint256[] private _name;\n    uint256[] private _symbol;\n    uint256 private _totalSupply;\n    uint256 private _icoSince;\n    uint256 private _icoTill;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    uint256 private _buyPrice;\n    address private _owner;\n    uint8 private _decimals;\n    bool private _locked;\n\n    event Burn(address indexed target, uint256 value);\n    event IcoFinished();\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor() public {\n        _owner = msg.sender;\n    }\n\n    function name() public view returns (uint256[] memory) {\n        return _name;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        _allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function icoTill() public view returns (uint256) {\n        return _icoTill;\n    }\n\n    function setLocked(bool _value) public {\n        require(msg.sender == _owner);\n        _locked = _value;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(!_locked);\n        require(_value > 0 && _balanceOf[_from] >= _value);\n        require(_balanceOf[_to] + _value > _balanceOf[_to]);\n        require(_value <= _allowance[_from][msg.sender]);\n        _balanceOf[_from] -= _value;\n        _balanceOf[_to] += _value;\n        _allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function icoFinished() public {\n        require(msg.sender == _owner);\n        if (block.timestamp > _icoTill) {\n            _balanceOf[_owner] += _balanceOf[address(this)];\n            _balanceOf[address(this)] = 0;\n            emit Transfer(address(this), _owner, _balanceOf[address(this)]);\n            emit IcoFinished();\n        }\n    }\n\n    function icoSince() public view returns (uint256) {\n        return _icoSince;\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(msg.sender == _owner);\n        require(_balanceOf[msg.sender] >= _value);\n        _balanceOf[msg.sender] -= _value;\n        _totalSupply -= _value;\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function standard() public view returns (uint256[] memory) {\n        return _standard;\n    }\n\n    function setBuyPrice(uint256 _value) public {\n        require(msg.sender == _owner);\n        _buyPrice = _value;\n    }\n\n    function balanceOf(address _address) public view returns (uint256 balance) {\n        return _balanceOf[_address];\n    }\n\n    function buyPrice() public view returns (uint256) {\n        return _buyPrice;\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function symbol() public view returns (uint256[] memory) {\n        return _symbol;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(!_locked);\n        require(_balanceOf[msg.sender] >= _value);\n        require(_balanceOf[_to] + _value >= _balanceOf[_to]);\n        _balanceOf[msg.sender] -= _value;\n        _balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approveAndCall(address _spender, uint256 _value, bytes memory _extraData) public returns (bool success) {\n        approve(_spender, _value);\n        // call the receiveApproval function on the contract you want to be notified\n        // This crafts the function signature manually so one doesn't have to include a contract in here just for this\n        // receiveApproval(address _from, uint256 _value, address _tokenContract, bytes _extraData)\n        // it is assumed when one does this that the call *should* succeed, otherwise one would use vanilla approve instead\n        (bool success,) = _spender.call(abi.encodeWithSignature(\"receiveApproval(address,uint256,address,bytes)\", msg.sender, _value, address(this), _extraData));\n        require(success);\n        return true;\n    }\n\n    function locked() public view returns (bool) {\n        return _locked;\n    }\n\n    function transferEthers() public {\n        require(msg.sender == _owner);\n        (bool success,) = _owner.call.value(address(this).balance)(\"\");\n        require(success);\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return _allowance[_owner][_spender];\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner);\n        _owner = newOwner;\n    }\n}\n```\nThis contract seems to be a token contract with additional functionalities such as ICO (Initial Coin Offering) functionality. Please note that this is a simplification of the decompiled code and might not cover all cases. Always test the contract thoroughly before deploying.",
				"role": "assistant"
			}
		}
	],
	"created": 1701463974,
	"id": "chatcmpl-8R4nGksmgQMLZE84eCEHVab8559bV",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.23 07:55 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _standard; // STORAGE[0x1]\nuint256[] _name; // STORAGE[0x2]\nuint256[] _symbol; // STORAGE[0x3]\nuint256 _totalSupply; // STORAGE[0x5]\nuint256 _icoSince; // STORAGE[0x7]\nuint256 _icoTill; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x9]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0xa]\nuint256 _buyPrice; // STORAGE[0xb]\naddress _setBuyPrice; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\nuint8 _locked; // STORAGE[0x6] bytes 0 to 0\n\n// Events\nBurn(address, uint256);\nIcoFinished();\nTransfer(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction icoTill() public nonPayable { \n    return _icoTill;\n}\n\nfunction setLocked(bool varg0) public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    _locked = varg0;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!_locked);\n    require(varg2 > 0);\n    require(_balanceOf[varg0] >= varg2);\n    require(_balanceOf[varg1] + varg2 > _balanceOf[varg1]);\n    require(varg2 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    _balanceOf[varg1] += varg2;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction icoFinished() public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    if (block.timestamp > _icoTill) {\n        _balanceOf[_setBuyPrice] += _balanceOf[address(this)];\n        _balanceOf[address(this)] = 0;\n        emit Transfer(address(this), _setBuyPrice, _balanceOf[address(this)]);\n        emit IcoFinished();\n    }\n}\n\nfunction icoSince() public nonPayable { \n    return _icoSince;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    require(_balanceOf[msg.sender] > varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction standard() public nonPayable { \n    v0 = new bytes[](_standard.length);\n    v1 = v2 = v0.data;\n    if (_standard.length) {\n        if (31 < _standard.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _standard.length <= v1);\n        } else {\n            MEM[v2] = _standard.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction setBuyPrice(uint256 varg0) public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    _buyPrice = varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction owner() public nonPayable { \n    return _setBuyPrice;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!_locked);\n    require(_balanceOf[msg.sender] >= varg1);\n    require(_balanceOf[varg0] + varg1 > _balanceOf[varg0]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction locked() public nonPayable { \n    return _locked;\n}\n\nfunction transferEthers() public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    v0 = _setBuyPrice.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    _setBuyPrice = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1e724447 == function_selector) {\n            icoTill();\n        } else if (0x211e28b6 == function_selector) {\n            setLocked(bool);\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x356e2927 == function_selector) {\n            icoFinished();\n        } else if (0x3f1b1267 == function_selector) {\n            icoSince();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x5a3b7e42 == function_selector) {\n            standard();\n        } else if (0x63ae8d6c == function_selector) {\n            setBuyPrice(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xcf309012 == function_selector) {\n            locked();\n        } else if (0xd271011d == function_selector) {\n            transferEthers();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    require(!_locked);\n    v0 = v1 = block.timestamp >= _icoSince;\n    if (v1) {\n        v0 = block.timestamp <= _icoTill;\n    }\n    require(v0);\n    require(msg.value > 0);\n    assert(_buyPrice);\n    require(_balanceOf[address(this)] >= msg.value / _buyPrice);\n    _balanceOf[msg.sender] += msg.value / _buyPrice;\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value / _buyPrice;\n    emit Transfer(address(this), msg.sender, msg.value / _buyPrice);\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 07:55 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _standard; // STORAGE[0x1]\nuint256[] _name; // STORAGE[0x2]\nuint256[] _symbol; // STORAGE[0x3]\nuint256 _totalSupply; // STORAGE[0x5]\nuint256 _icoSince; // STORAGE[0x7]\nuint256 _icoTill; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x9]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0xa]\nuint256 _buyPrice; // STORAGE[0xb]\naddress _setBuyPrice; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\nuint8 _locked; // STORAGE[0x6] bytes 0 to 0\n\n// Events\nBurn(address, uint256);\nIcoFinished();\nTransfer(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction icoTill() public nonPayable { \n    return _icoTill;\n}\n\nfunction setLocked(bool varg0) public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    _locked = varg0;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!_locked);\n    require(varg2 > 0);\n    require(_balanceOf[varg0] >= varg2);\n    require(_balanceOf[varg1] + varg2 > _balanceOf[varg1]);\n    require(varg2 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    _balanceOf[varg1] += varg2;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction icoFinished() public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    if (block.timestamp > _icoTill) {\n        _balanceOf[_setBuyPrice] += _balanceOf[address(this)];\n        _balanceOf[address(this)] = 0;\n        emit Transfer(address(this), _setBuyPrice, _balanceOf[address(this)]);\n        emit IcoFinished();\n    }\n}\n\nfunction icoSince() public nonPayable { \n    return _icoSince;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    require(_balanceOf[msg.sender] > varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction standard() public nonPayable { \n    v0 = new bytes[](_standard.length);\n    v1 = v2 = v0.data;\n    if (_standard.length) {\n        if (31 < _standard.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _standard.length <= v1);\n        } else {\n            MEM[v2] = _standard.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction setBuyPrice(uint256 varg0) public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    _buyPrice = varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction owner() public nonPayable { \n    return _setBuyPrice;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!_locked);\n    require(_balanceOf[msg.sender] >= varg1);\n    require(_balanceOf[varg0] + varg1 > _balanceOf[varg0]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction locked() public nonPayable { \n    return _locked;\n}\n\nfunction transferEthers() public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    v0 = _setBuyPrice.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    _setBuyPrice = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1e724447 == function_selector) {\n            icoTill();\n        } else if (0x211e28b6 == function_selector) {\n            setLocked(bool);\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x356e2927 == function_selector) {\n            icoFinished();\n        } else if (0x3f1b1267 == function_selector) {\n            icoSince();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x5a3b7e42 == function_selector) {\n            standard();\n        } else if (0x63ae8d6c == function_selector) {\n            setBuyPrice(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xcf309012 == function_selector) {\n            locked();\n        } else if (0xd271011d == function_selector) {\n            transferEthers();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    require(!_locked);\n    v0 = v1 = block.timestamp >= _icoSince;\n    if (v1) {\n        v0 = block.timestamp <= _icoTill;\n    }\n    require(v0);\n    require(msg.value > 0);\n    assert(_buyPrice);\n    require(_balanceOf[address(this)] >= msg.value / _buyPrice);\n    _balanceOf[msg.sender] += msg.value / _buyPrice;\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value / _buyPrice;\n    emit Transfer(address(this), msg.sender, msg.value / _buyPrice);\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.23 07:55 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _standard; // STORAGE[0x1]\nuint256[] _name; // STORAGE[0x2]\nuint256[] _symbol; // STORAGE[0x3]\nuint256 _totalSupply; // STORAGE[0x5]\nuint256 _icoSince; // STORAGE[0x7]\nuint256 _icoTill; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x9]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0xa]\nuint256 _buyPrice; // STORAGE[0xb]\naddress _setBuyPrice; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x4] bytes 0 to 0\nuint8 _locked; // STORAGE[0x6] bytes 0 to 0\n\n// Events\nBurn(address, uint256);\nIcoFinished();\nTransfer(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction icoTill() public nonPayable { \n    return _icoTill;\n}\n\nfunction setLocked(bool varg0) public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    _locked = varg0;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(!_locked);\n    require(varg2 > 0);\n    require(_balanceOf[varg0] >= varg2);\n    require(_balanceOf[varg1] + varg2 > _balanceOf[varg1]);\n    require(varg2 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    _balanceOf[varg1] += varg2;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction icoFinished() public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    if (block.timestamp > _icoTill) {\n        _balanceOf[_setBuyPrice] += _balanceOf[address(this)];\n        _balanceOf[address(this)] = 0;\n        emit Transfer(address(this), _setBuyPrice, _balanceOf[address(this)]);\n        emit IcoFinished();\n    }\n}\n\nfunction icoSince() public nonPayable { \n    return _icoSince;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    require(_balanceOf[msg.sender] > varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction standard() public nonPayable { \n    v0 = new bytes[](_standard.length);\n    v1 = v2 = v0.data;\n    if (_standard.length) {\n        if (31 < _standard.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _standard.length <= v1);\n        } else {\n            MEM[v2] = _standard.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction setBuyPrice(uint256 varg0) public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    _buyPrice = varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction owner() public nonPayable { \n    return _setBuyPrice;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v4.data + v5] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(!_locked);\n    require(_balanceOf[msg.sender] >= varg1);\n    require(_balanceOf[varg0] + varg1 > _balanceOf[varg0]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v3.data + v4] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = v9 = 1;\n    }\n    return v1;\n}\n\nfunction locked() public nonPayable { \n    return _locked;\n}\n\nfunction transferEthers() public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    v0 = _setBuyPrice.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v0);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_setBuyPrice == msg.sender);\n    _setBuyPrice = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1e724447 == function_selector) {\n            icoTill();\n        } else if (0x211e28b6 == function_selector) {\n            setLocked(bool);\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x356e2927 == function_selector) {\n            icoFinished();\n        } else if (0x3f1b1267 == function_selector) {\n            icoSince();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x5a3b7e42 == function_selector) {\n            standard();\n        } else if (0x63ae8d6c == function_selector) {\n            setBuyPrice(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xcf309012 == function_selector) {\n            locked();\n        } else if (0xd271011d == function_selector) {\n            transferEthers();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    require(!_locked);\n    v0 = v1 = block.timestamp >= _icoSince;\n    if (v1) {\n        v0 = block.timestamp <= _icoTill;\n    }\n    require(v0);\n    require(msg.value > 0);\n    assert(_buyPrice);\n    require(_balanceOf[address(this)] >= msg.value / _buyPrice);\n    _balanceOf[msg.sender] += msg.value / _buyPrice;\n    _balanceOf[address(this)] = _balanceOf[address(this)] - msg.value / _buyPrice;\n    emit Transfer(address(this), msg.sender, msg.value / _buyPrice);\n}\n.",
	"status": "1",
	"time_cost": 50.27281165122986,
	"usage": {
		"completion_tokens": 1210,
		"prompt_tokens": 2833,
		"total_tokens": 4043
	}
}