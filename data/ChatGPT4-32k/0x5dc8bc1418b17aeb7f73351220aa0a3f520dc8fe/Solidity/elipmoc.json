{
	"address": "0x5dc8bc1418b17aeb7f73351220aa0a3f520dc8fe",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, please find below the Solidity contract code that describes the given decompiled code:\n\n```solidity\npragma solidity ^0.7.6;\n\ncontract Lottery {\n    uint256 private _ticketPrice;\n    uint256 private _totalTickets;\n    mapping (uint256 => uint256) private _tickets;\n    address private _resetLotto;\n    address private _newOwner;\n    \n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    \n    constructor() {\n        _resetLotto = msg.sender;\n    }\n    \n    function setTicketPrice(uint256 price) public { \n        require(msg.sender == _resetLotto, \"Access Denied\");\n        _ticketPrice = price;\n    }\n    \n    function tickets(uint256 ticketId) public view returns(uint256) { \n        return _tickets[ticketId];\n    }\n    \n    function resetLotto() public { \n        require(msg.sender == _resetLotto, \"Access Denied\");\n        _totalTickets = 0;\n    }\n    \n    function acceptOwnership() public { \n        require(msg.sender == _newOwner, \"Access Denied\");\n        emit OwnershipTransferred(_resetLotto, _newOwner);\n        _resetLotto = _newOwner;\n        _newOwner = address(0);\n    }\n    \n    function owner() public view returns(address) { \n        return _resetLotto;\n    }\n    \n    function withdrawEth() public { \n        require(msg.sender == _resetLotto, \"Access Denied\");\n        (bool success, ) = _resetLotto.call{value: address(this).balance}(\"\");\n        require(success, \"Withdrawal Failed\");\n    }\n    \n    function newOwner() public view returns(address) { \n        return _newOwner;\n    }\n    \n    function totalTickets() public view returns(uint256) { \n        return _totalTickets;\n    }\n    \n    function transferOwnership(address newOwner) public { \n        require(msg.sender == _resetLotto, \"Access Denied\");\n        _newOwner = newOwner;\n    }\n    \n    fallback() external payable { \n        require(msg.value >= _ticketPrice, \"Insufficient Ether\");\n        _tickets[_totalTickets] = uint256(msg.sender);\n        _totalTickets++;\n    }\n    \n    function ticketPrice() public view returns(uint256) { \n        return _ticketPrice;\n    }\n}\n```\n\nPlease note that the `__function_selector__` was not included as it's not a standard Solidity contract function but a low-level EVM aspect. This code is simplified and does not include error handling for sake of readability. Also, I assumed that `_tickets` mapping was meant to map uint to uint instead of uint to an array.",
				"role": "assistant"
			}
		}
	],
	"created": 1701465382,
	"id": "chatcmpl-8R59yqZkoyVagRFhOedMMz1uUBkmK",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.24 01:42 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _ticketPrice; // STORAGE[0x2]\nuint256 _totalTickets; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _tickets; // STORAGE[0x4]\naddress _resetLotto; // STORAGE[0x0] bytes 0 to 19\naddress _newOwner; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction setTicketPrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _resetLotto);\n    _ticketPrice = varg0;\n}\n\nfunction tickets(uint256 varg0) public nonPayable { \n    return address(_tickets[varg0]);\n}\n\nfunction resetLotto() public nonPayable { \n    require(msg.sender == _resetLotto);\n    _totalTickets = 0;\n}\n\nfunction acceptOwnership() public nonPayable { \n    require(msg.sender == _newOwner);\n    emit OwnershipTransferred(_resetLotto, _newOwner);\n    _resetLotto = _newOwner;\n    _newOwner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _resetLotto;\n}\n\nfunction withdrawEth() public nonPayable { \n    require(msg.sender == _resetLotto);\n    v0 = _resetLotto.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction newOwner() public nonPayable { \n    return _newOwner;\n}\n\nfunction totalTickets() public nonPayable { \n    return _totalTickets;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _resetLotto);\n    _newOwner = varg0;\n}\n\nfunction fallback() public payable { \n    require(msg.value >= _ticketPrice);\n    _tickets[_totalTickets] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & _tickets[_totalTickets];\n    _totalTickets += 1;\n}\n\nfunction ticketPrice() public nonPayable { \n    return _ticketPrice;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x1209b1f6) {\n            ticketPrice();\n        } else if (0x15981650 == function_selector) {\n            setTicketPrice(uint256);\n        } else if (0x50b44712 == function_selector) {\n            tickets(uint256);\n        } else if (0x63ef8d9e == function_selector) {\n            resetLotto();\n        } else if (0x79ba5097 == function_selector) {\n            acceptOwnership();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa0ef91df == function_selector) {\n            withdrawEth();\n        } else if (0xd4ee1d90 == function_selector) {\n            newOwner();\n        } else if (0xdd11247e == function_selector) {\n            totalTickets();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 01:42 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _ticketPrice; // STORAGE[0x2]\nuint256 _totalTickets; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _tickets; // STORAGE[0x4]\naddress _resetLotto; // STORAGE[0x0] bytes 0 to 19\naddress _newOwner; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction setTicketPrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _resetLotto);\n    _ticketPrice = varg0;\n}\n\nfunction tickets(uint256 varg0) public nonPayable { \n    return address(_tickets[varg0]);\n}\n\nfunction resetLotto() public nonPayable { \n    require(msg.sender == _resetLotto);\n    _totalTickets = 0;\n}\n\nfunction acceptOwnership() public nonPayable { \n    require(msg.sender == _newOwner);\n    emit OwnershipTransferred(_resetLotto, _newOwner);\n    _resetLotto = _newOwner;\n    _newOwner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _resetLotto;\n}\n\nfunction withdrawEth() public nonPayable { \n    require(msg.sender == _resetLotto);\n    v0 = _resetLotto.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction newOwner() public nonPayable { \n    return _newOwner;\n}\n\nfunction totalTickets() public nonPayable { \n    return _totalTickets;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _resetLotto);\n    _newOwner = varg0;\n}\n\nfunction fallback() public payable { \n    require(msg.value >= _ticketPrice);\n    _tickets[_totalTickets] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & _tickets[_totalTickets];\n    _totalTickets += 1;\n}\n\nfunction ticketPrice() public nonPayable { \n    return _ticketPrice;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x1209b1f6) {\n            ticketPrice();\n        } else if (0x15981650 == function_selector) {\n            setTicketPrice(uint256);\n        } else if (0x50b44712 == function_selector) {\n            tickets(uint256);\n        } else if (0x63ef8d9e == function_selector) {\n            resetLotto();\n        } else if (0x79ba5097 == function_selector) {\n            acceptOwnership();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa0ef91df == function_selector) {\n            withdrawEth();\n        } else if (0xd4ee1d90 == function_selector) {\n            newOwner();\n        } else if (0xdd11247e == function_selector) {\n            totalTickets();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 01:42 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _ticketPrice; // STORAGE[0x2]\nuint256 _totalTickets; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _tickets; // STORAGE[0x4]\naddress _resetLotto; // STORAGE[0x0] bytes 0 to 19\naddress _newOwner; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nOwnershipTransferred(address, address);\n\nfunction setTicketPrice(uint256 varg0) public nonPayable { \n    require(msg.sender == _resetLotto);\n    _ticketPrice = varg0;\n}\n\nfunction tickets(uint256 varg0) public nonPayable { \n    return address(_tickets[varg0]);\n}\n\nfunction resetLotto() public nonPayable { \n    require(msg.sender == _resetLotto);\n    _totalTickets = 0;\n}\n\nfunction acceptOwnership() public nonPayable { \n    require(msg.sender == _newOwner);\n    emit OwnershipTransferred(_resetLotto, _newOwner);\n    _resetLotto = _newOwner;\n    _newOwner = 0;\n}\n\nfunction owner() public nonPayable { \n    return _resetLotto;\n}\n\nfunction withdrawEth() public nonPayable { \n    require(msg.sender == _resetLotto);\n    v0 = _resetLotto.call().value(this.balance).gas(2300 * !this.balance);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction newOwner() public nonPayable { \n    return _newOwner;\n}\n\nfunction totalTickets() public nonPayable { \n    return _totalTickets;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _resetLotto);\n    _newOwner = varg0;\n}\n\nfunction fallback() public payable { \n    require(msg.value >= _ticketPrice);\n    _tickets[_totalTickets] = msg.sender | ~0xffffffffffffffffffffffffffffffffffffffff & _tickets[_totalTickets];\n    _totalTickets += 1;\n}\n\nfunction ticketPrice() public nonPayable { \n    return _ticketPrice;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x1209b1f6) {\n            ticketPrice();\n        } else if (0x15981650 == function_selector) {\n            setTicketPrice(uint256);\n        } else if (0x50b44712 == function_selector) {\n            tickets(uint256);\n        } else if (0x63ef8d9e == function_selector) {\n            resetLotto();\n        } else if (0x79ba5097 == function_selector) {\n            acceptOwnership();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xa0ef91df == function_selector) {\n            withdrawEth();\n        } else if (0xd4ee1d90 == function_selector) {\n            newOwner();\n        } else if (0xdd11247e == function_selector) {\n            totalTickets();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 18.870502710342407,
	"usage": {
		"completion_tokens": 555,
		"prompt_tokens": 817,
		"total_tokens": 1372
	}
}