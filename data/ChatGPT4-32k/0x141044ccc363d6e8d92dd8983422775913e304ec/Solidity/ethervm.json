{
	"address": "0x141044ccc363d6e8d92dd8983422775913e304ec",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Sure, here is the Solidity contract code according to the decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Contract {\n    mapping (address => uint256) private balances;\n    mapping (address => mapping (address => uint256)) private allowed;\n    address public owner;\n    bool public mintingFinished = false;\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);\n        balances[_to] += _value;\n        balances[_from] -= _value;\n        allowed[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    event Approval(address indexed _owner, address indexed _spender, uint256 _value);\n    event Transfer(address indexed _from, address indexed _to, uint256 _value);\n}\n```\n\nPlease note that the original EVM bytecode might contain additional details or functionalities, that are not clearly identifiable without the original Solidity source code. This translation is an attempt to provide an equivalent Solidity code to the one that would compile to the given EVM bytecode. So, it may not fully represent the original Solidity contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473176,
	"id": "chatcmpl-8Mv2e6crsQmfnrwJqhdPeLXUm4Nya",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0107:\n            var var0 = 0x0111;\n            var var1 = msg.sender;\n            var var2 = msg.value;\n            var0 = func_06E9(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x05d2035b) {\n                // Dispatch table entry for mintingFinished()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0127;\n                var2 = mintingFinished();\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = !!var2;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0154;\n                var2 = name();\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp3 - var4;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var6 = temp4 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0194:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_0182:\n                    var temp10 = var11;\n                    memory[var9 + temp10:var9 + temp10 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0194; }\n                    else { goto label_0182; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020f;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = !!var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x023c;\n                var1 = totalSupply();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02b1;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = !!var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var2 = decimals();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x40c10f19) {\n                // Dispatch table entry for mint(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = mint(var2, var3);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = !!var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x4634d81c) {\n                // Dispatch table entry for getDividends(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = getDividends(var2);\n            \n            label_038B:\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x66188463) {\n                // Dispatch table entry for decreaseApproval(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e1;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = decreaseApproval(var2, var3);\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = !!var1;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x6cfb2c9c) {\n                // Dispatch table entry for payoutToAddress(address[])\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0427;\n                var temp25 = msg.data[0x04:0x24] + 0x04;\n                var3 = msg.data[temp25:temp25 + 0x20];\n                var2 = temp25 + 0x20;\n                payoutToAddress(var2, var3);\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0460;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var1;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0x7d64bcb4) {\n                // Dispatch table entry for finishMinting()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0489;\n                var1 = finishMinting();\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = !!var1;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = owner();\n                var temp30 = memory[0x40:0x60];\n                memory[temp30:temp30 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp31 = memory[0x40:0x60];\n                return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x050b;\n                var2 = symbol();\n                var temp32 = memory[0x40:0x60];\n                var3 = temp32;\n                var4 = var3;\n                var temp33 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp33 - var4;\n                var temp34 = var2;\n                memory[temp33:temp33 + 0x20] = memory[temp34:temp34 + 0x20];\n                var5 = temp33 + 0x20;\n                var7 = memory[temp34:temp34 + 0x20];\n                var6 = temp34 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_054B:\n                    var temp35 = var7;\n                    var5 = temp35 + var5;\n                    var6 = temp35 & 0x1f;\n                \n                    if (!var6) {\n                        var temp36 = memory[0x40:0x60];\n                        return memory[temp36:temp36 + var5 - temp36];\n                    } else {\n                        var temp37 = var6;\n                        var temp38 = var5 - temp37;\n                        memory[temp38:temp38 + 0x20] = ~(0x0100 ** (0x20 - temp37) - 0x01) & memory[temp38:temp38 + 0x20];\n                        var temp39 = memory[0x40:0x60];\n                        return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n                    }\n                } else {\n                label_0539:\n                    var temp40 = var11;\n                    memory[var9 + temp40:var9 + temp40 + 0x20] = memory[var10 + temp40:var10 + temp40 + 0x20];\n                    var11 = temp40 + 0x20;\n                \n                    if (var11 >= var8) { goto label_054B; }\n                    else { goto label_0539; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05c6;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = !!var1;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x05e8;\n                deposit();\n                stop();\n            } else if (var0 == 0xd73dd623) {\n                // Dispatch table entry for increaseApproval(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x062a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = increaseApproval(var2, var3);\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = !!var1;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x069a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var1;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06e7;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_0107; }\n        }\n    }\n    \n    function func_06E9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0;\n        var var5 = 0x00;\n        var var6 = 0x00;\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var4 = keccak256(memory[0x00:0x40]);\n        var var7 = 0x0769;\n        var var8 = storage[0x08];\n        var var9 = storage[var4];\n        var7 = func_1CE4(var8, var9);\n        var5 = var7;\n    \n        if (var5 <= 0x00) {\n        label_0832:\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var1 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n            var7 = 0x088c;\n            var8 = storage[0x09];\n            var9 = var1;\n            var7 = func_1CE4(var8, var9);\n            storage[0x09] = var7;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            storage[keccak256(memory[0x00:0x40]) + 0x01] = 0x00;\n            var7 = 0x08ed;\n            var8 = var1;\n            var9 = arg1;\n            var7 = func_1D38(var8, var9);\n            var2 = var7;\n        \n            if (var2 <= 0x00) {\n            label_0939:\n            \n                if (var1 <= 0x00) { return 0x01; }\n            \n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x737c69225d647e5994eab1a6c301bf6d9232beb2759ae1e27a8966b4732bc489, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n                var temp2 = var2;\n                var temp3 = memory[0x40:0x60];\n                var temp4;\n                temp4, memory[temp3:temp3 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n            \n                if (temp4) { goto label_0939; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var7 = 0x07db;\n            var8 = 0x07c8;\n            memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var9 = storage[keccak256(memory[0x00:0x40])];\n            var var10 = var5;\n            var8 = func_1CFD(var9, var10);\n            var7 = func_07C8(var4, var8);\n            var temp5 = var7;\n            var6 = temp5;\n            var7 = 0x0808;\n            var8 = 0x07f5;\n            var9 = var6;\n            var10 = storage[0x01];\n            var8 = func_1D56(var9, var10);\n            var7 = func_07F5(var4, var8);\n            storage[var4 + 0x01] = var7;\n            var7 = storage[0x01];\n            var8 = var6;\n        \n            if (!var7) { assert(); }\n        \n            var temp6 = var4;\n            storage[temp6 + 0x02] = var8 % var7;\n            storage[temp6] = storage[0x08];\n            goto label_0832;\n        }\n    }\n    \n    function func_07C8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_07F5(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function mintingFinished() returns (var r0) { return storage[0x03] / 0x0100 ** 0x14 & 0xff; }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x04;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0A4A:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0A41; }\n        \n        label_0A2D:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0A2D; }\n        \n        label_0A41:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0A4A;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0A4A;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        var var3 = 0x00;\n        var var4 = 0x00;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var2 = keccak256(memory[0x00:0x40]);\n        var var5 = 0x0bcb;\n        var var6 = storage[0x08];\n        var var7 = storage[var2];\n        var5 = func_1CE4(var6, var7);\n        var3 = var5;\n    \n        if (var3 <= 0x00) {\n        label_0C94:\n            var5 = arg1;\n            var7 = 0x00;\n            var var8 = 0x00;\n            memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var6 = keccak256(memory[0x00:0x40]);\n            var var9 = 0x0cf4;\n            var var10 = storage[0x08];\n            var var11 = storage[var6];\n            var9 = func_1CE4(var10, var11);\n            var7 = var9;\n        \n            if (var7 <= 0x00) {\n            label_0DBD:\n                var9 = 0x0dc8;\n                var10 = arg0;\n                var11 = arg1;\n                var var12 = arg2;\n                return func_1D71(var10, var11, var12);\n            } else {\n                var9 = 0x0d66;\n                var10 = 0x0d53;\n                memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var11 = storage[keccak256(memory[0x00:0x40])];\n                var12 = var7;\n                var10 = func_1CFD(var11, var12);\n                var9 = func_0D53(var6, var10);\n                var temp0 = var9;\n                var8 = temp0;\n                var9 = 0x0d93;\n                var10 = 0x0d80;\n                var11 = var8;\n                var12 = storage[0x01];\n                var10 = func_1D56(var11, var12);\n                var9 = func_0D80(var6, var10);\n                storage[var6 + 0x01] = var9;\n                var9 = storage[0x01];\n                var10 = var8;\n            \n                if (!var9) { assert(); }\n            \n                var temp1 = var6;\n                storage[temp1 + 0x02] = var10 % var9;\n                storage[temp1] = storage[0x08];\n                goto label_0DBD;\n            }\n        } else {\n            var5 = 0x0c3d;\n            var6 = 0x0c2a;\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var7 = storage[keccak256(memory[0x00:0x40])];\n            var8 = var3;\n            var6 = func_1CFD(var7, var8);\n            var5 = func_0C2A(var2, var6);\n            var temp2 = var5;\n            var4 = temp2;\n            var5 = 0x0c6a;\n            var6 = 0x0c57;\n            var7 = var4;\n            var8 = storage[0x01];\n            var6 = func_1D56(var7, var8);\n            var5 = func_0C57(var2, var6);\n            storage[var2 + 0x01] = var5;\n            var5 = storage[0x01];\n            var6 = var4;\n        \n            if (!var5) { assert(); }\n        \n            var temp3 = var2;\n            storage[temp3 + 0x02] = var6 % var5;\n            storage[temp3] = storage[0x08];\n            goto label_0C94;\n        }\n    }\n    \n    function func_0C2A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0C57(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0D53(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0D80(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decimals() returns (var r0) { return storage[0x06] & 0xff; }\n    \n    function mint(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0e7b;\n        var var2 = storage[0x01];\n        var var3 = arg1;\n        var1 = func_1D38(var2, var3);\n        storage[0x01] = var1;\n        var1 = 0x0ed2;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_1D38(var2, var3);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp1 = arg1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function getDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var1 = keccak256(memory[0x00:0x40]);\n        var var4 = 0x1032;\n        var var5 = storage[0x08];\n        var var6 = storage[var1];\n        var4 = func_1CE4(var5, var6);\n        var2 = var4;\n    \n        if (var2 <= 0x00) { return 0x00; }\n    \n        var4 = 0x10a4;\n        var5 = 0x1091;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var6 = storage[keccak256(memory[0x00:0x40])];\n        var var7 = var2;\n        var5 = func_1CFD(var6, var7);\n        var4 = func_1091(var1, var5);\n        var temp0 = var4;\n        var3 = temp0;\n        var4 = 0x10d1;\n        var5 = 0x10be;\n        var6 = var3;\n        var7 = storage[0x01];\n        var5 = func_1D56(var6, var7);\n        return func_10BE(var1, var5);\n    }\n    \n    function func_1091(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_10BE(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decreaseApproval(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (arg1 <= var1) {\n            var var2 = 0x1209;\n            var var3 = var1;\n            var var4 = arg1;\n            var2 = func_1CE4(var3, var4);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n        \n        label_128A:\n            var temp2 = arg0;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp3;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp6;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            goto label_128A;\n        }\n    }\n    \n    function payoutToAddress(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (arg1 <= var0) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 > 0x64) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= arg1) {\n        label_13EF:\n            return;\n        } else {\n        label_13AD:\n            var var1 = 0x13e1;\n            var var2 = arg0;\n            var var3 = arg1;\n            var var4 = var0;\n        \n            if (var4 >= var3) { assert(); }\n        \n            var1 = func_13BD(var2, var3, var4);\n            var0 = var0 + 0x01;\n        \n            if (var0 >= arg1) { goto label_13EF; }\n            else { goto label_13AD; }\n        }\n    }\n    \n    function func_13BD(var arg0, var arg1, var arg2) returns (var r0) {\n        arg0 = msg.data[arg2 * 0x20 + arg0:arg2 * 0x20 + arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x00;\n        r0 = func_06E9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function finishMinting() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x14)) | 0x0100 ** 0x14;\n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0xae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa08]);\n        return 0x01;\n    }\n    \n    function owner() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x05];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x05;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_15C0:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_15B7; }\n        \n        label_15A3:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_15A3; }\n        \n        label_15B7:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_15C0;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_15C0;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.sender;\n        var var3 = 0x00;\n        var var4 = 0x00;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var2 = keccak256(memory[0x00:0x40]);\n        var var5 = 0x1645;\n        var var6 = storage[0x08];\n        var var7 = storage[var2];\n        var5 = func_1CE4(var6, var7);\n        var3 = var5;\n    \n        if (var3 <= 0x00) {\n        label_170E:\n            var5 = arg0;\n            var7 = 0x00;\n            var var8 = 0x00;\n            memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var6 = keccak256(memory[0x00:0x40]);\n            var var9 = 0x176e;\n            var var10 = storage[0x08];\n            var var11 = storage[var6];\n            var9 = func_1CE4(var10, var11);\n            var7 = var9;\n        \n            if (var7 <= 0x00) {\n            label_1837:\n                var9 = 0x1841;\n                var10 = arg0;\n                var11 = arg1;\n                return func_212B(var10, var11);\n            } else {\n                var9 = 0x17e0;\n                var10 = 0x17cd;\n                memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var11 = storage[keccak256(memory[0x00:0x40])];\n                var var12 = var7;\n                var10 = func_1CFD(var11, var12);\n                var9 = func_17CD(var6, var10);\n                var temp0 = var9;\n                var8 = temp0;\n                var9 = 0x180d;\n                var10 = 0x17fa;\n                var11 = var8;\n                var12 = storage[0x01];\n                var10 = func_1D56(var11, var12);\n                var9 = func_17FA(var6, var10);\n                storage[var6 + 0x01] = var9;\n                var9 = storage[0x01];\n                var10 = var8;\n            \n                if (!var9) { assert(); }\n            \n                var temp1 = var6;\n                storage[temp1 + 0x02] = var10 % var9;\n                storage[temp1] = storage[0x08];\n                goto label_1837;\n            }\n        } else {\n            var5 = 0x16b7;\n            var6 = 0x16a4;\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var7 = storage[keccak256(memory[0x00:0x40])];\n            var8 = var3;\n            var6 = func_1CFD(var7, var8);\n            var5 = func_16A4(var2, var6);\n            var temp2 = var5;\n            var4 = temp2;\n            var5 = 0x16e4;\n            var6 = 0x16d1;\n            var7 = var4;\n            var8 = storage[0x01];\n            var6 = func_1D56(var7, var8);\n            var5 = func_16D1(var2, var6);\n            storage[var2 + 0x01] = var5;\n            var5 = storage[0x01];\n            var6 = var4;\n        \n            if (!var5) { assert(); }\n        \n            var temp3 = var2;\n            storage[temp3 + 0x02] = var6 % var5;\n            storage[temp3] = storage[0x08];\n            goto label_170E;\n        }\n    }\n    \n    function func_16A4(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_16D1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_17CD(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_17FA(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function deposit() {\n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x188c;\n        var var1 = address(this).balance;\n        var var2 = storage[0x09];\n        var0 = func_1CE4(var1, var2);\n    \n        if (msg.value > var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x18af;\n        var1 = storage[0x08];\n        var2 = msg.value;\n        var0 = func_1D38(var1, var2);\n        storage[0x08] = var0;\n        var0 = 0x18ca;\n        var1 = storage[0x09];\n        var2 = msg.value;\n        var0 = func_1D38(var1, var2);\n        storage[0x09] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xddc9c30275a04c48091f24199f9c405765de34d979d6847f5b9798a57232d2e5]);\n    }\n    \n    function increaseApproval(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x199a;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_1D38(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x03] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_1CE4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1CFD(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 != 0x00) {\n            var temp0 = arg0;\n            var1 = temp0 * arg1;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_1D31:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1D31;\n        }\n    }\n    \n    function func_1D38(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1D56(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_1D71(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x1ed7;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_1CE4(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x1f6a;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1D38(var2, var3);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x203b;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1CE4(var2, var3);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp3;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function func_212B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x2206;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_1CE4(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x2299;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_1D38(var2, var3);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0107:\n            var var0 = 0x0111;\n            var var1 = msg.sender;\n            var var2 = msg.value;\n            var0 = func_06E9(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x05d2035b) {\n                // Dispatch table entry for mintingFinished()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0127;\n                var2 = mintingFinished();\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = !!var2;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0154;\n                var2 = name();\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp3 - var4;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var6 = temp4 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0194:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_0182:\n                    var temp10 = var11;\n                    memory[var9 + temp10:var9 + temp10 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0194; }\n                    else { goto label_0182; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020f;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = !!var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x023c;\n                var1 = totalSupply();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02b1;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = !!var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var2 = decimals();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x40c10f19) {\n                // Dispatch table entry for mint(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = mint(var2, var3);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = !!var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x4634d81c) {\n                // Dispatch table entry for getDividends(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = getDividends(var2);\n            \n            label_038B:\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x66188463) {\n                // Dispatch table entry for decreaseApproval(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e1;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = decreaseApproval(var2, var3);\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = !!var1;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x6cfb2c9c) {\n                // Dispatch table entry for payoutToAddress(address[])\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0427;\n                var temp25 = msg.data[0x04:0x24] + 0x04;\n                var3 = msg.data[temp25:temp25 + 0x20];\n                var2 = temp25 + 0x20;\n                payoutToAddress(var2, var3);\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0460;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var1;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0x7d64bcb4) {\n                // Dispatch table entry for finishMinting()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0489;\n                var1 = finishMinting();\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = !!var1;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = owner();\n                var temp30 = memory[0x40:0x60];\n                memory[temp30:temp30 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp31 = memory[0x40:0x60];\n                return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x050b;\n                var2 = symbol();\n                var temp32 = memory[0x40:0x60];\n                var3 = temp32;\n                var4 = var3;\n                var temp33 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp33 - var4;\n                var temp34 = var2;\n                memory[temp33:temp33 + 0x20] = memory[temp34:temp34 + 0x20];\n                var5 = temp33 + 0x20;\n                var7 = memory[temp34:temp34 + 0x20];\n                var6 = temp34 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_054B:\n                    var temp35 = var7;\n                    var5 = temp35 + var5;\n                    var6 = temp35 & 0x1f;\n                \n                    if (!var6) {\n                        var temp36 = memory[0x40:0x60];\n                        return memory[temp36:temp36 + var5 - temp36];\n                    } else {\n                        var temp37 = var6;\n                        var temp38 = var5 - temp37;\n                        memory[temp38:temp38 + 0x20] = ~(0x0100 ** (0x20 - temp37) - 0x01) & memory[temp38:temp38 + 0x20];\n                        var temp39 = memory[0x40:0x60];\n                        return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n                    }\n                } else {\n                label_0539:\n                    var temp40 = var11;\n                    memory[var9 + temp40:var9 + temp40 + 0x20] = memory[var10 + temp40:var10 + temp40 + 0x20];\n                    var11 = temp40 + 0x20;\n                \n                    if (var11 >= var8) { goto label_054B; }\n                    else { goto label_0539; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05c6;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = !!var1;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x05e8;\n                deposit();\n                stop();\n            } else if (var0 == 0xd73dd623) {\n                // Dispatch table entry for increaseApproval(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x062a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = increaseApproval(var2, var3);\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = !!var1;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x069a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var1;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06e7;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_0107; }\n        }\n    }\n    \n    function func_06E9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0;\n        var var5 = 0x00;\n        var var6 = 0x00;\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var4 = keccak256(memory[0x00:0x40]);\n        var var7 = 0x0769;\n        var var8 = storage[0x08];\n        var var9 = storage[var4];\n        var7 = func_1CE4(var8, var9);\n        var5 = var7;\n    \n        if (var5 <= 0x00) {\n        label_0832:\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var1 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n            var7 = 0x088c;\n            var8 = storage[0x09];\n            var9 = var1;\n            var7 = func_1CE4(var8, var9);\n            storage[0x09] = var7;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            storage[keccak256(memory[0x00:0x40]) + 0x01] = 0x00;\n            var7 = 0x08ed;\n            var8 = var1;\n            var9 = arg1;\n            var7 = func_1D38(var8, var9);\n            var2 = var7;\n        \n            if (var2 <= 0x00) {\n            label_0939:\n            \n                if (var1 <= 0x00) { return 0x01; }\n            \n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x737c69225d647e5994eab1a6c301bf6d9232beb2759ae1e27a8966b4732bc489, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n                var temp2 = var2;\n                var temp3 = memory[0x40:0x60];\n                var temp4;\n                temp4, memory[temp3:temp3 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n            \n                if (temp4) { goto label_0939; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var7 = 0x07db;\n            var8 = 0x07c8;\n            memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var9 = storage[keccak256(memory[0x00:0x40])];\n            var var10 = var5;\n            var8 = func_1CFD(var9, var10);\n            var7 = func_07C8(var4, var8);\n            var temp5 = var7;\n            var6 = temp5;\n            var7 = 0x0808;\n            var8 = 0x07f5;\n            var9 = var6;\n            var10 = storage[0x01];\n            var8 = func_1D56(var9, var10);\n            var7 = func_07F5(var4, var8);\n            storage[var4 + 0x01] = var7;\n            var7 = storage[0x01];\n            var8 = var6;\n        \n            if (!var7) { assert(); }\n        \n            var temp6 = var4;\n            storage[temp6 + 0x02] = var8 % var7;\n            storage[temp6] = storage[0x08];\n            goto label_0832;\n        }\n    }\n    \n    function func_07C8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_07F5(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function mintingFinished() returns (var r0) { return storage[0x03] / 0x0100 ** 0x14 & 0xff; }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x04;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0A4A:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0A41; }\n        \n        label_0A2D:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0A2D; }\n        \n        label_0A41:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0A4A;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0A4A;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        var var3 = 0x00;\n        var var4 = 0x00;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var2 = keccak256(memory[0x00:0x40]);\n        var var5 = 0x0bcb;\n        var var6 = storage[0x08];\n        var var7 = storage[var2];\n        var5 = func_1CE4(var6, var7);\n        var3 = var5;\n    \n        if (var3 <= 0x00) {\n        label_0C94:\n            var5 = arg1;\n            var7 = 0x00;\n            var var8 = 0x00;\n            memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var6 = keccak256(memory[0x00:0x40]);\n            var var9 = 0x0cf4;\n            var var10 = storage[0x08];\n            var var11 = storage[var6];\n            var9 = func_1CE4(var10, var11);\n            var7 = var9;\n        \n            if (var7 <= 0x00) {\n            label_0DBD:\n                var9 = 0x0dc8;\n                var10 = arg0;\n                var11 = arg1;\n                var var12 = arg2;\n                return func_1D71(var10, var11, var12);\n            } else {\n                var9 = 0x0d66;\n                var10 = 0x0d53;\n                memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var11 = storage[keccak256(memory[0x00:0x40])];\n                var12 = var7;\n                var10 = func_1CFD(var11, var12);\n                var9 = func_0D53(var6, var10);\n                var temp0 = var9;\n                var8 = temp0;\n                var9 = 0x0d93;\n                var10 = 0x0d80;\n                var11 = var8;\n                var12 = storage[0x01];\n                var10 = func_1D56(var11, var12);\n                var9 = func_0D80(var6, var10);\n                storage[var6 + 0x01] = var9;\n                var9 = storage[0x01];\n                var10 = var8;\n            \n                if (!var9) { assert(); }\n            \n                var temp1 = var6;\n                storage[temp1 + 0x02] = var10 % var9;\n                storage[temp1] = storage[0x08];\n                goto label_0DBD;\n            }\n        } else {\n            var5 = 0x0c3d;\n            var6 = 0x0c2a;\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var7 = storage[keccak256(memory[0x00:0x40])];\n            var8 = var3;\n            var6 = func_1CFD(var7, var8);\n            var5 = func_0C2A(var2, var6);\n            var temp2 = var5;\n            var4 = temp2;\n            var5 = 0x0c6a;\n            var6 = 0x0c57;\n            var7 = var4;\n            var8 = storage[0x01];\n            var6 = func_1D56(var7, var8);\n            var5 = func_0C57(var2, var6);\n            storage[var2 + 0x01] = var5;\n            var5 = storage[0x01];\n            var6 = var4;\n        \n            if (!var5) { assert(); }\n        \n            var temp3 = var2;\n            storage[temp3 + 0x02] = var6 % var5;\n            storage[temp3] = storage[0x08];\n            goto label_0C94;\n        }\n    }\n    \n    function func_0C2A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0C57(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0D53(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0D80(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decimals() returns (var r0) { return storage[0x06] & 0xff; }\n    \n    function mint(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0e7b;\n        var var2 = storage[0x01];\n        var var3 = arg1;\n        var1 = func_1D38(var2, var3);\n        storage[0x01] = var1;\n        var1 = 0x0ed2;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_1D38(var2, var3);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp1 = arg1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function getDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var1 = keccak256(memory[0x00:0x40]);\n        var var4 = 0x1032;\n        var var5 = storage[0x08];\n        var var6 = storage[var1];\n        var4 = func_1CE4(var5, var6);\n        var2 = var4;\n    \n        if (var2 <= 0x00) { return 0x00; }\n    \n        var4 = 0x10a4;\n        var5 = 0x1091;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var6 = storage[keccak256(memory[0x00:0x40])];\n        var var7 = var2;\n        var5 = func_1CFD(var6, var7);\n        var4 = func_1091(var1, var5);\n        var temp0 = var4;\n        var3 = temp0;\n        var4 = 0x10d1;\n        var5 = 0x10be;\n        var6 = var3;\n        var7 = storage[0x01];\n        var5 = func_1D56(var6, var7);\n        return func_10BE(var1, var5);\n    }\n    \n    function func_1091(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_10BE(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decreaseApproval(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (arg1 <= var1) {\n            var var2 = 0x1209;\n            var var3 = var1;\n            var var4 = arg1;\n            var2 = func_1CE4(var3, var4);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n        \n        label_128A:\n            var temp2 = arg0;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp3;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp6;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            goto label_128A;\n        }\n    }\n    \n    function payoutToAddress(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (arg1 <= var0) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 > 0x64) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= arg1) {\n        label_13EF:\n            return;\n        } else {\n        label_13AD:\n            var var1 = 0x13e1;\n            var var2 = arg0;\n            var var3 = arg1;\n            var var4 = var0;\n        \n            if (var4 >= var3) { assert(); }\n        \n            var1 = func_13BD(var2, var3, var4);\n            var0 = var0 + 0x01;\n        \n            if (var0 >= arg1) { goto label_13EF; }\n            else { goto label_13AD; }\n        }\n    }\n    \n    function func_13BD(var arg0, var arg1, var arg2) returns (var r0) {\n        arg0 = msg.data[arg2 * 0x20 + arg0:arg2 * 0x20 + arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x00;\n        r0 = func_06E9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function finishMinting() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x14)) | 0x0100 ** 0x14;\n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0xae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa08]);\n        return 0x01;\n    }\n    \n    function owner() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x05];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x05;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_15C0:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_15B7; }\n        \n        label_15A3:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_15A3; }\n        \n        label_15B7:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_15C0;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_15C0;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.sender;\n        var var3 = 0x00;\n        var var4 = 0x00;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var2 = keccak256(memory[0x00:0x40]);\n        var var5 = 0x1645;\n        var var6 = storage[0x08];\n        var var7 = storage[var2];\n        var5 = func_1CE4(var6, var7);\n        var3 = var5;\n    \n        if (var3 <= 0x00) {\n        label_170E:\n            var5 = arg0;\n            var7 = 0x00;\n            var var8 = 0x00;\n            memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var6 = keccak256(memory[0x00:0x40]);\n            var var9 = 0x176e;\n            var var10 = storage[0x08];\n            var var11 = storage[var6];\n            var9 = func_1CE4(var10, var11);\n            var7 = var9;\n        \n            if (var7 <= 0x00) {\n            label_1837:\n                var9 = 0x1841;\n                var10 = arg0;\n                var11 = arg1;\n                return func_212B(var10, var11);\n            } else {\n                var9 = 0x17e0;\n                var10 = 0x17cd;\n                memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var11 = storage[keccak256(memory[0x00:0x40])];\n                var var12 = var7;\n                var10 = func_1CFD(var11, var12);\n                var9 = func_17CD(var6, var10);\n                var temp0 = var9;\n                var8 = temp0;\n                var9 = 0x180d;\n                var10 = 0x17fa;\n                var11 = var8;\n                var12 = storage[0x01];\n                var10 = func_1D56(var11, var12);\n                var9 = func_17FA(var6, var10);\n                storage[var6 + 0x01] = var9;\n                var9 = storage[0x01];\n                var10 = var8;\n            \n                if (!var9) { assert(); }\n            \n                var temp1 = var6;\n                storage[temp1 + 0x02] = var10 % var9;\n                storage[temp1] = storage[0x08];\n                goto label_1837;\n            }\n        } else {\n            var5 = 0x16b7;\n            var6 = 0x16a4;\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var7 = storage[keccak256(memory[0x00:0x40])];\n            var8 = var3;\n            var6 = func_1CFD(var7, var8);\n            var5 = func_16A4(var2, var6);\n            var temp2 = var5;\n            var4 = temp2;\n            var5 = 0x16e4;\n            var6 = 0x16d1;\n            var7 = var4;\n            var8 = storage[0x01];\n            var6 = func_1D56(var7, var8);\n            var5 = func_16D1(var2, var6);\n            storage[var2 + 0x01] = var5;\n            var5 = storage[0x01];\n            var6 = var4;\n        \n            if (!var5) { assert(); }\n        \n            var temp3 = var2;\n            storage[temp3 + 0x02] = var6 % var5;\n            storage[temp3] = storage[0x08];\n            goto label_170E;\n        }\n    }\n    \n    function func_16A4(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_16D1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_17CD(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_17FA(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function deposit() {\n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x188c;\n        var var1 = address(this).balance;\n        var var2 = storage[0x09];\n        var0 = func_1CE4(var1, var2);\n    \n        if (msg.value > var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x18af;\n        var1 = storage[0x08];\n        var2 = msg.value;\n        var0 = func_1D38(var1, var2);\n        storage[0x08] = var0;\n        var0 = 0x18ca;\n        var1 = storage[0x09];\n        var2 = msg.value;\n        var0 = func_1D38(var1, var2);\n        storage[0x09] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xddc9c30275a04c48091f24199f9c405765de34d979d6847f5b9798a57232d2e5]);\n    }\n    \n    function increaseApproval(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x199a;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_1D38(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x03] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_1CE4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1CFD(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 != 0x00) {\n            var temp0 = arg0;\n            var1 = temp0 * arg1;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_1D31:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1D31;\n        }\n    }\n    \n    function func_1D38(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1D56(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_1D71(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x1ed7;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_1CE4(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x1f6a;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1D38(var2, var3);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x203b;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1CE4(var2, var3);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp3;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function func_212B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x2206;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_1CE4(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x2299;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_1D38(var2, var3);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_0107:\n            var var0 = 0x0111;\n            var var1 = msg.sender;\n            var var2 = msg.value;\n            var0 = func_06E9(var1, var2);\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x05d2035b) {\n                // Dispatch table entry for mintingFinished()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0127;\n                var2 = mintingFinished();\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = !!var2;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0154;\n                var2 = name();\n                var temp2 = memory[0x40:0x60];\n                var var3 = temp2;\n                var var4 = var3;\n                var temp3 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp3 - var4;\n                var temp4 = var2;\n                memory[temp3:temp3 + 0x20] = memory[temp4:temp4 + 0x20];\n                var var5 = temp3 + 0x20;\n                var var7 = memory[temp4:temp4 + 0x20];\n                var var6 = temp4 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_0194:\n                    var temp5 = var7;\n                    var5 = temp5 + var5;\n                    var6 = temp5 & 0x1f;\n                \n                    if (!var6) {\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + var5 - temp6];\n                    } else {\n                        var temp7 = var6;\n                        var temp8 = var5 - temp7;\n                        memory[temp8:temp8 + 0x20] = ~(0x0100 ** (0x20 - temp7) - 0x01) & memory[temp8:temp8 + 0x20];\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n                    }\n                } else {\n                label_0182:\n                    var temp10 = var11;\n                    memory[var9 + temp10:var9 + temp10 + 0x20] = memory[var10 + temp10:var10 + temp10 + 0x20];\n                    var11 = temp10 + 0x20;\n                \n                    if (var11 >= var8) { goto label_0194; }\n                    else { goto label_0182; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x020f;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = !!var1;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x023c;\n                var1 = totalSupply();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + (temp13 + 0x20) - temp14];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02b1;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = !!var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + (temp15 + 0x20) - temp16];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02de;\n                var2 = decimals();\n                var temp17 = memory[0x40:0x60];\n                memory[temp17:temp17 + 0x20] = var2 & 0xff;\n                var temp18 = memory[0x40:0x60];\n                return memory[temp18:temp18 + (temp17 + 0x20) - temp18];\n            } else if (var0 == 0x40c10f19) {\n                // Dispatch table entry for mint(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x033a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = mint(var2, var3);\n                var temp19 = memory[0x40:0x60];\n                memory[temp19:temp19 + 0x20] = !!var1;\n                var temp20 = memory[0x40:0x60];\n                return memory[temp20:temp20 + (temp19 + 0x20) - temp20];\n            } else if (var0 == 0x4634d81c) {\n                // Dispatch table entry for getDividends(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x038b;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = getDividends(var2);\n            \n            label_038B:\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + (temp21 + 0x20) - temp22];\n            } else if (var0 == 0x66188463) {\n                // Dispatch table entry for decreaseApproval(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e1;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = decreaseApproval(var2, var3);\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = !!var1;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + (temp23 + 0x20) - temp24];\n            } else if (var0 == 0x6cfb2c9c) {\n                // Dispatch table entry for payoutToAddress(address[])\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0427;\n                var temp25 = msg.data[0x04:0x24] + 0x04;\n                var3 = msg.data[temp25:temp25 + 0x20];\n                var2 = temp25 + 0x20;\n                payoutToAddress(var2, var3);\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0460;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var1;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0x7d64bcb4) {\n                // Dispatch table entry for finishMinting()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0489;\n                var1 = finishMinting();\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = !!var1;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04b6;\n                var2 = owner();\n                var temp30 = memory[0x40:0x60];\n                memory[temp30:temp30 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp31 = memory[0x40:0x60];\n                return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x050b;\n                var2 = symbol();\n                var temp32 = memory[0x40:0x60];\n                var3 = temp32;\n                var4 = var3;\n                var temp33 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp33 - var4;\n                var temp34 = var2;\n                memory[temp33:temp33 + 0x20] = memory[temp34:temp34 + 0x20];\n                var5 = temp33 + 0x20;\n                var7 = memory[temp34:temp34 + 0x20];\n                var6 = temp34 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_054B:\n                    var temp35 = var7;\n                    var5 = temp35 + var5;\n                    var6 = temp35 & 0x1f;\n                \n                    if (!var6) {\n                        var temp36 = memory[0x40:0x60];\n                        return memory[temp36:temp36 + var5 - temp36];\n                    } else {\n                        var temp37 = var6;\n                        var temp38 = var5 - temp37;\n                        memory[temp38:temp38 + 0x20] = ~(0x0100 ** (0x20 - temp37) - 0x01) & memory[temp38:temp38 + 0x20];\n                        var temp39 = memory[0x40:0x60];\n                        return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n                    }\n                } else {\n                label_0539:\n                    var temp40 = var11;\n                    memory[var9 + temp40:var9 + temp40 + 0x20] = memory[var10 + temp40:var10 + temp40 + 0x20];\n                    var11 = temp40 + 0x20;\n                \n                    if (var11 >= var8) { goto label_054B; }\n                    else { goto label_0539; }\n                }\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05c6;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = !!var1;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x05e8;\n                deposit();\n                stop();\n            } else if (var0 == 0xd73dd623) {\n                // Dispatch table entry for increaseApproval(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x062a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = increaseApproval(var2, var3);\n                var temp43 = memory[0x40:0x60];\n                memory[temp43:temp43 + 0x20] = !!var1;\n                var temp44 = memory[0x40:0x60];\n                return memory[temp44:temp44 + (temp43 + 0x20) - temp44];\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x069a;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp45 = memory[0x40:0x60];\n                memory[temp45:temp45 + 0x20] = var1;\n                var temp46 = memory[0x40:0x60];\n                return memory[temp46:temp46 + (temp45 + 0x20) - temp46];\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06e7;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_0107; }\n        }\n    }\n    \n    function func_06E9(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0;\n        var var5 = 0x00;\n        var var6 = 0x00;\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var4 = keccak256(memory[0x00:0x40]);\n        var var7 = 0x0769;\n        var var8 = storage[0x08];\n        var var9 = storage[var4];\n        var7 = func_1CE4(var8, var9);\n        var5 = var7;\n    \n        if (var5 <= 0x00) {\n        label_0832:\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var1 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n            var7 = 0x088c;\n            var8 = storage[0x09];\n            var9 = var1;\n            var7 = func_1CE4(var8, var9);\n            storage[0x09] = var7;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            storage[keccak256(memory[0x00:0x40]) + 0x01] = 0x00;\n            var7 = 0x08ed;\n            var8 = var1;\n            var9 = arg1;\n            var7 = func_1D38(var8, var9);\n            var2 = var7;\n        \n            if (var2 <= 0x00) {\n            label_0939:\n            \n                if (var1 <= 0x00) { return 0x01; }\n            \n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var1;\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x737c69225d647e5994eab1a6c301bf6d9232beb2759ae1e27a8966b4732bc489, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n                var temp2 = var2;\n                var temp3 = memory[0x40:0x60];\n                var temp4;\n                temp4, memory[temp3:temp3 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!temp2 * 0x08fc).value(temp2)(memory[temp3:temp3 + memory[0x40:0x60] - temp3]);\n            \n                if (temp4) { goto label_0939; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var7 = 0x07db;\n            var8 = 0x07c8;\n            memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var9 = storage[keccak256(memory[0x00:0x40])];\n            var var10 = var5;\n            var8 = func_1CFD(var9, var10);\n            var7 = func_07C8(var4, var8);\n            var temp5 = var7;\n            var6 = temp5;\n            var7 = 0x0808;\n            var8 = 0x07f5;\n            var9 = var6;\n            var10 = storage[0x01];\n            var8 = func_1D56(var9, var10);\n            var7 = func_07F5(var4, var8);\n            storage[var4 + 0x01] = var7;\n            var7 = storage[0x01];\n            var8 = var6;\n        \n            if (!var7) { assert(); }\n        \n            var temp6 = var4;\n            storage[temp6 + 0x02] = var8 % var7;\n            storage[temp6] = storage[0x08];\n            goto label_0832;\n        }\n    }\n    \n    function func_07C8(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_07F5(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function mintingFinished() returns (var r0) { return storage[0x03] / 0x0100 ** 0x14 & 0xff; }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x04;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0A4A:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0A41; }\n        \n        label_0A2D:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0A2D; }\n        \n        label_0A41:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0A4A;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_0A4A;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        var var3 = 0x00;\n        var var4 = 0x00;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var2 = keccak256(memory[0x00:0x40]);\n        var var5 = 0x0bcb;\n        var var6 = storage[0x08];\n        var var7 = storage[var2];\n        var5 = func_1CE4(var6, var7);\n        var3 = var5;\n    \n        if (var3 <= 0x00) {\n        label_0C94:\n            var5 = arg1;\n            var7 = 0x00;\n            var var8 = 0x00;\n            memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var6 = keccak256(memory[0x00:0x40]);\n            var var9 = 0x0cf4;\n            var var10 = storage[0x08];\n            var var11 = storage[var6];\n            var9 = func_1CE4(var10, var11);\n            var7 = var9;\n        \n            if (var7 <= 0x00) {\n            label_0DBD:\n                var9 = 0x0dc8;\n                var10 = arg0;\n                var11 = arg1;\n                var var12 = arg2;\n                return func_1D71(var10, var11, var12);\n            } else {\n                var9 = 0x0d66;\n                var10 = 0x0d53;\n                memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var11 = storage[keccak256(memory[0x00:0x40])];\n                var12 = var7;\n                var10 = func_1CFD(var11, var12);\n                var9 = func_0D53(var6, var10);\n                var temp0 = var9;\n                var8 = temp0;\n                var9 = 0x0d93;\n                var10 = 0x0d80;\n                var11 = var8;\n                var12 = storage[0x01];\n                var10 = func_1D56(var11, var12);\n                var9 = func_0D80(var6, var10);\n                storage[var6 + 0x01] = var9;\n                var9 = storage[0x01];\n                var10 = var8;\n            \n                if (!var9) { assert(); }\n            \n                var temp1 = var6;\n                storage[temp1 + 0x02] = var10 % var9;\n                storage[temp1] = storage[0x08];\n                goto label_0DBD;\n            }\n        } else {\n            var5 = 0x0c3d;\n            var6 = 0x0c2a;\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var7 = storage[keccak256(memory[0x00:0x40])];\n            var8 = var3;\n            var6 = func_1CFD(var7, var8);\n            var5 = func_0C2A(var2, var6);\n            var temp2 = var5;\n            var4 = temp2;\n            var5 = 0x0c6a;\n            var6 = 0x0c57;\n            var7 = var4;\n            var8 = storage[0x01];\n            var6 = func_1D56(var7, var8);\n            var5 = func_0C57(var2, var6);\n            storage[var2 + 0x01] = var5;\n            var5 = storage[0x01];\n            var6 = var4;\n        \n            if (!var5) { assert(); }\n        \n            var temp3 = var2;\n            storage[temp3 + 0x02] = var6 % var5;\n            storage[temp3] = storage[0x08];\n            goto label_0C94;\n        }\n    }\n    \n    function func_0C2A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0C57(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0D53(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0D80(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decimals() returns (var r0) { return storage[0x06] & 0xff; }\n    \n    function mint(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0e7b;\n        var var2 = storage[0x01];\n        var var3 = arg1;\n        var1 = func_1D38(var2, var3);\n        storage[0x01] = var1;\n        var1 = 0x0ed2;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_1D38(var2, var3);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp1 = arg1;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1;\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d4121396885, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp1;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0xffffffffffffffffffffffffffffffffffffffff & 0x00, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function getDividends(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var1 = keccak256(memory[0x00:0x40]);\n        var var4 = 0x1032;\n        var var5 = storage[0x08];\n        var var6 = storage[var1];\n        var4 = func_1CE4(var5, var6);\n        var2 = var4;\n    \n        if (var2 <= 0x00) { return 0x00; }\n    \n        var4 = 0x10a4;\n        var5 = 0x1091;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var6 = storage[keccak256(memory[0x00:0x40])];\n        var var7 = var2;\n        var5 = func_1CFD(var6, var7);\n        var4 = func_1091(var1, var5);\n        var temp0 = var4;\n        var3 = temp0;\n        var4 = 0x10d1;\n        var5 = 0x10be;\n        var6 = var3;\n        var7 = storage[0x01];\n        var5 = func_1D56(var6, var7);\n        return func_10BE(var1, var5);\n    }\n    \n    function func_1091(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_10BE(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function decreaseApproval(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (arg1 <= var1) {\n            var var2 = 0x1209;\n            var var3 = var1;\n            var var4 = arg1;\n            var2 = func_1CE4(var3, var4);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n        \n        label_128A:\n            var temp2 = arg0;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp3;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else {\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x02;\n            var temp6 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp6;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            goto label_128A;\n        }\n    }\n    \n    function payoutToAddress(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (arg1 <= var0) { revert(memory[0x00:0x00]); }\n    \n        if (arg1 > 0x64) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= arg1) {\n        label_13EF:\n            return;\n        } else {\n        label_13AD:\n            var var1 = 0x13e1;\n            var var2 = arg0;\n            var var3 = arg1;\n            var var4 = var0;\n        \n            if (var4 >= var3) { assert(); }\n        \n            var1 = func_13BD(var2, var3, var4);\n            var0 = var0 + 0x01;\n        \n            if (var0 >= arg1) { goto label_13EF; }\n            else { goto label_13AD; }\n        }\n    }\n    \n    function func_13BD(var arg0, var arg1, var arg2) returns (var r0) {\n        arg0 = msg.data[arg2 * 0x20 + arg0:arg2 * 0x20 + arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x00;\n        r0 = func_06E9(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function finishMinting() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x03] / 0x0100 ** 0x14 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = (storage[0x03] & ~(0xff * 0x0100 ** 0x14)) | 0x0100 ** 0x14;\n        var temp0 = memory[0x40:0x60];\n        log(memory[temp0:temp0 + memory[0x40:0x60] - temp0], [0xae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa08]);\n        return 0x01;\n    }\n    \n    function owner() returns (var r0) { return storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x05];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x05;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_15C0:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_15B7; }\n        \n        label_15A3:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_15A3; }\n        \n        label_15B7:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_15C0;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_15C0;\n        }\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (!(storage[0x03] / 0x0100 ** 0x14 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = msg.sender;\n        var var3 = 0x00;\n        var var4 = 0x00;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x07;\n        var var2 = keccak256(memory[0x00:0x40]);\n        var var5 = 0x1645;\n        var var6 = storage[0x08];\n        var var7 = storage[var2];\n        var5 = func_1CE4(var6, var7);\n        var3 = var5;\n    \n        if (var3 <= 0x00) {\n        label_170E:\n            var5 = arg0;\n            var7 = 0x00;\n            var var8 = 0x00;\n            memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x07;\n            var6 = keccak256(memory[0x00:0x40]);\n            var var9 = 0x176e;\n            var var10 = storage[0x08];\n            var var11 = storage[var6];\n            var9 = func_1CE4(var10, var11);\n            var7 = var9;\n        \n            if (var7 <= 0x00) {\n            label_1837:\n                var9 = 0x1841;\n                var10 = arg0;\n                var11 = arg1;\n                return func_212B(var10, var11);\n            } else {\n                var9 = 0x17e0;\n                var10 = 0x17cd;\n                memory[0x00:0x20] = var5 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var11 = storage[keccak256(memory[0x00:0x40])];\n                var var12 = var7;\n                var10 = func_1CFD(var11, var12);\n                var9 = func_17CD(var6, var10);\n                var temp0 = var9;\n                var8 = temp0;\n                var9 = 0x180d;\n                var10 = 0x17fa;\n                var11 = var8;\n                var12 = storage[0x01];\n                var10 = func_1D56(var11, var12);\n                var9 = func_17FA(var6, var10);\n                storage[var6 + 0x01] = var9;\n                var9 = storage[0x01];\n                var10 = var8;\n            \n                if (!var9) { assert(); }\n            \n                var temp1 = var6;\n                storage[temp1 + 0x02] = var10 % var9;\n                storage[temp1] = storage[0x08];\n                goto label_1837;\n            }\n        } else {\n            var5 = 0x16b7;\n            var6 = 0x16a4;\n            memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var7 = storage[keccak256(memory[0x00:0x40])];\n            var8 = var3;\n            var6 = func_1CFD(var7, var8);\n            var5 = func_16A4(var2, var6);\n            var temp2 = var5;\n            var4 = temp2;\n            var5 = 0x16e4;\n            var6 = 0x16d1;\n            var7 = var4;\n            var8 = storage[0x01];\n            var6 = func_1D56(var7, var8);\n            var5 = func_16D1(var2, var6);\n            storage[var2 + 0x01] = var5;\n            var5 = storage[0x01];\n            var6 = var4;\n        \n            if (!var5) { assert(); }\n        \n            var temp3 = var2;\n            storage[temp3 + 0x02] = var6 % var5;\n            storage[temp3] = storage[0x08];\n            goto label_170E;\n        }\n    }\n    \n    function func_16A4(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_16D1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_17CD(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x02];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_17FA(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        arg1 = storage[arg0 + 0x01];\n        var var0 = temp0;\n        r0 = func_1D38(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function deposit() {\n        if (msg.value <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var0 = 0x188c;\n        var var1 = address(this).balance;\n        var var2 = storage[0x09];\n        var0 = func_1CE4(var1, var2);\n    \n        if (msg.value > var0) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x18af;\n        var1 = storage[0x08];\n        var2 = msg.value;\n        var0 = func_1D38(var1, var2);\n        storage[0x08] = var0;\n        var0 = 0x18ca;\n        var1 = storage[0x09];\n        var2 = msg.value;\n        var0 = func_1D38(var1, var2);\n        storage[0x09] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xddc9c30275a04c48091f24199f9c405765de34d979d6847f5b9798a57232d2e5]);\n    }\n    \n    function increaseApproval(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x199a;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_1D38(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x02;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = storage[keccak256(memory[0x00:0x40])];\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == 0xffffffffffffffffffffffffffffffffffffffff & 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x03] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-1] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        storage[0x03] = (temp0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_1CE4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function func_1CFD(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 != 0x00) {\n            var temp0 = arg0;\n            var1 = temp0 * arg1;\n            var var2 = arg1;\n            var var3 = temp0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            if (var4 / var3 != var2) { assert(); }\n        \n            var0 = var1;\n        \n        label_1D31:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_1D31;\n        }\n    }\n    \n    function func_1D38(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = temp0 + arg1;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_1D56(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_1D71(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x1ed7;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg2;\n        var1 = func_1CE4(var2, var3);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x1f6a;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1D38(var2, var3);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x203b;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg2;\n        var1 = func_1CE4(var2, var3);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp3;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg2;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function func_212B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff == var0 & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x2206;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var3 = arg1;\n        var1 = func_1CE4(var2, var3);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var1 = 0x2299;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var3 = arg1;\n        var1 = func_1D38(var2, var3);\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        storage[keccak256(memory[0x00:0x40])] = var1;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 34.02237153053284,
	"usage": {
		"completion_tokens": 468,
		"prompt_tokens": 14972,
		"total_tokens": 15440
	}
}