{
	"address": "0xb9dad061b4ada5825abc2c9914e89181c0cdc56c",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's the Solidity contract code that corresponds to the decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping(address => uint256) balances; // This assumes storage[0x01] is balances\n    mapping(address => mapping(address => uint256)) allowed; // This assumes storage[0x0d] is allowed\n    mapping(address => uint256) privateUser; // This assumes storage[0x07] is privateUser\n    uint256 totalSupply_; // This assumes storage[0x02] is totalSupply_\n    uint256 totalSold; // This assumes storage[0x03] is totalSold\n    uint256 price; // This assumes storage[0x04] is price\n    address owner; // This assumes storage[0x05] is owner\n    address finance; // This assumes storage[0x06] is finance\n    address jackpot; // This assumes storage[0x09] is jackpot\n    address shareContract; // This assumes storage[0x0a] is shareContract\n    string name; // This assumes storage[0x0c] is name\n    string symbol; // This assumes storage[0x10] is symbol\n    uint8 decimals; // This assumes storage[0x11] is decimals\n\n    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);\n    event Transfer(address indexed from, address indexed to, uint tokens);\n\n    constructor() public {\n        owner = msg.sender;\n        totalSupply_ = 1000000; // arbitrary number\n        balances[owner] = totalSupply_;\n        name = \"Token\";\n        decimals = 18;\n        symbol = \"TKN\";\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply_;\n    }\n\n    function balanceOf(address tokenOwner) public view returns (uint) {\n        return balances[tokenOwner];\n    }\n\n    function allowance(address tokenOwner, address delegate) public view returns (uint) {\n        return allowed[tokenOwner][delegate];\n    }\n\n    function transfer(address receiver, uint numTokens) public returns (bool) {\n        require(numTokens <= balances[msg.sender]);\n        balances[msg.sender] = balances[msg.sender] - numTokens;\n        balances[receiver] = balances[receiver] + numTokens;\n        emit Transfer(msg.sender, receiver, numTokens);\n        return true;\n    }\n\n    function approve(address delegate, uint numTokens) public returns (bool) {\n        allowed[msg.sender][delegate] = numTokens;\n        emit Approval(msg.sender, delegate, numTokens);\n        return true;\n    }\n\n    function transferFrom(address owner, address buyer, uint numTokens) public returns (bool) {\n        require(numTokens <= balances[owner]);    \n        require(numTokens <= allowed[owner][msg.sender]);\n        balances[owner] = balances[owner] - numTokens;\n        allowed[owner][msg.sender] = allowed[owner][msg.sender] - numTokens;\n        balances[buyer] = balances[buyer] + numTokens;\n        emit Transfer(owner, buyer, numTokens);\n        return true;\n    }\n}\n```\nPlease note that I made assumptions for storage locations due to the lack of specific information in the original decompiled bytecode. In a real-world scenario, these variables would need to be determined from the original source code or by analyzing the contract's behavior.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474388,
	"id": "chatcmpl-8MvMCEgo97VzXUvUnQF23shnNQ3r0",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0132:\n        \n            if (msg.value > 0x00) {\n                var var0 = 0x01b1;\n                var var1 = storage[0x08];\n                var var2 = 0x01a5;\n                var var3 = msg.value;\n                var var4 = storage[0x01];\n                var2 = func_0519(var3, var4);\n                var0 = func_01A5(var1, var2);\n                var temp0 = var0;\n                storage[0x08] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = msg.value;\n                memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0xdcde97043025953bda118fffd86c06bbaa28517d73aa8edd32bf74404426f6ed, msg.sender]);\n                stop();\n            } else {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n                memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x17;\n                memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x416d6f756e74206d7573742062652070726f7669646564000000000000000000;\n                var temp4 = memory[0x40:0x60];\n                revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0212;\n                var2 = name();\n            \n            label_0212:\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x20;\n                var temp6 = var2;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = memory[temp6:temp6 + 0x20];\n                var3 = temp5;\n                var4 = var3;\n                var var5 = var4 + 0x40;\n                var var6 = temp6 + 0x20;\n                var var7 = memory[temp6:temp6 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_024C:\n                    var temp7 = var7;\n                    var5 = temp7 + var5;\n                    var6 = temp7 & 0x1f;\n                \n                    if (!var6) {\n                        var temp8 = memory[0x40:0x60];\n                        return memory[temp8:temp8 + var5 - temp8];\n                    } else {\n                        var temp9 = var6;\n                        var temp10 = var5 - temp9;\n                        memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                        var temp11 = memory[0x40:0x60];\n                        return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n                    }\n                } else {\n                label_023D:\n                    var temp12 = var11;\n                    memory[temp12 + var9:temp12 + var9 + 0x20] = memory[temp12 + var10:temp12 + var10 + 0x20];\n                    var11 = temp12 + 0x20;\n                \n                    if (var11 >= var8) { goto label_024C; }\n                    else { goto label_023D; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02ab;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_02AB:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + temp13 - temp14 + 0x20];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var1 = totalSupply();\n            \n            label_02D4:\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + temp15 - temp16 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02ab;\n                var temp17 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp17 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp17;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_02AB;\n            } else if (var0 == 0x30cc248e) {\n                // Dispatch table entry for increaseProfit()\n                var1 = 0x02ab;\n                var1 = increaseProfit();\n                goto label_02AB;\n            } else if (var0 == 0x313b7b19) {\n                // Dispatch table entry for finance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032d;\n                var2 = finance();\n            \n            label_032D:\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + temp18 - temp19 + 0x20];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035e;\n                var2 = decimals();\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = var2 & 0xff;\n                var temp21 = memory[0x40:0x60];\n                return memory[temp21:temp21 + temp20 - temp21 + 0x20];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                withdraw();\n                stop();\n            } else if (var0 == 0x6b31ee01) {\n                // Dispatch table entry for jackpot()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032d;\n                var2 = jackpot();\n                goto label_032D;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_02D4;\n            } else if (var0 == 0x7de7a18d) {\n                // Dispatch table entry for setShare(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setShare(var2);\n                stop();\n            } else if (var0 == 0x7e95385c) {\n                // Dispatch table entry for setJackpot(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setJackpot(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032d;\n                var2 = owner();\n                goto label_032D;\n            } else if (var0 == 0x9106d7ba) {\n                // Dispatch table entry for totalSold()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var2 = totalSold();\n                goto label_02D4;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0212;\n                var2 = symbol();\n                goto label_0212;\n            } else if (var0 == 0x9b8d3064) {\n                // Dispatch table entry for setFinance(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setFinance(var2);\n                stop();\n            } else if (var0 == 0xa035b1fe) {\n                // Dispatch table entry for price()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var2 = price();\n                goto label_02D4;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02ab;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_02AB;\n            } else if (var0 == 0xad606c72) {\n                // Dispatch table entry for devWithdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                devWithdraw();\n                stop();\n            } else if (var0 == 0xc600e1dc) {\n                // Dispatch table entry for getProfit(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = getProfit(var2);\n                goto label_02D4;\n            } else if (var0 == 0xd1f55764) {\n                // Dispatch table entry for shareContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032d;\n                var2 = shareContract();\n                goto label_032D;\n            } else if (var0 == 0xd96a094a) {\n                // Dispatch table entry for buy(uint256)\n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24];\n                buy(var2);\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var temp22 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp22 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp22;\n                var1 = allowance(var2, var3);\n                goto label_02D4;\n            } else { goto label_0132; }\n        }\n    }\n    \n    function func_01A5(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0558(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0519(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= var1) { assert(); }\n    \n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var2 = arg1;\n        var3 = arg0;\n    \n        if (!var2) { assert(); }\n    \n        if (arg0 == arg1 * var1 + var3 % var2) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0558(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x03;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_05ED:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05E4; }\n        \n        label_05D0:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05D0; }\n        \n        label_05E4:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_05ED;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_05ED;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 > var0;\n    \n        if (var1) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x0d;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_0634; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1) {\n        label_0634:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x0d;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x0d;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp2;\n        memory[0x20:0x40] = 0x0d;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp3;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] - arg2;\n        var var1 = 0x070e;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        return func_0F25(var2, var3, var4);\n    }\n    \n    function increaseProfit() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.value <= var0) {\n            var0 = 0x00;\n        \n        label_069E:\n            return var0;\n        } else {\n            var var1 = 0x073b;\n            var var2 = storage[0x08];\n            var var3 = 0x01a5;\n            var var4 = msg.value;\n            var var5 = storage[0x01];\n            var3 = func_0519(var4, var5);\n            var1 = func_01A5(var2, var3);\n            var temp0 = var1;\n            storage[0x08] = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = msg.value;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0xdcde97043025953bda118fffd86c06bbaa28517d73aa8edd32bf74404426f6ed, msg.sender]);\n            var0 = 0x01;\n            goto label_069E;\n        }\n    }\n    \n    function finance() returns (var r0) { return storage[0x06] & 0x02 ** 0xa0 - 0x01; }\n    \n    function decimals() returns (var r0) { return storage[0x00] & 0xff; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = 0x07b8;\n        var var2 = msg.sender;\n        var1 = getProfit(var2);\n        var0 = var1;\n    \n        if (var0 > 0x00) {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364, msg.sender]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x07;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var1 = 0x087a;\n            var var3 = var0;\n            var1 = func_0558(var2, var3);\n            var temp2 = msg.sender;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x07;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var temp3 = memory[0x40:0x60];\n            var temp4 = var0;\n            var temp5;\n            temp5, memory[temp3:temp3 + 0x00] = address(temp2).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp3:temp3 + 0x00]);\n            var1 = !temp5;\n        \n            if (!var1) { return; }\n        \n            var temp6 = returndata.length;\n            memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x11;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x4e6f206361736820617661696c61626c65000000000000000000000000000000;\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + temp7 - temp8 + 0x64]);\n        }\n    }\n    \n    function jackpot() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setShare(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 == temp0 & msg.sender) {\n            storage[0x0a] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x0a] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x0a;\n            var temp2 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x1150:0x1170];\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp2;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp1 - temp4 + 0x64]);\n        }\n    }\n    \n    function setJackpot(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 == temp0 & msg.sender) {\n            storage[0x09] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x09] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x0a;\n            var temp2 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x1150:0x1170];\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp2;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp1 - temp4 + 0x64]);\n        }\n    }\n    \n    function owner() returns (var r0) { return storage[0x05] & 0x02 ** 0xa0 - 0x01; }\n    \n    function totalSold() returns (var r0) { return storage[0x02]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x04;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_05ED:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05E4; }\n        \n        label_05D0:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05D0; }\n        \n        label_05E4:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_05ED;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_05ED;\n        }\n    }\n    \n    function setFinance(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 == temp0 & msg.sender) {\n            storage[0x06] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x06] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x0a;\n            var temp2 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x1150:0x1170];\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp2;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp1 - temp4 + 0x64]);\n        }\n    }\n    \n    function price() returns (var r0) { return 0x0de0b6b3a7640000; }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b01;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        return func_0F25(var2, var3, var4);\n    }\n    \n    function devWithdraw() {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 == temp0 & msg.sender) {\n            var var1 = 0x0b68;\n            var var2 = address(this);\n            var1 = getProfit(var2);\n            var temp1 = memory[0x40:0x60];\n            var temp2 = var1;\n            memory[temp1:temp1 + 0x20] = temp2;\n            var temp3 = memory[0x40:0x60];\n            var0 = temp2;\n            log(memory[temp3:temp3 + temp1 - temp3 + 0x20], [0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364, msg.sender]);\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x07;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var1 = 0x0bd2;\n            var var3 = var0;\n            var1 = func_0558(var2, var3);\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp4 & address(this);\n            memory[0x20:0x40] = 0x07;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var temp5 = memory[0x40:0x60];\n            var temp6 = var0;\n            var temp7;\n            temp7, memory[temp5:temp5 + 0x00] = address(temp4 & storage[0x05]).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp5:temp5 + 0x00]);\n            var1 = !temp7;\n        \n            if (!var1) { return; }\n        \n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x0a;\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x1150:0x1170];\n            var temp11 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp10;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = temp11;\n            var temp12 = memory[0x40:0x60];\n            revert(memory[temp12:temp12 + temp9 - temp12 + 0x64]);\n        }\n    }\n    \n    function getProfit(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp0 = storage[keccak256(memory[var0:var0 + 0x40])];\n        memory[0x20:0x40] = 0x0b;\n        var temp1 = storage[keccak256(memory[var0:var0 + 0x40])];\n        memory[0x20:0x40] = 0x0c;\n        var var2 = temp0;\n        var var1 = 0x0c76;\n        var var3 = 0x0c6a;\n        var var6 = storage[0x08];\n        var var4 = temp1;\n        var var7 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var5 = 0x01a5;\n        var5 = func_1112(var6, var7);\n        var3 = func_01A5(var4, var5);\n        return func_0C6A(var2, var3);\n    }\n    \n    function func_0C6A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function shareContract() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function buy(var arg0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = address(var1).code.length;\n    \n        if (var2) {\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x11;\n            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x736f7272792068756d616e73206f6e6c79000000000000000000000000000000;\n            var temp14 = memory[0x40:0x60];\n            revert(memory[temp14:temp14 + temp13 - temp14 + 0x64]);\n        } else if (arg0 > 0x00) {\n            var var3 = 0x0d0b;\n            var var4 = arg0;\n            var var5 = 0x0de0b6b3a7640000;\n            var3 = func_1112(var4, var5);\n            var0 = var3;\n        \n            if (var0 != msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x0c;\n        \n            if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 <= storage[0x01] - storage[0x02]) {\n                var3 = 0x0da7;\n                var4 = address(this);\n                var5 = msg.sender;\n                var var6 = arg0;\n                var3 = func_0F25(var4, var5, var6);\n                var3 = storage[0x06] & 0x02 ** 0xa0 - 0x01;\n                var4 = 0x08fc;\n                var5 = 0x0dd9;\n                var6 = 0x64;\n                var var7 = 0x0dcd;\n                var var8 = var0;\n                var var9 = 0x3c;\n                var7 = func_1112(var8, var9);\n                var5 = func_0DCD(var6, var7);\n                var temp0 = memory[0x40:0x60];\n                var temp1 = var5;\n                var temp2;\n                temp2, memory[temp0:temp0 + 0x00] = address(var3).call.gas(var4 * !temp1).value(temp1)(memory[temp0:temp0 + 0x00]);\n                var3 = !temp2;\n            \n                if (!var3) {\n                    var3 = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                    var4 = 0x08fc;\n                    var5 = 0x0e27;\n                    var6 = 0x64;\n                    var7 = 0x0dcd;\n                    var8 = var0;\n                    var9 = 0x14;\n                    var7 = func_1112(var8, var9);\n                    var5 = func_0DCD(var6, var7);\n                    var temp3 = memory[0x40:0x60];\n                    var temp4 = var5;\n                    var temp5;\n                    temp5, memory[temp3:temp3 + 0x00] = address(var3).call.gas(var4 * !temp4).value(temp4)(memory[temp3:temp3 + 0x00]);\n                    var3 = !temp5;\n                \n                    if (!var3) {\n                        var3 = storage[0x0a] & 0x02 ** 0xa0 - 0x01;\n                        var4 = 0x30cc248e;\n                        var5 = 0x0e77;\n                        var6 = 0x64;\n                        var7 = 0x0dcd;\n                        var8 = var0;\n                        var9 = 0x14;\n                        var7 = func_1112(var8, var9);\n                        var5 = func_0DCD(var6, var7);\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = (var4 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                        var6 = temp6 + 0x04;\n                        var7 = 0x20;\n                        var8 = memory[0x40:0x60];\n                        var9 = var6 - var8;\n                        var var10 = var8;\n                        var var11 = var5;\n                        var var12 = var3;\n                        var var13 = !address(var12).code.length;\n                    \n                        if (var13) { revert(memory[0x00:0x00]); }\n                    \n                        var temp7;\n                        temp7, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                        var7 = !temp7;\n                    \n                        if (!var7) {\n                            var3 = memory[0x40:0x60];\n                            var4 = returndata.length;\n                        \n                            if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            storage[0x02] = arg0 + storage[0x02];\n                            return;\n                        } else {\n                            var temp8 = returndata.length;\n                            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp9 = returndata.length;\n                        memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp10 = returndata.length;\n                    memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n                memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x08;\n                memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = 0x536f6c64206f7574000000000000000000000000000000000000000000000000;\n                var temp12 = memory[0x40:0x60];\n                revert(memory[temp12:temp12 + temp11 - temp12 + 0x64]);\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0DCD(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0519(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x0d;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0F25(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (arg1 & 0x02 ** 0xa0 - 0x01) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (arg1 & temp0 == temp0 & arg0) { revert(memory[0x00:0x00]); }\n        \n            var var4 = arg2 > 0x00;\n        \n            if (var4) {\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0c;\n            \n                if (arg2 <= storage[keccak256(memory[0x00:0x40])]) { goto label_0FD6; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var4) {\n            label_0FD6:\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0c;\n                var temp1 = storage[keccak256(memory[0x00:0x40])];\n                var1 = arg2 + temp1;\n            \n                if (var1 < temp1) { assert(); }\n            \n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = arg0 & temp2;\n                memory[0x00:0x20] = temp3;\n                memory[0x20:0x40] = 0x0c;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                var temp5 = storage[temp4];\n                memory[0x00:0x20] = arg1 & temp2;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                memory[0x00:0x20] = temp3;\n                storage[temp4] = temp5 - arg2;\n                var2 = temp5 - arg2;\n                var4 = 0x1046;\n                var var5 = arg2;\n                var var6 = storage[0x08];\n                var4 = func_1112(var5, var6);\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0b;\n                var temp6 = var4;\n                var3 = temp6;\n                var5 = storage[keccak256(memory[0x00:0x40])];\n                var4 = 0x1072;\n                var6 = var3;\n                var4 = func_0558(var5, var6);\n                var temp7 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg0 & temp7;\n                memory[0x20:0x40] = 0x0b;\n                storage[keccak256(memory[0x00:0x40])] = var4;\n                memory[0x00:0x20] = arg1 & temp7;\n                memory[0x20:0x40] = 0x07;\n                var5 = storage[keccak256(memory[0x00:0x40])];\n                var4 = 0x10ae;\n                var6 = var3;\n                var4 = func_0558(var5, var6);\n                var temp8 = 0x02 ** 0xa0 - 0x01;\n                var temp9 = arg1 & temp8;\n                memory[0x00:0x20] = temp9;\n                memory[0x20:0x40] = 0x07;\n                storage[keccak256(memory[0x00:0x40])] = var4;\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = arg2;\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + temp10 - temp11 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-8] & 0x02 ** 0xa0 - 0x01, stack[-7] & 0x02 ** 0xa0 - 0x01]);\n                return 0x01;\n            } else { revert(memory[0x00:0x00]); }\n        } else {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n            memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x1f;\n            memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = 0x526563656976657220616464726573732063616e6e6f74206265206e756c6c00;\n            var temp13 = memory[0x40:0x60];\n            revert(memory[temp13:temp13 + temp12 - temp13 + 0x64]);\n        }\n    }\n    \n    function func_1112(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0132:\n        \n            if (msg.value > 0x00) {\n                var var0 = 0x01b1;\n                var var1 = storage[0x08];\n                var var2 = 0x01a5;\n                var var3 = msg.value;\n                var var4 = storage[0x01];\n                var2 = func_0519(var3, var4);\n                var0 = func_01A5(var1, var2);\n                var temp0 = var0;\n                storage[0x08] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = msg.value;\n                memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0xdcde97043025953bda118fffd86c06bbaa28517d73aa8edd32bf74404426f6ed, msg.sender]);\n                stop();\n            } else {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n                memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x17;\n                memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x416d6f756e74206d7573742062652070726f7669646564000000000000000000;\n                var temp4 = memory[0x40:0x60];\n                revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0212;\n                var2 = name();\n            \n            label_0212:\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x20;\n                var temp6 = var2;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = memory[temp6:temp6 + 0x20];\n                var3 = temp5;\n                var4 = var3;\n                var var5 = var4 + 0x40;\n                var var6 = temp6 + 0x20;\n                var var7 = memory[temp6:temp6 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_024C:\n                    var temp7 = var7;\n                    var5 = temp7 + var5;\n                    var6 = temp7 & 0x1f;\n                \n                    if (!var6) {\n                        var temp8 = memory[0x40:0x60];\n                        return memory[temp8:temp8 + var5 - temp8];\n                    } else {\n                        var temp9 = var6;\n                        var temp10 = var5 - temp9;\n                        memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                        var temp11 = memory[0x40:0x60];\n                        return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n                    }\n                } else {\n                label_023D:\n                    var temp12 = var11;\n                    memory[temp12 + var9:temp12 + var9 + 0x20] = memory[temp12 + var10:temp12 + var10 + 0x20];\n                    var11 = temp12 + 0x20;\n                \n                    if (var11 >= var8) { goto label_024C; }\n                    else { goto label_023D; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02ab;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_02AB:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + temp13 - temp14 + 0x20];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var1 = totalSupply();\n            \n            label_02D4:\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + temp15 - temp16 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02ab;\n                var temp17 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp17 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp17;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_02AB;\n            } else if (var0 == 0x30cc248e) {\n                // Dispatch table entry for increaseProfit()\n                var1 = 0x02ab;\n                var1 = increaseProfit();\n                goto label_02AB;\n            } else if (var0 == 0x313b7b19) {\n                // Dispatch table entry for finance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032d;\n                var2 = finance();\n            \n            label_032D:\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + temp18 - temp19 + 0x20];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035e;\n                var2 = decimals();\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = var2 & 0xff;\n                var temp21 = memory[0x40:0x60];\n                return memory[temp21:temp21 + temp20 - temp21 + 0x20];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                withdraw();\n                stop();\n            } else if (var0 == 0x6b31ee01) {\n                // Dispatch table entry for jackpot()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032d;\n                var2 = jackpot();\n                goto label_032D;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_02D4;\n            } else if (var0 == 0x7de7a18d) {\n                // Dispatch table entry for setShare(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setShare(var2);\n                stop();\n            } else if (var0 == 0x7e95385c) {\n                // Dispatch table entry for setJackpot(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setJackpot(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032d;\n                var2 = owner();\n                goto label_032D;\n            } else if (var0 == 0x9106d7ba) {\n                // Dispatch table entry for totalSold()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var2 = totalSold();\n                goto label_02D4;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0212;\n                var2 = symbol();\n                goto label_0212;\n            } else if (var0 == 0x9b8d3064) {\n                // Dispatch table entry for setFinance(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setFinance(var2);\n                stop();\n            } else if (var0 == 0xa035b1fe) {\n                // Dispatch table entry for price()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var2 = price();\n                goto label_02D4;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02ab;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_02AB;\n            } else if (var0 == 0xad606c72) {\n                // Dispatch table entry for devWithdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                devWithdraw();\n                stop();\n            } else if (var0 == 0xc600e1dc) {\n                // Dispatch table entry for getProfit(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = getProfit(var2);\n                goto label_02D4;\n            } else if (var0 == 0xd1f55764) {\n                // Dispatch table entry for shareContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032d;\n                var2 = shareContract();\n                goto label_032D;\n            } else if (var0 == 0xd96a094a) {\n                // Dispatch table entry for buy(uint256)\n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24];\n                buy(var2);\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var temp22 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp22 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp22;\n                var1 = allowance(var2, var3);\n                goto label_02D4;\n            } else { goto label_0132; }\n        }\n    }\n    \n    function func_01A5(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0558(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0519(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= var1) { assert(); }\n    \n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var2 = arg1;\n        var3 = arg0;\n    \n        if (!var2) { assert(); }\n    \n        if (arg0 == arg1 * var1 + var3 % var2) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0558(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x03;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_05ED:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05E4; }\n        \n        label_05D0:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05D0; }\n        \n        label_05E4:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_05ED;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_05ED;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 > var0;\n    \n        if (var1) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x0d;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_0634; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1) {\n        label_0634:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x0d;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x0d;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp2;\n        memory[0x20:0x40] = 0x0d;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp3;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] - arg2;\n        var var1 = 0x070e;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        return func_0F25(var2, var3, var4);\n    }\n    \n    function increaseProfit() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.value <= var0) {\n            var0 = 0x00;\n        \n        label_069E:\n            return var0;\n        } else {\n            var var1 = 0x073b;\n            var var2 = storage[0x08];\n            var var3 = 0x01a5;\n            var var4 = msg.value;\n            var var5 = storage[0x01];\n            var3 = func_0519(var4, var5);\n            var1 = func_01A5(var2, var3);\n            var temp0 = var1;\n            storage[0x08] = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = msg.value;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0xdcde97043025953bda118fffd86c06bbaa28517d73aa8edd32bf74404426f6ed, msg.sender]);\n            var0 = 0x01;\n            goto label_069E;\n        }\n    }\n    \n    function finance() returns (var r0) { return storage[0x06] & 0x02 ** 0xa0 - 0x01; }\n    \n    function decimals() returns (var r0) { return storage[0x00] & 0xff; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = 0x07b8;\n        var var2 = msg.sender;\n        var1 = getProfit(var2);\n        var0 = var1;\n    \n        if (var0 > 0x00) {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364, msg.sender]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x07;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var1 = 0x087a;\n            var var3 = var0;\n            var1 = func_0558(var2, var3);\n            var temp2 = msg.sender;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x07;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var temp3 = memory[0x40:0x60];\n            var temp4 = var0;\n            var temp5;\n            temp5, memory[temp3:temp3 + 0x00] = address(temp2).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp3:temp3 + 0x00]);\n            var1 = !temp5;\n        \n            if (!var1) { return; }\n        \n            var temp6 = returndata.length;\n            memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x11;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x4e6f206361736820617661696c61626c65000000000000000000000000000000;\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + temp7 - temp8 + 0x64]);\n        }\n    }\n    \n    function jackpot() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setShare(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 == temp0 & msg.sender) {\n            storage[0x0a] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x0a] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x0a;\n            var temp2 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x1150:0x1170];\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp2;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp1 - temp4 + 0x64]);\n        }\n    }\n    \n    function setJackpot(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 == temp0 & msg.sender) {\n            storage[0x09] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x09] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x0a;\n            var temp2 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x1150:0x1170];\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp2;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp1 - temp4 + 0x64]);\n        }\n    }\n    \n    function owner() returns (var r0) { return storage[0x05] & 0x02 ** 0xa0 - 0x01; }\n    \n    function totalSold() returns (var r0) { return storage[0x02]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x04;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_05ED:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05E4; }\n        \n        label_05D0:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05D0; }\n        \n        label_05E4:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_05ED;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_05ED;\n        }\n    }\n    \n    function setFinance(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 == temp0 & msg.sender) {\n            storage[0x06] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x06] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x0a;\n            var temp2 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x1150:0x1170];\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp2;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp1 - temp4 + 0x64]);\n        }\n    }\n    \n    function price() returns (var r0) { return 0x0de0b6b3a7640000; }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b01;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        return func_0F25(var2, var3, var4);\n    }\n    \n    function devWithdraw() {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 == temp0 & msg.sender) {\n            var var1 = 0x0b68;\n            var var2 = address(this);\n            var1 = getProfit(var2);\n            var temp1 = memory[0x40:0x60];\n            var temp2 = var1;\n            memory[temp1:temp1 + 0x20] = temp2;\n            var temp3 = memory[0x40:0x60];\n            var0 = temp2;\n            log(memory[temp3:temp3 + temp1 - temp3 + 0x20], [0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364, msg.sender]);\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x07;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var1 = 0x0bd2;\n            var var3 = var0;\n            var1 = func_0558(var2, var3);\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp4 & address(this);\n            memory[0x20:0x40] = 0x07;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var temp5 = memory[0x40:0x60];\n            var temp6 = var0;\n            var temp7;\n            temp7, memory[temp5:temp5 + 0x00] = address(temp4 & storage[0x05]).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp5:temp5 + 0x00]);\n            var1 = !temp7;\n        \n            if (!var1) { return; }\n        \n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x0a;\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x1150:0x1170];\n            var temp11 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp10;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = temp11;\n            var temp12 = memory[0x40:0x60];\n            revert(memory[temp12:temp12 + temp9 - temp12 + 0x64]);\n        }\n    }\n    \n    function getProfit(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp0 = storage[keccak256(memory[var0:var0 + 0x40])];\n        memory[0x20:0x40] = 0x0b;\n        var temp1 = storage[keccak256(memory[var0:var0 + 0x40])];\n        memory[0x20:0x40] = 0x0c;\n        var var2 = temp0;\n        var var1 = 0x0c76;\n        var var3 = 0x0c6a;\n        var var6 = storage[0x08];\n        var var4 = temp1;\n        var var7 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var5 = 0x01a5;\n        var5 = func_1112(var6, var7);\n        var3 = func_01A5(var4, var5);\n        return func_0C6A(var2, var3);\n    }\n    \n    function func_0C6A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function shareContract() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function buy(var arg0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = address(var1).code.length;\n    \n        if (var2) {\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x11;\n            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x736f7272792068756d616e73206f6e6c79000000000000000000000000000000;\n            var temp14 = memory[0x40:0x60];\n            revert(memory[temp14:temp14 + temp13 - temp14 + 0x64]);\n        } else if (arg0 > 0x00) {\n            var var3 = 0x0d0b;\n            var var4 = arg0;\n            var var5 = 0x0de0b6b3a7640000;\n            var3 = func_1112(var4, var5);\n            var0 = var3;\n        \n            if (var0 != msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x0c;\n        \n            if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 <= storage[0x01] - storage[0x02]) {\n                var3 = 0x0da7;\n                var4 = address(this);\n                var5 = msg.sender;\n                var var6 = arg0;\n                var3 = func_0F25(var4, var5, var6);\n                var3 = storage[0x06] & 0x02 ** 0xa0 - 0x01;\n                var4 = 0x08fc;\n                var5 = 0x0dd9;\n                var6 = 0x64;\n                var var7 = 0x0dcd;\n                var var8 = var0;\n                var var9 = 0x3c;\n                var7 = func_1112(var8, var9);\n                var5 = func_0DCD(var6, var7);\n                var temp0 = memory[0x40:0x60];\n                var temp1 = var5;\n                var temp2;\n                temp2, memory[temp0:temp0 + 0x00] = address(var3).call.gas(var4 * !temp1).value(temp1)(memory[temp0:temp0 + 0x00]);\n                var3 = !temp2;\n            \n                if (!var3) {\n                    var3 = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                    var4 = 0x08fc;\n                    var5 = 0x0e27;\n                    var6 = 0x64;\n                    var7 = 0x0dcd;\n                    var8 = var0;\n                    var9 = 0x14;\n                    var7 = func_1112(var8, var9);\n                    var5 = func_0DCD(var6, var7);\n                    var temp3 = memory[0x40:0x60];\n                    var temp4 = var5;\n                    var temp5;\n                    temp5, memory[temp3:temp3 + 0x00] = address(var3).call.gas(var4 * !temp4).value(temp4)(memory[temp3:temp3 + 0x00]);\n                    var3 = !temp5;\n                \n                    if (!var3) {\n                        var3 = storage[0x0a] & 0x02 ** 0xa0 - 0x01;\n                        var4 = 0x30cc248e;\n                        var5 = 0x0e77;\n                        var6 = 0x64;\n                        var7 = 0x0dcd;\n                        var8 = var0;\n                        var9 = 0x14;\n                        var7 = func_1112(var8, var9);\n                        var5 = func_0DCD(var6, var7);\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = (var4 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                        var6 = temp6 + 0x04;\n                        var7 = 0x20;\n                        var8 = memory[0x40:0x60];\n                        var9 = var6 - var8;\n                        var var10 = var8;\n                        var var11 = var5;\n                        var var12 = var3;\n                        var var13 = !address(var12).code.length;\n                    \n                        if (var13) { revert(memory[0x00:0x00]); }\n                    \n                        var temp7;\n                        temp7, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                        var7 = !temp7;\n                    \n                        if (!var7) {\n                            var3 = memory[0x40:0x60];\n                            var4 = returndata.length;\n                        \n                            if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            storage[0x02] = arg0 + storage[0x02];\n                            return;\n                        } else {\n                            var temp8 = returndata.length;\n                            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp9 = returndata.length;\n                        memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp10 = returndata.length;\n                    memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n                memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x08;\n                memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = 0x536f6c64206f7574000000000000000000000000000000000000000000000000;\n                var temp12 = memory[0x40:0x60];\n                revert(memory[temp12:temp12 + temp11 - temp12 + 0x64]);\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0DCD(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0519(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x0d;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0F25(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (arg1 & 0x02 ** 0xa0 - 0x01) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (arg1 & temp0 == temp0 & arg0) { revert(memory[0x00:0x00]); }\n        \n            var var4 = arg2 > 0x00;\n        \n            if (var4) {\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0c;\n            \n                if (arg2 <= storage[keccak256(memory[0x00:0x40])]) { goto label_0FD6; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var4) {\n            label_0FD6:\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0c;\n                var temp1 = storage[keccak256(memory[0x00:0x40])];\n                var1 = arg2 + temp1;\n            \n                if (var1 < temp1) { assert(); }\n            \n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = arg0 & temp2;\n                memory[0x00:0x20] = temp3;\n                memory[0x20:0x40] = 0x0c;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                var temp5 = storage[temp4];\n                memory[0x00:0x20] = arg1 & temp2;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                memory[0x00:0x20] = temp3;\n                storage[temp4] = temp5 - arg2;\n                var2 = temp5 - arg2;\n                var4 = 0x1046;\n                var var5 = arg2;\n                var var6 = storage[0x08];\n                var4 = func_1112(var5, var6);\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0b;\n                var temp6 = var4;\n                var3 = temp6;\n                var5 = storage[keccak256(memory[0x00:0x40])];\n                var4 = 0x1072;\n                var6 = var3;\n                var4 = func_0558(var5, var6);\n                var temp7 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg0 & temp7;\n                memory[0x20:0x40] = 0x0b;\n                storage[keccak256(memory[0x00:0x40])] = var4;\n                memory[0x00:0x20] = arg1 & temp7;\n                memory[0x20:0x40] = 0x07;\n                var5 = storage[keccak256(memory[0x00:0x40])];\n                var4 = 0x10ae;\n                var6 = var3;\n                var4 = func_0558(var5, var6);\n                var temp8 = 0x02 ** 0xa0 - 0x01;\n                var temp9 = arg1 & temp8;\n                memory[0x00:0x20] = temp9;\n                memory[0x20:0x40] = 0x07;\n                storage[keccak256(memory[0x00:0x40])] = var4;\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = arg2;\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + temp10 - temp11 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-8] & 0x02 ** 0xa0 - 0x01, stack[-7] & 0x02 ** 0xa0 - 0x01]);\n                return 0x01;\n            } else { revert(memory[0x00:0x00]); }\n        } else {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n            memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x1f;\n            memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = 0x526563656976657220616464726573732063616e6e6f74206265206e756c6c00;\n            var temp13 = memory[0x40:0x60];\n            revert(memory[temp13:temp13 + temp12 - temp13 + 0x64]);\n        }\n    }\n    \n    function func_1112(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0132:\n        \n            if (msg.value > 0x00) {\n                var var0 = 0x01b1;\n                var var1 = storage[0x08];\n                var var2 = 0x01a5;\n                var var3 = msg.value;\n                var var4 = storage[0x01];\n                var2 = func_0519(var3, var4);\n                var0 = func_01A5(var1, var2);\n                var temp0 = var0;\n                storage[0x08] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = msg.value;\n                memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0xdcde97043025953bda118fffd86c06bbaa28517d73aa8edd32bf74404426f6ed, msg.sender]);\n                stop();\n            } else {\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n                memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x17;\n                memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x416d6f756e74206d7573742062652070726f7669646564000000000000000000;\n                var temp4 = memory[0x40:0x60];\n                revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0212;\n                var2 = name();\n            \n            label_0212:\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x20;\n                var temp6 = var2;\n                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = memory[temp6:temp6 + 0x20];\n                var3 = temp5;\n                var4 = var3;\n                var var5 = var4 + 0x40;\n                var var6 = temp6 + 0x20;\n                var var7 = memory[temp6:temp6 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_024C:\n                    var temp7 = var7;\n                    var5 = temp7 + var5;\n                    var6 = temp7 & 0x1f;\n                \n                    if (!var6) {\n                        var temp8 = memory[0x40:0x60];\n                        return memory[temp8:temp8 + var5 - temp8];\n                    } else {\n                        var temp9 = var6;\n                        var temp10 = var5 - temp9;\n                        memory[temp10:temp10 + 0x20] = ~(0x0100 ** (0x20 - temp9) - 0x01) & memory[temp10:temp10 + 0x20];\n                        var temp11 = memory[0x40:0x60];\n                        return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n                    }\n                } else {\n                label_023D:\n                    var temp12 = var11;\n                    memory[temp12 + var9:temp12 + var9 + 0x20] = memory[temp12 + var10:temp12 + var10 + 0x20];\n                    var11 = temp12 + 0x20;\n                \n                    if (var11 >= var8) { goto label_024C; }\n                    else { goto label_023D; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02ab;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_02AB:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = !!var1;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + temp13 - temp14 + 0x20];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var1 = totalSupply();\n            \n            label_02D4:\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var1;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + temp15 - temp16 + 0x20];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02ab;\n                var temp17 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp17 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp17;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_02AB;\n            } else if (var0 == 0x30cc248e) {\n                // Dispatch table entry for increaseProfit()\n                var1 = 0x02ab;\n                var1 = increaseProfit();\n                goto label_02AB;\n            } else if (var0 == 0x313b7b19) {\n                // Dispatch table entry for finance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032d;\n                var2 = finance();\n            \n            label_032D:\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + temp18 - temp19 + 0x20];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x035e;\n                var2 = decimals();\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = var2 & 0xff;\n                var temp21 = memory[0x40:0x60];\n                return memory[temp21:temp21 + temp20 - temp21 + 0x20];\n            } else if (var0 == 0x3ccfd60b) {\n                // Dispatch table entry for withdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                withdraw();\n                stop();\n            } else if (var0 == 0x6b31ee01) {\n                // Dispatch table entry for jackpot()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032d;\n                var2 = jackpot();\n                goto label_032D;\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = balanceOf(var2);\n                goto label_02D4;\n            } else if (var0 == 0x7de7a18d) {\n                // Dispatch table entry for setShare(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setShare(var2);\n                stop();\n            } else if (var0 == 0x7e95385c) {\n                // Dispatch table entry for setJackpot(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setJackpot(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032d;\n                var2 = owner();\n                goto label_032D;\n            } else if (var0 == 0x9106d7ba) {\n                // Dispatch table entry for totalSold()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var2 = totalSold();\n                goto label_02D4;\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0212;\n                var2 = symbol();\n                goto label_0212;\n            } else if (var0 == 0x9b8d3064) {\n                // Dispatch table entry for setFinance(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setFinance(var2);\n                stop();\n            } else if (var0 == 0xa035b1fe) {\n                // Dispatch table entry for price()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var2 = price();\n                goto label_02D4;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02ab;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                goto label_02AB;\n            } else if (var0 == 0xad606c72) {\n                // Dispatch table entry for devWithdraw()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0389;\n                devWithdraw();\n                stop();\n            } else if (var0 == 0xc600e1dc) {\n                // Dispatch table entry for getProfit(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = getProfit(var2);\n                goto label_02D4;\n            } else if (var0 == 0xd1f55764) {\n                // Dispatch table entry for shareContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x032d;\n                var2 = shareContract();\n                goto label_032D;\n            } else if (var0 == 0xd96a094a) {\n                // Dispatch table entry for buy(uint256)\n                var1 = 0x0389;\n                var2 = msg.data[0x04:0x24];\n                buy(var2);\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02d4;\n                var temp22 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp22 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp22;\n                var1 = allowance(var2, var3);\n                goto label_02D4;\n            } else { goto label_0132; }\n        }\n    }\n    \n    function func_01A5(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0558(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0519(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= var1) { assert(); }\n    \n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (!var2) { assert(); }\n    \n        var1 = var3 / var2;\n        var2 = arg1;\n        var3 = arg0;\n    \n        if (!var2) { assert(); }\n    \n        if (arg0 == arg1 * var1 + var3 % var2) { return var1; }\n        else { assert(); }\n    }\n    \n    function func_0558(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x03;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_05ED:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05E4; }\n        \n        label_05D0:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05D0; }\n        \n        label_05E4:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_05ED;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_05ED;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 > var0;\n    \n        if (var1) {\n            var temp7 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp7 & msg.sender;\n            memory[0x20:0x40] = 0x0d;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg0 & temp7;\n            memory[0x20:0x40] = temp8;\n        \n            if (!storage[keccak256(memory[0x00:0x40])]) { goto label_0634; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var1) {\n        label_0634:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            var temp1 = temp0 & msg.sender;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x0d;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & temp0;\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = temp2;\n            var temp4 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp4;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = temp4;\n            var temp6 = memory[0x40:0x60];\n            log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n            return 0x01;\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x0d;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp2;\n        memory[0x20:0x40] = 0x0d;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp3;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = storage[temp4] - arg2;\n        var var1 = 0x070e;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        return func_0F25(var2, var3, var4);\n    }\n    \n    function increaseProfit() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (msg.value <= var0) {\n            var0 = 0x00;\n        \n        label_069E:\n            return var0;\n        } else {\n            var var1 = 0x073b;\n            var var2 = storage[0x08];\n            var var3 = 0x01a5;\n            var var4 = msg.value;\n            var var5 = storage[0x01];\n            var3 = func_0519(var4, var5);\n            var1 = func_01A5(var2, var3);\n            var temp0 = var1;\n            storage[0x08] = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = msg.value;\n            memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0xdcde97043025953bda118fffd86c06bbaa28517d73aa8edd32bf74404426f6ed, msg.sender]);\n            var0 = 0x01;\n            goto label_069E;\n        }\n    }\n    \n    function finance() returns (var r0) { return storage[0x06] & 0x02 ** 0xa0 - 0x01; }\n    \n    function decimals() returns (var r0) { return storage[0x00] & 0xff; }\n    \n    function withdraw() {\n        var var0 = 0x00;\n        var var1 = 0x07b8;\n        var var2 = msg.sender;\n        var1 = getProfit(var2);\n        var0 = var1;\n    \n        if (var0 > 0x00) {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = var0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364, msg.sender]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x07;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var1 = 0x087a;\n            var var3 = var0;\n            var1 = func_0558(var2, var3);\n            var temp2 = msg.sender;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x07;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var temp3 = memory[0x40:0x60];\n            var temp4 = var0;\n            var temp5;\n            temp5, memory[temp3:temp3 + 0x00] = address(temp2).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp3:temp3 + 0x00]);\n            var1 = !temp5;\n        \n            if (!var1) { return; }\n        \n            var temp6 = returndata.length;\n            memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n            memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x11;\n            memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x4e6f206361736820617661696c61626c65000000000000000000000000000000;\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + temp7 - temp8 + 0x64]);\n        }\n    }\n    \n    function jackpot() returns (var r0) { return storage[0x09] & 0x02 ** 0xa0 - 0x01; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0c;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function setShare(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 == temp0 & msg.sender) {\n            storage[0x0a] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x0a] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x0a;\n            var temp2 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x1150:0x1170];\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp2;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp1 - temp4 + 0x64]);\n        }\n    }\n    \n    function setJackpot(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 == temp0 & msg.sender) {\n            storage[0x09] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x09] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x0a;\n            var temp2 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x1150:0x1170];\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp2;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp1 - temp4 + 0x64]);\n        }\n    }\n    \n    function owner() returns (var r0) { return storage[0x05] & 0x02 ** 0xa0 - 0x01; }\n    \n    function totalSold() returns (var r0) { return storage[0x02]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x04];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x04;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_05ED:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_05E4; }\n        \n        label_05D0:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_05D0; }\n        \n        label_05E4:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_05ED;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp10 + 0x20;\n            goto label_05ED;\n        }\n    }\n    \n    function setFinance(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 == temp0 & msg.sender) {\n            storage[0x06] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x06] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x0a;\n            var temp2 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x1150:0x1170];\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp2;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = temp3;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp1 - temp4 + 0x64]);\n        }\n    }\n    \n    function price() returns (var r0) { return 0x0de0b6b3a7640000; }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b01;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        return func_0F25(var2, var3, var4);\n    }\n    \n    function devWithdraw() {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x05] & temp0 == temp0 & msg.sender) {\n            var var1 = 0x0b68;\n            var var2 = address(this);\n            var1 = getProfit(var2);\n            var temp1 = memory[0x40:0x60];\n            var temp2 = var1;\n            memory[temp1:temp1 + 0x20] = temp2;\n            var temp3 = memory[0x40:0x60];\n            var0 = temp2;\n            log(memory[temp3:temp3 + temp1 - temp3 + 0x20], [0x884edad9ce6fa2440d8a54cc123490eb96d2768479d49ff9c7366125a9424364, msg.sender]);\n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x07;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var1 = 0x0bd2;\n            var var3 = var0;\n            var1 = func_0558(var2, var3);\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp4 & address(this);\n            memory[0x20:0x40] = 0x07;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var temp5 = memory[0x40:0x60];\n            var temp6 = var0;\n            var temp7;\n            temp7, memory[temp5:temp5 + 0x00] = address(temp4 & storage[0x05]).call.gas(!temp6 * 0x08fc).value(temp6)(memory[temp5:temp5 + 0x00]);\n            var1 = !temp7;\n        \n            if (!var1) { return; }\n        \n            var temp8 = returndata.length;\n            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n            revert(memory[0x00:0x00 + returndata.length]);\n        } else {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x0a;\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x1150:0x1170];\n            var temp11 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp10;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = temp11;\n            var temp12 = memory[0x40:0x60];\n            revert(memory[temp12:temp12 + temp9 - temp12 + 0x64]);\n        }\n    }\n    \n    function getProfit(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp0 = storage[keccak256(memory[var0:var0 + 0x40])];\n        memory[0x20:0x40] = 0x0b;\n        var temp1 = storage[keccak256(memory[var0:var0 + 0x40])];\n        memory[0x20:0x40] = 0x0c;\n        var var2 = temp0;\n        var var1 = 0x0c76;\n        var var3 = 0x0c6a;\n        var var6 = storage[0x08];\n        var var4 = temp1;\n        var var7 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var5 = 0x01a5;\n        var5 = func_1112(var6, var7);\n        var3 = func_01A5(var4, var5);\n        return func_0C6A(var2, var3);\n    }\n    \n    function func_0C6A(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { assert(); }\n    }\n    \n    function shareContract() returns (var r0) { return storage[0x0a] & 0x02 ** 0xa0 - 0x01; }\n    \n    function buy(var arg0) {\n        var var0 = 0x00;\n        var var1 = msg.sender;\n        var var2 = address(var1).code.length;\n    \n        if (var2) {\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x11;\n            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x736f7272792068756d616e73206f6e6c79000000000000000000000000000000;\n            var temp14 = memory[0x40:0x60];\n            revert(memory[temp14:temp14 + temp13 - temp14 + 0x64]);\n        } else if (arg0 > 0x00) {\n            var var3 = 0x0d0b;\n            var var4 = arg0;\n            var var5 = 0x0de0b6b3a7640000;\n            var3 = func_1112(var4, var5);\n            var0 = var3;\n        \n            if (var0 != msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x00:0x20] = address(this);\n            memory[0x20:0x40] = 0x0c;\n        \n            if (arg0 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n        \n            if (arg0 <= storage[0x01] - storage[0x02]) {\n                var3 = 0x0da7;\n                var4 = address(this);\n                var5 = msg.sender;\n                var var6 = arg0;\n                var3 = func_0F25(var4, var5, var6);\n                var3 = storage[0x06] & 0x02 ** 0xa0 - 0x01;\n                var4 = 0x08fc;\n                var5 = 0x0dd9;\n                var6 = 0x64;\n                var var7 = 0x0dcd;\n                var var8 = var0;\n                var var9 = 0x3c;\n                var7 = func_1112(var8, var9);\n                var5 = func_0DCD(var6, var7);\n                var temp0 = memory[0x40:0x60];\n                var temp1 = var5;\n                var temp2;\n                temp2, memory[temp0:temp0 + 0x00] = address(var3).call.gas(var4 * !temp1).value(temp1)(memory[temp0:temp0 + 0x00]);\n                var3 = !temp2;\n            \n                if (!var3) {\n                    var3 = storage[0x09] & 0x02 ** 0xa0 - 0x01;\n                    var4 = 0x08fc;\n                    var5 = 0x0e27;\n                    var6 = 0x64;\n                    var7 = 0x0dcd;\n                    var8 = var0;\n                    var9 = 0x14;\n                    var7 = func_1112(var8, var9);\n                    var5 = func_0DCD(var6, var7);\n                    var temp3 = memory[0x40:0x60];\n                    var temp4 = var5;\n                    var temp5;\n                    temp5, memory[temp3:temp3 + 0x00] = address(var3).call.gas(var4 * !temp4).value(temp4)(memory[temp3:temp3 + 0x00]);\n                    var3 = !temp5;\n                \n                    if (!var3) {\n                        var3 = storage[0x0a] & 0x02 ** 0xa0 - 0x01;\n                        var4 = 0x30cc248e;\n                        var5 = 0x0e77;\n                        var6 = 0x64;\n                        var7 = 0x0dcd;\n                        var8 = var0;\n                        var9 = 0x14;\n                        var7 = func_1112(var8, var9);\n                        var5 = func_0DCD(var6, var7);\n                        var temp6 = memory[0x40:0x60];\n                        memory[temp6:temp6 + 0x20] = (var4 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000;\n                        var6 = temp6 + 0x04;\n                        var7 = 0x20;\n                        var8 = memory[0x40:0x60];\n                        var9 = var6 - var8;\n                        var var10 = var8;\n                        var var11 = var5;\n                        var var12 = var3;\n                        var var13 = !address(var12).code.length;\n                    \n                        if (var13) { revert(memory[0x00:0x00]); }\n                    \n                        var temp7;\n                        temp7, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas).value(var11)(memory[var10:var10 + var9]);\n                        var7 = !temp7;\n                    \n                        if (!var7) {\n                            var3 = memory[0x40:0x60];\n                            var4 = returndata.length;\n                        \n                            if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            storage[0x02] = arg0 + storage[0x02];\n                            return;\n                        } else {\n                            var temp8 = returndata.length;\n                            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp9 = returndata.length;\n                        memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp10 = returndata.length;\n                    memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n                memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x08;\n                memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = 0x536f6c64206f7574000000000000000000000000000000000000000000000000;\n                var temp12 = memory[0x40:0x60];\n                revert(memory[temp12:temp12 + temp11 - temp12 + 0x64]);\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0DCD(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0519(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0 & arg0;\n        memory[0x20:0x40] = 0x0d;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & arg1;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0F25(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (arg1 & 0x02 ** 0xa0 - 0x01) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (arg1 & temp0 == temp0 & arg0) { revert(memory[0x00:0x00]); }\n        \n            var var4 = arg2 > 0x00;\n        \n            if (var4) {\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0c;\n            \n                if (arg2 <= storage[keccak256(memory[0x00:0x40])]) { goto label_0FD6; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (var4) {\n            label_0FD6:\n                memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0c;\n                var temp1 = storage[keccak256(memory[0x00:0x40])];\n                var1 = arg2 + temp1;\n            \n                if (var1 < temp1) { assert(); }\n            \n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                var temp3 = arg0 & temp2;\n                memory[0x00:0x20] = temp3;\n                memory[0x20:0x40] = 0x0c;\n                var temp4 = keccak256(memory[0x00:0x40]);\n                var temp5 = storage[temp4];\n                memory[0x00:0x20] = arg1 & temp2;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                memory[0x00:0x20] = temp3;\n                storage[temp4] = temp5 - arg2;\n                var2 = temp5 - arg2;\n                var4 = 0x1046;\n                var var5 = arg2;\n                var var6 = storage[0x08];\n                var4 = func_1112(var5, var6);\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0b;\n                var temp6 = var4;\n                var3 = temp6;\n                var5 = storage[keccak256(memory[0x00:0x40])];\n                var4 = 0x1072;\n                var6 = var3;\n                var4 = func_0558(var5, var6);\n                var temp7 = 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = arg0 & temp7;\n                memory[0x20:0x40] = 0x0b;\n                storage[keccak256(memory[0x00:0x40])] = var4;\n                memory[0x00:0x20] = arg1 & temp7;\n                memory[0x20:0x40] = 0x07;\n                var5 = storage[keccak256(memory[0x00:0x40])];\n                var4 = 0x10ae;\n                var6 = var3;\n                var4 = func_0558(var5, var6);\n                var temp8 = 0x02 ** 0xa0 - 0x01;\n                var temp9 = arg1 & temp8;\n                memory[0x00:0x20] = temp9;\n                memory[0x20:0x40] = 0x07;\n                storage[keccak256(memory[0x00:0x40])] = var4;\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = arg2;\n                var temp11 = memory[0x40:0x60];\n                log(memory[temp11:temp11 + temp10 - temp11 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-8] & 0x02 ** 0xa0 - 0x01, stack[-7] & 0x02 ** 0xa0 - 0x01]);\n                return 0x01;\n            } else { revert(memory[0x00:0x00]); }\n        } else {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n            memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x1f;\n            memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = 0x526563656976657220616464726573732063616e6e6f74206265206e756c6c00;\n            var temp13 = memory[0x40:0x60];\n            revert(memory[temp13:temp13 + temp12 - temp13 + 0x64]);\n        }\n    }\n    \n    function func_1112(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { assert(); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 51.30562472343445,
	"usage": {
		"completion_tokens": 702,
		"prompt_tokens": 12730,
		"total_tokens": 13432
	}
}