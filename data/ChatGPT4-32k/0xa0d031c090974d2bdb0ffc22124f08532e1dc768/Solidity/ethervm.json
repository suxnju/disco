{
	"address": "0xa0d031c090974d2bdb0ffc22124f08532e1dc768",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the reconstructed Solidity contract code from the given decompiled EVM Bytecode:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping(address => uint256) balances;\n    mapping(address => mapping(address => uint256)) allowed;\n    mapping(address => bool) frozenAccount;\n    address public owner;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    uint256 public sellPrice;\n    uint256 public buyPrice;\n    bool public sellTokenAllowed;\n\n    event Transfer(address indexed from, address indexed to, uint value);\n    event FrozenFunds(address target, bool frozen);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor(uint256 initialSupply, string tokenName, string tokenSymbol, uint8 decimalUnits, address centralMinter) public {\n        if(centralMinter != 0) owner = centralMinter;\n        else owner = msg.sender;\n        totalSupply = initialSupply;\n        balances[owner] = totalSupply;\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        require(balances[msg.sender] >= _value);\n        require(balances[_to] + _value >= balances[_to]);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);\n        require(balances[_to] + _value >= balances[_to]);\n        require(_value <= allowed[_from][msg.sender]);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowed[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function mintToken(address target, uint256 mintedAmount) public {\n        require(msg.sender == owner);\n        balances[target] += mintedAmount;\n        totalSupply += mintedAmount;\n        emit Transfer(0, owner, mintedAmount);\n        emit Transfer(owner, target, mintedAmount);\n    }\n\n    function freezeAccount(address target, bool freeze) public {\n        require(msg.sender == owner);\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public {\n        require(msg.sender == owner);\n        sellPrice = newSellPrice;\n        buyPrice = newBuyPrice;\n    }\n\n    function enableSellToken() public {\n        require(msg.sender == owner);\n        sellTokenAllowed = true;\n    }\n\n    function disableSellToken() public {\n        require(msg.sender == owner);\n        sellTokenAllowed = false;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == owner);\n        owner = newOwner;\n    }\n\n    function buy() payable public {\n        uint amount = msg.value / buyPrice; \n        require(balances[this] >= amount);\n        balances[msg.sender] += amount; \n        balances[this] -= amount; \n        emit Transfer(this, msg.sender, amount);\n    }\n\n    function sell(uint256 amount) public {\n        require(balances[msg.sender] >= amount);\n        balances[msg.sender] -= amount; \n        balances[this] += amount; \n        msg.sender.transfer(amount * sellPrice);\n        emit Transfer(msg.sender, this, amount);\n    }\n}\n```\n\nThis is a basic token contract with functionality to buy and sell tokens. The contract also includes the ability to freeze accounts, transfer ownership, approve token transfers, and mint new tokens. Please note that the reconstructed code may not be 100% accurate and may need further tuning.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473194,
	"id": "chatcmpl-8Mv2wuJBZsn8LOUNNzWrlnWzOpHSa",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0169:\n            var var0 = 0x0171;\n            var0 = buy();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0189;\n                var var2 = name();\n            \n            label_0189:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var2;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var3 = temp0;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var6 = temp1 + 0x20;\n                var var7 = memory[temp1:temp1 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_01C3:\n                    var temp2 = var7;\n                    var5 = temp2 + var5;\n                    var6 = temp2 & 0x1f;\n                \n                    if (!var6) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var5 - temp3];\n                    } else {\n                        var temp4 = var6;\n                        var temp5 = var5 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_01B4:\n                    var temp7 = var11;\n                    memory[temp7 + var9:temp7 + var9 + 0x20] = memory[temp7 + var10:temp7 + var10 + 0x20];\n                    var11 = temp7 + 0x20;\n                \n                    if (var11 >= var8) { goto label_01C3; }\n                    else { goto label_01B4; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_0222:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = totalSupply();\n            \n            label_024B:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x1d0b482f) {\n                // Dispatch table entry for TokenPerETHSell()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = TokenPerETHSell();\n                goto label_024B;\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var temp12 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp12 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp12;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_0222;\n            } else if (var0 == 0x28b93702) {\n                // Dispatch table entry for SellTokenAllowed()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = SellTokenAllowed();\n                goto label_0222;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02e0;\n                var2 = decimals();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var2 & 0xff;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + temp13 - temp14 + 0x20];\n            } else if (var0 == 0x42966c68) {\n                // Dispatch table entry for burn(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24];\n                var1 = burn(var2);\n                goto label_0222;\n            } else if (var0 == 0x4b0d5417) {\n                // Dispatch table entry for disableSellToken()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                disableSellToken();\n                stop();\n            } else if (var0 == 0x534f36c5) {\n                // Dispatch table entry for TokenPerETHBuy()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = TokenPerETHBuy();\n                goto label_024B;\n            } else if (var0 == 0x6aa737e0) {\n                // Dispatch table entry for enableSellToken()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                enableSellToken();\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balanceOf(var2);\n                goto label_024B;\n            } else if (var0 == 0x79c65068) {\n                // Dispatch table entry for mintToken(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                mintToken(var2, var3);\n                stop();\n            } else if (var0 == 0x79cc6790) {\n                // Dispatch table entry for burnFrom(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = burnFrom(var2, var3);\n                goto label_0222;\n            } else if (var0 == 0x85e436bf) {\n                // Dispatch table entry for setBuyRate(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24];\n                setBuyRate(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e3;\n                var2 = owner();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + temp15 - temp16 + 0x20];\n            } else if (var0 == 0x8e0b017d) {\n                // Dispatch table entry for setSellRate(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24];\n                setSellRate(var2);\n                stop();\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0189;\n                var2 = symbol();\n                goto label_0189;\n            } else if (var0 == 0xa6f2ae3a) {\n                // Dispatch table entry for buy()\n                var1 = 0x024b;\n                var1 = buy();\n                goto label_024B;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var4 = 0x07c7;\n                var5 = msg.sender;\n                var6 = var2;\n                var7 = var3;\n                transfer(var5, var6, var7);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xb414d4b6) {\n                // Dispatch table entry for frozenAccount(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = frozenAccount(var2);\n                goto label_0222;\n            } else if (var0 == 0xcae9ca51) {\n                // Dispatch table entry for approveAndCall(address,uint256,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var temp17 = memory[0x40:0x60];\n                var temp18 = msg.data[0x44:0x64];\n                var temp19 = msg.data[temp18 + 0x04:temp18 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp17 + (temp19 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp19;\n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                memory[temp17 + 0x20:temp17 + 0x20 + temp19] = msg.data[temp18 + 0x24:temp18 + 0x24 + temp19];\n                var4 = temp17;\n                var1 = approveAndCall(var2, var3, var4);\n                goto label_0222;\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x02c9;\n                deposit();\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var temp20 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp20 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp20;\n                var2 = allowance(var2, var3);\n                goto label_024B;\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = msg.data[0x04:0x24];\n                var1 = sell(var2);\n                goto label_024B;\n            } else if (var0 == 0xe724529c) {\n                // Dispatch table entry for freezeAccount(address,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = !!msg.data[0x24:0x44];\n                freezeAccount(var2, var3);\n                stop();\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_0169; }\n        }\n    }\n    \n    function buy() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (var0 >= msg.value) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x05e3;\n        var var2 = 0x0de0b6b3a7640000;\n        var var3 = 0x05d7;\n        var var4 = 0x0a ** (storage[0x03] & 0xff);\n        var var5 = 0x05cb;\n        var var7 = storage[0x05];\n        var var6 = msg.value;\n        var5 = func_0E98(var6, var7);\n        var3 = func_05CB(var4, var5);\n        var1 = func_05D7(var2, var3);\n        var temp0 = address(this);\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var1;\n        storage[temp1] = storage[temp1] - temp2;\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = temp2 + storage[temp4];\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp2;\n        var temp6 = memory[0x40:0x60];\n        var temp7 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x101c:0x103c];\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp7;\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [memory[0x00:0x20], address(this), msg.sender]);\n        return temp2;\n    }\n    \n    function func_05CB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0E98(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_05D7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_06B6:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_06AD; }\n        \n        label_0699:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0699; }\n        \n        label_06AD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_06B6;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_06B6;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = temp0;\n        storage[keccak256(memory[0x00:0x40])] = arg1;\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x04]; }\n    \n    function TokenPerETHSell() returns (var r0) { return storage[0x06]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] - arg2;\n        var var1 = 0x075c;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        transfer(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function SellTokenAllowed() returns (var r0) { return storage[0x07] & 0xff; }\n    \n    function withdraw(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > address(this).balance) {\n        label_07C9:\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg0;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var var0 = !temp2;\n        \n            if (!var0) { goto label_07C9; }\n        \n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function decimals() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function burn(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n    \n        if (arg0 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        storage[temp1] = storage[temp1] - temp2;\n        storage[0x04] = storage[0x04] - temp2;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, msg.sender]);\n        return 0x01;\n    }\n    \n    function disableSellToken() {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = storage[0x07] & ~0xff;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x1a26afc103797a41cda97337e6bccd6b52abf0b3ca40d8b88c3958d827ec2f97]);\n    }\n    \n    function TokenPerETHBuy() returns (var r0) { return storage[0x05]; }\n    \n    function enableSellToken() {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = (storage[0x07] & ~0xff) | 0x01;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x01;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x1a26afc103797a41cda97337e6bccd6b52abf0b3ca40d8b88c3958d827ec2f97]);\n    }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function mintToken(var arg0, var arg1) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg1;\n        storage[temp1] = temp2 + storage[temp1];\n        storage[0x04] = temp2 + storage[0x04];\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        var temp5 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x101c:0x103c];\n        var temp6 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp5;\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [memory[0x00:0x20], address(this), stack[-2] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function burnFrom(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n    \n        if (arg1 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x08;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg1;\n        storage[temp2] = storage[temp2] - temp3;\n        memory[0x20:0x40] = 0x09;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp4;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = storage[temp5] - temp3;\n        storage[0x04] = storage[0x04] - temp3;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp3;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function setBuyRate(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = storage[0x05];\n        var temp1 = arg0;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp0 - temp2 + 0x40], [0xcfa7074b22c98fb9291e698be8caae9fd3391198b3dd068fbe42c6da6b9c9bf5]);\n        storage[0x05] = temp1;\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function setSellRate(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = storage[0x06];\n        var temp1 = arg0;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp0 - temp2 + 0x40], [0xfa46b8b4ccaecf1d18401d52f6693d32659468c8553f904bf40cbcfd416ac0f6]);\n        storage[0x06] = temp1;\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x02;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_06B6:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_06AD; }\n        \n        label_0699:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0699; }\n        \n        label_06AD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_06B6;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_06B6;\n        }\n    }\n    \n    function frozenAccount(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function approveAndCall(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        var var2 = 0x0bad;\n        var var3 = var1;\n        var var4 = arg1;\n        var2 = approve(var3, var4);\n    \n        if (!var2) {\n        label_0CB1:\n            return var0;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x8f4ffcb100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = arg1;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = address(this);\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x80;\n            var temp1 = arg2;\n            memory[temp0 + 0x84:temp0 + 0x84 + 0x20] = memory[temp1:temp1 + 0x20];\n            var2 = var1 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x8f4ffcb1;\n            var4 = msg.sender;\n            var var5 = arg1;\n            var var6 = address(this);\n            var var7 = temp1;\n            var var8 = temp0 + 0x04;\n            var var9 = temp0 + 0x64;\n            var var10 = temp0 + 0xa4;\n            var var11 = var7 + 0x20;\n            var var12 = memory[var7:var7 + 0x20];\n            var var13 = var12;\n            var var14 = var10;\n            var var15 = var11;\n            var var16 = 0x00;\n        \n            if (var16 >= var13) {\n            label_0C45:\n                var temp2 = var12;\n                var10 = temp2 + var10;\n                var11 = temp2 & 0x1f;\n            \n                if (!var11) {\n                    var4 = var10;\n                    var5 = 0x00;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = 0x00;\n                    var10 = var2;\n                    var11 = !address(var10).code.length;\n                \n                    if (var11) { revert(memory[0x00:0x00]); }\n                \n                label_0C94:\n                    var temp3;\n                    temp3, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n                    var5 = !temp3;\n                \n                    if (!var5) {\n                        var0 = 0x01;\n                        goto label_0CB1;\n                    } else {\n                        var temp4 = returndata.length;\n                        memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp5 = var11;\n                    var temp6 = var10 - temp5;\n                    memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                    var4 = temp6 + 0x20;\n                    var5 = 0x00;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = 0x00;\n                    var10 = var2;\n                    var11 = !address(var10).code.length;\n                \n                    if (!var11) { goto label_0C94; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_0C36:\n                var temp7 = var16;\n                memory[temp7 + var14:temp7 + var14 + 0x20] = memory[temp7 + var15:temp7 + var15 + 0x20];\n                var16 = temp7 + 0x20;\n            \n                if (var16 >= var13) { goto label_0C45; }\n                else { goto label_0C36; }\n            }\n        }\n    }\n    \n    function deposit() {}\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function sell(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n    \n        if (arg0 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x07] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x08;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = arg0;\n        storage[temp0] = temp1 + storage[temp0];\n        memory[0x00:0x20] = msg.sender;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] - temp1;\n        var var1 = 0x0d7c;\n        var var2 = 0x0d64;\n        var var3 = storage[0x06];\n        var var4 = 0x0a ** (storage[0x03] & 0xff);\n        var2 = func_0E98(var3, var4);\n        var1 = func_0D64(arg0, var2);\n        var temp3 = memory[0x40:0x60];\n        var temp4 = var1;\n        var0 = temp4;\n        var temp5;\n        temp5, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp3:temp3 + 0x00]);\n        var1 = !temp5;\n    \n        if (!var1) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = arg0;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x101c:0x103c];\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp8;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [memory[0x00:0x20], msg.sender, address(this)]);\n            return var0;\n        } else {\n            var temp10 = returndata.length;\n            memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_0D64(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x05d7;\n        var var1 = arg0;\n        var var2 = 0x0de0b6b3a7640000;\n        var0 = func_0E98(var1, var2);\n        r0 = func_05D7(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function freezeAccount(var arg0, var arg1) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = !!arg1;\n        storage[temp1] = temp2 | (storage[temp1] & ~0xff);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x40], [0x48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5]);\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_0E98(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_0EB4:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_0EB4;\n        }\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (temp0 + arg2 <= temp0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg1;\n        var temp3 = temp2 & temp1;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x08;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = storage[temp4];\n        var temp6 = arg0;\n        var temp7 = temp6 & temp1;\n        memory[0x00:0x20] = temp7;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        var temp9 = storage[temp8];\n        var temp10 = arg2;\n        storage[temp8] = temp9 - temp10;\n        memory[0x00:0x20] = temp3;\n        storage[temp4] = temp10 + storage[temp4];\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = temp10;\n        var temp12 = memory[0x40:0x60];\n        var0 = temp5 + temp9;\n        var temp13 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x101c:0x103c];\n        var temp14 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp13;\n        log(memory[temp12:temp12 + temp11 - temp12 + 0x20], [memory[0x00:0x20], stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n        var temp15 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & temp15;\n        memory[0x20:0x40] = 0x08;\n        var temp16 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp6 & temp15;\n    \n        if (var0 == storage[keccak256(memory[0x00:0x40])] + temp16) { return; }\n        else { assert(); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0169:\n            var var0 = 0x0171;\n            var0 = buy();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0189;\n                var var2 = name();\n            \n            label_0189:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var2;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var3 = temp0;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var6 = temp1 + 0x20;\n                var var7 = memory[temp1:temp1 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_01C3:\n                    var temp2 = var7;\n                    var5 = temp2 + var5;\n                    var6 = temp2 & 0x1f;\n                \n                    if (!var6) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var5 - temp3];\n                    } else {\n                        var temp4 = var6;\n                        var temp5 = var5 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_01B4:\n                    var temp7 = var11;\n                    memory[temp7 + var9:temp7 + var9 + 0x20] = memory[temp7 + var10:temp7 + var10 + 0x20];\n                    var11 = temp7 + 0x20;\n                \n                    if (var11 >= var8) { goto label_01C3; }\n                    else { goto label_01B4; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_0222:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = totalSupply();\n            \n            label_024B:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x1d0b482f) {\n                // Dispatch table entry for TokenPerETHSell()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = TokenPerETHSell();\n                goto label_024B;\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var temp12 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp12 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp12;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_0222;\n            } else if (var0 == 0x28b93702) {\n                // Dispatch table entry for SellTokenAllowed()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = SellTokenAllowed();\n                goto label_0222;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02e0;\n                var2 = decimals();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var2 & 0xff;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + temp13 - temp14 + 0x20];\n            } else if (var0 == 0x42966c68) {\n                // Dispatch table entry for burn(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24];\n                var1 = burn(var2);\n                goto label_0222;\n            } else if (var0 == 0x4b0d5417) {\n                // Dispatch table entry for disableSellToken()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                disableSellToken();\n                stop();\n            } else if (var0 == 0x534f36c5) {\n                // Dispatch table entry for TokenPerETHBuy()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = TokenPerETHBuy();\n                goto label_024B;\n            } else if (var0 == 0x6aa737e0) {\n                // Dispatch table entry for enableSellToken()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                enableSellToken();\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balanceOf(var2);\n                goto label_024B;\n            } else if (var0 == 0x79c65068) {\n                // Dispatch table entry for mintToken(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                mintToken(var2, var3);\n                stop();\n            } else if (var0 == 0x79cc6790) {\n                // Dispatch table entry for burnFrom(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = burnFrom(var2, var3);\n                goto label_0222;\n            } else if (var0 == 0x85e436bf) {\n                // Dispatch table entry for setBuyRate(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24];\n                setBuyRate(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e3;\n                var2 = owner();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + temp15 - temp16 + 0x20];\n            } else if (var0 == 0x8e0b017d) {\n                // Dispatch table entry for setSellRate(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24];\n                setSellRate(var2);\n                stop();\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0189;\n                var2 = symbol();\n                goto label_0189;\n            } else if (var0 == 0xa6f2ae3a) {\n                // Dispatch table entry for buy()\n                var1 = 0x024b;\n                var1 = buy();\n                goto label_024B;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var4 = 0x07c7;\n                var5 = msg.sender;\n                var6 = var2;\n                var7 = var3;\n                transfer(var5, var6, var7);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xb414d4b6) {\n                // Dispatch table entry for frozenAccount(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = frozenAccount(var2);\n                goto label_0222;\n            } else if (var0 == 0xcae9ca51) {\n                // Dispatch table entry for approveAndCall(address,uint256,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var temp17 = memory[0x40:0x60];\n                var temp18 = msg.data[0x44:0x64];\n                var temp19 = msg.data[temp18 + 0x04:temp18 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp17 + (temp19 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp19;\n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                memory[temp17 + 0x20:temp17 + 0x20 + temp19] = msg.data[temp18 + 0x24:temp18 + 0x24 + temp19];\n                var4 = temp17;\n                var1 = approveAndCall(var2, var3, var4);\n                goto label_0222;\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x02c9;\n                deposit();\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var temp20 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp20 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp20;\n                var2 = allowance(var2, var3);\n                goto label_024B;\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = msg.data[0x04:0x24];\n                var1 = sell(var2);\n                goto label_024B;\n            } else if (var0 == 0xe724529c) {\n                // Dispatch table entry for freezeAccount(address,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = !!msg.data[0x24:0x44];\n                freezeAccount(var2, var3);\n                stop();\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_0169; }\n        }\n    }\n    \n    function buy() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (var0 >= msg.value) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x05e3;\n        var var2 = 0x0de0b6b3a7640000;\n        var var3 = 0x05d7;\n        var var4 = 0x0a ** (storage[0x03] & 0xff);\n        var var5 = 0x05cb;\n        var var7 = storage[0x05];\n        var var6 = msg.value;\n        var5 = func_0E98(var6, var7);\n        var3 = func_05CB(var4, var5);\n        var1 = func_05D7(var2, var3);\n        var temp0 = address(this);\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var1;\n        storage[temp1] = storage[temp1] - temp2;\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = temp2 + storage[temp4];\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp2;\n        var temp6 = memory[0x40:0x60];\n        var temp7 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x101c:0x103c];\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp7;\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [memory[0x00:0x20], address(this), msg.sender]);\n        return temp2;\n    }\n    \n    function func_05CB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0E98(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_05D7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_06B6:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_06AD; }\n        \n        label_0699:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0699; }\n        \n        label_06AD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_06B6;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_06B6;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = temp0;\n        storage[keccak256(memory[0x00:0x40])] = arg1;\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x04]; }\n    \n    function TokenPerETHSell() returns (var r0) { return storage[0x06]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] - arg2;\n        var var1 = 0x075c;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        transfer(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function SellTokenAllowed() returns (var r0) { return storage[0x07] & 0xff; }\n    \n    function withdraw(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > address(this).balance) {\n        label_07C9:\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg0;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var var0 = !temp2;\n        \n            if (!var0) { goto label_07C9; }\n        \n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function decimals() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function burn(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n    \n        if (arg0 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        storage[temp1] = storage[temp1] - temp2;\n        storage[0x04] = storage[0x04] - temp2;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, msg.sender]);\n        return 0x01;\n    }\n    \n    function disableSellToken() {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = storage[0x07] & ~0xff;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x1a26afc103797a41cda97337e6bccd6b52abf0b3ca40d8b88c3958d827ec2f97]);\n    }\n    \n    function TokenPerETHBuy() returns (var r0) { return storage[0x05]; }\n    \n    function enableSellToken() {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = (storage[0x07] & ~0xff) | 0x01;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x01;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x1a26afc103797a41cda97337e6bccd6b52abf0b3ca40d8b88c3958d827ec2f97]);\n    }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function mintToken(var arg0, var arg1) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg1;\n        storage[temp1] = temp2 + storage[temp1];\n        storage[0x04] = temp2 + storage[0x04];\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        var temp5 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x101c:0x103c];\n        var temp6 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp5;\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [memory[0x00:0x20], address(this), stack[-2] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function burnFrom(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n    \n        if (arg1 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x08;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg1;\n        storage[temp2] = storage[temp2] - temp3;\n        memory[0x20:0x40] = 0x09;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp4;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = storage[temp5] - temp3;\n        storage[0x04] = storage[0x04] - temp3;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp3;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function setBuyRate(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = storage[0x05];\n        var temp1 = arg0;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp0 - temp2 + 0x40], [0xcfa7074b22c98fb9291e698be8caae9fd3391198b3dd068fbe42c6da6b9c9bf5]);\n        storage[0x05] = temp1;\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function setSellRate(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = storage[0x06];\n        var temp1 = arg0;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp0 - temp2 + 0x40], [0xfa46b8b4ccaecf1d18401d52f6693d32659468c8553f904bf40cbcfd416ac0f6]);\n        storage[0x06] = temp1;\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x02;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_06B6:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_06AD; }\n        \n        label_0699:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0699; }\n        \n        label_06AD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_06B6;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_06B6;\n        }\n    }\n    \n    function frozenAccount(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function approveAndCall(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        var var2 = 0x0bad;\n        var var3 = var1;\n        var var4 = arg1;\n        var2 = approve(var3, var4);\n    \n        if (!var2) {\n        label_0CB1:\n            return var0;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x8f4ffcb100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = arg1;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = address(this);\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x80;\n            var temp1 = arg2;\n            memory[temp0 + 0x84:temp0 + 0x84 + 0x20] = memory[temp1:temp1 + 0x20];\n            var2 = var1 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x8f4ffcb1;\n            var4 = msg.sender;\n            var var5 = arg1;\n            var var6 = address(this);\n            var var7 = temp1;\n            var var8 = temp0 + 0x04;\n            var var9 = temp0 + 0x64;\n            var var10 = temp0 + 0xa4;\n            var var11 = var7 + 0x20;\n            var var12 = memory[var7:var7 + 0x20];\n            var var13 = var12;\n            var var14 = var10;\n            var var15 = var11;\n            var var16 = 0x00;\n        \n            if (var16 >= var13) {\n            label_0C45:\n                var temp2 = var12;\n                var10 = temp2 + var10;\n                var11 = temp2 & 0x1f;\n            \n                if (!var11) {\n                    var4 = var10;\n                    var5 = 0x00;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = 0x00;\n                    var10 = var2;\n                    var11 = !address(var10).code.length;\n                \n                    if (var11) { revert(memory[0x00:0x00]); }\n                \n                label_0C94:\n                    var temp3;\n                    temp3, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n                    var5 = !temp3;\n                \n                    if (!var5) {\n                        var0 = 0x01;\n                        goto label_0CB1;\n                    } else {\n                        var temp4 = returndata.length;\n                        memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp5 = var11;\n                    var temp6 = var10 - temp5;\n                    memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                    var4 = temp6 + 0x20;\n                    var5 = 0x00;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = 0x00;\n                    var10 = var2;\n                    var11 = !address(var10).code.length;\n                \n                    if (!var11) { goto label_0C94; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_0C36:\n                var temp7 = var16;\n                memory[temp7 + var14:temp7 + var14 + 0x20] = memory[temp7 + var15:temp7 + var15 + 0x20];\n                var16 = temp7 + 0x20;\n            \n                if (var16 >= var13) { goto label_0C45; }\n                else { goto label_0C36; }\n            }\n        }\n    }\n    \n    function deposit() {}\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function sell(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n    \n        if (arg0 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x07] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x08;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = arg0;\n        storage[temp0] = temp1 + storage[temp0];\n        memory[0x00:0x20] = msg.sender;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] - temp1;\n        var var1 = 0x0d7c;\n        var var2 = 0x0d64;\n        var var3 = storage[0x06];\n        var var4 = 0x0a ** (storage[0x03] & 0xff);\n        var2 = func_0E98(var3, var4);\n        var1 = func_0D64(arg0, var2);\n        var temp3 = memory[0x40:0x60];\n        var temp4 = var1;\n        var0 = temp4;\n        var temp5;\n        temp5, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp3:temp3 + 0x00]);\n        var1 = !temp5;\n    \n        if (!var1) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = arg0;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x101c:0x103c];\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp8;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [memory[0x00:0x20], msg.sender, address(this)]);\n            return var0;\n        } else {\n            var temp10 = returndata.length;\n            memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_0D64(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x05d7;\n        var var1 = arg0;\n        var var2 = 0x0de0b6b3a7640000;\n        var0 = func_0E98(var1, var2);\n        r0 = func_05D7(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function freezeAccount(var arg0, var arg1) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = !!arg1;\n        storage[temp1] = temp2 | (storage[temp1] & ~0xff);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x40], [0x48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5]);\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_0E98(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_0EB4:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_0EB4;\n        }\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (temp0 + arg2 <= temp0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg1;\n        var temp3 = temp2 & temp1;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x08;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = storage[temp4];\n        var temp6 = arg0;\n        var temp7 = temp6 & temp1;\n        memory[0x00:0x20] = temp7;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        var temp9 = storage[temp8];\n        var temp10 = arg2;\n        storage[temp8] = temp9 - temp10;\n        memory[0x00:0x20] = temp3;\n        storage[temp4] = temp10 + storage[temp4];\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = temp10;\n        var temp12 = memory[0x40:0x60];\n        var0 = temp5 + temp9;\n        var temp13 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x101c:0x103c];\n        var temp14 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp13;\n        log(memory[temp12:temp12 + temp11 - temp12 + 0x20], [memory[0x00:0x20], stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n        var temp15 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & temp15;\n        memory[0x20:0x40] = 0x08;\n        var temp16 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp6 & temp15;\n    \n        if (var0 == storage[keccak256(memory[0x00:0x40])] + temp16) { return; }\n        else { assert(); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0169:\n            var var0 = 0x0171;\n            var0 = buy();\n            stop();\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0189;\n                var var2 = name();\n            \n            label_0189:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x20;\n                var temp1 = var2;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                var var3 = temp0;\n                var var4 = var3;\n                var var5 = var4 + 0x40;\n                var var6 = temp1 + 0x20;\n                var var7 = memory[temp1:temp1 + 0x20];\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_01C3:\n                    var temp2 = var7;\n                    var5 = temp2 + var5;\n                    var6 = temp2 & 0x1f;\n                \n                    if (!var6) {\n                        var temp3 = memory[0x40:0x60];\n                        return memory[temp3:temp3 + var5 - temp3];\n                    } else {\n                        var temp4 = var6;\n                        var temp5 = var5 - temp4;\n                        memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                        var temp6 = memory[0x40:0x60];\n                        return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                    }\n                } else {\n                label_01B4:\n                    var temp7 = var11;\n                    memory[temp7 + var9:temp7 + var9 + 0x20] = memory[temp7 + var10:temp7 + var10 + 0x20];\n                    var11 = temp7 + 0x20;\n                \n                    if (var11 >= var8) { goto label_01C3; }\n                    else { goto label_01B4; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n            \n            label_0222:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = totalSupply();\n            \n            label_024B:\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var2;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n            } else if (var0 == 0x1d0b482f) {\n                // Dispatch table entry for TokenPerETHSell()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = TokenPerETHSell();\n                goto label_024B;\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var temp12 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp12 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp12;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                goto label_0222;\n            } else if (var0 == 0x28b93702) {\n                // Dispatch table entry for SellTokenAllowed()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = SellTokenAllowed();\n                goto label_0222;\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24];\n                withdraw(var2);\n                stop();\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02e0;\n                var2 = decimals();\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = var2 & 0xff;\n                var temp14 = memory[0x40:0x60];\n                return memory[temp14:temp14 + temp13 - temp14 + 0x20];\n            } else if (var0 == 0x42966c68) {\n                // Dispatch table entry for burn(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24];\n                var1 = burn(var2);\n                goto label_0222;\n            } else if (var0 == 0x4b0d5417) {\n                // Dispatch table entry for disableSellToken()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                disableSellToken();\n                stop();\n            } else if (var0 == 0x534f36c5) {\n                // Dispatch table entry for TokenPerETHBuy()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = TokenPerETHBuy();\n                goto label_024B;\n            } else if (var0 == 0x6aa737e0) {\n                // Dispatch table entry for enableSellToken()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                enableSellToken();\n                stop();\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = balanceOf(var2);\n                goto label_024B;\n            } else if (var0 == 0x79c65068) {\n                // Dispatch table entry for mintToken(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                mintToken(var2, var3);\n                stop();\n            } else if (var0 == 0x79cc6790) {\n                // Dispatch table entry for burnFrom(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = burnFrom(var2, var3);\n                goto label_0222;\n            } else if (var0 == 0x85e436bf) {\n                // Dispatch table entry for setBuyRate(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24];\n                setBuyRate(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03e3;\n                var2 = owner();\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp16 = memory[0x40:0x60];\n                return memory[temp16:temp16 + temp15 - temp16 + 0x20];\n            } else if (var0 == 0x8e0b017d) {\n                // Dispatch table entry for setSellRate(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24];\n                setSellRate(var2);\n                stop();\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0189;\n                var2 = symbol();\n                goto label_0189;\n            } else if (var0 == 0xa6f2ae3a) {\n                // Dispatch table entry for buy()\n                var1 = 0x024b;\n                var1 = buy();\n                goto label_024B;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var4 = 0x07c7;\n                var5 = msg.sender;\n                var6 = var2;\n                var7 = var3;\n                transfer(var5, var6, var7);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0xb414d4b6) {\n                // Dispatch table entry for frozenAccount(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = frozenAccount(var2);\n                goto label_0222;\n            } else if (var0 == 0xcae9ca51) {\n                // Dispatch table entry for approveAndCall(address,uint256,bytes)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var temp17 = memory[0x40:0x60];\n                var temp18 = msg.data[0x44:0x64];\n                var temp19 = msg.data[temp18 + 0x04:temp18 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp17 + (temp19 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp17:temp17 + 0x20] = temp19;\n                var1 = 0x0222;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                memory[temp17 + 0x20:temp17 + 0x20 + temp19] = msg.data[temp18 + 0x24:temp18 + 0x24 + temp19];\n                var4 = temp17;\n                var1 = approveAndCall(var2, var3, var4);\n                goto label_0222;\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x02c9;\n                deposit();\n                stop();\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var temp20 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp20 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp20;\n                var2 = allowance(var2, var3);\n                goto label_024B;\n            } else if (var0 == 0xe4849b32) {\n                // Dispatch table entry for sell(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024b;\n                var2 = msg.data[0x04:0x24];\n                var1 = sell(var2);\n                goto label_024B;\n            } else if (var0 == 0xe724529c) {\n                // Dispatch table entry for freezeAccount(address,bool)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = !!msg.data[0x24:0x44];\n                freezeAccount(var2, var3);\n                stop();\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c9;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else { goto label_0169; }\n        }\n    }\n    \n    function buy() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (var0 >= msg.value) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x05e3;\n        var var2 = 0x0de0b6b3a7640000;\n        var var3 = 0x05d7;\n        var var4 = 0x0a ** (storage[0x03] & 0xff);\n        var var5 = 0x05cb;\n        var var7 = storage[0x05];\n        var var6 = msg.value;\n        var5 = func_0E98(var6, var7);\n        var3 = func_05CB(var4, var5);\n        var1 = func_05D7(var2, var3);\n        var temp0 = address(this);\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = var1;\n        storage[temp1] = storage[temp1] - temp2;\n        var temp3 = msg.sender;\n        memory[0x00:0x20] = temp3;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        storage[temp4] = temp2 + storage[temp4];\n        var temp5 = memory[0x40:0x60];\n        memory[temp5:temp5 + 0x20] = temp2;\n        var temp6 = memory[0x40:0x60];\n        var temp7 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x101c:0x103c];\n        var temp8 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp7;\n        log(memory[temp6:temp6 + temp5 - temp6 + 0x20], [memory[0x00:0x20], address(this), msg.sender]);\n        return temp2;\n    }\n    \n    function func_05CB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_0E98(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_05D7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x01];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x01;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_06B6:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_06AD; }\n        \n        label_0699:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0699; }\n        \n        label_06AD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_06B6;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_06B6;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = temp0;\n        storage[keccak256(memory[0x00:0x40])] = arg1;\n        return 0x01;\n    }\n    \n    function totalSupply() returns (var r0) { return storage[0x04]; }\n    \n    function TokenPerETHSell() returns (var r0) { return storage[0x06]; }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (arg2 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x09;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] - arg2;\n        var var1 = 0x075c;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        transfer(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function SellTokenAllowed() returns (var r0) { return storage[0x07] & 0xff; }\n    \n    function withdraw(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > address(this).balance) {\n        label_07C9:\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            var temp1 = arg0;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var var0 = !temp2;\n        \n            if (!var0) { goto label_07C9; }\n        \n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function decimals() returns (var r0) { return storage[0x03] & 0xff; }\n    \n    function burn(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n    \n        if (arg0 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = msg.sender;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        storage[temp1] = storage[temp1] - temp2;\n        storage[0x04] = storage[0x04] - temp2;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, msg.sender]);\n        return 0x01;\n    }\n    \n    function disableSellToken() {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = storage[0x07] & ~0xff;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x1a26afc103797a41cda97337e6bccd6b52abf0b3ca40d8b88c3958d827ec2f97]);\n    }\n    \n    function TokenPerETHBuy() returns (var r0) { return storage[0x05]; }\n    \n    function enableSellToken() {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x07] = (storage[0x07] & ~0xff) | 0x01;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x01;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x1a26afc103797a41cda97337e6bccd6b52abf0b3ca40d8b88c3958d827ec2f97]);\n    }\n    \n    function balanceOf(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function mintToken(var arg0, var arg1) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x08;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg1;\n        storage[temp1] = temp2 + storage[temp1];\n        storage[0x04] = temp2 + storage[0x04];\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        var temp5 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x101c:0x103c];\n        var temp6 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp5;\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x20], [memory[0x00:0x20], address(this), stack[-2] & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function burnFrom(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n    \n        if (arg1 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x09;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp0;\n    \n        if (arg1 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x08;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        var temp3 = arg1;\n        storage[temp2] = storage[temp2] - temp3;\n        memory[0x20:0x40] = 0x09;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp4;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        storage[temp5] = storage[temp5] - temp3;\n        storage[0x04] = storage[0x04] - temp3;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = temp3;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0xcc16f5dbb4873280815c1ee09dbd06736cffcc184412cf7a71a0fdb75d397ca5, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n        return 0x01;\n    }\n    \n    function setBuyRate(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = storage[0x05];\n        var temp1 = arg0;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp0 - temp2 + 0x40], [0xcfa7074b22c98fb9291e698be8caae9fd3391198b3dd068fbe42c6da6b9c9bf5]);\n        storage[0x05] = temp1;\n    }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function setSellRate(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 <= 0x00) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = storage[0x06];\n        var temp1 = arg0;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = temp1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp0 - temp2 + 0x40], [0xfa46b8b4ccaecf1d18401d52f6693d32659468c8553f904bf40cbcfd416ac0f6]);\n        storage[0x06] = temp1;\n    }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x02;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_06B6:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_06AD; }\n        \n        label_0699:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0699; }\n        \n        label_06AD:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_06B6;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_06B6;\n        }\n    }\n    \n    function frozenAccount(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0a;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function approveAndCall(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        var var2 = 0x0bad;\n        var var3 = var1;\n        var var4 = arg1;\n        var2 = approve(var3, var4);\n    \n        if (!var2) {\n        label_0CB1:\n            return var0;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x8f4ffcb100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = arg1;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = address(this);\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x80;\n            var temp1 = arg2;\n            memory[temp0 + 0x84:temp0 + 0x84 + 0x20] = memory[temp1:temp1 + 0x20];\n            var2 = var1 & 0x02 ** 0xa0 - 0x01;\n            var3 = 0x8f4ffcb1;\n            var4 = msg.sender;\n            var var5 = arg1;\n            var var6 = address(this);\n            var var7 = temp1;\n            var var8 = temp0 + 0x04;\n            var var9 = temp0 + 0x64;\n            var var10 = temp0 + 0xa4;\n            var var11 = var7 + 0x20;\n            var var12 = memory[var7:var7 + 0x20];\n            var var13 = var12;\n            var var14 = var10;\n            var var15 = var11;\n            var var16 = 0x00;\n        \n            if (var16 >= var13) {\n            label_0C45:\n                var temp2 = var12;\n                var10 = temp2 + var10;\n                var11 = temp2 & 0x1f;\n            \n                if (!var11) {\n                    var4 = var10;\n                    var5 = 0x00;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = 0x00;\n                    var10 = var2;\n                    var11 = !address(var10).code.length;\n                \n                    if (var11) { revert(memory[0x00:0x00]); }\n                \n                label_0C94:\n                    var temp3;\n                    temp3, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n                    var5 = !temp3;\n                \n                    if (!var5) {\n                        var0 = 0x01;\n                        goto label_0CB1;\n                    } else {\n                        var temp4 = returndata.length;\n                        memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp5 = var11;\n                    var temp6 = var10 - temp5;\n                    memory[temp6:temp6 + 0x20] = ~(0x0100 ** (0x20 - temp5) - 0x01) & memory[temp6:temp6 + 0x20];\n                    var4 = temp6 + 0x20;\n                    var5 = 0x00;\n                    var6 = memory[0x40:0x60];\n                    var7 = var4 - var6;\n                    var8 = var6;\n                    var9 = 0x00;\n                    var10 = var2;\n                    var11 = !address(var10).code.length;\n                \n                    if (!var11) { goto label_0C94; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_0C36:\n                var temp7 = var16;\n                memory[temp7 + var14:temp7 + var14 + 0x20] = memory[temp7 + var15:temp7 + var15 + 0x20];\n                var16 = temp7 + 0x20;\n            \n                if (var16 >= var13) { goto label_0C45; }\n                else { goto label_0C36; }\n            }\n        }\n    }\n    \n    function deposit() {}\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x09;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function sell(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x08;\n    \n        if (arg0 > storage[keccak256(memory[var0:var0 + 0x40])]) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x07] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = address(this);\n        memory[0x20:0x40] = 0x08;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = arg0;\n        storage[temp0] = temp1 + storage[temp0];\n        memory[0x00:0x20] = msg.sender;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        storage[temp2] = storage[temp2] - temp1;\n        var var1 = 0x0d7c;\n        var var2 = 0x0d64;\n        var var3 = storage[0x06];\n        var var4 = 0x0a ** (storage[0x03] & 0xff);\n        var2 = func_0E98(var3, var4);\n        var1 = func_0D64(arg0, var2);\n        var temp3 = memory[0x40:0x60];\n        var temp4 = var1;\n        var0 = temp4;\n        var temp5;\n        temp5, memory[temp3:temp3 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp3:temp3 + 0x00]);\n        var1 = !temp5;\n    \n        if (!var1) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = arg0;\n            var temp7 = memory[0x40:0x60];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x101c:0x103c];\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp8;\n            log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [memory[0x00:0x20], msg.sender, address(this)]);\n            return var0;\n        } else {\n            var temp10 = returndata.length;\n            memory[0x00:0x00 + temp10] = returndata[0x00:0x00 + temp10];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_0D64(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x05d7;\n        var var1 = arg0;\n        var var2 = 0x0de0b6b3a7640000;\n        var0 = func_0E98(var1, var2);\n        r0 = func_05D7(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function freezeAccount(var arg0, var arg1) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x0a;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = !!arg1;\n        storage[temp1] = temp2 | (storage[temp1] & ~0xff);\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = temp2;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + temp3 - temp4 + 0x40], [0x48335238b4855f35377ed80f164e8c6f3c366e54ac00b96a6402d4a9814a03a5]);\n    }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_0E98(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = !temp0;\n    \n        if (var2) {\n        label_0EB4:\n        \n            if (var2) { return var1; }\n            else { assert(); }\n        } else {\n            var2 = arg1;\n            var var3 = arg0;\n            var var4 = var1;\n        \n            if (!var3) { assert(); }\n        \n            var2 = var4 / var3 == var2;\n            goto label_0EB4;\n        }\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (!(arg1 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n    \n        if (arg2 > storage[keccak256(memory[0x00:0x40])]) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n        var temp0 = storage[keccak256(memory[0x00:0x40])];\n    \n        if (temp0 + arg2 <= temp0) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0a;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        var temp2 = arg1;\n        var temp3 = temp2 & temp1;\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = 0x08;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = storage[temp4];\n        var temp6 = arg0;\n        var temp7 = temp6 & temp1;\n        memory[0x00:0x20] = temp7;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        var temp9 = storage[temp8];\n        var temp10 = arg2;\n        storage[temp8] = temp9 - temp10;\n        memory[0x00:0x20] = temp3;\n        storage[temp4] = temp10 + storage[temp4];\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = temp10;\n        var temp12 = memory[0x40:0x60];\n        var0 = temp5 + temp9;\n        var temp13 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x101c:0x103c];\n        var temp14 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp13;\n        log(memory[temp12:temp12 + temp11 - temp12 + 0x20], [memory[0x00:0x20], stack[-4] & 0x02 ** 0xa0 - 0x01, stack[-3] & 0x02 ** 0xa0 - 0x01]);\n        var temp15 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & temp15;\n        memory[0x20:0x40] = 0x08;\n        var temp16 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp6 & temp15;\n    \n        if (var0 == storage[keccak256(memory[0x00:0x40])] + temp16) { return; }\n        else { assert(); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 59.297510623931885,
	"usage": {
		"completion_tokens": 919,
		"prompt_tokens": 12405,
		"total_tokens": 13324
	}
}