{
	"address": "0xa0d031c090974d2bdb0ffc22124f08532e1dc768",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the given decompiled code, a Solidity smart contract could look like the following:\n\nPlease note that this is a simplified version of the smart contract based on the provided decompiled code, and may not include all the functions or accurately represent the original contract's functionality.\n\n```\npragma solidity >=0.4.22 <0.9.0;\n\ncontract MyToken {\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    uint256 public totalSupply;\n    uint256 public tokenPerETHBuy;\n    uint256 public tokenPerETHSell;\n    address public owner;\n\n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n    mapping (address => bool) public frozenAccount;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n    event FrozenFunds(address target, bool frozen);\n\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        uint8 decimalUnits,\n        uint256 initialSupply,\n        address centralMinter\n    ) public {\n        if(centralMinter != address(0)) owner = centralMinter;\n        else owner = msg.sender;\n        name = tokenName;\n        symbol = tokenSymbol;\n        decimals = decimalUnits;\n        totalSupply = initialSupply;\n        balanceOf[owner] = initialSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value);\n        require(balanceOf[_to] + _value >= balanceOf[_to]);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        totalSupply -= _value;\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function freezeAccount(address target, bool freeze) public {\n        require(msg.sender == owner);\n        frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n}\n```\n\nPlease note that the decompiled code seems to be incomplete and/or fragmented, as it contains placeholder comments and pseudo-code, and certain function implementations are not provided. The above contract is a basic representation of the underlying functionality inferred from the given decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1701455673,
	"id": "chatcmpl-8R2dNDFJgAOkIzu8ckW0j2R22qhSb",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.26 14:01 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nuint256 _tokenPerETHBuy; // STORAGE[0x5]\nuint256 _tokenPerETHSell; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x9]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0xa]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 _sellTokenAllowed; // STORAGE[0x7] bytes 0 to 0\n\n// Events\nBurn(address, uint256);\nSellTokenAllowedEvent(bool);\nBuyRateChanged(uint256, uint256);\nSellRateChanged(uint256, uint256);\nFrozenFunds(address, bool);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    v0 = 0x570();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction TokenPerETHSell() public nonPayable { \n    return _tokenPerETHSell;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0xeda(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction SellTokenAllowed() public nonPayable { \n    return _sellTokenAllowed;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    if (varg0 <= this.balance) {\n        v0 = _owner.call().value(varg0).gas(2300 * !varg0);\n        require(v0); // checks call status, propagates error data on error\n    }\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction disableSellToken() public nonPayable { \n    require(msg.sender == _owner);\n    _sellTokenAllowed = 0;\n    emit SellTokenAllowedEvent(0);\n}\n\nfunction TokenPerETHBuy() public nonPayable { \n    return _tokenPerETHBuy;\n}\n\nfunction enableSellToken() public nonPayable { \n    require(msg.sender == _owner);\n    _sellTokenAllowed = 1;\n    emit SellTokenAllowedEvent(1);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _balanceOf[varg0] += varg1;\n    _totalSupply += varg1;\n    emit Transfer(this, varg0, varg1);\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(varg1 <= _balanceOf[varg0]);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction setBuyRate(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 > 0);\n    emit BuyRateChanged(_tokenPerETHBuy, varg0);\n    _tokenPerETHBuy = varg0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction setSellRate(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 > 0);\n    emit SellRateChanged(_tokenPerETHSell, varg0);\n    _tokenPerETHSell = varg0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    v0 = 0x570();\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0xeda(varg1, varg0, msg.sender);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    v2 = v3 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v4 = new array[](v0.length);\n        v5 = v6 = 0;\n        while (v5 < v0.length) {\n            MEM[v5 + v4.data] = MEM[v5 + v0.data];\n            v5 += 32;\n        }\n        v7 = v8 = v0.length + v4.data;\n        if (0x1f & v0.length) {\n            MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v9 = varg0.receiveApproval(msg.sender, varg1, this, v4).gas(msg.gas);\n        require(v9); // checks call status, propagates error data on error\n        v2 = 1;\n    }\n    return v2;\n}\n\nfunction deposit() public payable { \n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(varg0 <= _balanceOf[msg.sender]);\n    require(_sellTokenAllowed);\n    require(!(0xff & _frozenAccount[msg.sender]));\n    _balanceOf[this] += varg0;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = _SafeMul(10 ** _decimals, _tokenPerETHSell);\n    v1 = _SafeMul(0xde0b6b3a7640000, varg0);\n    assert(v0);\n    v2 = msg.sender.call().value(v1 / v0).gas(2300 * !(v1 / v0));\n    require(v2); // checks call status, propagates error data on error\n    emit Transfer(msg.sender, this, varg0);\n    return v1 / v0;\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction 0x570() private { \n    require(0 < msg.value);\n    require(!(0xff & _frozenAccount[msg.sender]));\n    v0 = _SafeMul(_tokenPerETHBuy, msg.value);\n    v1 = _SafeMul(10 ** _decimals, v0);\n    assert(0xde0b6b3a7640000);\n    _balanceOf[this] = _balanceOf[this] - v1 / 0xde0b6b3a7640000;\n    _balanceOf[msg.sender] += v1 / 0xde0b6b3a7640000;\n    emit Transfer(this, msg.sender, v1 / 0xde0b6b3a7640000);\n    return v1 / 0xde0b6b3a7640000;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = v2 = !varg1;\n    if (varg1) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction 0xeda(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg2);\n    require(!(0xff & _frozenAccount[v2]));\n    v3 = address(varg1);\n    require(!(0xff & _frozenAccount[v3]));\n    v4 = address(varg1);\n    v5 = address(varg2);\n    _balanceOf[v5] = _balanceOf[v5] - varg0;\n    _balanceOf[v4] += varg0;\n    emit Transfer(v5, v4, varg0);\n    v6 = address(varg1);\n    v7 = address(varg2);\n    assert(_balanceOf[v4] + _balanceOf[v5] == _balanceOf[v7] + _balanceOf[v6]);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1d0b482f == function_selector) {\n            TokenPerETHSell();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x28b93702 == function_selector) {\n            SellTokenAllowed();\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b0d5417 == function_selector) {\n            disableSellToken();\n        } else if (0x534f36c5 == function_selector) {\n            TokenPerETHBuy();\n        } else if (0x6aa737e0 == function_selector) {\n            enableSellToken();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x85e436bf == function_selector) {\n            setBuyRate(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8e0b017d == function_selector) {\n            setSellRate(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 14:01 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nuint256 _tokenPerETHBuy; // STORAGE[0x5]\nuint256 _tokenPerETHSell; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x9]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0xa]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 _sellTokenAllowed; // STORAGE[0x7] bytes 0 to 0\n\n// Events\nBurn(address, uint256);\nSellTokenAllowedEvent(bool);\nBuyRateChanged(uint256, uint256);\nSellRateChanged(uint256, uint256);\nFrozenFunds(address, bool);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    v0 = 0x570();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction TokenPerETHSell() public nonPayable { \n    return _tokenPerETHSell;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0xeda(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction SellTokenAllowed() public nonPayable { \n    return _sellTokenAllowed;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    if (varg0 <= this.balance) {\n        v0 = _owner.call().value(varg0).gas(2300 * !varg0);\n        require(v0); // checks call status, propagates error data on error\n    }\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction disableSellToken() public nonPayable { \n    require(msg.sender == _owner);\n    _sellTokenAllowed = 0;\n    emit SellTokenAllowedEvent(0);\n}\n\nfunction TokenPerETHBuy() public nonPayable { \n    return _tokenPerETHBuy;\n}\n\nfunction enableSellToken() public nonPayable { \n    require(msg.sender == _owner);\n    _sellTokenAllowed = 1;\n    emit SellTokenAllowedEvent(1);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _balanceOf[varg0] += varg1;\n    _totalSupply += varg1;\n    emit Transfer(this, varg0, varg1);\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(varg1 <= _balanceOf[varg0]);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction setBuyRate(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 > 0);\n    emit BuyRateChanged(_tokenPerETHBuy, varg0);\n    _tokenPerETHBuy = varg0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction setSellRate(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 > 0);\n    emit SellRateChanged(_tokenPerETHSell, varg0);\n    _tokenPerETHSell = varg0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    v0 = 0x570();\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0xeda(varg1, varg0, msg.sender);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    v2 = v3 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v4 = new array[](v0.length);\n        v5 = v6 = 0;\n        while (v5 < v0.length) {\n            MEM[v5 + v4.data] = MEM[v5 + v0.data];\n            v5 += 32;\n        }\n        v7 = v8 = v0.length + v4.data;\n        if (0x1f & v0.length) {\n            MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v9 = varg0.receiveApproval(msg.sender, varg1, this, v4).gas(msg.gas);\n        require(v9); // checks call status, propagates error data on error\n        v2 = 1;\n    }\n    return v2;\n}\n\nfunction deposit() public payable { \n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(varg0 <= _balanceOf[msg.sender]);\n    require(_sellTokenAllowed);\n    require(!(0xff & _frozenAccount[msg.sender]));\n    _balanceOf[this] += varg0;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = _SafeMul(10 ** _decimals, _tokenPerETHSell);\n    v1 = _SafeMul(0xde0b6b3a7640000, varg0);\n    assert(v0);\n    v2 = msg.sender.call().value(v1 / v0).gas(2300 * !(v1 / v0));\n    require(v2); // checks call status, propagates error data on error\n    emit Transfer(msg.sender, this, varg0);\n    return v1 / v0;\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction 0x570() private { \n    require(0 < msg.value);\n    require(!(0xff & _frozenAccount[msg.sender]));\n    v0 = _SafeMul(_tokenPerETHBuy, msg.value);\n    v1 = _SafeMul(10 ** _decimals, v0);\n    assert(0xde0b6b3a7640000);\n    _balanceOf[this] = _balanceOf[this] - v1 / 0xde0b6b3a7640000;\n    _balanceOf[msg.sender] += v1 / 0xde0b6b3a7640000;\n    emit Transfer(this, msg.sender, v1 / 0xde0b6b3a7640000);\n    return v1 / 0xde0b6b3a7640000;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = v2 = !varg1;\n    if (varg1) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction 0xeda(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg2);\n    require(!(0xff & _frozenAccount[v2]));\n    v3 = address(varg1);\n    require(!(0xff & _frozenAccount[v3]));\n    v4 = address(varg1);\n    v5 = address(varg2);\n    _balanceOf[v5] = _balanceOf[v5] - varg0;\n    _balanceOf[v4] += varg0;\n    emit Transfer(v5, v4, varg0);\n    v6 = address(varg1);\n    v7 = address(varg2);\n    assert(_balanceOf[v4] + _balanceOf[v5] == _balanceOf[v7] + _balanceOf[v6]);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1d0b482f == function_selector) {\n            TokenPerETHSell();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x28b93702 == function_selector) {\n            SellTokenAllowed();\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b0d5417 == function_selector) {\n            disableSellToken();\n        } else if (0x534f36c5 == function_selector) {\n            TokenPerETHBuy();\n        } else if (0x6aa737e0 == function_selector) {\n            enableSellToken();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x85e436bf == function_selector) {\n            setBuyRate(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8e0b017d == function_selector) {\n            setSellRate(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 14:01 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nuint256 _tokenPerETHBuy; // STORAGE[0x5]\nuint256 _tokenPerETHSell; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x8]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x9]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0xa]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\nuint8 _sellTokenAllowed; // STORAGE[0x7] bytes 0 to 0\n\n// Events\nBurn(address, uint256);\nSellTokenAllowedEvent(bool);\nBuyRateChanged(uint256, uint256);\nSellRateChanged(uint256, uint256);\nFrozenFunds(address, bool);\nTransfer(address, address, uint256);\n\nfunction fallback() public payable { \n    v0 = 0x570();\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[]((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n        if (31 < (_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_name.length & ~0 + (!(0x1 & _name.length) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction TokenPerETHSell() public nonPayable { \n    return _tokenPerETHSell;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0xeda(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction SellTokenAllowed() public nonPayable { \n    return _sellTokenAllowed;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    if (varg0 <= this.balance) {\n        v0 = _owner.call().value(varg0).gas(2300 * !varg0);\n        require(v0); // checks call status, propagates error data on error\n    }\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction disableSellToken() public nonPayable { \n    require(msg.sender == _owner);\n    _sellTokenAllowed = 0;\n    emit SellTokenAllowedEvent(0);\n}\n\nfunction TokenPerETHBuy() public nonPayable { \n    return _tokenPerETHBuy;\n}\n\nfunction enableSellToken() public nonPayable { \n    require(msg.sender == _owner);\n    _sellTokenAllowed = 1;\n    emit SellTokenAllowedEvent(1);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction mintToken(address varg0, uint256 varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _balanceOf[varg0] += varg1;\n    _totalSupply += varg1;\n    emit Transfer(this, varg0, varg1);\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(varg1 <= _balanceOf[varg0]);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction setBuyRate(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 > 0);\n    emit BuyRateChanged(_tokenPerETHBuy, varg0);\n    _tokenPerETHBuy = varg0;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction setSellRate(uint256 varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg0 > 0);\n    emit SellRateChanged(_tokenPerETHSell, varg0);\n    _tokenPerETHSell = varg0;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[]((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1);\n    v1 = v2 = v0.data;\n    if ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n        if (31 < (_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + ((_symbol.length & ~0 + (!(_symbol.length & 0x1) << 8)) >> 1) <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v5 + v0.data];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction buy() public payable { \n    v0 = 0x570();\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0xeda(varg1, varg0, msg.sender);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    v1 = msg.data.length;\n    CALLDATACOPY(v0.data, 36 + varg2, (?).length);\n    v2 = v3 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v4 = new array[](v0.length);\n        v5 = v6 = 0;\n        while (v5 < v0.length) {\n            MEM[v5 + v4.data] = MEM[v5 + v0.data];\n            v5 += 32;\n        }\n        v7 = v8 = v0.length + v4.data;\n        if (0x1f & v0.length) {\n            MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v9 = varg0.receiveApproval(msg.sender, varg1, this, v4).gas(msg.gas);\n        require(v9); // checks call status, propagates error data on error\n        v2 = 1;\n    }\n    return v2;\n}\n\nfunction deposit() public payable { \n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(varg0 <= _balanceOf[msg.sender]);\n    require(_sellTokenAllowed);\n    require(!(0xff & _frozenAccount[msg.sender]));\n    _balanceOf[this] += varg0;\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    v0 = _SafeMul(10 ** _decimals, _tokenPerETHSell);\n    v1 = _SafeMul(0xde0b6b3a7640000, varg0);\n    assert(v0);\n    v2 = msg.sender.call().value(v1 / v0).gas(2300 * !(v1 / v0));\n    require(v2); // checks call status, propagates error data on error\n    emit Transfer(msg.sender, this, varg0);\n    return v1 / v0;\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(msg.sender == _owner);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    _owner = varg0;\n}\n\nfunction 0x570() private { \n    require(0 < msg.value);\n    require(!(0xff & _frozenAccount[msg.sender]));\n    v0 = _SafeMul(_tokenPerETHBuy, msg.value);\n    v1 = _SafeMul(10 ** _decimals, v0);\n    assert(0xde0b6b3a7640000);\n    _balanceOf[this] = _balanceOf[this] - v1 / 0xde0b6b3a7640000;\n    _balanceOf[msg.sender] += v1 / 0xde0b6b3a7640000;\n    emit Transfer(this, msg.sender, v1 / 0xde0b6b3a7640000);\n    return v1 / 0xde0b6b3a7640000;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = v2 = !varg1;\n    if (varg1) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    assert(v1);\n    return v0;\n}\n\nfunction 0xeda(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(varg0 <= _balanceOf[v0]);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg2);\n    require(!(0xff & _frozenAccount[v2]));\n    v3 = address(varg1);\n    require(!(0xff & _frozenAccount[v3]));\n    v4 = address(varg1);\n    v5 = address(varg2);\n    _balanceOf[v5] = _balanceOf[v5] - varg0;\n    _balanceOf[v4] += varg0;\n    emit Transfer(v5, v4, varg0);\n    v6 = address(varg1);\n    v7 = address(varg2);\n    assert(_balanceOf[v4] + _balanceOf[v5] == _balanceOf[v7] + _balanceOf[v6]);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x1d0b482f == function_selector) {\n            TokenPerETHSell();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x28b93702 == function_selector) {\n            SellTokenAllowed();\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b0d5417 == function_selector) {\n            disableSellToken();\n        } else if (0x534f36c5 == function_selector) {\n            TokenPerETHBuy();\n        } else if (0x6aa737e0 == function_selector) {\n            enableSellToken();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x79c65068 == function_selector) {\n            mintToken(address,uint256);\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x85e436bf == function_selector) {\n            setBuyRate(uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x8e0b017d == function_selector) {\n            setSellRate(uint256);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a == function_selector) {\n            buy();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xd0e30db0 == function_selector) {\n            deposit();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe4849b32 == function_selector) {\n            sell(uint256);\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 46.89145636558533,
	"usage": {
		"completion_tokens": 678,
		"prompt_tokens": 3695,
		"total_tokens": 4373
	}
}