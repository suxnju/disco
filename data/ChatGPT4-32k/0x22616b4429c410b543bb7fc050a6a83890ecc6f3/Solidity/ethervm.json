{
	"address": "0x22616b4429c410b543bb7fc050a6a83890ecc6f3",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity contract based on the decompiled code:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract MyContract {\n    mapping (address => uint256) public balances;\n    mapping (address => mapping (address => uint256)) public allowances;\n    uint256 public totalSupply;\n    string public name;\n    string public symbol;\n    uint8 public decimals;\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        require(_value >= 0);\n        allowances[msg.sender][_spender] = _value;\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balances[_from]);\n        require(_value <= allowances[_from][msg.sender]);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowances[_from][msg.sender] -= _value;\n        return true;\n    }\n    \n    function increaseAllowance(address _spender, uint256 _addedValue) public returns (bool success) {\n        require(_addedValue >= 0);\n        allowances[msg.sender][_spender] += _addedValue;\n        return true;\n    }\n    \n    function decreaseAllowance(address _spender, uint256 _subtractedValue) public returns (bool success) {\n        require(_subtractedValue >= 0);\n        require(_subtractedValue <= allowances[msg.sender][_spender]);\n        allowances[msg.sender][_spender] -= _subtractedValue;\n        return true;\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balances[msg.sender]);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n    \n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n    \n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowances[_owner][_spender];\n    }\n}\n```\n\nThis contract is an implementation of ERC20 token standard. It has methods for approving, transferring tokens from one address to another, increasing and decreasing allowance, checking the balance of a particular address, and checking the allowance of a particular address.",
				"role": "assistant"
			}
		}
	],
	"created": 1700632764,
	"id": "chatcmpl-8NaYeYPK9r6hei2KSPydZ2YGScPhP",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x39509351 > var0) {\n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = 0x00b6;\n                var1 = func_0276();\n                var temp0 = var1;\n                var1 = 0x00c3;\n                var var2 = temp0;\n                var var3 = memory[0x40:0x60];\n                var1 = func_0B0C(var2, var3);\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + var1 - temp1];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = 0x00e6;\n                var2 = 0x00e1;\n                var var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var2, var3 = func_0BC7(var3, var4);\n                var1 = func_00E1(var2, var3);\n                var temp2 = var1;\n                var1 = 0x00f3;\n                var2 = temp2;\n                var3 = memory[0x40:0x60];\n                var1 = func_0C22(var2, var3);\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + var1 - temp3];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = 0x0104;\n                var1 = func_032B();\n                var temp4 = var1;\n                var1 = 0x0111;\n                var2 = temp4;\n                var3 = memory[0x40:0x60];\n                var1 = func_0C4C(var2, var3);\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + var1 - temp5];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x0134;\n                var2 = 0x012f;\n                var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var2, var3, var4 = func_0C67(var3, var4);\n                var1 = func_012F(var2, var3, var4);\n                var temp6 = var1;\n                var1 = 0x0141;\n                var2 = temp6;\n                var3 = memory[0x40:0x60];\n                var1 = func_0C22(var2, var3);\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + var1 - temp7];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = 0x0152;\n                var1 = func_0364();\n                var temp8 = var1;\n                var1 = 0x015f;\n                var2 = temp8;\n                var3 = memory[0x40:0x60];\n                var1 = func_0CD6(var2, var3);\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + var1 - temp9];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x39509351) {\n            // Dispatch table entry for increaseAllowance(address,uint256)\n            var1 = 0x0182;\n            var2 = 0x017d;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3 = func_0BC7(var3, var4);\n            var1 = func_017D(var2, var3);\n            var temp10 = var1;\n            var1 = 0x018f;\n            var2 = temp10;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C22(var2, var3);\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + var1 - temp11];\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = 0x01b2;\n            var2 = 0x01ad;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2 = func_0CF1(var3, var4);\n            var1 = func_01AD(var2);\n            var temp12 = var1;\n            var1 = 0x01bf;\n            var2 = temp12;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C4C(var2, var3);\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + var1 - temp13];\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = 0x01d0;\n            var1 = func_03EC();\n            var temp14 = var1;\n            var1 = 0x01dd;\n            var2 = temp14;\n            var3 = memory[0x40:0x60];\n            var1 = func_0B0C(var2, var3);\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + var1 - temp15];\n        } else if (var0 == 0xa457c2d7) {\n            // Dispatch table entry for decreaseAllowance(address,uint256)\n            var1 = 0x0200;\n            var2 = 0x01fb;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3 = func_0BC7(var3, var4);\n            var1 = func_01FB(var2, var3);\n            var temp16 = var1;\n            var1 = 0x020d;\n            var2 = temp16;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C22(var2, var3);\n            var temp17 = memory[0x40:0x60];\n            return memory[temp17:temp17 + var1 - temp17];\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x0230;\n            var2 = 0x022b;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3 = func_0BC7(var3, var4);\n            var1 = func_022B(var2, var3);\n            var temp18 = var1;\n            var1 = 0x023d;\n            var2 = temp18;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C22(var2, var3);\n            var temp19 = memory[0x40:0x60];\n            return memory[temp19:temp19 + var1 - temp19];\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x0260;\n            var2 = 0x025b;\n            var3 = msg.data.length - 0x04 + 0x04;\n            var4 = 0x04;\n            var2, var3 = func_0D1E(var3, var4);\n            var1 = func_025B(var2, var3);\n            var temp20 = var1;\n            var1 = 0x026d;\n            var2 = temp20;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C4C(var2, var3);\n            var temp21 = memory[0x40:0x60];\n            return memory[temp21:temp21 + var1 - temp21];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_00E1(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0313;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x0320;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_05A7(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_012F(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0340;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x034d;\n        var var3 = arg0;\n        var var4 = var1;\n        var var5 = arg2;\n        func_0770(var3, var4, var5);\n        var2 = 0x0358;\n        var3 = arg0;\n        var4 = arg1;\n        var5 = arg2;\n        func_07FC(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_017D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0378;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x0399;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        var var6 = 0x038a;\n        var var7 = var3;\n        var var8 = var4;\n        var6 = func_0518(var7, var8);\n        func_038A(var3, var4, var5, var6);\n        return 0x01;\n    }\n    \n    function func_01AD(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_01FB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0489;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x00;\n        var var3 = 0x0497;\n        var var4 = var1;\n        var var5 = arg0;\n        var3 = func_0518(var4, var5);\n        var2 = var3;\n    \n        if (var2 >= arg1) {\n            var3 = 0x04e9;\n            var4 = var1;\n            var5 = arg0;\n            var var6 = var2 - arg1;\n            func_05A7(var4, var5, var6);\n            return 0x01;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var4 = temp1 + 0x04;\n            var3 = 0x04d3;\n            var3 = func_0E93(var4);\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var3 - temp2]);\n        }\n    }\n    \n    function func_022B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0500;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x050d;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_07FC(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_025B(var arg0, var arg1) returns (var r0) {\n        r0 = func_0518(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0276() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x03;\n        var var2 = 0x0285;\n        var var3 = storage[var1];\n        var2 = func_0D8D(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = 0x02b1;\n        var var7 = storage[var5];\n        var6 = func_0D8D(var7);\n    \n        if (!var6) {\n        label_02FE:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_02F5; }\n        \n        label_02E1:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_02E1; }\n        \n        label_02F5:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02FE;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp10 + 0x20;\n            goto label_02FE;\n        }\n    }\n    \n    function func_032B() returns (var r0) { return storage[0x02]; }\n    \n    function func_0364() returns (var r0) { return 0x12; }\n    \n    function func_038A(var arg0, var arg1, var arg2, var arg3) {\n        var temp0 = arg2;\n        arg2 = 0x0394;\n        var temp1 = arg3;\n        arg3 = temp0;\n        var var0 = temp1;\n        arg2 = func_0DED(arg3, var0);\n        func_05A7(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_03EC() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x04;\n        var var2 = 0x03fb;\n        var var3 = storage[var1];\n        var2 = func_0D8D(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = 0x0427;\n        var var7 = storage[var5];\n        var6 = func_0D8D(var7);\n    \n        if (!var6) {\n        label_0474:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_046B; }\n        \n        label_0457:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0457; }\n        \n        label_046B:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0474;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0474;\n        }\n    }\n    \n    function func_0518(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_059F() returns (var r0) { return msg.sender; }\n    \n    function func_05A7(var arg0, var arg1, var arg2) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp6 + 0x04;\n            var0 = 0x060d;\n            var0 = func_0F25(var1);\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + var0 - temp7]);\n        } else if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = arg2;\n            var var0 = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n            var var3 = 0x0763;\n            var var5 = memory[0x40:0x60];\n            var var4 = arg2;\n            var3 = func_0C4C(var4, var5);\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + var3 - temp3], [stack[-2], stack[-3], stack[-4]]);\n            return;\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp4 + 0x04;\n            var0 = 0x067c;\n            var0 = func_0FB7(var1);\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + var0 - temp5]);\n        }\n    }\n    \n    function func_0770(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x077c;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_0518(var2, var3);\n        var0 = var1;\n    \n        if (var0 == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        label_07F6:\n            return;\n        } else if (var0 >= arg2) {\n            var1 = 0x07f5;\n            var2 = arg0;\n            var3 = arg1;\n            var var4 = var0 - arg2;\n            func_05A7(var2, var3, var4);\n            goto label_07F6;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var2 = temp0 + 0x04;\n            var1 = 0x07df;\n            var1 = func_1023(var2);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        }\n    }\n    \n    function func_07FC(var arg0, var arg1, var arg2) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp9 + 0x04;\n            var0 = 0x0862;\n            var0 = func_10B5(var1);\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + var0 - temp10]);\n        } else if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var var0 = 0x08e5;\n            var var1 = arg0;\n            var var2 = arg1;\n            var var3 = arg2;\n            func_0A72(var1, var2, var3);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var0 >= arg2) {\n                var temp0 = arg2;\n                var temp1 = arg0;\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var0 - temp0;\n                var temp2 = arg1;\n                memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] + temp0;\n                var1 = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                var var4 = 0x0a59;\n                var var5 = temp0;\n                var var6 = memory[0x40:0x60];\n                var4 = func_0C4C(var5, var6);\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + var4 - temp4], [stack[-2], stack[-3], stack[-4]]);\n                var1 = 0x0a6c;\n                var2 = arg0;\n                var3 = arg1;\n                var4 = arg2;\n                func_0A77(var2, var3, var4);\n                return;\n            } else {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var2 = temp5 + 0x04;\n                var1 = 0x0962;\n                var1 = func_11D9(var2);\n                var temp6 = memory[0x40:0x60];\n                revert(memory[temp6:temp6 + var1 - temp6]);\n            }\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp7 + 0x04;\n            var0 = 0x08d1;\n            var0 = func_1147(var1);\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_0A72(var arg0, var arg1, var arg2) {}\n    \n    function func_0A77(var arg0, var arg1, var arg2) {}\n    \n    function func_0A7C(var arg0) returns (var r0) { return memory[arg0:arg0 + 0x20]; }\n    \n    function func_0A87(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_0A98(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (var0 >= arg0) {\n        label_0AB6:\n            memory[arg1 + arg0:arg1 + arg0 + 0x20] = 0x00;\n            return;\n        } else {\n        label_0AA4:\n            var temp0 = var0;\n            memory[arg1 + temp0:arg1 + temp0 + 0x20] = memory[arg2 + temp0:arg2 + temp0 + 0x20];\n            var0 = temp0 + 0x20;\n        \n            if (var0 >= arg0) { goto label_0AB6; }\n            else { goto label_0AA4; }\n        }\n    }\n    \n    function func_0AC2(var arg0) returns (var r0) { return arg0 + 0x1f & ~0x1f; }\n    \n    function func_0AD3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0ade;\n        var var2 = arg1;\n        var1 = func_0A7C(var2);\n        var2 = 0x0ae8;\n        var var3 = var1;\n        var var4 = arg0;\n        var2 = func_0A87(var3, var4);\n        var temp0 = var2;\n        arg0 = temp0;\n        var2 = 0x0af8;\n        var3 = var1;\n        var4 = arg0;\n        var var5 = arg1 + 0x20;\n        func_0A98(var3, var4, var5);\n        var2 = 0x0b01;\n        var3 = var1;\n        var2 = func_0AC2(var3);\n        return arg0 + var2;\n    }\n    \n    function func_0B0C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x0b26;\n        var var2 = var0;\n        var var3 = arg0;\n        return func_0AD3(var2, var3);\n    }\n    \n    function func_0B33(var arg0) returns (var r0) { return arg0 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_0B53(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b5e;\n        var var2 = arg0;\n        return func_0B33(var2);\n    }\n    \n    function func_0B65(var arg0) {\n        var var0 = 0x0b6e;\n        var var1 = arg0;\n        var0 = func_0B53(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0B7C(var arg0, var arg1) returns (var r0) {\n        var var0 = msg.data[arg1:arg1 + 0x20];\n        var var1 = 0x0b8b;\n        var var2 = var0;\n        func_0B65(var2);\n        return var0;\n    }\n    \n    function func_0B91(var arg0) returns (var r0) { return arg0; }\n    \n    function func_0B9B(var arg0) {\n        var var0 = 0x0ba4;\n        var var1 = arg0;\n        var0 = func_0B91(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0BB2(var arg0, var arg1) returns (var r0) {\n        var var0 = msg.data[arg1:arg1 + 0x20];\n        var var1 = 0x0bc1;\n        var var2 = var0;\n        func_0B9B(var2);\n        return var0;\n    }\n    \n    function func_0BC7(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x00;\n            var var3 = 0x0bec;\n            var var4 = arg0;\n            var var5 = arg1 + var2;\n            var3 = func_0B7C(var4, var5);\n            var0 = var3;\n            var2 = 0x20;\n            var3 = 0x0bfd;\n            var4 = arg0;\n            var5 = arg1 + var2;\n            var3 = func_0BB2(var4, var5);\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var2 = 0x0bdd;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_0C07(var arg0) returns (var r0) { return !!arg0; }\n    \n    function func_0C13(var arg0, var arg1) {\n        var var0 = 0x0c1c;\n        var var1 = arg1;\n        var0 = func_0C07(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_0C22(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x0c37;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_0C13(var2, var3);\n        return var0;\n    }\n    \n    function func_0C3D(var arg0, var arg1) {\n        var var0 = 0x0c46;\n        var var1 = arg1;\n        var0 = func_0B91(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_0C4C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x0c61;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_0C3D(var2, var3);\n        return var0;\n    }\n    \n    function func_0C67(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var3 = 0x00;\n            var var4 = 0x0c8e;\n            var var5 = arg0;\n            var var6 = arg1 + var3;\n            var4 = func_0B7C(var5, var6);\n            var0 = var4;\n            var3 = 0x20;\n            var4 = 0x0c9f;\n            var5 = arg0;\n            var6 = arg1 + var3;\n            var4 = func_0B7C(var5, var6);\n            var1 = var4;\n            var3 = 0x40;\n            var4 = 0x0cb0;\n            var5 = arg0;\n            var6 = arg1 + var3;\n            var4 = func_0BB2(var5, var6);\n            arg1 = var4;\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else {\n            var3 = 0x0c7f;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_0CBA(var arg0) returns (var r0) { return arg0 & 0xff; }\n    \n    function func_0CC7(var arg0, var arg1) {\n        var var0 = 0x0cd0;\n        var var1 = arg1;\n        var0 = func_0CBA(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_0CD6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x0ceb;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_0CC7(var2, var3);\n        return var0;\n    }\n    \n    function func_0CF1(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x00;\n            var var2 = 0x0d15;\n            var var3 = arg0;\n            var var4 = arg1 + var1;\n            return func_0B7C(var3, var4);\n        } else {\n            var1 = 0x0d06;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_0D1E(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x00;\n            var var3 = 0x0d43;\n            var var4 = arg0;\n            var var5 = arg1 + var2;\n            var3 = func_0B7C(var4, var5);\n            var0 = var3;\n            var2 = 0x20;\n            var3 = 0x0d54;\n            var4 = arg0;\n            var5 = arg1 + var2;\n            var3 = func_0B7C(var4, var5);\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var2 = 0x0d34;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_0D8D(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 / 0x02;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 - (var0 < 0x20)) { goto label_0DB8; }\n            else { goto label_0DB0; }\n        } else if (var1 - (var0 < 0x20)) {\n        label_0DB8:\n            return var0;\n        } else {\n        label_0DB0:\n            var var2 = 0x0db7;\n            memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n    \n    function func_0DED(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0df8;\n        var var2 = arg1;\n        var1 = func_0B91(var2);\n        arg1 = var1;\n        var1 = 0x0e03;\n        var2 = arg0;\n        var1 = func_0B91(var2);\n        arg0 = var1;\n        var temp0 = arg1;\n        var0 = temp0 + arg0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var1 = 0x0e1a;\n        memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0E21(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x207a65726f000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_0E70(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0e7d;\n        var var2 = 0x25;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x0e88;\n        var2 = arg0;\n        func_0E21(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_0E93(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x0eac;\n        var var2 = var0;\n        return func_0E70(var2);\n    }\n    \n    function func_0EB3(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_0F02(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0f0f;\n        var var2 = 0x24;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x0f1a;\n        var2 = arg0;\n        func_0EB3(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_0F25(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x0f3e;\n        var var2 = var0;\n        return func_0F02(var2);\n    }\n    \n    function func_0F45(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7373000000000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_0F94(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0fa1;\n        var var2 = 0x22;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x0fac;\n        var2 = arg0;\n        func_0F45(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_0FB7(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x0fd0;\n        var var2 = var0;\n        return func_0F94(var2);\n    }\n    \n    function func_0FD7(var arg0) {\n        memory[arg0:arg0 + 0x20] = 0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000;\n    }\n    \n    function func_1000(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x100d;\n        var var2 = 0x1d;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1018;\n        var2 = arg0;\n        func_0FD7(var2);\n        return arg0 + 0x20;\n    }\n    \n    function func_1023(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x103c;\n        var var2 = var0;\n        return func_1000(var2);\n    }\n    \n    function func_1043(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1092(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x109f;\n        var var2 = 0x25;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x10aa;\n        var2 = arg0;\n        func_1043(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_10B5(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x10ce;\n        var var2 = var0;\n        return func_1092(var2);\n    }\n    \n    function func_10D5(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6573730000000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1124(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1131;\n        var var2 = 0x23;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x113c;\n        var2 = arg0;\n        func_10D5(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1147(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1160;\n        var var2 = var0;\n        return func_1124(var2);\n    }\n    \n    function func_1167(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x616c616e63650000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_11B6(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x11c3;\n        var var2 = 0x26;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x11ce;\n        var2 = arg0;\n        func_1167(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_11D9(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x11f2;\n        var var2 = var0;\n        return func_11B6(var2);\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x39509351 > var0) {\n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = 0x00b6;\n                var1 = func_0276();\n                var temp0 = var1;\n                var1 = 0x00c3;\n                var var2 = temp0;\n                var var3 = memory[0x40:0x60];\n                var1 = func_0B0C(var2, var3);\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + var1 - temp1];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = 0x00e6;\n                var2 = 0x00e1;\n                var var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var2, var3 = func_0BC7(var3, var4);\n                var1 = func_00E1(var2, var3);\n                var temp2 = var1;\n                var1 = 0x00f3;\n                var2 = temp2;\n                var3 = memory[0x40:0x60];\n                var1 = func_0C22(var2, var3);\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + var1 - temp3];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = 0x0104;\n                var1 = func_032B();\n                var temp4 = var1;\n                var1 = 0x0111;\n                var2 = temp4;\n                var3 = memory[0x40:0x60];\n                var1 = func_0C4C(var2, var3);\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + var1 - temp5];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x0134;\n                var2 = 0x012f;\n                var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var2, var3, var4 = func_0C67(var3, var4);\n                var1 = func_012F(var2, var3, var4);\n                var temp6 = var1;\n                var1 = 0x0141;\n                var2 = temp6;\n                var3 = memory[0x40:0x60];\n                var1 = func_0C22(var2, var3);\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + var1 - temp7];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = 0x0152;\n                var1 = func_0364();\n                var temp8 = var1;\n                var1 = 0x015f;\n                var2 = temp8;\n                var3 = memory[0x40:0x60];\n                var1 = func_0CD6(var2, var3);\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + var1 - temp9];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x39509351) {\n            // Dispatch table entry for increaseAllowance(address,uint256)\n            var1 = 0x0182;\n            var2 = 0x017d;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3 = func_0BC7(var3, var4);\n            var1 = func_017D(var2, var3);\n            var temp10 = var1;\n            var1 = 0x018f;\n            var2 = temp10;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C22(var2, var3);\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + var1 - temp11];\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = 0x01b2;\n            var2 = 0x01ad;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2 = func_0CF1(var3, var4);\n            var1 = func_01AD(var2);\n            var temp12 = var1;\n            var1 = 0x01bf;\n            var2 = temp12;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C4C(var2, var3);\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + var1 - temp13];\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = 0x01d0;\n            var1 = func_03EC();\n            var temp14 = var1;\n            var1 = 0x01dd;\n            var2 = temp14;\n            var3 = memory[0x40:0x60];\n            var1 = func_0B0C(var2, var3);\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + var1 - temp15];\n        } else if (var0 == 0xa457c2d7) {\n            // Dispatch table entry for decreaseAllowance(address,uint256)\n            var1 = 0x0200;\n            var2 = 0x01fb;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3 = func_0BC7(var3, var4);\n            var1 = func_01FB(var2, var3);\n            var temp16 = var1;\n            var1 = 0x020d;\n            var2 = temp16;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C22(var2, var3);\n            var temp17 = memory[0x40:0x60];\n            return memory[temp17:temp17 + var1 - temp17];\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x0230;\n            var2 = 0x022b;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3 = func_0BC7(var3, var4);\n            var1 = func_022B(var2, var3);\n            var temp18 = var1;\n            var1 = 0x023d;\n            var2 = temp18;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C22(var2, var3);\n            var temp19 = memory[0x40:0x60];\n            return memory[temp19:temp19 + var1 - temp19];\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x0260;\n            var2 = 0x025b;\n            var3 = msg.data.length - 0x04 + 0x04;\n            var4 = 0x04;\n            var2, var3 = func_0D1E(var3, var4);\n            var1 = func_025B(var2, var3);\n            var temp20 = var1;\n            var1 = 0x026d;\n            var2 = temp20;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C4C(var2, var3);\n            var temp21 = memory[0x40:0x60];\n            return memory[temp21:temp21 + var1 - temp21];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_00E1(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0313;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x0320;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_05A7(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_012F(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0340;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x034d;\n        var var3 = arg0;\n        var var4 = var1;\n        var var5 = arg2;\n        func_0770(var3, var4, var5);\n        var2 = 0x0358;\n        var3 = arg0;\n        var4 = arg1;\n        var5 = arg2;\n        func_07FC(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_017D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0378;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x0399;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        var var6 = 0x038a;\n        var var7 = var3;\n        var var8 = var4;\n        var6 = func_0518(var7, var8);\n        func_038A(var3, var4, var5, var6);\n        return 0x01;\n    }\n    \n    function func_01AD(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_01FB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0489;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x00;\n        var var3 = 0x0497;\n        var var4 = var1;\n        var var5 = arg0;\n        var3 = func_0518(var4, var5);\n        var2 = var3;\n    \n        if (var2 >= arg1) {\n            var3 = 0x04e9;\n            var4 = var1;\n            var5 = arg0;\n            var var6 = var2 - arg1;\n            func_05A7(var4, var5, var6);\n            return 0x01;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var4 = temp1 + 0x04;\n            var3 = 0x04d3;\n            var3 = func_0E93(var4);\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var3 - temp2]);\n        }\n    }\n    \n    function func_022B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0500;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x050d;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_07FC(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_025B(var arg0, var arg1) returns (var r0) {\n        r0 = func_0518(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0276() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x03;\n        var var2 = 0x0285;\n        var var3 = storage[var1];\n        var2 = func_0D8D(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = 0x02b1;\n        var var7 = storage[var5];\n        var6 = func_0D8D(var7);\n    \n        if (!var6) {\n        label_02FE:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_02F5; }\n        \n        label_02E1:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_02E1; }\n        \n        label_02F5:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02FE;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp10 + 0x20;\n            goto label_02FE;\n        }\n    }\n    \n    function func_032B() returns (var r0) { return storage[0x02]; }\n    \n    function func_0364() returns (var r0) { return 0x12; }\n    \n    function func_038A(var arg0, var arg1, var arg2, var arg3) {\n        var temp0 = arg2;\n        arg2 = 0x0394;\n        var temp1 = arg3;\n        arg3 = temp0;\n        var var0 = temp1;\n        arg2 = func_0DED(arg3, var0);\n        func_05A7(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_03EC() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x04;\n        var var2 = 0x03fb;\n        var var3 = storage[var1];\n        var2 = func_0D8D(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = 0x0427;\n        var var7 = storage[var5];\n        var6 = func_0D8D(var7);\n    \n        if (!var6) {\n        label_0474:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_046B; }\n        \n        label_0457:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0457; }\n        \n        label_046B:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0474;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0474;\n        }\n    }\n    \n    function func_0518(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_059F() returns (var r0) { return msg.sender; }\n    \n    function func_05A7(var arg0, var arg1, var arg2) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp6 + 0x04;\n            var0 = 0x060d;\n            var0 = func_0F25(var1);\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + var0 - temp7]);\n        } else if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = arg2;\n            var var0 = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n            var var3 = 0x0763;\n            var var5 = memory[0x40:0x60];\n            var var4 = arg2;\n            var3 = func_0C4C(var4, var5);\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + var3 - temp3], [stack[-2], stack[-3], stack[-4]]);\n            return;\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp4 + 0x04;\n            var0 = 0x067c;\n            var0 = func_0FB7(var1);\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + var0 - temp5]);\n        }\n    }\n    \n    function func_0770(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x077c;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_0518(var2, var3);\n        var0 = var1;\n    \n        if (var0 == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        label_07F6:\n            return;\n        } else if (var0 >= arg2) {\n            var1 = 0x07f5;\n            var2 = arg0;\n            var3 = arg1;\n            var var4 = var0 - arg2;\n            func_05A7(var2, var3, var4);\n            goto label_07F6;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var2 = temp0 + 0x04;\n            var1 = 0x07df;\n            var1 = func_1023(var2);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        }\n    }\n    \n    function func_07FC(var arg0, var arg1, var arg2) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp9 + 0x04;\n            var0 = 0x0862;\n            var0 = func_10B5(var1);\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + var0 - temp10]);\n        } else if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var var0 = 0x08e5;\n            var var1 = arg0;\n            var var2 = arg1;\n            var var3 = arg2;\n            func_0A72(var1, var2, var3);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var0 >= arg2) {\n                var temp0 = arg2;\n                var temp1 = arg0;\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var0 - temp0;\n                var temp2 = arg1;\n                memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] + temp0;\n                var1 = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                var var4 = 0x0a59;\n                var var5 = temp0;\n                var var6 = memory[0x40:0x60];\n                var4 = func_0C4C(var5, var6);\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + var4 - temp4], [stack[-2], stack[-3], stack[-4]]);\n                var1 = 0x0a6c;\n                var2 = arg0;\n                var3 = arg1;\n                var4 = arg2;\n                func_0A77(var2, var3, var4);\n                return;\n            } else {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var2 = temp5 + 0x04;\n                var1 = 0x0962;\n                var1 = func_11D9(var2);\n                var temp6 = memory[0x40:0x60];\n                revert(memory[temp6:temp6 + var1 - temp6]);\n            }\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp7 + 0x04;\n            var0 = 0x08d1;\n            var0 = func_1147(var1);\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_0A72(var arg0, var arg1, var arg2) {}\n    \n    function func_0A77(var arg0, var arg1, var arg2) {}\n    \n    function func_0A7C(var arg0) returns (var r0) { return memory[arg0:arg0 + 0x20]; }\n    \n    function func_0A87(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_0A98(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (var0 >= arg0) {\n        label_0AB6:\n            memory[arg1 + arg0:arg1 + arg0 + 0x20] = 0x00;\n            return;\n        } else {\n        label_0AA4:\n            var temp0 = var0;\n            memory[arg1 + temp0:arg1 + temp0 + 0x20] = memory[arg2 + temp0:arg2 + temp0 + 0x20];\n            var0 = temp0 + 0x20;\n        \n            if (var0 >= arg0) { goto label_0AB6; }\n            else { goto label_0AA4; }\n        }\n    }\n    \n    function func_0AC2(var arg0) returns (var r0) { return arg0 + 0x1f & ~0x1f; }\n    \n    function func_0AD3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0ade;\n        var var2 = arg1;\n        var1 = func_0A7C(var2);\n        var2 = 0x0ae8;\n        var var3 = var1;\n        var var4 = arg0;\n        var2 = func_0A87(var3, var4);\n        var temp0 = var2;\n        arg0 = temp0;\n        var2 = 0x0af8;\n        var3 = var1;\n        var4 = arg0;\n        var var5 = arg1 + 0x20;\n        func_0A98(var3, var4, var5);\n        var2 = 0x0b01;\n        var3 = var1;\n        var2 = func_0AC2(var3);\n        return arg0 + var2;\n    }\n    \n    function func_0B0C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x0b26;\n        var var2 = var0;\n        var var3 = arg0;\n        return func_0AD3(var2, var3);\n    }\n    \n    function func_0B33(var arg0) returns (var r0) { return arg0 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_0B53(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b5e;\n        var var2 = arg0;\n        return func_0B33(var2);\n    }\n    \n    function func_0B65(var arg0) {\n        var var0 = 0x0b6e;\n        var var1 = arg0;\n        var0 = func_0B53(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0B7C(var arg0, var arg1) returns (var r0) {\n        var var0 = msg.data[arg1:arg1 + 0x20];\n        var var1 = 0x0b8b;\n        var var2 = var0;\n        func_0B65(var2);\n        return var0;\n    }\n    \n    function func_0B91(var arg0) returns (var r0) { return arg0; }\n    \n    function func_0B9B(var arg0) {\n        var var0 = 0x0ba4;\n        var var1 = arg0;\n        var0 = func_0B91(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0BB2(var arg0, var arg1) returns (var r0) {\n        var var0 = msg.data[arg1:arg1 + 0x20];\n        var var1 = 0x0bc1;\n        var var2 = var0;\n        func_0B9B(var2);\n        return var0;\n    }\n    \n    function func_0BC7(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x00;\n            var var3 = 0x0bec;\n            var var4 = arg0;\n            var var5 = arg1 + var2;\n            var3 = func_0B7C(var4, var5);\n            var0 = var3;\n            var2 = 0x20;\n            var3 = 0x0bfd;\n            var4 = arg0;\n            var5 = arg1 + var2;\n            var3 = func_0BB2(var4, var5);\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var2 = 0x0bdd;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_0C07(var arg0) returns (var r0) { return !!arg0; }\n    \n    function func_0C13(var arg0, var arg1) {\n        var var0 = 0x0c1c;\n        var var1 = arg1;\n        var0 = func_0C07(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_0C22(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x0c37;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_0C13(var2, var3);\n        return var0;\n    }\n    \n    function func_0C3D(var arg0, var arg1) {\n        var var0 = 0x0c46;\n        var var1 = arg1;\n        var0 = func_0B91(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_0C4C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x0c61;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_0C3D(var2, var3);\n        return var0;\n    }\n    \n    function func_0C67(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var3 = 0x00;\n            var var4 = 0x0c8e;\n            var var5 = arg0;\n            var var6 = arg1 + var3;\n            var4 = func_0B7C(var5, var6);\n            var0 = var4;\n            var3 = 0x20;\n            var4 = 0x0c9f;\n            var5 = arg0;\n            var6 = arg1 + var3;\n            var4 = func_0B7C(var5, var6);\n            var1 = var4;\n            var3 = 0x40;\n            var4 = 0x0cb0;\n            var5 = arg0;\n            var6 = arg1 + var3;\n            var4 = func_0BB2(var5, var6);\n            arg1 = var4;\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else {\n            var3 = 0x0c7f;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_0CBA(var arg0) returns (var r0) { return arg0 & 0xff; }\n    \n    function func_0CC7(var arg0, var arg1) {\n        var var0 = 0x0cd0;\n        var var1 = arg1;\n        var0 = func_0CBA(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_0CD6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x0ceb;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_0CC7(var2, var3);\n        return var0;\n    }\n    \n    function func_0CF1(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x00;\n            var var2 = 0x0d15;\n            var var3 = arg0;\n            var var4 = arg1 + var1;\n            return func_0B7C(var3, var4);\n        } else {\n            var1 = 0x0d06;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_0D1E(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x00;\n            var var3 = 0x0d43;\n            var var4 = arg0;\n            var var5 = arg1 + var2;\n            var3 = func_0B7C(var4, var5);\n            var0 = var3;\n            var2 = 0x20;\n            var3 = 0x0d54;\n            var4 = arg0;\n            var5 = arg1 + var2;\n            var3 = func_0B7C(var4, var5);\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var2 = 0x0d34;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_0D8D(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 / 0x02;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 - (var0 < 0x20)) { goto label_0DB8; }\n            else { goto label_0DB0; }\n        } else if (var1 - (var0 < 0x20)) {\n        label_0DB8:\n            return var0;\n        } else {\n        label_0DB0:\n            var var2 = 0x0db7;\n            memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n    \n    function func_0DED(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0df8;\n        var var2 = arg1;\n        var1 = func_0B91(var2);\n        arg1 = var1;\n        var1 = 0x0e03;\n        var2 = arg0;\n        var1 = func_0B91(var2);\n        arg0 = var1;\n        var temp0 = arg1;\n        var0 = temp0 + arg0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var1 = 0x0e1a;\n        memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0E21(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x207a65726f000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_0E70(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0e7d;\n        var var2 = 0x25;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x0e88;\n        var2 = arg0;\n        func_0E21(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_0E93(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x0eac;\n        var var2 = var0;\n        return func_0E70(var2);\n    }\n    \n    function func_0EB3(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_0F02(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0f0f;\n        var var2 = 0x24;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x0f1a;\n        var2 = arg0;\n        func_0EB3(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_0F25(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x0f3e;\n        var var2 = var0;\n        return func_0F02(var2);\n    }\n    \n    function func_0F45(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7373000000000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_0F94(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0fa1;\n        var var2 = 0x22;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x0fac;\n        var2 = arg0;\n        func_0F45(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_0FB7(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x0fd0;\n        var var2 = var0;\n        return func_0F94(var2);\n    }\n    \n    function func_0FD7(var arg0) {\n        memory[arg0:arg0 + 0x20] = 0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000;\n    }\n    \n    function func_1000(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x100d;\n        var var2 = 0x1d;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1018;\n        var2 = arg0;\n        func_0FD7(var2);\n        return arg0 + 0x20;\n    }\n    \n    function func_1023(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x103c;\n        var var2 = var0;\n        return func_1000(var2);\n    }\n    \n    function func_1043(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1092(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x109f;\n        var var2 = 0x25;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x10aa;\n        var2 = arg0;\n        func_1043(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_10B5(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x10ce;\n        var var2 = var0;\n        return func_1092(var2);\n    }\n    \n    function func_10D5(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6573730000000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1124(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1131;\n        var var2 = 0x23;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x113c;\n        var2 = arg0;\n        func_10D5(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1147(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1160;\n        var var2 = var0;\n        return func_1124(var2);\n    }\n    \n    function func_1167(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x616c616e63650000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_11B6(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x11c3;\n        var var2 = 0x26;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x11ce;\n        var2 = arg0;\n        func_1167(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_11D9(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x11f2;\n        var var2 = var0;\n        return func_11B6(var2);\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x39509351 > var0) {\n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                var var1 = 0x00b6;\n                var1 = func_0276();\n                var temp0 = var1;\n                var1 = 0x00c3;\n                var var2 = temp0;\n                var var3 = memory[0x40:0x60];\n                var1 = func_0B0C(var2, var3);\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + var1 - temp1];\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                var1 = 0x00e6;\n                var2 = 0x00e1;\n                var var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var2, var3 = func_0BC7(var3, var4);\n                var1 = func_00E1(var2, var3);\n                var temp2 = var1;\n                var1 = 0x00f3;\n                var2 = temp2;\n                var3 = memory[0x40:0x60];\n                var1 = func_0C22(var2, var3);\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + var1 - temp3];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                var1 = 0x0104;\n                var1 = func_032B();\n                var temp4 = var1;\n                var1 = 0x0111;\n                var2 = temp4;\n                var3 = memory[0x40:0x60];\n                var1 = func_0C4C(var2, var3);\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + var1 - temp5];\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                var1 = 0x0134;\n                var2 = 0x012f;\n                var4 = 0x04;\n                var3 = var4 + (msg.data.length - var4);\n                var2, var3, var4 = func_0C67(var3, var4);\n                var1 = func_012F(var2, var3, var4);\n                var temp6 = var1;\n                var1 = 0x0141;\n                var2 = temp6;\n                var3 = memory[0x40:0x60];\n                var1 = func_0C22(var2, var3);\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + var1 - temp7];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                var1 = 0x0152;\n                var1 = func_0364();\n                var temp8 = var1;\n                var1 = 0x015f;\n                var2 = temp8;\n                var3 = memory[0x40:0x60];\n                var1 = func_0CD6(var2, var3);\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + var1 - temp9];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0x39509351) {\n            // Dispatch table entry for increaseAllowance(address,uint256)\n            var1 = 0x0182;\n            var2 = 0x017d;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3 = func_0BC7(var3, var4);\n            var1 = func_017D(var2, var3);\n            var temp10 = var1;\n            var1 = 0x018f;\n            var2 = temp10;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C22(var2, var3);\n            var temp11 = memory[0x40:0x60];\n            return memory[temp11:temp11 + var1 - temp11];\n        } else if (var0 == 0x70a08231) {\n            // Dispatch table entry for balanceOf(address)\n            var1 = 0x01b2;\n            var2 = 0x01ad;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2 = func_0CF1(var3, var4);\n            var1 = func_01AD(var2);\n            var temp12 = var1;\n            var1 = 0x01bf;\n            var2 = temp12;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C4C(var2, var3);\n            var temp13 = memory[0x40:0x60];\n            return memory[temp13:temp13 + var1 - temp13];\n        } else if (var0 == 0x95d89b41) {\n            // Dispatch table entry for symbol()\n            var1 = 0x01d0;\n            var1 = func_03EC();\n            var temp14 = var1;\n            var1 = 0x01dd;\n            var2 = temp14;\n            var3 = memory[0x40:0x60];\n            var1 = func_0B0C(var2, var3);\n            var temp15 = memory[0x40:0x60];\n            return memory[temp15:temp15 + var1 - temp15];\n        } else if (var0 == 0xa457c2d7) {\n            // Dispatch table entry for decreaseAllowance(address,uint256)\n            var1 = 0x0200;\n            var2 = 0x01fb;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3 = func_0BC7(var3, var4);\n            var1 = func_01FB(var2, var3);\n            var temp16 = var1;\n            var1 = 0x020d;\n            var2 = temp16;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C22(var2, var3);\n            var temp17 = memory[0x40:0x60];\n            return memory[temp17:temp17 + var1 - temp17];\n        } else if (var0 == 0xa9059cbb) {\n            // Dispatch table entry for transfer(address,uint256)\n            var1 = 0x0230;\n            var2 = 0x022b;\n            var4 = 0x04;\n            var3 = var4 + (msg.data.length - var4);\n            var2, var3 = func_0BC7(var3, var4);\n            var1 = func_022B(var2, var3);\n            var temp18 = var1;\n            var1 = 0x023d;\n            var2 = temp18;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C22(var2, var3);\n            var temp19 = memory[0x40:0x60];\n            return memory[temp19:temp19 + var1 - temp19];\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x0260;\n            var2 = 0x025b;\n            var3 = msg.data.length - 0x04 + 0x04;\n            var4 = 0x04;\n            var2, var3 = func_0D1E(var3, var4);\n            var1 = func_025B(var2, var3);\n            var temp20 = var1;\n            var1 = 0x026d;\n            var2 = temp20;\n            var3 = memory[0x40:0x60];\n            var1 = func_0C4C(var2, var3);\n            var temp21 = memory[0x40:0x60];\n            return memory[temp21:temp21 + var1 - temp21];\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_00E1(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0313;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x0320;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_05A7(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_012F(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0340;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x034d;\n        var var3 = arg0;\n        var var4 = var1;\n        var var5 = arg2;\n        func_0770(var3, var4, var5);\n        var2 = 0x0358;\n        var3 = arg0;\n        var4 = arg1;\n        var5 = arg2;\n        func_07FC(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_017D(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0378;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x0399;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        var var6 = 0x038a;\n        var var7 = var3;\n        var var8 = var4;\n        var6 = func_0518(var7, var8);\n        func_038A(var3, var4, var5, var6);\n        return 0x01;\n    }\n    \n    function func_01AD(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x00;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_01FB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0489;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x00;\n        var var3 = 0x0497;\n        var var4 = var1;\n        var var5 = arg0;\n        var3 = func_0518(var4, var5);\n        var2 = var3;\n    \n        if (var2 >= arg1) {\n            var3 = 0x04e9;\n            var4 = var1;\n            var5 = arg0;\n            var var6 = var2 - arg1;\n            func_05A7(var4, var5, var6);\n            return 0x01;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var4 = temp1 + 0x04;\n            var3 = 0x04d3;\n            var3 = func_0E93(var4);\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + var3 - temp2]);\n        }\n    }\n    \n    function func_022B(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0500;\n        var2 = func_059F();\n        var temp0 = var2;\n        var1 = temp0;\n        var2 = 0x050d;\n        var var3 = var1;\n        var var4 = arg0;\n        var var5 = arg1;\n        func_07FC(var3, var4, var5);\n        return 0x01;\n    }\n    \n    function func_025B(var arg0, var arg1) returns (var r0) {\n        r0 = func_0518(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0276() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x03;\n        var var2 = 0x0285;\n        var var3 = storage[var1];\n        var2 = func_0D8D(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = 0x02b1;\n        var var7 = storage[var5];\n        var6 = func_0D8D(var7);\n    \n        if (!var6) {\n        label_02FE:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_02F5; }\n        \n        label_02E1:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_02E1; }\n        \n        label_02F5:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_02FE;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var6 = var6;\n            var4 = temp10 + 0x20;\n            goto label_02FE;\n        }\n    }\n    \n    function func_032B() returns (var r0) { return storage[0x02]; }\n    \n    function func_0364() returns (var r0) { return 0x12; }\n    \n    function func_038A(var arg0, var arg1, var arg2, var arg3) {\n        var temp0 = arg2;\n        arg2 = 0x0394;\n        var temp1 = arg3;\n        arg3 = temp0;\n        var var0 = temp1;\n        arg2 = func_0DED(arg3, var0);\n        func_05A7(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_03EC() returns (var r0) {\n        var var0 = 0x60;\n        var var1 = 0x04;\n        var var2 = 0x03fb;\n        var var3 = storage[var1];\n        var2 = func_0D8D(var3);\n        var temp0 = var2;\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + (temp0 + 0x1f) / 0x20 * 0x20 + 0x20;\n        var temp2 = var1;\n        var1 = temp1;\n        var2 = temp2;\n        var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = 0x0427;\n        var var7 = storage[var5];\n        var6 = func_0D8D(var7);\n    \n        if (!var6) {\n        label_0474:\n            return var1;\n        } else if (0x1f < var6) {\n            var temp3 = var4;\n            var temp4 = temp3 + var6;\n            var4 = temp4;\n            memory[0x00:0x20] = var5;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var5 = temp5 + 0x01;\n            var6 = temp3 + 0x20;\n        \n            if (var4 <= var6) { goto label_046B; }\n        \n        label_0457:\n            var temp6 = var5;\n            var temp7 = var6;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var5 = temp6 + 0x01;\n            var6 = temp7 + 0x20;\n        \n            if (var4 > var6) { goto label_0457; }\n        \n        label_046B:\n            var temp8 = var4;\n            var temp9 = temp8 + (var6 - temp8 & 0x1f);\n            var6 = temp8;\n            var4 = temp9;\n            goto label_0474;\n        } else {\n            var temp10 = var4;\n            memory[temp10:temp10 + 0x20] = storage[var5] / 0x0100 * 0x0100;\n            var4 = temp10 + 0x20;\n            var6 = var6;\n            goto label_0474;\n        }\n    }\n    \n    function func_0518(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_059F() returns (var r0) { return msg.sender; }\n    \n    function func_05A7(var arg0, var arg1, var arg2) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp6 + 0x04;\n            var0 = 0x060d;\n            var0 = func_0F25(var1);\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + var0 - temp7]);\n        } else if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x01;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = temp1;\n            storage[keccak256(memory[0x00:0x40])] = arg2;\n            var var0 = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925;\n            var var3 = 0x0763;\n            var var5 = memory[0x40:0x60];\n            var var4 = arg2;\n            var3 = func_0C4C(var4, var5);\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + var3 - temp3], [stack[-2], stack[-3], stack[-4]]);\n            return;\n        } else {\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp4 + 0x04;\n            var0 = 0x067c;\n            var0 = func_0FB7(var1);\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + var0 - temp5]);\n        }\n    }\n    \n    function func_0770(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = 0x077c;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_0518(var2, var3);\n        var0 = var1;\n    \n        if (var0 == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        label_07F6:\n            return;\n        } else if (var0 >= arg2) {\n            var1 = 0x07f5;\n            var2 = arg0;\n            var3 = arg1;\n            var var4 = var0 - arg2;\n            func_05A7(var2, var3, var4);\n            goto label_07F6;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var2 = temp0 + 0x04;\n            var1 = 0x07df;\n            var1 = func_1023(var2);\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + var1 - temp1]);\n        }\n    }\n    \n    function func_07FC(var arg0, var arg1, var arg2) {\n        if (!(arg0 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp9 + 0x04;\n            var0 = 0x0862;\n            var0 = func_10B5(var1);\n            var temp10 = memory[0x40:0x60];\n            revert(memory[temp10:temp10 + var0 - temp10]);\n        } else if (arg1 & 0xffffffffffffffffffffffffffffffffffffffff) {\n            var var0 = 0x08e5;\n            var var1 = arg0;\n            var var2 = arg1;\n            var var3 = arg2;\n            func_0A72(var1, var2, var3);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x00;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var0 >= arg2) {\n                var temp0 = arg2;\n                var temp1 = arg0;\n                memory[0x00:0x20] = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                storage[keccak256(memory[0x00:0x40])] = var0 - temp0;\n                var temp2 = arg1;\n                memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x00;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] + temp0;\n                var1 = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = temp1 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef;\n                var var4 = 0x0a59;\n                var var5 = temp0;\n                var var6 = memory[0x40:0x60];\n                var4 = func_0C4C(var5, var6);\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + var4 - temp4], [stack[-2], stack[-3], stack[-4]]);\n                var1 = 0x0a6c;\n                var2 = arg0;\n                var3 = arg1;\n                var4 = arg2;\n                func_0A77(var2, var3, var4);\n                return;\n            } else {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                var2 = temp5 + 0x04;\n                var1 = 0x0962;\n                var1 = func_11D9(var2);\n                var temp6 = memory[0x40:0x60];\n                revert(memory[temp6:temp6 + var1 - temp6]);\n            }\n        } else {\n            var temp7 = memory[0x40:0x60];\n            memory[temp7:temp7 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            var1 = temp7 + 0x04;\n            var0 = 0x08d1;\n            var0 = func_1147(var1);\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + var0 - temp8]);\n        }\n    }\n    \n    function func_0A72(var arg0, var arg1, var arg2) {}\n    \n    function func_0A77(var arg0, var arg1, var arg2) {}\n    \n    function func_0A7C(var arg0) returns (var r0) { return memory[arg0:arg0 + 0x20]; }\n    \n    function func_0A87(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[temp0:temp0 + 0x20] = arg0;\n        return temp0 + 0x20;\n    }\n    \n    function func_0A98(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n    \n        if (var0 >= arg0) {\n        label_0AB6:\n            memory[arg1 + arg0:arg1 + arg0 + 0x20] = 0x00;\n            return;\n        } else {\n        label_0AA4:\n            var temp0 = var0;\n            memory[arg1 + temp0:arg1 + temp0 + 0x20] = memory[arg2 + temp0:arg2 + temp0 + 0x20];\n            var0 = temp0 + 0x20;\n        \n            if (var0 >= arg0) { goto label_0AB6; }\n            else { goto label_0AA4; }\n        }\n    }\n    \n    function func_0AC2(var arg0) returns (var r0) { return arg0 + 0x1f & ~0x1f; }\n    \n    function func_0AD3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0ade;\n        var var2 = arg1;\n        var1 = func_0A7C(var2);\n        var2 = 0x0ae8;\n        var var3 = var1;\n        var var4 = arg0;\n        var2 = func_0A87(var3, var4);\n        var temp0 = var2;\n        arg0 = temp0;\n        var2 = 0x0af8;\n        var3 = var1;\n        var4 = arg0;\n        var var5 = arg1 + 0x20;\n        func_0A98(var3, var4, var5);\n        var2 = 0x0b01;\n        var3 = var1;\n        var2 = func_0AC2(var3);\n        return arg0 + var2;\n    }\n    \n    function func_0B0C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x0b26;\n        var var2 = var0;\n        var var3 = arg0;\n        return func_0AD3(var2, var3);\n    }\n    \n    function func_0B33(var arg0) returns (var r0) { return arg0 & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function func_0B53(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b5e;\n        var var2 = arg0;\n        return func_0B33(var2);\n    }\n    \n    function func_0B65(var arg0) {\n        var var0 = 0x0b6e;\n        var var1 = arg0;\n        var0 = func_0B53(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0B7C(var arg0, var arg1) returns (var r0) {\n        var var0 = msg.data[arg1:arg1 + 0x20];\n        var var1 = 0x0b8b;\n        var var2 = var0;\n        func_0B65(var2);\n        return var0;\n    }\n    \n    function func_0B91(var arg0) returns (var r0) { return arg0; }\n    \n    function func_0B9B(var arg0) {\n        var var0 = 0x0ba4;\n        var var1 = arg0;\n        var0 = func_0B91(var1);\n    \n        if (arg0 == var0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0BB2(var arg0, var arg1) returns (var r0) {\n        var var0 = msg.data[arg1:arg1 + 0x20];\n        var var1 = 0x0bc1;\n        var var2 = var0;\n        func_0B9B(var2);\n        return var0;\n    }\n    \n    function func_0BC7(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x00;\n            var var3 = 0x0bec;\n            var var4 = arg0;\n            var var5 = arg1 + var2;\n            var3 = func_0B7C(var4, var5);\n            var0 = var3;\n            var2 = 0x20;\n            var3 = 0x0bfd;\n            var4 = arg0;\n            var5 = arg1 + var2;\n            var3 = func_0BB2(var4, var5);\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var2 = 0x0bdd;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_0C07(var arg0) returns (var r0) { return !!arg0; }\n    \n    function func_0C13(var arg0, var arg1) {\n        var var0 = 0x0c1c;\n        var var1 = arg1;\n        var0 = func_0C07(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_0C22(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x0c37;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_0C13(var2, var3);\n        return var0;\n    }\n    \n    function func_0C3D(var arg0, var arg1) {\n        var var0 = 0x0c46;\n        var var1 = arg1;\n        var0 = func_0B91(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_0C4C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x0c61;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_0C3D(var2, var3);\n        return var0;\n    }\n    \n    function func_0C67(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x60) {\n            var var3 = 0x00;\n            var var4 = 0x0c8e;\n            var var5 = arg0;\n            var var6 = arg1 + var3;\n            var4 = func_0B7C(var5, var6);\n            var0 = var4;\n            var3 = 0x20;\n            var4 = 0x0c9f;\n            var5 = arg0;\n            var6 = arg1 + var3;\n            var4 = func_0B7C(var5, var6);\n            var1 = var4;\n            var3 = 0x40;\n            var4 = 0x0cb0;\n            var5 = arg0;\n            var6 = arg1 + var3;\n            var4 = func_0BB2(var5, var6);\n            arg1 = var4;\n            arg0 = var1;\n            r0 = var0;\n            return r0, arg0, arg1;\n        } else {\n            var3 = 0x0c7f;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_0CBA(var arg0) returns (var r0) { return arg0 & 0xff; }\n    \n    function func_0CC7(var arg0, var arg1) {\n        var var0 = 0x0cd0;\n        var var1 = arg1;\n        var0 = func_0CBA(var1);\n        memory[arg0:arg0 + 0x20] = var0;\n    }\n    \n    function func_0CD6(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var var0 = temp0 + 0x20;\n        var var1 = 0x0ceb;\n        var var2 = temp0;\n        var var3 = arg0;\n        func_0CC7(var2, var3);\n        return var0;\n    }\n    \n    function func_0CF1(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 - arg1 i>= 0x20) {\n            var var1 = 0x00;\n            var var2 = 0x0d15;\n            var var3 = arg0;\n            var var4 = arg1 + var1;\n            return func_0B7C(var3, var4);\n        } else {\n            var1 = 0x0d06;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_0D1E(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg0 - arg1 i>= 0x40) {\n            var var2 = 0x00;\n            var var3 = 0x0d43;\n            var var4 = arg0;\n            var var5 = arg1 + var2;\n            var3 = func_0B7C(var4, var5);\n            var0 = var3;\n            var2 = 0x20;\n            var3 = 0x0d54;\n            var4 = arg0;\n            var5 = arg1 + var2;\n            var3 = func_0B7C(var4, var5);\n            arg0 = var3;\n            r0 = var0;\n            return r0, arg0;\n        } else {\n            var2 = 0x0d34;\n            revert(memory[0x00:0x00]);\n        }\n    }\n    \n    function func_0D8D(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 / 0x02;\n        var var1 = temp0 & 0x01;\n    \n        if (!var1) {\n            var temp1 = var0 & 0x7f;\n            var0 = temp1;\n        \n            if (var1 - (var0 < 0x20)) { goto label_0DB8; }\n            else { goto label_0DB0; }\n        } else if (var1 - (var0 < 0x20)) {\n        label_0DB8:\n            return var0;\n        } else {\n        label_0DB0:\n            var var2 = 0x0db7;\n            memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n            memory[0x04:0x24] = 0x22;\n            revert(memory[0x00:0x24]);\n        }\n    }\n    \n    function func_0DED(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0df8;\n        var var2 = arg1;\n        var1 = func_0B91(var2);\n        arg1 = var1;\n        var1 = 0x0e03;\n        var2 = arg0;\n        var1 = func_0B91(var2);\n        arg0 = var1;\n        var temp0 = arg1;\n        var0 = temp0 + arg0;\n    \n        if (temp0 <= var0) { return var0; }\n    \n        var1 = 0x0e1a;\n        memory[0x00:0x20] = 0x4e487b7100000000000000000000000000000000000000000000000000000000;\n        memory[0x04:0x24] = 0x11;\n        revert(memory[0x00:0x24]);\n    }\n    \n    function func_0E21(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x207a65726f000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_0E70(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0e7d;\n        var var2 = 0x25;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x0e88;\n        var2 = arg0;\n        func_0E21(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_0E93(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x0eac;\n        var var2 = var0;\n        return func_0E70(var2);\n    }\n    \n    function func_0EB3(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a20617070726f76652066726f6d20746865207a65726f20616464;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7265737300000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_0F02(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0f0f;\n        var var2 = 0x24;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x0f1a;\n        var2 = arg0;\n        func_0EB3(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_0F25(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x0f3e;\n        var var2 = var0;\n        return func_0F02(var2);\n    }\n    \n    function func_0F45(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a20617070726f766520746f20746865207a65726f206164647265;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7373000000000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_0F94(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0fa1;\n        var var2 = 0x22;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x0fac;\n        var2 = arg0;\n        func_0F45(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_0FB7(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x0fd0;\n        var var2 = var0;\n        return func_0F94(var2);\n    }\n    \n    function func_0FD7(var arg0) {\n        memory[arg0:arg0 + 0x20] = 0x45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000;\n    }\n    \n    function func_1000(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x100d;\n        var var2 = 0x1d;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x1018;\n        var2 = arg0;\n        func_0FD7(var2);\n        return arg0 + 0x20;\n    }\n    \n    function func_1023(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x103c;\n        var var2 = var0;\n        return func_1000(var2);\n    }\n    \n    function func_1043(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e736665722066726f6d20746865207a65726f206164;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6472657373000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1092(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x109f;\n        var var2 = 0x25;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x10aa;\n        var2 = arg0;\n        func_1043(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_10B5(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x10ce;\n        var var2 = var0;\n        return func_1092(var2);\n    }\n    \n    function func_10D5(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e7366657220746f20746865207a65726f2061646472;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x6573730000000000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_1124(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1131;\n        var var2 = 0x23;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x113c;\n        var2 = arg0;\n        func_10D5(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_1147(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x1160;\n        var var2 = var0;\n        return func_1124(var2);\n    }\n    \n    function func_1167(var arg0) {\n        var temp0 = arg0;\n        memory[temp0:temp0 + 0x20] = 0x45524332303a207472616e7366657220616d6f756e7420657863656564732062;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x616c616e63650000000000000000000000000000000000000000000000000000;\n    }\n    \n    function func_11B6(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x11c3;\n        var var2 = 0x26;\n        var var3 = arg0;\n        var1 = func_0A87(var2, var3);\n        var temp0 = var1;\n        arg0 = temp0;\n        var1 = 0x11ce;\n        var2 = arg0;\n        func_1167(var2);\n        return arg0 + 0x40;\n    }\n    \n    function func_11D9(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = var0 - temp0;\n        var var1 = 0x11f2;\n        var var2 = var0;\n        return func_11B6(var2);\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 31.02260708808899,
	"usage": {
		"completion_tokens": 488,
		"prompt_tokens": 11815,
		"total_tokens": 12303
	}
}