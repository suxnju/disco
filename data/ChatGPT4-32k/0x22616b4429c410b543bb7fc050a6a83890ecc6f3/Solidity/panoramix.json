{
	"address": "0x22616b4429c410b543bb7fc050a6a83890ecc6f3",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity code for the given decompiled code will look something like this:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract ERC20Token {\n\n    string public name;\n    string public symbol;\n    uint8 public decimals = 18;\n    uint256 public totalSupply;\n    \n    mapping (address => uint256) public balanceOf;\n    mapping (address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor(string memory tokenName, string memory tokenSymbol, uint256 initialSupply) public {\n        name = tokenName;\n        symbol = tokenSymbol;\n        totalSupply = initialSupply * 10 ** uint256(decimals);\n        balanceOf[msg.sender] = totalSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balanceOf[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n}\n```\n\nPlease note that this is a simplified version of the ERC20 token contract. The decompiled code provided seems to have more complex logic than the standard ERC20 contract, possibly including additional functionality not included in this Solidity code.",
				"role": "assistant"
			}
		}
	],
	"created": 1700632355,
	"id": "chatcmpl-8NaS3D961XHMUVVQPzH7Aj9Fl0cA0",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\nconst decimals = 18\n\ndef storage:\n  balanceOf is mapping of uint256 at storage 0\n  allowance is mapping of uint256 at storage 1\n  totalSupply is uint256 at storage 2\n  stor3 is array of struct at storage 3\n  stor4 is array of struct at storage 4\n\ndef totalSupply() payable: \n  return totalSupply\n\ndef balanceOf(address account) payable: \n  require calldata.size - 4 >=\u2032 32\n  require account == account\n  return balanceOf[address(account)]\n\ndef allowance(address owner, address spender) payable: \n  require calldata.size - 4 >=\u2032 64\n  require owner == owner\n  require spender == spender\n  return allowance[address(owner)][address(spender)]\n\n#\n#  Regular functions\n#\n\ndef _fallback(?) payable: # default function\n  revert\n\ndef approve(address spender, uint256 amount) payable: \n  require calldata.size - 4 >=\u2032 64\n  require spender == spender\n  require amount == amount\n  if not caller:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'\n  if not spender:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'\n  allowance[caller][address(spender)] = amount\n  log Approval(\n        address owner=amount,\n        address spender=caller,\n        uint256 value=spender)\n  return 1\n\ndef transfer(address recipient, uint256 amount) payable: \n  require calldata.size - 4 >=\u2032 64\n  require recipient == recipient\n  require amount == amount\n  if not caller:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'\n  if not recipient:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'\n  if balanceOf[caller] < amount:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'\n  balanceOf[caller] -= amount\n  balanceOf[address(recipient)] += amount\n  log Transfer(\n        address from=amount,\n        address to=caller,\n        uint256 value=recipient)\n  return 1\n\ndef decreaseAllowance(address spender, uint256 subtractedValue) payable: \n  require calldata.size - 4 >=\u2032 64\n  require spender == spender\n  require subtractedValue == subtractedValue\n  if allowance[caller][address(spender)] < subtractedValue:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: decreased allowance below zero'\n  if not caller:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'\n  if not spender:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'\n  allowance[caller][address(spender)] -= subtractedValue\n  log Approval(\n        address owner=(allowance[caller][address(spender)] - subtractedValue),\n        address spender=caller,\n        uint256 value=spender)\n  return 1\n\ndef increaseAllowance(address spender, uint256 addedValue) payable: \n  require calldata.size - 4 >=\u2032 64\n  require spender == spender\n  require addedValue == addedValue\n  if allowance[caller][address(spender)] > allowance[caller][address(spender)] + addedValue:\n      revert with Panic(17)  # If an arithmetic operation results in underflow or overflow outside of an unchecked { ... } block.\n  if not caller:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'\n  if not spender:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'\n  allowance[caller][address(spender)] += addedValue\n  log Approval(\n        address owner=(allowance[caller][address(spender)] + addedValue),\n        address spender=caller,\n        uint256 value=spender)\n  return 1\n\ndef transferFrom(address sender, address recipient, uint256 amount) payable: \n  require calldata.size - 4 >=\u2032 96\n  require sender == sender\n  require recipient == recipient\n  require amount == amount\n  if allowance[address(sender)][caller] != -1:\n      if allowance[address(sender)][caller] < amount:\n          revert with 0, 'ERC20: insufficient allowance'\n      if not sender:\n          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'\n      if not caller:\n          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'\n      allowance[address(sender)][caller] -= amount\n      log Approval(\n            address owner=(allowance[address(sender)][caller] - amount),\n            address spender=sender,\n            uint256 value=caller)\n  if not sender:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'\n  if not recipient:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'\n  if balanceOf[address(sender)] < amount:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'\n  balanceOf[address(sender)] -= amount\n  balanceOf[address(recipient)] += amount\n  log Transfer(\n        address from=amount,\n        address to=sender,\n        uint256 value=recipient)\n  return 1\n\ndef name() payable: \n  if bool(stor3.length):\n      if not bool(stor3.length) - (stor3.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if bool(stor3.length):\n          if not bool(stor3.length) - (stor3.length.field_1 < 32):\n              revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n          if stor3.length.field_1:\n              if 31 < stor3.length.field_1:\n                  mem[128] = uint256(stor3.field_0)\n                  idx = 128\n                  s = 0\n                  while stor3.length.field_1 + 96 > idx:\n                      mem[idx + 32] = stor3[s].field_256\n                      idx = idx + 32\n                      s = s + 1\n                      continue \n                  return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)])\n              mem[128] = 256 * stor3.length.field_8\n      else:\n          if not bool(stor3.length) - (stor3.length.field_1 < 32):\n              revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n          if stor3.length.field_1:\n              if 31 < stor3.length.field_1:\n                  mem[128] = uint256(stor3.field_0)\n                  idx = 128\n                  s = 0\n                  while stor3.length.field_1 + 96 > idx:\n                      mem[idx + 32] = stor3[s].field_256\n                      idx = idx + 32\n                      s = s + 1\n                      continue \n                  return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)])\n              mem[128] = 256 * stor3.length.field_8\n      mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]\n      mem[ceil32(stor3.length.field_1) + stor3.length.field_1 + 192] = 0\n      return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), \n  if not bool(stor3.length) - (stor3.length.field_1 < 32):\n      revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n  if bool(stor3.length):\n      if not bool(stor3.length) - (stor3.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if stor3.length.field_1:\n          if 31 < stor3.length.field_1:\n              mem[128] = uint256(stor3.field_0)\n              idx = 128\n              s = 0\n              while stor3.length.field_1 + 96 > idx:\n                  mem[idx + 32] = stor3[s].field_256\n                  idx = idx + 32\n                  s = s + 1\n                  continue \n              return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])\n          mem[128] = 256 * stor3.length.field_8\n  else:\n      if not bool(stor3.length) - (stor3.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if stor3.length.field_1:\n          if 31 < stor3.length.field_1:\n              mem[128] = uint256(stor3.field_0)\n              idx = 128\n              s = 0\n              while stor3.length.field_1 + 96 > idx:\n                  mem[idx + 32] = stor3[s].field_256\n                  idx = idx + 32\n                  s = s + 1\n                  continue \n              return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])\n          mem[128] = 256 * stor3.length.field_8\n  mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]\n  mem[ceil32(stor3.length.field_1) + stor3.length.field_1 + 192] = 0\n  return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), \n\ndef symbol() payable: \n  if bool(stor4.length):\n      if not bool(stor4.length) - (stor4.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if bool(stor4.length):\n          if not bool(stor4.length) - (stor4.length.field_1 < 32):\n              revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n          if stor4.length.field_1:\n              if 31 < stor4.length.field_1:\n                  mem[128] = uint256(stor4.field_0)\n                  idx = 128\n                  s = 0\n                  while stor4.length.field_1 + 96 > idx:\n                      mem[idx + 32] = stor4[s].field_256\n                      idx = idx + 32\n                      s = s + 1\n                      continue \n                  return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)])\n              mem[128] = 256 * stor4.length.field_8\n      else:\n          if not bool(stor4.length) - (stor4.length.field_1 < 32):\n              revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n          if stor4.length.field_1:\n              if 31 < stor4.length.field_1:\n                  mem[128] = uint256(stor4.field_0)\n                  idx = 128\n                  s = 0\n                  while stor4.length.field_1 + 96 > idx:\n                      mem[idx + 32] = stor4[s].field_256\n                      idx = idx + 32\n                      s = s + 1\n                      continue \n                  return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)])\n              mem[128] = 256 * stor4.length.field_8\n      mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]\n      mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0\n      return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), \n  if not bool(stor4.length) - (stor4.length.field_1 < 32):\n      revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n  if bool(stor4.length):\n      if not bool(stor4.length) - (stor4.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if stor4.length.field_1:\n          if 31 < stor4.length.field_1:\n              mem[128] = uint256(stor4.field_0)\n              idx = 128\n              s = 0\n              while stor4.length.field_1 + 96 > idx:\n                  mem[idx + 32] = stor4[s].field_256\n                  idx = idx + 32\n                  s = s + 1\n                  continue \n              return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])\n          mem[128] = 256 * stor4.length.field_8\n  else:\n      if not bool(stor4.length) - (stor4.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if stor4.length.field_1:\n          if 31 < stor4.length.field_1:\n              mem[128] = uint256(stor4.field_0)\n              idx = 128\n              s = 0\n              while stor4.length.field_1 + 96 > idx:\n                  mem[idx + 32] = stor4[s].field_256\n                  idx = idx + 32\n                  s = s + 1\n                  continue \n              return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])\n          mem[128] = 256 * stor4.length.field_8\n  mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]\n  mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0\n  return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), \n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: # Palkeoramix decompiler. \n\nconst decimals = 18\n\ndef storage:\n  balanceOf is mapping of uint256 at storage 0\n  allowance is mapping of uint256 at storage 1\n  totalSupply is uint256 at storage 2\n  stor3 is array of struct at storage 3\n  stor4 is array of struct at storage 4\n\ndef totalSupply() payable: \n  return totalSupply\n\ndef balanceOf(address account) payable: \n  require calldata.size - 4 >=\u2032 32\n  require account == account\n  return balanceOf[address(account)]\n\ndef allowance(address owner, address spender) payable: \n  require calldata.size - 4 >=\u2032 64\n  require owner == owner\n  require spender == spender\n  return allowance[address(owner)][address(spender)]\n\n#\n#  Regular functions\n#\n\ndef _fallback(?) payable: # default function\n  revert\n\ndef approve(address spender, uint256 amount) payable: \n  require calldata.size - 4 >=\u2032 64\n  require spender == spender\n  require amount == amount\n  if not caller:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'\n  if not spender:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'\n  allowance[caller][address(spender)] = amount\n  log Approval(\n        address owner=amount,\n        address spender=caller,\n        uint256 value=spender)\n  return 1\n\ndef transfer(address recipient, uint256 amount) payable: \n  require calldata.size - 4 >=\u2032 64\n  require recipient == recipient\n  require amount == amount\n  if not caller:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'\n  if not recipient:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'\n  if balanceOf[caller] < amount:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'\n  balanceOf[caller] -= amount\n  balanceOf[address(recipient)] += amount\n  log Transfer(\n        address from=amount,\n        address to=caller,\n        uint256 value=recipient)\n  return 1\n\ndef decreaseAllowance(address spender, uint256 subtractedValue) payable: \n  require calldata.size - 4 >=\u2032 64\n  require spender == spender\n  require subtractedValue == subtractedValue\n  if allowance[caller][address(spender)] < subtractedValue:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: decreased allowance below zero'\n  if not caller:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'\n  if not spender:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'\n  allowance[caller][address(spender)] -= subtractedValue\n  log Approval(\n        address owner=(allowance[caller][address(spender)] - subtractedValue),\n        address spender=caller,\n        uint256 value=spender)\n  return 1\n\ndef increaseAllowance(address spender, uint256 addedValue) payable: \n  require calldata.size - 4 >=\u2032 64\n  require spender == spender\n  require addedValue == addedValue\n  if allowance[caller][address(spender)] > allowance[caller][address(spender)] + addedValue:\n      revert with Panic(17)  # If an arithmetic operation results in underflow or overflow outside of an unchecked { ... } block.\n  if not caller:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'\n  if not spender:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'\n  allowance[caller][address(spender)] += addedValue\n  log Approval(\n        address owner=(allowance[caller][address(spender)] + addedValue),\n        address spender=caller,\n        uint256 value=spender)\n  return 1\n\ndef transferFrom(address sender, address recipient, uint256 amount) payable: \n  require calldata.size - 4 >=\u2032 96\n  require sender == sender\n  require recipient == recipient\n  require amount == amount\n  if allowance[address(sender)][caller] != -1:\n      if allowance[address(sender)][caller] < amount:\n          revert with 0, 'ERC20: insufficient allowance'\n      if not sender:\n          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'\n      if not caller:\n          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'\n      allowance[address(sender)][caller] -= amount\n      log Approval(\n            address owner=(allowance[address(sender)][caller] - amount),\n            address spender=sender,\n            uint256 value=caller)\n  if not sender:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'\n  if not recipient:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'\n  if balanceOf[address(sender)] < amount:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'\n  balanceOf[address(sender)] -= amount\n  balanceOf[address(recipient)] += amount\n  log Transfer(\n        address from=amount,\n        address to=sender,\n        uint256 value=recipient)\n  return 1\n\ndef name() payable: \n  if bool(stor3.length):\n      if not bool(stor3.length) - (stor3.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if bool(stor3.length):\n          if not bool(stor3.length) - (stor3.length.field_1 < 32):\n              revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n          if stor3.length.field_1:\n              if 31 < stor3.length.field_1:\n                  mem[128] = uint256(stor3.field_0)\n                  idx = 128\n                  s = 0\n                  while stor3.length.field_1 + 96 > idx:\n                      mem[idx + 32] = stor3[s].field_256\n                      idx = idx + 32\n                      s = s + 1\n                      continue \n                  return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)])\n              mem[128] = 256 * stor3.length.field_8\n      else:\n          if not bool(stor3.length) - (stor3.length.field_1 < 32):\n              revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n          if stor3.length.field_1:\n              if 31 < stor3.length.field_1:\n                  mem[128] = uint256(stor3.field_0)\n                  idx = 128\n                  s = 0\n                  while stor3.length.field_1 + 96 > idx:\n                      mem[idx + 32] = stor3[s].field_256\n                      idx = idx + 32\n                      s = s + 1\n                      continue \n                  return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)])\n              mem[128] = 256 * stor3.length.field_8\n      mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]\n      mem[ceil32(stor3.length.field_1) + stor3.length.field_1 + 192] = 0\n      return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), \n  if not bool(stor3.length) - (stor3.length.field_1 < 32):\n      revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n  if bool(stor3.length):\n      if not bool(stor3.length) - (stor3.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if stor3.length.field_1:\n          if 31 < stor3.length.field_1:\n              mem[128] = uint256(stor3.field_0)\n              idx = 128\n              s = 0\n              while stor3.length.field_1 + 96 > idx:\n                  mem[idx + 32] = stor3[s].field_256\n                  idx = idx + 32\n                  s = s + 1\n                  continue \n              return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])\n          mem[128] = 256 * stor3.length.field_8\n  else:\n      if not bool(stor3.length) - (stor3.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if stor3.length.field_1:\n          if 31 < stor3.length.field_1:\n              mem[128] = uint256(stor3.field_0)\n              idx = 128\n              s = 0\n              while stor3.length.field_1 + 96 > idx:\n                  mem[idx + 32] = stor3[s].field_256\n                  idx = idx + 32\n                  s = s + 1\n                  continue \n              return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])\n          mem[128] = 256 * stor3.length.field_8\n  mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]\n  mem[ceil32(stor3.length.field_1) + stor3.length.field_1 + 192] = 0\n  return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), \n\ndef symbol() payable: \n  if bool(stor4.length):\n      if not bool(stor4.length) - (stor4.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if bool(stor4.length):\n          if not bool(stor4.length) - (stor4.length.field_1 < 32):\n              revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n          if stor4.length.field_1:\n              if 31 < stor4.length.field_1:\n                  mem[128] = uint256(stor4.field_0)\n                  idx = 128\n                  s = 0\n                  while stor4.length.field_1 + 96 > idx:\n                      mem[idx + 32] = stor4[s].field_256\n                      idx = idx + 32\n                      s = s + 1\n                      continue \n                  return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)])\n              mem[128] = 256 * stor4.length.field_8\n      else:\n          if not bool(stor4.length) - (stor4.length.field_1 < 32):\n              revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n          if stor4.length.field_1:\n              if 31 < stor4.length.field_1:\n                  mem[128] = uint256(stor4.field_0)\n                  idx = 128\n                  s = 0\n                  while stor4.length.field_1 + 96 > idx:\n                      mem[idx + 32] = stor4[s].field_256\n                      idx = idx + 32\n                      s = s + 1\n                      continue \n                  return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)])\n              mem[128] = 256 * stor4.length.field_8\n      mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]\n      mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0\n      return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), \n  if not bool(stor4.length) - (stor4.length.field_1 < 32):\n      revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n  if bool(stor4.length):\n      if not bool(stor4.length) - (stor4.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if stor4.length.field_1:\n          if 31 < stor4.length.field_1:\n              mem[128] = uint256(stor4.field_0)\n              idx = 128\n              s = 0\n              while stor4.length.field_1 + 96 > idx:\n                  mem[idx + 32] = stor4[s].field_256\n                  idx = idx + 32\n                  s = s + 1\n                  continue \n              return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])\n          mem[128] = 256 * stor4.length.field_8\n  else:\n      if not bool(stor4.length) - (stor4.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if stor4.length.field_1:\n          if 31 < stor4.length.field_1:\n              mem[128] = uint256(stor4.field_0)\n              idx = 128\n              s = 0\n              while stor4.length.field_1 + 96 > idx:\n                  mem[idx + 32] = stor4[s].field_256\n                  idx = idx + 32\n                  s = s + 1\n                  continue \n              return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])\n          mem[128] = 256 * stor4.length.field_8\n  mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]\n  mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0\n  return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), \n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: # Palkeoramix decompiler. \n\nconst decimals = 18\n\ndef storage:\n  balanceOf is mapping of uint256 at storage 0\n  allowance is mapping of uint256 at storage 1\n  totalSupply is uint256 at storage 2\n  stor3 is array of struct at storage 3\n  stor4 is array of struct at storage 4\n\ndef totalSupply() payable: \n  return totalSupply\n\ndef balanceOf(address account) payable: \n  require calldata.size - 4 >=\u2032 32\n  require account == account\n  return balanceOf[address(account)]\n\ndef allowance(address owner, address spender) payable: \n  require calldata.size - 4 >=\u2032 64\n  require owner == owner\n  require spender == spender\n  return allowance[address(owner)][address(spender)]\n\n#\n#  Regular functions\n#\n\ndef _fallback(?) payable: # default function\n  revert\n\ndef approve(address spender, uint256 amount) payable: \n  require calldata.size - 4 >=\u2032 64\n  require spender == spender\n  require amount == amount\n  if not caller:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'\n  if not spender:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'\n  allowance[caller][address(spender)] = amount\n  log Approval(\n        address owner=amount,\n        address spender=caller,\n        uint256 value=spender)\n  return 1\n\ndef transfer(address recipient, uint256 amount) payable: \n  require calldata.size - 4 >=\u2032 64\n  require recipient == recipient\n  require amount == amount\n  if not caller:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'\n  if not recipient:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'\n  if balanceOf[caller] < amount:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'\n  balanceOf[caller] -= amount\n  balanceOf[address(recipient)] += amount\n  log Transfer(\n        address from=amount,\n        address to=caller,\n        uint256 value=recipient)\n  return 1\n\ndef decreaseAllowance(address spender, uint256 subtractedValue) payable: \n  require calldata.size - 4 >=\u2032 64\n  require spender == spender\n  require subtractedValue == subtractedValue\n  if allowance[caller][address(spender)] < subtractedValue:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: decreased allowance below zero'\n  if not caller:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'\n  if not spender:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'\n  allowance[caller][address(spender)] -= subtractedValue\n  log Approval(\n        address owner=(allowance[caller][address(spender)] - subtractedValue),\n        address spender=caller,\n        uint256 value=spender)\n  return 1\n\ndef increaseAllowance(address spender, uint256 addedValue) payable: \n  require calldata.size - 4 >=\u2032 64\n  require spender == spender\n  require addedValue == addedValue\n  if allowance[caller][address(spender)] > allowance[caller][address(spender)] + addedValue:\n      revert with Panic(17)  # If an arithmetic operation results in underflow or overflow outside of an unchecked { ... } block.\n  if not caller:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'\n  if not spender:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'\n  allowance[caller][address(spender)] += addedValue\n  log Approval(\n        address owner=(allowance[caller][address(spender)] + addedValue),\n        address spender=caller,\n        uint256 value=spender)\n  return 1\n\ndef transferFrom(address sender, address recipient, uint256 amount) payable: \n  require calldata.size - 4 >=\u2032 96\n  require sender == sender\n  require recipient == recipient\n  require amount == amount\n  if allowance[address(sender)][caller] != -1:\n      if allowance[address(sender)][caller] < amount:\n          revert with 0, 'ERC20: insufficient allowance'\n      if not sender:\n          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve from the zero address'\n      if not caller:\n          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: approve to the zero address'\n      allowance[address(sender)][caller] -= amount\n      log Approval(\n            address owner=(allowance[address(sender)][caller] - amount),\n            address spender=sender,\n            uint256 value=caller)\n  if not sender:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer from the zero address'\n  if not recipient:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer to the zero address'\n  if balanceOf[address(sender)] < amount:\n      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, 'ERC20: transfer amount exceeds balance'\n  balanceOf[address(sender)] -= amount\n  balanceOf[address(recipient)] += amount\n  log Transfer(\n        address from=amount,\n        address to=sender,\n        uint256 value=recipient)\n  return 1\n\ndef name() payable: \n  if bool(stor3.length):\n      if not bool(stor3.length) - (stor3.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if bool(stor3.length):\n          if not bool(stor3.length) - (stor3.length.field_1 < 32):\n              revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n          if stor3.length.field_1:\n              if 31 < stor3.length.field_1:\n                  mem[128] = uint256(stor3.field_0)\n                  idx = 128\n                  s = 0\n                  while stor3.length.field_1 + 96 > idx:\n                      mem[idx + 32] = stor3[s].field_256\n                      idx = idx + 32\n                      s = s + 1\n                      continue \n                  return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)])\n              mem[128] = 256 * stor3.length.field_8\n      else:\n          if not bool(stor3.length) - (stor3.length.field_1 < 32):\n              revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n          if stor3.length.field_1:\n              if 31 < stor3.length.field_1:\n                  mem[128] = uint256(stor3.field_0)\n                  idx = 128\n                  s = 0\n                  while stor3.length.field_1 + 96 > idx:\n                      mem[idx + 32] = stor3[s].field_256\n                      idx = idx + 32\n                      s = s + 1\n                      continue \n                  return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)])\n              mem[128] = 256 * stor3.length.field_8\n      mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]\n      mem[ceil32(stor3.length.field_1) + stor3.length.field_1 + 192] = 0\n      return Array(len=2 * Mask(256, -1, stor3.length.field_1), data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), \n  if not bool(stor3.length) - (stor3.length.field_1 < 32):\n      revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n  if bool(stor3.length):\n      if not bool(stor3.length) - (stor3.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if stor3.length.field_1:\n          if 31 < stor3.length.field_1:\n              mem[128] = uint256(stor3.field_0)\n              idx = 128\n              s = 0\n              while stor3.length.field_1 + 96 > idx:\n                  mem[idx + 32] = stor3[s].field_256\n                  idx = idx + 32\n                  s = s + 1\n                  continue \n              return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])\n          mem[128] = 256 * stor3.length.field_8\n  else:\n      if not bool(stor3.length) - (stor3.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if stor3.length.field_1:\n          if 31 < stor3.length.field_1:\n              mem[128] = uint256(stor3.field_0)\n              idx = 128\n              s = 0\n              while stor3.length.field_1 + 96 > idx:\n                  mem[idx + 32] = stor3[s].field_256\n                  idx = idx + 32\n                  s = s + 1\n                  continue \n              return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)])\n          mem[128] = 256 * stor3.length.field_8\n  mem[ceil32(stor3.length.field_1) + 192 len ceil32(stor3.length.field_1)] = mem[128 len ceil32(stor3.length.field_1)]\n  mem[ceil32(stor3.length.field_1) + stor3.length.field_1 + 192] = 0\n  return Array(len=stor3.length % 128, data=mem[128 len ceil32(stor3.length.field_1)], mem[(2 * ceil32(stor3.length.field_1)) + 192 len 2 * ceil32(stor3.length.field_1)]), \n\ndef symbol() payable: \n  if bool(stor4.length):\n      if not bool(stor4.length) - (stor4.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if bool(stor4.length):\n          if not bool(stor4.length) - (stor4.length.field_1 < 32):\n              revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n          if stor4.length.field_1:\n              if 31 < stor4.length.field_1:\n                  mem[128] = uint256(stor4.field_0)\n                  idx = 128\n                  s = 0\n                  while stor4.length.field_1 + 96 > idx:\n                      mem[idx + 32] = stor4[s].field_256\n                      idx = idx + 32\n                      s = s + 1\n                      continue \n                  return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)])\n              mem[128] = 256 * stor4.length.field_8\n      else:\n          if not bool(stor4.length) - (stor4.length.field_1 < 32):\n              revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n          if stor4.length.field_1:\n              if 31 < stor4.length.field_1:\n                  mem[128] = uint256(stor4.field_0)\n                  idx = 128\n                  s = 0\n                  while stor4.length.field_1 + 96 > idx:\n                      mem[idx + 32] = stor4[s].field_256\n                      idx = idx + 32\n                      s = s + 1\n                      continue \n                  return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)])\n              mem[128] = 256 * stor4.length.field_8\n      mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]\n      mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0\n      return Array(len=2 * Mask(256, -1, stor4.length.field_1), data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), \n  if not bool(stor4.length) - (stor4.length.field_1 < 32):\n      revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n  if bool(stor4.length):\n      if not bool(stor4.length) - (stor4.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if stor4.length.field_1:\n          if 31 < stor4.length.field_1:\n              mem[128] = uint256(stor4.field_0)\n              idx = 128\n              s = 0\n              while stor4.length.field_1 + 96 > idx:\n                  mem[idx + 32] = stor4[s].field_256\n                  idx = idx + 32\n                  s = s + 1\n                  continue \n              return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])\n          mem[128] = 256 * stor4.length.field_8\n  else:\n      if not bool(stor4.length) - (stor4.length.field_1 < 32):\n          revert with Panic(34)  # If you access a storage byte array that is incorrectly encoded.\n      if stor4.length.field_1:\n          if 31 < stor4.length.field_1:\n              mem[128] = uint256(stor4.field_0)\n              idx = 128\n              s = 0\n              while stor4.length.field_1 + 96 > idx:\n                  mem[idx + 32] = stor4[s].field_256\n                  idx = idx + 32\n                  s = s + 1\n                  continue \n              return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)])\n          mem[128] = 256 * stor4.length.field_8\n  mem[ceil32(stor4.length.field_1) + 192 len ceil32(stor4.length.field_1)] = mem[128 len ceil32(stor4.length.field_1)]\n  mem[ceil32(stor4.length.field_1) + stor4.length.field_1 + 192] = 0\n  return Array(len=stor4.length % 128, data=mem[128 len ceil32(stor4.length.field_1)], mem[(2 * ceil32(stor4.length.field_1)) + 192 len 2 * ceil32(stor4.length.field_1)]), \n\n.",
	"status": "1",
	"time_cost": 23.107098817825317,
	"usage": {
		"completion_tokens": 442,
		"prompt_tokens": 3806,
		"total_tokens": 4248
	}
}