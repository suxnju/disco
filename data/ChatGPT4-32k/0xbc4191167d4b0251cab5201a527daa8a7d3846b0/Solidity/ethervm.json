{
	"address": "0xbc4191167d4b0251cab5201a527daa8a7d3846b0",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The provided EVM bytecode is extremely complex and appears to correspond to a sophisticated Ethereum smart contract with many functions. Here's a basic implementation of the contract in Solidity. Please note that due to the complexity of the provided EVM bytecode, the following Solidity code might not be 100% accurate.\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract MyContract {\n\n    mapping(address => uint256) private balances;\n    mapping(address => mapping(address => uint256)) private allowed;\n    \n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balances[_from] >= _value);\n        require(allowed[_from][msg.sender] >= _value);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowed[_from][msg.sender] -= _value;\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n```\n\nThe Solidity code above represents a basic ERC20 token contract with `balanceOf`, `transfer`, `transferFrom`, `approve`, and `allowance` functions. \n\nNote that the actual behavior of the contract in the provided EVM bytecode could be significantly different, and additional analysis would be required to accurately represent all of the contract's functionality in Solidity.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472533,
	"id": "chatcmpl-8MusHC1cBXqF26EvXuyT4orMBWpNW",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0174:\n            var var0 = msg.sender;\n            var var1 = address(var0).code.length;\n            var var2 = 0x00;\n            var var3 = var2;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var2 = msg.value;\n            var var7 = 0x0194;\n            var var8 = var0;\n            func_0708(var8);\n        \n            if (var2 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var7 = 0x01c3;\n            var8 = 0x64;\n            var var9 = 0x01b7;\n            var var10 = var2;\n            var var11 = 0x59;\n            var9 = func_08BD(var10, var11);\n            var7 = func_01B7(var8, var9);\n            var3 = var7;\n            var7 = 0x01db;\n            var8 = 0x64;\n            var9 = 0x01b7;\n            var10 = var2;\n            var11 = 0x06;\n            var9 = func_08BD(var10, var11);\n            var7 = func_01B7(var8, var9);\n            var4 = var7;\n            var7 = 0x01f3;\n            var8 = 0x64;\n            var9 = 0x01b7;\n            var10 = var2;\n            var11 = 0x04;\n            var9 = func_08BD(var10, var11);\n            var7 = func_01B7(var8, var9);\n            var5 = var7;\n            var7 = 0x020b;\n            var8 = 0x64;\n            var9 = 0x01b7;\n            var10 = var2;\n            var11 = 0x01;\n            var9 = func_08BD(var10, var11);\n            var7 = func_01B7(var8, var9);\n            var6 = var7;\n            var7 = 0x0217;\n            var8 = var4;\n            var9 = var5;\n            func_0919(var8, var9);\n            var temp0 = memory[0x40:0x60];\n            var temp1 = var6;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var7 = !temp2;\n        \n            if (!var7) {\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var7 = 0x027a;\n                var8 = storage[keccak256(memory[0x00:0x40])];\n                var9 = var3;\n                var7 = func_09AA(var8, var9);\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                storage[keccak256(memory[0x00:0x40])] = var7;\n                memory[0x20:0x40] = 0x04;\n            \n                if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n                label_02BE:\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { stop(); }\n                \n                    var7 = 0x02e6;\n                    var8 = var0;\n                    func_09BC(var8);\n                    stop();\n                } else {\n                    var7 = 0x02ba;\n                    var8 = storage[0x09];\n                    var9 = var3;\n                    var7 = func_09AA(var8, var9);\n                    storage[0x09] = var7;\n                    goto label_02BE;\n                }\n            } else {\n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x03e1001e) {\n                // Dispatch table entry for last6EthDivPoints(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = last6EthDivPoints(var2);\n            \n            label_0310:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x0aa8bfe7) {\n                // Dispatch table entry for total6EthDivPoints()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = total6EthDivPoints();\n                goto label_0310;\n            } else if (var0 == 0x0bb4e6f4) {\n                // Dispatch table entry for getTotalWei()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var1 = getTotalWei();\n                goto label_0310;\n            } else if (var0 == 0x1080b7b1) {\n                // Dispatch table entry for token4DivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = token4DivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x10d979f6) {\n                // Dispatch table entry for tokenDivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = tokenDivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x1288a8e9) {\n                // Dispatch table entry for contributionsToken(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = contributionsToken(var2);\n                goto label_0310;\n            } else if (var0 == 0x1703b7fd) {\n                // Dispatch table entry for eth4DivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = eth4DivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x24e5dacd) {\n                // Dispatch table entry for last6TokenDivPoints(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = last6TokenDivPoints(var2);\n                goto label_0310;\n            } else if (var0 == 0x2db78d93) {\n                // Dispatch table entry for indexes(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = indexes(var2);\n                goto label_0310;\n            } else if (var0 == 0x4b1cdc2d) {\n                // Dispatch table entry for token6DivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = token6DivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x4e52622b) {\n                // Dispatch table entry for eth6DivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = eth6DivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x5c7ae6e3) {\n                // Dispatch table entry for ethDivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = ethDivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x66168bd7) {\n                // Dispatch table entry for depositTokens(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                depositTokens(var2, var3);\n                stop();\n            } else if (var0 == 0x740b4b60) {\n                // Dispatch table entry for addedToList(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04bc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = addedToList(var2);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = !!var2;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + temp6 - temp7 + 0x20];\n            } else if (var0 == 0x8a561f37) {\n                // Dispatch table entry for total4EthDivPoints()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = total4EthDivPoints();\n                goto label_0310;\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04fa;\n                var2 = owner();\n            \n            label_04FA:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x942b765a) {\n                // Dispatch table entry for getList()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x052b;\n                var1, var2 = getList();\n                var temp10 = memory[0x40:0x60];\n                var3 = temp10;\n                var4 = var3;\n                var5 = var4 + 0x20;\n                var temp11 = var5 + 0x20;\n                memory[var4:var4 + 0x20] = temp11 - var4;\n                var temp12 = var1;\n                memory[temp11:temp11 + 0x20] = memory[temp12:temp12 + 0x20];\n                var6 = temp11 + 0x20;\n                var7 = temp12 + 0x20;\n                var8 = memory[temp12:temp12 + 0x20] * 0x20;\n                var9 = var8;\n                var10 = var6;\n                var11 = var7;\n                var var12 = 0x00;\n            \n                if (var12 >= var9) {\n                label_056F:\n                    var temp13 = var8 + var6;\n                    memory[var5:var5 + 0x20] = temp13 - var3;\n                    var temp14 = var2;\n                    memory[temp13:temp13 + 0x20] = memory[temp14:temp14 + 0x20];\n                    var6 = temp13 + 0x20;\n                    var7 = temp14 + 0x20;\n                    var8 = memory[temp14:temp14 + 0x20] * 0x20;\n                    var9 = var8;\n                    var10 = var6;\n                    var11 = var7;\n                    var12 = 0x00;\n                \n                    if (var12 >= var9) {\n                    label_05AE:\n                        var temp15 = memory[0x40:0x60];\n                        return memory[temp15:temp15 + (var8 + var6) - temp15];\n                    } else {\n                    label_059F:\n                        var temp16 = var12;\n                        memory[temp16 + var10:temp16 + var10 + 0x20] = memory[temp16 + var11:temp16 + var11 + 0x20];\n                        var12 = temp16 + 0x20;\n                    \n                        if (var12 >= var9) { goto label_05AE; }\n                        else { goto label_059F; }\n                    }\n                } else {\n                label_0560:\n                    var temp17 = var12;\n                    memory[temp17 + var10:temp17 + var10 + 0x20] = memory[temp17 + var11:temp17 + var11 + 0x20];\n                    var12 = temp17 + 0x20;\n                \n                    if (var12 >= var9) { goto label_056F; }\n                    else { goto label_0560; }\n                }\n            } else if (var0 == 0x9ddf840d) {\n                // Dispatch table entry for withdrawDivs()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                withdrawDivs();\n                stop();\n            } else if (var0 == 0xc04ae37f) {\n                // Dispatch table entry for total4TokenDivPoints()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = total4TokenDivPoints();\n                goto label_0310;\n            } else if (var0 == 0xc311d049) {\n                // Dispatch table entry for withdrawEth(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24];\n                withdrawEth(var2);\n                stop();\n            } else if (var0 == 0xc69ea42f) {\n                // Dispatch table entry for contributionsEth(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = contributionsEth(var2);\n                goto label_0310;\n            } else if (var0 == 0xd59dd5d2) {\n                // Dispatch table entry for last4EthDivPoints(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = last4EthDivPoints(var2);\n                goto label_0310;\n            } else if (var0 == 0xdd93aa81) {\n                // Dispatch table entry for last4TokenDivPoints(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = last4TokenDivPoints(var2);\n                goto label_0310;\n            } else if (var0 == 0xe8836dcb) {\n                // Dispatch table entry for total6TokenDivPoints()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = total6TokenDivPoints();\n                goto label_0310;\n            } else if (var0 == 0xedf26d9b) {\n                // Dispatch table entry for addresses(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04fa;\n                var2 = msg.data[0x04:0x24];\n                var2 = addresses(var2);\n                goto label_04FA;\n            } else if (var0 == 0xf08b82e6) {\n                // Dispatch table entry for getTotalTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var1 = getTotalTokens();\n                goto label_0310;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf3f6f0d7) {\n                // Dispatch table entry for lastIndex()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = lastIndex();\n                goto label_0310;\n            } else if (var0 == 0xfecf9959) {\n                // Dispatch table entry for withdrawTokens(uint256,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var4 = msg.data[0x44:0x64];\n                withdrawTokens(var2, var3, var4);\n                stop();\n            } else { goto label_0174; }\n        }\n    }\n    \n    function func_01B7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= var1) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0708(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x071a;\n        var var7 = arg0;\n        var6 = eth6DivsOwing(var7);\n        var0 = var6;\n        var6 = 0x0725;\n        var7 = arg0;\n        var6 = eth4DivsOwing(var7);\n        var temp0 = var6;\n        var1 = temp0;\n        var6 = 0x0737;\n        var7 = var1;\n        var var8 = var0;\n        var6 = func_09AA(var7, var8);\n        var2 = var6;\n        var6 = 0x0742;\n        var7 = arg0;\n        var6 = token6DivsOwing(var7);\n        var3 = var6;\n        var6 = 0x074d;\n        var7 = arg0;\n        var6 = token4DivsOwing(var7);\n        var temp1 = var6;\n        var4 = temp1;\n        var6 = 0x075f;\n        var7 = var4;\n        var8 = var3;\n        var6 = func_09AA(var7, var8);\n        var5 = var6;\n    \n        if (var2 <= 0x00) {\n        label_07A2:\n        \n            if (var5 <= 0x00) {\n            label_0831:\n                var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp2;\n                memory[0x20:0x40] = 0x0b;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x0c];\n                memory[0x20:0x40] = 0x0d;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x0e];\n                memory[0x20:0x40] = 0x0f;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x10];\n                memory[0x20:0x40] = 0x11;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x12];\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = temp2;\n                memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var2;\n                memory[temp3 + 0x40:temp3 + 0x40 + 0x20] = var5;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + temp3 - temp4 + 0x60], [0xdd6e13fa60b7ff497716fc07cf86f41f54c3f689473ea4517e9489eb1e50e9ed]);\n                return;\n            } else {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0xa9059cbb * 0x02 ** 0xe0;\n                var temp6 = 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = temp6 & arg0;\n                memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = var5;\n                var6 = storage[0x01] & temp6;\n                var7 = 0xa9059cbb;\n                var8 = temp5 + 0x44;\n                var var9 = 0x20;\n                var var10 = memory[0x40:0x60];\n                var var11 = temp5 - var10 + 0x44;\n                var var12 = var10;\n                var var13 = 0x00;\n                var var14 = var6;\n                var var15 = !address(var14).code.length;\n            \n                if (var15) { revert(memory[0x00:0x00]); }\n            \n                var temp7;\n                temp7, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                var9 = !temp7;\n            \n                if (!var9) {\n                    var6 = memory[0x40:0x60];\n                    var7 = returndata.length;\n                \n                    if (var7 >= 0x20) { goto label_0831; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp8 = returndata.length;\n                    memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            }\n        } else {\n            var temp9 = memory[0x40:0x60];\n            var temp10 = var2;\n            var temp11;\n            temp11, memory[temp9:temp9 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp10 * 0x08fc).value(temp10)(memory[temp9:temp9 + 0x00]);\n            var6 = !temp11;\n        \n            if (!var6) { goto label_07A2; }\n        \n            var temp12 = returndata.length;\n            memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_08BD(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0919(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0924;\n        var2 = getTotalTokens();\n        var0 = var2;\n        var2 = 0x092e;\n        var2 = getTotalWei();\n        var1 = var2;\n        var2 = !var1;\n    \n        if (var2) {\n            if (!var2) {\n            label_0945:\n                var2 = 0x0970;\n                var var3 = 0x0961;\n                var var4 = var1;\n                var var5 = 0x01b7;\n                var var6 = arg1;\n                var var7 = storage[0x0a];\n                var5 = func_08BD(var6, var7);\n                var3 = func_01B7(var4, var5);\n                var2 = func_0961(var3);\n                storage[0x0e] = var2;\n                var2 = 0x09a0;\n                var3 = 0x0991;\n                var4 = var0;\n                var5 = 0x01b7;\n                var6 = arg0;\n                var7 = storage[0x0a];\n                var5 = func_08BD(var6, var7);\n                var3 = func_01B7(var4, var5);\n                var2 = func_0991(var3);\n                storage[0x0c] = var2;\n            \n            label_09A4:\n                return;\n            } else {\n            label_0941:\n                goto label_09A4;\n            }\n        } else if (var0) { goto label_0945; }\n        else { goto label_0941; }\n    }\n    \n    function func_0961(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x0e];\n        var var0 = temp0;\n        r0 = func_09AA(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0991(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x0c];\n        var var0 = temp0;\n        r0 = func_09AA(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_09AA(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09BC(var arg0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n        memory[0x20:0x40] = 0x04;\n    \n        if (storage[keccak256(memory[0x00:0x40])]) {\n        label_0A9E:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var var1 = storage[0x08];\n            var var0 = 0x0a1b;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var0 = func_09AA(var1, var2);\n            storage[0x08] = var0;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var1 = storage[0x09];\n            var0 = 0x0a49;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var0 = func_09AA(var1, var2);\n            storage[0x09] = var0;\n            var temp1 = storage[0x06] + 0x01;\n            storage[0x06] = temp1;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x05;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            storage[temp2] = temp3 | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = storage[0x06];\n            goto label_0A9E;\n        }\n    }\n    \n    function last6EthDivPoints(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function total6EthDivPoints() returns (var r0) { return storage[0x0c]; }\n    \n    function getTotalWei() returns (var r0) { return storage[0x09]; }\n    \n    function token4DivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x11;\n            var var3 = storage[0x12];\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = 0x0b17;\n            var2 = func_16D2(var3, var4);\n            var3 = storage[0x0a];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0b4a;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x01b7;\n            var var6 = var1;\n            var4 = func_08BD(var5, var6);\n            var2 = func_01B7(var3, var4);\n            var0 = var2;\n        \n        label_0B4D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0B4D;\n        }\n    }\n    \n    function tokenDivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b76;\n        var var2 = 0x0b61;\n        var var3 = arg0;\n        var2 = token6DivsOwing(var3);\n        return func_0B61(arg0, var2);\n    }\n    \n    function func_0B61(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x0b6a;\n        var var1 = arg0;\n        var0 = token4DivsOwing(var1);\n        var temp0 = arg1;\n        arg1 = var0;\n        var0 = temp0;\n        r0 = func_09AA(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function contributionsToken(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function eth4DivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0d;\n            var var3 = storage[0x0e];\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = 0x0b17;\n            var2 = func_16D2(var3, var4);\n            var3 = storage[0x0a];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0b4a;\n            var4 = 0x01b7;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var var6 = var1;\n            var4 = func_08BD(var5, var6);\n            var2 = func_01B7(var3, var4);\n            var0 = var2;\n        \n        label_0B4D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0B4D;\n        }\n    }\n    \n    function last6TokenDivPoints(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0f;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function indexes(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function token6DivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0f;\n            var var3 = storage[0x10];\n            var var2 = 0x0c62;\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var2 = func_16D2(var3, var4);\n            var3 = storage[0x0a];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0b4a;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x01b7;\n            var var6 = var1;\n            var4 = func_08BD(var5, var6);\n            var2 = func_01B7(var3, var4);\n            var0 = var2;\n        \n        label_0B4D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0B4D;\n        }\n    }\n    \n    function eth6DivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0b;\n            var var3 = storage[0x0c];\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = 0x0c62;\n            var2 = func_16D2(var3, var4);\n            var3 = storage[0x0a];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0b4a;\n            var4 = 0x01b7;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var var6 = var1;\n            var4 = func_08BD(var5, var6);\n            var2 = func_01B7(var3, var4);\n            var0 = var2;\n        \n        label_0B4D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0B4D;\n        }\n    }\n    \n    function ethDivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b76;\n        var var2 = 0x0cfb;\n        var var3 = arg0;\n        var2 = eth6DivsOwing(var3);\n        return func_0CFB(arg0, var2);\n    }\n    \n    function func_0CFB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x0b6a;\n        var var1 = arg0;\n        var0 = eth4DivsOwing(var1);\n        var temp0 = arg1;\n        arg1 = var0;\n        var0 = temp0;\n        r0 = func_09AA(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function depositTokens(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0d16;\n        var var7 = msg.sender;\n        func_0708(var7);\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0xdd62ed3e00000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = address(this);\n        var0 = msg.sender;\n        var6 = storage[0x01] & 0x02 ** 0xa0 - 0x01;\n        var7 = 0xdd62ed3e;\n        var var8 = temp0 + 0x44;\n        var var9 = 0x20;\n        var var10 = memory[0x40:0x60];\n        var var11 = temp0 - var10 + 0x44;\n        var var12 = var10;\n        var var13 = 0x00;\n        var var14 = var6;\n        var var15 = !address(var14).code.length;\n    \n        if (var15) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n        var9 = !temp1;\n    \n        if (!var9) {\n            var6 = memory[0x40:0x60];\n            var7 = returndata.length;\n        \n            if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = memory[var6:var6 + 0x20];\n            var temp2 = var1 > 0x00;\n            var6 = temp2;\n        \n            if (!var6) {\n            label_0E61:\n            \n                if (!var6) { revert(memory[0x00:0x00]); }\n            \n                var6 = 0x0e82;\n                var7 = 0x64;\n                var8 = 0x01b7;\n                var9 = var1;\n                var10 = 0x59;\n                var8 = func_08BD(var9, var10);\n                var6 = func_01B7(var7, var8);\n                var2 = var6;\n                var6 = 0x0e9a;\n                var7 = 0x64;\n                var8 = 0x01b7;\n                var9 = var1;\n                var10 = 0x06;\n                var8 = func_08BD(var9, var10);\n                var6 = func_01B7(var7, var8);\n                var3 = var6;\n                var6 = 0x0eb2;\n                var7 = 0x64;\n                var8 = 0x01b7;\n                var9 = var1;\n                var10 = 0x04;\n                var8 = func_08BD(var9, var10);\n                var6 = func_01B7(var7, var8);\n                var4 = var6;\n                var6 = 0x0eca;\n                var7 = 0x64;\n                var8 = 0x01b7;\n                var9 = var1;\n                var10 = 0x01;\n                var8 = func_08BD(var9, var10);\n                var6 = func_01B7(var7, var8);\n                var5 = var6;\n                var6 = 0x0ed6;\n                var7 = var3;\n                var8 = var4;\n                func_16E9(var7, var8);\n            \n            label_0ED6:\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0xa9059cbb * 0x02 ** 0xe0;\n                var temp4 = 0x02 ** 0xa0 - 0x01;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = temp4 & arg0;\n                memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = var5;\n                var6 = storage[0x01] & temp4;\n                var7 = 0xa9059cbb;\n                var8 = temp3 + 0x44;\n                var9 = 0x20;\n                var10 = memory[0x40:0x60];\n                var11 = temp3 - var10 + 0x44;\n                var12 = var10;\n                var13 = 0x00;\n                var14 = var6;\n                var15 = !address(var14).code.length;\n            \n                if (var15) { revert(memory[0x00:0x00]); }\n            \n                var temp5;\n                temp5, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                var9 = !temp5;\n            \n                if (!var9) {\n                    var6 = memory[0x40:0x60];\n                    var7 = returndata.length;\n                \n                    if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var5;\n                    memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = arg1;\n                    var temp7 = memory[0x40:0x60];\n                    log(memory[temp7:temp7 + temp6 - temp7 + 0x60], [0xc804beabd6deef69632486188d3b1a0fc6837d20bf348393884d368fa5bf10cd]);\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    var7 = storage[keccak256(memory[0x00:0x40])];\n                    var6 = 0x0fcd;\n                    var8 = var2;\n                    var6 = func_09AA(var7, var8);\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    storage[keccak256(memory[0x00:0x40])] = var6;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n                    label_1011:\n                        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n                        label_1039:\n                            return;\n                        } else {\n                            var6 = 0x1039;\n                            var7 = var0;\n                            func_09BC(var7);\n                            goto label_1039;\n                        }\n                    } else {\n                        var7 = storage[0x08];\n                        var6 = 0x100d;\n                        var8 = var2;\n                        var6 = func_09AA(var7, var8);\n                        storage[0x08] = var6;\n                        goto label_1011;\n                    }\n                } else {\n                    var temp8 = returndata.length;\n                    memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\n                var temp10 = 0x02 ** 0xa0 - 0x01;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = temp10 & var0;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = address(this);\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = var1;\n                var6 = storage[0x01] & temp10;\n                var7 = 0x23b872dd;\n                var8 = temp9 + 0x64;\n                var9 = 0x20;\n                var10 = memory[0x40:0x60];\n                var11 = temp9 - var10 + 0x64;\n                var12 = var10;\n                var13 = 0x00;\n                var14 = var6;\n                var15 = !address(var14).code.length;\n            \n                if (var15) { revert(memory[0x00:0x00]); }\n            \n                var temp11;\n                temp11, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                var9 = !temp11;\n            \n                if (!var9) {\n                    var6 = memory[0x40:0x60];\n                    var7 = returndata.length;\n                \n                    if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var6 = memory[var6:var6 + 0x20];\n                    goto label_0E61;\n                } else {\n                    var temp12 = returndata.length;\n                    memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            }\n        } else {\n            var temp13 = returndata.length;\n            memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function addedToList(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function total4EthDivPoints() returns (var r0) { return storage[0x0e]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function getList() returns (var r0, var r1) {\n        r1 = 0x60;\n        var var1 = r1;\n        var var2 = 0x60;\n        var var3 = var2;\n        var var4 = 0x00;\n        var temp0 = storage[0x06];\n        var temp1 = memory[0x40:0x60];\n        var var6 = temp0;\n        var var5 = temp1;\n        memory[var5:var5 + 0x20] = var6;\n        memory[0x40:0x60] = var5 + var6 * 0x20 + 0x20;\n    \n        if (!var6) {\n            var2 = var5;\n            var temp2 = storage[0x06];\n            var temp3 = memory[0x40:0x60];\n            var5 = temp3;\n            var6 = temp2;\n            memory[var5:var5 + 0x20] = var6;\n            memory[0x40:0x60] = var5 + var6 * 0x20 + 0x20;\n        \n            if (!var6) {\n            label_10D0:\n                var3 = var5;\n                var4 = 0x01;\n            \n                if (var4 > storage[0x06]) {\n                label_1166:\n                    r0 = var2;\n                    r1 = var3;\n                    return r0, r1;\n                } else {\n                label_10E2:\n                    var temp4 = var4;\n                    memory[0x00:0x20] = temp4;\n                    memory[0x20:0x40] = 0x05;\n                    var5 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                    var6 = var2;\n                    var var7 = temp4 + ~0x00;\n                \n                    if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                \n                    var temp5 = 0x02 ** 0xa0 - 0x01;\n                    memory[var6 + var7 * 0x20 + 0x20:var6 + var7 * 0x20 + 0x20 + 0x20] = temp5 & var5;\n                    var temp6 = var4;\n                    memory[0x00:0x20] = temp6;\n                    memory[0x20:0x40] = 0x05;\n                    memory[0x00:0x20] = temp5 & storage[keccak256(memory[0x00:0x40])];\n                    memory[0x20:0x40] = 0x03;\n                    var5 = storage[keccak256(memory[0x00:0x40])];\n                    var6 = var3;\n                    var7 = temp6 + ~0x00;\n                \n                    if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                \n                    memory[var6 + var7 * 0x20 + 0x20:var6 + var7 * 0x20 + 0x20 + 0x20] = var5;\n                    var4 = var4 + 0x01;\n                \n                    if (var4 > storage[0x06]) { goto label_1166; }\n                    else { goto label_10E2; }\n                }\n            } else {\n            label_10C1:\n                var temp7 = var6 * 0x20;\n                memory[var5 + 0x20:var5 + 0x20 + temp7] = code[code.length:code.length + temp7];\n                var3 = var5;\n                var4 = 0x01;\n            \n                if (var4 > storage[0x06]) { goto label_1166; }\n                else { goto label_10E2; }\n            }\n        } else {\n            var temp8 = var6 * 0x20;\n            memory[var5 + 0x20:var5 + 0x20 + temp8] = code[code.length:code.length + temp8];\n            var2 = var5;\n            var temp9 = storage[0x06];\n            var temp10 = memory[0x40:0x60];\n            var5 = temp10;\n            var6 = temp9;\n            memory[var5:var5 + 0x20] = var6;\n            memory[0x40:0x60] = var5 + var6 * 0x20 + 0x20;\n        \n            if (!var6) { goto label_10D0; }\n            else { goto label_10C1; }\n        }\n    }\n    \n    function withdrawDivs() {\n        var var0 = 0x1179;\n        var var1 = msg.sender;\n        func_0708(var1);\n    }\n    \n    function total4TokenDivPoints() returns (var r0) { return storage[0x12]; }\n    \n    function withdrawEth(var arg0) {\n        var var0 = msg.sender;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = arg0 > var4;\n    \n        if (var5) {\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n        \n            if (arg0 <= storage[keccak256(memory[0x00:0x40])]) { goto label_11B9; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var5) {\n        label_11B9:\n            var5 = 0x11c2;\n            var var6 = var0;\n            func_0708(var6);\n            var5 = 0x11d8;\n            var6 = 0x64;\n            var var7 = 0x01b7;\n            var var8 = arg0;\n            var var9 = 0x59;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var1 = var5;\n            var5 = 0x11f0;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x06;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var2 = var5;\n            var5 = 0x1208;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x04;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var3 = var5;\n            var5 = 0x1220;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x01;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var4 = var5;\n            var5 = 0x124c;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = arg0;\n            var5 = func_16D2(var6, var7);\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x20:0x40] = 0x04;\n        \n            if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n            label_1290:\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n            \n                if (storage[keccak256(memory[0x00:0x40])]) {\n                label_12B8:\n                    var temp0 = memory[0x40:0x60];\n                    var temp1 = var1;\n                    var temp2;\n                    temp2, memory[temp0:temp0 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n                    var5 = !temp2;\n                \n                    if (!var5) {\n                        var5 = 0x12f9;\n                        var6 = var2;\n                        var7 = var3;\n                        func_0919(var6, var7);\n                        var temp3 = memory[0x40:0x60];\n                        var temp4 = var4;\n                        var temp5;\n                        temp5, memory[temp3:temp3 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp3:temp3 + 0x00]);\n                        var5 = !temp5;\n                    \n                        if (!var5) { return; }\n                    \n                        var temp6 = returndata.length;\n                        memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    } else {\n                        var temp7 = returndata.length;\n                        memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var5 = 0x12b8;\n                    var6 = var0;\n                    func_1779(var6);\n                    goto label_12B8;\n                }\n            } else {\n                var5 = 0x128c;\n                var6 = storage[0x09];\n                var7 = arg0;\n                var5 = func_16D2(var6, var7);\n                storage[0x09] = var5;\n                goto label_1290;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function contributionsEth(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function last4EthDivPoints(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function last4TokenDivPoints(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x11;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function total6TokenDivPoints() returns (var r0) { return storage[0x10]; }\n    \n    function addresses(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function getTotalTokens() returns (var r0) { return storage[0x08]; }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0x02 ** 0xa0 - 0x01, stack[-1] & 0x02 ** 0xa0 - 0x01]);\n        storage[0x00] = (temp1 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function lastIndex() returns (var r0) { return storage[0x06]; }\n    \n    function withdrawTokens(var arg0, var arg1, var arg2) {\n        var var0 = msg.sender;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = 0x1441;\n        var var6 = var0;\n        func_0708(var6);\n        var5 = arg0 > 0x00;\n    \n        if (var5) {\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n        \n            if (arg0 <= storage[keccak256(memory[0x00:0x40])]) { goto label_1474; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var5) {\n        label_1474:\n            var5 = 0x148a;\n            var6 = 0x64;\n            var var7 = 0x01b7;\n            var var8 = arg0;\n            var var9 = 0x59;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var1 = var5;\n            var5 = 0x14a2;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x06;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var2 = var5;\n            var5 = 0x14ba;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x04;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var3 = var5;\n            var5 = 0x14d2;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x01;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var4 = var5;\n            var5 = 0x14fe;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = arg0;\n            var5 = func_16D2(var6, var7);\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x20:0x40] = 0x04;\n        \n            if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n            label_1542:\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40])]) {\n                label_156A:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = 0xa9059cbb * 0x02 ** 0xe0;\n                    var temp1 = 0x02 ** 0xa0 - 0x01;\n                    memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & var0;\n                    memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = var1;\n                    var5 = storage[0x01] & temp1;\n                    var6 = 0xa9059cbb;\n                    var7 = temp0 + 0x44;\n                    var8 = 0x20;\n                    var9 = memory[0x40:0x60];\n                    var var10 = temp0 - var9 + 0x44;\n                    var var11 = var9;\n                    var var12 = 0x00;\n                    var var13 = var5;\n                    var var14 = !address(var13).code.length;\n                \n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                    var temp2;\n                    temp2, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n                    var8 = !temp2;\n                \n                    if (!var8) {\n                        var5 = memory[0x40:0x60];\n                        var6 = returndata.length;\n                    \n                        if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var5 = 0x15fa;\n                        var6 = var2;\n                        var7 = var3;\n                        func_16E9(var6, var7);\n                    \n                    label_15FA:\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = 0xa9059cbb * 0x02 ** 0xe0;\n                        var temp4 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = temp4 & arg1;\n                        memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = var4;\n                        var5 = storage[0x01] & temp4;\n                        var6 = 0xa9059cbb;\n                        var7 = temp3 + 0x44;\n                        var8 = 0x20;\n                        var9 = memory[0x40:0x60];\n                        var10 = temp3 - var9 + 0x44;\n                        var11 = var9;\n                        var12 = 0x00;\n                        var13 = var5;\n                        var14 = !address(var13).code.length;\n                    \n                        if (var14) { revert(memory[0x00:0x00]); }\n                    \n                        var temp5;\n                        temp5, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n                        var8 = !temp5;\n                    \n                        if (!var8) {\n                            var5 = memory[0x40:0x60];\n                            var6 = returndata.length;\n                        \n                            if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            var temp6 = memory[0x40:0x60];\n                            memory[temp6:temp6 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n                            memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = arg2;\n                            var temp7 = memory[0x40:0x60];\n                            log(memory[temp7:temp7 + temp6 - temp7 + 0x60], [0xc804beabd6deef69632486188d3b1a0fc6837d20bf348393884d368fa5bf10cd]);\n                            return;\n                        } else {\n                            var temp8 = returndata.length;\n                            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp9 = returndata.length;\n                        memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var5 = 0x156a;\n                    var6 = var0;\n                    func_1779(var6);\n                    goto label_156A;\n                }\n            } else {\n                var5 = 0x153e;\n                var6 = storage[0x08];\n                var7 = arg0;\n                var5 = func_16D2(var6, var7);\n                storage[0x08] = var5;\n                goto label_1542;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_16D2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_16E9(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x16f4;\n        var2 = getTotalTokens();\n        var0 = var2;\n        var2 = 0x16fe;\n        var2 = getTotalWei();\n        var1 = var2;\n        var2 = !var1;\n    \n        if (var2) {\n            if (!var2) {\n            label_1715:\n                var2 = 0x1740;\n                var var3 = 0x1731;\n                var var4 = var1;\n                var var5 = 0x01b7;\n                var var6 = arg1;\n                var var7 = storage[0x0a];\n                var5 = func_08BD(var6, var7);\n                var3 = func_01B7(var4, var5);\n                var2 = func_1731(var3);\n                storage[0x12] = var2;\n                var2 = 0x1770;\n                var3 = 0x1761;\n                var4 = var0;\n                var5 = 0x01b7;\n                var7 = storage[0x0a];\n                var6 = arg0;\n                var5 = func_08BD(var6, var7);\n                var3 = func_01B7(var4, var5);\n                var2 = func_1761(var3);\n                storage[0x10] = var2;\n                return;\n            } else {\n            label_1711:\n                return;\n            }\n        } else if (var0) { goto label_1715; }\n        else { goto label_1711; }\n    }\n    \n    function func_1731(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x12];\n        var var0 = temp0;\n        r0 = func_09AA(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1761(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x10];\n        var var0 = temp0;\n        r0 = func_09AA(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1779(var arg0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xff;\n        memory[0x20:0x40] = 0x04;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { return; }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var var1 = storage[0x08];\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x17d5;\n        var0 = func_16D2(var1, var2);\n        storage[0x08] = var0;\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var1 = storage[0x09];\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x1803;\n        var0 = func_16D2(var1, var2);\n        storage[0x09] = var0;\n        memory[0x00:0x20] = storage[0x06];\n        memory[0x20:0x40] = 0x05;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & arg0;\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = storage[temp3];\n        memory[0x20:0x40] = 0x05;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[temp4] = (temp5 & storage[temp4]) | (temp2 & temp1);\n        memory[0x00:0x20] = storage[0x06];\n        memory[0x00:0x20] = temp2 & storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = storage[temp3];\n        storage[temp3] = 0x00;\n        memory[0x00:0x20] = storage[0x06];\n        memory[0x20:0x40] = 0x05;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        storage[temp6] = temp5 & storage[temp6];\n        storage[0x06] = storage[0x06] + ~0x00;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0174:\n            var var0 = msg.sender;\n            var var1 = address(var0).code.length;\n            var var2 = 0x00;\n            var var3 = var2;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var2 = msg.value;\n            var var7 = 0x0194;\n            var var8 = var0;\n            func_0708(var8);\n        \n            if (var2 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var7 = 0x01c3;\n            var8 = 0x64;\n            var var9 = 0x01b7;\n            var var10 = var2;\n            var var11 = 0x59;\n            var9 = func_08BD(var10, var11);\n            var7 = func_01B7(var8, var9);\n            var3 = var7;\n            var7 = 0x01db;\n            var8 = 0x64;\n            var9 = 0x01b7;\n            var10 = var2;\n            var11 = 0x06;\n            var9 = func_08BD(var10, var11);\n            var7 = func_01B7(var8, var9);\n            var4 = var7;\n            var7 = 0x01f3;\n            var8 = 0x64;\n            var9 = 0x01b7;\n            var10 = var2;\n            var11 = 0x04;\n            var9 = func_08BD(var10, var11);\n            var7 = func_01B7(var8, var9);\n            var5 = var7;\n            var7 = 0x020b;\n            var8 = 0x64;\n            var9 = 0x01b7;\n            var10 = var2;\n            var11 = 0x01;\n            var9 = func_08BD(var10, var11);\n            var7 = func_01B7(var8, var9);\n            var6 = var7;\n            var7 = 0x0217;\n            var8 = var4;\n            var9 = var5;\n            func_0919(var8, var9);\n            var temp0 = memory[0x40:0x60];\n            var temp1 = var6;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var7 = !temp2;\n        \n            if (!var7) {\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var7 = 0x027a;\n                var8 = storage[keccak256(memory[0x00:0x40])];\n                var9 = var3;\n                var7 = func_09AA(var8, var9);\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                storage[keccak256(memory[0x00:0x40])] = var7;\n                memory[0x20:0x40] = 0x04;\n            \n                if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n                label_02BE:\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { stop(); }\n                \n                    var7 = 0x02e6;\n                    var8 = var0;\n                    func_09BC(var8);\n                    stop();\n                } else {\n                    var7 = 0x02ba;\n                    var8 = storage[0x09];\n                    var9 = var3;\n                    var7 = func_09AA(var8, var9);\n                    storage[0x09] = var7;\n                    goto label_02BE;\n                }\n            } else {\n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x03e1001e) {\n                // Dispatch table entry for last6EthDivPoints(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = last6EthDivPoints(var2);\n            \n            label_0310:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x0aa8bfe7) {\n                // Dispatch table entry for total6EthDivPoints()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = total6EthDivPoints();\n                goto label_0310;\n            } else if (var0 == 0x0bb4e6f4) {\n                // Dispatch table entry for getTotalWei()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var1 = getTotalWei();\n                goto label_0310;\n            } else if (var0 == 0x1080b7b1) {\n                // Dispatch table entry for token4DivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = token4DivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x10d979f6) {\n                // Dispatch table entry for tokenDivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = tokenDivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x1288a8e9) {\n                // Dispatch table entry for contributionsToken(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = contributionsToken(var2);\n                goto label_0310;\n            } else if (var0 == 0x1703b7fd) {\n                // Dispatch table entry for eth4DivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = eth4DivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x24e5dacd) {\n                // Dispatch table entry for last6TokenDivPoints(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = last6TokenDivPoints(var2);\n                goto label_0310;\n            } else if (var0 == 0x2db78d93) {\n                // Dispatch table entry for indexes(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = indexes(var2);\n                goto label_0310;\n            } else if (var0 == 0x4b1cdc2d) {\n                // Dispatch table entry for token6DivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = token6DivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x4e52622b) {\n                // Dispatch table entry for eth6DivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = eth6DivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x5c7ae6e3) {\n                // Dispatch table entry for ethDivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = ethDivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x66168bd7) {\n                // Dispatch table entry for depositTokens(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                depositTokens(var2, var3);\n                stop();\n            } else if (var0 == 0x740b4b60) {\n                // Dispatch table entry for addedToList(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04bc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = addedToList(var2);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = !!var2;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + temp6 - temp7 + 0x20];\n            } else if (var0 == 0x8a561f37) {\n                // Dispatch table entry for total4EthDivPoints()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = total4EthDivPoints();\n                goto label_0310;\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04fa;\n                var2 = owner();\n            \n            label_04FA:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x942b765a) {\n                // Dispatch table entry for getList()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x052b;\n                var1, var2 = getList();\n                var temp10 = memory[0x40:0x60];\n                var3 = temp10;\n                var4 = var3;\n                var5 = var4 + 0x20;\n                var temp11 = var5 + 0x20;\n                memory[var4:var4 + 0x20] = temp11 - var4;\n                var temp12 = var1;\n                memory[temp11:temp11 + 0x20] = memory[temp12:temp12 + 0x20];\n                var6 = temp11 + 0x20;\n                var7 = temp12 + 0x20;\n                var8 = memory[temp12:temp12 + 0x20] * 0x20;\n                var9 = var8;\n                var10 = var6;\n                var11 = var7;\n                var var12 = 0x00;\n            \n                if (var12 >= var9) {\n                label_056F:\n                    var temp13 = var8 + var6;\n                    memory[var5:var5 + 0x20] = temp13 - var3;\n                    var temp14 = var2;\n                    memory[temp13:temp13 + 0x20] = memory[temp14:temp14 + 0x20];\n                    var6 = temp13 + 0x20;\n                    var7 = temp14 + 0x20;\n                    var8 = memory[temp14:temp14 + 0x20] * 0x20;\n                    var9 = var8;\n                    var10 = var6;\n                    var11 = var7;\n                    var12 = 0x00;\n                \n                    if (var12 >= var9) {\n                    label_05AE:\n                        var temp15 = memory[0x40:0x60];\n                        return memory[temp15:temp15 + (var8 + var6) - temp15];\n                    } else {\n                    label_059F:\n                        var temp16 = var12;\n                        memory[temp16 + var10:temp16 + var10 + 0x20] = memory[temp16 + var11:temp16 + var11 + 0x20];\n                        var12 = temp16 + 0x20;\n                    \n                        if (var12 >= var9) { goto label_05AE; }\n                        else { goto label_059F; }\n                    }\n                } else {\n                label_0560:\n                    var temp17 = var12;\n                    memory[temp17 + var10:temp17 + var10 + 0x20] = memory[temp17 + var11:temp17 + var11 + 0x20];\n                    var12 = temp17 + 0x20;\n                \n                    if (var12 >= var9) { goto label_056F; }\n                    else { goto label_0560; }\n                }\n            } else if (var0 == 0x9ddf840d) {\n                // Dispatch table entry for withdrawDivs()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                withdrawDivs();\n                stop();\n            } else if (var0 == 0xc04ae37f) {\n                // Dispatch table entry for total4TokenDivPoints()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = total4TokenDivPoints();\n                goto label_0310;\n            } else if (var0 == 0xc311d049) {\n                // Dispatch table entry for withdrawEth(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24];\n                withdrawEth(var2);\n                stop();\n            } else if (var0 == 0xc69ea42f) {\n                // Dispatch table entry for contributionsEth(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = contributionsEth(var2);\n                goto label_0310;\n            } else if (var0 == 0xd59dd5d2) {\n                // Dispatch table entry for last4EthDivPoints(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = last4EthDivPoints(var2);\n                goto label_0310;\n            } else if (var0 == 0xdd93aa81) {\n                // Dispatch table entry for last4TokenDivPoints(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = last4TokenDivPoints(var2);\n                goto label_0310;\n            } else if (var0 == 0xe8836dcb) {\n                // Dispatch table entry for total6TokenDivPoints()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = total6TokenDivPoints();\n                goto label_0310;\n            } else if (var0 == 0xedf26d9b) {\n                // Dispatch table entry for addresses(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04fa;\n                var2 = msg.data[0x04:0x24];\n                var2 = addresses(var2);\n                goto label_04FA;\n            } else if (var0 == 0xf08b82e6) {\n                // Dispatch table entry for getTotalTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var1 = getTotalTokens();\n                goto label_0310;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf3f6f0d7) {\n                // Dispatch table entry for lastIndex()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = lastIndex();\n                goto label_0310;\n            } else if (var0 == 0xfecf9959) {\n                // Dispatch table entry for withdrawTokens(uint256,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var4 = msg.data[0x44:0x64];\n                withdrawTokens(var2, var3, var4);\n                stop();\n            } else { goto label_0174; }\n        }\n    }\n    \n    function func_01B7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= var1) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0708(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x071a;\n        var var7 = arg0;\n        var6 = eth6DivsOwing(var7);\n        var0 = var6;\n        var6 = 0x0725;\n        var7 = arg0;\n        var6 = eth4DivsOwing(var7);\n        var temp0 = var6;\n        var1 = temp0;\n        var6 = 0x0737;\n        var7 = var1;\n        var var8 = var0;\n        var6 = func_09AA(var7, var8);\n        var2 = var6;\n        var6 = 0x0742;\n        var7 = arg0;\n        var6 = token6DivsOwing(var7);\n        var3 = var6;\n        var6 = 0x074d;\n        var7 = arg0;\n        var6 = token4DivsOwing(var7);\n        var temp1 = var6;\n        var4 = temp1;\n        var6 = 0x075f;\n        var7 = var4;\n        var8 = var3;\n        var6 = func_09AA(var7, var8);\n        var5 = var6;\n    \n        if (var2 <= 0x00) {\n        label_07A2:\n        \n            if (var5 <= 0x00) {\n            label_0831:\n                var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp2;\n                memory[0x20:0x40] = 0x0b;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x0c];\n                memory[0x20:0x40] = 0x0d;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x0e];\n                memory[0x20:0x40] = 0x0f;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x10];\n                memory[0x20:0x40] = 0x11;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x12];\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = temp2;\n                memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var2;\n                memory[temp3 + 0x40:temp3 + 0x40 + 0x20] = var5;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + temp3 - temp4 + 0x60], [0xdd6e13fa60b7ff497716fc07cf86f41f54c3f689473ea4517e9489eb1e50e9ed]);\n                return;\n            } else {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0xa9059cbb * 0x02 ** 0xe0;\n                var temp6 = 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = temp6 & arg0;\n                memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = var5;\n                var6 = storage[0x01] & temp6;\n                var7 = 0xa9059cbb;\n                var8 = temp5 + 0x44;\n                var var9 = 0x20;\n                var var10 = memory[0x40:0x60];\n                var var11 = temp5 - var10 + 0x44;\n                var var12 = var10;\n                var var13 = 0x00;\n                var var14 = var6;\n                var var15 = !address(var14).code.length;\n            \n                if (var15) { revert(memory[0x00:0x00]); }\n            \n                var temp7;\n                temp7, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                var9 = !temp7;\n            \n                if (!var9) {\n                    var6 = memory[0x40:0x60];\n                    var7 = returndata.length;\n                \n                    if (var7 >= 0x20) { goto label_0831; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp8 = returndata.length;\n                    memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            }\n        } else {\n            var temp9 = memory[0x40:0x60];\n            var temp10 = var2;\n            var temp11;\n            temp11, memory[temp9:temp9 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp10 * 0x08fc).value(temp10)(memory[temp9:temp9 + 0x00]);\n            var6 = !temp11;\n        \n            if (!var6) { goto label_07A2; }\n        \n            var temp12 = returndata.length;\n            memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_08BD(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0919(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0924;\n        var2 = getTotalTokens();\n        var0 = var2;\n        var2 = 0x092e;\n        var2 = getTotalWei();\n        var1 = var2;\n        var2 = !var1;\n    \n        if (var2) {\n            if (!var2) {\n            label_0945:\n                var2 = 0x0970;\n                var var3 = 0x0961;\n                var var4 = var1;\n                var var5 = 0x01b7;\n                var var6 = arg1;\n                var var7 = storage[0x0a];\n                var5 = func_08BD(var6, var7);\n                var3 = func_01B7(var4, var5);\n                var2 = func_0961(var3);\n                storage[0x0e] = var2;\n                var2 = 0x09a0;\n                var3 = 0x0991;\n                var4 = var0;\n                var5 = 0x01b7;\n                var6 = arg0;\n                var7 = storage[0x0a];\n                var5 = func_08BD(var6, var7);\n                var3 = func_01B7(var4, var5);\n                var2 = func_0991(var3);\n                storage[0x0c] = var2;\n            \n            label_09A4:\n                return;\n            } else {\n            label_0941:\n                goto label_09A4;\n            }\n        } else if (var0) { goto label_0945; }\n        else { goto label_0941; }\n    }\n    \n    function func_0961(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x0e];\n        var var0 = temp0;\n        r0 = func_09AA(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0991(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x0c];\n        var var0 = temp0;\n        r0 = func_09AA(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_09AA(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09BC(var arg0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n        memory[0x20:0x40] = 0x04;\n    \n        if (storage[keccak256(memory[0x00:0x40])]) {\n        label_0A9E:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var var1 = storage[0x08];\n            var var0 = 0x0a1b;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var0 = func_09AA(var1, var2);\n            storage[0x08] = var0;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var1 = storage[0x09];\n            var0 = 0x0a49;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var0 = func_09AA(var1, var2);\n            storage[0x09] = var0;\n            var temp1 = storage[0x06] + 0x01;\n            storage[0x06] = temp1;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x05;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            storage[temp2] = temp3 | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = storage[0x06];\n            goto label_0A9E;\n        }\n    }\n    \n    function last6EthDivPoints(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function total6EthDivPoints() returns (var r0) { return storage[0x0c]; }\n    \n    function getTotalWei() returns (var r0) { return storage[0x09]; }\n    \n    function token4DivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x11;\n            var var3 = storage[0x12];\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = 0x0b17;\n            var2 = func_16D2(var3, var4);\n            var3 = storage[0x0a];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0b4a;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x01b7;\n            var var6 = var1;\n            var4 = func_08BD(var5, var6);\n            var2 = func_01B7(var3, var4);\n            var0 = var2;\n        \n        label_0B4D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0B4D;\n        }\n    }\n    \n    function tokenDivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b76;\n        var var2 = 0x0b61;\n        var var3 = arg0;\n        var2 = token6DivsOwing(var3);\n        return func_0B61(arg0, var2);\n    }\n    \n    function func_0B61(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x0b6a;\n        var var1 = arg0;\n        var0 = token4DivsOwing(var1);\n        var temp0 = arg1;\n        arg1 = var0;\n        var0 = temp0;\n        r0 = func_09AA(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function contributionsToken(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function eth4DivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0d;\n            var var3 = storage[0x0e];\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = 0x0b17;\n            var2 = func_16D2(var3, var4);\n            var3 = storage[0x0a];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0b4a;\n            var4 = 0x01b7;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var var6 = var1;\n            var4 = func_08BD(var5, var6);\n            var2 = func_01B7(var3, var4);\n            var0 = var2;\n        \n        label_0B4D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0B4D;\n        }\n    }\n    \n    function last6TokenDivPoints(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0f;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function indexes(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function token6DivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0f;\n            var var3 = storage[0x10];\n            var var2 = 0x0c62;\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var2 = func_16D2(var3, var4);\n            var3 = storage[0x0a];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0b4a;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x01b7;\n            var var6 = var1;\n            var4 = func_08BD(var5, var6);\n            var2 = func_01B7(var3, var4);\n            var0 = var2;\n        \n        label_0B4D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0B4D;\n        }\n    }\n    \n    function eth6DivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0b;\n            var var3 = storage[0x0c];\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = 0x0c62;\n            var2 = func_16D2(var3, var4);\n            var3 = storage[0x0a];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0b4a;\n            var4 = 0x01b7;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var var6 = var1;\n            var4 = func_08BD(var5, var6);\n            var2 = func_01B7(var3, var4);\n            var0 = var2;\n        \n        label_0B4D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0B4D;\n        }\n    }\n    \n    function ethDivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b76;\n        var var2 = 0x0cfb;\n        var var3 = arg0;\n        var2 = eth6DivsOwing(var3);\n        return func_0CFB(arg0, var2);\n    }\n    \n    function func_0CFB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x0b6a;\n        var var1 = arg0;\n        var0 = eth4DivsOwing(var1);\n        var temp0 = arg1;\n        arg1 = var0;\n        var0 = temp0;\n        r0 = func_09AA(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function depositTokens(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0d16;\n        var var7 = msg.sender;\n        func_0708(var7);\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0xdd62ed3e00000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = address(this);\n        var0 = msg.sender;\n        var6 = storage[0x01] & 0x02 ** 0xa0 - 0x01;\n        var7 = 0xdd62ed3e;\n        var var8 = temp0 + 0x44;\n        var var9 = 0x20;\n        var var10 = memory[0x40:0x60];\n        var var11 = temp0 - var10 + 0x44;\n        var var12 = var10;\n        var var13 = 0x00;\n        var var14 = var6;\n        var var15 = !address(var14).code.length;\n    \n        if (var15) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n        var9 = !temp1;\n    \n        if (!var9) {\n            var6 = memory[0x40:0x60];\n            var7 = returndata.length;\n        \n            if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = memory[var6:var6 + 0x20];\n            var temp2 = var1 > 0x00;\n            var6 = temp2;\n        \n            if (!var6) {\n            label_0E61:\n            \n                if (!var6) { revert(memory[0x00:0x00]); }\n            \n                var6 = 0x0e82;\n                var7 = 0x64;\n                var8 = 0x01b7;\n                var9 = var1;\n                var10 = 0x59;\n                var8 = func_08BD(var9, var10);\n                var6 = func_01B7(var7, var8);\n                var2 = var6;\n                var6 = 0x0e9a;\n                var7 = 0x64;\n                var8 = 0x01b7;\n                var9 = var1;\n                var10 = 0x06;\n                var8 = func_08BD(var9, var10);\n                var6 = func_01B7(var7, var8);\n                var3 = var6;\n                var6 = 0x0eb2;\n                var7 = 0x64;\n                var8 = 0x01b7;\n                var9 = var1;\n                var10 = 0x04;\n                var8 = func_08BD(var9, var10);\n                var6 = func_01B7(var7, var8);\n                var4 = var6;\n                var6 = 0x0eca;\n                var7 = 0x64;\n                var8 = 0x01b7;\n                var9 = var1;\n                var10 = 0x01;\n                var8 = func_08BD(var9, var10);\n                var6 = func_01B7(var7, var8);\n                var5 = var6;\n                var6 = 0x0ed6;\n                var7 = var3;\n                var8 = var4;\n                func_16E9(var7, var8);\n            \n            label_0ED6:\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0xa9059cbb * 0x02 ** 0xe0;\n                var temp4 = 0x02 ** 0xa0 - 0x01;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = temp4 & arg0;\n                memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = var5;\n                var6 = storage[0x01] & temp4;\n                var7 = 0xa9059cbb;\n                var8 = temp3 + 0x44;\n                var9 = 0x20;\n                var10 = memory[0x40:0x60];\n                var11 = temp3 - var10 + 0x44;\n                var12 = var10;\n                var13 = 0x00;\n                var14 = var6;\n                var15 = !address(var14).code.length;\n            \n                if (var15) { revert(memory[0x00:0x00]); }\n            \n                var temp5;\n                temp5, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                var9 = !temp5;\n            \n                if (!var9) {\n                    var6 = memory[0x40:0x60];\n                    var7 = returndata.length;\n                \n                    if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var5;\n                    memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = arg1;\n                    var temp7 = memory[0x40:0x60];\n                    log(memory[temp7:temp7 + temp6 - temp7 + 0x60], [0xc804beabd6deef69632486188d3b1a0fc6837d20bf348393884d368fa5bf10cd]);\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    var7 = storage[keccak256(memory[0x00:0x40])];\n                    var6 = 0x0fcd;\n                    var8 = var2;\n                    var6 = func_09AA(var7, var8);\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    storage[keccak256(memory[0x00:0x40])] = var6;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n                    label_1011:\n                        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n                        label_1039:\n                            return;\n                        } else {\n                            var6 = 0x1039;\n                            var7 = var0;\n                            func_09BC(var7);\n                            goto label_1039;\n                        }\n                    } else {\n                        var7 = storage[0x08];\n                        var6 = 0x100d;\n                        var8 = var2;\n                        var6 = func_09AA(var7, var8);\n                        storage[0x08] = var6;\n                        goto label_1011;\n                    }\n                } else {\n                    var temp8 = returndata.length;\n                    memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\n                var temp10 = 0x02 ** 0xa0 - 0x01;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = temp10 & var0;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = address(this);\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = var1;\n                var6 = storage[0x01] & temp10;\n                var7 = 0x23b872dd;\n                var8 = temp9 + 0x64;\n                var9 = 0x20;\n                var10 = memory[0x40:0x60];\n                var11 = temp9 - var10 + 0x64;\n                var12 = var10;\n                var13 = 0x00;\n                var14 = var6;\n                var15 = !address(var14).code.length;\n            \n                if (var15) { revert(memory[0x00:0x00]); }\n            \n                var temp11;\n                temp11, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                var9 = !temp11;\n            \n                if (!var9) {\n                    var6 = memory[0x40:0x60];\n                    var7 = returndata.length;\n                \n                    if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var6 = memory[var6:var6 + 0x20];\n                    goto label_0E61;\n                } else {\n                    var temp12 = returndata.length;\n                    memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            }\n        } else {\n            var temp13 = returndata.length;\n            memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function addedToList(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function total4EthDivPoints() returns (var r0) { return storage[0x0e]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function getList() returns (var r0, var r1) {\n        r1 = 0x60;\n        var var1 = r1;\n        var var2 = 0x60;\n        var var3 = var2;\n        var var4 = 0x00;\n        var temp0 = storage[0x06];\n        var temp1 = memory[0x40:0x60];\n        var var6 = temp0;\n        var var5 = temp1;\n        memory[var5:var5 + 0x20] = var6;\n        memory[0x40:0x60] = var5 + var6 * 0x20 + 0x20;\n    \n        if (!var6) {\n            var2 = var5;\n            var temp2 = storage[0x06];\n            var temp3 = memory[0x40:0x60];\n            var5 = temp3;\n            var6 = temp2;\n            memory[var5:var5 + 0x20] = var6;\n            memory[0x40:0x60] = var5 + var6 * 0x20 + 0x20;\n        \n            if (!var6) {\n            label_10D0:\n                var3 = var5;\n                var4 = 0x01;\n            \n                if (var4 > storage[0x06]) {\n                label_1166:\n                    r0 = var2;\n                    r1 = var3;\n                    return r0, r1;\n                } else {\n                label_10E2:\n                    var temp4 = var4;\n                    memory[0x00:0x20] = temp4;\n                    memory[0x20:0x40] = 0x05;\n                    var5 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                    var6 = var2;\n                    var var7 = temp4 + ~0x00;\n                \n                    if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                \n                    var temp5 = 0x02 ** 0xa0 - 0x01;\n                    memory[var6 + var7 * 0x20 + 0x20:var6 + var7 * 0x20 + 0x20 + 0x20] = temp5 & var5;\n                    var temp6 = var4;\n                    memory[0x00:0x20] = temp6;\n                    memory[0x20:0x40] = 0x05;\n                    memory[0x00:0x20] = temp5 & storage[keccak256(memory[0x00:0x40])];\n                    memory[0x20:0x40] = 0x03;\n                    var5 = storage[keccak256(memory[0x00:0x40])];\n                    var6 = var3;\n                    var7 = temp6 + ~0x00;\n                \n                    if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                \n                    memory[var6 + var7 * 0x20 + 0x20:var6 + var7 * 0x20 + 0x20 + 0x20] = var5;\n                    var4 = var4 + 0x01;\n                \n                    if (var4 > storage[0x06]) { goto label_1166; }\n                    else { goto label_10E2; }\n                }\n            } else {\n            label_10C1:\n                var temp7 = var6 * 0x20;\n                memory[var5 + 0x20:var5 + 0x20 + temp7] = code[code.length:code.length + temp7];\n                var3 = var5;\n                var4 = 0x01;\n            \n                if (var4 > storage[0x06]) { goto label_1166; }\n                else { goto label_10E2; }\n            }\n        } else {\n            var temp8 = var6 * 0x20;\n            memory[var5 + 0x20:var5 + 0x20 + temp8] = code[code.length:code.length + temp8];\n            var2 = var5;\n            var temp9 = storage[0x06];\n            var temp10 = memory[0x40:0x60];\n            var5 = temp10;\n            var6 = temp9;\n            memory[var5:var5 + 0x20] = var6;\n            memory[0x40:0x60] = var5 + var6 * 0x20 + 0x20;\n        \n            if (!var6) { goto label_10D0; }\n            else { goto label_10C1; }\n        }\n    }\n    \n    function withdrawDivs() {\n        var var0 = 0x1179;\n        var var1 = msg.sender;\n        func_0708(var1);\n    }\n    \n    function total4TokenDivPoints() returns (var r0) { return storage[0x12]; }\n    \n    function withdrawEth(var arg0) {\n        var var0 = msg.sender;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = arg0 > var4;\n    \n        if (var5) {\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n        \n            if (arg0 <= storage[keccak256(memory[0x00:0x40])]) { goto label_11B9; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var5) {\n        label_11B9:\n            var5 = 0x11c2;\n            var var6 = var0;\n            func_0708(var6);\n            var5 = 0x11d8;\n            var6 = 0x64;\n            var var7 = 0x01b7;\n            var var8 = arg0;\n            var var9 = 0x59;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var1 = var5;\n            var5 = 0x11f0;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x06;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var2 = var5;\n            var5 = 0x1208;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x04;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var3 = var5;\n            var5 = 0x1220;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x01;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var4 = var5;\n            var5 = 0x124c;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = arg0;\n            var5 = func_16D2(var6, var7);\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x20:0x40] = 0x04;\n        \n            if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n            label_1290:\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n            \n                if (storage[keccak256(memory[0x00:0x40])]) {\n                label_12B8:\n                    var temp0 = memory[0x40:0x60];\n                    var temp1 = var1;\n                    var temp2;\n                    temp2, memory[temp0:temp0 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n                    var5 = !temp2;\n                \n                    if (!var5) {\n                        var5 = 0x12f9;\n                        var6 = var2;\n                        var7 = var3;\n                        func_0919(var6, var7);\n                        var temp3 = memory[0x40:0x60];\n                        var temp4 = var4;\n                        var temp5;\n                        temp5, memory[temp3:temp3 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp3:temp3 + 0x00]);\n                        var5 = !temp5;\n                    \n                        if (!var5) { return; }\n                    \n                        var temp6 = returndata.length;\n                        memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    } else {\n                        var temp7 = returndata.length;\n                        memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var5 = 0x12b8;\n                    var6 = var0;\n                    func_1779(var6);\n                    goto label_12B8;\n                }\n            } else {\n                var5 = 0x128c;\n                var6 = storage[0x09];\n                var7 = arg0;\n                var5 = func_16D2(var6, var7);\n                storage[0x09] = var5;\n                goto label_1290;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function contributionsEth(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function last4EthDivPoints(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function last4TokenDivPoints(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x11;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function total6TokenDivPoints() returns (var r0) { return storage[0x10]; }\n    \n    function addresses(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function getTotalTokens() returns (var r0) { return storage[0x08]; }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0x02 ** 0xa0 - 0x01, stack[-1] & 0x02 ** 0xa0 - 0x01]);\n        storage[0x00] = (temp1 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function lastIndex() returns (var r0) { return storage[0x06]; }\n    \n    function withdrawTokens(var arg0, var arg1, var arg2) {\n        var var0 = msg.sender;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = 0x1441;\n        var var6 = var0;\n        func_0708(var6);\n        var5 = arg0 > 0x00;\n    \n        if (var5) {\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n        \n            if (arg0 <= storage[keccak256(memory[0x00:0x40])]) { goto label_1474; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var5) {\n        label_1474:\n            var5 = 0x148a;\n            var6 = 0x64;\n            var var7 = 0x01b7;\n            var var8 = arg0;\n            var var9 = 0x59;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var1 = var5;\n            var5 = 0x14a2;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x06;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var2 = var5;\n            var5 = 0x14ba;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x04;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var3 = var5;\n            var5 = 0x14d2;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x01;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var4 = var5;\n            var5 = 0x14fe;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = arg0;\n            var5 = func_16D2(var6, var7);\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x20:0x40] = 0x04;\n        \n            if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n            label_1542:\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40])]) {\n                label_156A:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = 0xa9059cbb * 0x02 ** 0xe0;\n                    var temp1 = 0x02 ** 0xa0 - 0x01;\n                    memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & var0;\n                    memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = var1;\n                    var5 = storage[0x01] & temp1;\n                    var6 = 0xa9059cbb;\n                    var7 = temp0 + 0x44;\n                    var8 = 0x20;\n                    var9 = memory[0x40:0x60];\n                    var var10 = temp0 - var9 + 0x44;\n                    var var11 = var9;\n                    var var12 = 0x00;\n                    var var13 = var5;\n                    var var14 = !address(var13).code.length;\n                \n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                    var temp2;\n                    temp2, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n                    var8 = !temp2;\n                \n                    if (!var8) {\n                        var5 = memory[0x40:0x60];\n                        var6 = returndata.length;\n                    \n                        if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var5 = 0x15fa;\n                        var6 = var2;\n                        var7 = var3;\n                        func_16E9(var6, var7);\n                    \n                    label_15FA:\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = 0xa9059cbb * 0x02 ** 0xe0;\n                        var temp4 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = temp4 & arg1;\n                        memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = var4;\n                        var5 = storage[0x01] & temp4;\n                        var6 = 0xa9059cbb;\n                        var7 = temp3 + 0x44;\n                        var8 = 0x20;\n                        var9 = memory[0x40:0x60];\n                        var10 = temp3 - var9 + 0x44;\n                        var11 = var9;\n                        var12 = 0x00;\n                        var13 = var5;\n                        var14 = !address(var13).code.length;\n                    \n                        if (var14) { revert(memory[0x00:0x00]); }\n                    \n                        var temp5;\n                        temp5, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n                        var8 = !temp5;\n                    \n                        if (!var8) {\n                            var5 = memory[0x40:0x60];\n                            var6 = returndata.length;\n                        \n                            if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            var temp6 = memory[0x40:0x60];\n                            memory[temp6:temp6 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n                            memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = arg2;\n                            var temp7 = memory[0x40:0x60];\n                            log(memory[temp7:temp7 + temp6 - temp7 + 0x60], [0xc804beabd6deef69632486188d3b1a0fc6837d20bf348393884d368fa5bf10cd]);\n                            return;\n                        } else {\n                            var temp8 = returndata.length;\n                            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp9 = returndata.length;\n                        memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var5 = 0x156a;\n                    var6 = var0;\n                    func_1779(var6);\n                    goto label_156A;\n                }\n            } else {\n                var5 = 0x153e;\n                var6 = storage[0x08];\n                var7 = arg0;\n                var5 = func_16D2(var6, var7);\n                storage[0x08] = var5;\n                goto label_1542;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_16D2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_16E9(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x16f4;\n        var2 = getTotalTokens();\n        var0 = var2;\n        var2 = 0x16fe;\n        var2 = getTotalWei();\n        var1 = var2;\n        var2 = !var1;\n    \n        if (var2) {\n            if (!var2) {\n            label_1715:\n                var2 = 0x1740;\n                var var3 = 0x1731;\n                var var4 = var1;\n                var var5 = 0x01b7;\n                var var6 = arg1;\n                var var7 = storage[0x0a];\n                var5 = func_08BD(var6, var7);\n                var3 = func_01B7(var4, var5);\n                var2 = func_1731(var3);\n                storage[0x12] = var2;\n                var2 = 0x1770;\n                var3 = 0x1761;\n                var4 = var0;\n                var5 = 0x01b7;\n                var7 = storage[0x0a];\n                var6 = arg0;\n                var5 = func_08BD(var6, var7);\n                var3 = func_01B7(var4, var5);\n                var2 = func_1761(var3);\n                storage[0x10] = var2;\n                return;\n            } else {\n            label_1711:\n                return;\n            }\n        } else if (var0) { goto label_1715; }\n        else { goto label_1711; }\n    }\n    \n    function func_1731(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x12];\n        var var0 = temp0;\n        r0 = func_09AA(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1761(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x10];\n        var var0 = temp0;\n        r0 = func_09AA(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1779(var arg0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xff;\n        memory[0x20:0x40] = 0x04;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { return; }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var var1 = storage[0x08];\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x17d5;\n        var0 = func_16D2(var1, var2);\n        storage[0x08] = var0;\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var1 = storage[0x09];\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x1803;\n        var0 = func_16D2(var1, var2);\n        storage[0x09] = var0;\n        memory[0x00:0x20] = storage[0x06];\n        memory[0x20:0x40] = 0x05;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & arg0;\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = storage[temp3];\n        memory[0x20:0x40] = 0x05;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[temp4] = (temp5 & storage[temp4]) | (temp2 & temp1);\n        memory[0x00:0x20] = storage[0x06];\n        memory[0x00:0x20] = temp2 & storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = storage[temp3];\n        storage[temp3] = 0x00;\n        memory[0x00:0x20] = storage[0x06];\n        memory[0x20:0x40] = 0x05;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        storage[temp6] = temp5 & storage[temp6];\n        storage[0x06] = storage[0x06] + ~0x00;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0174:\n            var var0 = msg.sender;\n            var var1 = address(var0).code.length;\n            var var2 = 0x00;\n            var var3 = var2;\n            var var4 = var3;\n            var var5 = var4;\n            var var6 = var5;\n        \n            if (var1) { revert(memory[0x00:0x00]); }\n        \n            var2 = msg.value;\n            var var7 = 0x0194;\n            var var8 = var0;\n            func_0708(var8);\n        \n            if (var2 <= 0x00) { revert(memory[0x00:0x00]); }\n        \n            var7 = 0x01c3;\n            var8 = 0x64;\n            var var9 = 0x01b7;\n            var var10 = var2;\n            var var11 = 0x59;\n            var9 = func_08BD(var10, var11);\n            var7 = func_01B7(var8, var9);\n            var3 = var7;\n            var7 = 0x01db;\n            var8 = 0x64;\n            var9 = 0x01b7;\n            var10 = var2;\n            var11 = 0x06;\n            var9 = func_08BD(var10, var11);\n            var7 = func_01B7(var8, var9);\n            var4 = var7;\n            var7 = 0x01f3;\n            var8 = 0x64;\n            var9 = 0x01b7;\n            var10 = var2;\n            var11 = 0x04;\n            var9 = func_08BD(var10, var11);\n            var7 = func_01B7(var8, var9);\n            var5 = var7;\n            var7 = 0x020b;\n            var8 = 0x64;\n            var9 = 0x01b7;\n            var10 = var2;\n            var11 = 0x01;\n            var9 = func_08BD(var10, var11);\n            var7 = func_01B7(var8, var9);\n            var6 = var7;\n            var7 = 0x0217;\n            var8 = var4;\n            var9 = var5;\n            func_0919(var8, var9);\n            var temp0 = memory[0x40:0x60];\n            var temp1 = var6;\n            var temp2;\n            temp2, memory[temp0:temp0 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n            var7 = !temp2;\n        \n            if (!var7) {\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                var7 = 0x027a;\n                var8 = storage[keccak256(memory[0x00:0x40])];\n                var9 = var3;\n                var7 = func_09AA(var8, var9);\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n                storage[keccak256(memory[0x00:0x40])] = var7;\n                memory[0x20:0x40] = 0x04;\n            \n                if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n                label_02BE:\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { stop(); }\n                \n                    var7 = 0x02e6;\n                    var8 = var0;\n                    func_09BC(var8);\n                    stop();\n                } else {\n                    var7 = 0x02ba;\n                    var8 = storage[0x09];\n                    var9 = var3;\n                    var7 = func_09AA(var8, var9);\n                    storage[0x09] = var7;\n                    goto label_02BE;\n                }\n            } else {\n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x03e1001e) {\n                // Dispatch table entry for last6EthDivPoints(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = last6EthDivPoints(var2);\n            \n            label_0310:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x0aa8bfe7) {\n                // Dispatch table entry for total6EthDivPoints()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = total6EthDivPoints();\n                goto label_0310;\n            } else if (var0 == 0x0bb4e6f4) {\n                // Dispatch table entry for getTotalWei()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var1 = getTotalWei();\n                goto label_0310;\n            } else if (var0 == 0x1080b7b1) {\n                // Dispatch table entry for token4DivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = token4DivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x10d979f6) {\n                // Dispatch table entry for tokenDivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = tokenDivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x1288a8e9) {\n                // Dispatch table entry for contributionsToken(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = contributionsToken(var2);\n                goto label_0310;\n            } else if (var0 == 0x1703b7fd) {\n                // Dispatch table entry for eth4DivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = eth4DivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x24e5dacd) {\n                // Dispatch table entry for last6TokenDivPoints(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = last6TokenDivPoints(var2);\n                goto label_0310;\n            } else if (var0 == 0x2db78d93) {\n                // Dispatch table entry for indexes(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = indexes(var2);\n                goto label_0310;\n            } else if (var0 == 0x4b1cdc2d) {\n                // Dispatch table entry for token6DivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = token6DivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x4e52622b) {\n                // Dispatch table entry for eth6DivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = eth6DivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x5c7ae6e3) {\n                // Dispatch table entry for ethDivsOwing(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = ethDivsOwing(var2);\n                goto label_0310;\n            } else if (var0 == 0x66168bd7) {\n                // Dispatch table entry for depositTokens(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                depositTokens(var2, var3);\n                stop();\n            } else if (var0 == 0x740b4b60) {\n                // Dispatch table entry for addedToList(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04bc;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = addedToList(var2);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = !!var2;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + temp6 - temp7 + 0x20];\n            } else if (var0 == 0x8a561f37) {\n                // Dispatch table entry for total4EthDivPoints()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = total4EthDivPoints();\n                goto label_0310;\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04fa;\n                var2 = owner();\n            \n            label_04FA:\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + temp8 - temp9 + 0x20];\n            } else if (var0 == 0x942b765a) {\n                // Dispatch table entry for getList()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x052b;\n                var1, var2 = getList();\n                var temp10 = memory[0x40:0x60];\n                var3 = temp10;\n                var4 = var3;\n                var5 = var4 + 0x20;\n                var temp11 = var5 + 0x20;\n                memory[var4:var4 + 0x20] = temp11 - var4;\n                var temp12 = var1;\n                memory[temp11:temp11 + 0x20] = memory[temp12:temp12 + 0x20];\n                var6 = temp11 + 0x20;\n                var7 = temp12 + 0x20;\n                var8 = memory[temp12:temp12 + 0x20] * 0x20;\n                var9 = var8;\n                var10 = var6;\n                var11 = var7;\n                var var12 = 0x00;\n            \n                if (var12 >= var9) {\n                label_056F:\n                    var temp13 = var8 + var6;\n                    memory[var5:var5 + 0x20] = temp13 - var3;\n                    var temp14 = var2;\n                    memory[temp13:temp13 + 0x20] = memory[temp14:temp14 + 0x20];\n                    var6 = temp13 + 0x20;\n                    var7 = temp14 + 0x20;\n                    var8 = memory[temp14:temp14 + 0x20] * 0x20;\n                    var9 = var8;\n                    var10 = var6;\n                    var11 = var7;\n                    var12 = 0x00;\n                \n                    if (var12 >= var9) {\n                    label_05AE:\n                        var temp15 = memory[0x40:0x60];\n                        return memory[temp15:temp15 + (var8 + var6) - temp15];\n                    } else {\n                    label_059F:\n                        var temp16 = var12;\n                        memory[temp16 + var10:temp16 + var10 + 0x20] = memory[temp16 + var11:temp16 + var11 + 0x20];\n                        var12 = temp16 + 0x20;\n                    \n                        if (var12 >= var9) { goto label_05AE; }\n                        else { goto label_059F; }\n                    }\n                } else {\n                label_0560:\n                    var temp17 = var12;\n                    memory[temp17 + var10:temp17 + var10 + 0x20] = memory[temp17 + var11:temp17 + var11 + 0x20];\n                    var12 = temp17 + 0x20;\n                \n                    if (var12 >= var9) { goto label_056F; }\n                    else { goto label_0560; }\n                }\n            } else if (var0 == 0x9ddf840d) {\n                // Dispatch table entry for withdrawDivs()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                withdrawDivs();\n                stop();\n            } else if (var0 == 0xc04ae37f) {\n                // Dispatch table entry for total4TokenDivPoints()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = total4TokenDivPoints();\n                goto label_0310;\n            } else if (var0 == 0xc311d049) {\n                // Dispatch table entry for withdrawEth(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24];\n                withdrawEth(var2);\n                stop();\n            } else if (var0 == 0xc69ea42f) {\n                // Dispatch table entry for contributionsEth(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = contributionsEth(var2);\n                goto label_0310;\n            } else if (var0 == 0xd59dd5d2) {\n                // Dispatch table entry for last4EthDivPoints(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = last4EthDivPoints(var2);\n                goto label_0310;\n            } else if (var0 == 0xdd93aa81) {\n                // Dispatch table entry for last4TokenDivPoints(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var2 = last4TokenDivPoints(var2);\n                goto label_0310;\n            } else if (var0 == 0xe8836dcb) {\n                // Dispatch table entry for total6TokenDivPoints()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = total6TokenDivPoints();\n                goto label_0310;\n            } else if (var0 == 0xedf26d9b) {\n                // Dispatch table entry for addresses(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04fa;\n                var2 = msg.data[0x04:0x24];\n                var2 = addresses(var2);\n                goto label_04FA;\n            } else if (var0 == 0xf08b82e6) {\n                // Dispatch table entry for getTotalTokens()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var1 = getTotalTokens();\n                goto label_0310;\n            } else if (var0 == 0xf2fde38b) {\n                // Dispatch table entry for transferOwnership(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                transferOwnership(var2);\n                stop();\n            } else if (var0 == 0xf3f6f0d7) {\n                // Dispatch table entry for lastIndex()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0310;\n                var2 = lastIndex();\n                goto label_0310;\n            } else if (var0 == 0xfecf9959) {\n                // Dispatch table entry for withdrawTokens(uint256,address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0499;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var4 = msg.data[0x44:0x64];\n                withdrawTokens(var2, var3, var4);\n                stop();\n            } else { goto label_0174; }\n        }\n    }\n    \n    function func_01B7(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= var1) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n        var var3 = arg0;\n    \n        if (var2) { return var3 / var2; }\n        else { assert(); }\n    }\n    \n    function func_0708(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x071a;\n        var var7 = arg0;\n        var6 = eth6DivsOwing(var7);\n        var0 = var6;\n        var6 = 0x0725;\n        var7 = arg0;\n        var6 = eth4DivsOwing(var7);\n        var temp0 = var6;\n        var1 = temp0;\n        var6 = 0x0737;\n        var7 = var1;\n        var var8 = var0;\n        var6 = func_09AA(var7, var8);\n        var2 = var6;\n        var6 = 0x0742;\n        var7 = arg0;\n        var6 = token6DivsOwing(var7);\n        var3 = var6;\n        var6 = 0x074d;\n        var7 = arg0;\n        var6 = token4DivsOwing(var7);\n        var temp1 = var6;\n        var4 = temp1;\n        var6 = 0x075f;\n        var7 = var4;\n        var8 = var3;\n        var6 = func_09AA(var7, var8);\n        var5 = var6;\n    \n        if (var2 <= 0x00) {\n        label_07A2:\n        \n            if (var5 <= 0x00) {\n            label_0831:\n                var temp2 = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x00:0x20] = temp2;\n                memory[0x20:0x40] = 0x0b;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x0c];\n                memory[0x20:0x40] = 0x0d;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x0e];\n                memory[0x20:0x40] = 0x0f;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x10];\n                memory[0x20:0x40] = 0x11;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x12];\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = temp2;\n                memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var2;\n                memory[temp3 + 0x40:temp3 + 0x40 + 0x20] = var5;\n                var temp4 = memory[0x40:0x60];\n                log(memory[temp4:temp4 + temp3 - temp4 + 0x60], [0xdd6e13fa60b7ff497716fc07cf86f41f54c3f689473ea4517e9489eb1e50e9ed]);\n                return;\n            } else {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = 0xa9059cbb * 0x02 ** 0xe0;\n                var temp6 = 0x02 ** 0xa0 - 0x01;\n                memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = temp6 & arg0;\n                memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = var5;\n                var6 = storage[0x01] & temp6;\n                var7 = 0xa9059cbb;\n                var8 = temp5 + 0x44;\n                var var9 = 0x20;\n                var var10 = memory[0x40:0x60];\n                var var11 = temp5 - var10 + 0x44;\n                var var12 = var10;\n                var var13 = 0x00;\n                var var14 = var6;\n                var var15 = !address(var14).code.length;\n            \n                if (var15) { revert(memory[0x00:0x00]); }\n            \n                var temp7;\n                temp7, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                var9 = !temp7;\n            \n                if (!var9) {\n                    var6 = memory[0x40:0x60];\n                    var7 = returndata.length;\n                \n                    if (var7 >= 0x20) { goto label_0831; }\n                    else { revert(memory[0x00:0x00]); }\n                } else {\n                    var temp8 = returndata.length;\n                    memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            }\n        } else {\n            var temp9 = memory[0x40:0x60];\n            var temp10 = var2;\n            var temp11;\n            temp11, memory[temp9:temp9 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp10 * 0x08fc).value(temp10)(memory[temp9:temp9 + 0x00]);\n            var6 = !temp11;\n        \n            if (!var6) { goto label_07A2; }\n        \n            var temp12 = returndata.length;\n            memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_08BD(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (!arg0) { return 0x00; }\n    \n        var temp0 = arg0;\n        var1 = arg1 * temp0;\n        var var2 = arg1;\n        var var3 = temp0;\n        var var4 = var1;\n    \n        if (!var3) { assert(); }\n    \n        if (var4 / var3 == var2) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0919(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x0924;\n        var2 = getTotalTokens();\n        var0 = var2;\n        var2 = 0x092e;\n        var2 = getTotalWei();\n        var1 = var2;\n        var2 = !var1;\n    \n        if (var2) {\n            if (!var2) {\n            label_0945:\n                var2 = 0x0970;\n                var var3 = 0x0961;\n                var var4 = var1;\n                var var5 = 0x01b7;\n                var var6 = arg1;\n                var var7 = storage[0x0a];\n                var5 = func_08BD(var6, var7);\n                var3 = func_01B7(var4, var5);\n                var2 = func_0961(var3);\n                storage[0x0e] = var2;\n                var2 = 0x09a0;\n                var3 = 0x0991;\n                var4 = var0;\n                var5 = 0x01b7;\n                var6 = arg0;\n                var7 = storage[0x0a];\n                var5 = func_08BD(var6, var7);\n                var3 = func_01B7(var4, var5);\n                var2 = func_0991(var3);\n                storage[0x0c] = var2;\n            \n            label_09A4:\n                return;\n            } else {\n            label_0941:\n                goto label_09A4;\n            }\n        } else if (var0) { goto label_0945; }\n        else { goto label_0941; }\n    }\n    \n    function func_0961(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x0e];\n        var var0 = temp0;\n        r0 = func_09AA(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0991(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x0c];\n        var var0 = temp0;\n        r0 = func_09AA(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_09AA(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n    \n        if (var1 >= temp0) { return var1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_09BC(var arg0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n        memory[0x20:0x40] = 0x04;\n    \n        if (storage[keccak256(memory[0x00:0x40])]) {\n        label_0A9E:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var var1 = storage[0x08];\n            var var0 = 0x0a1b;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var0 = func_09AA(var1, var2);\n            storage[0x08] = var0;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var1 = storage[0x09];\n            var0 = 0x0a49;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var0 = func_09AA(var1, var2);\n            storage[0x09] = var0;\n            var temp1 = storage[0x06] + 0x01;\n            storage[0x06] = temp1;\n            memory[0x00:0x20] = temp1;\n            memory[0x20:0x40] = 0x05;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            var temp3 = arg0 & 0x02 ** 0xa0 - 0x01;\n            storage[temp2] = temp3 | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            memory[0x00:0x20] = temp3;\n            memory[0x20:0x40] = 0x04;\n            storage[keccak256(memory[0x00:0x40])] = storage[0x06];\n            goto label_0A9E;\n        }\n    }\n    \n    function last6EthDivPoints(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0b;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function total6EthDivPoints() returns (var r0) { return storage[0x0c]; }\n    \n    function getTotalWei() returns (var r0) { return storage[0x09]; }\n    \n    function token4DivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x11;\n            var var3 = storage[0x12];\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = 0x0b17;\n            var2 = func_16D2(var3, var4);\n            var3 = storage[0x0a];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0b4a;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x01b7;\n            var var6 = var1;\n            var4 = func_08BD(var5, var6);\n            var2 = func_01B7(var3, var4);\n            var0 = var2;\n        \n        label_0B4D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0B4D;\n        }\n    }\n    \n    function tokenDivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b76;\n        var var2 = 0x0b61;\n        var var3 = arg0;\n        var2 = token6DivsOwing(var3);\n        return func_0B61(arg0, var2);\n    }\n    \n    function func_0B61(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x0b6a;\n        var var1 = arg0;\n        var0 = token4DivsOwing(var1);\n        var temp0 = arg1;\n        arg1 = var0;\n        var0 = temp0;\n        r0 = func_09AA(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function contributionsToken(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x03;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function eth4DivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0d;\n            var var3 = storage[0x0e];\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = 0x0b17;\n            var2 = func_16D2(var3, var4);\n            var3 = storage[0x0a];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0b4a;\n            var4 = 0x01b7;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var var6 = var1;\n            var4 = func_08BD(var5, var6);\n            var2 = func_01B7(var3, var4);\n            var0 = var2;\n        \n        label_0B4D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0B4D;\n        }\n    }\n    \n    function last6TokenDivPoints(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0f;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function indexes(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function token6DivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0f;\n            var var3 = storage[0x10];\n            var var2 = 0x0c62;\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var2 = func_16D2(var3, var4);\n            var3 = storage[0x0a];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0b4a;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x01b7;\n            var var6 = var1;\n            var4 = func_08BD(var5, var6);\n            var2 = func_01B7(var3, var4);\n            var0 = var2;\n        \n        label_0B4D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0B4D;\n        }\n    }\n    \n    function eth6DivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var var1 = var0;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] & 0xff) {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0b;\n            var var3 = storage[0x0c];\n            var var4 = storage[keccak256(memory[0x00:0x40])];\n            var var2 = 0x0c62;\n            var2 = func_16D2(var3, var4);\n            var3 = storage[0x0a];\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var temp0 = var2;\n            var1 = temp0;\n            var2 = 0x0b4a;\n            var4 = 0x01b7;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var var6 = var1;\n            var4 = func_08BD(var5, var6);\n            var2 = func_01B7(var3, var4);\n            var0 = var2;\n        \n        label_0B4D:\n            return var0;\n        } else {\n            var0 = 0x00;\n            goto label_0B4D;\n        }\n    }\n    \n    function ethDivsOwing(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0b76;\n        var var2 = 0x0cfb;\n        var var3 = arg0;\n        var2 = eth6DivsOwing(var3);\n        return func_0CFB(arg0, var2);\n    }\n    \n    function func_0CFB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x0b6a;\n        var var1 = arg0;\n        var0 = eth4DivsOwing(var1);\n        var temp0 = arg1;\n        arg1 = var0;\n        var0 = temp0;\n        r0 = func_09AA(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function depositTokens(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x0d16;\n        var var7 = msg.sender;\n        func_0708(var7);\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0xdd62ed3e00000000000000000000000000000000000000000000000000000000;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = address(this);\n        var0 = msg.sender;\n        var6 = storage[0x01] & 0x02 ** 0xa0 - 0x01;\n        var7 = 0xdd62ed3e;\n        var var8 = temp0 + 0x44;\n        var var9 = 0x20;\n        var var10 = memory[0x40:0x60];\n        var var11 = temp0 - var10 + 0x44;\n        var var12 = var10;\n        var var13 = 0x00;\n        var var14 = var6;\n        var var15 = !address(var14).code.length;\n    \n        if (var15) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n        var9 = !temp1;\n    \n        if (!var9) {\n            var6 = memory[0x40:0x60];\n            var7 = returndata.length;\n        \n            if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var1 = memory[var6:var6 + 0x20];\n            var temp2 = var1 > 0x00;\n            var6 = temp2;\n        \n            if (!var6) {\n            label_0E61:\n            \n                if (!var6) { revert(memory[0x00:0x00]); }\n            \n                var6 = 0x0e82;\n                var7 = 0x64;\n                var8 = 0x01b7;\n                var9 = var1;\n                var10 = 0x59;\n                var8 = func_08BD(var9, var10);\n                var6 = func_01B7(var7, var8);\n                var2 = var6;\n                var6 = 0x0e9a;\n                var7 = 0x64;\n                var8 = 0x01b7;\n                var9 = var1;\n                var10 = 0x06;\n                var8 = func_08BD(var9, var10);\n                var6 = func_01B7(var7, var8);\n                var3 = var6;\n                var6 = 0x0eb2;\n                var7 = 0x64;\n                var8 = 0x01b7;\n                var9 = var1;\n                var10 = 0x04;\n                var8 = func_08BD(var9, var10);\n                var6 = func_01B7(var7, var8);\n                var4 = var6;\n                var6 = 0x0eca;\n                var7 = 0x64;\n                var8 = 0x01b7;\n                var9 = var1;\n                var10 = 0x01;\n                var8 = func_08BD(var9, var10);\n                var6 = func_01B7(var7, var8);\n                var5 = var6;\n                var6 = 0x0ed6;\n                var7 = var3;\n                var8 = var4;\n                func_16E9(var7, var8);\n            \n            label_0ED6:\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0xa9059cbb * 0x02 ** 0xe0;\n                var temp4 = 0x02 ** 0xa0 - 0x01;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = temp4 & arg0;\n                memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = var5;\n                var6 = storage[0x01] & temp4;\n                var7 = 0xa9059cbb;\n                var8 = temp3 + 0x44;\n                var9 = 0x20;\n                var10 = memory[0x40:0x60];\n                var11 = temp3 - var10 + 0x44;\n                var12 = var10;\n                var13 = 0x00;\n                var14 = var6;\n                var15 = !address(var14).code.length;\n            \n                if (var15) { revert(memory[0x00:0x00]); }\n            \n                var temp5;\n                temp5, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                var9 = !temp5;\n            \n                if (!var9) {\n                    var6 = memory[0x40:0x60];\n                    var7 = returndata.length;\n                \n                    if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                    memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var5;\n                    memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = arg1;\n                    var temp7 = memory[0x40:0x60];\n                    log(memory[temp7:temp7 + temp6 - temp7 + 0x60], [0xc804beabd6deef69632486188d3b1a0fc6837d20bf348393884d368fa5bf10cd]);\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    var7 = storage[keccak256(memory[0x00:0x40])];\n                    var6 = 0x0fcd;\n                    var8 = var2;\n                    var6 = func_09AA(var7, var8);\n                    memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x03;\n                    storage[keccak256(memory[0x00:0x40])] = var6;\n                    memory[0x20:0x40] = 0x04;\n                \n                    if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n                    label_1011:\n                        memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = 0x02;\n                    \n                        if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n                        label_1039:\n                            return;\n                        } else {\n                            var6 = 0x1039;\n                            var7 = var0;\n                            func_09BC(var7);\n                            goto label_1039;\n                        }\n                    } else {\n                        var7 = storage[0x08];\n                        var6 = 0x100d;\n                        var8 = var2;\n                        var6 = func_09AA(var7, var8);\n                        storage[0x08] = var6;\n                        goto label_1011;\n                    }\n                } else {\n                    var temp8 = returndata.length;\n                    memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\n                var temp10 = 0x02 ** 0xa0 - 0x01;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = temp10 & var0;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = address(this);\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = var1;\n                var6 = storage[0x01] & temp10;\n                var7 = 0x23b872dd;\n                var8 = temp9 + 0x64;\n                var9 = 0x20;\n                var10 = memory[0x40:0x60];\n                var11 = temp9 - var10 + 0x64;\n                var12 = var10;\n                var13 = 0x00;\n                var14 = var6;\n                var15 = !address(var14).code.length;\n            \n                if (var15) { revert(memory[0x00:0x00]); }\n            \n                var temp11;\n                temp11, memory[var10:var10 + var9] = address(var14).call.gas(msg.gas).value(var13)(memory[var12:var12 + var11]);\n                var9 = !temp11;\n            \n                if (!var9) {\n                    var6 = memory[0x40:0x60];\n                    var7 = returndata.length;\n                \n                    if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var6 = memory[var6:var6 + 0x20];\n                    goto label_0E61;\n                } else {\n                    var temp12 = returndata.length;\n                    memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            }\n        } else {\n            var temp13 = returndata.length;\n            memory[0x00:0x00 + temp13] = returndata[0x00:0x00 + temp13];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function addedToList(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function total4EthDivPoints() returns (var r0) { return storage[0x0e]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function getList() returns (var r0, var r1) {\n        r1 = 0x60;\n        var var1 = r1;\n        var var2 = 0x60;\n        var var3 = var2;\n        var var4 = 0x00;\n        var temp0 = storage[0x06];\n        var temp1 = memory[0x40:0x60];\n        var var6 = temp0;\n        var var5 = temp1;\n        memory[var5:var5 + 0x20] = var6;\n        memory[0x40:0x60] = var5 + var6 * 0x20 + 0x20;\n    \n        if (!var6) {\n            var2 = var5;\n            var temp2 = storage[0x06];\n            var temp3 = memory[0x40:0x60];\n            var5 = temp3;\n            var6 = temp2;\n            memory[var5:var5 + 0x20] = var6;\n            memory[0x40:0x60] = var5 + var6 * 0x20 + 0x20;\n        \n            if (!var6) {\n            label_10D0:\n                var3 = var5;\n                var4 = 0x01;\n            \n                if (var4 > storage[0x06]) {\n                label_1166:\n                    r0 = var2;\n                    r1 = var3;\n                    return r0, r1;\n                } else {\n                label_10E2:\n                    var temp4 = var4;\n                    memory[0x00:0x20] = temp4;\n                    memory[0x20:0x40] = 0x05;\n                    var5 = storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n                    var6 = var2;\n                    var var7 = temp4 + ~0x00;\n                \n                    if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                \n                    var temp5 = 0x02 ** 0xa0 - 0x01;\n                    memory[var6 + var7 * 0x20 + 0x20:var6 + var7 * 0x20 + 0x20 + 0x20] = temp5 & var5;\n                    var temp6 = var4;\n                    memory[0x00:0x20] = temp6;\n                    memory[0x20:0x40] = 0x05;\n                    memory[0x00:0x20] = temp5 & storage[keccak256(memory[0x00:0x40])];\n                    memory[0x20:0x40] = 0x03;\n                    var5 = storage[keccak256(memory[0x00:0x40])];\n                    var6 = var3;\n                    var7 = temp6 + ~0x00;\n                \n                    if (var7 >= memory[var6:var6 + 0x20]) { assert(); }\n                \n                    memory[var6 + var7 * 0x20 + 0x20:var6 + var7 * 0x20 + 0x20 + 0x20] = var5;\n                    var4 = var4 + 0x01;\n                \n                    if (var4 > storage[0x06]) { goto label_1166; }\n                    else { goto label_10E2; }\n                }\n            } else {\n            label_10C1:\n                var temp7 = var6 * 0x20;\n                memory[var5 + 0x20:var5 + 0x20 + temp7] = code[code.length:code.length + temp7];\n                var3 = var5;\n                var4 = 0x01;\n            \n                if (var4 > storage[0x06]) { goto label_1166; }\n                else { goto label_10E2; }\n            }\n        } else {\n            var temp8 = var6 * 0x20;\n            memory[var5 + 0x20:var5 + 0x20 + temp8] = code[code.length:code.length + temp8];\n            var2 = var5;\n            var temp9 = storage[0x06];\n            var temp10 = memory[0x40:0x60];\n            var5 = temp10;\n            var6 = temp9;\n            memory[var5:var5 + 0x20] = var6;\n            memory[0x40:0x60] = var5 + var6 * 0x20 + 0x20;\n        \n            if (!var6) { goto label_10D0; }\n            else { goto label_10C1; }\n        }\n    }\n    \n    function withdrawDivs() {\n        var var0 = 0x1179;\n        var var1 = msg.sender;\n        func_0708(var1);\n    }\n    \n    function total4TokenDivPoints() returns (var r0) { return storage[0x12]; }\n    \n    function withdrawEth(var arg0) {\n        var var0 = msg.sender;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = arg0 > var4;\n    \n        if (var5) {\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n        \n            if (arg0 <= storage[keccak256(memory[0x00:0x40])]) { goto label_11B9; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var5) {\n        label_11B9:\n            var5 = 0x11c2;\n            var var6 = var0;\n            func_0708(var6);\n            var5 = 0x11d8;\n            var6 = 0x64;\n            var var7 = 0x01b7;\n            var var8 = arg0;\n            var var9 = 0x59;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var1 = var5;\n            var5 = 0x11f0;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x06;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var2 = var5;\n            var5 = 0x1208;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x04;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var3 = var5;\n            var5 = 0x1220;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x01;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            var4 = var5;\n            var5 = 0x124c;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = arg0;\n            var5 = func_16D2(var6, var7);\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x02;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x20:0x40] = 0x04;\n        \n            if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n            label_1290:\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x02;\n            \n                if (storage[keccak256(memory[0x00:0x40])]) {\n                label_12B8:\n                    var temp0 = memory[0x40:0x60];\n                    var temp1 = var1;\n                    var temp2;\n                    temp2, memory[temp0:temp0 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n                    var5 = !temp2;\n                \n                    if (!var5) {\n                        var5 = 0x12f9;\n                        var6 = var2;\n                        var7 = var3;\n                        func_0919(var6, var7);\n                        var temp3 = memory[0x40:0x60];\n                        var temp4 = var4;\n                        var temp5;\n                        temp5, memory[temp3:temp3 + 0x00] = address(storage[0x00] & 0x02 ** 0xa0 - 0x01).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp3:temp3 + 0x00]);\n                        var5 = !temp5;\n                    \n                        if (!var5) { return; }\n                    \n                        var temp6 = returndata.length;\n                        memory[0x00:0x00 + temp6] = returndata[0x00:0x00 + temp6];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    } else {\n                        var temp7 = returndata.length;\n                        memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var5 = 0x12b8;\n                    var6 = var0;\n                    func_1779(var6);\n                    goto label_12B8;\n                }\n            } else {\n                var5 = 0x128c;\n                var6 = storage[0x09];\n                var7 = arg0;\n                var5 = func_16D2(var6, var7);\n                storage[0x09] = var5;\n                goto label_1290;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function contributionsEth(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function last4EthDivPoints(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x0d;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function last4TokenDivPoints(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x11;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function total6TokenDivPoints() returns (var r0) { return storage[0x10]; }\n    \n    function addresses(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x05;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01;\n    }\n    \n    function getTotalTokens() returns (var r0) { return storage[0x08]; }\n    \n    function transferOwnership(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = arg0;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0, storage[0x00] & 0x02 ** 0xa0 - 0x01, stack[-1] & 0x02 ** 0xa0 - 0x01]);\n        storage[0x00] = (temp1 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function lastIndex() returns (var r0) { return storage[0x06]; }\n    \n    function withdrawTokens(var arg0, var arg1, var arg2) {\n        var var0 = msg.sender;\n        var var1 = 0x00;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = 0x1441;\n        var var6 = var0;\n        func_0708(var6);\n        var5 = arg0 > 0x00;\n    \n        if (var5) {\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n        \n            if (arg0 <= storage[keccak256(memory[0x00:0x40])]) { goto label_1474; }\n            else { revert(memory[0x00:0x00]); }\n        } else if (var5) {\n        label_1474:\n            var5 = 0x148a;\n            var6 = 0x64;\n            var var7 = 0x01b7;\n            var var8 = arg0;\n            var var9 = 0x59;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var1 = var5;\n            var5 = 0x14a2;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x06;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var2 = var5;\n            var5 = 0x14ba;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x04;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            var3 = var5;\n            var5 = 0x14d2;\n            var6 = 0x64;\n            var7 = 0x01b7;\n            var8 = arg0;\n            var9 = 0x01;\n            var7 = func_08BD(var8, var9);\n            var5 = func_01B7(var6, var7);\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            var4 = var5;\n            var5 = 0x14fe;\n            var6 = storage[keccak256(memory[0x00:0x40])];\n            var7 = arg0;\n            var5 = func_16D2(var6, var7);\n            memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x03;\n            storage[keccak256(memory[0x00:0x40])] = var5;\n            memory[0x20:0x40] = 0x04;\n        \n            if (storage[keccak256(memory[0x00:0x40])] <= 0x00) {\n            label_1542:\n                memory[0x00:0x20] = var0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x03;\n            \n                if (storage[keccak256(memory[0x00:0x40])]) {\n                label_156A:\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = 0xa9059cbb * 0x02 ** 0xe0;\n                    var temp1 = 0x02 ** 0xa0 - 0x01;\n                    memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & var0;\n                    memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = var1;\n                    var5 = storage[0x01] & temp1;\n                    var6 = 0xa9059cbb;\n                    var7 = temp0 + 0x44;\n                    var8 = 0x20;\n                    var9 = memory[0x40:0x60];\n                    var var10 = temp0 - var9 + 0x44;\n                    var var11 = var9;\n                    var var12 = 0x00;\n                    var var13 = var5;\n                    var var14 = !address(var13).code.length;\n                \n                    if (var14) { revert(memory[0x00:0x00]); }\n                \n                    var temp2;\n                    temp2, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n                    var8 = !temp2;\n                \n                    if (!var8) {\n                        var5 = memory[0x40:0x60];\n                        var6 = returndata.length;\n                    \n                        if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var5 = 0x15fa;\n                        var6 = var2;\n                        var7 = var3;\n                        func_16E9(var6, var7);\n                    \n                    label_15FA:\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = 0xa9059cbb * 0x02 ** 0xe0;\n                        var temp4 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = temp4 & arg1;\n                        memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = var4;\n                        var5 = storage[0x01] & temp4;\n                        var6 = 0xa9059cbb;\n                        var7 = temp3 + 0x44;\n                        var8 = 0x20;\n                        var9 = memory[0x40:0x60];\n                        var10 = temp3 - var9 + 0x44;\n                        var11 = var9;\n                        var12 = 0x00;\n                        var13 = var5;\n                        var14 = !address(var13).code.length;\n                    \n                        if (var14) { revert(memory[0x00:0x00]); }\n                    \n                        var temp5;\n                        temp5, memory[var9:var9 + var8] = address(var13).call.gas(msg.gas).value(var12)(memory[var11:var11 + var10]);\n                        var8 = !temp5;\n                    \n                        if (!var8) {\n                            var5 = memory[0x40:0x60];\n                            var6 = returndata.length;\n                        \n                            if (var6 < 0x20) { revert(memory[0x00:0x00]); }\n                        \n                            var temp6 = memory[0x40:0x60];\n                            memory[temp6:temp6 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n                            memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var4;\n                            memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = arg2;\n                            var temp7 = memory[0x40:0x60];\n                            log(memory[temp7:temp7 + temp6 - temp7 + 0x60], [0xc804beabd6deef69632486188d3b1a0fc6837d20bf348393884d368fa5bf10cd]);\n                            return;\n                        } else {\n                            var temp8 = returndata.length;\n                            memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                            revert(memory[0x00:0x00 + returndata.length]);\n                        }\n                    } else {\n                        var temp9 = returndata.length;\n                        memory[0x00:0x00 + temp9] = returndata[0x00:0x00 + temp9];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var5 = 0x156a;\n                    var6 = var0;\n                    func_1779(var6);\n                    goto label_156A;\n                }\n            } else {\n                var5 = 0x153e;\n                var6 = storage[0x08];\n                var7 = arg0;\n                var5 = func_16D2(var6, var7);\n                storage[0x08] = var5;\n                goto label_1542;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_16D2(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (arg1 <= arg0) { return arg0 - arg1; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_16E9(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x16f4;\n        var2 = getTotalTokens();\n        var0 = var2;\n        var2 = 0x16fe;\n        var2 = getTotalWei();\n        var1 = var2;\n        var2 = !var1;\n    \n        if (var2) {\n            if (!var2) {\n            label_1715:\n                var2 = 0x1740;\n                var var3 = 0x1731;\n                var var4 = var1;\n                var var5 = 0x01b7;\n                var var6 = arg1;\n                var var7 = storage[0x0a];\n                var5 = func_08BD(var6, var7);\n                var3 = func_01B7(var4, var5);\n                var2 = func_1731(var3);\n                storage[0x12] = var2;\n                var2 = 0x1770;\n                var3 = 0x1761;\n                var4 = var0;\n                var5 = 0x01b7;\n                var7 = storage[0x0a];\n                var6 = arg0;\n                var5 = func_08BD(var6, var7);\n                var3 = func_01B7(var4, var5);\n                var2 = func_1761(var3);\n                storage[0x10] = var2;\n                return;\n            } else {\n            label_1711:\n                return;\n            }\n        } else if (var0) { goto label_1715; }\n        else { goto label_1711; }\n    }\n    \n    function func_1731(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x12];\n        var var0 = temp0;\n        r0 = func_09AA(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1761(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x10];\n        var var0 = temp0;\n        r0 = func_09AA(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1779(var arg0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xff;\n        memory[0x20:0x40] = 0x04;\n    \n        if (storage[keccak256(memory[0x00:0x40])] <= 0x00) { return; }\n    \n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x03;\n        var var1 = storage[0x08];\n        var var2 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x17d5;\n        var0 = func_16D2(var1, var2);\n        storage[0x08] = var0;\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x02;\n        var1 = storage[0x09];\n        var2 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x1803;\n        var0 = func_16D2(var1, var2);\n        storage[0x09] = var0;\n        memory[0x00:0x20] = storage[0x06];\n        memory[0x20:0x40] = 0x05;\n        var temp1 = storage[keccak256(memory[0x00:0x40])];\n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = temp2 & arg0;\n        memory[0x20:0x40] = 0x04;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = storage[temp3];\n        memory[0x20:0x40] = 0x05;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        var temp5 = ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[temp4] = (temp5 & storage[temp4]) | (temp2 & temp1);\n        memory[0x00:0x20] = storage[0x06];\n        memory[0x00:0x20] = temp2 & storage[keccak256(memory[0x00:0x40])];\n        memory[0x20:0x40] = 0x04;\n        storage[keccak256(memory[0x00:0x40])] = storage[temp3];\n        storage[temp3] = 0x00;\n        memory[0x00:0x20] = storage[0x06];\n        memory[0x20:0x40] = 0x05;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        storage[temp6] = temp5 & storage[temp6];\n        storage[0x06] = storage[0x06] + ~0x00;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 39.957314252853394,
	"usage": {
		"completion_tokens": 410,
		"prompt_tokens": 19378,
		"total_tokens": 19788
	}
}