{
	"address": "0xa74642aeae3e2fd79150c910eb5368b64f864b1e",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract implementing the logic described in the provided decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    mapping(address => uint) public balances;\n    uint public totalSupply;\n    mapping(uint => address) public addresses;\n    mapping(uint => uint) public data;\n    mapping(uint => uint) public storageData;\n    mapping(uint => uint) public memoryData;\n\n    event Transfer(address indexed _from, address indexed _to, uint _value);\n    event Approval(address indexed _owner, address indexed _spender, uint _value);\n\n    function balanceOf(address _owner) public view returns (uint balance) {\n        return balances[_owner];\n    }\n\n    function transfer(address _to, uint _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        require(balances[_from] >= _value);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint _value) public returns (bool success) {\n        require(_value <= balances[msg.sender]);\n        balances[_spender] += _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return balances[_spender];\n    }\n\n    function increaseAllowance(address _spender, uint _addedValue) public returns (bool success) {\n        require(_addedValue <= balances[msg.sender]);\n        balances[_spender] += _addedValue;\n        return true;\n    }\n\n    function decreaseAllowance(address _spender, uint _subtractedValue) public returns (bool success) {\n        require(_subtractedValue <= balances[_spender]);\n        balances[_spender] -= _subtractedValue;\n        return true;\n    }\n}\n```\n\nYou may need to adjust the contract to fit your specific needs. This contract includes a basic ERC20 token implementation with additional functions to increase or decrease the allowance. The contract also includes mappings for storing various types of data like addresses and integers. The decompiled code included a lot of low-level operations which are abstracted away in Solidity and are thus not included in the recreated Solidity contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472833,
	"id": "chatcmpl-8Mux7Qsezs5v6W8pRAEvdobh3t88B",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0245:\n            var var0 = 0x024f;\n            var var1 = 0x00;\n        \n        label_086C:\n            var var2 = 0x00;\n        \n            if (var2 >= storage[0x10]) {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x0f;\n                memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4e6f742079657420737461727465640000000000000000000000000000000000;\n                var temp1 = memory[0x40:0x60];\n                revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n            } else {\n                var var3 = 0x10;\n                var var4 = storage[0x0f];\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var2 = var4 * 0x0b + keccak256(memory[0x00:0x20]);\n                var3 = 0x08a5;\n                var4 = var2;\n                var var5 = msg.value;\n                var var6 = var1;\n            \n            label_170C:\n                var var7 = 0x00;\n                var var8 = var7;\n                var var9 = 0x00;\n            \n                if (storage[var4 + 0x06] < block.timestamp) {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                    memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x0f;\n                    memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x416674657220646561646c696e65210000000000000000000000000000000000;\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + temp7 - temp8 + 0x64]);\n                } else if (var5 >= storage[var4 + 0x07] / 0x0a) {\n                    var var10 = 0x17db;\n                    var var11 = storage[var4];\n                    var var12 = var5;\n                    var10 = func_1FE1(var11, var12);\n                    var temp2 = var4;\n                    storage[temp2] = var10;\n                \n                    if (var5 < storage[temp2 + 0x07]) {\n                        var10 = 0x1814;\n                        var11 = var4;\n                        var12 = var5;\n                        func_1FF1(var11, var12);\n                    \n                    label_1814:\n                        var10 = 0x181f;\n                        var11 = var4;\n                        var12 = var5;\n                        var var13 = var6;\n                        func_21AC(var11, var12, var13);\n                        var10 = 0x1829;\n                        var11 = msg.sender;\n                        var12 = var4;\n                        func_1A43(var11, var12);\n                        var10 = 0x1834;\n                        var11 = var4;\n                        var12 = msg.sender;\n                        var13 = var5;\n                        var var14 = 0x00;\n                        memory[var14:var14 + 0x20] = var12 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = var11 + 0x0a;\n                        var var15 = var14;\n                    \n                        if (storage[keccak256(memory[var15:var15 + 0x40])]) {\n                            var var16 = 0x23ae;\n                            var var17 = var13;\n                            var var18 = storage[var11 + 0x07];\n                        \n                        label_2576:\n                            var var19 = 0x00;\n                            var var20 = var18;\n                            var var21 = 0x1b0d;\n                            var var22 = 0x258e;\n                            var var23 = var17;\n                            var var24 = 0x0de0b6b3a7640000;\n                            var22 = func_24C7(var23, var24);\n                            var21 = func_258E(var18, var22);\n                        \n                            if (!var20) { assert(); }\n                        \n                            var16 = var21 / var20;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var temp3 = var11;\n                            memory[0x00:0x20] = var12 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = temp3 + 0x0a;\n                            storage[keccak256(memory[0x00:0x40])] = storage[temp3 + 0x04];\n                            var16 = 0x23ae;\n                            var17 = var13;\n                            var18 = storage[temp3 + 0x07];\n                            goto label_2576;\n                        }\n                    } else {\n                        var temp4 = var4 + 0x09;\n                        storage[temp4] = msg.sender | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        var10 = 0x1814;\n                        var11 = var4;\n                        var12 = var5;\n                        func_1FF1(var11, var12);\n                        goto label_1814;\n                    }\n                } else {\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n                    memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x11;\n                    memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = 0x4e6f7420656e6f75676820457468657221000000000000000000000000000000;\n                    var temp6 = memory[0x40:0x60];\n                    revert(memory[temp6:temp6 + temp5 - temp6 + 0x64]);\n                }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x02605ea8) {\n                // Dispatch table entry for raisedICO()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = raisedICO();\n            \n            label_0266:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + temp9 - temp10 + 0x20];\n            } else if (var0 == 0x059f8b16) {\n                // Dispatch table entry for MULTIPLIER()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = MULTIPLIER();\n                goto label_0266;\n            } else if (var0 == 0x0900f010) {\n                // Dispatch table entry for upgrade(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                upgrade(var2);\n                stop();\n            } else if (var0 == 0x0bafd60e) {\n                // Dispatch table entry for nextVersion()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c3;\n                var2 = nextVersion();\n            \n            label_02C3:\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + temp11 - temp12 + 0x20];\n            } else if (var0 == 0x0d6c03fa) {\n                // Dispatch table entry for unclaimedReturns()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = unclaimedReturns();\n                goto label_0266;\n            } else if (var0 == 0x13af4035) {\n                // Dispatch table entry for setOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setOwner(var2);\n                stop();\n            } else if (var0 == 0x14a0450a) {\n                // Dispatch table entry for DEV_DIVISOR()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = DEV_DIVISOR();\n                goto label_0266;\n            } else if (var0 == 0x3314b952) {\n                // Dispatch table entry for TIME_PER_SHARE()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = TIME_PER_SHARE();\n                goto label_0266;\n            } else if (var0 == 0x377c93bf) {\n                // Dispatch table entry for ipfsHashType()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0354;\n                var2 = ipfsHashType();\n            \n            label_0354:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = 0x20;\n                var temp14 = var2;\n                memory[temp13 + 0x20:temp13 + 0x20 + 0x20] = memory[temp14:temp14 + 0x20];\n                var3 = temp13;\n                var4 = var3;\n                var5 = var4 + 0x40;\n                var7 = memory[temp14:temp14 + 0x20];\n                var6 = temp14 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_038E:\n                    var temp15 = var7;\n                    var5 = temp15 + var5;\n                    var6 = temp15 & 0x1f;\n                \n                    if (!var6) {\n                        var temp16 = memory[0x40:0x60];\n                        return memory[temp16:temp16 + var5 - temp16];\n                    } else {\n                        var temp17 = var6;\n                        var temp18 = var5 - temp17;\n                        memory[temp18:temp18 + 0x20] = ~(0x0100 ** (0x20 - temp17) - 0x01) & memory[temp18:temp18 + 0x20];\n                        var temp19 = memory[0x40:0x60];\n                        return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n                    }\n                } else {\n                label_037F:\n                    var temp20 = var11;\n                    memory[temp20 + var9:temp20 + var9 + 0x20] = memory[temp20 + var10:temp20 + var10 + 0x20];\n                    var11 = temp20 + 0x20;\n                \n                    if (var11 >= var8) { goto label_038E; }\n                    else { goto label_037F; }\n                }\n            } else if (var0 == 0x3bfc1b25) {\n                // Dispatch table entry for totalEarningsGenerated()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = totalEarningsGenerated();\n                goto label_0266;\n            } else if (var0 == 0x3d6859f2) {\n                // Dispatch table entry for investorInfo(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0402;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1, var2, var3 = investorInfo(var2, var3);\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = var2;\n                memory[temp21 + 0x40:temp21 + 0x40 + 0x20] = var3;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + temp21 - temp22 + 0x60];\n            } else if (var0 == 0x40c0ece3) {\n                // Dispatch table entry for updateMyReturns(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24];\n                updateMyReturns(var2);\n                stop();\n            } else if (var0 == 0x427f0b00) {\n                // Dispatch table entry for roundInfo(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0450;\n                var2 = msg.data[0x04:0x24];\n                var1, var2, var3, var4, var5, var6, var7, var8, var9, var10 = roundInfo(var2);\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                memory[temp23 + 0x20:temp23 + 0x20 + 0x20] = var2;\n                memory[temp23 + 0x40:temp23 + 0x40 + 0x20] = var3;\n                memory[temp23 + 0x60:temp23 + 0x60 + 0x20] = var4;\n                memory[temp23 + 0x80:temp23 + 0x80 + 0x20] = var5;\n                memory[temp23 + 0xa0:temp23 + 0xa0 + 0x20] = var6;\n                memory[temp23 + 0xc0:temp23 + 0xc0 + 0x20] = var7;\n                memory[temp23 + 0xe0:temp23 + 0xe0 + 0x20] = var8;\n                memory[temp23 + 0x0100:temp23 + 0x0100 + 0x20] = var9;\n                memory[temp23 + 0x0120:temp23 + 0x0120 + 0x20] = !!var10;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + temp23 - temp24 + 0x0140];\n            } else if (var0 == 0x43db053e) {\n                // Dispatch table entry for withdrawDevShare()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                withdrawDevShare();\n                stop();\n            } else if (var0 == 0x48afd1b3) {\n                // Dispatch table entry for hasReturns(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e5;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = hasReturns(var2, var3);\n            \n            label_04E5:\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = !!var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + temp25 - temp26 + 0x20];\n            } else if (var0 == 0x4c7ce18a) {\n                // Dispatch table entry for withdrawReturns()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                withdrawReturns();\n                stop();\n            } else if (var0 == 0x4c85b425) {\n                // Dispatch table entry for buyShares(address)\n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                goto label_086C;\n            } else if (var0 == 0x536942b6) {\n                // Dispatch table entry for finalizeAndRestart()\n                var1 = 0x024f;\n                var2 = 0x0f4a;\n            \n            label_154B:\n                var3 = 0x00;\n                var4 = 0x10;\n                var5 = storage[0x0f];\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var3 = var5 * 0x0b + keccak256(memory[0x00:0x20]);\n                var4 = 0x0aa0;\n                var5 = var3;\n                finalizeAndRestart(var5);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x574d6554) {\n                // Dispatch table entry for setIPFSHash(string,string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var temp27 = memory[0x40:0x60];\n                var temp28 = msg.data[0x04:0x24];\n                var temp29 = msg.data[temp28 + 0x04:temp28 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp27 + (temp29 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp27:temp27 + 0x20] = temp29;\n                var1 = 0x024f;\n                memory[temp27 + 0x20:temp27 + 0x20 + temp29] = msg.data[temp28 + 0x24:temp28 + 0x24 + temp29];\n                var temp30 = memory[0x40:0x60];\n                var temp31 = msg.data[0x24:0x44] + 0x04;\n                var temp32 = msg.data[temp31:temp31 + 0x20];\n                memory[0x40:0x60] = temp30 + (temp32 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp30:temp30 + 0x20] = temp32;\n                var2 = temp27;\n                memory[temp30 + 0x20:temp30 + 0x20 + temp32] = msg.data[temp31 + 0x20:temp31 + 0x20 + temp32];\n                var3 = temp30;\n                var4 = 0x0f6a;\n                var5 = msg.sender;\n                var6 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n                var4 = func_193A(var5, var6);\n            \n                if (!var4) { revert(memory[0x00:0x00]); }\n            \n                var temp33 = var2;\n                var4 = 0x0f88;\n                var5 = 0x03;\n                var7 = memory[temp33:temp33 + 0x20];\n                var6 = temp33 + 0x20;\n                var temp34 = var5;\n                var temp35 = storage[temp34];\n                memory[0x00:0x20] = temp34;\n                var8 = keccak256(memory[0x00:0x20]);\n                var temp36 = var6;\n                var6 = var8 + ((!(temp35 & 0x01) * 0x0100 - 0x01 & temp35) / 0x02 + 0x1f) / 0x20;\n                var9 = temp36;\n            \n                if (0x1f < var7) {\n                    var temp37 = var7;\n                    storage[var5] = temp37 + temp37 + 0x01;\n                \n                    if (!temp37) {\n                    label_2604:\n                        var temp38 = var6;\n                        var6 = 0x2610;\n                        var7 = temp38;\n                        var temp39 = var7;\n                        var7 = 0x265a;\n                        var temp40 = var8;\n                        var8 = temp39;\n                        var9 = temp40;\n                    \n                        if (var8 <= var9) {\n                            var7 = func_2610(var8, var9);\n                        \n                        label_265A:\n                            var6 = var7;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var7 = func_264F(var8, var9);\n                            goto label_265A;\n                        }\n                    } else {\n                        var temp41 = var7;\n                        var temp42 = var9;\n                        var7 = temp42;\n                        var9 = var7 + temp41;\n                    \n                        if (var9 <= var7) { goto label_2604; }\n                    \n                    label_25F2:\n                        var temp43 = var7;\n                        var temp44 = var8;\n                        storage[temp44] = memory[temp43:temp43 + 0x20];\n                        var7 = temp43 + 0x20;\n                        var8 = temp44 + 0x01;\n                        var9 = var9;\n                    \n                        if (var9 <= var7) { goto label_2604; }\n                        else { goto label_25F2; }\n                    }\n                } else {\n                    var temp45 = var7;\n                    storage[var5] = temp45 + temp45 | (memory[var9:var9 + 0x20] & ~0xff);\n                    goto label_2604;\n                }\n            } else if (var0 == 0x57b16811) {\n                // Dispatch table entry for totalsInfo()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d6;\n                var1, var2, var3, var4 = totalsInfo();\n            \n            label_05D6:\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var1;\n                memory[temp46 + 0x20:temp46 + 0x20 + 0x20] = var2;\n                memory[temp46 + 0x40:temp46 + 0x40 + 0x20] = var3;\n                memory[temp46 + 0x60:temp46 + 0x60 + 0x20] = var4;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + temp46 - temp47 + 0x80];\n            } else if (var0 == 0x5faf500f) {\n                // Dispatch table entry for STARTING_SHARE_PRICE()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = STARTING_SHARE_PRICE();\n                goto label_0266;\n            } else if (var0 == 0x619360df) {\n                // Dispatch table entry for jackpotSeed()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = jackpotSeed();\n                goto label_0266;\n            } else if (var0 == 0x61983c02) {\n                // Dispatch table entry for DIVIDENDS_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = DIVIDENDS_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0x68fab02a) {\n                // Dispatch table entry for SOFT_DEADLINE_DURATION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = SOFT_DEADLINE_DURATION();\n                goto label_0266;\n            } else if (var0 == 0x73aff5af) {\n                // Dispatch table entry for totalSharesSold()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = totalSharesSold();\n                goto label_0266;\n            } else if (var0 == 0x7a9e5e4b) {\n                // Dispatch table entry for setAuthority(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setAuthority(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c3;\n                var2 = owner();\n                goto label_02C3;\n            } else if (var0 == 0x98bf4c08) {\n                // Dispatch table entry for REFERRAL_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = REFERRAL_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0x9a7f027c) {\n                // Dispatch table entry for RETURNS_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = RETURNS_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0x9b079084) {\n                // Dispatch table entry for HARD_DEADLINE_DURATION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = HARD_DEADLINE_DURATION();\n                goto label_0266;\n            } else if (var0 == 0x9e93d0e4) {\n                // Dispatch table entry for reinvestReturns(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x0aa0;\n                var4 = var2;\n                var5 = 0x00;\n            \n            label_1587:\n                var6 = 0x00;\n                var7 = 0x10;\n                var8 = storage[0x0f];\n            \n                if (var8 >= storage[var7]) { assert(); }\n            \n                memory[0x00:0x20] = var7;\n                var temp48 = var8 * 0x0b + keccak256(memory[0x00:0x20]);\n                var6 = temp48;\n                var7 = 0x15b4;\n                var8 = msg.sender;\n                var9 = var6;\n                func_1A43(var8, var9);\n            \n            label_15B4:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n            \n                if (var4 <= storage[keccak256(memory[0x00:0x40])]) {\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x0e;\n                    var7 = 0x1635;\n                    var8 = storage[keccak256(memory[0x00:0x40])];\n                    var9 = var4;\n                    var7 = func_1B1E(var8, var9);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x0e;\n                    var temp49 = keccak256(memory[0x00:0x40]);\n                    storage[temp49] = var7;\n                    var8 = storage[temp49 + 0x01];\n                    var9 = var7;\n                    var7 = 0x1654;\n                    var7 = func_1FC8(var8, var9);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x0e;\n                    storage[keccak256(memory[0x00:0x40]) + 0x01] = var7;\n                    var8 = storage[0x0d];\n                    var7 = 0x1674;\n                    var9 = var4;\n                    var7 = func_1B1E(var8, var9);\n                    storage[0x0d] = var7;\n                    var7 = 0x1682;\n                    var8 = var6;\n                    var9 = var4;\n                    var10 = var5;\n                    goto label_170C;\n                } else {\n                    var temp50 = memory[0x40:0x60];\n                    memory[temp50:temp50 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp50 + 0x04:temp50 + 0x04 + 0x20] = 0x20;\n                    memory[temp50 + 0x24:temp50 + 0x24 + 0x20] = 0x1f;\n                    memory[temp50 + 0x44:temp50 + 0x44 + 0x20] = 0x43616e2774207370656e64207768617420796f7520646f6e2774206861766500;\n                    var temp51 = memory[0x40:0x60];\n                    revert(memory[temp51:temp51 + temp50 - temp51 + 0x64]);\n                }\n            } else if (var0 == 0xa2860050) {\n                // Dispatch table entry for estimateReturns(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0716;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1, var2 = estimateReturns(var2, var3);\n                var temp52 = memory[0x40:0x60];\n                memory[temp52:temp52 + 0x20] = var1;\n                memory[temp52 + 0x20:temp52 + 0x20 + 0x20] = var2;\n                var temp53 = memory[0x40:0x60];\n                return memory[temp53:temp53 + temp52 - temp53 + 0x40];\n            } else if (var0 == 0xa44be536) {\n                // Dispatch table entry for JACKPOT_SEED_FRACTION()\n            label_072F:\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = JACKPOT_SEED_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0xb017d08c) {\n                // Dispatch table entry for JACKPOT_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = JACKPOT_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0xbc2f45a7) {\n                // Dispatch table entry for AIRDROP_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = AIRDROP_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0xbd85948c) {\n                // Dispatch table entry for startNewRound()\n                var1 = 0x024f;\n                var2 = 0x00;\n                var3 = var2;\n            \n                if (storage[0x04] / 0x02 ** 0xa0 & 0xff) {\n                    var temp62 = memory[0x40:0x60];\n                    memory[temp62:temp62 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp62 + 0x04:temp62 + 0x04 + 0x20] = 0x20;\n                    memory[temp62 + 0x24:temp62 + 0x24 + 0x20] = 0x20;\n                    memory[temp62 + 0x44:temp62 + 0x44 + 0x20] = 0x5468697320636f6e747261637420686173206265656e20757067726164656421;\n                    var temp63 = memory[0x40:0x60];\n                    revert(memory[temp63:temp63 + temp62 - temp63 + 0x64]);\n                } else if (0x00 >= storage[0x10]) {\n                label_1467:\n                    var4 = storage[0x10];\n                    var5 = 0x1479;\n                    var6 = 0x10;\n                    var7 = var4 + 0x01;\n                    startNewRound(var6, var7);\n                    var temp54 = var4;\n                    var2 = temp54;\n                    var4 = 0x10;\n                    var5 = var2;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    storage[0x0f] = var2;\n                    var temp55 = var5 * 0x0b + keccak256(memory[0x00:0x20]);\n                    var temp56 = temp55 + 0x09;\n                    storage[temp56] = msg.sender | (storage[temp56] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    storage[temp55 + 0x07] = 0x038d7ea4c68000;\n                    var temp57 = block.timestamp;\n                    storage[temp55 + 0x05] = temp57 + 0x278d00;\n                    storage[temp55 + 0x06] = temp57 + 0x015180;\n                    storage[temp55 + 0x01] = storage[0x0a];\n                    storage[0x0a] = 0x00;\n                    var3 = temp55;\n                    var4 = 0x14fe;\n                    var5 = var3;\n                    var7 = 0x00;\n                    var6 = msg.value;\n                    goto label_170C;\n                } else {\n                    var4 = 0x10;\n                    var5 = storage[0x0f];\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                \n                    if (storage[var5 * 0x0b + keccak256(memory[0x00:0x20]) + 0x09] / 0x0100 ** 0x14 & 0xff) {\n                        var4 = block.timestamp;\n                        var5 = 0x10;\n                        var6 = storage[0x0f];\n                    \n                        if (var6 >= storage[var5]) { assert(); }\n                    \n                        memory[0x00:0x20] = var5;\n                    \n                        if (storage[var6 * 0x0b + keccak256(memory[0x00:0x20]) + 0x06] < var4) { goto label_1467; }\n                    \n                        var temp58 = memory[0x40:0x60];\n                        memory[temp58:temp58 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp58 + 0x04:temp58 + 0x04 + 0x20] = 0x20;\n                        memory[temp58 + 0x24:temp58 + 0x24 + 0x20] = 0x1c;\n                        memory[temp58 + 0x44:temp58 + 0x44 + 0x20] = 0x50726576696f757320726f756e64207374696c6c2072756e6e696e6700000000;\n                        var temp59 = memory[0x40:0x60];\n                        revert(memory[temp59:temp59 + temp58 - temp59 + 0x64]);\n                    } else {\n                        var temp60 = memory[0x40:0x60];\n                        memory[temp60:temp60 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp60 + 0x04:temp60 + 0x04 + 0x20] = 0x20;\n                        memory[temp60 + 0x24:temp60 + 0x24 + 0x20] = 0x1c;\n                        memory[temp60 + 0x44:temp60 + 0x44 + 0x20] = 0x50726576696f757320726f756e64206e6f742066696e616c697a656400000000;\n                        var temp61 = memory[0x40:0x60];\n                        revert(memory[temp61:temp61 + temp60 - temp61 + 0x64]);\n                    }\n                }\n            } else if (var0 == 0xbf7e214f) {\n                // Dispatch table entry for authority()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c3;\n                var2 = authority();\n                goto label_02C3;\n            } else if (var0 == 0xc24a9674) {\n                // Dispatch table entry for finalizeLastRound()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                goto label_154B;\n            } else if (var0 == 0xc28de2cd) {\n                // Dispatch table entry for upgraded()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e5;\n                var2 = upgraded();\n                goto label_04E5;\n            } else if (var0 == 0xc5c87db4) {\n                // Dispatch table entry for reinvestReturns(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                goto label_1587;\n            } else if (var0 == 0xc623674f) {\n                // Dispatch table entry for ipfsHash()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0354;\n                var2 = ipfsHash();\n                goto label_0354;\n            } else if (var0 == 0xc9e18986) {\n                // Dispatch table entry for totalDividendsPaid()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = totalDividendsPaid();\n                goto label_0266;\n            } else if (var0 == 0xcd9a1b63) {\n                // Dispatch table entry for devBalance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = devBalance();\n                goto label_0266;\n            } else if (var0 == 0xd287e9e4) {\n                // Dispatch table entry for totalJackpotsWon()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = totalJackpotsWon();\n                goto label_0266;\n            } else if (var0 == 0xf1b60408) { goto label_072F; }\n                // Dispatch table entry for DEV_FRACTION()\n            else if (var0 == 0xf76339dc) {\n                // Dispatch table entry for latestRoundID()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = latestRoundID();\n                goto label_0266;\n            } else if (var0 == 0xf958b9ca) {\n                // Dispatch table entry for PRICE_INCREASE_PERIOD()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = PRICE_INCREASE_PERIOD();\n                goto label_0266;\n            } else if (var0 == 0xfc0c546a) {\n                // Dispatch table entry for token()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c3;\n                var2 = token();\n                goto label_02C3;\n            } else { goto label_0245; }\n        }\n    }\n    \n    function raisedICO() returns (var r0) { return storage[0x0c]; }\n    \n    function MULTIPLIER() returns (var r0) { return 0x033b2e3c9fd0803ce8000000; }\n    \n    function upgrade(var arg0) {\n        var var0 = 0x092a;\n        var var1 = msg.sender;\n        var var2 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n        var0 = func_193A(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x10;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x496e76616c696420416464726573732100000000000000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        } else if (!(storage[0x04] / 0x02 ** 0xa0 & 0xff)) {\n            storage[0x04] = (storage[0x04] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n            storage[0x05] = (storage[0x05] & ~0xffffffffffffffffffffffffffffffffffffffff) | (arg0 & 0x02 ** 0xa0 - 0x01);\n            var0 = 0x10;\n            var1 = storage[0x0f];\n        \n            if (var1 >= storage[var0]) { assert(); }\n        \n            memory[0x00:0x20] = var0;\n        \n            if (!(storage[var1 * 0x0b + keccak256(memory[0x00:0x20]) + 0x09] / 0x0100 ** 0x14 & 0xff)) { return; }\n        \n            memory[0x00:0x20] = storage[0x05] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            storage[keccak256(memory[0x00:0x40])] = storage[0x0a];\n            storage[0x0a] = 0x00;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x11;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x416c726561647920757067726164656421000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        }\n    }\n    \n    function nextVersion() returns (var r0) { return storage[0x05] & 0x02 ** 0xa0 - 0x01; }\n    \n    function unclaimedReturns() returns (var r0) { return storage[0x0d]; }\n    \n    function setOwner(var arg0) {\n        var var0 = 0x0ace;\n        var var1 = msg.sender;\n        var var2 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n        var0 = func_193A(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = (temp0 & arg0) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[0x01] = temp1;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94, ((stack[-1] & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff)) & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function DEV_DIVISOR() returns (var r0) { return 0x14; }\n    \n    function TIME_PER_SHARE() returns (var r0) { return 0x012c; }\n    \n    function ipfsHashType() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x03;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0BC7:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0BBE; }\n        \n        label_0BAA:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0BAA; }\n        \n        label_0BBE:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0BC7;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0BC7;\n        }\n    }\n    \n    function totalEarningsGenerated() returns (var r0) { return storage[0x07]; }\n    \n    function investorInfo(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x10;\n        var var5 = arg1;\n    \n        if (var5 >= storage[var4]) { assert(); }\n    \n        memory[0x00:0x20] = var4;\n        var temp0 = keccak256(memory[0x00:0x20]);\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = var5 * 0x0b + temp0 + 0x0a;\n        var0 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n        var3 = var5 * 0x0b + temp0;\n        var4 = 0x0c24;\n        var5 = arg0;\n        var var6 = arg1;\n        var4, var5 = estimateReturns(var5, var6);\n        r0 = var0;\n        arg0 = var4;\n        arg1 = var5;\n        return r0, arg0, arg1;\n    }\n    \n    function updateMyReturns(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x10;\n        var var2 = arg0;\n    \n        if (var2 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var1;\n        var temp0 = var2 * 0x0b + keccak256(memory[0x00:0x20]);\n        var0 = temp0;\n        var1 = 0x08fa;\n        var2 = msg.sender;\n        var var3 = var0;\n        func_1A43(var2, var3);\n    \n    label_08FA:\n    }\n    \n    function roundInfo(var arg0) returns (var r0, var arg0, var r2, var r3, var r4, var r5, var r6, var r7, var r8, var r9) {\n        r2 = 0x00;\n        r3 = r2;\n        r4 = 0x00;\n        r5 = r4;\n        r6 = 0x00;\n        r7 = r6;\n        r8 = 0x00;\n        r9 = r8;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n        var var11 = 0x10;\n        var var12 = arg0;\n    \n        if (var12 >= storage[var11]) { assert(); }\n    \n        memory[0x00:0x20] = var11;\n        var temp0 = var12 * 0x0b + keccak256(memory[0x00:0x20]);\n        var10 = temp0;\n        r2 = storage[var10 + 0x09] & 0x02 ** 0xa0 - 0x01;\n        r3 = storage[var10 + 0x07];\n        r4 = storage[var10 + 0x01];\n        r5 = storage[var10 + 0x02];\n        r6 = storage[var10 + 0x03];\n        r7 = storage[var10];\n        var11 = 0x0cdf;\n        var12 = storage[var10];\n        var var13 = 0x0905438e60010000;\n        var11 = func_1AE3(var12, var13);\n        var temp1 = var10;\n        r9 = storage[temp1 + 0x09] / 0x0100 ** 0x14 & 0xff;\n        var temp2 = r7;\n        r7 = storage[temp1 + 0x05];\n        var temp3 = r5;\n        r5 = temp2;\n        var temp4 = r3;\n        r3 = temp3;\n        arg0 = temp4;\n        r8 = storage[temp1 + 0x06];\n        var temp5 = r6;\n        r6 = var11;\n        var temp6 = r4;\n        r4 = temp5;\n        var temp7 = r2;\n        r2 = temp6;\n        r0 = temp7;\n        return r0, arg0, r2, r3, r4, r5, r6, r7, r8, r9;\n    }\n    \n    function withdrawDevShare() {\n        var var0 = 0x00;\n        var var1 = 0x0d29;\n        var var2 = msg.sender;\n        var var3 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n        var1 = func_193A(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x0b];\n        storage[0x0b] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var0 = temp0;\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + 0x00]);\n        var1 = !temp2;\n    \n        if (!var1) { return; }\n    \n        var temp3 = returndata.length;\n        memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function hasReturns(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x10;\n        var var3 = arg1;\n    \n        if (var3 >= storage[var2]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n        var temp0 = keccak256(memory[0x00:0x20]);\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        var temp1 = var3 * 0x0b + temp0;\n        memory[0x20:0x40] = temp1 + 0x0a;\n        return storage[temp1 + 0x04] > storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function withdrawReturns() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x10;\n        var var4 = storage[0x0f];\n    \n        if (var4 >= storage[var3]) { assert(); }\n    \n        memory[0x00:0x20] = var3;\n        var0 = var4 * 0x0b + keccak256(memory[0x00:0x20]);\n    \n        if (storage[0x10] <= 0x01) {\n        label_0E2F:\n            var3 = 0x0e39;\n            var4 = msg.sender;\n            var var5 = var0;\n            func_1A43(var4, var5);\n        \n        label_0E39:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0e;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var2 > 0x00) {\n                var3 = 0x0ead;\n                var4 = storage[0x0d];\n                var5 = var2;\n                var3 = func_1B1E(var4, var5);\n                storage[0x0d] = var3;\n                var temp0 = msg.sender;\n                memory[0x00:0x20] = temp0;\n                memory[0x20:0x40] = 0x0e;\n                var temp1 = keccak256(memory[0x00:0x40]);\n                storage[temp1] = 0x00;\n                storage[temp1 + 0x01] = 0x00;\n                var temp2 = var0;\n                memory[0x20:0x40] = temp2 + 0x0a;\n                storage[keccak256(memory[0x00:0x40])] = storage[temp2 + 0x04];\n                var temp3 = memory[0x40:0x60];\n                var temp4 = var2;\n                var temp5;\n                temp5, memory[temp3:temp3 + 0x00] = address(temp0).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp3:temp3 + 0x00]);\n                var3 = !temp5;\n            \n                if (!var3) {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = var2;\n                    var temp7 = memory[0x40:0x60];\n                    log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x0f9fa24c1d9febdaf99508f4923a7b5add9bd70eab45c8fc614509df79894938, msg.sender]);\n                    return;\n                } else {\n                    var temp8 = returndata.length;\n                    memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x14;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x4e6f7468696e6720746f20776974686472617721000000000000000000000000;\n                var temp10 = memory[0x40:0x60];\n                revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n            }\n        } else {\n            var3 = 0x0dfc;\n            var4 = msg.sender;\n            var5 = storage[0x0f] - 0x01;\n            var3 = hasReturns(var4, var5);\n        \n            if (!var3) { goto label_0E2F; }\n        \n            var3 = 0x10;\n            var4 = storage[0x0f] - 0x01;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            var temp11 = var4 * 0x0b + keccak256(memory[0x00:0x20]);\n            var1 = temp11;\n            var3 = 0x0e2f;\n            var4 = msg.sender;\n            var5 = var1;\n            func_1A43(var4, var5);\n            goto label_0E2F;\n        }\n    }\n    \n    function totalsInfo() returns (var r0, var r1, var r2, var r3) {\n        r1 = 0x00;\n        r2 = r1;\n        r3 = 0x00;\n        var var3 = r3;\n        var var4 = 0x00;\n        var var5 = 0x10;\n        var var6 = storage[0x0f];\n    \n        if (var6 >= storage[var5]) { assert(); }\n    \n        memory[0x00:0x20] = var5;\n        var4 = var6 * 0x0b + keccak256(memory[0x00:0x20]);\n    \n        if (storage[var4 + 0x06] <= block.timestamp) {\n            r3 = storage[0x09];\n            r2 = storage[0x08];\n            r1 = storage[0x06];\n            r0 = storage[0x07];\n            return r0, r1, r2, r3;\n        } else {\n            var temp0 = var4;\n            r2 = storage[0x06] + storage[temp0 + 0x03];\n            var5 = 0x10f7;\n            var6 = storage[temp0];\n            var var7 = 0x0905438e60010000;\n            var5 = func_1AE3(var6, var7);\n            r1 = storage[0x07] + var5;\n            var5 = 0x1113;\n            var6 = storage[var4];\n            var7 = 0x013fbe85edc90000;\n            var5 = func_1AE3(var6, var7);\n            r3 = storage[0x08] + var5;\n            var temp1 = r3;\n            r3 = storage[0x09];\n            var temp2 = r2;\n            r2 = temp1;\n            var temp3 = r1;\n            r1 = temp2;\n            r0 = temp3;\n            return r0, r1, r2, r3;\n        }\n    }\n    \n    function STARTING_SHARE_PRICE() returns (var r0) { return 0x038d7ea4c68000; }\n    \n    function jackpotSeed() returns (var r0) { return storage[0x0a]; }\n    \n    function DIVIDENDS_FRACTION() returns (var r0) { return 0x013fbe85edc90000; }\n    \n    function SOFT_DEADLINE_DURATION() returns (var r0) { return 0x015180; }\n    \n    function totalSharesSold() returns (var r0) { return storage[0x06]; }\n    \n    function setAuthority(var arg0) {\n        var var0 = 0x117a;\n        var var1 = msg.sender;\n        var var2 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n        var0 = func_193A(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = (temp0 & arg0) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[0x00] = temp1;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4, ((stack[-1] & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff)) & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function owner() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function REFERRAL_FRACTION() returns (var r0) { return 0x2386f26fc10000; }\n    \n    function RETURNS_FRACTION() returns (var r0) { return 0x0905438e60010000; }\n    \n    function HARD_DEADLINE_DURATION() returns (var r0) { return 0x278d00; }\n    \n    function estimateReturns(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x10;\n        var var6 = arg1;\n    \n        if (var6 >= storage[var5]) { assert(); }\n    \n        memory[0x00:0x20] = var5;\n        var2 = var6 * 0x0b + keccak256(memory[0x00:0x20]);\n    \n        if (storage[0x10] <= 0x01) {\n        label_128C:\n            var5 = 0x1296;\n            var6 = arg0;\n            var var7 = var2;\n            var5 = func_1B2E(var6, var7);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            arg0 = storage[temp0 + 0x01];\n            r0 = var3 + var5 + storage[temp0];\n            return r0, arg0;\n        } else {\n            var5 = 0x1258;\n            var6 = arg0;\n            var7 = arg1 - 0x01;\n            var5 = hasReturns(var6, var7);\n        \n            if (!var5) { goto label_128C; }\n        \n            var5 = 0x10;\n            var6 = arg1 + ~0x00;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp1 = var6 * 0x0b + keccak256(memory[0x00:0x20]);\n            var4 = temp1;\n            var5 = 0x1289;\n            var6 = arg0;\n            var7 = var4;\n            var5 = func_1B2E(var6, var7);\n            var3 = var5;\n            goto label_128C;\n        }\n    }\n    \n    function JACKPOT_SEED_FRACTION() returns (var r0) {\n        r0 = 0x14;\n        var var1 = 0x0de0b6b3a7640000;\n        return var1 / r0;\n    }\n    \n    function JACKPOT_FRACTION() returns (var r0) { return 0x0214e8348c4f0000; }\n    \n    function AIRDROP_FRACTION() returns (var r0) {\n        r0 = 0x64;\n        var var1 = 0x0de0b6b3a7640000;\n        return var1 / r0;\n    }\n    \n    function authority() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function upgraded() returns (var r0) { return storage[0x04] / 0x02 ** 0xa0 & 0xff; }\n    \n    function ipfsHash() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x02;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0BC7:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0BBE; }\n        \n        label_0BAA:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0BAA; }\n        \n        label_0BBE:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0BC7;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0BC7;\n        }\n    }\n    \n    function totalDividendsPaid() returns (var r0) { return storage[0x08]; }\n    \n    function devBalance() returns (var r0) { return storage[0x0b]; }\n    \n    function totalJackpotsWon() returns (var r0) { return storage[0x09]; }\n    \n    function latestRoundID() returns (var r0) { return storage[0x0f]; }\n    \n    function PRICE_INCREASE_PERIOD() returns (var r0) { return 0x0e10; }\n    \n    function token() returns (var r0) { return storage[0x04] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_18E9(var arg0, var arg1) returns (var r0) {\n        r0 = func_1FE1(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_193A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (address(this) != arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[0x01] & temp0 == temp0 & arg0) {\n                var0 = 0x01;\n                goto label_1A3D;\n            } else if (storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = 0xb700961300000000000000000000000000000000000000000000000000000000;\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = temp2 & arg0;\n                memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = address(this);\n                memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = arg1 & ~(0x02 ** 0xe0 - 0x01);\n                var var1 = storage[0x00] & temp2;\n                var var2 = 0xb7009613;\n                var var3 = temp1 + 0x64;\n                var var4 = 0x20;\n                var var5 = memory[0x40:0x60];\n                var var6 = temp1 - var5 + 0x64;\n                var var7 = var5;\n                var var8 = 0x00;\n                var var9 = var1;\n                var var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n                var temp3;\n                temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp3;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[var1:var1 + 0x20];\n                \n                label_1A3D:\n                    return var0;\n                } else {\n                    var temp4 = returndata.length;\n                    memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var0 = 0x00;\n                goto label_1A3D;\n            }\n        } else {\n            var0 = 0x01;\n            goto label_1A3D;\n        }\n    }\n    \n    function func_1A43(var arg0, var arg1) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = arg1 + 0x0a;\n    \n        if (!storage[keccak256(memory[var0:var0 + 0x40]) + 0x01]) { return; }\n    \n        var var1 = 0x1a76;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_1B2E(var2, var3);\n        var0 = var1;\n    \n        if (var0 <= 0x00) {\n        label_1ABE:\n            var temp0 = arg1;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp0 + 0x0a;\n            storage[keccak256(memory[0x00:0x40])] = storage[temp0 + 0x04];\n            return;\n        } else {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var1 = 0x1aa4;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var3 = var0;\n            var1 = func_1FE1(var2, var3);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            goto label_1ABE;\n        }\n    }\n    \n    function func_1AE3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0de0b6b3a7640000;\n        var var2 = 0x1b0d;\n        var var3 = 0x1afb;\n        var var4 = arg0;\n        var var5 = arg1;\n        var3 = func_24C7(var4, var5);\n        var2 = func_1AFB(var3);\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function func_1AFB(var arg0) returns (var r0) {\n        var var0 = 0x0de0b6b3a7640000 / 0x02;\n        r0 = func_1FE1(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1B1E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 - arg1;\n    \n        if (var0 <= temp0) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1B2E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = arg1 + 0x0a;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (storage[keccak256(memory[var2:var2 + 0x40]) + 0x01]) {\n            var temp0 = arg1;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp0 + 0x0a;\n            var var3 = 0x1b89;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var var4 = storage[temp0 + 0x04];\n            var3 = func_1B1E(var4, var5);\n            var1 = var3;\n            var2 = 0x00;\n        \n            if (!var1) {\n            label_1BD9:\n                var0 = var2;\n            \n            label_1BDD:\n                return var0;\n            } else {\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = arg1 + 0x0a;\n                var3 = 0x033b2e3c9fd0803ce8000000;\n                var4 = 0x1bcc;\n                var5 = var1;\n                var var6 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                var4 = func_24C7(var5, var6);\n            \n                if (!var3) { assert(); }\n            \n                var2 = var4 / var3;\n                goto label_1BD9;\n            }\n        } else {\n            var0 = 0x00;\n            goto label_1BDD;\n        }\n    }\n    \n    function finalizeAndRestart(var arg0) {\n        var var0 = 0x00;\n    \n        if (storage[arg0 + 0x09] / 0x02 ** 0xa0 & 0xff) {\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n            memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x12;\n            memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x416c72656164792066696e616c697a6564210000000000000000000000000000;\n            var temp21 = memory[0x40:0x60];\n            revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n        } else if (block.timestamp <= storage[arg0 + 0x06]) {\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = 0x20;\n            memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = 0x14;\n            memory[temp18 + 0x44:temp18 + 0x44 + 0x20] = 0x526f756e64207374696c6c2072756e6e696e6721000000000000000000000000;\n            var temp19 = memory[0x40:0x60];\n            revert(memory[temp19:temp19 + temp18 - temp19 + 0x64]);\n        } else if (storage[0x10] != 0x01) {\n        label_1D91:\n            var temp0 = arg0;\n            memory[0x00:0x20] = storage[temp0 + 0x09] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var var1 = 0x1dbd;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = storage[temp0 + 0x01];\n            var1 = func_1FE1(var2, var3);\n            var temp1 = arg0;\n            memory[0x00:0x20] = storage[temp1 + 0x09] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x1dec;\n            var3 = storage[temp1 + 0x01];\n            var2 = storage[0x0d];\n            var1 = func_1FE1(var2, var3);\n            storage[0x0d] = var1;\n            var temp2 = arg0;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = storage[temp2 + 0x09] & 0x02 ** 0xa0 - 0x01;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = storage[temp2 + 0x01];\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + temp3 - temp4 + 0x40], [0xbf737c87eff4ef74213cb228c9e25ca0c4519947f5fcc4a41b221ba93d76a425]);\n            storage[0x09] = storage[temp2 + 0x01] + storage[0x09];\n            var1 = 0x1e6c;\n            var2 = storage[0x0a];\n            var3 = 0x18e9;\n            var var4 = storage[temp2];\n            var var5 = 0x0de0b6b3a7640000 / 0x14;\n            var3 = func_1AE3(var4, var5);\n            var1 = func_18E9(var2, var3);\n            var temp5 = var1;\n            storage[0x0a] = temp5;\n            var1 = 0x1e80;\n            var3 = storage[arg0 + 0x02];\n            var2 = temp5;\n            var1 = func_1FE1(var2, var3);\n            storage[0x0a] = var1;\n        \n            if (storage[0x04] / 0x02 ** 0xa0 & 0xff) {\n                memory[0x00:0x20] = storage[0x05] & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0e;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x0a];\n                storage[0x0a] = 0x00;\n            \n                if (storage[0x10] != 0x01) { goto label_1EDF; }\n                else { goto label_1EC6; }\n            } else if (storage[0x10] != 0x01) {\n            label_1EDF:\n                var1 = 0x1ef3;\n                var2 = storage[arg0];\n                var3 = 0x013fbe85edc90000;\n                var1 = func_1AE3(var2, var3);\n                var temp6 = var1;\n                var0 = temp6;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = 0x36ef1abb00000000000000000000000000000000000000000000000000000000;\n                var1 = storage[0x04] & 0x02 ** 0xa0 - 0x01;\n                var2 = 0x36ef1abb;\n                var3 = var0;\n                var4 = temp7 + 0x04;\n                var5 = 0x00;\n                var var6 = memory[0x40:0x60];\n                var var7 = temp7 - var6 + 0x04;\n                var var8 = var6;\n                var var9 = var3;\n                var var10 = var1;\n                var var11 = !address(var10).code.length;\n            \n                if (var11) { revert(memory[0x00:0x00]); }\n            \n            label_1F54:\n                var temp8;\n                temp8, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n                var5 = !temp8;\n            \n                if (!var5) {\n                    storage[0x08] = var0 + storage[0x08];\n                    var temp9 = arg0;\n                    storage[0x06] = storage[temp9 + 0x03] + storage[0x06];\n                    var1 = 0x1f97;\n                    var2 = storage[temp9];\n                    var3 = 0x0905438e60010000;\n                    var1 = func_1AE3(var2, var3);\n                    storage[0x07] = var1 + storage[0x07];\n                    var temp10 = arg0 + 0x09;\n                    storage[temp10] = (storage[temp10] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n                    return;\n                } else {\n                    var temp11 = returndata.length;\n                    memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n            label_1EC6:\n                var1 = 0x1ed8;\n                var2 = storage[arg0];\n                var3 = 0x470de4df820000;\n                var1 = func_1AE3(var2, var3);\n                var0 = var1;\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = 0x36ef1abb00000000000000000000000000000000000000000000000000000000;\n                var1 = storage[0x04] & 0x02 ** 0xa0 - 0x01;\n                var2 = 0x36ef1abb;\n                var3 = var0;\n                var4 = temp12 + 0x04;\n                var5 = 0x00;\n                var6 = memory[0x40:0x60];\n                var7 = temp12 - var6 + 0x04;\n                var8 = var6;\n                var9 = var3;\n                var10 = var1;\n                var11 = !address(var10).code.length;\n            \n                if (!var11) { goto label_1F54; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x7d64bcb400000000000000000000000000000000000000000000000000000000;\n            var1 = storage[0x04] & 0x02 ** 0xa0 - 0x01;\n            var5 = memory[0x40:0x60];\n            var2 = 0x7d64bcb4;\n            var3 = temp13 + 0x04;\n            var4 = 0x20;\n            var6 = temp13 - var5 + 0x04;\n            var7 = var5;\n            var8 = 0x00;\n            var9 = var1;\n            var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp14;\n            temp14, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp14;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (memory[var1:var1 + 0x20]) { goto label_1D91; }\n            \n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n                memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x1f;\n                memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x436f756c646e27742066696e697368206d696e74696e6720746f6b656e732100;\n                var temp16 = memory[0x40:0x60];\n                revert(memory[temp16:temp16 + temp15 - temp16 + 0x64]);\n            } else {\n                var temp17 = returndata.length;\n                memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        }\n    }\n    \n    function func_1E66(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1AE3(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1FC8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 <= arg1) { return arg0; }\n    \n        var var1 = arg1;\n        return var1;\n    }\n    \n    function func_1FE1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1FF1(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (tx.origin != msg.sender) {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n            memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x39;\n            memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = 0x4f4e4c5920484f4f4d414e5320286f722073637269707473207468617420646f;\n            memory[temp12 + 0x64:temp12 + 0x64 + 0x20] = 0x6e27742075736520736d61727420636f6e747261637473292100000000000000;\n            var temp13 = memory[0x40:0x60];\n            revert(memory[temp13:temp13 + temp12 - temp13 + 0x84]);\n        } else if (arg1 <= 0x016345785d8a0000) {\n        label_21A6:\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = block.blockHash(block.number + ~0x00);\n            memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = block.timestamp;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0 - temp1 + 0x40;\n            memory[0x40:0x60] = temp0 + 0x60;\n            var var2 = temp1;\n            var var3 = temp0 + 0x60;\n            var var4 = var3;\n            var var6 = memory[var2:var2 + 0x20];\n            var var5 = var2 + 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n        \n            if (var7 < 0x20) {\n            label_20D8:\n                var temp2 = var8;\n                var temp3 = 0x0100 ** (0x20 - var7) + ~0x00;\n                memory[temp2:temp2 + 0x20] = (memory[temp2:temp2 + 0x20] & temp3) | (memory[var9:var9 + 0x20] & ~temp3);\n                var temp4 = memory[0x40:0x60];\n                var0 = keccak256(memory[temp4:temp4 + (var4 + var6) - temp4]);\n                var2 = 0xc8;\n                var3 = var0;\n            \n                if (var3 % var2) { goto label_21A6; }\n            \n                var temp5 = arg0 + 0x02;\n                var temp6 = storage[temp5] / 0x02;\n                var1 = temp6;\n                storage[temp5] = var1;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var2 = 0x2142;\n                var4 = var1;\n                var2 = func_1FE1(var3, var4);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var2 = 0x215f;\n                var3 = storage[0x0d];\n                var4 = var1;\n                var2 = func_1FE1(var3, var4);\n                storage[0x0d] = var2;\n                var temp7 = var1;\n                storage[0x09] = temp7 + storage[0x09];\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = msg.sender;\n                memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp7;\n                var temp9 = memory[0x40:0x60];\n                log(memory[temp9:temp9 + temp8 - temp9 + 0x40], [0xf5d01889f04f77ed9ff391da32496e63ce53f4b0d0c246651254895d04bcd99a]);\n                goto label_21A6;\n            } else {\n            label_20C2:\n                var temp10 = var9;\n                var temp11 = var8;\n                memory[temp11:temp11 + 0x20] = memory[temp10:temp10 + 0x20];\n                var7 = var7 + ~0x1f;\n                var8 = temp11 + 0x20;\n                var9 = temp10 + 0x20;\n            \n                if (var7 < 0x20) { goto label_20D8; }\n                else { goto label_20C2; }\n            }\n        }\n    }\n    \n    function func_21AC(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (storage[0x10] == 0x01) {\n            var1 = 0x01cdda4faccd0000;\n        \n            if (!(arg2 & 0x02 ** 0xa0 - 0x01)) { goto label_2286; }\n            else { goto label_21DF; }\n        } else if (!(arg2 & 0x02 ** 0xa0 - 0x01)) {\n        label_2286:\n            var var6 = 0x229a;\n            var var7 = arg1;\n            var var8 = 0x0905438e60010000 - var1;\n            var6 = func_1AE3(var7, var8);\n            var0 = var6;\n            var6 = 0x22b1;\n            var7 = arg1;\n            var8 = 0x64;\n            var var9 = 0x0de0b6b3a7640000;\n            var6 = func_1E66(var7, var8, var9);\n        \n        label_22B1:\n            var3 = var6;\n            var6 = 0x22c5;\n            var7 = arg1;\n            var8 = 0x0214e8348c4f0000;\n            var6 = func_1AE3(var7, var8);\n            var4 = var6;\n        \n            if (storage[0x10] != 0x01) {\n                var5 = arg1 / 0x14;\n            \n                if (storage[arg0 + 0x03]) {\n                label_2310:\n                    var6 = 0x231a;\n                    var7 = arg0;\n                    var8 = var0;\n                    func_24EF(var7, var8);\n                \n                label_231A:\n                    var6 = 0x2328;\n                    var7 = storage[arg0 + 0x02];\n                    var8 = var3;\n                    var6 = func_1FE1(var7, var8);\n                    var temp0 = arg0;\n                    storage[temp0 + 0x02] = var6;\n                    var7 = storage[temp0 + 0x01];\n                    var6 = 0x233c;\n                    var8 = var4;\n                    var6 = func_1FE1(var7, var8);\n                    storage[arg0 + 0x01] = var6;\n                    var6 = 0x234e;\n                    var7 = storage[0x0b];\n                    var8 = var5;\n                    var6 = func_1FE1(var7, var8);\n                    storage[0x0b] = var6;\n                    return;\n                } else {\n                label_22F9:\n                    var6 = 0x2306;\n                    var7 = storage[arg0 + 0x01];\n                    var8 = var0;\n                    var6 = func_1FE1(var7, var8);\n                    storage[arg0 + 0x01] = var6;\n                    goto label_231A;\n                }\n            } else {\n                var5 = arg1 / 0x04;\n                storage[0x0c] = var5 + storage[0x0c];\n            \n                if (storage[arg0 + 0x03]) { goto label_2310; }\n                else { goto label_22F9; }\n            }\n        } else {\n        label_21DF:\n            var6 = 0x21f3;\n            var7 = arg1;\n            var8 = 0x08e1bc9bf0400000 - var1;\n            var6 = func_1AE3(var7, var8);\n            var0 = var6;\n            var6 = 0x2206;\n            var7 = arg1;\n            var8 = 0x2386f26fc10000;\n            var6 = func_1AE3(var7, var8);\n            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var temp1 = var6;\n            var2 = temp1;\n            var6 = 0x222c;\n            var7 = storage[keccak256(memory[0x00:0x40])];\n            var8 = var2;\n            var6 = func_1FE1(var7, var8);\n            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = var6;\n            var7 = storage[temp2 + 0x01];\n            var6 = 0x2255;\n            var8 = var2;\n            var6 = func_1FE1(var7, var8);\n            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            storage[keccak256(memory[0x00:0x40]) + 0x01] = var6;\n            var6 = 0x227e;\n            var7 = storage[0x0d];\n            var8 = var2;\n            var6 = func_1FE1(var7, var8);\n            storage[0x0d] = var6;\n            var6 = 0x22b1;\n            var7 = arg1;\n            var8 = 0x64;\n            var9 = 0x0de0b6b3a7640000;\n            var6 = func_1E66(var7, var8, var9);\n            goto label_22B1;\n        }\n    }\n    \n    function func_24C7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (var1) {\n        label_24E4:\n        \n            if (var1) { return var0; }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n            var temp0 = arg1;\n            var0 = arg0 * temp0;\n            var1 = arg0;\n            var var2 = temp0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2 == var1;\n            goto label_24E4;\n        }\n    }\n    \n    function func_24EF(var arg0, var arg1) {\n        var var0 = 0x24fb;\n        var var1 = storage[0x0d];\n        var var2 = arg1;\n        var0 = func_1FE1(var1, var2);\n        storage[0x0d] = var0;\n    \n        if (storage[arg0 + 0x03]) {\n            var0 = 0x256d;\n            var temp0 = arg0;\n            var1 = storage[temp0 + 0x04];\n            var2 = storage[temp0 + 0x03];\n            var var3 = 0x2564;\n            var var4 = arg1;\n            var var5 = 0x033b2e3c9fd0803ce8000000;\n            var3 = func_24C7(var4, var5);\n            var0 = func_2564(var1, var2, var3);\n            storage[arg0 + 0x04] = var0;\n            return;\n        } else {\n            var0 = 0x2517;\n            var1 = arg1;\n            var2 = storage[arg0 + 0x07];\n            var3 = 0x00;\n            var4 = var2;\n            var5 = 0x1b0d;\n            var var6 = 0x258e;\n            var var7 = var1;\n            var var8 = 0x0de0b6b3a7640000;\n            var6 = func_24C7(var7, var8);\n            var5 = func_258E(var2, var6);\n        \n            if (!var4) { assert(); }\n        \n            var0 = var5 / var4;\n            // Error: Could not resolve jump destination!\n        }\n    }\n    \n    function func_2564(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        arg1 = arg2 / arg1;\n        r0 = func_1FE1(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_258E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x02;\n        var var1 = arg0;\n        var0 = var1 / var0;\n        r0 = func_1FE1(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2610(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function startNewRound(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_1682:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0 * 0x0b;\n            var0 = 0x1682;\n            var var1 = temp4;\n            var var2 = temp3 + arg1 * 0x0b;\n            var0 = func_265D(var1, var2);\n            goto label_1682;\n        }\n    }\n    \n    function func_264F(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        storage[temp0] = 0x00;\n        arg1 = temp0 + 0x01;\n    \n        if (arg0 <= arg1) {\n            r0 = func_2610(arg0, arg1);\n            // Error: Could not resolve method call return address!\n        } else {\n            r0 = func_264F(arg0, arg1);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_265D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x265a;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_2610(arg1, var0); }\n    \n    label_266C:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        storage[temp2 + 0x01] = 0x00;\n        storage[temp2 + 0x02] = 0x00;\n        storage[temp2 + 0x03] = 0x00;\n        storage[temp2 + 0x04] = 0x00;\n        storage[temp2 + 0x05] = 0x00;\n        storage[temp2 + 0x06] = 0x00;\n        storage[temp2 + 0x07] = 0x00;\n        storage[temp2 + 0x08] = 0x00;\n        var temp3 = temp2 + 0x09;\n        storage[temp3] = storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffffff;\n        var0 = temp2 + 0x0b;\n    \n        if (arg1 > var0) { goto label_266C; }\n    \n        arg0 = func_2610(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0245:\n            var var0 = 0x024f;\n            var var1 = 0x00;\n        \n        label_086C:\n            var var2 = 0x00;\n        \n            if (var2 >= storage[0x10]) {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x0f;\n                memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4e6f742079657420737461727465640000000000000000000000000000000000;\n                var temp1 = memory[0x40:0x60];\n                revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n            } else {\n                var var3 = 0x10;\n                var var4 = storage[0x0f];\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var2 = var4 * 0x0b + keccak256(memory[0x00:0x20]);\n                var3 = 0x08a5;\n                var4 = var2;\n                var var5 = msg.value;\n                var var6 = var1;\n            \n            label_170C:\n                var var7 = 0x00;\n                var var8 = var7;\n                var var9 = 0x00;\n            \n                if (storage[var4 + 0x06] < block.timestamp) {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                    memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x0f;\n                    memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x416674657220646561646c696e65210000000000000000000000000000000000;\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + temp7 - temp8 + 0x64]);\n                } else if (var5 >= storage[var4 + 0x07] / 0x0a) {\n                    var var10 = 0x17db;\n                    var var11 = storage[var4];\n                    var var12 = var5;\n                    var10 = func_1FE1(var11, var12);\n                    var temp2 = var4;\n                    storage[temp2] = var10;\n                \n                    if (var5 < storage[temp2 + 0x07]) {\n                        var10 = 0x1814;\n                        var11 = var4;\n                        var12 = var5;\n                        func_1FF1(var11, var12);\n                    \n                    label_1814:\n                        var10 = 0x181f;\n                        var11 = var4;\n                        var12 = var5;\n                        var var13 = var6;\n                        func_21AC(var11, var12, var13);\n                        var10 = 0x1829;\n                        var11 = msg.sender;\n                        var12 = var4;\n                        func_1A43(var11, var12);\n                        var10 = 0x1834;\n                        var11 = var4;\n                        var12 = msg.sender;\n                        var13 = var5;\n                        var var14 = 0x00;\n                        memory[var14:var14 + 0x20] = var12 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = var11 + 0x0a;\n                        var var15 = var14;\n                    \n                        if (storage[keccak256(memory[var15:var15 + 0x40])]) {\n                            var var16 = 0x23ae;\n                            var var17 = var13;\n                            var var18 = storage[var11 + 0x07];\n                        \n                        label_2576:\n                            var var19 = 0x00;\n                            var var20 = var18;\n                            var var21 = 0x1b0d;\n                            var var22 = 0x258e;\n                            var var23 = var17;\n                            var var24 = 0x0de0b6b3a7640000;\n                            var22 = func_24C7(var23, var24);\n                            var21 = func_258E(var18, var22);\n                        \n                            if (!var20) { assert(); }\n                        \n                            var16 = var21 / var20;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var temp3 = var11;\n                            memory[0x00:0x20] = var12 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = temp3 + 0x0a;\n                            storage[keccak256(memory[0x00:0x40])] = storage[temp3 + 0x04];\n                            var16 = 0x23ae;\n                            var17 = var13;\n                            var18 = storage[temp3 + 0x07];\n                            goto label_2576;\n                        }\n                    } else {\n                        var temp4 = var4 + 0x09;\n                        storage[temp4] = msg.sender | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        var10 = 0x1814;\n                        var11 = var4;\n                        var12 = var5;\n                        func_1FF1(var11, var12);\n                        goto label_1814;\n                    }\n                } else {\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n                    memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x11;\n                    memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = 0x4e6f7420656e6f75676820457468657221000000000000000000000000000000;\n                    var temp6 = memory[0x40:0x60];\n                    revert(memory[temp6:temp6 + temp5 - temp6 + 0x64]);\n                }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x02605ea8) {\n                // Dispatch table entry for raisedICO()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = raisedICO();\n            \n            label_0266:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + temp9 - temp10 + 0x20];\n            } else if (var0 == 0x059f8b16) {\n                // Dispatch table entry for MULTIPLIER()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = MULTIPLIER();\n                goto label_0266;\n            } else if (var0 == 0x0900f010) {\n                // Dispatch table entry for upgrade(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                upgrade(var2);\n                stop();\n            } else if (var0 == 0x0bafd60e) {\n                // Dispatch table entry for nextVersion()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c3;\n                var2 = nextVersion();\n            \n            label_02C3:\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + temp11 - temp12 + 0x20];\n            } else if (var0 == 0x0d6c03fa) {\n                // Dispatch table entry for unclaimedReturns()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = unclaimedReturns();\n                goto label_0266;\n            } else if (var0 == 0x13af4035) {\n                // Dispatch table entry for setOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setOwner(var2);\n                stop();\n            } else if (var0 == 0x14a0450a) {\n                // Dispatch table entry for DEV_DIVISOR()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = DEV_DIVISOR();\n                goto label_0266;\n            } else if (var0 == 0x3314b952) {\n                // Dispatch table entry for TIME_PER_SHARE()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = TIME_PER_SHARE();\n                goto label_0266;\n            } else if (var0 == 0x377c93bf) {\n                // Dispatch table entry for ipfsHashType()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0354;\n                var2 = ipfsHashType();\n            \n            label_0354:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = 0x20;\n                var temp14 = var2;\n                memory[temp13 + 0x20:temp13 + 0x20 + 0x20] = memory[temp14:temp14 + 0x20];\n                var3 = temp13;\n                var4 = var3;\n                var5 = var4 + 0x40;\n                var7 = memory[temp14:temp14 + 0x20];\n                var6 = temp14 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_038E:\n                    var temp15 = var7;\n                    var5 = temp15 + var5;\n                    var6 = temp15 & 0x1f;\n                \n                    if (!var6) {\n                        var temp16 = memory[0x40:0x60];\n                        return memory[temp16:temp16 + var5 - temp16];\n                    } else {\n                        var temp17 = var6;\n                        var temp18 = var5 - temp17;\n                        memory[temp18:temp18 + 0x20] = ~(0x0100 ** (0x20 - temp17) - 0x01) & memory[temp18:temp18 + 0x20];\n                        var temp19 = memory[0x40:0x60];\n                        return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n                    }\n                } else {\n                label_037F:\n                    var temp20 = var11;\n                    memory[temp20 + var9:temp20 + var9 + 0x20] = memory[temp20 + var10:temp20 + var10 + 0x20];\n                    var11 = temp20 + 0x20;\n                \n                    if (var11 >= var8) { goto label_038E; }\n                    else { goto label_037F; }\n                }\n            } else if (var0 == 0x3bfc1b25) {\n                // Dispatch table entry for totalEarningsGenerated()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = totalEarningsGenerated();\n                goto label_0266;\n            } else if (var0 == 0x3d6859f2) {\n                // Dispatch table entry for investorInfo(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0402;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1, var2, var3 = investorInfo(var2, var3);\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = var2;\n                memory[temp21 + 0x40:temp21 + 0x40 + 0x20] = var3;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + temp21 - temp22 + 0x60];\n            } else if (var0 == 0x40c0ece3) {\n                // Dispatch table entry for updateMyReturns(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24];\n                updateMyReturns(var2);\n                stop();\n            } else if (var0 == 0x427f0b00) {\n                // Dispatch table entry for roundInfo(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0450;\n                var2 = msg.data[0x04:0x24];\n                var1, var2, var3, var4, var5, var6, var7, var8, var9, var10 = roundInfo(var2);\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                memory[temp23 + 0x20:temp23 + 0x20 + 0x20] = var2;\n                memory[temp23 + 0x40:temp23 + 0x40 + 0x20] = var3;\n                memory[temp23 + 0x60:temp23 + 0x60 + 0x20] = var4;\n                memory[temp23 + 0x80:temp23 + 0x80 + 0x20] = var5;\n                memory[temp23 + 0xa0:temp23 + 0xa0 + 0x20] = var6;\n                memory[temp23 + 0xc0:temp23 + 0xc0 + 0x20] = var7;\n                memory[temp23 + 0xe0:temp23 + 0xe0 + 0x20] = var8;\n                memory[temp23 + 0x0100:temp23 + 0x0100 + 0x20] = var9;\n                memory[temp23 + 0x0120:temp23 + 0x0120 + 0x20] = !!var10;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + temp23 - temp24 + 0x0140];\n            } else if (var0 == 0x43db053e) {\n                // Dispatch table entry for withdrawDevShare()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                withdrawDevShare();\n                stop();\n            } else if (var0 == 0x48afd1b3) {\n                // Dispatch table entry for hasReturns(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e5;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = hasReturns(var2, var3);\n            \n            label_04E5:\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = !!var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + temp25 - temp26 + 0x20];\n            } else if (var0 == 0x4c7ce18a) {\n                // Dispatch table entry for withdrawReturns()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                withdrawReturns();\n                stop();\n            } else if (var0 == 0x4c85b425) {\n                // Dispatch table entry for buyShares(address)\n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                goto label_086C;\n            } else if (var0 == 0x536942b6) {\n                // Dispatch table entry for finalizeAndRestart()\n                var1 = 0x024f;\n                var2 = 0x0f4a;\n            \n            label_154B:\n                var3 = 0x00;\n                var4 = 0x10;\n                var5 = storage[0x0f];\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var3 = var5 * 0x0b + keccak256(memory[0x00:0x20]);\n                var4 = 0x0aa0;\n                var5 = var3;\n                finalizeAndRestart(var5);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x574d6554) {\n                // Dispatch table entry for setIPFSHash(string,string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var temp27 = memory[0x40:0x60];\n                var temp28 = msg.data[0x04:0x24];\n                var temp29 = msg.data[temp28 + 0x04:temp28 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp27 + (temp29 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp27:temp27 + 0x20] = temp29;\n                var1 = 0x024f;\n                memory[temp27 + 0x20:temp27 + 0x20 + temp29] = msg.data[temp28 + 0x24:temp28 + 0x24 + temp29];\n                var temp30 = memory[0x40:0x60];\n                var temp31 = msg.data[0x24:0x44] + 0x04;\n                var temp32 = msg.data[temp31:temp31 + 0x20];\n                memory[0x40:0x60] = temp30 + (temp32 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp30:temp30 + 0x20] = temp32;\n                var2 = temp27;\n                memory[temp30 + 0x20:temp30 + 0x20 + temp32] = msg.data[temp31 + 0x20:temp31 + 0x20 + temp32];\n                var3 = temp30;\n                var4 = 0x0f6a;\n                var5 = msg.sender;\n                var6 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n                var4 = func_193A(var5, var6);\n            \n                if (!var4) { revert(memory[0x00:0x00]); }\n            \n                var temp33 = var2;\n                var4 = 0x0f88;\n                var5 = 0x03;\n                var7 = memory[temp33:temp33 + 0x20];\n                var6 = temp33 + 0x20;\n                var temp34 = var5;\n                var temp35 = storage[temp34];\n                memory[0x00:0x20] = temp34;\n                var8 = keccak256(memory[0x00:0x20]);\n                var temp36 = var6;\n                var6 = var8 + ((!(temp35 & 0x01) * 0x0100 - 0x01 & temp35) / 0x02 + 0x1f) / 0x20;\n                var9 = temp36;\n            \n                if (0x1f < var7) {\n                    var temp37 = var7;\n                    storage[var5] = temp37 + temp37 + 0x01;\n                \n                    if (!temp37) {\n                    label_2604:\n                        var temp38 = var6;\n                        var6 = 0x2610;\n                        var7 = temp38;\n                        var temp39 = var7;\n                        var7 = 0x265a;\n                        var temp40 = var8;\n                        var8 = temp39;\n                        var9 = temp40;\n                    \n                        if (var8 <= var9) {\n                            var7 = func_2610(var8, var9);\n                        \n                        label_265A:\n                            var6 = var7;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var7 = func_264F(var8, var9);\n                            goto label_265A;\n                        }\n                    } else {\n                        var temp41 = var7;\n                        var temp42 = var9;\n                        var7 = temp42;\n                        var9 = var7 + temp41;\n                    \n                        if (var9 <= var7) { goto label_2604; }\n                    \n                    label_25F2:\n                        var temp43 = var7;\n                        var temp44 = var8;\n                        storage[temp44] = memory[temp43:temp43 + 0x20];\n                        var7 = temp43 + 0x20;\n                        var8 = temp44 + 0x01;\n                        var9 = var9;\n                    \n                        if (var9 <= var7) { goto label_2604; }\n                        else { goto label_25F2; }\n                    }\n                } else {\n                    var temp45 = var7;\n                    storage[var5] = temp45 + temp45 | (memory[var9:var9 + 0x20] & ~0xff);\n                    goto label_2604;\n                }\n            } else if (var0 == 0x57b16811) {\n                // Dispatch table entry for totalsInfo()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d6;\n                var1, var2, var3, var4 = totalsInfo();\n            \n            label_05D6:\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var1;\n                memory[temp46 + 0x20:temp46 + 0x20 + 0x20] = var2;\n                memory[temp46 + 0x40:temp46 + 0x40 + 0x20] = var3;\n                memory[temp46 + 0x60:temp46 + 0x60 + 0x20] = var4;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + temp46 - temp47 + 0x80];\n            } else if (var0 == 0x5faf500f) {\n                // Dispatch table entry for STARTING_SHARE_PRICE()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = STARTING_SHARE_PRICE();\n                goto label_0266;\n            } else if (var0 == 0x619360df) {\n                // Dispatch table entry for jackpotSeed()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = jackpotSeed();\n                goto label_0266;\n            } else if (var0 == 0x61983c02) {\n                // Dispatch table entry for DIVIDENDS_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = DIVIDENDS_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0x68fab02a) {\n                // Dispatch table entry for SOFT_DEADLINE_DURATION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = SOFT_DEADLINE_DURATION();\n                goto label_0266;\n            } else if (var0 == 0x73aff5af) {\n                // Dispatch table entry for totalSharesSold()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = totalSharesSold();\n                goto label_0266;\n            } else if (var0 == 0x7a9e5e4b) {\n                // Dispatch table entry for setAuthority(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setAuthority(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c3;\n                var2 = owner();\n                goto label_02C3;\n            } else if (var0 == 0x98bf4c08) {\n                // Dispatch table entry for REFERRAL_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = REFERRAL_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0x9a7f027c) {\n                // Dispatch table entry for RETURNS_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = RETURNS_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0x9b079084) {\n                // Dispatch table entry for HARD_DEADLINE_DURATION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = HARD_DEADLINE_DURATION();\n                goto label_0266;\n            } else if (var0 == 0x9e93d0e4) {\n                // Dispatch table entry for reinvestReturns(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x0aa0;\n                var4 = var2;\n                var5 = 0x00;\n            \n            label_1587:\n                var6 = 0x00;\n                var7 = 0x10;\n                var8 = storage[0x0f];\n            \n                if (var8 >= storage[var7]) { assert(); }\n            \n                memory[0x00:0x20] = var7;\n                var temp48 = var8 * 0x0b + keccak256(memory[0x00:0x20]);\n                var6 = temp48;\n                var7 = 0x15b4;\n                var8 = msg.sender;\n                var9 = var6;\n                func_1A43(var8, var9);\n            \n            label_15B4:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n            \n                if (var4 <= storage[keccak256(memory[0x00:0x40])]) {\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x0e;\n                    var7 = 0x1635;\n                    var8 = storage[keccak256(memory[0x00:0x40])];\n                    var9 = var4;\n                    var7 = func_1B1E(var8, var9);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x0e;\n                    var temp49 = keccak256(memory[0x00:0x40]);\n                    storage[temp49] = var7;\n                    var8 = storage[temp49 + 0x01];\n                    var9 = var7;\n                    var7 = 0x1654;\n                    var7 = func_1FC8(var8, var9);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x0e;\n                    storage[keccak256(memory[0x00:0x40]) + 0x01] = var7;\n                    var8 = storage[0x0d];\n                    var7 = 0x1674;\n                    var9 = var4;\n                    var7 = func_1B1E(var8, var9);\n                    storage[0x0d] = var7;\n                    var7 = 0x1682;\n                    var8 = var6;\n                    var9 = var4;\n                    var10 = var5;\n                    goto label_170C;\n                } else {\n                    var temp50 = memory[0x40:0x60];\n                    memory[temp50:temp50 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp50 + 0x04:temp50 + 0x04 + 0x20] = 0x20;\n                    memory[temp50 + 0x24:temp50 + 0x24 + 0x20] = 0x1f;\n                    memory[temp50 + 0x44:temp50 + 0x44 + 0x20] = 0x43616e2774207370656e64207768617420796f7520646f6e2774206861766500;\n                    var temp51 = memory[0x40:0x60];\n                    revert(memory[temp51:temp51 + temp50 - temp51 + 0x64]);\n                }\n            } else if (var0 == 0xa2860050) {\n                // Dispatch table entry for estimateReturns(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0716;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1, var2 = estimateReturns(var2, var3);\n                var temp52 = memory[0x40:0x60];\n                memory[temp52:temp52 + 0x20] = var1;\n                memory[temp52 + 0x20:temp52 + 0x20 + 0x20] = var2;\n                var temp53 = memory[0x40:0x60];\n                return memory[temp53:temp53 + temp52 - temp53 + 0x40];\n            } else if (var0 == 0xa44be536) {\n                // Dispatch table entry for JACKPOT_SEED_FRACTION()\n            label_072F:\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = JACKPOT_SEED_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0xb017d08c) {\n                // Dispatch table entry for JACKPOT_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = JACKPOT_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0xbc2f45a7) {\n                // Dispatch table entry for AIRDROP_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = AIRDROP_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0xbd85948c) {\n                // Dispatch table entry for startNewRound()\n                var1 = 0x024f;\n                var2 = 0x00;\n                var3 = var2;\n            \n                if (storage[0x04] / 0x02 ** 0xa0 & 0xff) {\n                    var temp62 = memory[0x40:0x60];\n                    memory[temp62:temp62 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp62 + 0x04:temp62 + 0x04 + 0x20] = 0x20;\n                    memory[temp62 + 0x24:temp62 + 0x24 + 0x20] = 0x20;\n                    memory[temp62 + 0x44:temp62 + 0x44 + 0x20] = 0x5468697320636f6e747261637420686173206265656e20757067726164656421;\n                    var temp63 = memory[0x40:0x60];\n                    revert(memory[temp63:temp63 + temp62 - temp63 + 0x64]);\n                } else if (0x00 >= storage[0x10]) {\n                label_1467:\n                    var4 = storage[0x10];\n                    var5 = 0x1479;\n                    var6 = 0x10;\n                    var7 = var4 + 0x01;\n                    startNewRound(var6, var7);\n                    var temp54 = var4;\n                    var2 = temp54;\n                    var4 = 0x10;\n                    var5 = var2;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    storage[0x0f] = var2;\n                    var temp55 = var5 * 0x0b + keccak256(memory[0x00:0x20]);\n                    var temp56 = temp55 + 0x09;\n                    storage[temp56] = msg.sender | (storage[temp56] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    storage[temp55 + 0x07] = 0x038d7ea4c68000;\n                    var temp57 = block.timestamp;\n                    storage[temp55 + 0x05] = temp57 + 0x278d00;\n                    storage[temp55 + 0x06] = temp57 + 0x015180;\n                    storage[temp55 + 0x01] = storage[0x0a];\n                    storage[0x0a] = 0x00;\n                    var3 = temp55;\n                    var4 = 0x14fe;\n                    var5 = var3;\n                    var7 = 0x00;\n                    var6 = msg.value;\n                    goto label_170C;\n                } else {\n                    var4 = 0x10;\n                    var5 = storage[0x0f];\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                \n                    if (storage[var5 * 0x0b + keccak256(memory[0x00:0x20]) + 0x09] / 0x0100 ** 0x14 & 0xff) {\n                        var4 = block.timestamp;\n                        var5 = 0x10;\n                        var6 = storage[0x0f];\n                    \n                        if (var6 >= storage[var5]) { assert(); }\n                    \n                        memory[0x00:0x20] = var5;\n                    \n                        if (storage[var6 * 0x0b + keccak256(memory[0x00:0x20]) + 0x06] < var4) { goto label_1467; }\n                    \n                        var temp58 = memory[0x40:0x60];\n                        memory[temp58:temp58 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp58 + 0x04:temp58 + 0x04 + 0x20] = 0x20;\n                        memory[temp58 + 0x24:temp58 + 0x24 + 0x20] = 0x1c;\n                        memory[temp58 + 0x44:temp58 + 0x44 + 0x20] = 0x50726576696f757320726f756e64207374696c6c2072756e6e696e6700000000;\n                        var temp59 = memory[0x40:0x60];\n                        revert(memory[temp59:temp59 + temp58 - temp59 + 0x64]);\n                    } else {\n                        var temp60 = memory[0x40:0x60];\n                        memory[temp60:temp60 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp60 + 0x04:temp60 + 0x04 + 0x20] = 0x20;\n                        memory[temp60 + 0x24:temp60 + 0x24 + 0x20] = 0x1c;\n                        memory[temp60 + 0x44:temp60 + 0x44 + 0x20] = 0x50726576696f757320726f756e64206e6f742066696e616c697a656400000000;\n                        var temp61 = memory[0x40:0x60];\n                        revert(memory[temp61:temp61 + temp60 - temp61 + 0x64]);\n                    }\n                }\n            } else if (var0 == 0xbf7e214f) {\n                // Dispatch table entry for authority()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c3;\n                var2 = authority();\n                goto label_02C3;\n            } else if (var0 == 0xc24a9674) {\n                // Dispatch table entry for finalizeLastRound()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                goto label_154B;\n            } else if (var0 == 0xc28de2cd) {\n                // Dispatch table entry for upgraded()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e5;\n                var2 = upgraded();\n                goto label_04E5;\n            } else if (var0 == 0xc5c87db4) {\n                // Dispatch table entry for reinvestReturns(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                goto label_1587;\n            } else if (var0 == 0xc623674f) {\n                // Dispatch table entry for ipfsHash()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0354;\n                var2 = ipfsHash();\n                goto label_0354;\n            } else if (var0 == 0xc9e18986) {\n                // Dispatch table entry for totalDividendsPaid()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = totalDividendsPaid();\n                goto label_0266;\n            } else if (var0 == 0xcd9a1b63) {\n                // Dispatch table entry for devBalance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = devBalance();\n                goto label_0266;\n            } else if (var0 == 0xd287e9e4) {\n                // Dispatch table entry for totalJackpotsWon()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = totalJackpotsWon();\n                goto label_0266;\n            } else if (var0 == 0xf1b60408) { goto label_072F; }\n                // Dispatch table entry for DEV_FRACTION()\n            else if (var0 == 0xf76339dc) {\n                // Dispatch table entry for latestRoundID()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = latestRoundID();\n                goto label_0266;\n            } else if (var0 == 0xf958b9ca) {\n                // Dispatch table entry for PRICE_INCREASE_PERIOD()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = PRICE_INCREASE_PERIOD();\n                goto label_0266;\n            } else if (var0 == 0xfc0c546a) {\n                // Dispatch table entry for token()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c3;\n                var2 = token();\n                goto label_02C3;\n            } else { goto label_0245; }\n        }\n    }\n    \n    function raisedICO() returns (var r0) { return storage[0x0c]; }\n    \n    function MULTIPLIER() returns (var r0) { return 0x033b2e3c9fd0803ce8000000; }\n    \n    function upgrade(var arg0) {\n        var var0 = 0x092a;\n        var var1 = msg.sender;\n        var var2 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n        var0 = func_193A(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x10;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x496e76616c696420416464726573732100000000000000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        } else if (!(storage[0x04] / 0x02 ** 0xa0 & 0xff)) {\n            storage[0x04] = (storage[0x04] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n            storage[0x05] = (storage[0x05] & ~0xffffffffffffffffffffffffffffffffffffffff) | (arg0 & 0x02 ** 0xa0 - 0x01);\n            var0 = 0x10;\n            var1 = storage[0x0f];\n        \n            if (var1 >= storage[var0]) { assert(); }\n        \n            memory[0x00:0x20] = var0;\n        \n            if (!(storage[var1 * 0x0b + keccak256(memory[0x00:0x20]) + 0x09] / 0x0100 ** 0x14 & 0xff)) { return; }\n        \n            memory[0x00:0x20] = storage[0x05] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            storage[keccak256(memory[0x00:0x40])] = storage[0x0a];\n            storage[0x0a] = 0x00;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x11;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x416c726561647920757067726164656421000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        }\n    }\n    \n    function nextVersion() returns (var r0) { return storage[0x05] & 0x02 ** 0xa0 - 0x01; }\n    \n    function unclaimedReturns() returns (var r0) { return storage[0x0d]; }\n    \n    function setOwner(var arg0) {\n        var var0 = 0x0ace;\n        var var1 = msg.sender;\n        var var2 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n        var0 = func_193A(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = (temp0 & arg0) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[0x01] = temp1;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94, ((stack[-1] & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff)) & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function DEV_DIVISOR() returns (var r0) { return 0x14; }\n    \n    function TIME_PER_SHARE() returns (var r0) { return 0x012c; }\n    \n    function ipfsHashType() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x03;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0BC7:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0BBE; }\n        \n        label_0BAA:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0BAA; }\n        \n        label_0BBE:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0BC7;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0BC7;\n        }\n    }\n    \n    function totalEarningsGenerated() returns (var r0) { return storage[0x07]; }\n    \n    function investorInfo(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x10;\n        var var5 = arg1;\n    \n        if (var5 >= storage[var4]) { assert(); }\n    \n        memory[0x00:0x20] = var4;\n        var temp0 = keccak256(memory[0x00:0x20]);\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = var5 * 0x0b + temp0 + 0x0a;\n        var0 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n        var3 = var5 * 0x0b + temp0;\n        var4 = 0x0c24;\n        var5 = arg0;\n        var var6 = arg1;\n        var4, var5 = estimateReturns(var5, var6);\n        r0 = var0;\n        arg0 = var4;\n        arg1 = var5;\n        return r0, arg0, arg1;\n    }\n    \n    function updateMyReturns(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x10;\n        var var2 = arg0;\n    \n        if (var2 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var1;\n        var temp0 = var2 * 0x0b + keccak256(memory[0x00:0x20]);\n        var0 = temp0;\n        var1 = 0x08fa;\n        var2 = msg.sender;\n        var var3 = var0;\n        func_1A43(var2, var3);\n    \n    label_08FA:\n    }\n    \n    function roundInfo(var arg0) returns (var r0, var arg0, var r2, var r3, var r4, var r5, var r6, var r7, var r8, var r9) {\n        r2 = 0x00;\n        r3 = r2;\n        r4 = 0x00;\n        r5 = r4;\n        r6 = 0x00;\n        r7 = r6;\n        r8 = 0x00;\n        r9 = r8;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n        var var11 = 0x10;\n        var var12 = arg0;\n    \n        if (var12 >= storage[var11]) { assert(); }\n    \n        memory[0x00:0x20] = var11;\n        var temp0 = var12 * 0x0b + keccak256(memory[0x00:0x20]);\n        var10 = temp0;\n        r2 = storage[var10 + 0x09] & 0x02 ** 0xa0 - 0x01;\n        r3 = storage[var10 + 0x07];\n        r4 = storage[var10 + 0x01];\n        r5 = storage[var10 + 0x02];\n        r6 = storage[var10 + 0x03];\n        r7 = storage[var10];\n        var11 = 0x0cdf;\n        var12 = storage[var10];\n        var var13 = 0x0905438e60010000;\n        var11 = func_1AE3(var12, var13);\n        var temp1 = var10;\n        r9 = storage[temp1 + 0x09] / 0x0100 ** 0x14 & 0xff;\n        var temp2 = r7;\n        r7 = storage[temp1 + 0x05];\n        var temp3 = r5;\n        r5 = temp2;\n        var temp4 = r3;\n        r3 = temp3;\n        arg0 = temp4;\n        r8 = storage[temp1 + 0x06];\n        var temp5 = r6;\n        r6 = var11;\n        var temp6 = r4;\n        r4 = temp5;\n        var temp7 = r2;\n        r2 = temp6;\n        r0 = temp7;\n        return r0, arg0, r2, r3, r4, r5, r6, r7, r8, r9;\n    }\n    \n    function withdrawDevShare() {\n        var var0 = 0x00;\n        var var1 = 0x0d29;\n        var var2 = msg.sender;\n        var var3 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n        var1 = func_193A(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x0b];\n        storage[0x0b] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var0 = temp0;\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + 0x00]);\n        var1 = !temp2;\n    \n        if (!var1) { return; }\n    \n        var temp3 = returndata.length;\n        memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function hasReturns(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x10;\n        var var3 = arg1;\n    \n        if (var3 >= storage[var2]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n        var temp0 = keccak256(memory[0x00:0x20]);\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        var temp1 = var3 * 0x0b + temp0;\n        memory[0x20:0x40] = temp1 + 0x0a;\n        return storage[temp1 + 0x04] > storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function withdrawReturns() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x10;\n        var var4 = storage[0x0f];\n    \n        if (var4 >= storage[var3]) { assert(); }\n    \n        memory[0x00:0x20] = var3;\n        var0 = var4 * 0x0b + keccak256(memory[0x00:0x20]);\n    \n        if (storage[0x10] <= 0x01) {\n        label_0E2F:\n            var3 = 0x0e39;\n            var4 = msg.sender;\n            var var5 = var0;\n            func_1A43(var4, var5);\n        \n        label_0E39:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0e;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var2 > 0x00) {\n                var3 = 0x0ead;\n                var4 = storage[0x0d];\n                var5 = var2;\n                var3 = func_1B1E(var4, var5);\n                storage[0x0d] = var3;\n                var temp0 = msg.sender;\n                memory[0x00:0x20] = temp0;\n                memory[0x20:0x40] = 0x0e;\n                var temp1 = keccak256(memory[0x00:0x40]);\n                storage[temp1] = 0x00;\n                storage[temp1 + 0x01] = 0x00;\n                var temp2 = var0;\n                memory[0x20:0x40] = temp2 + 0x0a;\n                storage[keccak256(memory[0x00:0x40])] = storage[temp2 + 0x04];\n                var temp3 = memory[0x40:0x60];\n                var temp4 = var2;\n                var temp5;\n                temp5, memory[temp3:temp3 + 0x00] = address(temp0).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp3:temp3 + 0x00]);\n                var3 = !temp5;\n            \n                if (!var3) {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = var2;\n                    var temp7 = memory[0x40:0x60];\n                    log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x0f9fa24c1d9febdaf99508f4923a7b5add9bd70eab45c8fc614509df79894938, msg.sender]);\n                    return;\n                } else {\n                    var temp8 = returndata.length;\n                    memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x14;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x4e6f7468696e6720746f20776974686472617721000000000000000000000000;\n                var temp10 = memory[0x40:0x60];\n                revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n            }\n        } else {\n            var3 = 0x0dfc;\n            var4 = msg.sender;\n            var5 = storage[0x0f] - 0x01;\n            var3 = hasReturns(var4, var5);\n        \n            if (!var3) { goto label_0E2F; }\n        \n            var3 = 0x10;\n            var4 = storage[0x0f] - 0x01;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            var temp11 = var4 * 0x0b + keccak256(memory[0x00:0x20]);\n            var1 = temp11;\n            var3 = 0x0e2f;\n            var4 = msg.sender;\n            var5 = var1;\n            func_1A43(var4, var5);\n            goto label_0E2F;\n        }\n    }\n    \n    function totalsInfo() returns (var r0, var r1, var r2, var r3) {\n        r1 = 0x00;\n        r2 = r1;\n        r3 = 0x00;\n        var var3 = r3;\n        var var4 = 0x00;\n        var var5 = 0x10;\n        var var6 = storage[0x0f];\n    \n        if (var6 >= storage[var5]) { assert(); }\n    \n        memory[0x00:0x20] = var5;\n        var4 = var6 * 0x0b + keccak256(memory[0x00:0x20]);\n    \n        if (storage[var4 + 0x06] <= block.timestamp) {\n            r3 = storage[0x09];\n            r2 = storage[0x08];\n            r1 = storage[0x06];\n            r0 = storage[0x07];\n            return r0, r1, r2, r3;\n        } else {\n            var temp0 = var4;\n            r2 = storage[0x06] + storage[temp0 + 0x03];\n            var5 = 0x10f7;\n            var6 = storage[temp0];\n            var var7 = 0x0905438e60010000;\n            var5 = func_1AE3(var6, var7);\n            r1 = storage[0x07] + var5;\n            var5 = 0x1113;\n            var6 = storage[var4];\n            var7 = 0x013fbe85edc90000;\n            var5 = func_1AE3(var6, var7);\n            r3 = storage[0x08] + var5;\n            var temp1 = r3;\n            r3 = storage[0x09];\n            var temp2 = r2;\n            r2 = temp1;\n            var temp3 = r1;\n            r1 = temp2;\n            r0 = temp3;\n            return r0, r1, r2, r3;\n        }\n    }\n    \n    function STARTING_SHARE_PRICE() returns (var r0) { return 0x038d7ea4c68000; }\n    \n    function jackpotSeed() returns (var r0) { return storage[0x0a]; }\n    \n    function DIVIDENDS_FRACTION() returns (var r0) { return 0x013fbe85edc90000; }\n    \n    function SOFT_DEADLINE_DURATION() returns (var r0) { return 0x015180; }\n    \n    function totalSharesSold() returns (var r0) { return storage[0x06]; }\n    \n    function setAuthority(var arg0) {\n        var var0 = 0x117a;\n        var var1 = msg.sender;\n        var var2 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n        var0 = func_193A(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = (temp0 & arg0) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[0x00] = temp1;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4, ((stack[-1] & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff)) & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function owner() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function REFERRAL_FRACTION() returns (var r0) { return 0x2386f26fc10000; }\n    \n    function RETURNS_FRACTION() returns (var r0) { return 0x0905438e60010000; }\n    \n    function HARD_DEADLINE_DURATION() returns (var r0) { return 0x278d00; }\n    \n    function estimateReturns(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x10;\n        var var6 = arg1;\n    \n        if (var6 >= storage[var5]) { assert(); }\n    \n        memory[0x00:0x20] = var5;\n        var2 = var6 * 0x0b + keccak256(memory[0x00:0x20]);\n    \n        if (storage[0x10] <= 0x01) {\n        label_128C:\n            var5 = 0x1296;\n            var6 = arg0;\n            var var7 = var2;\n            var5 = func_1B2E(var6, var7);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            arg0 = storage[temp0 + 0x01];\n            r0 = var3 + var5 + storage[temp0];\n            return r0, arg0;\n        } else {\n            var5 = 0x1258;\n            var6 = arg0;\n            var7 = arg1 - 0x01;\n            var5 = hasReturns(var6, var7);\n        \n            if (!var5) { goto label_128C; }\n        \n            var5 = 0x10;\n            var6 = arg1 + ~0x00;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp1 = var6 * 0x0b + keccak256(memory[0x00:0x20]);\n            var4 = temp1;\n            var5 = 0x1289;\n            var6 = arg0;\n            var7 = var4;\n            var5 = func_1B2E(var6, var7);\n            var3 = var5;\n            goto label_128C;\n        }\n    }\n    \n    function JACKPOT_SEED_FRACTION() returns (var r0) {\n        r0 = 0x14;\n        var var1 = 0x0de0b6b3a7640000;\n        return var1 / r0;\n    }\n    \n    function JACKPOT_FRACTION() returns (var r0) { return 0x0214e8348c4f0000; }\n    \n    function AIRDROP_FRACTION() returns (var r0) {\n        r0 = 0x64;\n        var var1 = 0x0de0b6b3a7640000;\n        return var1 / r0;\n    }\n    \n    function authority() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function upgraded() returns (var r0) { return storage[0x04] / 0x02 ** 0xa0 & 0xff; }\n    \n    function ipfsHash() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x02;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0BC7:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0BBE; }\n        \n        label_0BAA:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0BAA; }\n        \n        label_0BBE:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0BC7;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0BC7;\n        }\n    }\n    \n    function totalDividendsPaid() returns (var r0) { return storage[0x08]; }\n    \n    function devBalance() returns (var r0) { return storage[0x0b]; }\n    \n    function totalJackpotsWon() returns (var r0) { return storage[0x09]; }\n    \n    function latestRoundID() returns (var r0) { return storage[0x0f]; }\n    \n    function PRICE_INCREASE_PERIOD() returns (var r0) { return 0x0e10; }\n    \n    function token() returns (var r0) { return storage[0x04] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_18E9(var arg0, var arg1) returns (var r0) {\n        r0 = func_1FE1(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_193A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (address(this) != arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[0x01] & temp0 == temp0 & arg0) {\n                var0 = 0x01;\n                goto label_1A3D;\n            } else if (storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = 0xb700961300000000000000000000000000000000000000000000000000000000;\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = temp2 & arg0;\n                memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = address(this);\n                memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = arg1 & ~(0x02 ** 0xe0 - 0x01);\n                var var1 = storage[0x00] & temp2;\n                var var2 = 0xb7009613;\n                var var3 = temp1 + 0x64;\n                var var4 = 0x20;\n                var var5 = memory[0x40:0x60];\n                var var6 = temp1 - var5 + 0x64;\n                var var7 = var5;\n                var var8 = 0x00;\n                var var9 = var1;\n                var var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n                var temp3;\n                temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp3;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[var1:var1 + 0x20];\n                \n                label_1A3D:\n                    return var0;\n                } else {\n                    var temp4 = returndata.length;\n                    memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var0 = 0x00;\n                goto label_1A3D;\n            }\n        } else {\n            var0 = 0x01;\n            goto label_1A3D;\n        }\n    }\n    \n    function func_1A43(var arg0, var arg1) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = arg1 + 0x0a;\n    \n        if (!storage[keccak256(memory[var0:var0 + 0x40]) + 0x01]) { return; }\n    \n        var var1 = 0x1a76;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_1B2E(var2, var3);\n        var0 = var1;\n    \n        if (var0 <= 0x00) {\n        label_1ABE:\n            var temp0 = arg1;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp0 + 0x0a;\n            storage[keccak256(memory[0x00:0x40])] = storage[temp0 + 0x04];\n            return;\n        } else {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var1 = 0x1aa4;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var3 = var0;\n            var1 = func_1FE1(var2, var3);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            goto label_1ABE;\n        }\n    }\n    \n    function func_1AE3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0de0b6b3a7640000;\n        var var2 = 0x1b0d;\n        var var3 = 0x1afb;\n        var var4 = arg0;\n        var var5 = arg1;\n        var3 = func_24C7(var4, var5);\n        var2 = func_1AFB(var3);\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function func_1AFB(var arg0) returns (var r0) {\n        var var0 = 0x0de0b6b3a7640000 / 0x02;\n        r0 = func_1FE1(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1B1E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 - arg1;\n    \n        if (var0 <= temp0) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1B2E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = arg1 + 0x0a;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (storage[keccak256(memory[var2:var2 + 0x40]) + 0x01]) {\n            var temp0 = arg1;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp0 + 0x0a;\n            var var3 = 0x1b89;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var var4 = storage[temp0 + 0x04];\n            var3 = func_1B1E(var4, var5);\n            var1 = var3;\n            var2 = 0x00;\n        \n            if (!var1) {\n            label_1BD9:\n                var0 = var2;\n            \n            label_1BDD:\n                return var0;\n            } else {\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = arg1 + 0x0a;\n                var3 = 0x033b2e3c9fd0803ce8000000;\n                var4 = 0x1bcc;\n                var5 = var1;\n                var var6 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                var4 = func_24C7(var5, var6);\n            \n                if (!var3) { assert(); }\n            \n                var2 = var4 / var3;\n                goto label_1BD9;\n            }\n        } else {\n            var0 = 0x00;\n            goto label_1BDD;\n        }\n    }\n    \n    function finalizeAndRestart(var arg0) {\n        var var0 = 0x00;\n    \n        if (storage[arg0 + 0x09] / 0x02 ** 0xa0 & 0xff) {\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n            memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x12;\n            memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x416c72656164792066696e616c697a6564210000000000000000000000000000;\n            var temp21 = memory[0x40:0x60];\n            revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n        } else if (block.timestamp <= storage[arg0 + 0x06]) {\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = 0x20;\n            memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = 0x14;\n            memory[temp18 + 0x44:temp18 + 0x44 + 0x20] = 0x526f756e64207374696c6c2072756e6e696e6721000000000000000000000000;\n            var temp19 = memory[0x40:0x60];\n            revert(memory[temp19:temp19 + temp18 - temp19 + 0x64]);\n        } else if (storage[0x10] != 0x01) {\n        label_1D91:\n            var temp0 = arg0;\n            memory[0x00:0x20] = storage[temp0 + 0x09] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var var1 = 0x1dbd;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = storage[temp0 + 0x01];\n            var1 = func_1FE1(var2, var3);\n            var temp1 = arg0;\n            memory[0x00:0x20] = storage[temp1 + 0x09] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x1dec;\n            var3 = storage[temp1 + 0x01];\n            var2 = storage[0x0d];\n            var1 = func_1FE1(var2, var3);\n            storage[0x0d] = var1;\n            var temp2 = arg0;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = storage[temp2 + 0x09] & 0x02 ** 0xa0 - 0x01;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = storage[temp2 + 0x01];\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + temp3 - temp4 + 0x40], [0xbf737c87eff4ef74213cb228c9e25ca0c4519947f5fcc4a41b221ba93d76a425]);\n            storage[0x09] = storage[temp2 + 0x01] + storage[0x09];\n            var1 = 0x1e6c;\n            var2 = storage[0x0a];\n            var3 = 0x18e9;\n            var var4 = storage[temp2];\n            var var5 = 0x0de0b6b3a7640000 / 0x14;\n            var3 = func_1AE3(var4, var5);\n            var1 = func_18E9(var2, var3);\n            var temp5 = var1;\n            storage[0x0a] = temp5;\n            var1 = 0x1e80;\n            var3 = storage[arg0 + 0x02];\n            var2 = temp5;\n            var1 = func_1FE1(var2, var3);\n            storage[0x0a] = var1;\n        \n            if (storage[0x04] / 0x02 ** 0xa0 & 0xff) {\n                memory[0x00:0x20] = storage[0x05] & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0e;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x0a];\n                storage[0x0a] = 0x00;\n            \n                if (storage[0x10] != 0x01) { goto label_1EDF; }\n                else { goto label_1EC6; }\n            } else if (storage[0x10] != 0x01) {\n            label_1EDF:\n                var1 = 0x1ef3;\n                var2 = storage[arg0];\n                var3 = 0x013fbe85edc90000;\n                var1 = func_1AE3(var2, var3);\n                var temp6 = var1;\n                var0 = temp6;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = 0x36ef1abb00000000000000000000000000000000000000000000000000000000;\n                var1 = storage[0x04] & 0x02 ** 0xa0 - 0x01;\n                var2 = 0x36ef1abb;\n                var3 = var0;\n                var4 = temp7 + 0x04;\n                var5 = 0x00;\n                var var6 = memory[0x40:0x60];\n                var var7 = temp7 - var6 + 0x04;\n                var var8 = var6;\n                var var9 = var3;\n                var var10 = var1;\n                var var11 = !address(var10).code.length;\n            \n                if (var11) { revert(memory[0x00:0x00]); }\n            \n            label_1F54:\n                var temp8;\n                temp8, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n                var5 = !temp8;\n            \n                if (!var5) {\n                    storage[0x08] = var0 + storage[0x08];\n                    var temp9 = arg0;\n                    storage[0x06] = storage[temp9 + 0x03] + storage[0x06];\n                    var1 = 0x1f97;\n                    var2 = storage[temp9];\n                    var3 = 0x0905438e60010000;\n                    var1 = func_1AE3(var2, var3);\n                    storage[0x07] = var1 + storage[0x07];\n                    var temp10 = arg0 + 0x09;\n                    storage[temp10] = (storage[temp10] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n                    return;\n                } else {\n                    var temp11 = returndata.length;\n                    memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n            label_1EC6:\n                var1 = 0x1ed8;\n                var2 = storage[arg0];\n                var3 = 0x470de4df820000;\n                var1 = func_1AE3(var2, var3);\n                var0 = var1;\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = 0x36ef1abb00000000000000000000000000000000000000000000000000000000;\n                var1 = storage[0x04] & 0x02 ** 0xa0 - 0x01;\n                var2 = 0x36ef1abb;\n                var3 = var0;\n                var4 = temp12 + 0x04;\n                var5 = 0x00;\n                var6 = memory[0x40:0x60];\n                var7 = temp12 - var6 + 0x04;\n                var8 = var6;\n                var9 = var3;\n                var10 = var1;\n                var11 = !address(var10).code.length;\n            \n                if (!var11) { goto label_1F54; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x7d64bcb400000000000000000000000000000000000000000000000000000000;\n            var1 = storage[0x04] & 0x02 ** 0xa0 - 0x01;\n            var5 = memory[0x40:0x60];\n            var2 = 0x7d64bcb4;\n            var3 = temp13 + 0x04;\n            var4 = 0x20;\n            var6 = temp13 - var5 + 0x04;\n            var7 = var5;\n            var8 = 0x00;\n            var9 = var1;\n            var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp14;\n            temp14, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp14;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (memory[var1:var1 + 0x20]) { goto label_1D91; }\n            \n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n                memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x1f;\n                memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x436f756c646e27742066696e697368206d696e74696e6720746f6b656e732100;\n                var temp16 = memory[0x40:0x60];\n                revert(memory[temp16:temp16 + temp15 - temp16 + 0x64]);\n            } else {\n                var temp17 = returndata.length;\n                memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        }\n    }\n    \n    function func_1E66(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1AE3(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1FC8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 <= arg1) { return arg0; }\n    \n        var var1 = arg1;\n        return var1;\n    }\n    \n    function func_1FE1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1FF1(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (tx.origin != msg.sender) {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n            memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x39;\n            memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = 0x4f4e4c5920484f4f4d414e5320286f722073637269707473207468617420646f;\n            memory[temp12 + 0x64:temp12 + 0x64 + 0x20] = 0x6e27742075736520736d61727420636f6e747261637473292100000000000000;\n            var temp13 = memory[0x40:0x60];\n            revert(memory[temp13:temp13 + temp12 - temp13 + 0x84]);\n        } else if (arg1 <= 0x016345785d8a0000) {\n        label_21A6:\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = block.blockHash(block.number + ~0x00);\n            memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = block.timestamp;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0 - temp1 + 0x40;\n            memory[0x40:0x60] = temp0 + 0x60;\n            var var2 = temp1;\n            var var3 = temp0 + 0x60;\n            var var4 = var3;\n            var var6 = memory[var2:var2 + 0x20];\n            var var5 = var2 + 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n        \n            if (var7 < 0x20) {\n            label_20D8:\n                var temp2 = var8;\n                var temp3 = 0x0100 ** (0x20 - var7) + ~0x00;\n                memory[temp2:temp2 + 0x20] = (memory[temp2:temp2 + 0x20] & temp3) | (memory[var9:var9 + 0x20] & ~temp3);\n                var temp4 = memory[0x40:0x60];\n                var0 = keccak256(memory[temp4:temp4 + (var4 + var6) - temp4]);\n                var2 = 0xc8;\n                var3 = var0;\n            \n                if (var3 % var2) { goto label_21A6; }\n            \n                var temp5 = arg0 + 0x02;\n                var temp6 = storage[temp5] / 0x02;\n                var1 = temp6;\n                storage[temp5] = var1;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var2 = 0x2142;\n                var4 = var1;\n                var2 = func_1FE1(var3, var4);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var2 = 0x215f;\n                var3 = storage[0x0d];\n                var4 = var1;\n                var2 = func_1FE1(var3, var4);\n                storage[0x0d] = var2;\n                var temp7 = var1;\n                storage[0x09] = temp7 + storage[0x09];\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = msg.sender;\n                memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp7;\n                var temp9 = memory[0x40:0x60];\n                log(memory[temp9:temp9 + temp8 - temp9 + 0x40], [0xf5d01889f04f77ed9ff391da32496e63ce53f4b0d0c246651254895d04bcd99a]);\n                goto label_21A6;\n            } else {\n            label_20C2:\n                var temp10 = var9;\n                var temp11 = var8;\n                memory[temp11:temp11 + 0x20] = memory[temp10:temp10 + 0x20];\n                var7 = var7 + ~0x1f;\n                var8 = temp11 + 0x20;\n                var9 = temp10 + 0x20;\n            \n                if (var7 < 0x20) { goto label_20D8; }\n                else { goto label_20C2; }\n            }\n        }\n    }\n    \n    function func_21AC(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (storage[0x10] == 0x01) {\n            var1 = 0x01cdda4faccd0000;\n        \n            if (!(arg2 & 0x02 ** 0xa0 - 0x01)) { goto label_2286; }\n            else { goto label_21DF; }\n        } else if (!(arg2 & 0x02 ** 0xa0 - 0x01)) {\n        label_2286:\n            var var6 = 0x229a;\n            var var7 = arg1;\n            var var8 = 0x0905438e60010000 - var1;\n            var6 = func_1AE3(var7, var8);\n            var0 = var6;\n            var6 = 0x22b1;\n            var7 = arg1;\n            var8 = 0x64;\n            var var9 = 0x0de0b6b3a7640000;\n            var6 = func_1E66(var7, var8, var9);\n        \n        label_22B1:\n            var3 = var6;\n            var6 = 0x22c5;\n            var7 = arg1;\n            var8 = 0x0214e8348c4f0000;\n            var6 = func_1AE3(var7, var8);\n            var4 = var6;\n        \n            if (storage[0x10] != 0x01) {\n                var5 = arg1 / 0x14;\n            \n                if (storage[arg0 + 0x03]) {\n                label_2310:\n                    var6 = 0x231a;\n                    var7 = arg0;\n                    var8 = var0;\n                    func_24EF(var7, var8);\n                \n                label_231A:\n                    var6 = 0x2328;\n                    var7 = storage[arg0 + 0x02];\n                    var8 = var3;\n                    var6 = func_1FE1(var7, var8);\n                    var temp0 = arg0;\n                    storage[temp0 + 0x02] = var6;\n                    var7 = storage[temp0 + 0x01];\n                    var6 = 0x233c;\n                    var8 = var4;\n                    var6 = func_1FE1(var7, var8);\n                    storage[arg0 + 0x01] = var6;\n                    var6 = 0x234e;\n                    var7 = storage[0x0b];\n                    var8 = var5;\n                    var6 = func_1FE1(var7, var8);\n                    storage[0x0b] = var6;\n                    return;\n                } else {\n                label_22F9:\n                    var6 = 0x2306;\n                    var7 = storage[arg0 + 0x01];\n                    var8 = var0;\n                    var6 = func_1FE1(var7, var8);\n                    storage[arg0 + 0x01] = var6;\n                    goto label_231A;\n                }\n            } else {\n                var5 = arg1 / 0x04;\n                storage[0x0c] = var5 + storage[0x0c];\n            \n                if (storage[arg0 + 0x03]) { goto label_2310; }\n                else { goto label_22F9; }\n            }\n        } else {\n        label_21DF:\n            var6 = 0x21f3;\n            var7 = arg1;\n            var8 = 0x08e1bc9bf0400000 - var1;\n            var6 = func_1AE3(var7, var8);\n            var0 = var6;\n            var6 = 0x2206;\n            var7 = arg1;\n            var8 = 0x2386f26fc10000;\n            var6 = func_1AE3(var7, var8);\n            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var temp1 = var6;\n            var2 = temp1;\n            var6 = 0x222c;\n            var7 = storage[keccak256(memory[0x00:0x40])];\n            var8 = var2;\n            var6 = func_1FE1(var7, var8);\n            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = var6;\n            var7 = storage[temp2 + 0x01];\n            var6 = 0x2255;\n            var8 = var2;\n            var6 = func_1FE1(var7, var8);\n            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            storage[keccak256(memory[0x00:0x40]) + 0x01] = var6;\n            var6 = 0x227e;\n            var7 = storage[0x0d];\n            var8 = var2;\n            var6 = func_1FE1(var7, var8);\n            storage[0x0d] = var6;\n            var6 = 0x22b1;\n            var7 = arg1;\n            var8 = 0x64;\n            var9 = 0x0de0b6b3a7640000;\n            var6 = func_1E66(var7, var8, var9);\n            goto label_22B1;\n        }\n    }\n    \n    function func_24C7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (var1) {\n        label_24E4:\n        \n            if (var1) { return var0; }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n            var temp0 = arg1;\n            var0 = arg0 * temp0;\n            var1 = arg0;\n            var var2 = temp0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2 == var1;\n            goto label_24E4;\n        }\n    }\n    \n    function func_24EF(var arg0, var arg1) {\n        var var0 = 0x24fb;\n        var var1 = storage[0x0d];\n        var var2 = arg1;\n        var0 = func_1FE1(var1, var2);\n        storage[0x0d] = var0;\n    \n        if (storage[arg0 + 0x03]) {\n            var0 = 0x256d;\n            var temp0 = arg0;\n            var1 = storage[temp0 + 0x04];\n            var2 = storage[temp0 + 0x03];\n            var var3 = 0x2564;\n            var var4 = arg1;\n            var var5 = 0x033b2e3c9fd0803ce8000000;\n            var3 = func_24C7(var4, var5);\n            var0 = func_2564(var1, var2, var3);\n            storage[arg0 + 0x04] = var0;\n            return;\n        } else {\n            var0 = 0x2517;\n            var1 = arg1;\n            var2 = storage[arg0 + 0x07];\n            var3 = 0x00;\n            var4 = var2;\n            var5 = 0x1b0d;\n            var var6 = 0x258e;\n            var var7 = var1;\n            var var8 = 0x0de0b6b3a7640000;\n            var6 = func_24C7(var7, var8);\n            var5 = func_258E(var2, var6);\n        \n            if (!var4) { assert(); }\n        \n            var0 = var5 / var4;\n            // Error: Could not resolve jump destination!\n        }\n    }\n    \n    function func_2564(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        arg1 = arg2 / arg1;\n        r0 = func_1FE1(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_258E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x02;\n        var var1 = arg0;\n        var0 = var1 / var0;\n        r0 = func_1FE1(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2610(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function startNewRound(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_1682:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0 * 0x0b;\n            var0 = 0x1682;\n            var var1 = temp4;\n            var var2 = temp3 + arg1 * 0x0b;\n            var0 = func_265D(var1, var2);\n            goto label_1682;\n        }\n    }\n    \n    function func_264F(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        storage[temp0] = 0x00;\n        arg1 = temp0 + 0x01;\n    \n        if (arg0 <= arg1) {\n            r0 = func_2610(arg0, arg1);\n            // Error: Could not resolve method call return address!\n        } else {\n            r0 = func_264F(arg0, arg1);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_265D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x265a;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_2610(arg1, var0); }\n    \n    label_266C:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        storage[temp2 + 0x01] = 0x00;\n        storage[temp2 + 0x02] = 0x00;\n        storage[temp2 + 0x03] = 0x00;\n        storage[temp2 + 0x04] = 0x00;\n        storage[temp2 + 0x05] = 0x00;\n        storage[temp2 + 0x06] = 0x00;\n        storage[temp2 + 0x07] = 0x00;\n        storage[temp2 + 0x08] = 0x00;\n        var temp3 = temp2 + 0x09;\n        storage[temp3] = storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffffff;\n        var0 = temp2 + 0x0b;\n    \n        if (arg1 > var0) { goto label_266C; }\n    \n        arg0 = func_2610(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_0245:\n            var var0 = 0x024f;\n            var var1 = 0x00;\n        \n        label_086C:\n            var var2 = 0x00;\n        \n            if (var2 >= storage[0x10]) {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x0f;\n                memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x4e6f742079657420737461727465640000000000000000000000000000000000;\n                var temp1 = memory[0x40:0x60];\n                revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n            } else {\n                var var3 = 0x10;\n                var var4 = storage[0x0f];\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var2 = var4 * 0x0b + keccak256(memory[0x00:0x20]);\n                var3 = 0x08a5;\n                var4 = var2;\n                var var5 = msg.value;\n                var var6 = var1;\n            \n            label_170C:\n                var var7 = 0x00;\n                var var8 = var7;\n                var var9 = 0x00;\n            \n                if (storage[var4 + 0x06] < block.timestamp) {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                    memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x0f;\n                    memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x416674657220646561646c696e65210000000000000000000000000000000000;\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + temp7 - temp8 + 0x64]);\n                } else if (var5 >= storage[var4 + 0x07] / 0x0a) {\n                    var var10 = 0x17db;\n                    var var11 = storage[var4];\n                    var var12 = var5;\n                    var10 = func_1FE1(var11, var12);\n                    var temp2 = var4;\n                    storage[temp2] = var10;\n                \n                    if (var5 < storage[temp2 + 0x07]) {\n                        var10 = 0x1814;\n                        var11 = var4;\n                        var12 = var5;\n                        func_1FF1(var11, var12);\n                    \n                    label_1814:\n                        var10 = 0x181f;\n                        var11 = var4;\n                        var12 = var5;\n                        var var13 = var6;\n                        func_21AC(var11, var12, var13);\n                        var10 = 0x1829;\n                        var11 = msg.sender;\n                        var12 = var4;\n                        func_1A43(var11, var12);\n                        var10 = 0x1834;\n                        var11 = var4;\n                        var12 = msg.sender;\n                        var13 = var5;\n                        var var14 = 0x00;\n                        memory[var14:var14 + 0x20] = var12 & 0x02 ** 0xa0 - 0x01;\n                        memory[0x20:0x40] = var11 + 0x0a;\n                        var var15 = var14;\n                    \n                        if (storage[keccak256(memory[var15:var15 + 0x40])]) {\n                            var var16 = 0x23ae;\n                            var var17 = var13;\n                            var var18 = storage[var11 + 0x07];\n                        \n                        label_2576:\n                            var var19 = 0x00;\n                            var var20 = var18;\n                            var var21 = 0x1b0d;\n                            var var22 = 0x258e;\n                            var var23 = var17;\n                            var var24 = 0x0de0b6b3a7640000;\n                            var22 = func_24C7(var23, var24);\n                            var21 = func_258E(var18, var22);\n                        \n                            if (!var20) { assert(); }\n                        \n                            var16 = var21 / var20;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var temp3 = var11;\n                            memory[0x00:0x20] = var12 & 0x02 ** 0xa0 - 0x01;\n                            memory[0x20:0x40] = temp3 + 0x0a;\n                            storage[keccak256(memory[0x00:0x40])] = storage[temp3 + 0x04];\n                            var16 = 0x23ae;\n                            var17 = var13;\n                            var18 = storage[temp3 + 0x07];\n                            goto label_2576;\n                        }\n                    } else {\n                        var temp4 = var4 + 0x09;\n                        storage[temp4] = msg.sender | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                        var10 = 0x1814;\n                        var11 = var4;\n                        var12 = var5;\n                        func_1FF1(var11, var12);\n                        goto label_1814;\n                    }\n                } else {\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n                    memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x11;\n                    memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = 0x4e6f7420656e6f75676820457468657221000000000000000000000000000000;\n                    var temp6 = memory[0x40:0x60];\n                    revert(memory[temp6:temp6 + temp5 - temp6 + 0x64]);\n                }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x02605ea8) {\n                // Dispatch table entry for raisedICO()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = raisedICO();\n            \n            label_0266:\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2;\n                var temp10 = memory[0x40:0x60];\n                return memory[temp10:temp10 + temp9 - temp10 + 0x20];\n            } else if (var0 == 0x059f8b16) {\n                // Dispatch table entry for MULTIPLIER()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = MULTIPLIER();\n                goto label_0266;\n            } else if (var0 == 0x0900f010) {\n                // Dispatch table entry for upgrade(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                upgrade(var2);\n                stop();\n            } else if (var0 == 0x0bafd60e) {\n                // Dispatch table entry for nextVersion()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c3;\n                var2 = nextVersion();\n            \n            label_02C3:\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp12 = memory[0x40:0x60];\n                return memory[temp12:temp12 + temp11 - temp12 + 0x20];\n            } else if (var0 == 0x0d6c03fa) {\n                // Dispatch table entry for unclaimedReturns()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = unclaimedReturns();\n                goto label_0266;\n            } else if (var0 == 0x13af4035) {\n                // Dispatch table entry for setOwner(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setOwner(var2);\n                stop();\n            } else if (var0 == 0x14a0450a) {\n                // Dispatch table entry for DEV_DIVISOR()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = DEV_DIVISOR();\n                goto label_0266;\n            } else if (var0 == 0x3314b952) {\n                // Dispatch table entry for TIME_PER_SHARE()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = TIME_PER_SHARE();\n                goto label_0266;\n            } else if (var0 == 0x377c93bf) {\n                // Dispatch table entry for ipfsHashType()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0354;\n                var2 = ipfsHashType();\n            \n            label_0354:\n                var temp13 = memory[0x40:0x60];\n                memory[temp13:temp13 + 0x20] = 0x20;\n                var temp14 = var2;\n                memory[temp13 + 0x20:temp13 + 0x20 + 0x20] = memory[temp14:temp14 + 0x20];\n                var3 = temp13;\n                var4 = var3;\n                var5 = var4 + 0x40;\n                var7 = memory[temp14:temp14 + 0x20];\n                var6 = temp14 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_038E:\n                    var temp15 = var7;\n                    var5 = temp15 + var5;\n                    var6 = temp15 & 0x1f;\n                \n                    if (!var6) {\n                        var temp16 = memory[0x40:0x60];\n                        return memory[temp16:temp16 + var5 - temp16];\n                    } else {\n                        var temp17 = var6;\n                        var temp18 = var5 - temp17;\n                        memory[temp18:temp18 + 0x20] = ~(0x0100 ** (0x20 - temp17) - 0x01) & memory[temp18:temp18 + 0x20];\n                        var temp19 = memory[0x40:0x60];\n                        return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n                    }\n                } else {\n                label_037F:\n                    var temp20 = var11;\n                    memory[temp20 + var9:temp20 + var9 + 0x20] = memory[temp20 + var10:temp20 + var10 + 0x20];\n                    var11 = temp20 + 0x20;\n                \n                    if (var11 >= var8) { goto label_038E; }\n                    else { goto label_037F; }\n                }\n            } else if (var0 == 0x3bfc1b25) {\n                // Dispatch table entry for totalEarningsGenerated()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = totalEarningsGenerated();\n                goto label_0266;\n            } else if (var0 == 0x3d6859f2) {\n                // Dispatch table entry for investorInfo(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0402;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1, var2, var3 = investorInfo(var2, var3);\n                var temp21 = memory[0x40:0x60];\n                memory[temp21:temp21 + 0x20] = var1;\n                memory[temp21 + 0x20:temp21 + 0x20 + 0x20] = var2;\n                memory[temp21 + 0x40:temp21 + 0x40 + 0x20] = var3;\n                var temp22 = memory[0x40:0x60];\n                return memory[temp22:temp22 + temp21 - temp22 + 0x60];\n            } else if (var0 == 0x40c0ece3) {\n                // Dispatch table entry for updateMyReturns(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24];\n                updateMyReturns(var2);\n                stop();\n            } else if (var0 == 0x427f0b00) {\n                // Dispatch table entry for roundInfo(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0450;\n                var2 = msg.data[0x04:0x24];\n                var1, var2, var3, var4, var5, var6, var7, var8, var9, var10 = roundInfo(var2);\n                var temp23 = memory[0x40:0x60];\n                memory[temp23:temp23 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                memory[temp23 + 0x20:temp23 + 0x20 + 0x20] = var2;\n                memory[temp23 + 0x40:temp23 + 0x40 + 0x20] = var3;\n                memory[temp23 + 0x60:temp23 + 0x60 + 0x20] = var4;\n                memory[temp23 + 0x80:temp23 + 0x80 + 0x20] = var5;\n                memory[temp23 + 0xa0:temp23 + 0xa0 + 0x20] = var6;\n                memory[temp23 + 0xc0:temp23 + 0xc0 + 0x20] = var7;\n                memory[temp23 + 0xe0:temp23 + 0xe0 + 0x20] = var8;\n                memory[temp23 + 0x0100:temp23 + 0x0100 + 0x20] = var9;\n                memory[temp23 + 0x0120:temp23 + 0x0120 + 0x20] = !!var10;\n                var temp24 = memory[0x40:0x60];\n                return memory[temp24:temp24 + temp23 - temp24 + 0x0140];\n            } else if (var0 == 0x43db053e) {\n                // Dispatch table entry for withdrawDevShare()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                withdrawDevShare();\n                stop();\n            } else if (var0 == 0x48afd1b3) {\n                // Dispatch table entry for hasReturns(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e5;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1 = hasReturns(var2, var3);\n            \n            label_04E5:\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = !!var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + temp25 - temp26 + 0x20];\n            } else if (var0 == 0x4c7ce18a) {\n                // Dispatch table entry for withdrawReturns()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                withdrawReturns();\n                stop();\n            } else if (var0 == 0x4c85b425) {\n                // Dispatch table entry for buyShares(address)\n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                goto label_086C;\n            } else if (var0 == 0x536942b6) {\n                // Dispatch table entry for finalizeAndRestart()\n                var1 = 0x024f;\n                var2 = 0x0f4a;\n            \n            label_154B:\n                var3 = 0x00;\n                var4 = 0x10;\n                var5 = storage[0x0f];\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var3 = var5 * 0x0b + keccak256(memory[0x00:0x20]);\n                var4 = 0x0aa0;\n                var5 = var3;\n                finalizeAndRestart(var5);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x574d6554) {\n                // Dispatch table entry for setIPFSHash(string,string)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var temp27 = memory[0x40:0x60];\n                var temp28 = msg.data[0x04:0x24];\n                var temp29 = msg.data[temp28 + 0x04:temp28 + 0x04 + 0x20];\n                memory[0x40:0x60] = temp27 + (temp29 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp27:temp27 + 0x20] = temp29;\n                var1 = 0x024f;\n                memory[temp27 + 0x20:temp27 + 0x20 + temp29] = msg.data[temp28 + 0x24:temp28 + 0x24 + temp29];\n                var temp30 = memory[0x40:0x60];\n                var temp31 = msg.data[0x24:0x44] + 0x04;\n                var temp32 = msg.data[temp31:temp31 + 0x20];\n                memory[0x40:0x60] = temp30 + (temp32 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp30:temp30 + 0x20] = temp32;\n                var2 = temp27;\n                memory[temp30 + 0x20:temp30 + 0x20 + temp32] = msg.data[temp31 + 0x20:temp31 + 0x20 + temp32];\n                var3 = temp30;\n                var4 = 0x0f6a;\n                var5 = msg.sender;\n                var6 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n                var4 = func_193A(var5, var6);\n            \n                if (!var4) { revert(memory[0x00:0x00]); }\n            \n                var temp33 = var2;\n                var4 = 0x0f88;\n                var5 = 0x03;\n                var7 = memory[temp33:temp33 + 0x20];\n                var6 = temp33 + 0x20;\n                var temp34 = var5;\n                var temp35 = storage[temp34];\n                memory[0x00:0x20] = temp34;\n                var8 = keccak256(memory[0x00:0x20]);\n                var temp36 = var6;\n                var6 = var8 + ((!(temp35 & 0x01) * 0x0100 - 0x01 & temp35) / 0x02 + 0x1f) / 0x20;\n                var9 = temp36;\n            \n                if (0x1f < var7) {\n                    var temp37 = var7;\n                    storage[var5] = temp37 + temp37 + 0x01;\n                \n                    if (!temp37) {\n                    label_2604:\n                        var temp38 = var6;\n                        var6 = 0x2610;\n                        var7 = temp38;\n                        var temp39 = var7;\n                        var7 = 0x265a;\n                        var temp40 = var8;\n                        var8 = temp39;\n                        var9 = temp40;\n                    \n                        if (var8 <= var9) {\n                            var7 = func_2610(var8, var9);\n                        \n                        label_265A:\n                            var6 = var7;\n                            // Error: Could not resolve jump destination!\n                        } else {\n                            var7 = func_264F(var8, var9);\n                            goto label_265A;\n                        }\n                    } else {\n                        var temp41 = var7;\n                        var temp42 = var9;\n                        var7 = temp42;\n                        var9 = var7 + temp41;\n                    \n                        if (var9 <= var7) { goto label_2604; }\n                    \n                    label_25F2:\n                        var temp43 = var7;\n                        var temp44 = var8;\n                        storage[temp44] = memory[temp43:temp43 + 0x20];\n                        var7 = temp43 + 0x20;\n                        var8 = temp44 + 0x01;\n                        var9 = var9;\n                    \n                        if (var9 <= var7) { goto label_2604; }\n                        else { goto label_25F2; }\n                    }\n                } else {\n                    var temp45 = var7;\n                    storage[var5] = temp45 + temp45 | (memory[var9:var9 + 0x20] & ~0xff);\n                    goto label_2604;\n                }\n            } else if (var0 == 0x57b16811) {\n                // Dispatch table entry for totalsInfo()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d6;\n                var1, var2, var3, var4 = totalsInfo();\n            \n            label_05D6:\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var1;\n                memory[temp46 + 0x20:temp46 + 0x20 + 0x20] = var2;\n                memory[temp46 + 0x40:temp46 + 0x40 + 0x20] = var3;\n                memory[temp46 + 0x60:temp46 + 0x60 + 0x20] = var4;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + temp46 - temp47 + 0x80];\n            } else if (var0 == 0x5faf500f) {\n                // Dispatch table entry for STARTING_SHARE_PRICE()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = STARTING_SHARE_PRICE();\n                goto label_0266;\n            } else if (var0 == 0x619360df) {\n                // Dispatch table entry for jackpotSeed()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = jackpotSeed();\n                goto label_0266;\n            } else if (var0 == 0x61983c02) {\n                // Dispatch table entry for DIVIDENDS_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = DIVIDENDS_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0x68fab02a) {\n                // Dispatch table entry for SOFT_DEADLINE_DURATION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = SOFT_DEADLINE_DURATION();\n                goto label_0266;\n            } else if (var0 == 0x73aff5af) {\n                // Dispatch table entry for totalSharesSold()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = totalSharesSold();\n                goto label_0266;\n            } else if (var0 == 0x7a9e5e4b) {\n                // Dispatch table entry for setAuthority(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setAuthority(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c3;\n                var2 = owner();\n                goto label_02C3;\n            } else if (var0 == 0x98bf4c08) {\n                // Dispatch table entry for REFERRAL_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = REFERRAL_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0x9a7f027c) {\n                // Dispatch table entry for RETURNS_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = RETURNS_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0x9b079084) {\n                // Dispatch table entry for HARD_DEADLINE_DURATION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = HARD_DEADLINE_DURATION();\n                goto label_0266;\n            } else if (var0 == 0x9e93d0e4) {\n                // Dispatch table entry for reinvestReturns(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24];\n                var3 = 0x0aa0;\n                var4 = var2;\n                var5 = 0x00;\n            \n            label_1587:\n                var6 = 0x00;\n                var7 = 0x10;\n                var8 = storage[0x0f];\n            \n                if (var8 >= storage[var7]) { assert(); }\n            \n                memory[0x00:0x20] = var7;\n                var temp48 = var8 * 0x0b + keccak256(memory[0x00:0x20]);\n                var6 = temp48;\n                var7 = 0x15b4;\n                var8 = msg.sender;\n                var9 = var6;\n                func_1A43(var8, var9);\n            \n            label_15B4:\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n            \n                if (var4 <= storage[keccak256(memory[0x00:0x40])]) {\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x0e;\n                    var7 = 0x1635;\n                    var8 = storage[keccak256(memory[0x00:0x40])];\n                    var9 = var4;\n                    var7 = func_1B1E(var8, var9);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x0e;\n                    var temp49 = keccak256(memory[0x00:0x40]);\n                    storage[temp49] = var7;\n                    var8 = storage[temp49 + 0x01];\n                    var9 = var7;\n                    var7 = 0x1654;\n                    var7 = func_1FC8(var8, var9);\n                    memory[0x00:0x20] = msg.sender;\n                    memory[0x20:0x40] = 0x0e;\n                    storage[keccak256(memory[0x00:0x40]) + 0x01] = var7;\n                    var8 = storage[0x0d];\n                    var7 = 0x1674;\n                    var9 = var4;\n                    var7 = func_1B1E(var8, var9);\n                    storage[0x0d] = var7;\n                    var7 = 0x1682;\n                    var8 = var6;\n                    var9 = var4;\n                    var10 = var5;\n                    goto label_170C;\n                } else {\n                    var temp50 = memory[0x40:0x60];\n                    memory[temp50:temp50 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp50 + 0x04:temp50 + 0x04 + 0x20] = 0x20;\n                    memory[temp50 + 0x24:temp50 + 0x24 + 0x20] = 0x1f;\n                    memory[temp50 + 0x44:temp50 + 0x44 + 0x20] = 0x43616e2774207370656e64207768617420796f7520646f6e2774206861766500;\n                    var temp51 = memory[0x40:0x60];\n                    revert(memory[temp51:temp51 + temp50 - temp51 + 0x64]);\n                }\n            } else if (var0 == 0xa2860050) {\n                // Dispatch table entry for estimateReturns(address,uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0716;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var1, var2 = estimateReturns(var2, var3);\n                var temp52 = memory[0x40:0x60];\n                memory[temp52:temp52 + 0x20] = var1;\n                memory[temp52 + 0x20:temp52 + 0x20 + 0x20] = var2;\n                var temp53 = memory[0x40:0x60];\n                return memory[temp53:temp53 + temp52 - temp53 + 0x40];\n            } else if (var0 == 0xa44be536) {\n                // Dispatch table entry for JACKPOT_SEED_FRACTION()\n            label_072F:\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = JACKPOT_SEED_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0xb017d08c) {\n                // Dispatch table entry for JACKPOT_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = JACKPOT_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0xbc2f45a7) {\n                // Dispatch table entry for AIRDROP_FRACTION()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = AIRDROP_FRACTION();\n                goto label_0266;\n            } else if (var0 == 0xbd85948c) {\n                // Dispatch table entry for startNewRound()\n                var1 = 0x024f;\n                var2 = 0x00;\n                var3 = var2;\n            \n                if (storage[0x04] / 0x02 ** 0xa0 & 0xff) {\n                    var temp62 = memory[0x40:0x60];\n                    memory[temp62:temp62 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp62 + 0x04:temp62 + 0x04 + 0x20] = 0x20;\n                    memory[temp62 + 0x24:temp62 + 0x24 + 0x20] = 0x20;\n                    memory[temp62 + 0x44:temp62 + 0x44 + 0x20] = 0x5468697320636f6e747261637420686173206265656e20757067726164656421;\n                    var temp63 = memory[0x40:0x60];\n                    revert(memory[temp63:temp63 + temp62 - temp63 + 0x64]);\n                } else if (0x00 >= storage[0x10]) {\n                label_1467:\n                    var4 = storage[0x10];\n                    var5 = 0x1479;\n                    var6 = 0x10;\n                    var7 = var4 + 0x01;\n                    startNewRound(var6, var7);\n                    var temp54 = var4;\n                    var2 = temp54;\n                    var4 = 0x10;\n                    var5 = var2;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    storage[0x0f] = var2;\n                    var temp55 = var5 * 0x0b + keccak256(memory[0x00:0x20]);\n                    var temp56 = temp55 + 0x09;\n                    storage[temp56] = msg.sender | (storage[temp56] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                    storage[temp55 + 0x07] = 0x038d7ea4c68000;\n                    var temp57 = block.timestamp;\n                    storage[temp55 + 0x05] = temp57 + 0x278d00;\n                    storage[temp55 + 0x06] = temp57 + 0x015180;\n                    storage[temp55 + 0x01] = storage[0x0a];\n                    storage[0x0a] = 0x00;\n                    var3 = temp55;\n                    var4 = 0x14fe;\n                    var5 = var3;\n                    var7 = 0x00;\n                    var6 = msg.value;\n                    goto label_170C;\n                } else {\n                    var4 = 0x10;\n                    var5 = storage[0x0f];\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                \n                    if (storage[var5 * 0x0b + keccak256(memory[0x00:0x20]) + 0x09] / 0x0100 ** 0x14 & 0xff) {\n                        var4 = block.timestamp;\n                        var5 = 0x10;\n                        var6 = storage[0x0f];\n                    \n                        if (var6 >= storage[var5]) { assert(); }\n                    \n                        memory[0x00:0x20] = var5;\n                    \n                        if (storage[var6 * 0x0b + keccak256(memory[0x00:0x20]) + 0x06] < var4) { goto label_1467; }\n                    \n                        var temp58 = memory[0x40:0x60];\n                        memory[temp58:temp58 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp58 + 0x04:temp58 + 0x04 + 0x20] = 0x20;\n                        memory[temp58 + 0x24:temp58 + 0x24 + 0x20] = 0x1c;\n                        memory[temp58 + 0x44:temp58 + 0x44 + 0x20] = 0x50726576696f757320726f756e64207374696c6c2072756e6e696e6700000000;\n                        var temp59 = memory[0x40:0x60];\n                        revert(memory[temp59:temp59 + temp58 - temp59 + 0x64]);\n                    } else {\n                        var temp60 = memory[0x40:0x60];\n                        memory[temp60:temp60 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp60 + 0x04:temp60 + 0x04 + 0x20] = 0x20;\n                        memory[temp60 + 0x24:temp60 + 0x24 + 0x20] = 0x1c;\n                        memory[temp60 + 0x44:temp60 + 0x44 + 0x20] = 0x50726576696f757320726f756e64206e6f742066696e616c697a656400000000;\n                        var temp61 = memory[0x40:0x60];\n                        revert(memory[temp61:temp61 + temp60 - temp61 + 0x64]);\n                    }\n                }\n            } else if (var0 == 0xbf7e214f) {\n                // Dispatch table entry for authority()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c3;\n                var2 = authority();\n                goto label_02C3;\n            } else if (var0 == 0xc24a9674) {\n                // Dispatch table entry for finalizeLastRound()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                goto label_154B;\n            } else if (var0 == 0xc28de2cd) {\n                // Dispatch table entry for upgraded()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04e5;\n                var2 = upgraded();\n                goto label_04E5;\n            } else if (var0 == 0xc5c87db4) {\n                // Dispatch table entry for reinvestReturns(uint256,address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x024f;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                goto label_1587;\n            } else if (var0 == 0xc623674f) {\n                // Dispatch table entry for ipfsHash()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0354;\n                var2 = ipfsHash();\n                goto label_0354;\n            } else if (var0 == 0xc9e18986) {\n                // Dispatch table entry for totalDividendsPaid()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = totalDividendsPaid();\n                goto label_0266;\n            } else if (var0 == 0xcd9a1b63) {\n                // Dispatch table entry for devBalance()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = devBalance();\n                goto label_0266;\n            } else if (var0 == 0xd287e9e4) {\n                // Dispatch table entry for totalJackpotsWon()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = totalJackpotsWon();\n                goto label_0266;\n            } else if (var0 == 0xf1b60408) { goto label_072F; }\n                // Dispatch table entry for DEV_FRACTION()\n            else if (var0 == 0xf76339dc) {\n                // Dispatch table entry for latestRoundID()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = latestRoundID();\n                goto label_0266;\n            } else if (var0 == 0xf958b9ca) {\n                // Dispatch table entry for PRICE_INCREASE_PERIOD()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0266;\n                var2 = PRICE_INCREASE_PERIOD();\n                goto label_0266;\n            } else if (var0 == 0xfc0c546a) {\n                // Dispatch table entry for token()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02c3;\n                var2 = token();\n                goto label_02C3;\n            } else { goto label_0245; }\n        }\n    }\n    \n    function raisedICO() returns (var r0) { return storage[0x0c]; }\n    \n    function MULTIPLIER() returns (var r0) { return 0x033b2e3c9fd0803ce8000000; }\n    \n    function upgrade(var arg0) {\n        var var0 = 0x092a;\n        var var1 = msg.sender;\n        var var2 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n        var0 = func_193A(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x10;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x496e76616c696420416464726573732100000000000000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        } else if (!(storage[0x04] / 0x02 ** 0xa0 & 0xff)) {\n            storage[0x04] = (storage[0x04] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n            storage[0x05] = (storage[0x05] & ~0xffffffffffffffffffffffffffffffffffffffff) | (arg0 & 0x02 ** 0xa0 - 0x01);\n            var0 = 0x10;\n            var1 = storage[0x0f];\n        \n            if (var1 >= storage[var0]) { assert(); }\n        \n            memory[0x00:0x20] = var0;\n        \n            if (!(storage[var1 * 0x0b + keccak256(memory[0x00:0x20]) + 0x09] / 0x0100 ** 0x14 & 0xff)) { return; }\n        \n            memory[0x00:0x20] = storage[0x05] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            storage[keccak256(memory[0x00:0x40])] = storage[0x0a];\n            storage[0x0a] = 0x00;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x11;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x416c726561647920757067726164656421000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        }\n    }\n    \n    function nextVersion() returns (var r0) { return storage[0x05] & 0x02 ** 0xa0 - 0x01; }\n    \n    function unclaimedReturns() returns (var r0) { return storage[0x0d]; }\n    \n    function setOwner(var arg0) {\n        var var0 = 0x0ace;\n        var var1 = msg.sender;\n        var var2 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n        var0 = func_193A(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = (temp0 & arg0) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[0x01] = temp1;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0xce241d7ca1f669fee44b6fc00b8eba2df3bb514eed0f6f668f8f89096e81ed94, ((stack[-1] & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff)) & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function DEV_DIVISOR() returns (var r0) { return 0x14; }\n    \n    function TIME_PER_SHARE() returns (var r0) { return 0x012c; }\n    \n    function ipfsHashType() returns (var r0) {\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x03;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0BC7:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0BBE; }\n        \n        label_0BAA:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0BAA; }\n        \n        label_0BBE:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0BC7;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0BC7;\n        }\n    }\n    \n    function totalEarningsGenerated() returns (var r0) { return storage[0x07]; }\n    \n    function investorInfo(var arg0, var arg1) returns (var r0, var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x10;\n        var var5 = arg1;\n    \n        if (var5 >= storage[var4]) { assert(); }\n    \n        memory[0x00:0x20] = var4;\n        var temp0 = keccak256(memory[0x00:0x20]);\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = var5 * 0x0b + temp0 + 0x0a;\n        var0 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n        var3 = var5 * 0x0b + temp0;\n        var4 = 0x0c24;\n        var5 = arg0;\n        var var6 = arg1;\n        var4, var5 = estimateReturns(var5, var6);\n        r0 = var0;\n        arg0 = var4;\n        arg1 = var5;\n        return r0, arg0, arg1;\n    }\n    \n    function updateMyReturns(var arg0) {\n        var var0 = 0x00;\n        var var1 = 0x10;\n        var var2 = arg0;\n    \n        if (var2 >= storage[var1]) { assert(); }\n    \n        memory[0x00:0x20] = var1;\n        var temp0 = var2 * 0x0b + keccak256(memory[0x00:0x20]);\n        var0 = temp0;\n        var1 = 0x08fa;\n        var2 = msg.sender;\n        var var3 = var0;\n        func_1A43(var2, var3);\n    \n    label_08FA:\n    }\n    \n    function roundInfo(var arg0) returns (var r0, var arg0, var r2, var r3, var r4, var r5, var r6, var r7, var r8, var r9) {\n        r2 = 0x00;\n        r3 = r2;\n        r4 = 0x00;\n        r5 = r4;\n        r6 = 0x00;\n        r7 = r6;\n        r8 = 0x00;\n        r9 = r8;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n        var var11 = 0x10;\n        var var12 = arg0;\n    \n        if (var12 >= storage[var11]) { assert(); }\n    \n        memory[0x00:0x20] = var11;\n        var temp0 = var12 * 0x0b + keccak256(memory[0x00:0x20]);\n        var10 = temp0;\n        r2 = storage[var10 + 0x09] & 0x02 ** 0xa0 - 0x01;\n        r3 = storage[var10 + 0x07];\n        r4 = storage[var10 + 0x01];\n        r5 = storage[var10 + 0x02];\n        r6 = storage[var10 + 0x03];\n        r7 = storage[var10];\n        var11 = 0x0cdf;\n        var12 = storage[var10];\n        var var13 = 0x0905438e60010000;\n        var11 = func_1AE3(var12, var13);\n        var temp1 = var10;\n        r9 = storage[temp1 + 0x09] / 0x0100 ** 0x14 & 0xff;\n        var temp2 = r7;\n        r7 = storage[temp1 + 0x05];\n        var temp3 = r5;\n        r5 = temp2;\n        var temp4 = r3;\n        r3 = temp3;\n        arg0 = temp4;\n        r8 = storage[temp1 + 0x06];\n        var temp5 = r6;\n        r6 = var11;\n        var temp6 = r4;\n        r4 = temp5;\n        var temp7 = r2;\n        r2 = temp6;\n        r0 = temp7;\n        return r0, arg0, r2, r3, r4, r5, r6, r7, r8, r9;\n    }\n    \n    function withdrawDevShare() {\n        var var0 = 0x00;\n        var var1 = 0x0d29;\n        var var2 = msg.sender;\n        var var3 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n        var1 = func_193A(var2, var3);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = storage[0x0b];\n        storage[0x0b] = 0x00;\n        var temp1 = memory[0x40:0x60];\n        var0 = temp0;\n        var temp2;\n        temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + 0x00]);\n        var1 = !temp2;\n    \n        if (!var1) { return; }\n    \n        var temp3 = returndata.length;\n        memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n        revert(memory[0x00:0x00 + returndata.length]);\n    }\n    \n    function hasReturns(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x10;\n        var var3 = arg1;\n    \n        if (var3 >= storage[var2]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n        var temp0 = keccak256(memory[0x00:0x20]);\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        var temp1 = var3 * 0x0b + temp0;\n        memory[0x20:0x40] = temp1 + 0x0a;\n        return storage[temp1 + 0x04] > storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function withdrawReturns() {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = 0x10;\n        var var4 = storage[0x0f];\n    \n        if (var4 >= storage[var3]) { assert(); }\n    \n        memory[0x00:0x20] = var3;\n        var0 = var4 * 0x0b + keccak256(memory[0x00:0x20]);\n    \n        if (storage[0x10] <= 0x01) {\n        label_0E2F:\n            var3 = 0x0e39;\n            var4 = msg.sender;\n            var var5 = var0;\n            func_1A43(var4, var5);\n        \n        label_0E39:\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x0e;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (var2 > 0x00) {\n                var3 = 0x0ead;\n                var4 = storage[0x0d];\n                var5 = var2;\n                var3 = func_1B1E(var4, var5);\n                storage[0x0d] = var3;\n                var temp0 = msg.sender;\n                memory[0x00:0x20] = temp0;\n                memory[0x20:0x40] = 0x0e;\n                var temp1 = keccak256(memory[0x00:0x40]);\n                storage[temp1] = 0x00;\n                storage[temp1 + 0x01] = 0x00;\n                var temp2 = var0;\n                memory[0x20:0x40] = temp2 + 0x0a;\n                storage[keccak256(memory[0x00:0x40])] = storage[temp2 + 0x04];\n                var temp3 = memory[0x40:0x60];\n                var temp4 = var2;\n                var temp5;\n                temp5, memory[temp3:temp3 + 0x00] = address(temp0).call.gas(!temp4 * 0x08fc).value(temp4)(memory[temp3:temp3 + 0x00]);\n                var3 = !temp5;\n            \n                if (!var3) {\n                    var temp6 = memory[0x40:0x60];\n                    memory[temp6:temp6 + 0x20] = var2;\n                    var temp7 = memory[0x40:0x60];\n                    log(memory[temp7:temp7 + temp6 - temp7 + 0x20], [0x0f9fa24c1d9febdaf99508f4923a7b5add9bd70eab45c8fc614509df79894938, msg.sender]);\n                    return;\n                } else {\n                    var temp8 = returndata.length;\n                    memory[0x00:0x00 + temp8] = returndata[0x00:0x00 + temp8];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x14;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x4e6f7468696e6720746f20776974686472617721000000000000000000000000;\n                var temp10 = memory[0x40:0x60];\n                revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n            }\n        } else {\n            var3 = 0x0dfc;\n            var4 = msg.sender;\n            var5 = storage[0x0f] - 0x01;\n            var3 = hasReturns(var4, var5);\n        \n            if (!var3) { goto label_0E2F; }\n        \n            var3 = 0x10;\n            var4 = storage[0x0f] - 0x01;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n            var temp11 = var4 * 0x0b + keccak256(memory[0x00:0x20]);\n            var1 = temp11;\n            var3 = 0x0e2f;\n            var4 = msg.sender;\n            var5 = var1;\n            func_1A43(var4, var5);\n            goto label_0E2F;\n        }\n    }\n    \n    function totalsInfo() returns (var r0, var r1, var r2, var r3) {\n        r1 = 0x00;\n        r2 = r1;\n        r3 = 0x00;\n        var var3 = r3;\n        var var4 = 0x00;\n        var var5 = 0x10;\n        var var6 = storage[0x0f];\n    \n        if (var6 >= storage[var5]) { assert(); }\n    \n        memory[0x00:0x20] = var5;\n        var4 = var6 * 0x0b + keccak256(memory[0x00:0x20]);\n    \n        if (storage[var4 + 0x06] <= block.timestamp) {\n            r3 = storage[0x09];\n            r2 = storage[0x08];\n            r1 = storage[0x06];\n            r0 = storage[0x07];\n            return r0, r1, r2, r3;\n        } else {\n            var temp0 = var4;\n            r2 = storage[0x06] + storage[temp0 + 0x03];\n            var5 = 0x10f7;\n            var6 = storage[temp0];\n            var var7 = 0x0905438e60010000;\n            var5 = func_1AE3(var6, var7);\n            r1 = storage[0x07] + var5;\n            var5 = 0x1113;\n            var6 = storage[var4];\n            var7 = 0x013fbe85edc90000;\n            var5 = func_1AE3(var6, var7);\n            r3 = storage[0x08] + var5;\n            var temp1 = r3;\n            r3 = storage[0x09];\n            var temp2 = r2;\n            r2 = temp1;\n            var temp3 = r1;\n            r1 = temp2;\n            r0 = temp3;\n            return r0, r1, r2, r3;\n        }\n    }\n    \n    function STARTING_SHARE_PRICE() returns (var r0) { return 0x038d7ea4c68000; }\n    \n    function jackpotSeed() returns (var r0) { return storage[0x0a]; }\n    \n    function DIVIDENDS_FRACTION() returns (var r0) { return 0x013fbe85edc90000; }\n    \n    function SOFT_DEADLINE_DURATION() returns (var r0) { return 0x015180; }\n    \n    function totalSharesSold() returns (var r0) { return storage[0x06]; }\n    \n    function setAuthority(var arg0) {\n        var var0 = 0x117a;\n        var var1 = msg.sender;\n        var var2 = msg.data[0x00:0x20] & ~(0x02 ** 0xe0 - 0x01);\n        var0 = func_193A(var1, var2);\n    \n        if (!var0) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var temp1 = (temp0 & arg0) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[0x00] = temp1;\n        log(memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x00], [0x1abebea81bfa2637f28358c371278fb15ede7ea8dd28d2e03b112ff6d936ada4, ((stack[-1] & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff)) & 0x02 ** 0xa0 - 0x01]);\n    }\n    \n    function owner() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function REFERRAL_FRACTION() returns (var r0) { return 0x2386f26fc10000; }\n    \n    function RETURNS_FRACTION() returns (var r0) { return 0x0905438e60010000; }\n    \n    function HARD_DEADLINE_DURATION() returns (var r0) { return 0x278d00; }\n    \n    function estimateReturns(var arg0, var arg1) returns (var r0, var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = 0x10;\n        var var6 = arg1;\n    \n        if (var6 >= storage[var5]) { assert(); }\n    \n        memory[0x00:0x20] = var5;\n        var2 = var6 * 0x0b + keccak256(memory[0x00:0x20]);\n    \n        if (storage[0x10] <= 0x01) {\n        label_128C:\n            var5 = 0x1296;\n            var6 = arg0;\n            var var7 = var2;\n            var5 = func_1B2E(var6, var7);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            arg0 = storage[temp0 + 0x01];\n            r0 = var3 + var5 + storage[temp0];\n            return r0, arg0;\n        } else {\n            var5 = 0x1258;\n            var6 = arg0;\n            var7 = arg1 - 0x01;\n            var5 = hasReturns(var6, var7);\n        \n            if (!var5) { goto label_128C; }\n        \n            var5 = 0x10;\n            var6 = arg1 + ~0x00;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp1 = var6 * 0x0b + keccak256(memory[0x00:0x20]);\n            var4 = temp1;\n            var5 = 0x1289;\n            var6 = arg0;\n            var7 = var4;\n            var5 = func_1B2E(var6, var7);\n            var3 = var5;\n            goto label_128C;\n        }\n    }\n    \n    function JACKPOT_SEED_FRACTION() returns (var r0) {\n        r0 = 0x14;\n        var var1 = 0x0de0b6b3a7640000;\n        return var1 / r0;\n    }\n    \n    function JACKPOT_FRACTION() returns (var r0) { return 0x0214e8348c4f0000; }\n    \n    function AIRDROP_FRACTION() returns (var r0) {\n        r0 = 0x64;\n        var var1 = 0x0de0b6b3a7640000;\n        return var1 / r0;\n    }\n    \n    function authority() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function upgraded() returns (var r0) { return storage[0x04] / 0x02 ** 0xa0 & 0xff; }\n    \n    function ipfsHash() returns (var r0) {\n        var temp0 = storage[0x02];\n        var temp1 = memory[0x40:0x60];\n        var temp2 = (temp0 & !(temp0 & 0x01) * 0x0100 + ~0x00) / 0x02;\n        var var2 = temp2;\n        memory[0x40:0x60] = temp1 + (var2 + 0x1f) / 0x20 * 0x20 + 0x20;\n        memory[temp1:temp1 + 0x20] = var2;\n        r0 = temp1;\n        var var1 = 0x02;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var var5 = var2;\n    \n        if (!var5) {\n        label_0BC7:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp3 = var3;\n            var temp4 = temp3 + var5;\n            var3 = temp4;\n            memory[0x00:0x20] = var4;\n            var temp5 = keccak256(memory[0x00:0x20]);\n            memory[temp3:temp3 + 0x20] = storage[temp5];\n            var4 = temp5 + 0x01;\n            var5 = temp3 + 0x20;\n        \n            if (var3 <= var5) { goto label_0BBE; }\n        \n        label_0BAA:\n            var temp6 = var4;\n            var temp7 = var5;\n            memory[temp7:temp7 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp7 + 0x20;\n        \n            if (var3 > var5) { goto label_0BAA; }\n        \n        label_0BBE:\n            var temp8 = var3;\n            var temp9 = temp8 + (var5 - temp8 & 0x1f);\n            var5 = temp8;\n            var3 = temp9;\n            goto label_0BC7;\n        } else {\n            var temp10 = var3;\n            memory[temp10:temp10 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp10 + 0x20;\n            var5 = var5;\n            goto label_0BC7;\n        }\n    }\n    \n    function totalDividendsPaid() returns (var r0) { return storage[0x08]; }\n    \n    function devBalance() returns (var r0) { return storage[0x0b]; }\n    \n    function totalJackpotsWon() returns (var r0) { return storage[0x09]; }\n    \n    function latestRoundID() returns (var r0) { return storage[0x0f]; }\n    \n    function PRICE_INCREASE_PERIOD() returns (var r0) { return 0x0e10; }\n    \n    function token() returns (var r0) { return storage[0x04] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_18E9(var arg0, var arg1) returns (var r0) {\n        r0 = func_1FE1(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_193A(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (address(this) != arg0 & 0x02 ** 0xa0 - 0x01) {\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n        \n            if (storage[0x01] & temp0 == temp0 & arg0) {\n                var0 = 0x01;\n                goto label_1A3D;\n            } else if (storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = 0xb700961300000000000000000000000000000000000000000000000000000000;\n                var temp2 = 0x02 ** 0xa0 - 0x01;\n                memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = temp2 & arg0;\n                memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = address(this);\n                memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = arg1 & ~(0x02 ** 0xe0 - 0x01);\n                var var1 = storage[0x00] & temp2;\n                var var2 = 0xb7009613;\n                var var3 = temp1 + 0x64;\n                var var4 = 0x20;\n                var var5 = memory[0x40:0x60];\n                var var6 = temp1 - var5 + 0x64;\n                var var7 = var5;\n                var var8 = 0x00;\n                var var9 = var1;\n                var var10 = !address(var9).code.length;\n            \n                if (var10) { revert(memory[0x00:0x00]); }\n            \n                var temp3;\n                temp3, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n                var4 = !temp3;\n            \n                if (!var4) {\n                    var1 = memory[0x40:0x60];\n                    var2 = returndata.length;\n                \n                    if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var0 = memory[var1:var1 + 0x20];\n                \n                label_1A3D:\n                    return var0;\n                } else {\n                    var temp4 = returndata.length;\n                    memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var0 = 0x00;\n                goto label_1A3D;\n            }\n        } else {\n            var0 = 0x01;\n            goto label_1A3D;\n        }\n    }\n    \n    function func_1A43(var arg0, var arg1) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = arg1 + 0x0a;\n    \n        if (!storage[keccak256(memory[var0:var0 + 0x40]) + 0x01]) { return; }\n    \n        var var1 = 0x1a76;\n        var var2 = arg0;\n        var var3 = arg1;\n        var1 = func_1B2E(var2, var3);\n        var0 = var1;\n    \n        if (var0 <= 0x00) {\n        label_1ABE:\n            var temp0 = arg1;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp0 + 0x0a;\n            storage[keccak256(memory[0x00:0x40])] = storage[temp0 + 0x04];\n            return;\n        } else {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var1 = 0x1aa4;\n            var2 = storage[keccak256(memory[0x00:0x40])];\n            var3 = var0;\n            var1 = func_1FE1(var2, var3);\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            goto label_1ABE;\n        }\n    }\n    \n    function func_1AE3(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x0de0b6b3a7640000;\n        var var2 = 0x1b0d;\n        var var3 = 0x1afb;\n        var var4 = arg0;\n        var var5 = arg1;\n        var3 = func_24C7(var4, var5);\n        var2 = func_1AFB(var3);\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function func_1AFB(var arg0) returns (var r0) {\n        var var0 = 0x0de0b6b3a7640000 / 0x02;\n        r0 = func_1FE1(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1B1E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 - arg1;\n    \n        if (var0 <= temp0) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1B2E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = arg1 + 0x0a;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (storage[keccak256(memory[var2:var2 + 0x40]) + 0x01]) {\n            var temp0 = arg1;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = temp0 + 0x0a;\n            var var3 = 0x1b89;\n            var var5 = storage[keccak256(memory[0x00:0x40])];\n            var var4 = storage[temp0 + 0x04];\n            var3 = func_1B1E(var4, var5);\n            var1 = var3;\n            var2 = 0x00;\n        \n            if (!var1) {\n            label_1BD9:\n                var0 = var2;\n            \n            label_1BDD:\n                return var0;\n            } else {\n                memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = arg1 + 0x0a;\n                var3 = 0x033b2e3c9fd0803ce8000000;\n                var4 = 0x1bcc;\n                var5 = var1;\n                var var6 = storage[keccak256(memory[0x00:0x40]) + 0x01];\n                var4 = func_24C7(var5, var6);\n            \n                if (!var3) { assert(); }\n            \n                var2 = var4 / var3;\n                goto label_1BD9;\n            }\n        } else {\n            var0 = 0x00;\n            goto label_1BDD;\n        }\n    }\n    \n    function finalizeAndRestart(var arg0) {\n        var var0 = 0x00;\n    \n        if (storage[arg0 + 0x09] / 0x02 ** 0xa0 & 0xff) {\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n            memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x12;\n            memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x416c72656164792066696e616c697a6564210000000000000000000000000000;\n            var temp21 = memory[0x40:0x60];\n            revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n        } else if (block.timestamp <= storage[arg0 + 0x06]) {\n            var temp18 = memory[0x40:0x60];\n            memory[temp18:temp18 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = 0x20;\n            memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = 0x14;\n            memory[temp18 + 0x44:temp18 + 0x44 + 0x20] = 0x526f756e64207374696c6c2072756e6e696e6721000000000000000000000000;\n            var temp19 = memory[0x40:0x60];\n            revert(memory[temp19:temp19 + temp18 - temp19 + 0x64]);\n        } else if (storage[0x10] != 0x01) {\n        label_1D91:\n            var temp0 = arg0;\n            memory[0x00:0x20] = storage[temp0 + 0x09] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var var1 = 0x1dbd;\n            var var2 = storage[keccak256(memory[0x00:0x40])];\n            var var3 = storage[temp0 + 0x01];\n            var1 = func_1FE1(var2, var3);\n            var temp1 = arg0;\n            memory[0x00:0x20] = storage[temp1 + 0x09] & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            storage[keccak256(memory[0x00:0x40])] = var1;\n            var1 = 0x1dec;\n            var3 = storage[temp1 + 0x01];\n            var2 = storage[0x0d];\n            var1 = func_1FE1(var2, var3);\n            storage[0x0d] = var1;\n            var temp2 = arg0;\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = storage[temp2 + 0x09] & 0x02 ** 0xa0 - 0x01;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = storage[temp2 + 0x01];\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + temp3 - temp4 + 0x40], [0xbf737c87eff4ef74213cb228c9e25ca0c4519947f5fcc4a41b221ba93d76a425]);\n            storage[0x09] = storage[temp2 + 0x01] + storage[0x09];\n            var1 = 0x1e6c;\n            var2 = storage[0x0a];\n            var3 = 0x18e9;\n            var var4 = storage[temp2];\n            var var5 = 0x0de0b6b3a7640000 / 0x14;\n            var3 = func_1AE3(var4, var5);\n            var1 = func_18E9(var2, var3);\n            var temp5 = var1;\n            storage[0x0a] = temp5;\n            var1 = 0x1e80;\n            var3 = storage[arg0 + 0x02];\n            var2 = temp5;\n            var1 = func_1FE1(var2, var3);\n            storage[0x0a] = var1;\n        \n            if (storage[0x04] / 0x02 ** 0xa0 & 0xff) {\n                memory[0x00:0x20] = storage[0x05] & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x0e;\n                storage[keccak256(memory[0x00:0x40])] = storage[0x0a];\n                storage[0x0a] = 0x00;\n            \n                if (storage[0x10] != 0x01) { goto label_1EDF; }\n                else { goto label_1EC6; }\n            } else if (storage[0x10] != 0x01) {\n            label_1EDF:\n                var1 = 0x1ef3;\n                var2 = storage[arg0];\n                var3 = 0x013fbe85edc90000;\n                var1 = func_1AE3(var2, var3);\n                var temp6 = var1;\n                var0 = temp6;\n                var temp7 = memory[0x40:0x60];\n                memory[temp7:temp7 + 0x20] = 0x36ef1abb00000000000000000000000000000000000000000000000000000000;\n                var1 = storage[0x04] & 0x02 ** 0xa0 - 0x01;\n                var2 = 0x36ef1abb;\n                var3 = var0;\n                var4 = temp7 + 0x04;\n                var5 = 0x00;\n                var var6 = memory[0x40:0x60];\n                var var7 = temp7 - var6 + 0x04;\n                var var8 = var6;\n                var var9 = var3;\n                var var10 = var1;\n                var var11 = !address(var10).code.length;\n            \n                if (var11) { revert(memory[0x00:0x00]); }\n            \n            label_1F54:\n                var temp8;\n                temp8, memory[var6:var6 + var5] = address(var10).call.gas(msg.gas).value(var9)(memory[var8:var8 + var7]);\n                var5 = !temp8;\n            \n                if (!var5) {\n                    storage[0x08] = var0 + storage[0x08];\n                    var temp9 = arg0;\n                    storage[0x06] = storage[temp9 + 0x03] + storage[0x06];\n                    var1 = 0x1f97;\n                    var2 = storage[temp9];\n                    var3 = 0x0905438e60010000;\n                    var1 = func_1AE3(var2, var3);\n                    storage[0x07] = var1 + storage[0x07];\n                    var temp10 = arg0 + 0x09;\n                    storage[temp10] = (storage[temp10] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n                    return;\n                } else {\n                    var temp11 = returndata.length;\n                    memory[0x00:0x00 + temp11] = returndata[0x00:0x00 + temp11];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n            label_1EC6:\n                var1 = 0x1ed8;\n                var2 = storage[arg0];\n                var3 = 0x470de4df820000;\n                var1 = func_1AE3(var2, var3);\n                var0 = var1;\n                var temp12 = memory[0x40:0x60];\n                memory[temp12:temp12 + 0x20] = 0x36ef1abb00000000000000000000000000000000000000000000000000000000;\n                var1 = storage[0x04] & 0x02 ** 0xa0 - 0x01;\n                var2 = 0x36ef1abb;\n                var3 = var0;\n                var4 = temp12 + 0x04;\n                var5 = 0x00;\n                var6 = memory[0x40:0x60];\n                var7 = temp12 - var6 + 0x04;\n                var8 = var6;\n                var9 = var3;\n                var10 = var1;\n                var11 = !address(var10).code.length;\n            \n                if (!var11) { goto label_1F54; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x7d64bcb400000000000000000000000000000000000000000000000000000000;\n            var1 = storage[0x04] & 0x02 ** 0xa0 - 0x01;\n            var5 = memory[0x40:0x60];\n            var2 = 0x7d64bcb4;\n            var3 = temp13 + 0x04;\n            var4 = 0x20;\n            var6 = temp13 - var5 + 0x04;\n            var7 = var5;\n            var8 = 0x00;\n            var9 = var1;\n            var10 = !address(var9).code.length;\n        \n            if (var10) { revert(memory[0x00:0x00]); }\n        \n            var temp14;\n            temp14, memory[var5:var5 + var4] = address(var9).call.gas(msg.gas).value(var8)(memory[var7:var7 + var6]);\n            var4 = !temp14;\n        \n            if (!var4) {\n                var1 = memory[0x40:0x60];\n                var2 = returndata.length;\n            \n                if (var2 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                if (memory[var1:var1 + 0x20]) { goto label_1D91; }\n            \n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n                memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x1f;\n                memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x436f756c646e27742066696e697368206d696e74696e6720746f6b656e732100;\n                var temp16 = memory[0x40:0x60];\n                revert(memory[temp16:temp16 + temp15 - temp16 + 0x64]);\n            } else {\n                var temp17 = returndata.length;\n                memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        }\n    }\n    \n    function func_1E66(var arg0, var arg1, var arg2) returns (var r0) {\n        arg1 = arg2 / arg1;\n        r0 = func_1AE3(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1FC8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 <= arg1) { return arg0; }\n    \n        var var1 = arg1;\n        return var1;\n    }\n    \n    function func_1FE1(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_1FF1(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (tx.origin != msg.sender) {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n            memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x39;\n            memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = 0x4f4e4c5920484f4f4d414e5320286f722073637269707473207468617420646f;\n            memory[temp12 + 0x64:temp12 + 0x64 + 0x20] = 0x6e27742075736520736d61727420636f6e747261637473292100000000000000;\n            var temp13 = memory[0x40:0x60];\n            revert(memory[temp13:temp13 + temp12 - temp13 + 0x84]);\n        } else if (arg1 <= 0x016345785d8a0000) {\n        label_21A6:\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = block.blockHash(block.number + ~0x00);\n            memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = block.timestamp;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0 - temp1 + 0x40;\n            memory[0x40:0x60] = temp0 + 0x60;\n            var var2 = temp1;\n            var var3 = temp0 + 0x60;\n            var var4 = var3;\n            var var6 = memory[var2:var2 + 0x20];\n            var var5 = var2 + 0x20;\n            var var7 = var6;\n            var var8 = var4;\n            var var9 = var5;\n        \n            if (var7 < 0x20) {\n            label_20D8:\n                var temp2 = var8;\n                var temp3 = 0x0100 ** (0x20 - var7) + ~0x00;\n                memory[temp2:temp2 + 0x20] = (memory[temp2:temp2 + 0x20] & temp3) | (memory[var9:var9 + 0x20] & ~temp3);\n                var temp4 = memory[0x40:0x60];\n                var0 = keccak256(memory[temp4:temp4 + (var4 + var6) - temp4]);\n                var2 = 0xc8;\n                var3 = var0;\n            \n                if (var3 % var2) { goto label_21A6; }\n            \n                var temp5 = arg0 + 0x02;\n                var temp6 = storage[temp5] / 0x02;\n                var1 = temp6;\n                storage[temp5] = var1;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var2 = 0x2142;\n                var4 = var1;\n                var2 = func_1FE1(var3, var4);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x0e;\n                storage[keccak256(memory[0x00:0x40])] = var2;\n                var2 = 0x215f;\n                var3 = storage[0x0d];\n                var4 = var1;\n                var2 = func_1FE1(var3, var4);\n                storage[0x0d] = var2;\n                var temp7 = var1;\n                storage[0x09] = temp7 + storage[0x09];\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = msg.sender;\n                memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = temp7;\n                var temp9 = memory[0x40:0x60];\n                log(memory[temp9:temp9 + temp8 - temp9 + 0x40], [0xf5d01889f04f77ed9ff391da32496e63ce53f4b0d0c246651254895d04bcd99a]);\n                goto label_21A6;\n            } else {\n            label_20C2:\n                var temp10 = var9;\n                var temp11 = var8;\n                memory[temp11:temp11 + 0x20] = memory[temp10:temp10 + 0x20];\n                var7 = var7 + ~0x1f;\n                var8 = temp11 + 0x20;\n                var9 = temp10 + 0x20;\n            \n                if (var7 < 0x20) { goto label_20D8; }\n                else { goto label_20C2; }\n            }\n        }\n    }\n    \n    function func_21AC(var arg0, var arg1, var arg2) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n    \n        if (storage[0x10] == 0x01) {\n            var1 = 0x01cdda4faccd0000;\n        \n            if (!(arg2 & 0x02 ** 0xa0 - 0x01)) { goto label_2286; }\n            else { goto label_21DF; }\n        } else if (!(arg2 & 0x02 ** 0xa0 - 0x01)) {\n        label_2286:\n            var var6 = 0x229a;\n            var var7 = arg1;\n            var var8 = 0x0905438e60010000 - var1;\n            var6 = func_1AE3(var7, var8);\n            var0 = var6;\n            var6 = 0x22b1;\n            var7 = arg1;\n            var8 = 0x64;\n            var var9 = 0x0de0b6b3a7640000;\n            var6 = func_1E66(var7, var8, var9);\n        \n        label_22B1:\n            var3 = var6;\n            var6 = 0x22c5;\n            var7 = arg1;\n            var8 = 0x0214e8348c4f0000;\n            var6 = func_1AE3(var7, var8);\n            var4 = var6;\n        \n            if (storage[0x10] != 0x01) {\n                var5 = arg1 / 0x14;\n            \n                if (storage[arg0 + 0x03]) {\n                label_2310:\n                    var6 = 0x231a;\n                    var7 = arg0;\n                    var8 = var0;\n                    func_24EF(var7, var8);\n                \n                label_231A:\n                    var6 = 0x2328;\n                    var7 = storage[arg0 + 0x02];\n                    var8 = var3;\n                    var6 = func_1FE1(var7, var8);\n                    var temp0 = arg0;\n                    storage[temp0 + 0x02] = var6;\n                    var7 = storage[temp0 + 0x01];\n                    var6 = 0x233c;\n                    var8 = var4;\n                    var6 = func_1FE1(var7, var8);\n                    storage[arg0 + 0x01] = var6;\n                    var6 = 0x234e;\n                    var7 = storage[0x0b];\n                    var8 = var5;\n                    var6 = func_1FE1(var7, var8);\n                    storage[0x0b] = var6;\n                    return;\n                } else {\n                label_22F9:\n                    var6 = 0x2306;\n                    var7 = storage[arg0 + 0x01];\n                    var8 = var0;\n                    var6 = func_1FE1(var7, var8);\n                    storage[arg0 + 0x01] = var6;\n                    goto label_231A;\n                }\n            } else {\n                var5 = arg1 / 0x04;\n                storage[0x0c] = var5 + storage[0x0c];\n            \n                if (storage[arg0 + 0x03]) { goto label_2310; }\n                else { goto label_22F9; }\n            }\n        } else {\n        label_21DF:\n            var6 = 0x21f3;\n            var7 = arg1;\n            var8 = 0x08e1bc9bf0400000 - var1;\n            var6 = func_1AE3(var7, var8);\n            var0 = var6;\n            var6 = 0x2206;\n            var7 = arg1;\n            var8 = 0x2386f26fc10000;\n            var6 = func_1AE3(var7, var8);\n            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var temp1 = var6;\n            var2 = temp1;\n            var6 = 0x222c;\n            var7 = storage[keccak256(memory[0x00:0x40])];\n            var8 = var2;\n            var6 = func_1FE1(var7, var8);\n            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = var6;\n            var7 = storage[temp2 + 0x01];\n            var6 = 0x2255;\n            var8 = var2;\n            var6 = func_1FE1(var7, var8);\n            memory[0x00:0x20] = arg2 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0e;\n            storage[keccak256(memory[0x00:0x40]) + 0x01] = var6;\n            var6 = 0x227e;\n            var7 = storage[0x0d];\n            var8 = var2;\n            var6 = func_1FE1(var7, var8);\n            storage[0x0d] = var6;\n            var6 = 0x22b1;\n            var7 = arg1;\n            var8 = 0x64;\n            var9 = 0x0de0b6b3a7640000;\n            var6 = func_1E66(var7, var8, var9);\n            goto label_22B1;\n        }\n    }\n    \n    function func_24C7(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (var1) {\n        label_24E4:\n        \n            if (var1) { return var0; }\n            else { revert(memory[0x00:0x00]); }\n        } else {\n            var temp0 = arg1;\n            var0 = arg0 * temp0;\n            var1 = arg0;\n            var var2 = temp0;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2 == var1;\n            goto label_24E4;\n        }\n    }\n    \n    function func_24EF(var arg0, var arg1) {\n        var var0 = 0x24fb;\n        var var1 = storage[0x0d];\n        var var2 = arg1;\n        var0 = func_1FE1(var1, var2);\n        storage[0x0d] = var0;\n    \n        if (storage[arg0 + 0x03]) {\n            var0 = 0x256d;\n            var temp0 = arg0;\n            var1 = storage[temp0 + 0x04];\n            var2 = storage[temp0 + 0x03];\n            var var3 = 0x2564;\n            var var4 = arg1;\n            var var5 = 0x033b2e3c9fd0803ce8000000;\n            var3 = func_24C7(var4, var5);\n            var0 = func_2564(var1, var2, var3);\n            storage[arg0 + 0x04] = var0;\n            return;\n        } else {\n            var0 = 0x2517;\n            var1 = arg1;\n            var2 = storage[arg0 + 0x07];\n            var3 = 0x00;\n            var4 = var2;\n            var5 = 0x1b0d;\n            var var6 = 0x258e;\n            var var7 = var1;\n            var var8 = 0x0de0b6b3a7640000;\n            var6 = func_24C7(var7, var8);\n            var5 = func_258E(var2, var6);\n        \n            if (!var4) { assert(); }\n        \n            var0 = var5 / var4;\n            // Error: Could not resolve jump destination!\n        }\n    }\n    \n    function func_2564(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        arg1 = arg2 / arg1;\n        r0 = func_1FE1(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_258E(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x02;\n        var var1 = arg0;\n        var0 = var1 / var0;\n        r0 = func_1FE1(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2610(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function startNewRound(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (var0 <= temp2) {\n        label_1682:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0 * 0x0b;\n            var0 = 0x1682;\n            var var1 = temp4;\n            var var2 = temp3 + arg1 * 0x0b;\n            var0 = func_265D(var1, var2);\n            goto label_1682;\n        }\n    }\n    \n    function func_264F(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        storage[temp0] = 0x00;\n        arg1 = temp0 + 0x01;\n    \n        if (arg0 <= arg1) {\n            r0 = func_2610(arg0, arg1);\n            // Error: Could not resolve method call return address!\n        } else {\n            r0 = func_264F(arg0, arg1);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_265D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x265a;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_2610(arg1, var0); }\n    \n    label_266C:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        storage[temp2 + 0x01] = 0x00;\n        storage[temp2 + 0x02] = 0x00;\n        storage[temp2 + 0x03] = 0x00;\n        storage[temp2 + 0x04] = 0x00;\n        storage[temp2 + 0x05] = 0x00;\n        storage[temp2 + 0x06] = 0x00;\n        storage[temp2 + 0x07] = 0x00;\n        storage[temp2 + 0x08] = 0x00;\n        var temp3 = temp2 + 0x09;\n        storage[temp3] = storage[temp3] & ~0xffffffffffffffffffffffffffffffffffffffffff;\n        var0 = temp2 + 0x0b;\n    \n        if (arg1 > var0) { goto label_266C; }\n    \n        arg0 = func_2610(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 41.969566345214844,
	"usage": {
		"completion_tokens": 542,
		"prompt_tokens": 26124,
		"total_tokens": 26666
	}
}