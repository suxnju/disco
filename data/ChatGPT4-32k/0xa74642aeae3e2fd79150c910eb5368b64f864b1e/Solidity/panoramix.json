{
	"address": "0xa74642aeae3e2fd79150c910eb5368b64f864b1e",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\nconst MULTIPLIER = 1000000000 * 10^18\nconst DEV_DIVISOR = 20\nconst TIME_PER_SHARE = 300\nconst STARTING_SHARE_PRICE = 10^15\nconst DIVIDENDS_FRACTION = (25 * 10^12 * 3600)\nconst SOFT_DEADLINE_DURATION = (24 * 3600)\nconst REFERRAL_FRACTION = 10^16\nconst RETURNS_FRACTION = 65 * 10^16\nconst HARD_DEADLINE_DURATION = (720 * 24 * 3600)\nconst JACKPOT_SEED_FRACTION = 5 * 10^16\nconst JACKPOT_FRACTION = 15 * 10^16\nconst AIRDROP_FRACTION = 10^16\nconst DEV_FRACTION = 5 * 10^16\nconst PRICE_INCREASE_PERIOD = 3600\n\ndef storage:\n  authorityAddress is address at storage 0\n  owner is address at storage 1\n  ipfsHash is array of uint256 at storage 2\n  ipfsHashType is array of uint256 at storage 3\n  stor4 is uint8 at storage 4 offset 160\n  tokenAddress is address at storage 4\n  nextVersionAddress is address at storage 5\n  totalSharesSold is uint256 at storage 6\n  totalEarningsGenerated is uint256 at storage 7\n  totalDividendsPaid is uint256 at storage 8\n  totalJackpotsWon is uint256 at storage 9\n  jackpotSeed is uint256 at storage 10\n  devBalance is uint256 at storage 11\n  raisedICO is uint256 at storage 12\n  unclaimedReturns is uint256 at storage 13\n  stor14 is mapping of struct at storage 14\n  latestRoundID is uint256 at storage 15\n  roundInfo is array of struct at storage 16\n\ndef raisedICO(): # not payable\n  return raisedICO\n\ndef nextVersion(): # not payable\n  return nextVersionAddress\n\ndef unclaimedReturns(): # not payable\n  return unclaimedReturns\n\ndef ipfsHashType(): # not payable\n  return ipfsHashType[0 len ipfsHashType.length]\n\ndef totalEarningsGenerated(): # not payable\n  return totalEarningsGenerated\n\ndef roundInfo(uint256 roundID): # not payable\n  require roundID < roundInfo.length\n  require 65 * 10^16 * roundInfo[roundID].field_0 / 65 * 10^16 == roundInfo[roundID].field_0\n  require (65 * 10^16 * roundInfo[roundID].field_0) + 5 * 10^17 >= 65 * 10^16 * roundInfo[roundID].field_0\n  return roundInfo[roundID].field_2304, \n         roundInfo[roundID].field_1792,\n         roundInfo[roundID].field_256,\n         roundInfo[roundID].field_512,\n         roundInfo[roundID].field_768,\n         roundInfo[roundID].field_0,\n         (65 * 10^16 * roundInfo[roundID].field_0) + 5 * 10^17 / 10^18,\n         roundInfo[roundID].field_1280,\n         roundInfo[roundID].field_1536,\n         bool(roundInfo[roundID].field_2464)\n\ndef jackpotSeed(): # not payable\n  return jackpotSeed\n\ndef totalSharesSold(): # not payable\n  return totalSharesSold\n\ndef owner(): # not payable\n  return owner\n\ndef authority(): # not payable\n  return authorityAddress\n\ndef upgraded(): # not payable\n  return bool(stor4)\n\ndef ipfsHash(): # not payable\n  return ipfsHash[0 len ipfsHash.length]\n\ndef totalDividendsPaid(): # not payable\n  return totalDividendsPaid\n\ndef devBalance(): # not payable\n  return devBalance\n\ndef totalJackpotsWon(): # not payable\n  return totalJackpotsWon\n\ndef latestRoundID(): # not payable\n  return latestRoundID\n\ndef token(): # not payable\n  return tokenAddress\n\n#\n#  Regular functions\n#\n\ndef hasReturns(address investor, uint256 roundID): # not payable\n  require roundID < roundInfo.length\n  return (roundInfo[roundID].field_1024 > stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0)\n\ndef setOwner(address _newOwner): # not payable\n  if caller != this.address:\n      if owner != caller:\n          require authorityAddress\n          require ext_code.size(authorityAddress)\n          call authorityAddress.canCall(address _src, address _dst, bytes4 _sig) with:\n               gas gas_remaining wei\n              args caller, this.address, call.func_hash\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          require ext_call.return_data[0]\n  owner = _newOwner\n  log LogSetOwner(address owner=_newOwner)\n\ndef setAuthority(address authority_): # not payable\n  if caller != this.address:\n      if owner != caller:\n          require authorityAddress\n          require ext_code.size(authorityAddress)\n          call authorityAddress.canCall(address _src, address _dst, bytes4 _sig) with:\n               gas gas_remaining wei\n              args caller, this.address, call.func_hash\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          require ext_call.return_data[0]\n  authorityAddress = authority_\n  log LogSetAuthority(address authority=authority_)\n\ndef withdrawDevShare(): # not payable\n  if caller != this.address:\n      if owner != caller:\n          require authorityAddress\n          require ext_code.size(authorityAddress)\n          call authorityAddress.canCall(address _src, address _dst, bytes4 _sig) with:\n               gas gas_remaining wei\n              args caller, this.address, call.func_hash\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          require ext_call.return_data[0]\n  devBalance = 0\n  call caller with:\n     value devBalance wei\n       gas 2300 * is_zero(value) wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n\ndef upgrade(address new_address): # not payable\n  if caller != this.address:\n      if owner != caller:\n          require authorityAddress\n          require ext_code.size(authorityAddress)\n          call authorityAddress.canCall(address _src, address _dst, bytes4 _sig) with:\n               gas gas_remaining wei\n              args caller, this.address, call.func_hash\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          require ext_call.return_data[0]\n  if not new_address:\n      revert with 0, 'Invalid Address!'\n  if stor4:\n      revert with 0, 'Already upgraded!'\n  stor4 = 1\n  nextVersionAddress = new_address\n  require latestRoundID < roundInfo.length\n  if roundInfo[stor15].field_2464:\n      stor14[stor5].field_0 = jackpotSeed\n      jackpotSeed = 0\n\ndef totalsInfo(): # not payable\n  require latestRoundID < roundInfo.length\n  if roundInfo[stor15].field_1536 <= block.timestamp:\n      return totalEarningsGenerated, totalSharesSold, totalDividendsPaid, totalJackpotsWon\n  require 65 * 10^16 * roundInfo[stor15].field_0 / 65 * 10^16 == roundInfo[stor15].field_0\n  require (65 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 >= 65 * 10^16 * roundInfo[stor15].field_0\n  require 25 * 10^12 * 3600 * roundInfo[stor15].field_0 / 25 * 10^12 * 3600 == roundInfo[stor15].field_0\n  require (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 >= 25 * 10^12 * 3600 * roundInfo[stor15].field_0\n  return totalEarningsGenerated + ((65 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18), \n         totalSharesSold + roundInfo[stor15].field_768,\n         totalDividendsPaid + ((25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18),\n         totalJackpotsWon\n\ndef setIPFSHash(string _type, string _hash): # not payable\n  mem[128 len _type.length] = _type[all]\n  mem[ceil32(_type.length) + 128] = _hash.length\n  mem[ceil32(_type.length) + 160 len _hash.length] = _hash[all]\n  if caller != this.address:\n      if owner != caller:\n          require authorityAddress\n          require ext_code.size(authorityAddress)\n          call authorityAddress.canCall(address _src, address _dst, bytes4 _sig) with:\n               gas gas_remaining wei\n              args caller, this.address, call.func_hash\n          if not ext_call.success:\n              revert with ext_call.return_data[0 len return_data.size]\n          require return_data.size >= 32\n          require ext_call.return_data[0]\n  ipfsHashType[] = Array(len=_type.length, data=_type[all])\n  ipfsHash[] = Array(len=_hash.length, data=_hash[all])\n  mem[ceil32(_type.length) + ceil32(_hash.length) + 160] = 64\n  mem[ceil32(_type.length) + ceil32(_hash.length) + 256 len ceil32(_type.length)] = _type[all], mem[_type.length + 128 len ceil32(_type.length) - _type.length]\n  mem[_type.length + ceil32(_type.length) + ceil32(_hash.length) + 256] = _hash.length\n  mem[_type.length + ceil32(_type.length) + ceil32(_hash.length) + 288 len ceil32(_hash.length)] = _hash[all], mem[ceil32(_type.length) + _hash.length + 160 len ceil32(_hash.length) - _hash.length]\n  if not _hash.length % 32:\n      log IPFSHashSet(\n            string _type=Array(len=_type.length, data=Mask(8 * ceil32(_type.length), -(8 * ceil32(_type.length)) + 256, _type[all], mem[_type.length + 128 len ceil32(_type.length) - _type.length]) << (8 * ceil32(_type.length)) - 256, mem[(2 * ceil32(_type.length)) + ceil32(_hash.length) + 256 len _hash.length + _type.length + -ceil32(_type.length) + 32]),\n            string _hash=_type.length + 96)\n  else:\n      mem[floor32(_hash.length) + _type.length + ceil32(_type.length) + ceil32(_hash.length) + 288] = mem[floor32(_hash.length) + _type.length + ceil32(_type.length) + ceil32(_hash.length) + -(_hash.length % 32) + 320 len _hash.length % 32]\n      log IPFSHashSet(\n            string _type=Array(len=_type.length, data=Mask(8 * ceil32(_type.length), -(8 * ceil32(_type.length)) + 256, _type[all], mem[_type.length + 128 len ceil32(_type.length) - _type.length]) << (8 * ceil32(_type.length)) - 256, mem[(2 * ceil32(_type.length)) + ceil32(_hash.length) + 256 len floor32(_hash.length) + _type.length + -ceil32(_type.length) + 64]),\n            string _hash=_type.length + 96)\n\ndef updateMyReturns(uint256 roundID): # not payable\n  require roundID < roundInfo.length\n  if stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n      if stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n          require roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[roundID].field_1024\n          if roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n              if stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                  require stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                  require (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_0\n                  if (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_256) / 1000000000 * 10^18 > 0:\n                      require stor14[caller].field_0 + ((roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_256) / 1000000000 * 10^18) >= stor14[caller].field_0\n                      stor14[caller].field_0 += (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_256) / 1000000000 * 10^18\n      stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[roundID].field_1024\n\ndef finalizeLastRound(): # not payable\n  require latestRoundID < roundInfo.length\n  if roundInfo[stor15].field_2464:\n      revert with 0, 'Already finalized!'\n  if block.timestamp <= roundInfo[stor15].field_1536:\n      revert with 0, 'Round still running!'\n  if 1 == roundInfo.length:\n      require ext_code.size(tokenAddress)\n      call tokenAddress.finishMinting() with:\n           gas gas_remaining wei\n      if not ext_call.success:\n          revert with ext_call.return_data[0 len return_data.size]\n      require return_data.size >= 32\n      if not ext_call.return_data[0]:\n          revert with 0, 'Couldn't finish minting tokens!'\n  require stor14[stor16[stor15].field_2304].field_0 + roundInfo[stor15].field_256 >= stor14[stor16[stor15].field_2304].field_0\n  stor14[stor16[stor15].field_2304].field_0 += roundInfo[stor15].field_256\n  require unclaimedReturns + roundInfo[stor15].field_256 >= unclaimedReturns\n  unclaimedReturns += roundInfo[stor15].field_256\n  log JackpotWon(\n        address by=roundInfo[stor15].field_2304,\n        uint256 amount=roundInfo[stor15].field_256)\n  totalJackpotsWon += roundInfo[stor15].field_256\n  require 5 * 10^16 * roundInfo[stor15].field_0 / 5 * 10^16 == roundInfo[stor15].field_0\n  require (5 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 >= 5 * 10^16 * roundInfo[stor15].field_0\n  require jackpotSeed + ((5 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18) >= jackpotSeed\n  jackpotSeed += (5 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n  require roundInfo[stor15].field_512 >= 0\n  jackpotSeed = jackpotSeed + ((5 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_512\n  if stor4:\n      stor14[stor5].field_0 = jackpotSeed\n      jackpotSeed = 0\n  if roundInfo.length != 1:\n      require 25 * 10^12 * 3600 * roundInfo[stor15].field_0 / 25 * 10^12 * 3600 == roundInfo[stor15].field_0\n      require (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 >= 25 * 10^12 * 3600 * roundInfo[stor15].field_0\n      require ext_code.size(tokenAddress)\n      call tokenAddress.disburseDividends() with:\n         value (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18 wei\n           gas gas_remaining wei\n      if not ext_call.success:\n          revert with ext_call.return_data[0 len return_data.size]\n      totalDividendsPaid += (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n  else:\n      require 2 * 10^16 * roundInfo[stor15].field_0 / 2 * 10^16 == roundInfo[stor15].field_0\n      require (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 >= 2 * 10^16 * roundInfo[stor15].field_0\n      require ext_code.size(tokenAddress)\n      call tokenAddress.disburseDividends() with:\n         value (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18 wei\n           gas gas_remaining wei\n      if not ext_call.success:\n          revert with ext_call.return_data[0 len return_data.size]\n      totalDividendsPaid += (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n  totalSharesSold += roundInfo[stor15].field_768\n  require 65 * 10^16 * roundInfo[stor15].field_0 / 65 * 10^16 == roundInfo[stor15].field_0\n  require (65 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 >= 65 * 10^16 * roundInfo[stor15].field_0\n  totalEarningsGenerated += (65 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n  roundInfo[stor15].field_2464 = 1\n\ndef withdrawReturns(): # not payable\n  require latestRoundID < roundInfo.length\n  if roundInfo.length > 1:\n      require latestRoundID - 1 < roundInfo.length\n      if roundInfo[stor15].field_0 > stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_0:\n          require latestRoundID - 1 < roundInfo.length\n          if stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_256:\n              if stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_256:\n                  require roundInfo[stor15].field_0 - stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_0 <= roundInfo[stor15].field_0\n                  if roundInfo[stor15].field_0 - stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_0:\n                      if stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_256:\n                          require stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_256\n                          require (roundInfo[stor15].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_256 == roundInfo[stor15].field_0 - stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_0\n                          if (roundInfo[stor15].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_256) / 1000000000 * 10^18 > 0:\n                              require stor14[caller].field_0 + ((roundInfo[stor15].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_256) / 1000000000 * 10^18) >= stor14[caller].field_0\n                              stor14[caller].field_0 += (roundInfo[stor15].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_256) / 1000000000 * 10^18\n              stor[(11 * stor15) + ('name', 'roundInfo', 16) - 1][caller].field_0 = roundInfo[stor15].field_0\n  if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n      if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n          require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n          if roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n              if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                  require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                  require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n                  if (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / 1000000000 * 10^18 > 0:\n                      require stor14[caller].field_0 + ((roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / 1000000000 * 10^18) >= stor14[caller].field_0\n                      stor14[caller].field_0 += (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / 1000000000 * 10^18\n      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n  if stor14[caller].field_0 <= 0:\n      revert with 0, 'Nothing to withdraw!'\n  require unclaimedReturns - stor14[caller].field_0 <= unclaimedReturns\n  unclaimedReturns -= stor14[caller].field_0\n  stor14[caller].field_0 = 0\n  stor14[caller].field_256 = 0\n  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n  call caller with:\n     value stor14[caller].field_0 wei\n       gas 2300 * is_zero(value) wei\n  if not ext_call.success:\n      revert with ext_call.return_data[0 len return_data.size]\n  log ReturnsWithdrawn(\n        address by=stor14[caller].field_0,\n        uint256 amount=caller)\n\ndef reinvestReturns(uint256 value): # not payable\n  require latestRoundID < roundInfo.length\n  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n      if value > stor14[caller].field_0:\n          revert with 0, 'Can't spend what you don't have'\n      require stor14[caller].field_0 - value <= stor14[caller].field_0\n      stor14[caller].field_0 -= value\n      if stor14[caller].field_256 > stor14[caller].field_0 - value:\n          stor14[caller].field_256 = stor14[caller].field_0 - value\n      require unclaimedReturns - value <= unclaimedReturns\n      unclaimedReturns -= value\n      if roundInfo[stor15].field_1536 < block.timestamp:\n          revert with 0, 'After deadline!'\n      if value < roundInfo[stor15].field_1792 / 10:\n          revert with 0, 'Not enough Ether!'\n      require roundInfo[stor15].field_0 + value >= roundInfo[stor15].field_0\n      roundInfo[stor15].field_0 += value\n      if value < roundInfo[stor15].field_1792:\n          if caller != tx.origin:\n              revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                          'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n          if value <= 10^17:\n              if roundInfo.length != 1:\n                  require 65 * 10^16 * value / 65 * 10^16 == value\n                  require (65 * 10^16 * value) + 5 * 10^17 >= 65 * 10^16 * value\n                  require 10^16 * value / 10^16 == value\n                  require (10^16 * value) + 5 * 10^17 >= 10^16 * value\n                  require 15 * 10^16 * value / 15 * 10^16 == value\n              else:\n                  require 52 * 10^16 * value / 52 * 10^16 == value\n                  require (52 * 10^16 * value) + 5 * 10^17 >= 52 * 10^16 * value\n                  require 10^16 * value / 10^16 == value\n                  require (10^16 * value) + 5 * 10^17 >= 10^16 * value\n      else:\n          roundInfo[stor15].field_2304 = caller\n          if caller != tx.origin:\n              revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                          'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n          if value <= 10^17:\n              if 1 == roundInfo.length:\n                  require 52 * 10^16 * value / 52 * 10^16 == value\n                  require (52 * 10^16 * value) + 5 * 10^17 >= 52 * 10^16 * value\n              else:\n                  require 65 * 10^16 * value / 65 * 10^16 == value\n                  require (65 * 10^16 * value) + 5 * 10^17 >= 65 * 10^16 * value\n              require 10^16 * value / 10^16 == value\n              require (10^16 * value) + 5 * 10^17 >= 10^16 * value\n  else:\n      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n          if value > stor14[caller].field_0:\n              revert with 0, 'Can't spend what you don't have'\n          require stor14[caller].field_0 - value <= stor14[caller].field_0\n          stor14[caller].field_0 -= value\n          if stor14[caller].field_256 > stor14[caller].field_0 - value:\n              stor14[caller].field_256 = stor14[caller].field_0 - value\n          require unclaimedReturns - value <= unclaimedReturns\n          unclaimedReturns -= value\n          if roundInfo[stor15].field_1536 < block.timestamp:\n              revert with 0, 'After deadline!'\n          if value < roundInfo[stor15].field_1792 / 10:\n              revert with 0, 'Not enough Ether!'\n          require roundInfo[stor15].field_0 + value >= roundInfo[stor15].field_0\n          roundInfo[stor15].field_0 += value\n          if value >= roundInfo[stor15].field_1792:\n              roundInfo[stor15].field_2304 = caller\n          if caller != tx.origin:\n              revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                          'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n          if value <= 10^17:\n              if roundInfo.length != 1:\n                  require 65 * 10^16 * value / 65 * 10^16 == value\n                  require (65 * 10^16 * value) + 5 * 10^17 >= 65 * 10^16 * value\n              else:\n                  require 52 * 10^16 * value / 52 * 10^16 == value\n                  require (52 * 10^16 * value) + 5 * 10^17 >= 52 * 10^16 * value\n              require 10^16 * value / 10^16 == value\n              require (10^16 * value) + 5 * 10^17 >= 10^16 * value\n      else:\n          require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n          if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n              stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n              if value > stor14[caller].field_0:\n                  revert with 0, 'Can't spend what you don't have'\n              require stor14[caller].field_0 - value <= stor14[caller].field_0\n              stor14[caller].field_0 -= value\n              if stor14[caller].field_256 > stor14[caller].field_0 - value:\n                  stor14[caller].field_256 = stor14[caller].field_0 - value\n              require unclaimedReturns - value <= unclaimedReturns\n              unclaimedReturns -= value\n              if roundInfo[stor15].field_1536 < block.timestamp:\n                  revert with 0, 'After deadline!'\n              if value < roundInfo[stor15].field_1792 / 10:\n                  revert with 0, 'Not enough Ether!'\n              require roundInfo[stor15].field_0 + value >= roundInfo[stor15].field_0\n              roundInfo[stor15].field_0 += value\n              if value < roundInfo[stor15].field_1792:\n                  if caller != tx.origin:\n                      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                  'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                  if value <= 10^17:\n                      if roundInfo.length != 1:\n                          require 65 * 10^16 * value / 65 * 10^16 == value\n                          require (65 * 10^16 * value) + 5 * 10^17 >= 65 * 10^16 * value\n                      else:\n                          require 52 * 10^16 * value / 52 * 10^16 == value\n                          require (52 * 10^16 * value) + 5 * 10^17 >= 52 * 10^16 * value\n                      require 10^16 * value / 10^16 == value\n                      require (10^16 * value) + 5 * 10^17 >= 10^16 * value\n              else:\n                  roundInfo[stor15].field_2304 = caller\n                  if caller != tx.origin:\n                      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                  'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                  if value <= 10^17:\n                      if roundInfo.length != 1:\n                          require 65 * 10^16 * value / 65 * 10^16 == value\n                          require (65 * 10^16 * value) + 5 * 10^17 >= 65 * 10^16 * value\n                          require 10^16 * value / 10^16 == value\n                          require (10^16 * value) + 5 * 10^17 >= 10^16 * value\n                      else:\n                          require 52 * 10^16 * value / 52 * 10^16 == value\n                          require (52 * 10^16 * value) + 5 * 10^17 >= 52 * 10^16 * value\n                          require 10^16 * value / 10^16 == value\n          else:\n              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                  if value > stor14[caller].field_0:\n                      revert with 0, 'Can't spend what you don't have'\n                  require stor14[caller].field_0 - value <= stor14[caller].field_0\n                  stor14[caller].field_0 -= value\n                  if stor14[caller].field_256 > stor14[caller].field_0 - value:\n                      stor14[caller].field_256 = stor14[caller].field_0 - value\n                  require unclaimedReturns - value <= unclaimedReturns\n                  unclaimedReturns -= value\n                  if roundInfo[stor15].field_1536 < block.timestamp:\n                      revert with 0, 'After deadline!'\n                  if value < roundInfo[stor15].field_1792 / 10:\n                      revert with 0, 'Not enough Ether!'\n                  require roundInfo[stor15].field_0 + value >= roundInfo[stor15].field_0\n                  roundInfo[stor15].field_0 += value\n                  if value < roundInfo[stor15].field_1792:\n                      if caller != tx.origin:\n                          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                      if value <= 10^17:\n                          if 1 == roundInfo.length:\n                              require 52 * 10^16 * value / 52 * 10^16 == value\n                              require (52 * 10^16 * value) + 5 * 10^17 >= 52 * 10^16 * value\n                          else:\n                              require 65 * 10^16 * value / 65 * 10^16 == value\n                              require (65 * 10^16 * value) + 5 * 10^17 >= 65 * 10^16 * value\n                  else:\n                      roundInfo[stor15].field_2304 = caller\n                      if caller != tx.origin:\n                          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                      if value <= 10^17:\n                          if roundInfo.length != 1:\n                              require 65 * 10^16 * value / 65 * 10^16 == value\n                              require (65 * 10^16 * value) + 5 * 10^17 >= 65 * 10^16 * value\n                          else:\n                              require 52 * 10^16 * value / 52 * 10^16 == value\n                              require (52 * 10^16 * value) + 5 * 10^17 >= 52 * 10^16 * value\n              else:\n                  require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                  require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n                  if (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / 1000000000 * 10^18 > 0:\n                      require stor14[caller].field_0 + ((roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / 1000000000 * 10^18) >= stor14[caller].field_0\n                      stor14[caller].field_0 += (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / 1000000000 * 10^18\n                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                  if value > stor14[caller].field_0:\n                      revert with 0, 'Can't spend what you don't have'\n                  require stor14[caller].field_0 - value <= stor14[caller].field_0\n                  stor14[caller].field_0 -= value\n                  if stor14[caller].field_256 > stor14[caller].field_0 - value:\n                      stor14[caller].field_256 = stor14[caller].field_0 - value\n                  require unclaimedReturns - value <= unclaimedReturns\n                  unclaimedReturns -= value\n                  if roundInfo[stor15].field_1536 < block.timestamp:\n                      revert with 0, 'After deadline!'\n                  if value < roundInfo[stor15].field_1792 / 10:\n                      revert with 0, 'Not enough Ether!'\n                  require roundInfo[stor15].field_0 + value >= roundInfo[stor15].field_0\n                  roundInfo[stor15].field_0 += value\n                  if value >= roundInfo[stor15].field_1792:\n                      roundInfo[stor15].field_2304 = caller\n                  if caller != tx.origin:\n                      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                  'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                  if value <= 10^17:\n                      if roundInfo.length != 1:\n                          require 65 * 10^16 * value / 65 * 10^16 == value\n                          require (65 * 10^16 * value) + 5 * 10^17 >= 65 * 10^16 * value\n                      else:\n                          require 52 * 10^16 * value / 52 * 10^16 == value\n                          require (52 * 10^16 * value) + 5 * 10^17 >= 52 * 10^16 * value\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef reinvestReturns(uint256 value, address ref): # not payable\n  require latestRoundID < roundInfo.length\n  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n      if value > stor14[caller].field_0:\n          revert with 0, 'Can't spend what you don't have'\n      require stor14[caller].field_0 - value <= stor14[caller].field_0\n      stor14[caller].field_0 -= value\n      if stor14[caller].field_256 > stor14[caller].field_0 - value:\n          stor14[caller].field_256 = stor14[caller].field_0 - value\n      require unclaimedReturns - value <= unclaimedReturns\n      unclaimedReturns -= value\n      if roundInfo[stor15].field_1536 < block.timestamp:\n          revert with 0, 'After deadline!'\n      if value < roundInfo[stor15].field_1792 / 10:\n          revert with 0, 'Not enough Ether!'\n      require roundInfo[stor15].field_0 + value >= roundInfo[stor15].field_0\n      roundInfo[stor15].field_0 += value\n      if value < roundInfo[stor15].field_1792:\n          if caller != tx.origin:\n              revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                          'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n          if value <= 10^17:\n              if roundInfo.length != 1:\n                  if not ref:\n                      require 65 * 10^16 * value / 65 * 10^16 == value\n                      require (65 * 10^16 * value) + 5 * 10^17 >= 65 * 10^16 * value\n                      require 10^16 * value / 10^16 == value\n                  else:\n                      require 64 * 10^16 * value / 64 * 10^16 == value\n                      require (64 * 10^16 * value) + 5 * 10^17 >= 64 * 10^16 * value\n                      require 10^16 * value / 10^16 == value\n                      require (10^16 * value) + 5 * 10^17 >= 10^16 * value\n              else:\n                  if not ref:\n                      require 52 * 10^16 * value / 52 * 10^16 == value\n                      require (52 * 10^16 * value) + 5 * 10^17 >= 52 * 10^16 * value\n                      require 10^16 * value / 10^16 == value\n                  else:\n                      require 51 * 10^16 * value / 51 * 10^16 == value\n                      require (51 * 10^16 * value) + 5 * 10^17 >= 51 * 10^16 * value\n                      require 10^16 * value / 10^16 == value\n                      require (10^16 * value) + 5 * 10^17 >= 10^16 * value\n      else:\n          roundInfo[stor15].field_2304 = caller\n          if caller != tx.origin:\n              revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                          'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n          if value <= 10^17:\n              if roundInfo.length != 1:\n                  if not ref:\n                      require 65 * 10^16 * value / 65 * 10^16 == value\n                      require (65 * 10^16 * value) + 5 * 10^17 >= 65 * 10^16 * value\n                      require 10^16 * value / 10^16 == value\n                  else:\n                      require 64 * 10^16 * value / 64 * 10^16 == value\n                      require (64 * 10^16 * value) + 5 * 10^17 >= 64 * 10^16 * value\n                      require 10^16 * value / 10^16 == value\n                      require (10^16 * value) + 5 * 10^17 >= 10^16 * value\n              else:\n                  if not ref:\n                      require 52 * 10^16 * value / 52 * 10^16 == value\n                      require (52 * 10^16 * value) + 5 * 10^17 >= 52 * 10^16 * value\n                  else:\n                      require 51 * 10^16 * value / 51 * 10^16 == value\n                      require (51 * 10^16 * value) + 5 * 10^17 >= 51 * 10^16 * value\n                  require 10^16 * value / 10^16 == value\n  else:\n      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n          if value > stor14[caller].field_0:\n              revert with 0, 'Can't spend what you don't have'\n          require stor14[caller].field_0 - value <= stor14[caller].field_0\n          stor14[caller].field_0 -= value\n          if stor14[caller].field_256 > stor14[caller].field_0 - value:\n              stor14[caller].field_256 = stor14[caller].field_0 - value\n          require unclaimedReturns - value <= unclaimedReturns\n          unclaimedReturns -= value\n          if roundInfo[stor15].field_1536 < block.timestamp:\n              revert with 0, 'After deadline!'\n          if value < roundInfo[stor15].field_1792 / 10:\n              revert with 0, 'Not enough Ether!'\n          require roundInfo[stor15].field_0 + value >= roundInfo[stor15].field_0\n          roundInfo[stor15].field_0 += value\n          if value < roundInfo[stor15].field_1792:\n              if caller != tx.origin:\n                  revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                              'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n              if value <= 10^17:\n                  if roundInfo.length != 1:\n                      if not ref:\n                          require 65 * 10^16 * value / 65 * 10^16 == value\n                          require (65 * 10^16 * value) + 5 * 10^17 >= 65 * 10^16 * value\n                      else:\n                          require 64 * 10^16 * value / 64 * 10^16 == value\n                          require (64 * 10^16 * value) + 5 * 10^17 >= 64 * 10^16 * value\n                          require 10^16 * value / 10^16 == value\n                  else:\n                      if not ref:\n                          require 52 * 10^16 * value / 52 * 10^16 == value\n                          require (52 * 10^16 * value) + 5 * 10^17 >= 52 * 10^16 * value\n                      else:\n                          require 51 * 10^16 * value / 51 * 10^16 == value\n                          require (51 * 10^16 * value) + 5 * 10^17 >= 51 * 10^16 * value\n                          require 10^16 * value / 10^16 == value\n          else:\n              roundInfo[stor15].field_2304 = caller\n              if caller != tx.origin:\n                  revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                              'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n              if value <= 10^17:\n                  if roundInfo.length != 1:\n                      if not ref:\n                          require 65 * 10^16 * value / 65 * 10^16 == value\n                          require (65 * 10^16 * value) + 5 * 10^17 >= 65 * 10^16 * value\n                      else:\n                          require 64 * 10^16 * value / 64 * 10^16 == value\n                          require (64 * 10^16 * value) + 5 * 10^17 >= 64 * 10^16 * value\n                          require 10^16 * value / 10^16 == value\n                  else:\n                      if not ref:\n                          require 52 * 10^16 * value / 52 * 10^16 == value\n                          require (52 * 10^16 * value) + 5 * 10^17 >= 52 * 10^16 * value\n                      else:\n                          require 51 * 10^16 * value / 51 * 10^16 == value\n                          require (51 * 10^16 * value) + 5 * 10^17 >= 51 * 10^16 * value\n      else:\n          require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n          if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n              stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n              if value > stor14[caller].field_0:\n                  revert with 0, 'Can't spend what you don't have'\n              require stor14[caller].field_0 - value <= stor14[caller].field_0\n              stor14[caller].field_0 -= value\n              if stor14[caller].field_256 > stor14[caller].field_0 - value:\n                  stor14[caller].field_256 = stor14[caller].field_0 - value\n              require unclaimedReturns - value <= unclaimedReturns\n              unclaimedReturns -= value\n              if roundInfo[stor15].field_1536 < block.timestamp:\n                  revert with 0, 'After deadline!'\n              if value < roundInfo[stor15].field_1792 / 10:\n                  revert with 0, 'Not enough Ether!'\n              require roundInfo[stor15].field_0 + value >= roundInfo[stor15].field_0\n              roundInfo[stor15].field_0 += value\n              if value >= roundInfo[stor15].field_1792:\n                  roundInfo[stor15].field_2304 = caller\n              if caller != tx.origin:\n                  revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                              'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n              if value <= 10^17:\n                  if roundInfo.length != 1:\n                      if not ref:\n                          require 65 * 10^16 * value / 65 * 10^16 == value\n                          require (65 * 10^16 * value) + 5 * 10^17 >= 65 * 10^16 * value\n                      else:\n                          require 64 * 10^16 * value / 64 * 10^16 == value\n                          require (64 * 10^16 * value) + 5 * 10^17 >= 64 * 10^16 * value\n                  else:\n                      if not ref:\n                          require 52 * 10^16 * value / 52 * 10^16 == value\n                          require (52 * 10^16 * value) + 5 * 10^17 >= 52 * 10^16 * value\n                      else:\n                          require 51 * 10^16 * value / 51 * 10^16 == value\n                          require (51 * 10^16 * value) + 5 * 10^17 >= 51 * 10^16 * value\n          else:\n              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                  if value > stor14[caller].field_0:\n                      revert with 0, 'Can't spend what you don't have'\n                  require stor14[caller].field_0 - value <= stor14[caller].field_0\n                  stor14[caller].field_0 -= value\n                  if stor14[caller].field_256 > stor14[caller].field_0 - value:\n                      stor14[caller].field_256 = stor14[caller].field_0 - value\n                  require unclaimedReturns - value <= unclaimedReturns\n                  unclaimedReturns -= value\n                  if roundInfo[stor15].field_1536 < block.timestamp:\n                      revert with 0, 'After deadline!'\n                  if value < roundInfo[stor15].field_1792 / 10:\n                      revert with 0, 'Not enough Ether!'\n                  require roundInfo[stor15].field_0 + value >= roundInfo[stor15].field_0\n                  roundInfo[stor15].field_0 += value\n                  if value < roundInfo[stor15].field_1792:\n                      if caller != tx.origin:\n                          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                      if value <= 10^17:\n                          if roundInfo.length != 1:\n                              if not ref:\n                                  require 65 * 10^16 * value / 65 * 10^16 == value\n                                  require (65 * 10^16 * value) + 5 * 10^17 >= 65 * 10^16 * value\n                              else:\n                                  require 64 * 10^16 * value / 64 * 10^16 == value\n                                  require (64 * 10^16 * value) + 5 * 10^17 >= 64 * 10^16 * value\n                          else:\n                              if not ref:\n                                  require 52 * 10^16 * value / 52 * 10^16 == value\n                              else:\n                                  require 51 * 10^16 * value / 51 * 10^16 == value\n                  else:\n                      roundInfo[stor15].field_2304 = caller\n                      if caller != tx.origin:\n                          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                      if value <= 10^17:\n                          if 1 == roundInfo.length:\n                              if not ref:\n                                  require 52 * 10^16 * value / 52 * 10^16 == value\n                              else:\n                                  require 51 * 10^16 * value / 51 * 10^16 == value\n                          else:\n                              if not ref:\n                                  require 65 * 10^16 * value / 65 * 10^16 == value\n                              else:\n                                  require 64 * 10^16 * value / 64 * 10^16 == value\n              else:\n                  require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                  require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n                  if (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / 1000000000 * 10^18 <= 0:\n                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                      if value > stor14[caller].field_0:\n                          revert with 0, 'Can't spend what you don't have'\n                      require stor14[caller].field_0 - value <= stor14[caller].field_0\n                      stor14[caller].field_0 -= value\n                      if stor14[caller].field_256 > stor14[caller].field_0 - value:\n                          stor14[caller].field_256 = stor14[caller].field_0 - value\n                      require unclaimedReturns - value <= unclaimedReturns\n                      unclaimedReturns -= value\n                      if roundInfo[stor15].field_1536 < block.timestamp:\n                          revert with 0, 'After deadline!'\n                      if value < roundInfo[stor15].field_1792 / 10:\n                          revert with 0, 'Not enough Ether!'\n                      require roundInfo[stor15].field_0 + value >= roundInfo[stor15].field_0\n                      roundInfo[stor15].field_0 += value\n                      if value >= roundInfo[stor15].field_1792:\n                          roundInfo[stor15].field_2304 = caller\n                      if caller != tx.origin:\n                          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                      if value <= 10^17:\n                          if roundInfo.length != 1:\n                              if not ref:\n                                  require 65 * 10^16 * value / 65 * 10^16 == value\n                              else:\n                                  require 64 * 10^16 * value / 64 * 10^16 == value\n                          else:\n                              if not ref:\n                                  require 52 * 10^16 * value / 52 * 10^16 == value\n                              else:\n                                  require 51 * 10^16 * value / 51 * 10^16 == value\n                  else:\n                      require stor14[caller].field_0 + ((roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / 1000000000 * 10^18) >= stor14[caller].field_0\n                      stor14[caller].field_0 += (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / 1000000000 * 10^18\n                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                      if value > stor14[caller].field_0:\n                          revert with 0, 'Can't spend what you don't have'\n                      require stor14[caller].field_0 - value <= stor14[caller].field_0\n                      stor14[caller].field_0 -= value\n                      if stor14[caller].field_256 > stor14[caller].field_0 - value:\n                          stor14[caller].field_256 = stor14[caller].field_0 - value\n                      require unclaimedReturns - value <= unclaimedReturns\n                      unclaimedReturns -= value\n                      if roundInfo[stor15].field_1536 < block.timestamp:\n                          revert with 0, 'After deadline!'\n                      if value < roundInfo[stor15].field_1792 / 10:\n                          revert with 0, 'Not enough Ether!'\n                      require roundInfo[stor15].field_0 + value >= roundInfo[stor15].field_0\n                      roundInfo[stor15].field_0 += value\n                      if value >= roundInfo[stor15].field_1792:\n                          roundInfo[stor15].field_2304 = caller\n                      if caller != tx.origin:\n                          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                      if value <= 10^17:\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef estimateReturns(address investor, uint256 roundID): # not payable\n  require roundID < roundInfo.length\n  if roundInfo.length <= 1:\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      require roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 <= roundInfo[roundID].field_1024\n      if not roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      require stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256\n      require (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256 == roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0\n      return ((roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0, \n             stor14[address(investor)].field_256\n  require roundID - 1 < roundInfo.length\n  if roundInfo[roundID].field_0 <= stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0:\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      require roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 <= roundInfo[roundID].field_1024\n      if not roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      require stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256\n      require (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256 == roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0\n      return ((roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0, \n             stor14[address(investor)].field_256\n  require roundID - 1 < roundInfo.length\n  if not stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256:\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      require roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 <= roundInfo[roundID].field_1024\n      if not roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      require stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256\n      require (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256 == roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0\n      return ((roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0, \n             stor14[address(investor)].field_256\n  require roundInfo[roundID].field_0 - stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0 <= roundInfo[roundID].field_0\n  if not roundInfo[roundID].field_0 - stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0:\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      require roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 <= roundInfo[roundID].field_1024\n      if not roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      require stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256\n      require (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256 == roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0\n      return ((roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0, \n             stor14[address(investor)].field_256\n  if not stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256:\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      require roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 <= roundInfo[roundID].field_1024\n      if not roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor14[address(investor)].field_0, stor14[address(investor)].field_256\n      require stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256\n      require (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256 == roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0\n      return ((roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0, \n             stor14[address(investor)].field_256\n  require stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256\n  require (roundInfo[roundID].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256 == roundInfo[roundID].field_0 - stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0\n  if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n      return ((roundInfo[roundID].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0, \n             stor14[address(investor)].field_256\n  require roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 <= roundInfo[roundID].field_1024\n  if not roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0:\n      return ((roundInfo[roundID].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0, \n             stor14[address(investor)].field_256\n  if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n      return ((roundInfo[roundID].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0, \n             stor14[address(investor)].field_256\n  require stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256\n  require (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256 == roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0\n  return ((roundInfo[roundID].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) / 1000000000 * 10^18) + ((roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0, \n         stor14[address(investor)].field_256\n\ndef investorInfo(address investor, uint256 roundID): # not payable\n  require roundID < roundInfo.length\n  if roundInfo.length <= 1:\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      require roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 <= roundInfo[roundID].field_1024\n      if not roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      require stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256\n      require (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256 == roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0\n      return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n             ((roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0,\n             stor14[address(investor)].field_256\n  require roundID - 1 < roundInfo.length\n  if roundInfo[roundID].field_0 <= stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0:\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      require roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 <= roundInfo[roundID].field_1024\n      if not roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      require stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256\n      require (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256 == roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0\n      return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n             ((roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0,\n             stor14[address(investor)].field_256\n  require roundID - 1 < roundInfo.length\n  if not stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256:\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      require roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 <= roundInfo[roundID].field_1024\n      if not roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      require stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256\n      require (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256 == roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0\n      return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n             ((roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0,\n             stor14[address(investor)].field_256\n  require roundInfo[roundID].field_0 - stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0 <= roundInfo[roundID].field_0\n  if not roundInfo[roundID].field_0 - stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0:\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      require roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 <= roundInfo[roundID].field_1024\n      if not roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      require stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256\n      require (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256 == roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0\n      return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n             ((roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0,\n             stor14[address(investor)].field_256\n  if not stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256:\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      require roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 <= roundInfo[roundID].field_1024\n      if not roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n          return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n                 stor14[address(investor)].field_0,\n                 stor14[address(investor)].field_256\n      require stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256\n      require (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256 == roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0\n      return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n             ((roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0,\n             stor14[address(investor)].field_256\n  require stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256\n  require (roundInfo[roundID].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256 == roundInfo[roundID].field_0 - stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0\n  if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n      return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n             ((roundInfo[roundID].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0,\n             stor14[address(investor)].field_256\n  require roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 <= roundInfo[roundID].field_1024\n  if not roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0:\n      return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n             ((roundInfo[roundID].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0,\n             stor14[address(investor)].field_256\n  if not stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256:\n      return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n             ((roundInfo[roundID].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0,\n             stor14[address(investor)].field_256\n  require stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256\n  require (roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256 == roundInfo[roundID].field_1024 - stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0\n  return stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256, \n         ((roundInfo[roundID].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) - 1][address(investor)].field_256) / 1000000000 * 10^18) + ((roundInfo[roundID].field_1024 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) - (stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_0 * stor[(11 * roundID) + ('name', 'roundInfo', 16) + 10][address(investor)].field_256) / 1000000000 * 10^18) + stor14[address(investor)].field_0,\n         stor14[address(investor)].field_256\n\ndef startNewRound() payable: \n  if stor4:\n      revert with 0, 'This contract has been upgraded!'\n  if 0 >= roundInfo.length:\n      roundInfo.length++\n      if roundInfo.length <= roundInfo.length + 1:\n          require roundInfo.length < roundInfo.length\n          latestRoundID = roundInfo.length\n          roundInfo[roundInfo.length].field_2304 = caller\n          roundInfo[roundInfo.length].field_1792 = 10^15\n          roundInfo[roundInfo.length].field_1280 = block.timestamp + (720 * 24 * 3600)\n          roundInfo[roundInfo.length].field_1536 = block.timestamp + (24 * 3600)\n          roundInfo[roundInfo.length].field_256 = jackpotSeed\n          jackpotSeed = 0\n          if roundInfo[roundInfo.length].field_1536 < block.timestamp:\n              revert with 0, 'After deadline!'\n          if call.value < roundInfo[roundInfo.length].field_1792 / 10:\n              revert with 0, 'Not enough Ether!'\n          require roundInfo[roundInfo.length].field_0 + call.value >= roundInfo[roundInfo.length].field_0\n          roundInfo[roundInfo.length].field_0 += call.value\n          if call.value < roundInfo[roundInfo.length].field_1792:\n              if caller != tx.origin:\n                  revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                              'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n              if call.value <= 10^17:\n                  if roundInfo.length != 1:\n                      require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n                      require (65 * 10^16 * call.value) + 5 * 10^17 >= 65 * 10^16 * call.value\n                      require 10^16 * call.value / 10^16 == call.value\n                      require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                      require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                      require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                      if roundInfo.length != 1:\n                          if roundInfo[roundInfo.length].field_768:\n                              require unclaimedReturns + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                              unclaimedReturns += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              if not roundInfo[roundInfo.length].field_768:\n                                  require 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              else:\n                                  require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                                  require roundInfo[roundInfo.length].field_768\n                                  require roundInfo[roundInfo.length].field_1024 + (1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[roundInfo.length].field_768) >= roundInfo[roundInfo.length].field_1024\n                          else:\n                              require roundInfo[roundInfo.length].field_256 + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                              roundInfo[roundInfo.length].field_256 += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[roundInfo.length].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_512\n                              roundInfo[roundInfo.length].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[roundInfo.length].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                              roundInfo[roundInfo.length].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require devBalance + (call.value / 20) >= devBalance\n                              devBalance += call.value / 20\n                      else:\n                          raisedICO += call.value / 4\n                          if roundInfo[roundInfo.length].field_768:\n                              require unclaimedReturns + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                              unclaimedReturns += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              if not roundInfo[roundInfo.length].field_768:\n                                  require 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              else:\n                                  require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                                  require roundInfo[roundInfo.length].field_768\n                                  require roundInfo[roundInfo.length].field_1024 + (1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[roundInfo.length].field_768) >= roundInfo[roundInfo.length].field_1024\n                          else:\n                              require roundInfo[roundInfo.length].field_256 + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                              roundInfo[roundInfo.length].field_256 += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[roundInfo.length].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_512\n                              roundInfo[roundInfo.length].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[roundInfo.length].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                              roundInfo[roundInfo.length].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require devBalance + (call.value / 4) >= devBalance\n                              devBalance += call.value / 4\n                  else:\n                      require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n                      require (52 * 10^16 * call.value) + 5 * 10^17 >= 52 * 10^16 * call.value\n                      require 10^16 * call.value / 10^16 == call.value\n                      require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                      require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                      require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                      if roundInfo.length != 1:\n                          if roundInfo[roundInfo.length].field_768:\n                              require unclaimedReturns + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                              unclaimedReturns += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              if not roundInfo[roundInfo.length].field_768:\n                                  require 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              else:\n                                  require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                                  require roundInfo[roundInfo.length].field_768\n                          else:\n                              require roundInfo[roundInfo.length].field_256 + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                              roundInfo[roundInfo.length].field_256 += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[roundInfo.length].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_512\n                              roundInfo[roundInfo.length].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[roundInfo.length].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                              roundInfo[roundInfo.length].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require devBalance + (call.value / 20) >= devBalance\n                              devBalance += call.value / 20\n                      else:\n                          raisedICO += call.value / 4\n                          if roundInfo[roundInfo.length].field_768:\n                              require unclaimedReturns + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                              unclaimedReturns += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              if not roundInfo[roundInfo.length].field_768:\n                                  require 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              else:\n                                  require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                                  require roundInfo[roundInfo.length].field_768\n                          else:\n                              require roundInfo[roundInfo.length].field_256 + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                              roundInfo[roundInfo.length].field_256 += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[roundInfo.length].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_512\n                              roundInfo[roundInfo.length].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[roundInfo.length].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                              roundInfo[roundInfo.length].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require devBalance + (call.value / 4) >= devBalance\n                              devBalance += call.value / 4\n          else:\n              roundInfo[roundInfo.length].field_2304 = caller\n              if caller != tx.origin:\n                  revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                              'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n              if call.value <= 10^17:\n                  if 1 == roundInfo.length:\n                      require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n                      require (52 * 10^16 * call.value) + 5 * 10^17 >= 52 * 10^16 * call.value\n                      require 10^16 * call.value / 10^16 == call.value\n                      require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                      require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                      require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                      if roundInfo.length != 1:\n                          if roundInfo[roundInfo.length].field_768:\n                              require unclaimedReturns + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                              unclaimedReturns += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              if not roundInfo[roundInfo.length].field_768:\n                                  require 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[roundInfo.length].field_768\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require roundInfo[roundInfo.length].field_256 + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                          roundInfo[roundInfo.length].field_256 += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[roundInfo.length].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_512\n                          roundInfo[roundInfo.length].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[roundInfo.length].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                          roundInfo[roundInfo.length].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 20) >= devBalance\n                      else:\n                          raisedICO += call.value / 4\n                          if roundInfo[roundInfo.length].field_768:\n                              require unclaimedReturns + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                              unclaimedReturns += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              if not roundInfo[roundInfo.length].field_768:\n                                  require 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[roundInfo.length].field_768\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require roundInfo[roundInfo.length].field_256 + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                          roundInfo[roundInfo.length].field_256 += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[roundInfo.length].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_512\n                          roundInfo[roundInfo.length].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[roundInfo.length].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                          roundInfo[roundInfo.length].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 4) >= devBalance\n                  else:\n                      require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n                      require (65 * 10^16 * call.value) + 5 * 10^17 >= 65 * 10^16 * call.value\n                      require 10^16 * call.value / 10^16 == call.value\n                      require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                      require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                      require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                      if roundInfo.length != 1:\n                          if roundInfo[roundInfo.length].field_768:\n                              require unclaimedReturns + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                              unclaimedReturns += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              if not roundInfo[roundInfo.length].field_768:\n                                  require 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              else:\n                                  require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                                  require roundInfo[roundInfo.length].field_768\n                          else:\n                              require roundInfo[roundInfo.length].field_256 + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                              roundInfo[roundInfo.length].field_256 += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[roundInfo.length].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_512\n                              roundInfo[roundInfo.length].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[roundInfo.length].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                              roundInfo[roundInfo.length].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require devBalance + (call.value / 20) >= devBalance\n                              devBalance += call.value / 20\n                      else:\n                          raisedICO += call.value / 4\n                          if roundInfo[roundInfo.length].field_768:\n                              require unclaimedReturns + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                              unclaimedReturns += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              if not roundInfo[roundInfo.length].field_768:\n                                  require 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              else:\n                                  require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                                  require roundInfo[roundInfo.length].field_768\n                          else:\n                              require roundInfo[roundInfo.length].field_256 + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                              roundInfo[roundInfo.length].field_256 += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[roundInfo.length].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_512\n                              roundInfo[roundInfo.length].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[roundInfo.length].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                              roundInfo[roundInfo.length].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require devBalance + (call.value / 4) >= devBalance\n                              devBalance += call.value / 4\n  else:\n      require latestRoundID < roundInfo.length\n      if not roundInfo[stor15].field_2464:\n          revert with 0, 'Previous round not finalized'\n      require latestRoundID < roundInfo.length\n      if roundInfo[stor15].field_1536 >= block.timestamp:\n          revert with 0, 'Previous round still running'\n      roundInfo.length++\n      if roundInfo.length <= roundInfo.length + 1:\n          require roundInfo.length < roundInfo.length\n          latestRoundID = roundInfo.length\n          roundInfo[roundInfo.length].field_2304 = caller\n          roundInfo[roundInfo.length].field_1792 = 10^15\n          roundInfo[roundInfo.length].field_1280 = block.timestamp + (720 * 24 * 3600)\n          roundInfo[roundInfo.length].field_1536 = block.timestamp + (24 * 3600)\n          roundInfo[roundInfo.length].field_256 = jackpotSeed\n          jackpotSeed = 0\n          if roundInfo[roundInfo.length].field_1536 < block.timestamp:\n              revert with 0, 'After deadline!'\n          if call.value < roundInfo[roundInfo.length].field_1792 / 10:\n              revert with 0, 'Not enough Ether!'\n          require roundInfo[roundInfo.length].field_0 + call.value >= roundInfo[roundInfo.length].field_0\n          roundInfo[roundInfo.length].field_0 += call.value\n          if call.value < roundInfo[roundInfo.length].field_1792:\n              if caller != tx.origin:\n                  revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                              'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n              if call.value <= 10^17:\n                  if 1 == roundInfo.length:\n                      require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n                      require (52 * 10^16 * call.value) + 5 * 10^17 >= 52 * 10^16 * call.value\n                      require 10^16 * call.value / 10^16 == call.value\n                      require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                      require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                      require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                      if 1 == roundInfo.length:\n                          raisedICO += call.value / 4\n                      if roundInfo[roundInfo.length].field_768:\n                          require unclaimedReturns + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                          unclaimedReturns += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          if roundInfo[roundInfo.length].field_768:\n                      else:\n                          require roundInfo[roundInfo.length].field_256 + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                          roundInfo[roundInfo.length].field_256 += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[roundInfo.length].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_512\n                          roundInfo[roundInfo.length].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[roundInfo.length].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                  else:\n                      require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n                      require (65 * 10^16 * call.value) + 5 * 10^17 >= 65 * 10^16 * call.value\n                      require 10^16 * call.value / 10^16 == call.value\n                      require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                      require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                      require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                      if 1 == roundInfo.length:\n                          raisedICO += call.value / 4\n                      if roundInfo[roundInfo.length].field_768:\n                          require unclaimedReturns + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                          unclaimedReturns += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          if roundInfo[roundInfo.length].field_768:\n                              require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          else:\n                      else:\n                          require roundInfo[roundInfo.length].field_256 + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                          roundInfo[roundInfo.length].field_256 += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[roundInfo.length].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_512\n                          roundInfo[roundInfo.length].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[roundInfo.length].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                          roundInfo[roundInfo.length].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n          else:\n              roundInfo[roundInfo.length].field_2304 = caller\n              if caller != tx.origin:\n                  revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                              'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n              if call.value <= 10^17:\n                  if roundInfo.length != 1:\n                      require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n                      require (65 * 10^16 * call.value) + 5 * 10^17 >= 65 * 10^16 * call.value\n                      require 10^16 * call.value / 10^16 == call.value\n                      require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                      require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                      require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                      if 1 == roundInfo.length:\n                          raisedICO += call.value / 4\n                      if roundInfo[roundInfo.length].field_768:\n                          require unclaimedReturns + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                          unclaimedReturns += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          if roundInfo[roundInfo.length].field_768:\n                      else:\n                          require roundInfo[roundInfo.length].field_256 + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                          roundInfo[roundInfo.length].field_256 += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[roundInfo.length].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_512\n                          roundInfo[roundInfo.length].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[roundInfo.length].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                  else:\n                      require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n                      require (52 * 10^16 * call.value) + 5 * 10^17 >= 52 * 10^16 * call.value\n                      require 10^16 * call.value / 10^16 == call.value\n                      require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                      require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                      require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                      if 1 == roundInfo.length:\n                          raisedICO += call.value / 4\n                      if roundInfo[roundInfo.length].field_768:\n                          require unclaimedReturns + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                          unclaimedReturns += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      else:\n                          require roundInfo[roundInfo.length].field_256 + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_256\n                          roundInfo[roundInfo.length].field_256 += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[roundInfo.length].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[roundInfo.length].field_512\n                          roundInfo[roundInfo.length].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef finalizeAndRestart() payable: \n  require latestRoundID < roundInfo.length\n  if roundInfo[stor15].field_2464:\n      revert with 0, 'Already finalized!'\n  if block.timestamp <= roundInfo[stor15].field_1536:\n      revert with 0, 'Round still running!'\n  if roundInfo.length != 1:\n      require stor14[stor16[stor15].field_2304].field_0 + roundInfo[stor15].field_256 >= stor14[stor16[stor15].field_2304].field_0\n      stor14[stor16[stor15].field_2304].field_0 += roundInfo[stor15].field_256\n      require unclaimedReturns + roundInfo[stor15].field_256 >= unclaimedReturns\n      unclaimedReturns += roundInfo[stor15].field_256\n      log JackpotWon(\n            address by=roundInfo[stor15].field_2304,\n            uint256 amount=roundInfo[stor15].field_256)\n      totalJackpotsWon += roundInfo[stor15].field_256\n      require 5 * 10^16 * roundInfo[stor15].field_0 / 5 * 10^16 == roundInfo[stor15].field_0\n      require (5 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 >= 5 * 10^16 * roundInfo[stor15].field_0\n      require jackpotSeed + ((5 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18) >= jackpotSeed\n      jackpotSeed += (5 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n      require roundInfo[stor15].field_512 >= 0\n      jackpotSeed = jackpotSeed + ((5 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_512\n      if not stor4:\n          if roundInfo.length != 1:\n              require 25 * 10^12 * 3600 * roundInfo[stor15].field_0 / 25 * 10^12 * 3600 == roundInfo[stor15].field_0\n              require (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 >= 25 * 10^12 * 3600 * roundInfo[stor15].field_0\n              require ext_code.size(tokenAddress)\n              call tokenAddress.disburseDividends() with:\n                 value (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18 wei\n                   gas gas_remaining wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              totalDividendsPaid += (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n          else:\n              require 2 * 10^16 * roundInfo[stor15].field_0 / 2 * 10^16 == roundInfo[stor15].field_0\n              require (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 >= 2 * 10^16 * roundInfo[stor15].field_0\n              require ext_code.size(tokenAddress)\n              call tokenAddress.disburseDividends() with:\n                 value (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18 wei\n                   gas gas_remaining wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              totalDividendsPaid += (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n          totalSharesSold += roundInfo[stor15].field_768\n          require 65 * 10^16 * roundInfo[stor15].field_0 / 65 * 10^16 == roundInfo[stor15].field_0\n          require (65 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 >= 65 * 10^16 * roundInfo[stor15].field_0\n          totalEarningsGenerated += (65 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n          roundInfo[stor15].field_2464 = 1\n          if stor4:\n              revert with 0, 'This contract has been upgraded!'\n          if 0 >= roundInfo.length:\n              roundInfo.length++\n              if roundInfo.length <= roundInfo.length + 1:\n                  require roundInfo.length < roundInfo.length\n                  latestRoundID = roundInfo.length\n                  roundInfo[roundInfo.length].field_2304 = caller\n                  roundInfo[roundInfo.length].field_1792 = 10^15\n                  roundInfo[roundInfo.length].field_1280 = block.timestamp + (720 * 24 * 3600)\n                  roundInfo[roundInfo.length].field_1536 = block.timestamp + (24 * 3600)\n                  roundInfo[roundInfo.length].field_256 = jackpotSeed\n                  jackpotSeed = 0\n                  if roundInfo[roundInfo.length].field_1536 < block.timestamp:\n                      revert with 0, 'After deadline!'\n                  if call.value < roundInfo[roundInfo.length].field_1792 / 10:\n                      revert with 0, 'Not enough Ether!'\n                  require roundInfo[roundInfo.length].field_0 + call.value >= roundInfo[roundInfo.length].field_0\n                  roundInfo[roundInfo.length].field_0 += call.value\n                  if call.value >= roundInfo[roundInfo.length].field_1792:\n                      roundInfo[roundInfo.length].field_2304 = caller\n                  if caller != tx.origin:\n                      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                  'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                  if call.value <= 10^17:\n                      if roundInfo.length != 1:\n                          require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n                          require (65 * 10^16 * call.value) + 5 * 10^17 >= 65 * 10^16 * call.value\n                      else:\n                          require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n                          require (52 * 10^16 * call.value) + 5 * 10^17 >= 52 * 10^16 * call.value\n          else:\n              require latestRoundID < roundInfo.length\n              if not roundInfo[stor15].field_2464:\n                  revert with 0, 'Previous round not finalized'\n              require latestRoundID < roundInfo.length\n              if roundInfo[stor15].field_1536 >= block.timestamp:\n                  revert with 0, 'Previous round still running'\n              roundInfo.length++\n              if roundInfo.length <= roundInfo.length + 1:\n                  require roundInfo.length < roundInfo.length\n                  latestRoundID = roundInfo.length\n                  roundInfo[roundInfo.length].field_2304 = caller\n                  roundInfo[roundInfo.length].field_1792 = 10^15\n                  roundInfo[roundInfo.length].field_1280 = block.timestamp + (720 * 24 * 3600)\n                  roundInfo[roundInfo.length].field_1536 = block.timestamp + (24 * 3600)\n                  roundInfo[roundInfo.length].field_256 = jackpotSeed\n                  jackpotSeed = 0\n                  if roundInfo[roundInfo.length].field_1536 < block.timestamp:\n                      revert with 0, 'After deadline!'\n                  if call.value < roundInfo[roundInfo.length].field_1792 / 10:\n                      revert with 0, 'Not enough Ether!'\n                  require roundInfo[roundInfo.length].field_0 + call.value >= roundInfo[roundInfo.length].field_0\n                  roundInfo[roundInfo.length].field_0 += call.value\n                  if call.value < roundInfo[roundInfo.length].field_1792:\n                      if caller != tx.origin:\n                          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                      if call.value <= 10^17:\n                          if 1 == roundInfo.length:\n                              require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n                          else:\n                              require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n                  else:\n                      roundInfo[roundInfo.length].field_2304 = caller\n                      if caller != tx.origin:\n                          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                      if call.value <= 10^17:\n                          if roundInfo.length != 1:\n                              require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n                          else:\n                              require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n      else:\n          stor14[stor5].field_0 = jackpotSeed\n          jackpotSeed = 0\n          if roundInfo.length != 1:\n              require 25 * 10^12 * 3600 * roundInfo[stor15].field_0 / 25 * 10^12 * 3600 == roundInfo[stor15].field_0\n              require (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 >= 25 * 10^12 * 3600 * roundInfo[stor15].field_0\n              require ext_code.size(tokenAddress)\n              call tokenAddress.disburseDividends() with:\n                 value (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18 wei\n                   gas gas_remaining wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              totalDividendsPaid += (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n          else:\n              require 2 * 10^16 * roundInfo[stor15].field_0 / 2 * 10^16 == roundInfo[stor15].field_0\n              require (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 >= 2 * 10^16 * roundInfo[stor15].field_0\n              require ext_code.size(tokenAddress)\n              call tokenAddress.disburseDividends() with:\n                 value (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18 wei\n                   gas gas_remaining wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              totalDividendsPaid += (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n          totalSharesSold += roundInfo[stor15].field_768\n          require 65 * 10^16 * roundInfo[stor15].field_0 / 65 * 10^16 == roundInfo[stor15].field_0\n          require (65 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 >= 65 * 10^16 * roundInfo[stor15].field_0\n          totalEarningsGenerated += (65 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n          roundInfo[stor15].field_2464 = 1\n          if stor4:\n              revert with 0, 'This contract has been upgraded!'\n          if 0 >= roundInfo.length:\n              roundInfo.length++\n              if roundInfo.length <= roundInfo.length + 1:\n                  require roundInfo.length < roundInfo.length\n                  latestRoundID = roundInfo.length\n                  roundInfo[roundInfo.length].field_2304 = caller\n                  roundInfo[roundInfo.length].field_1792 = 10^15\n                  roundInfo[roundInfo.length].field_1280 = block.timestamp + (720 * 24 * 3600)\n                  roundInfo[roundInfo.length].field_1536 = block.timestamp + (24 * 3600)\n                  roundInfo[roundInfo.length].field_256 = jackpotSeed\n                  jackpotSeed = 0\n                  if roundInfo[roundInfo.length].field_1536 < block.timestamp:\n                      revert with 0, 'After deadline!'\n                  if call.value < roundInfo[roundInfo.length].field_1792 / 10:\n                      revert with 0, 'Not enough Ether!'\n                  require roundInfo[roundInfo.length].field_0 + call.value >= roundInfo[roundInfo.length].field_0\n                  roundInfo[roundInfo.length].field_0 += call.value\n                  if call.value >= roundInfo[roundInfo.length].field_1792:\n                      roundInfo[roundInfo.length].field_2304 = caller\n                  if caller != tx.origin:\n                      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                  'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                  if call.value <= 10^17:\n                      if roundInfo.length != 1:\n                          require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n                          require (65 * 10^16 * call.value) + 5 * 10^17 >= 65 * 10^16 * call.value\n                      else:\n                          require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n                          require (52 * 10^16 * call.value) + 5 * 10^17 >= 52 * 10^16 * call.value\n          else:\n              require latestRoundID < roundInfo.length\n              if not roundInfo[stor15].field_2464:\n                  revert with 0, 'Previous round not finalized'\n              require latestRoundID < roundInfo.length\n              if roundInfo[stor15].field_1536 >= block.timestamp:\n                  revert with 0, 'Previous round still running'\n              roundInfo.length++\n              if roundInfo.length <= roundInfo.length + 1:\n                  require roundInfo.length < roundInfo.length\n                  latestRoundID = roundInfo.length\n                  roundInfo[roundInfo.length].field_2304 = caller\n                  roundInfo[roundInfo.length].field_1792 = 10^15\n                  roundInfo[roundInfo.length].field_1280 = block.timestamp + (720 * 24 * 3600)\n                  roundInfo[roundInfo.length].field_1536 = block.timestamp + (24 * 3600)\n                  roundInfo[roundInfo.length].field_256 = jackpotSeed\n                  jackpotSeed = 0\n                  if roundInfo[roundInfo.length].field_1536 < block.timestamp:\n                      revert with 0, 'After deadline!'\n                  if call.value < roundInfo[roundInfo.length].field_1792 / 10:\n                      revert with 0, 'Not enough Ether!'\n                  require roundInfo[roundInfo.length].field_0 + call.value >= roundInfo[roundInfo.length].field_0\n                  roundInfo[roundInfo.length].field_0 += call.value\n                  if call.value >= roundInfo[roundInfo.length].field_1792:\n                      roundInfo[roundInfo.length].field_2304 = caller\n                  if caller != tx.origin:\n                      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                  'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                  if call.value <= 10^17:\n                      if roundInfo.length != 1:\n                          require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n                      else:\n                          require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n  else:\n      require ext_code.size(tokenAddress)\n      call tokenAddress.finishMinting() with:\n           gas gas_remaining wei\n      if not ext_call.success:\n          revert with ext_call.return_data[0 len return_data.size]\n      require return_data.size >= 32\n      if not ext_call.return_data[0]:\n          revert with 0, 'Couldn't finish minting tokens!'\n      require stor14[stor16[stor15].field_2304].field_0 + roundInfo[stor15].field_256 >= stor14[stor16[stor15].field_2304].field_0\n      stor14[stor16[stor15].field_2304].field_0 += roundInfo[stor15].field_256\n      require unclaimedReturns + roundInfo[stor15].field_256 >= unclaimedReturns\n      unclaimedReturns += roundInfo[stor15].field_256\n      log JackpotWon(\n            address by=roundInfo[stor15].field_2304,\n            uint256 amount=roundInfo[stor15].field_256)\n      totalJackpotsWon += roundInfo[stor15].field_256\n      require 5 * 10^16 * roundInfo[stor15].field_0 / 5 * 10^16 == roundInfo[stor15].field_0\n      require (5 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 >= 5 * 10^16 * roundInfo[stor15].field_0\n      require jackpotSeed + ((5 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18) >= jackpotSeed\n      jackpotSeed += (5 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n      require roundInfo[stor15].field_512 >= 0\n      jackpotSeed = jackpotSeed + ((5 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_512\n      if not stor4:\n          if roundInfo.length != 1:\n              require 25 * 10^12 * 3600 * roundInfo[stor15].field_0 / 25 * 10^12 * 3600 == roundInfo[stor15].field_0\n              require (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 >= 25 * 10^12 * 3600 * roundInfo[stor15].field_0\n              require ext_code.size(tokenAddress)\n              call tokenAddress.disburseDividends() with:\n                 value (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18 wei\n                   gas gas_remaining wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              totalDividendsPaid += (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n          else:\n              require 2 * 10^16 * roundInfo[stor15].field_0 / 2 * 10^16 == roundInfo[stor15].field_0\n              require (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 >= 2 * 10^16 * roundInfo[stor15].field_0\n              require ext_code.size(tokenAddress)\n              call tokenAddress.disburseDividends() with:\n                 value (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18 wei\n                   gas gas_remaining wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              totalDividendsPaid += (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n          totalSharesSold += roundInfo[stor15].field_768\n          require 65 * 10^16 * roundInfo[stor15].field_0 / 65 * 10^16 == roundInfo[stor15].field_0\n          require (65 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 >= 65 * 10^16 * roundInfo[stor15].field_0\n          totalEarningsGenerated += (65 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n          roundInfo[stor15].field_2464 = 1\n          if stor4:\n              revert with 0, 'This contract has been upgraded!'\n          if 0 >= roundInfo.length:\n              roundInfo.length++\n              if roundInfo.length <= roundInfo.length + 1:\n                  require roundInfo.length < roundInfo.length\n                  latestRoundID = roundInfo.length\n                  roundInfo[roundInfo.length].field_2304 = caller\n                  roundInfo[roundInfo.length].field_1792 = 10^15\n                  roundInfo[roundInfo.length].field_1280 = block.timestamp + (720 * 24 * 3600)\n                  roundInfo[roundInfo.length].field_1536 = block.timestamp + (24 * 3600)\n                  roundInfo[roundInfo.length].field_256 = jackpotSeed\n                  jackpotSeed = 0\n                  if roundInfo[roundInfo.length].field_1536 < block.timestamp:\n                      revert with 0, 'After deadline!'\n                  if call.value < roundInfo[roundInfo.length].field_1792 / 10:\n                      revert with 0, 'Not enough Ether!'\n                  require roundInfo[roundInfo.length].field_0 + call.value >= roundInfo[roundInfo.length].field_0\n                  roundInfo[roundInfo.length].field_0 += call.value\n                  if call.value < roundInfo[roundInfo.length].field_1792:\n                      if caller != tx.origin:\n                          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                      if call.value <= 10^17:\n                          if 1 == roundInfo.length:\n                              require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n                          else:\n                              require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n                  else:\n                      roundInfo[roundInfo.length].field_2304 = caller\n                      if caller != tx.origin:\n                          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                      if call.value <= 10^17:\n                          if roundInfo.length != 1:\n                              require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n                          else:\n                              require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n          else:\n              require latestRoundID < roundInfo.length\n              if not roundInfo[stor15].field_2464:\n                  revert with 0, 'Previous round not finalized'\n              require latestRoundID < roundInfo.length\n              if roundInfo[stor15].field_1536 >= block.timestamp:\n                  revert with 0, 'Previous round still running'\n              roundInfo.length++\n              if roundInfo.length <= roundInfo.length + 1:\n                  require roundInfo.length < roundInfo.length\n                  latestRoundID = roundInfo.length\n                  roundInfo[roundInfo.length].field_2304 = caller\n                  roundInfo[roundInfo.length].field_1792 = 10^15\n                  roundInfo[roundInfo.length].field_1280 = block.timestamp + (720 * 24 * 3600)\n                  roundInfo[roundInfo.length].field_1536 = block.timestamp + (24 * 3600)\n                  roundInfo[roundInfo.length].field_256 = jackpotSeed\n                  jackpotSeed = 0\n                  if roundInfo[roundInfo.length].field_1536 < block.timestamp:\n                      revert with 0, 'After deadline!'\n                  if call.value < roundInfo[roundInfo.length].field_1792 / 10:\n                      revert with 0, 'Not enough Ether!'\n                  require roundInfo[roundInfo.length].field_0 + call.value >= roundInfo[roundInfo.length].field_0\n                  roundInfo[roundInfo.length].field_0 += call.value\n                  if call.value < roundInfo[roundInfo.length].field_1792:\n                      if caller != tx.origin:\n                          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                      if call.value <= 10^17:\n                          if roundInfo.length != 1:\n                  else:\n                      roundInfo[roundInfo.length].field_2304 = caller\n                      if caller != tx.origin:\n                          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                      if call.value <= 10^17:\n      else:\n          stor14[stor5].field_0 = jackpotSeed\n          jackpotSeed = 0\n          if roundInfo.length != 1:\n              require 25 * 10^12 * 3600 * roundInfo[stor15].field_0 / 25 * 10^12 * 3600 == roundInfo[stor15].field_0\n              require (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 >= 25 * 10^12 * 3600 * roundInfo[stor15].field_0\n              require ext_code.size(tokenAddress)\n              call tokenAddress.disburseDividends() with:\n                 value (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18 wei\n                   gas gas_remaining wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              totalDividendsPaid += (25 * 10^12 * 3600 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n          else:\n              require 2 * 10^16 * roundInfo[stor15].field_0 / 2 * 10^16 == roundInfo[stor15].field_0\n              require (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 >= 2 * 10^16 * roundInfo[stor15].field_0\n              require ext_code.size(tokenAddress)\n              call tokenAddress.disburseDividends() with:\n                 value (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18 wei\n                   gas gas_remaining wei\n              if not ext_call.success:\n                  revert with ext_call.return_data[0 len return_data.size]\n              totalDividendsPaid += (2 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n          totalSharesSold += roundInfo[stor15].field_768\n          require 65 * 10^16 * roundInfo[stor15].field_0 / 65 * 10^16 == roundInfo[stor15].field_0\n          require (65 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 >= 65 * 10^16 * roundInfo[stor15].field_0\n          totalEarningsGenerated += (65 * 10^16 * roundInfo[stor15].field_0) + 5 * 10^17 / 10^18\n          roundInfo[stor15].field_2464 = 1\n          if stor4:\n              revert with 0, 'This contract has been upgraded!'\n          if 0 >= roundInfo.length:\n              roundInfo.length++\n              if roundInfo.length <= roundInfo.length + 1:\n                  require roundInfo.length < roundInfo.length\n                  latestRoundID = roundInfo.length\n                  roundInfo[roundInfo.length].field_2304 = caller\n                  roundInfo[roundInfo.length].field_1792 = 10^15\n                  roundInfo[roundInfo.length].field_1280 = block.timestamp + (720 * 24 * 3600)\n                  roundInfo[roundInfo.length].field_1536 = block.timestamp + (24 * 3600)\n                  roundInfo[roundInfo.length].field_256 = jackpotSeed\n                  jackpotSeed = 0\n                  if roundInfo[roundInfo.length].field_1536 < block.timestamp:\n                      revert with 0, 'After deadline!'\n                  if call.value < roundInfo[roundInfo.length].field_1792 / 10:\n                      revert with 0, 'Not enough Ether!'\n                  require roundInfo[roundInfo.length].field_0 + call.value >= roundInfo[roundInfo.length].field_0\n                  roundInfo[roundInfo.length].field_0 += call.value\n                  if call.value >= roundInfo[roundInfo.length].field_1792:\n                      roundInfo[roundInfo.length].field_2304 = caller\n                  if caller != tx.origin:\n                      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                  'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                  if call.value <= 10^17:\n                      if roundInfo.length != 1:\n                          require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n                      else:\n                          require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n          else:\n              require latestRoundID < roundInfo.length\n              if not roundInfo[stor15].field_2464:\n                  revert with 0, 'Previous round not finalized'\n              require latestRoundID < roundInfo.length\n              if roundInfo[stor15].field_1536 >= block.timestamp:\n                  revert with 0, 'Previous round still running'\n              roundInfo.length++\n              if roundInfo.length <= roundInfo.length + 1:\n                  require roundInfo.length < roundInfo.length\n                  latestRoundID = roundInfo.length\n                  roundInfo[roundInfo.length].field_2304 = caller\n                  roundInfo[roundInfo.length].field_1792 = 10^15\n                  roundInfo[roundInfo.length].field_1280 = block.timestamp + (720 * 24 * 3600)\n                  roundInfo[roundInfo.length].field_1536 = block.timestamp + (24 * 3600)\n                  roundInfo[roundInfo.length].field_256 = jackpotSeed\n                  jackpotSeed = 0\n                  if roundInfo[roundInfo.length].field_1536 < block.timestamp:\n                      revert with 0, 'After deadline!'\n                  if call.value < roundInfo[roundInfo.length].field_1792 / 10:\n                      revert with 0, 'Not enough Ether!'\n                  require roundInfo[roundInfo.length].field_0 + call.value >= roundInfo[roundInfo.length].field_0\n                  roundInfo[roundInfo.length].field_0 += call.value\n                  if call.value >= roundInfo[roundInfo.length].field_1792:\n                      roundInfo[roundInfo.length].field_2304 = caller\n                  if caller != tx.origin:\n                      revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                                  'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n                  if call.value <= 10^17:\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef buyShares(address to) payable: \n  if 0 >= roundInfo.length:\n      revert with 0, 'Not yet started'\n  require latestRoundID < roundInfo.length\n  if roundInfo[stor15].field_1536 < block.timestamp:\n      revert with 0, 'After deadline!'\n  if call.value < roundInfo[stor15].field_1792 / 10:\n      revert with 0, 'Not enough Ether!'\n  require roundInfo[stor15].field_0 + call.value >= roundInfo[stor15].field_0\n  roundInfo[stor15].field_0 += call.value\n  if call.value < roundInfo[stor15].field_1792:\n      if caller != tx.origin:\n          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n      if call.value <= 10^17:\n          if roundInfo.length != 1:\n              if to:\n                  require 64 * 10^16 * call.value / 64 * 10^16 == call.value\n                  require (64 * 10^16 * call.value) + 5 * 10^17 >= 64 * 10^16 * call.value\n                  require 10^16 * call.value / 10^16 == call.value\n                  require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                  require stor14[address(to)].field_0 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= stor14[address(to)].field_0\n                  stor14[address(to)].field_0 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                  require stor14[address(to)].field_256 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= stor14[address(to)].field_256\n                  stor14[address(to)].field_256 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                  require unclaimedReturns + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                  unclaimedReturns += (10^16 * call.value) + 5 * 10^17 / 10^18\n                  require 10^16 * call.value / 10^16 == call.value\n                  require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                  require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                  require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                  if 1 == roundInfo.length:\n                      raisedICO += call.value / 4\n                  if roundInfo[stor15].field_768:\n                      require unclaimedReturns + ((64 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                      unclaimedReturns += (64 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                  else:\n                      require roundInfo[stor15].field_256 + ((64 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (64 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                      roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n              else:\n                  require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n                  require (65 * 10^16 * call.value) + 5 * 10^17 >= 65 * 10^16 * call.value\n                  require 10^16 * call.value / 10^16 == call.value\n                  require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                  require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                  require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                  if roundInfo.length != 1:\n                      if roundInfo[stor15].field_768:\n                          require unclaimedReturns + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                          unclaimedReturns += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          if not roundInfo[stor15].field_768:\n                              require 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_1792\n                              require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                              roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                              require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          else:\n                              require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                              roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                              roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                              roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require devBalance + (call.value / 20) >= devBalance\n                              devBalance += call.value / 20\n                              if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                      else:\n                          require roundInfo[stor15].field_256 + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 20) >= devBalance\n                          devBalance += call.value / 20\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              require 10^18 * call.value / 10^18 == call.value\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                                  if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  else:\n                                      if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                          require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                          require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n                  else:\n                      raisedICO += call.value / 4\n                      if roundInfo[stor15].field_768:\n                          require unclaimedReturns + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                          unclaimedReturns += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          if not roundInfo[stor15].field_768:\n                              require 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_1792\n                              require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                              roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                              require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          else:\n                              require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                              roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                              roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                              roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require devBalance + (call.value / 4) >= devBalance\n                              devBalance += call.value / 4\n                              if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                      else:\n                          require roundInfo[stor15].field_256 + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 4) >= devBalance\n                          devBalance += call.value / 4\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              require 10^18 * call.value / 10^18 == call.value\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                                  if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  else:\n                                      if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                          require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                          require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n          else:\n              if to:\n                  require 51 * 10^16 * call.value / 51 * 10^16 == call.value\n                  require (51 * 10^16 * call.value) + 5 * 10^17 >= 51 * 10^16 * call.value\n                  require 10^16 * call.value / 10^16 == call.value\n                  require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                  require stor14[address(to)].field_0 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= stor14[address(to)].field_0\n                  stor14[address(to)].field_0 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                  require stor14[address(to)].field_256 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= stor14[address(to)].field_256\n                  stor14[address(to)].field_256 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                  require unclaimedReturns + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                  unclaimedReturns += (10^16 * call.value) + 5 * 10^17 / 10^18\n                  require 10^16 * call.value / 10^16 == call.value\n                  require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                  require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                  require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                  if 1 == roundInfo.length:\n                      raisedICO += call.value / 4\n                  if roundInfo[stor15].field_768:\n                      require unclaimedReturns + ((51 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                      unclaimedReturns += (51 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                  else:\n                      require roundInfo[stor15].field_256 + ((51 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (51 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n              else:\n                  require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n                  require (52 * 10^16 * call.value) + 5 * 10^17 >= 52 * 10^16 * call.value\n                  require 10^16 * call.value / 10^16 == call.value\n                  require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                  require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                  require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                  if roundInfo.length != 1:\n                      if roundInfo[stor15].field_768:\n                          require unclaimedReturns + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                          unclaimedReturns += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          if not roundInfo[stor15].field_768:\n                              require 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_1792\n                              require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                              roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          else:\n                              require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                              roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                              roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                              roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require devBalance + (call.value / 20) >= devBalance\n                              devBalance += call.value / 20\n                      else:\n                          require roundInfo[stor15].field_256 + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 20) >= devBalance\n                          devBalance += call.value / 20\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              require 10^18 * call.value / 10^18 == call.value\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                                  if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  else:\n                                      if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                          require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                          require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n                  else:\n                      raisedICO += call.value / 4\n                      if roundInfo[stor15].field_768:\n                          require unclaimedReturns + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                          unclaimedReturns += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          if not roundInfo[stor15].field_768:\n                              require 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_1792\n                              require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                              roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          else:\n                              require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                              roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                              roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                              roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require devBalance + (call.value / 4) >= devBalance\n                              devBalance += call.value / 4\n                      else:\n                          require roundInfo[stor15].field_256 + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 4) >= devBalance\n                          devBalance += call.value / 4\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              require 10^18 * call.value / 10^18 == call.value\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                                  if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  else:\n                                      if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                          require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                          require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n  else:\n      roundInfo[stor15].field_2304 = caller\n      if caller != tx.origin:\n          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n      if call.value <= 10^17:\n          if roundInfo.length != 1:\n              if to:\n                  require 64 * 10^16 * call.value / 64 * 10^16 == call.value\n                  require (64 * 10^16 * call.value) + 5 * 10^17 >= 64 * 10^16 * call.value\n                  require 10^16 * call.value / 10^16 == call.value\n                  require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                  require stor14[address(to)].field_0 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= stor14[address(to)].field_0\n                  stor14[address(to)].field_0 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                  require stor14[address(to)].field_256 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= stor14[address(to)].field_256\n                  stor14[address(to)].field_256 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                  require unclaimedReturns + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                  unclaimedReturns += (10^16 * call.value) + 5 * 10^17 / 10^18\n                  require 10^16 * call.value / 10^16 == call.value\n                  require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                  require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                  require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                  if 1 == roundInfo.length:\n                      raisedICO += call.value / 4\n                  if roundInfo[stor15].field_768:\n                      require unclaimedReturns + ((64 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                      unclaimedReturns += (64 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                  else:\n                      require roundInfo[stor15].field_256 + ((64 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (64 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n              else:\n                  require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n                  require (65 * 10^16 * call.value) + 5 * 10^17 >= 65 * 10^16 * call.value\n                  require 10^16 * call.value / 10^16 == call.value\n                  require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                  require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                  require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                  if roundInfo.length != 1:\n                      if roundInfo[stor15].field_768:\n                          require unclaimedReturns + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                          unclaimedReturns += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          if not roundInfo[stor15].field_768:\n                              require 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_1792\n                              require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                              roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          else:\n                              require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                              roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                              roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                              roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require devBalance + (call.value / 20) >= devBalance\n                              devBalance += call.value / 20\n                      else:\n                          require roundInfo[stor15].field_256 + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 20) >= devBalance\n                          devBalance += call.value / 20\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              require 10^18 * call.value / 10^18 == call.value\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                                  if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  else:\n                                      if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                          require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                          require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n                  else:\n                      raisedICO += call.value / 4\n                      if roundInfo[stor15].field_768:\n                          require unclaimedReturns + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                          unclaimedReturns += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          if not roundInfo[stor15].field_768:\n                              require 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_1792\n                              require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                              roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          else:\n                              require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                              roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                              roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                              roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require devBalance + (call.value / 4) >= devBalance\n                              devBalance += call.value / 4\n                      else:\n                          require roundInfo[stor15].field_256 + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 4) >= devBalance\n                          devBalance += call.value / 4\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              require 10^18 * call.value / 10^18 == call.value\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                                  if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  else:\n                                      if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                          require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                          require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n          else:\n              if to:\n                  require 51 * 10^16 * call.value / 51 * 10^16 == call.value\n                  require (51 * 10^16 * call.value) + 5 * 10^17 >= 51 * 10^16 * call.value\n                  require 10^16 * call.value / 10^16 == call.value\n                  require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                  require stor14[address(to)].field_0 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= stor14[address(to)].field_0\n                  stor14[address(to)].field_0 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                  require stor14[address(to)].field_256 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= stor14[address(to)].field_256\n                  stor14[address(to)].field_256 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                  require unclaimedReturns + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                  unclaimedReturns += (10^16 * call.value) + 5 * 10^17 / 10^18\n                  require 10^16 * call.value / 10^16 == call.value\n                  require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                  require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                  require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                  if 1 == roundInfo.length:\n                      raisedICO += call.value / 4\n                  if roundInfo[stor15].field_768:\n                      require unclaimedReturns + ((51 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                      unclaimedReturns += (51 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                  else:\n                      require roundInfo[stor15].field_256 + ((51 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (51 * 10^16 * call.value) + 5 * 10^17 / 10^18\n              else:\n                  require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n                  require (52 * 10^16 * call.value) + 5 * 10^17 >= 52 * 10^16 * call.value\n                  require 10^16 * call.value / 10^16 == call.value\n                  require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n                  require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n                  require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n                  if roundInfo.length != 1:\n                      if roundInfo[stor15].field_768:\n                          require unclaimedReturns + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                          unclaimedReturns += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          if not roundInfo[stor15].field_768:\n                              require 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_1792\n                              require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                              roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          else:\n                              require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                              roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                              roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                              roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require devBalance + (call.value / 20) >= devBalance\n                              devBalance += call.value / 20\n                      else:\n                          require roundInfo[stor15].field_256 + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 20) >= devBalance\n                          devBalance += call.value / 20\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              require 10^18 * call.value / 10^18 == call.value\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                                  if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  else:\n                                      if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                          require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                          require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n                  else:\n                      raisedICO += call.value / 4\n                      if roundInfo[stor15].field_768:\n                          require unclaimedReturns + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                          unclaimedReturns += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          if not roundInfo[stor15].field_768:\n                              require 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_1792\n                              require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                              roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          else:\n                              require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                              roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                              require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                              roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                              require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                              roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                              require devBalance + (call.value / 4) >= devBalance\n                              devBalance += call.value / 4\n                      else:\n                          require roundInfo[stor15].field_256 + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 4) >= devBalance\n                          devBalance += call.value / 4\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              require 10^18 * call.value / 10^18 == call.value\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                                  if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  else:\n                                      if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                          require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                          require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\ndef _fallback(?) payable: # default function\n  if 0 >= roundInfo.length:\n      revert with 0, 'Not yet started'\n  require latestRoundID < roundInfo.length\n  if roundInfo[stor15].field_1536 < block.timestamp:\n      revert with 0, 'After deadline!'\n  if call.value < roundInfo[stor15].field_1792 / 10:\n      revert with 0, 'Not enough Ether!'\n  require roundInfo[stor15].field_0 + call.value >= roundInfo[stor15].field_0\n  roundInfo[stor15].field_0 += call.value\n  if call.value < roundInfo[stor15].field_1792:\n      if caller != tx.origin:\n          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n      if call.value <= 10^17:\n          if 1 == roundInfo.length:\n              require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n              require (52 * 10^16 * call.value) + 5 * 10^17 >= 52 * 10^16 * call.value\n              require 10^16 * call.value / 10^16 == call.value\n              require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n              require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n              require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n              if roundInfo.length != 1:\n                  if roundInfo[stor15].field_768:\n                      require unclaimedReturns + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                      unclaimedReturns += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      if not roundInfo[stor15].field_768:\n                          require 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_1792\n                          require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      else:\n                          require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                          roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 20) >= devBalance\n                          devBalance += call.value / 20\n                          if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                  else:\n                      require roundInfo[stor15].field_256 + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                      roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require devBalance + (call.value / 20) >= devBalance\n                      devBalance += call.value / 20\n                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                          if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                              require 10^18 * call.value / 10^18 == call.value\n                              require (10^18 * call.value) + roundInfo[stor15].field_1793 >= 10^18 * call.value\n                              require roundInfo[stor15].field_1792\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          require 10^18 * call.value / 10^18 == call.value\n                          require (10^18 * call.value) + roundInfo[stor15].field_1793 >= 10^18 * call.value\n                      else:\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              require 10^18 * call.value / 10^18 == call.value\n                          else:\n                              require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                              if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  else:\n                                      require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                      require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n              else:\n                  raisedICO += call.value / 4\n                  if roundInfo[stor15].field_768:\n                      require unclaimedReturns + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                      unclaimedReturns += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      if not roundInfo[stor15].field_768:\n                          require 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_1792\n                          require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      else:\n                          require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                          roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 4) >= devBalance\n                          devBalance += call.value / 4\n                          if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                  else:\n                      require roundInfo[stor15].field_256 + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                      roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require devBalance + (call.value / 4) >= devBalance\n                      devBalance += call.value / 4\n                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                          if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                              require 10^18 * call.value / 10^18 == call.value\n                              require (10^18 * call.value) + roundInfo[stor15].field_1793 >= 10^18 * call.value\n                              require roundInfo[stor15].field_1792\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          require 10^18 * call.value / 10^18 == call.value\n                          require (10^18 * call.value) + roundInfo[stor15].field_1793 >= 10^18 * call.value\n                      else:\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              require 10^18 * call.value / 10^18 == call.value\n                          else:\n                              require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                              if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  else:\n                                      require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                      require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n          else:\n              require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n              require (65 * 10^16 * call.value) + 5 * 10^17 >= 65 * 10^16 * call.value\n              require 10^16 * call.value / 10^16 == call.value\n              require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n              require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n              require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n              if roundInfo.length != 1:\n                  if roundInfo[stor15].field_768:\n                      require unclaimedReturns + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                      unclaimedReturns += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      if not roundInfo[stor15].field_768:\n                          require 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_1792\n                          require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      else:\n                          require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                          roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 20) >= devBalance\n                          devBalance += call.value / 20\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                  else:\n                      require roundInfo[stor15].field_256 + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                      roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require devBalance + (call.value / 20) >= devBalance\n                      devBalance += call.value / 20\n                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                          if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                              require 10^18 * call.value / 10^18 == call.value\n                              require (10^18 * call.value) + roundInfo[stor15].field_1793 >= 10^18 * call.value\n                              require roundInfo[stor15].field_1792\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          require 10^18 * call.value / 10^18 == call.value\n                          require (10^18 * call.value) + roundInfo[stor15].field_1793 >= 10^18 * call.value\n                          require roundInfo[stor15].field_1792\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                              stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          require 10^18 * call.value / 10^18 == call.value\n                      else:\n                          require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                          if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                              stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                  require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n                                  if (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / 1000000000 * 10^18 <= 0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n              else:\n                  raisedICO += call.value / 4\n                  if roundInfo[stor15].field_768:\n                      require unclaimedReturns + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                      unclaimedReturns += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      if not roundInfo[stor15].field_768:\n                          require 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_1792\n                          require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      else:\n                          require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                          roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 4) >= devBalance\n                          devBalance += call.value / 4\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                  else:\n                      require roundInfo[stor15].field_256 + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                      roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require devBalance + (call.value / 4) >= devBalance\n                      devBalance += call.value / 4\n                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                          if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                              require 10^18 * call.value / 10^18 == call.value\n                              require (10^18 * call.value) + roundInfo[stor15].field_1793 >= 10^18 * call.value\n                              require roundInfo[stor15].field_1792\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          require 10^18 * call.value / 10^18 == call.value\n                          require (10^18 * call.value) + roundInfo[stor15].field_1793 >= 10^18 * call.value\n                          require roundInfo[stor15].field_1792\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                              stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          require 10^18 * call.value / 10^18 == call.value\n                      else:\n                          require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                          if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                              stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                  require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n                                  if (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / 1000000000 * 10^18 <= 0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n  else:\n      roundInfo[stor15].field_2304 = caller\n      if caller != tx.origin:\n          revert with 0x8c379a000000000000000000000000000000000000000000000000000000000, \n                      'ONLY HOOMANS (or scripts that don't use smart contracts)!'\n      if call.value <= 10^17:\n          if roundInfo.length != 1:\n              require 65 * 10^16 * call.value / 65 * 10^16 == call.value\n              require (65 * 10^16 * call.value) + 5 * 10^17 >= 65 * 10^16 * call.value\n              require 10^16 * call.value / 10^16 == call.value\n              require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n              require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n              require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n              if roundInfo.length != 1:\n                  if roundInfo[stor15].field_768:\n                      require unclaimedReturns + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                      unclaimedReturns += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      if not roundInfo[stor15].field_768:\n                          require 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_1792\n                          require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      else:\n                          require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                          roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 20) >= devBalance\n                          devBalance += call.value / 20\n                          if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                  else:\n                      require roundInfo[stor15].field_256 + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                      roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require devBalance + (call.value / 20) >= devBalance\n                      devBalance += call.value / 20\n                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                          if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                              require 10^18 * call.value / 10^18 == call.value\n                              require (10^18 * call.value) + roundInfo[stor15].field_1793 >= 10^18 * call.value\n                              require roundInfo[stor15].field_1792\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          require 10^18 * call.value / 10^18 == call.value\n                          require (10^18 * call.value) + roundInfo[stor15].field_1793 >= 10^18 * call.value\n                      else:\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              require 10^18 * call.value / 10^18 == call.value\n                          else:\n                              require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                              if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  else:\n                                      require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                      require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n              else:\n                  raisedICO += call.value / 4\n                  if roundInfo[stor15].field_768:\n                      require unclaimedReturns + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                      unclaimedReturns += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      if not roundInfo[stor15].field_768:\n                          require 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_1792\n                          require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      else:\n                          require 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                          roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (65 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 4) >= devBalance\n                          devBalance += call.value / 4\n                          if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                  require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                          else:\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                  else:\n                      require roundInfo[stor15].field_256 + ((65 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (65 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                      roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require devBalance + (call.value / 4) >= devBalance\n                      devBalance += call.value / 4\n                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                          if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                              require 10^18 * call.value / 10^18 == call.value\n                              require (10^18 * call.value) + roundInfo[stor15].field_1793 >= 10^18 * call.value\n                              require roundInfo[stor15].field_1792\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          require 10^18 * call.value / 10^18 == call.value\n                          require (10^18 * call.value) + roundInfo[stor15].field_1793 >= 10^18 * call.value\n                      else:\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              require 10^18 * call.value / 10^18 == call.value\n                          else:\n                              require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                              if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  else:\n                                      require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                      require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n          else:\n              require 52 * 10^16 * call.value / 52 * 10^16 == call.value\n              require (52 * 10^16 * call.value) + 5 * 10^17 >= 52 * 10^16 * call.value\n              require 10^16 * call.value / 10^16 == call.value\n              require (10^16 * call.value) + 5 * 10^17 >= 10^16 * call.value\n              require 15 * 10^16 * call.value / 15 * 10^16 == call.value\n              require (15 * 10^16 * call.value) + 5 * 10^17 >= 15 * 10^16 * call.value\n              if roundInfo.length != 1:\n                  if not roundInfo[stor15].field_768:\n                      require roundInfo[stor15].field_256 + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                      roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require devBalance + (call.value / 20) >= devBalance\n                      devBalance += call.value / 20\n                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                              stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          require 10^18 * call.value / 10^18 == call.value\n                          require (10^18 * call.value) + roundInfo[stor15].field_1793 >= 10^18 * call.value\n                      else:\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              require 10^18 * call.value / 10^18 == call.value\n                          else:\n                              require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                              if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  else:\n                                      require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                      require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n                  else:\n                      require unclaimedReturns + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                      unclaimedReturns += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      if not roundInfo[stor15].field_768:\n                          require 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_1792\n                          require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                      else:\n                          require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                          roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 20) >= devBalance\n                          devBalance += call.value / 20\n                          if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n              else:\n                  raisedICO += call.value / 4\n                  if not roundInfo[stor15].field_768:\n                      require roundInfo[stor15].field_256 + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                      roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                      require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                      roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      require devBalance + (call.value / 4) >= devBalance\n                      devBalance += call.value / 4\n                      if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                              stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                          require 10^18 * call.value / 10^18 == call.value\n                          require (10^18 * call.value) + roundInfo[stor15].field_1793 >= 10^18 * call.value\n                      else:\n                          if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              require 10^18 * call.value / 10^18 == call.value\n                          else:\n                              require roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 <= roundInfo[stor15].field_1024\n                              if not roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                  stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                              else:\n                                  if not stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                                      stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 = roundInfo[stor15].field_1024\n                                  else:\n                                      require stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256\n                                      require (roundInfo[stor15].field_1024 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) - (stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0 * stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256) / stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256 == roundInfo[stor15].field_1024 - stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_0\n                  else:\n                      require unclaimedReturns + ((52 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= unclaimedReturns\n                      unclaimedReturns += (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                      if not roundInfo[stor15].field_768:\n                          require 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 >= 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_1792\n                          require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          roundInfo[stor15].field_1024 = 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / (10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18) + roundInfo[stor15].field_1793 / roundInfo[stor15].field_1792\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                      else:\n                          require 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / 1000000000 * 10^18 == (52 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_1024 + (1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768) >= roundInfo[stor15].field_1024\n                          roundInfo[stor15].field_1024 += 1000000000 * 10^18 * (52 * 10^16 * call.value) + 5 * 10^17 / 10^18 / roundInfo[stor15].field_768\n                          require roundInfo[stor15].field_512 + ((10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_512\n                          roundInfo[stor15].field_512 += (10^16 * call.value) + 5 * 10^17 / 10^18\n                          require roundInfo[stor15].field_256 + ((15 * 10^16 * call.value) + 5 * 10^17 / 10^18) >= roundInfo[stor15].field_256\n                          roundInfo[stor15].field_256 += (15 * 10^16 * call.value) + 5 * 10^17 / 10^18\n                          require devBalance + (call.value / 4) >= devBalance\n                          devBalance += call.value / 4\n                          if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n                              if stor[(11 * stor15) + ('name', 'roundInfo', 16) + 10][caller].field_256:\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 79350 tokens. Please reduce the length of the messages."
}