{
	"address": "0x373c55c277b866a69dc047cad488154ab9759466",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\ndef storage:\n  adminAddress is addr at storage 0\n  stor0 is uint256 at storage 0\n  feeAccount is addr at storage 1\n  stor1 is uint256 at storage 1\n  accountLevelsAddr is addr at storage 2\n  stor2 is uint256 at storage 2\n  feeMake is uint256 at storage 3\n  feeTake is uint256 at storage 4\n  feeRebate is uint256 at storage 5\n  tokens is mapping of uint256 at storage 6\n  stor7 is mapping of uint8 at storage 7\n  orderFills is mapping of uint256 at storage 8\n  stor99 is mapping of uint256 at storage 99\n\ndef orderFills(address _param1, bytes32 _param2): # not payable\n  return orderFills[_param1][_param2]\n\ndef amountFilled(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _user, uint8 _v, bytes32 _r, bytes32 _s): # not payable\n  hash = sha256hash(addr(this.address), 0, uint64(_amountGet), _tokenGive, _amountGive, _expires, _nonce) # precompiled\n  require sha256hash.result\n  return orderFills[addr(_user)][hash]\n\ndef tokens(address _param1, address _param2): # not payable\n  return tokens[_param1][_param2]\n\ndef feeMake(): # not payable\n  return feeMake\n\ndef feeAccount(): # not payable\n  return addr(feeAccount)\n\ndef feeRebate(): # not payable\n  return feeRebate\n\ndef orders(address _param1, bytes32 _param2): # not payable\n  return bool(stor7[_param1][_param2])\n\ndef feeTake(): # not payable\n  return feeTake\n\ndef accountLevelsAddr(): # not payable\n  return addr(accountLevelsAddr)\n\ndef balanceOf(address _owner, address _debtor): # not payable\n  return tokens[addr(_owner)][addr(_debtor)]\n\ndef admin(): # not payable\n  return addr(adminAddress)\n\n#\n#  Regular functions\n#\n\ndef _fallback(): # not payable, default function\n  revert \n\ndef changeFeeMake(uint256 _feeMake): # not payable\n  require caller == addr(adminAddress)\n  require _feeMake_ <= feeMake\n  feeMake = _feeMake_\n\ndef changeAdmin(address _admin): # not payable\n  require caller == addr(adminAddress)\n  uint256(stor0) = _admin_ or Mask(96, 160, uint256(stor0))\n\ndef changeFeeTake(uint256 _feeTake): # not payable\n  require caller == addr(adminAddress)\n  require _feeTake_ <= feeTake\n  require _feeTake_ >= feeRebate\n  feeTake = _feeTake_\n\ndef changeFeeAccount(address _feeAccount): # not payable\n  require caller == addr(adminAddress)\n  uint256(stor1) = _feeAccount_ or Mask(96, 160, uint256(stor1))\n\ndef changeFeeRebate(uint256 _feeRebate): # not payable\n  require caller == addr(adminAddress)\n  require _feeRebate_ >= feeRebate\n  require _feeRebate_ <= feeTake\n  feeRebate = _feeRebate_\n\ndef changeAccountLevelsAddr(address _accountLevelsAddr): # not payable\n  require caller == addr(adminAddress)\n  uint256(stor2) = _accountLevelsAddr_ or Mask(96, 160, uint256(stor2))\n\ndef deposit() payable: \n  require call.value + stor[code.data[5555 len 32]][caller] >= stor[code.data[5555 len 32]][caller]\n  require call.value + stor[code.data[5555 len 32]][caller] >= call.value\n  stor[code.data[5555 len 32]][caller] += call.value\n  log Deposit(\n        address token=0,\n        address user=caller,\n        uint256 amount=call.value,\n        uint256 balance=call.value + stor[code.data[5555 len 32]][caller])\n\ndef withdraw(uint256 _amount): # not payable\n  require call.value <= 0\n  require stor[code.data[5555 len 32]][caller] >= _amount\n  require _amount <= stor[code.data[5555 len 32]][caller]\n  stor[code.data[5555 len 32]][caller] -= _amount\n  call caller with:\n     value _amount wei\n       gas gas_remaining - 34050 wei\n  require ext_call.success\n  log Withdraw(\n        address token=0,\n        address user=caller,\n        uint256 amount=_amount,\n        uint256 balance=stor[code.data[5555 len 32]][caller])\n\ndef order(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce): # not payable\n  require call.value <= 0\n  hash = sha256hash(addr(this.address), 0, uint64(_amountGet), _tokenGive, _amountGive, _expires, _nonce) # precompiled\n  require sha256hash.result\n  stor7[caller][hash] = 1\n  log Order(\n        address tokenGet=_tokenGet,\n        uint256 amountGet=0,\n        address tokenGive=addr(_tokenGive),\n        uint256 amountGive=_amountGive,\n        uint256 expires=_expires,\n        uint256 nonce=_nonce,\n        address user=caller)\n\ndef withdrawToken(address _token, uint256 _amount): # not payable\n  require call.value <= 0\n  require _token\n  require tokens[addr(_token)][caller] >= _amount\n  require _amount <= tokens[addr(_token)][caller]\n  tokens[addr(_token)][caller] -= _amount\n  require ext_code.size(_token)\n  call _token.transfer(address to, uint256 tokens) with:\n       gas gas_remaining - 50 wei\n      args caller, _amount\n  require ext_call.success\n  require ext_call.return_data[0]\n  log Withdraw(\n        address token=addr(_token),\n        address user=caller,\n        uint256 amount=_amount,\n        uint256 balance=tokens[addr(_token)][caller])\n\ndef depositToken(address _token, uint256 _amount): # not payable\n  require call.value <= 0\n  require _token\n  require ext_code.size(_token)\n  call _token.transferFrom(address from, address to, uint256 tokens) with:\n       gas gas_remaining - 50 wei\n      args caller, addr(this.address), _amount\n  require ext_call.success\n  require ext_call.return_data[0]\n  require _amount + tokens[addr(_token)][caller] >= tokens[addr(_token)][caller]\n  require _amount + tokens[addr(_token)][caller] >= _amount\n  tokens[addr(_token)][caller] += _amount\n  log Deposit(\n        address token=addr(_token),\n        address user=caller,\n        uint256 amount=_amount,\n        uint256 balance=_amount + tokens[addr(_token)][caller])\n\ndef cancelOrder(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, uint8 _v, bytes32 _r, bytes32 _s): # not payable\n  require call.value <= 0\n  hash = sha256hash(addr(this.address), 0, uint64(_amountGet), _tokenGive, _amountGive, _expires, _nonce) # precompiled\n  require sha256hash.result\n  if stor7[caller][hash]:\n      orderFills[caller][hash] = _amountGet\n      log Cancel(\n            address tokenBuy=_tokenGet,\n            uint256 amountBuy=0,\n            address tokenSell=addr(_tokenGive),\n            uint256 amountSell=_amountGive,\n            uint256 expires=_expires,\n            uint256 nonce=_nonce,\n            address user=caller,\n            uint8 v=_v << 248,\n            bytes32 r=_r,\n            bytes32 s=_s)\n  else:\n      signer = erecover(hash, _v << 248, _r, _s) # precompiled\n      require erecover.result\n      require addr(signer) == caller\n      orderFills[caller][hash] = _amountGet\n      log Cancel(\n            address tokenBuy=_tokenGet,\n            uint256 amountBuy=0,\n            address tokenSell=addr(_tokenGive),\n            uint256 amountSell=_amountGive,\n            uint256 expires=_expires,\n            uint256 nonce=_nonce,\n            address user=caller,\n            uint8 v=_v << 248,\n            bytes32 r=_r,\n            bytes32 s=_s)\n\ndef availableVolume(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _user, uint8 _v, bytes32 _r, bytes32 _s): # not payable\n  hash = sha256hash(addr(this.address), 0, uint64(_amountGet), _tokenGive, _amountGive, _expires, _nonce) # precompiled\n  require sha256hash.result\n  if not stor7[addr(_user)][hash]:\n      signer = erecover(hash, _v << 248, _r, _s) # precompiled\n      require erecover.result\n      if addr(signer) != _user:\n          return 0\n  if block.number > _expires:\n      return 0\n  require orderFills[addr(_user)][hash] <= _amountGet\n  if tokens[addr(_tokenGive)][addr(_user)]:\n      require tokens[addr(_tokenGive)][addr(_user)]\n      require _amountGet * tokens[addr(_tokenGive)][addr(_user)] / tokens[addr(_tokenGive)][addr(_user)] == _amountGet\n  require _amountGive\n  if _amountGet - orderFills[addr(_user)][hash] >= _amountGet * tokens[addr(_tokenGive)][addr(_user)] / _amountGive:\n      return (_amountGet * tokens[addr(_tokenGive)][addr(_user)] / _amountGive)\n  return (_amountGet - orderFills[addr(_user)][hash])\n\ndef testTrade(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _user, uint8 _v, bytes32 _r, bytes32 _s, uint256 _amount, address _sender): # not payable\n  if tokens[addr(_tokenGet)][addr(_sender)] >= _amount:\n      hash = sha256hash(addr(this.address), 0, uint64(_amountGet), _tokenGive, _amountGive, _expires, _nonce) # precompiled\n      require sha256hash.result\n      if stor7[addr(_user)][hash]:\n          if block.number > _expires:\n              if 0 >= _amount:\n                  return 1\n          else:\n              require orderFills[addr(_user)][hash] <= _amountGet\n              if tokens[addr(_tokenGive)][addr(_user)]:\n                  require tokens[addr(_tokenGive)][addr(_user)]\n                  require _amountGet * tokens[addr(_tokenGive)][addr(_user)] / tokens[addr(_tokenGive)][addr(_user)] == _amountGet\n              require _amountGive\n              if _amountGet - orderFills[addr(_user)][hash] >= _amountGet * tokens[addr(_tokenGive)][addr(_user)] / _amountGive:\n                  if _amountGet * tokens[addr(_tokenGive)][addr(_user)] / _amountGive >= _amount:\n                      return 1\n              else:\n                  if _amountGet - orderFills[addr(_user)][hash] >= _amount:\n                      return 1\n      else:\n          signer = erecover(hash, _v << 248, _r, _s) # precompiled\n          require erecover.result\n          if addr(signer) != _user:\n              if 0 >= _amount:\n                  return 1\n          else:\n              if block.number > _expires:\n                  if 0 >= _amount:\n                      return 1\n              else:\n                  require orderFills[addr(_user)][hash] <= _amountGet\n                  if tokens[addr(_tokenGive)][addr(_user)]:\n                      require tokens[addr(_tokenGive)][addr(_user)]\n                      require _amountGet * tokens[addr(_tokenGive)][addr(_user)] / tokens[addr(_tokenGive)][addr(_user)] == _amountGet\n                  require _amountGive\n                  if _amountGet - orderFills[addr(_user)][hash] >= _amountGet * tokens[addr(_tokenGive)][addr(_user)] / _amountGive:\n                      if _amountGet * tokens[addr(_tokenGive)][addr(_user)] / _amountGive >= _amount:\n                          return 1\n                  else:\n                      if _amountGet - orderFills[addr(_user)][hash] >= _amount:\n                          return 1\n      return 0\n  else:\n      return 0\n\ndef trade(address _tokenGet, uint256 _amountGet, address _tokenGive, uint256 _amountGive, uint256 _expires, uint256 _nonce, address _user, uint8 _v, bytes32 _r, bytes32 _s, uint256 _amount): # not payable\n  require call.value <= 0\n  hash = sha256hash(addr(this.address), 0, uint64(_amountGet), _tokenGive, _amountGive, _expires, _nonce) # precompiled\n  require sha256hash.result\n  if stor7[addr(_user)][hash]:\n      require block.number <= _expires\n      require _amount + orderFills[addr(_user)][hash] >= orderFills[addr(_user)][hash]\n      require _amount + orderFills[addr(_user)][hash] >= _amount\n      require _amount + orderFills[addr(_user)][hash] <= _amountGet\n      if not _amount:\n          if not _amount:\n              if not addr(accountLevelsAddr):\n                  require (feeTake * _amount / 10^18) + _amount >= _amount\n                  require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                  tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                  require _amount >= _amount\n                  require _amount >= 0\n                  require feeMake * _amount / 10^18 <= _amount\n                  require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                  require tokens[addr(_tokenGet)][_user] >= 0\n                  tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                  require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                  require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                  tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                  if _amountGive:\n                      require _amountGive\n                      require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if _amountGive:\n                      require _amountGive\n                      require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                  tokens[addr(_tokenGive)][caller] = (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller]\n              else:\n                  require ext_code.size(addr(accountLevelsAddr))\n                  call addr(accountLevelsAddr).accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args _user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      require (feeTake * _amount / 10^18) + _amount >= _amount\n                      require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                      require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                      tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                      if ext_call.return_data[0] != 2:\n                          require _amount >= _amount\n                          require _amount >= 0\n                          require feeMake * _amount / 10^18 <= _amount\n                          require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                          tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                                  tokens[addr(_tokenGive)][caller] = (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller]\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                              require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive\n                          require _amount * _amountGive / _amountGive == _amount\n                          require _amountGet\n                          require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                          tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                          if not _amountGive:\n                              require _amountGet\n                              require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                              require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require _amountGive\n                          require _amount * _amountGive / _amountGive == _amount\n                          require _amountGet\n                          require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                      else:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                          require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                          tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n                  else:\n                      if not _amount:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                          tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                          if ext_call.return_data[0] != 2:\n                              require (feeRebate * _amount / 10^18) + _amount >= _amount\n                              require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                              require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                              tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                              if not _amountGive:\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if not _amountGive:\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                          else:\n                              require (feeTake * _amount / 10^18) + _amount >= _amount\n                              require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                              require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                              tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                              if _amountGive:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                      else:\n                          require _amount\n                          require feeRebate * _amount / _amount == feeRebate\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                          tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                          if 2 == ext_call.return_data[0]:\n                              require (feeTake * _amount / 10^18) + _amount >= _amount\n                              require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                              require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                              tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                          else:\n                              require (feeRebate * _amount / 10^18) + _amount >= _amount\n                              require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                              require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                              tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                          if _amountGive:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                      require _amountGet\n                      require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                      tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                      if _amountGive:\n                          require _amountGive\n          else:\n              require _amount\n              require feeTake * _amount / _amount == feeTake\n              if not addr(accountLevelsAddr):\n                  require (feeTake * _amount / 10^18) + _amount >= _amount\n                  require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                  tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                  require _amount >= _amount\n                  require _amount >= 0\n                  require feeMake * _amount / 10^18 <= _amount\n                  require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                  require tokens[addr(_tokenGet)][_user] >= 0\n                  tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                  require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                  require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                  tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                  if _amountGive:\n                      require _amountGive\n                      require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if _amountGive:\n                      require _amountGive\n                      require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                  tokens[addr(_tokenGive)][caller] = (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller]\n              else:\n                  require ext_code.size(addr(accountLevelsAddr))\n                  call addr(accountLevelsAddr).accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args _user\n                  require ext_call.success\n                  if ext_call.return_data[0] == 1:\n                      if not _amount:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                          tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                          if 2 == ext_call.return_data[0]:\n                              require (feeTake * _amount / 10^18) + _amount >= _amount\n                              require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                              require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                              tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                          else:\n                              require (feeRebate * _amount / 10^18) + _amount >= _amount\n                              require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                              require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                              tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                          if _amountGive:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                          require _amountGet\n                          require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                          tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                          if _amountGive:\n                              require _amountGive\n                      else:\n                          require _amount\n                          require feeRebate * _amount / _amount == feeRebate\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                          tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                          if ext_call.return_data[0] != 2:\n                              require (feeRebate * _amount / 10^18) + _amount >= _amount\n                              require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                              require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                              tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                              if _amountGive:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if _amountGive:\n                                  require _amountGive\n                          else:\n                              require (feeTake * _amount / 10^18) + _amount >= _amount\n                              require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                              require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                              tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                              if not _amountGive:\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n                                      require _amountGive\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n                  else:\n                      require (feeTake * _amount / 10^18) + _amount >= _amount\n                      require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                      require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                      tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                      if 2 == ext_call.return_data[0]:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                          require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                          tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                      else:\n                          require _amount >= _amount\n                          require _amount >= 0\n                          require feeMake * _amount / 10^18 <= _amount\n                          require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                          tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n      else:\n          require _amount\n          require feeMake * _amount / _amount == feeMake\n          if not _amount:\n              if not addr(accountLevelsAddr):\n                  require (feeTake * _amount / 10^18) + _amount >= _amount\n                  require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                  tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                  require _amount >= _amount\n                  require _amount >= 0\n                  require feeMake * _amount / 10^18 <= _amount\n                  require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                  require tokens[addr(_tokenGet)][_user] >= 0\n                  tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                  require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                  require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                  tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                  if _amountGive:\n                      require _amountGive\n                      require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if _amountGive:\n                      require _amountGive\n                      require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                  tokens[addr(_tokenGive)][caller] = (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller]\n              else:\n                  require ext_code.size(addr(accountLevelsAddr))\n                  call addr(accountLevelsAddr).accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args _user\n                  require ext_call.success\n                  if ext_call.return_data[0] == 1:\n                      if not _amount:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                          tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                          if 2 == ext_call.return_data[0]:\n                              require (feeTake * _amount / 10^18) + _amount >= _amount\n                              require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                              require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                              tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                          else:\n                              require (feeRebate * _amount / 10^18) + _amount >= _amount\n                              require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                              require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                              tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                          if _amountGive:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                          require _amountGet\n                          require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                          tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                          if _amountGive:\n                              require _amountGive\n                      else:\n                          require _amount\n                          require feeRebate * _amount / _amount == feeRebate\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                          tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                          if ext_call.return_data[0] != 2:\n                              require (feeRebate * _amount / 10^18) + _amount >= _amount\n                              require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                              require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                              tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                              if _amountGive:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if _amountGive:\n                                  require _amountGive\n                          else:\n                              require (feeTake * _amount / 10^18) + _amount >= _amount\n                              require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                              require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                              tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                              if not _amountGive:\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n                                      require _amountGive\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n                  else:\n                      require (feeTake * _amount / 10^18) + _amount >= _amount\n                      require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                      require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                      tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                      if 2 == ext_call.return_data[0]:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                          require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                          tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                      else:\n                          require _amount >= _amount\n                          require _amount >= 0\n                          require feeMake * _amount / 10^18 <= _amount\n                          require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                          tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n          else:\n              require _amount\n              require feeTake * _amount / _amount == feeTake\n              if not addr(accountLevelsAddr):\n                  require (feeTake * _amount / 10^18) + _amount >= _amount\n                  require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                  tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                  require _amount >= _amount\n                  require _amount >= 0\n                  require feeMake * _amount / 10^18 <= _amount\n                  require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                  require tokens[addr(_tokenGet)][_user] >= 0\n                  tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                  require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                  require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                  tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                  if _amountGive:\n                      require _amountGive\n                      require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if _amountGive:\n                      require _amountGive\n                      require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                  tokens[addr(_tokenGive)][caller] = (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller]\n              else:\n                  require ext_code.size(addr(accountLevelsAddr))\n                  call addr(accountLevelsAddr).accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args _user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      require (feeTake * _amount / 10^18) + _amount >= _amount\n                      require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                      require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                      tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                      if ext_call.return_data[0] != 2:\n                          require _amount >= _amount\n                          require _amount >= 0\n                          require feeMake * _amount / 10^18 <= _amount\n                          require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                          tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                      else:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                          require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                          tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if _amountGive:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                  else:\n                      if not _amount:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                          tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                          if ext_call.return_data[0] != 2:\n                              require (feeRebate * _amount / 10^18) + _amount >= _amount\n                              require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                              require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                              tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                              if _amountGive:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if _amountGive:\n                                  require _amountGive\n                          else:\n                              require (feeTake * _amount / 10^18) + _amount >= _amount\n                              require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                              require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                              tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                              if not _amountGive:\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n                                      require _amountGive\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n                      else:\n                          require _amount\n                          require feeRebate * _amount / _amount == feeRebate\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                          tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                          if 2 == ext_call.return_data[0]:\n                              require (feeTake * _amount / 10^18) + _amount >= _amount\n                              require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                              require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                              tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                              if not _amountGive:\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                          else:\n                              require (feeRebate * _amount / 10^18) + _amount >= _amount\n                              require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                              require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                              tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                              if not _amountGive:\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n                                      require _amountGive\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n  else:\n      signer = erecover(hash, _v << 248, _r, _s) # precompiled\n      require erecover.result\n      require addr(signer) == _user\n      require block.number <= _expires\n      require _amount + orderFills[addr(_user)][hash] >= orderFills[addr(_user)][hash]\n      require _amount + orderFills[addr(_user)][hash] >= _amount\n      require _amount + orderFills[addr(_user)][hash] <= _amountGet\n      if not _amount:\n          if not _amount:\n              if not addr(accountLevelsAddr):\n                  require (feeTake * _amount / 10^18) + _amount >= _amount\n                  require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                  tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                  require _amount >= _amount\n                  require _amount >= 0\n                  require feeMake * _amount / 10^18 <= _amount\n                  require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                  require tokens[addr(_tokenGet)][_user] >= 0\n                  tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                  require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                  require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                  tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                  if _amountGive:\n                      require _amountGive\n                      require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if _amountGive:\n                      require _amountGive\n                      require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                  tokens[addr(_tokenGive)][caller] = (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller]\n              else:\n                  require ext_code.size(addr(accountLevelsAddr))\n                  call addr(accountLevelsAddr).accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args _user\n                  require ext_call.success\n                  if ext_call.return_data[0] != 1:\n                      require (feeTake * _amount / 10^18) + _amount >= _amount\n                      require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                      require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                      tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                      if ext_call.return_data[0] != 2:\n                          require _amount >= _amount\n                          require _amount >= 0\n                          require feeMake * _amount / 10^18 <= _amount\n                          require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                          tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                      else:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                          require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                          tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if not _amountGive:\n                                  require _amountGet\n                                  if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if _amountGive:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                  else:\n                      if not _amount:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                          tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                          if ext_call.return_data[0] != 2:\n                              require (feeRebate * _amount / 10^18) + _amount >= _amount\n                              require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                              require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                              tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                              if _amountGive:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if _amountGive:\n                                  require _amountGive\n                          else:\n                              require (feeTake * _amount / 10^18) + _amount >= _amount\n                              require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                              require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                              tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                              if not _amountGive:\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n                                      require _amountGive\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n                      else:\n                          require _amount\n                          require feeRebate * _amount / _amount == feeRebate\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                          tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                          if 2 == ext_call.return_data[0]:\n                              require (feeTake * _amount / 10^18) + _amount >= _amount\n                              require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                              require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                              tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                              if not _amountGive:\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                          else:\n                              require (feeRebate * _amount / 10^18) + _amount >= _amount\n                              require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                              require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                              tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                              if not _amountGive:\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n                                      require _amountGive\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n          else:\n              require _amount\n              require feeTake * _amount / _amount == feeTake\n              if not addr(accountLevelsAddr):\n                  require (feeTake * _amount / 10^18) + _amount >= _amount\n                  require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                  tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                  require _amount >= _amount\n                  require _amount >= 0\n                  require feeMake * _amount / 10^18 <= _amount\n                  require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                  require tokens[addr(_tokenGet)][_user] >= 0\n                  tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                  require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                  require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                  tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                  if not _amountGive:\n                      require _amountGet\n                      require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                      tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                      if _amountGive:\n                          require _amountGive\n                          require _amount * _amountGive / _amountGive == _amount\n                      require _amountGet\n                      require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                      require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                      tokens[addr(_tokenGive)][caller] = (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller]\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require _amountGive\n                  require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not _amountGive:\n                      require _amountGet\n                      require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                      require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                      tokens[addr(_tokenGive)][caller] = (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller]\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require _amountGive\n                  require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_code.size(addr(accountLevelsAddr))\n              call addr(accountLevelsAddr).accountLevel(address user) with:\n                   gas gas_remaining - 50 wei\n                  args _user\n              require ext_call.success\n              if ext_call.return_data[0] == 1:\n                  if not _amount:\n                      require (feeTake * _amount / 10^18) + _amount >= _amount\n                      require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                      require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                      tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                      if 2 == ext_call.return_data[0]:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                          require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                          tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if _amountGive:\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                      else:\n                          require (feeRebate * _amount / 10^18) + _amount >= _amount\n                          require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                          require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                          tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if _amountGive:\n                                  require _amountGive\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if _amountGive:\n                  else:\n                      require _amount\n                      require feeRebate * _amount / _amount == feeRebate\n                      require (feeTake * _amount / 10^18) + _amount >= _amount\n                      require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                      require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                      tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                      if 2 == ext_call.return_data[0]:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                          require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                          tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                          if _amountGive:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                          require _amountGet\n                          require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                          tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                      else:\n                          require (feeRebate * _amount / 10^18) + _amount >= _amount\n                          require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                          require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                          tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if _amountGive:\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n              else:\n                  require (feeTake * _amount / 10^18) + _amount >= _amount\n                  require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                  tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                  if ext_call.return_data[0] != 2:\n                      require _amount >= _amount\n                      require _amount >= 0\n                      require feeMake * _amount / 10^18 <= _amount\n                      require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                      require tokens[addr(_tokenGet)][_user] >= 0\n                      tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                      require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                      require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                      require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                      require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                      require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                      tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                      if not _amountGive:\n                          require _amountGet\n                          require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                          tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                          if not _amountGive:\n                              require _amountGet\n                              if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                      else:\n                          require _amountGive\n                          require _amount * _amountGive / _amountGive == _amount\n                          require _amountGet\n                          require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                          tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                          if _amountGive:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                          require _amountGet\n                  else:\n                      require (feeTake * _amount / 10^18) + _amount >= _amount\n                      require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                      require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                      require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                      require tokens[addr(_tokenGet)][_user] >= 0\n                      tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                      require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                      require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                      require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                      require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                      require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                      tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                      if _amountGive:\n                          require _amountGive\n                          require _amount * _amountGive / _amountGive == _amount\n                      require _amountGet\n                      require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                      tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                      if _amountGive:\n                          require _amountGive\n                          require _amount * _amountGive / _amountGive == _amount\n                      require _amountGet\n      else:\n          require _amount\n          require feeMake * _amount / _amount == feeMake\n          if not _amount:\n              if not addr(accountLevelsAddr):\n                  require (feeTake * _amount / 10^18) + _amount >= _amount\n                  require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                  tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                  require _amount >= _amount\n                  require _amount >= 0\n                  require feeMake * _amount / 10^18 <= _amount\n                  require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                  require tokens[addr(_tokenGet)][_user] >= 0\n                  tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                  require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                  require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                  tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                  if not _amountGive:\n                      require _amountGet\n                      require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                      tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                      if _amountGive:\n                          require _amountGive\n                          require _amount * _amountGive / _amountGive == _amount\n                      require _amountGet\n                      require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                      require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                      tokens[addr(_tokenGive)][caller] = (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller]\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require _amountGive\n                  require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not _amountGive:\n                      require _amountGet\n                      require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                      require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                      tokens[addr(_tokenGive)][caller] = (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller]\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require _amountGive\n                  require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require ext_code.size(addr(accountLevelsAddr))\n              call addr(accountLevelsAddr).accountLevel(address user) with:\n                   gas gas_remaining - 50 wei\n                  args _user\n              require ext_call.success\n              if ext_call.return_data[0] == 1:\n                  if not _amount:\n                      require (feeTake * _amount / 10^18) + _amount >= _amount\n                      require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                      require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                      tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                      if 2 == ext_call.return_data[0]:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                          require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                          tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if _amountGive:\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                      else:\n                          require (feeRebate * _amount / 10^18) + _amount >= _amount\n                          require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                          require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                          tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if _amountGive:\n                                  require _amountGive\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if _amountGive:\n                  else:\n                      require _amount\n                      require feeRebate * _amount / _amount == feeRebate\n                      require (feeTake * _amount / 10^18) + _amount >= _amount\n                      require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                      require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                      tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                      if 2 == ext_call.return_data[0]:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                          require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                          tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                          if _amountGive:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                          require _amountGet\n                          require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                          tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                      else:\n                          require (feeRebate * _amount / 10^18) + _amount >= _amount\n                          require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                          require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                          tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                          if not _amountGive:\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                              if _amountGive:\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n              else:\n                  require (feeTake * _amount / 10^18) + _amount >= _amount\n                  require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                  tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                  if ext_call.return_data[0] != 2:\n                      require _amount >= _amount\n                      require _amount >= 0\n                      require feeMake * _amount / 10^18 <= _amount\n                      require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                      require tokens[addr(_tokenGet)][_user] >= 0\n                      tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                      require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                      require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                      require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                      require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                      require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                      tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                      if not _amountGive:\n                          require _amountGet\n                          require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                          tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                          if not _amountGive:\n                              require _amountGet\n                              if (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]:\n                          else:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                      else:\n                          require _amountGive\n                          require _amount * _amountGive / _amountGive == _amount\n                          require _amountGet\n                          require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                          tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                          if _amountGive:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                          require _amountGet\n                  else:\n                      require (feeTake * _amount / 10^18) + _amount >= _amount\n                      require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                      require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                      require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                      require tokens[addr(_tokenGet)][_user] >= 0\n                      tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                      require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                      require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                      require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                      require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                      require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                      tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                      if _amountGive:\n                          require _amountGive\n                          require _amount * _amountGive / _amountGive == _amount\n                      require _amountGet\n                      require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                      tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                      if _amountGive:\n                          require _amountGive\n                          require _amount * _amountGive / _amountGive == _amount\n                      require _amountGet\n          else:\n              require _amount\n              require feeTake * _amount / _amount == feeTake\n              if not addr(accountLevelsAddr):\n                  require (feeTake * _amount / 10^18) + _amount >= _amount\n                  require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                  tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                  require _amount >= _amount\n                  require _amount >= 0\n                  require feeMake * _amount / 10^18 <= _amount\n                  require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                  require tokens[addr(_tokenGet)][_user] >= 0\n                  tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                  require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                  require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                  require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                  tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                  if not _amountGive:\n                      require _amountGet\n                      require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                      tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                      if not _amountGive:\n                          require _amountGet\n                          require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                          require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                          tokens[addr(_tokenGive)][caller] = (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller]\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require _amountGive\n                      require _amount * _amountGive / _amountGive == _amount\n                      require _amountGet\n                      require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                      require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require _amountGive\n                  require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  if not _amountGive:\n                      require _amountGet\n                      require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n                      require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= _amount * _amountGive / _amountGet\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require _amountGive\n                  require _amount * _amountGive / _amountGive == _amount\n                  require _amountGet\n                  require (_amount * _amountGive / _amountGet) + tokens[addr(_tokenGive)][caller] >= tokens[addr(_tokenGive)][caller]\n              else:\n                  require ext_code.size(addr(accountLevelsAddr))\n                  call addr(accountLevelsAddr).accountLevel(address user) with:\n                       gas gas_remaining - 50 wei\n                      args _user\n                  require ext_call.success\n                  if ext_call.return_data[0] == 1:\n                      if not _amount:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                          tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                          if 2 == ext_call.return_data[0]:\n                              require (feeTake * _amount / 10^18) + _amount >= _amount\n                              require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                              require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                              tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                              if _amountGive:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                          else:\n                              require (feeRebate * _amount / 10^18) + _amount >= _amount\n                              require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                              require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                              tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                              if not _amountGive:\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  if _amountGive:\n                              else:\n                                  require _amountGive\n                                  require _amount * _amountGive / _amountGive == _amount\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                      else:\n                          require _amount\n                          require feeRebate * _amount / _amount == feeRebate\n                          if 2 == ext_call.return_data[0]:\n                              require (feeTake * _amount / 10^18) + _amount >= _amount\n                              require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                              tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                              require (feeTake * _amount / 10^18) + _amount >= _amount\n                              require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                              require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                              require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                              require tokens[addr(_tokenGet)][_user] >= 0\n                              tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                              require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                              require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                              require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                              tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                              if not _amountGive:\n                                  require _amountGet\n                                  require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                                  tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                              require _amountGet\n                              require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                          tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                          require (feeRebate * _amount / 10^18) + _amount >= _amount\n                          require (feeRebate * _amount / 10^18) + _amount >= feeRebate * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeRebate * _amount / 10^18) + _amount\n                          require (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeRebate * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeRebate * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                          tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) - (feeRebate * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                          if _amountGive:\n                              require _amountGive\n                              require _amount * _amountGive / _amountGive == _amount\n                          require _amountGet\n                          require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                          tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                  else:\n                      require (feeTake * _amount / 10^18) + _amount >= _amount\n                      require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                      require (feeTake * _amount / 10^18) + _amount <= tokens[addr(_tokenGet)][caller]\n                      tokens[addr(_tokenGet)][caller] = tokens[addr(_tokenGet)][caller] - (feeTake * _amount / 10^18) - _amount\n                      if 2 == ext_call.return_data[0]:\n                          require (feeTake * _amount / 10^18) + _amount >= _amount\n                          require (feeTake * _amount / 10^18) + _amount >= feeTake * _amount / 10^18\n                          require feeMake * _amount / 10^18 <= (feeTake * _amount / 10^18) + _amount\n                          require (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = (feeTake * _amount / 10^18) + _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require feeTake * _amount / 10^18 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= feeMake * _amount / 10^18\n                          tokens[addr(_tokenGet)][addr(stor1)] += feeMake * _amount / 10^18\n                      else:\n                          require _amount >= _amount\n                          require _amount >= 0\n                          require feeMake * _amount / 10^18 <= _amount\n                          require _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user] >= tokens[addr(_tokenGet)][_user]\n                          require tokens[addr(_tokenGet)][_user] >= 0\n                          tokens[addr(_tokenGet)][addr(_user)] = _amount - (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][_user]\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeMake * _amount / 10^18\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) >= feeTake * _amount / 10^18\n                          require 0 <= (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18)\n                          require (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)] >= tokens[addr(_tokenGet)][addr(stor1)]\n                          require tokens[addr(_tokenGet)][addr(stor1)] >= 0\n                          tokens[addr(_tokenGet)][addr(stor1)] = (feeTake * _amount / 10^18) + (feeMake * _amount / 10^18) + tokens[addr(_tokenGet)][addr(stor1)]\n                      if _amountGive:\n                          require _amountGive\n                          require _amount * _amountGive / _amountGive == _amount\n                      require _amountGet\n                      require _amount * _amountGive / _amountGet <= tokens[addr(_tokenGive)][addr(_user)]\n                      tokens[addr(_tokenGive)][addr(_user)] -= _amount * _amountGive / _amountGet\n                      if _amountGive:\n                          require _amountGive\n                          require _amount * _amountGive / _amountGive == _amount\n                      require _amountGet\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 42401 tokens. Please reduce the length of the messages."
}