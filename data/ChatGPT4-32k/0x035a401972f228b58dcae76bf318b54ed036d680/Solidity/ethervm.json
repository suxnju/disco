{
	"address": "0x035a401972f228b58dcae76bf318b54ed036d680",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled code provided, here's the Solidity contract. Please note that this is a high-level reconstruction and may not 100% match the original contract:\n\n```solidity\npragma solidity ^0.5.16;\n\ncontract Contract {\n    address[] owners;\n    mapping(address => bool) isOwner;\n    uint256 required;\n    uint256 transactionCount;\n    struct Transaction {\n        address destination;\n        uint256 value;\n        bytes data;\n        bool executed;\n    }\n    mapping(uint256 => Transaction) transactions;\n    mapping(uint256 => mapping(address => bool)) confirmations;\n\n    function addOwner(address _owner) public {\n        require(_owner != address(0), \"Invalid owner address\");\n        require(!isOwner[_owner], \"Owner already exists\");\n        isOwner[_owner] = true;\n        owners.push(_owner);\n    }\n\n    function removeOwner(address _owner) public {\n        require(isOwner[_owner], \"Not an owner\");\n        isOwner[_owner] = false;\n        for (uint256 i = 0; i<owners.length - 1; i++)\n            if (owners[i] == _owner) {\n                owners[i] = owners[owners.length - 1];\n                break;\n            }\n        owners.length -= 1;\n    }\n\n    function changeRequirement(uint256 _required) public {\n        required = _required;\n    }\n\n    function submitTransaction(address _destination, uint256 _value, bytes memory _data) public returns (uint256 transactionId) {\n        transactionId = transactionCount;\n        transactions[transactionId] = Transaction({\n            destination: _destination,\n            value: _value,\n            data: _data,\n            executed: false\n        });\n        transactionCount += 1;\n    }\n\n    function confirmTransaction(uint256 _transactionId) public {\n        require(isOwner[msg.sender], \"Not an owner\");\n        confirmations[_transactionId][msg.sender] = true;\n    }\n\n    function executeTransaction(uint256 _transactionId) public {\n        require(transactions[_transactionId].executed == false, \"Transaction already executed\");\n        if (isConfirmed(_transactionId)) {\n            Transaction storage txn = transactions[_transactionId];\n            txn.executed = true;\n            (bool success,) = txn.destination.call.value(txn.value)(txn.data);\n            require(success, \"Transaction failed\");\n        }\n    }\n\n    function isConfirmed(uint256 _transactionId) internal view returns (bool) {\n        uint256 count = 0;\n        for (uint256 i = 0; i < owners.length; i++) {\n            if (confirmations[_transactionId][owners[i]])\n                count += 1;\n            if (count == required)\n                return true;\n        }\n    }\n}\n```\n\nPlease note that the return statements and other conditions might not be accurate due to the fact that EVM bytecode does not directly map to high-level language constructs.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471478,
	"id": "chatcmpl-8MubG2OCVXeLhVzTwHqDWc1FftUBm",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_011B:\n            var var0 = 0x017a;\n        \n            if (msg.value <= 0x00) {\n                func_0177();\n                stop();\n            } else {\n                func_0129();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x019a;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0210;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0230;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0266;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = isOwner(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x02bd;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = confirmations(var2, var3);\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0302;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x034c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x036c;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03a4;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03d8;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp12 = memory[0x40:0x60];\n                var var6 = temp12;\n                memory[var6:var6 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp13 = var6 + 0x20;\n                memory[temp13:temp13 + 0x20] = var3;\n                var temp14 = temp13 + 0x20;\n                var var7 = temp14;\n                var temp15 = var7 + 0x20;\n                memory[temp15:temp15 + 0x20] = !!var5;\n                var temp16 = temp15 + 0x20;\n                memory[var7:var7 + 0x20] = temp16 - var6;\n                var temp17 = var4;\n                var var9 = temp17;\n                var temp18 = storage[var9];\n                memory[temp16:temp16 + 0x20] = (!(temp18 & 0x01) * 0x0100 - 0x01 & temp18) / 0x02;\n                var var8 = temp16 + 0x20;\n                var temp19 = storage[var9];\n                var var10 = (!(temp19 & 0x01) * 0x0100 - 0x01 & temp19) / 0x02;\n            \n                if (!var10) {\n                label_04A3:\n                    var temp20 = memory[0x40:0x60];\n                    return memory[temp20:temp20 + var8 - temp20];\n                } else if (0x1f < var10) {\n                    var temp21 = var8;\n                    var temp22 = temp21 + var10;\n                    var8 = temp22;\n                    memory[0x00:0x20] = var9;\n                    var temp23 = keccak256(memory[0x00:0x20]);\n                    memory[temp21:temp21 + 0x20] = storage[temp23];\n                    var9 = temp23 + 0x01;\n                    var10 = temp21 + 0x20;\n                \n                    if (var8 <= var10) { goto label_049A; }\n                \n                label_0486:\n                    var temp24 = var9;\n                    var temp25 = var10;\n                    memory[temp25:temp25 + 0x20] = storage[temp24];\n                    var9 = temp24 + 0x01;\n                    var10 = temp25 + 0x20;\n                \n                    if (var8 > var10) { goto label_0486; }\n                \n                label_049A:\n                    var temp26 = var8;\n                    var temp27 = temp26 + (var10 - temp26 & 0x1f);\n                    var10 = temp26;\n                    var8 = temp27;\n                    goto label_04A3;\n                } else {\n                    var temp28 = var8;\n                    memory[temp28:temp28 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var8 = temp28 + 0x20;\n                    var10 = var10;\n                    goto label_04A3;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x04c5;\n                var1 = getOwners();\n                var temp29 = memory[0x40:0x60];\n                var2 = temp29;\n                var3 = var2;\n                var temp30 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp30 - var3;\n                var temp31 = var1;\n                memory[temp30:temp30 + 0x20] = memory[temp31:temp31 + 0x20];\n                var4 = temp30 + 0x20;\n                var5 = temp31 + 0x20;\n                var6 = memory[temp31:temp31 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n            \n                if (var7 == 0x00) {\n                label_0517:\n                    var temp32 = memory[0x40:0x60];\n                    return memory[temp32:temp32 + (var6 + var4) - temp32];\n                } else {\n                label_04F3:\n                    memory[var8:var8 + 0x20] = memory[var9:var9 + 0x20];\n                \n                    if (var7 <= 0x20) { goto label_0517; }\n                \n                    var8 = var8 + 0x20;\n                    var9 = var9 + 0x20;\n                    var7 = var7 - 0x20;\n                    goto label_04F3;\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0567;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                var temp33 = memory[0x40:0x60];\n                var2 = temp33;\n                var3 = var2;\n                var temp34 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp34 - var3;\n                var temp35 = var1;\n                memory[temp34:temp34 + 0x20] = memory[temp35:temp35 + 0x20];\n                var4 = temp34 + 0x20;\n                var5 = temp35 + 0x20;\n                var6 = memory[temp35:temp35 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n            \n                if (var7 == 0x00) {\n                label_05B9:\n                    var temp36 = memory[0x40:0x60];\n                    return memory[temp36:temp36 + (var6 + var4) - temp36];\n                } else {\n                label_0595:\n                    memory[var8:var8 + 0x20] = memory[var9:var9 + 0x20];\n                \n                    if (var7 <= 0x20) { goto label_05B9; }\n                \n                    var8 = var8 + 0x20;\n                    var9 = var9 + 0x20;\n                    var7 = var7 - 0x20;\n                    goto label_0595;\n                }\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x05ea;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                var temp37 = memory[0x40:0x60];\n                var2 = temp37;\n                var3 = var2;\n                var temp38 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp38 - var3;\n                var temp39 = var1;\n                memory[temp38:temp38 + 0x20] = memory[temp39:temp39 + 0x20];\n                var4 = temp38 + 0x20;\n                var5 = temp39 + 0x20;\n                var6 = memory[temp39:temp39 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n            \n                if (var7 == 0x00) {\n                label_063C:\n                    var temp40 = memory[0x40:0x60];\n                    return memory[temp40:temp40 + (var6 + var4) - temp40];\n                } else {\n                label_0618:\n                    memory[var8:var8 + 0x20] = memory[var9:var9 + 0x20];\n                \n                    if (var7 <= 0x20) { goto label_063C; }\n                \n                    var8 = var8 + 0x20;\n                    var9 = var9 + 0x20;\n                    var7 = var7 - 0x20;\n                    goto label_0618;\n                }\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x065f;\n                var2 = transactionCount();\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = var2;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0693;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x06b3;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0735;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var temp43 = msg.data[0x44:0x64] + 0x04;\n                var temp44 = msg.data[temp43:temp43 + 0x20];\n                var temp45 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp45 + (temp44 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp45:temp45 + 0x20] = temp44;\n                memory[temp45 + 0x20:temp45 + 0x20 + temp44] = msg.data[temp43 + 0x20:temp43 + 0x20 + temp44];\n                var4 = temp45;\n                var1 = submitTransaction(var2, var3, var4);\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var1;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x075b;\n                var2 = MAX_OWNER_COUNT();\n                var temp48 = memory[0x40:0x60];\n                memory[temp48:temp48 + 0x20] = var2;\n                var temp49 = memory[0x40:0x60];\n                return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0781;\n                var2 = required();\n                var temp50 = memory[0x40:0x60];\n                memory[temp50:temp50 + 0x20] = var2;\n                var temp51 = memory[0x40:0x60];\n                return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x07ea;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x080a;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_011B; }\n        }\n    }\n    \n    function func_0129() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n    }\n    \n    function func_0177() {}\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xff) | 0x00;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] - 0x01) {\n        label_0A6F:\n            var var2 = storage[0x03] - 0x01;\n            var var3 = 0x0a87;\n            var var5 = var2;\n            var var4 = 0x03;\n            func_1EDD(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_0AA6:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n                var2 = 0x0aa5;\n                var3 = storage[0x03];\n                changeRequirement(var3);\n                goto label_0AA6;\n            }\n        } else {\n        label_0951:\n            var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff != var2) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] - 0x01) { goto label_0A6F; }\n                else { goto label_0951; }\n            } else {\n                var2 = 0x03;\n                var3 = storage[0x03] - 0x01;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[var3 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = var4 + keccak256(memory[0x00:0x20]);\n                storage[temp2] = (var2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_0A6F;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        var var2 = msg.sender;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0;\n        memory[0x00:0x20] = var3;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x00;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x05]) {\n        label_0D83:\n            return var0;\n        } else {\n        label_0D08:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0D69; }\n                else { goto label_0D3B; }\n            } else if (var2) {\n            label_0D69:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0CFD:\n                \n                    if (var1 >= storage[0x05]) { goto label_0D83; }\n                    else { goto label_0D08; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0CFD;\n                }\n            } else {\n            label_0D3B:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0D69; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0D69;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0E6A; }\n            else { goto label_0E65; }\n        } else if (var4) {\n        label_0E6A:\n        \n            if (var4) {\n            label_0E75:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0E80:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var4 = 0x03;\n                var var5 = storage[var4];\n                var var6 = var5 + 0x01;\n                var var7 = 0x0eec;\n                var var8 = var4;\n                var var9 = var6;\n                func_1F09(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = arg0;\n                storage[temp1] = (temp2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + memory[0x40:0x60] - temp3], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n            label_0E70:\n            \n                if (var2 != 0x00) { goto label_0E80; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0E65:\n            var4 = var3 == 0x00;\n        \n            if (var4) { goto label_0E75; }\n            else { goto label_0E70; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n    \n        if (var2 >= storage[0x03]) {\n        label_1070:\n            return var0;\n        } else {\n        label_0FAB:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var5 = 0x03;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff) {\n                var temp2 = var1 + 0x01;\n                var1 = temp2;\n            \n                if (var1 != storage[0x04]) { goto label_1062; }\n                else { goto label_105A; }\n            } else if (var1 != storage[0x04]) {\n            label_1062:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_1070; }\n                else { goto label_0FAB; }\n            } else {\n            label_105A:\n                return 0x01;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x03]) {\n        label_1141:\n            return var0;\n        } else {\n        label_108F:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var4 = 0x03;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_1081:\n            \n                if (var1 >= storage[0x03]) { goto label_1141; }\n                else { goto label_108F; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_1081;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x11ac;\n        var0 = func_1F35();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_122E:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = temp2 + 0x20;\n            var5 = temp4 + 0x01;\n        \n            if (var4 <= var6) { goto label_122E; }\n        \n        label_11E4:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = temp6 + 0x20;\n            var5 = temp5 + 0x01;\n        \n            if (var4 > var6) { goto label_11E4; }\n            else { goto label_122E; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x1241;\n        var0 = func_1F49();\n        var var1 = 0x1249;\n        var1 = func_1F49();\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_131D:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_1391:\n                        return var0;\n                    } else {\n                    label_134E:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_1391; }\n                        else { goto label_134E; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_1391; }\n                    else { goto label_134E; }\n                }\n            } else {\n            label_1285:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_12E6; }\n                    else { goto label_12B8; }\n                } else if (var4) {\n                label_12E6:\n                \n                    if (!var4) {\n                    label_130F:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_131D; }\n                        else { goto label_1285; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var2 = var2 + 0x01;\n                        goto label_130F;\n                    }\n                } else {\n                label_12B8:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_12E6; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_12E6;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_131D; }\n            else { goto label_1285; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x13a5;\n        var0 = func_1F35();\n        var var1 = 0x13ad;\n        var1 = func_1F35();\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = storage[0x03];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var4;\n            var temp1 = var5;\n            memory[temp1:temp1 + 0x20] = temp0;\n            memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n            var1 = temp1;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_1527:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_15C6:\n                        return var0;\n                    } else {\n                    label_1557:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_15C6; }\n                        else { goto label_1557; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_15C6; }\n                    else { goto label_1557; }\n                }\n            } else {\n            label_13EF:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var6 = 0x03;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp7 = temp6 + 0x20;\n                memory[temp7:temp7 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp7 + 0x20])] & 0xff)) {\n                label_1519:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_1527; }\n                    else { goto label_13EF; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var2 = var2 + 0x01;\n                    goto label_1519;\n                }\n            }\n        } else {\n            var temp8 = MSIZE();\n            var temp9 = var4;\n            memory[temp8:temp8 + 0x20] = temp9;\n            memory[0x40:0x60] = temp8 + temp9 * 0x20 + 0x20;\n            var1 = temp8;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_1527; }\n            else { goto label_13EF; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_1630; }\n            else { goto label_162B; }\n        } else if (var2) {\n        label_1630:\n        \n            if (var2) {\n            label_163B:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_1646:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_1636:\n            \n                if (var0 != 0x00) { goto label_1646; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_162B:\n            var2 = var1 == 0x00;\n        \n            if (var2) { goto label_163B; }\n            else { goto label_1636; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x1866;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function submitTransaction(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x187e;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var1 = func_1D86(var2, var3, var4);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x1889;\n        var2 = var0;\n        confirmTransaction(var2);\n        return var0;\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1A7A:\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x00;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n        label_199F:\n            var var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff != var3) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1A7A; }\n                else { goto label_199F; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp6 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp6] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_1A7A;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x1bfc;\n        var var3 = arg0;\n        var2 = isConfirmed(var3);\n    \n        if (!var2) {\n        label_1D7F:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x00;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var0 = temp0;\n            var temp1 = var0 + 0x03;\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x01;\n            var2 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = storage[var0 + 0x01];\n            var var4 = var0 + 0x02;\n            var var5 = memory[0x40:0x60];\n            var var6 = var5;\n            var var7 = var4;\n            var temp2 = storage[var7];\n            var var8 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        \n            if (!var8) {\n            label_1CDC:\n                var temp3 = memory[0x40:0x60];\n                var temp4;\n                temp4, memory[temp3:temp3 + 0x00] = address(var2).call.gas(msg.gas - 0x8796).value(var3)(memory[temp3:temp3 + var6 - temp3]);\n            \n                if (!temp4) {\n                    var temp5 = memory[0x40:0x60];\n                    log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-3]]);\n                    var temp6 = var0 + 0x03;\n                    storage[temp6] = (storage[temp6] & ~0xff) | 0x00;\n                    goto label_1D7F;\n                } else {\n                    var temp7 = memory[0x40:0x60];\n                    log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-3]]);\n                    goto label_1D7F;\n                }\n            } else if (0x1f < var8) {\n                var temp8 = var6;\n                var temp9 = temp8 + var8;\n                var6 = temp9;\n                memory[0x00:0x20] = var7;\n                var temp10 = keccak256(memory[0x00:0x20]);\n                memory[temp8:temp8 + 0x20] = storage[temp10];\n                var7 = temp10 + 0x01;\n                var8 = temp8 + 0x20;\n            \n                if (var6 <= var8) { goto label_1CD3; }\n            \n            label_1CBF:\n                var temp11 = var7;\n                var temp12 = var8;\n                memory[temp12:temp12 + 0x20] = storage[temp11];\n                var7 = temp11 + 0x01;\n                var8 = temp12 + 0x20;\n            \n                if (var6 > var8) { goto label_1CBF; }\n            \n            label_1CD3:\n                var temp13 = var6;\n                var temp14 = temp13 + (var8 - temp13 & 0x1f);\n                var8 = temp13;\n                var6 = temp14;\n                goto label_1CDC;\n            } else {\n                var temp15 = var6;\n                memory[temp15:temp15 + 0x20] = storage[var7] / 0x0100 * 0x0100;\n                var6 = temp15 + 0x20;\n                var8 = var8;\n                goto label_1CDC;\n            }\n        }\n    }\n    \n    function func_1D86(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x05];\n        var temp0 = memory[0x40:0x60];\n        var var2 = temp0;\n        memory[0x40:0x60] = var2 + 0x80;\n        memory[var2:var2 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp1 = var2 + 0x20;\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x00;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x00;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var var3 = temp3;\n        var temp4 = var3;\n        storage[temp4] = (memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[var3 + 0x01] = memory[var2 + 0x20:var2 + 0x20 + 0x20];\n        var temp5 = memory[var2 + 0x40:var2 + 0x40 + 0x20];\n        var var4 = 0x1e6e;\n        var var5 = var3 + 0x02;\n        var var7 = memory[temp5:temp5 + 0x20];\n        var var6 = temp5 + 0x20;\n        var4 = func_1F5D(var5, var6, var7);\n        var temp6 = var3 + 0x03;\n        storage[temp6] = !!memory[var2 + 0x60:var2 + 0x60 + 0x20] | (storage[temp6] & ~0xff);\n        storage[0x05] = storage[0x05] + 0x01;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51, stack[-5]]);\n        return var0;\n    }\n    \n    function func_1EDD(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1F04:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1f03;\n            var var2 = temp3 + arg1;\n            var var1 = temp4;\n            var0 = func_1FDD(var1, var2);\n            goto label_1F04;\n        }\n    }\n    \n    function func_1F09(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1F30:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1f2f;\n            var var2 = temp3 + arg1;\n            var var1 = temp4;\n            var0 = func_1FDD(var1, var2);\n            goto label_1F30;\n        }\n    }\n    \n    function func_1F35() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_1F49() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_1F5D(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_1FCC:\n                var temp4 = arg1;\n                arg1 = 0x1fd9;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1FDD(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = var1;\n                var temp6 = arg2;\n                arg2 = temp5;\n                var1 = arg2 + temp6;\n            \n                if (var1 <= arg2) {\n                label_1FCB:\n                    goto label_1FCC;\n                } else {\n                label_1FB9:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_1FCB; }\n                    else { goto label_1FB9; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_1FCC;\n        }\n    }\n    \n    function func_1FDD(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1fff;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_1FFB(arg1, var0); }\n    \n    label_1FEC:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_1FEC; }\n    \n        arg0 = func_1FFB(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1FFB(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_011B:\n            var var0 = 0x017a;\n        \n            if (msg.value <= 0x00) {\n                func_0177();\n                stop();\n            } else {\n                func_0129();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x019a;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0210;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0230;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0266;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = isOwner(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x02bd;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = confirmations(var2, var3);\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0302;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x034c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x036c;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03a4;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03d8;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp12 = memory[0x40:0x60];\n                var var6 = temp12;\n                memory[var6:var6 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp13 = var6 + 0x20;\n                memory[temp13:temp13 + 0x20] = var3;\n                var temp14 = temp13 + 0x20;\n                var var7 = temp14;\n                var temp15 = var7 + 0x20;\n                memory[temp15:temp15 + 0x20] = !!var5;\n                var temp16 = temp15 + 0x20;\n                memory[var7:var7 + 0x20] = temp16 - var6;\n                var temp17 = var4;\n                var var9 = temp17;\n                var temp18 = storage[var9];\n                memory[temp16:temp16 + 0x20] = (!(temp18 & 0x01) * 0x0100 - 0x01 & temp18) / 0x02;\n                var var8 = temp16 + 0x20;\n                var temp19 = storage[var9];\n                var var10 = (!(temp19 & 0x01) * 0x0100 - 0x01 & temp19) / 0x02;\n            \n                if (!var10) {\n                label_04A3:\n                    var temp20 = memory[0x40:0x60];\n                    return memory[temp20:temp20 + var8 - temp20];\n                } else if (0x1f < var10) {\n                    var temp21 = var8;\n                    var temp22 = temp21 + var10;\n                    var8 = temp22;\n                    memory[0x00:0x20] = var9;\n                    var temp23 = keccak256(memory[0x00:0x20]);\n                    memory[temp21:temp21 + 0x20] = storage[temp23];\n                    var9 = temp23 + 0x01;\n                    var10 = temp21 + 0x20;\n                \n                    if (var8 <= var10) { goto label_049A; }\n                \n                label_0486:\n                    var temp24 = var9;\n                    var temp25 = var10;\n                    memory[temp25:temp25 + 0x20] = storage[temp24];\n                    var9 = temp24 + 0x01;\n                    var10 = temp25 + 0x20;\n                \n                    if (var8 > var10) { goto label_0486; }\n                \n                label_049A:\n                    var temp26 = var8;\n                    var temp27 = temp26 + (var10 - temp26 & 0x1f);\n                    var10 = temp26;\n                    var8 = temp27;\n                    goto label_04A3;\n                } else {\n                    var temp28 = var8;\n                    memory[temp28:temp28 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var8 = temp28 + 0x20;\n                    var10 = var10;\n                    goto label_04A3;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x04c5;\n                var1 = getOwners();\n                var temp29 = memory[0x40:0x60];\n                var2 = temp29;\n                var3 = var2;\n                var temp30 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp30 - var3;\n                var temp31 = var1;\n                memory[temp30:temp30 + 0x20] = memory[temp31:temp31 + 0x20];\n                var4 = temp30 + 0x20;\n                var5 = temp31 + 0x20;\n                var6 = memory[temp31:temp31 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n            \n                if (var7 == 0x00) {\n                label_0517:\n                    var temp32 = memory[0x40:0x60];\n                    return memory[temp32:temp32 + (var6 + var4) - temp32];\n                } else {\n                label_04F3:\n                    memory[var8:var8 + 0x20] = memory[var9:var9 + 0x20];\n                \n                    if (var7 <= 0x20) { goto label_0517; }\n                \n                    var8 = var8 + 0x20;\n                    var9 = var9 + 0x20;\n                    var7 = var7 - 0x20;\n                    goto label_04F3;\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0567;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                var temp33 = memory[0x40:0x60];\n                var2 = temp33;\n                var3 = var2;\n                var temp34 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp34 - var3;\n                var temp35 = var1;\n                memory[temp34:temp34 + 0x20] = memory[temp35:temp35 + 0x20];\n                var4 = temp34 + 0x20;\n                var5 = temp35 + 0x20;\n                var6 = memory[temp35:temp35 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n            \n                if (var7 == 0x00) {\n                label_05B9:\n                    var temp36 = memory[0x40:0x60];\n                    return memory[temp36:temp36 + (var6 + var4) - temp36];\n                } else {\n                label_0595:\n                    memory[var8:var8 + 0x20] = memory[var9:var9 + 0x20];\n                \n                    if (var7 <= 0x20) { goto label_05B9; }\n                \n                    var8 = var8 + 0x20;\n                    var9 = var9 + 0x20;\n                    var7 = var7 - 0x20;\n                    goto label_0595;\n                }\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x05ea;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                var temp37 = memory[0x40:0x60];\n                var2 = temp37;\n                var3 = var2;\n                var temp38 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp38 - var3;\n                var temp39 = var1;\n                memory[temp38:temp38 + 0x20] = memory[temp39:temp39 + 0x20];\n                var4 = temp38 + 0x20;\n                var5 = temp39 + 0x20;\n                var6 = memory[temp39:temp39 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n            \n                if (var7 == 0x00) {\n                label_063C:\n                    var temp40 = memory[0x40:0x60];\n                    return memory[temp40:temp40 + (var6 + var4) - temp40];\n                } else {\n                label_0618:\n                    memory[var8:var8 + 0x20] = memory[var9:var9 + 0x20];\n                \n                    if (var7 <= 0x20) { goto label_063C; }\n                \n                    var8 = var8 + 0x20;\n                    var9 = var9 + 0x20;\n                    var7 = var7 - 0x20;\n                    goto label_0618;\n                }\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x065f;\n                var2 = transactionCount();\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = var2;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0693;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x06b3;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0735;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var temp43 = msg.data[0x44:0x64] + 0x04;\n                var temp44 = msg.data[temp43:temp43 + 0x20];\n                var temp45 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp45 + (temp44 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp45:temp45 + 0x20] = temp44;\n                memory[temp45 + 0x20:temp45 + 0x20 + temp44] = msg.data[temp43 + 0x20:temp43 + 0x20 + temp44];\n                var4 = temp45;\n                var1 = submitTransaction(var2, var3, var4);\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var1;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x075b;\n                var2 = MAX_OWNER_COUNT();\n                var temp48 = memory[0x40:0x60];\n                memory[temp48:temp48 + 0x20] = var2;\n                var temp49 = memory[0x40:0x60];\n                return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0781;\n                var2 = required();\n                var temp50 = memory[0x40:0x60];\n                memory[temp50:temp50 + 0x20] = var2;\n                var temp51 = memory[0x40:0x60];\n                return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x07ea;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x080a;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_011B; }\n        }\n    }\n    \n    function func_0129() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n    }\n    \n    function func_0177() {}\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xff) | 0x00;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] - 0x01) {\n        label_0A6F:\n            var var2 = storage[0x03] - 0x01;\n            var var3 = 0x0a87;\n            var var5 = var2;\n            var var4 = 0x03;\n            func_1EDD(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_0AA6:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n                var2 = 0x0aa5;\n                var3 = storage[0x03];\n                changeRequirement(var3);\n                goto label_0AA6;\n            }\n        } else {\n        label_0951:\n            var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff != var2) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] - 0x01) { goto label_0A6F; }\n                else { goto label_0951; }\n            } else {\n                var2 = 0x03;\n                var3 = storage[0x03] - 0x01;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[var3 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = var4 + keccak256(memory[0x00:0x20]);\n                storage[temp2] = (var2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_0A6F;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        var var2 = msg.sender;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0;\n        memory[0x00:0x20] = var3;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x00;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x05]) {\n        label_0D83:\n            return var0;\n        } else {\n        label_0D08:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0D69; }\n                else { goto label_0D3B; }\n            } else if (var2) {\n            label_0D69:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0CFD:\n                \n                    if (var1 >= storage[0x05]) { goto label_0D83; }\n                    else { goto label_0D08; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0CFD;\n                }\n            } else {\n            label_0D3B:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0D69; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0D69;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0E6A; }\n            else { goto label_0E65; }\n        } else if (var4) {\n        label_0E6A:\n        \n            if (var4) {\n            label_0E75:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0E80:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var4 = 0x03;\n                var var5 = storage[var4];\n                var var6 = var5 + 0x01;\n                var var7 = 0x0eec;\n                var var8 = var4;\n                var var9 = var6;\n                func_1F09(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = arg0;\n                storage[temp1] = (temp2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + memory[0x40:0x60] - temp3], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n            label_0E70:\n            \n                if (var2 != 0x00) { goto label_0E80; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0E65:\n            var4 = var3 == 0x00;\n        \n            if (var4) { goto label_0E75; }\n            else { goto label_0E70; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n    \n        if (var2 >= storage[0x03]) {\n        label_1070:\n            return var0;\n        } else {\n        label_0FAB:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var5 = 0x03;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff) {\n                var temp2 = var1 + 0x01;\n                var1 = temp2;\n            \n                if (var1 != storage[0x04]) { goto label_1062; }\n                else { goto label_105A; }\n            } else if (var1 != storage[0x04]) {\n            label_1062:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_1070; }\n                else { goto label_0FAB; }\n            } else {\n            label_105A:\n                return 0x01;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x03]) {\n        label_1141:\n            return var0;\n        } else {\n        label_108F:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var4 = 0x03;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_1081:\n            \n                if (var1 >= storage[0x03]) { goto label_1141; }\n                else { goto label_108F; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_1081;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x11ac;\n        var0 = func_1F35();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_122E:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = temp2 + 0x20;\n            var5 = temp4 + 0x01;\n        \n            if (var4 <= var6) { goto label_122E; }\n        \n        label_11E4:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = temp6 + 0x20;\n            var5 = temp5 + 0x01;\n        \n            if (var4 > var6) { goto label_11E4; }\n            else { goto label_122E; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x1241;\n        var0 = func_1F49();\n        var var1 = 0x1249;\n        var1 = func_1F49();\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_131D:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_1391:\n                        return var0;\n                    } else {\n                    label_134E:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_1391; }\n                        else { goto label_134E; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_1391; }\n                    else { goto label_134E; }\n                }\n            } else {\n            label_1285:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_12E6; }\n                    else { goto label_12B8; }\n                } else if (var4) {\n                label_12E6:\n                \n                    if (!var4) {\n                    label_130F:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_131D; }\n                        else { goto label_1285; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var2 = var2 + 0x01;\n                        goto label_130F;\n                    }\n                } else {\n                label_12B8:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_12E6; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_12E6;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_131D; }\n            else { goto label_1285; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x13a5;\n        var0 = func_1F35();\n        var var1 = 0x13ad;\n        var1 = func_1F35();\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = storage[0x03];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var4;\n            var temp1 = var5;\n            memory[temp1:temp1 + 0x20] = temp0;\n            memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n            var1 = temp1;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_1527:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_15C6:\n                        return var0;\n                    } else {\n                    label_1557:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_15C6; }\n                        else { goto label_1557; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_15C6; }\n                    else { goto label_1557; }\n                }\n            } else {\n            label_13EF:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var6 = 0x03;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp7 = temp6 + 0x20;\n                memory[temp7:temp7 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp7 + 0x20])] & 0xff)) {\n                label_1519:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_1527; }\n                    else { goto label_13EF; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var2 = var2 + 0x01;\n                    goto label_1519;\n                }\n            }\n        } else {\n            var temp8 = MSIZE();\n            var temp9 = var4;\n            memory[temp8:temp8 + 0x20] = temp9;\n            memory[0x40:0x60] = temp8 + temp9 * 0x20 + 0x20;\n            var1 = temp8;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_1527; }\n            else { goto label_13EF; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_1630; }\n            else { goto label_162B; }\n        } else if (var2) {\n        label_1630:\n        \n            if (var2) {\n            label_163B:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_1646:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_1636:\n            \n                if (var0 != 0x00) { goto label_1646; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_162B:\n            var2 = var1 == 0x00;\n        \n            if (var2) { goto label_163B; }\n            else { goto label_1636; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x1866;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function submitTransaction(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x187e;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var1 = func_1D86(var2, var3, var4);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x1889;\n        var2 = var0;\n        confirmTransaction(var2);\n        return var0;\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1A7A:\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x00;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n        label_199F:\n            var var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff != var3) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1A7A; }\n                else { goto label_199F; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp6 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp6] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_1A7A;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x1bfc;\n        var var3 = arg0;\n        var2 = isConfirmed(var3);\n    \n        if (!var2) {\n        label_1D7F:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x00;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var0 = temp0;\n            var temp1 = var0 + 0x03;\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x01;\n            var2 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = storage[var0 + 0x01];\n            var var4 = var0 + 0x02;\n            var var5 = memory[0x40:0x60];\n            var var6 = var5;\n            var var7 = var4;\n            var temp2 = storage[var7];\n            var var8 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        \n            if (!var8) {\n            label_1CDC:\n                var temp3 = memory[0x40:0x60];\n                var temp4;\n                temp4, memory[temp3:temp3 + 0x00] = address(var2).call.gas(msg.gas - 0x8796).value(var3)(memory[temp3:temp3 + var6 - temp3]);\n            \n                if (!temp4) {\n                    var temp5 = memory[0x40:0x60];\n                    log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-3]]);\n                    var temp6 = var0 + 0x03;\n                    storage[temp6] = (storage[temp6] & ~0xff) | 0x00;\n                    goto label_1D7F;\n                } else {\n                    var temp7 = memory[0x40:0x60];\n                    log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-3]]);\n                    goto label_1D7F;\n                }\n            } else if (0x1f < var8) {\n                var temp8 = var6;\n                var temp9 = temp8 + var8;\n                var6 = temp9;\n                memory[0x00:0x20] = var7;\n                var temp10 = keccak256(memory[0x00:0x20]);\n                memory[temp8:temp8 + 0x20] = storage[temp10];\n                var7 = temp10 + 0x01;\n                var8 = temp8 + 0x20;\n            \n                if (var6 <= var8) { goto label_1CD3; }\n            \n            label_1CBF:\n                var temp11 = var7;\n                var temp12 = var8;\n                memory[temp12:temp12 + 0x20] = storage[temp11];\n                var7 = temp11 + 0x01;\n                var8 = temp12 + 0x20;\n            \n                if (var6 > var8) { goto label_1CBF; }\n            \n            label_1CD3:\n                var temp13 = var6;\n                var temp14 = temp13 + (var8 - temp13 & 0x1f);\n                var8 = temp13;\n                var6 = temp14;\n                goto label_1CDC;\n            } else {\n                var temp15 = var6;\n                memory[temp15:temp15 + 0x20] = storage[var7] / 0x0100 * 0x0100;\n                var6 = temp15 + 0x20;\n                var8 = var8;\n                goto label_1CDC;\n            }\n        }\n    }\n    \n    function func_1D86(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x05];\n        var temp0 = memory[0x40:0x60];\n        var var2 = temp0;\n        memory[0x40:0x60] = var2 + 0x80;\n        memory[var2:var2 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp1 = var2 + 0x20;\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x00;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x00;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var var3 = temp3;\n        var temp4 = var3;\n        storage[temp4] = (memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[var3 + 0x01] = memory[var2 + 0x20:var2 + 0x20 + 0x20];\n        var temp5 = memory[var2 + 0x40:var2 + 0x40 + 0x20];\n        var var4 = 0x1e6e;\n        var var5 = var3 + 0x02;\n        var var7 = memory[temp5:temp5 + 0x20];\n        var var6 = temp5 + 0x20;\n        var4 = func_1F5D(var5, var6, var7);\n        var temp6 = var3 + 0x03;\n        storage[temp6] = !!memory[var2 + 0x60:var2 + 0x60 + 0x20] | (storage[temp6] & ~0xff);\n        storage[0x05] = storage[0x05] + 0x01;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51, stack[-5]]);\n        return var0;\n    }\n    \n    function func_1EDD(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1F04:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1f03;\n            var var2 = temp3 + arg1;\n            var var1 = temp4;\n            var0 = func_1FDD(var1, var2);\n            goto label_1F04;\n        }\n    }\n    \n    function func_1F09(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1F30:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1f2f;\n            var var2 = temp3 + arg1;\n            var var1 = temp4;\n            var0 = func_1FDD(var1, var2);\n            goto label_1F30;\n        }\n    }\n    \n    function func_1F35() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_1F49() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_1F5D(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_1FCC:\n                var temp4 = arg1;\n                arg1 = 0x1fd9;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1FDD(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = var1;\n                var temp6 = arg2;\n                arg2 = temp5;\n                var1 = arg2 + temp6;\n            \n                if (var1 <= arg2) {\n                label_1FCB:\n                    goto label_1FCC;\n                } else {\n                label_1FB9:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_1FCB; }\n                    else { goto label_1FB9; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_1FCC;\n        }\n    }\n    \n    function func_1FDD(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1fff;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_1FFB(arg1, var0); }\n    \n    label_1FEC:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_1FEC; }\n    \n        arg0 = func_1FFB(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1FFB(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_011B:\n            var var0 = 0x017a;\n        \n            if (msg.value <= 0x00) {\n                func_0177();\n                stop();\n            } else {\n                func_0129();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x025e7c27) {\n                // Dispatch table entry for owners(uint256)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x019a;\n                var var2 = msg.data[0x04:0x24];\n                var2 = owners(var2);\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n            } else if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0210;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x20ea8d86) {\n                // Dispatch table entry for revokeConfirmation(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0230;\n                var2 = msg.data[0x04:0x24];\n                revokeConfirmation(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0266;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = isOwner(var2);\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = !!var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n            } else if (var0 == 0x3411c81c) {\n                // Dispatch table entry for confirmations(uint256,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x02bd;\n                var2 = msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var2 = confirmations(var2, var3);\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + (temp4 + 0x20) - temp5];\n            } else if (var0 == 0x54741525) {\n                // Dispatch table entry for getTransactionCount(bool,bool)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0302;\n                var2 = !!msg.data[0x04:0x24];\n                var3 = !!msg.data[0x24:0x44];\n                var1 = getTransactionCount(var2, var3);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var1;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x034c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x784547a7) {\n                // Dispatch table entry for isConfirmed(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x036c;\n                var2 = msg.data[0x04:0x24];\n                var1 = isConfirmed(var2);\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = !!var1;\n                var temp9 = memory[0x40:0x60];\n                return memory[temp9:temp9 + (temp8 + 0x20) - temp9];\n            } else if (var0 == 0x8b51d13f) {\n                // Dispatch table entry for getConfirmationCount(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03a4;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmationCount(var2);\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = var1;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + (temp10 + 0x20) - temp11];\n            } else if (var0 == 0x9ace38c2) {\n                // Dispatch table entry for transactions(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03d8;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var2, var3, var4, var5 = transactions(var2);\n                var temp12 = memory[0x40:0x60];\n                var var6 = temp12;\n                memory[var6:var6 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp13 = var6 + 0x20;\n                memory[temp13:temp13 + 0x20] = var3;\n                var temp14 = temp13 + 0x20;\n                var var7 = temp14;\n                var temp15 = var7 + 0x20;\n                memory[temp15:temp15 + 0x20] = !!var5;\n                var temp16 = temp15 + 0x20;\n                memory[var7:var7 + 0x20] = temp16 - var6;\n                var temp17 = var4;\n                var var9 = temp17;\n                var temp18 = storage[var9];\n                memory[temp16:temp16 + 0x20] = (!(temp18 & 0x01) * 0x0100 - 0x01 & temp18) / 0x02;\n                var var8 = temp16 + 0x20;\n                var temp19 = storage[var9];\n                var var10 = (!(temp19 & 0x01) * 0x0100 - 0x01 & temp19) / 0x02;\n            \n                if (!var10) {\n                label_04A3:\n                    var temp20 = memory[0x40:0x60];\n                    return memory[temp20:temp20 + var8 - temp20];\n                } else if (0x1f < var10) {\n                    var temp21 = var8;\n                    var temp22 = temp21 + var10;\n                    var8 = temp22;\n                    memory[0x00:0x20] = var9;\n                    var temp23 = keccak256(memory[0x00:0x20]);\n                    memory[temp21:temp21 + 0x20] = storage[temp23];\n                    var9 = temp23 + 0x01;\n                    var10 = temp21 + 0x20;\n                \n                    if (var8 <= var10) { goto label_049A; }\n                \n                label_0486:\n                    var temp24 = var9;\n                    var temp25 = var10;\n                    memory[temp25:temp25 + 0x20] = storage[temp24];\n                    var9 = temp24 + 0x01;\n                    var10 = temp25 + 0x20;\n                \n                    if (var8 > var10) { goto label_0486; }\n                \n                label_049A:\n                    var temp26 = var8;\n                    var temp27 = temp26 + (var10 - temp26 & 0x1f);\n                    var10 = temp26;\n                    var8 = temp27;\n                    goto label_04A3;\n                } else {\n                    var temp28 = var8;\n                    memory[temp28:temp28 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                    var8 = temp28 + 0x20;\n                    var10 = var10;\n                    goto label_04A3;\n                }\n            } else if (var0 == 0xa0e67e2b) {\n                // Dispatch table entry for getOwners()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x04c5;\n                var1 = getOwners();\n                var temp29 = memory[0x40:0x60];\n                var2 = temp29;\n                var3 = var2;\n                var temp30 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp30 - var3;\n                var temp31 = var1;\n                memory[temp30:temp30 + 0x20] = memory[temp31:temp31 + 0x20];\n                var4 = temp30 + 0x20;\n                var5 = temp31 + 0x20;\n                var6 = memory[temp31:temp31 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n            \n                if (var7 == 0x00) {\n                label_0517:\n                    var temp32 = memory[0x40:0x60];\n                    return memory[temp32:temp32 + (var6 + var4) - temp32];\n                } else {\n                label_04F3:\n                    memory[var8:var8 + 0x20] = memory[var9:var9 + 0x20];\n                \n                    if (var7 <= 0x20) { goto label_0517; }\n                \n                    var8 = var8 + 0x20;\n                    var9 = var9 + 0x20;\n                    var7 = var7 - 0x20;\n                    goto label_04F3;\n                }\n            } else if (var0 == 0xa8abe69a) {\n                // Dispatch table entry for getTransactionIds(uint256,uint256,bool,bool)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0567;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = !!msg.data[0x44:0x64];\n                var5 = !!msg.data[0x64:0x84];\n                var1 = getTransactionIds(var2, var3, var4, var5);\n                var temp33 = memory[0x40:0x60];\n                var2 = temp33;\n                var3 = var2;\n                var temp34 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp34 - var3;\n                var temp35 = var1;\n                memory[temp34:temp34 + 0x20] = memory[temp35:temp35 + 0x20];\n                var4 = temp34 + 0x20;\n                var5 = temp35 + 0x20;\n                var6 = memory[temp35:temp35 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n            \n                if (var7 == 0x00) {\n                label_05B9:\n                    var temp36 = memory[0x40:0x60];\n                    return memory[temp36:temp36 + (var6 + var4) - temp36];\n                } else {\n                label_0595:\n                    memory[var8:var8 + 0x20] = memory[var9:var9 + 0x20];\n                \n                    if (var7 <= 0x20) { goto label_05B9; }\n                \n                    var8 = var8 + 0x20;\n                    var9 = var9 + 0x20;\n                    var7 = var7 - 0x20;\n                    goto label_0595;\n                }\n            } else if (var0 == 0xb5dc40c3) {\n                // Dispatch table entry for getConfirmations(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x05ea;\n                var2 = msg.data[0x04:0x24];\n                var1 = getConfirmations(var2);\n                var temp37 = memory[0x40:0x60];\n                var2 = temp37;\n                var3 = var2;\n                var temp38 = var3 + 0x20;\n                memory[var3:var3 + 0x20] = temp38 - var3;\n                var temp39 = var1;\n                memory[temp38:temp38 + 0x20] = memory[temp39:temp39 + 0x20];\n                var4 = temp38 + 0x20;\n                var5 = temp39 + 0x20;\n                var6 = memory[temp39:temp39 + 0x20] * 0x20;\n                var7 = var6;\n                var8 = var4;\n                var9 = var5;\n            \n                if (var7 == 0x00) {\n                label_063C:\n                    var temp40 = memory[0x40:0x60];\n                    return memory[temp40:temp40 + (var6 + var4) - temp40];\n                } else {\n                label_0618:\n                    memory[var8:var8 + 0x20] = memory[var9:var9 + 0x20];\n                \n                    if (var7 <= 0x20) { goto label_063C; }\n                \n                    var8 = var8 + 0x20;\n                    var9 = var9 + 0x20;\n                    var7 = var7 - 0x20;\n                    goto label_0618;\n                }\n            } else if (var0 == 0xb77bf600) {\n                // Dispatch table entry for transactionCount()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x065f;\n                var2 = transactionCount();\n                var temp41 = memory[0x40:0x60];\n                memory[temp41:temp41 + 0x20] = var2;\n                var temp42 = memory[0x40:0x60];\n                return memory[temp42:temp42 + (temp41 + 0x20) - temp42];\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0693;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc01a8c84) {\n                // Dispatch table entry for confirmTransaction(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x06b3;\n                var2 = msg.data[0x04:0x24];\n                confirmTransaction(var2);\n                stop();\n            } else if (var0 == 0xc6427474) {\n                // Dispatch table entry for submitTransaction(address,uint256,bytes)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0735;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var temp43 = msg.data[0x44:0x64] + 0x04;\n                var temp44 = msg.data[temp43:temp43 + 0x20];\n                var temp45 = memory[0x40:0x60];\n                memory[0x40:0x60] = temp45 + (temp44 + 0x1f) / 0x20 * 0x20 + 0x20;\n                memory[temp45:temp45 + 0x20] = temp44;\n                memory[temp45 + 0x20:temp45 + 0x20 + temp44] = msg.data[temp43 + 0x20:temp43 + 0x20 + temp44];\n                var4 = temp45;\n                var1 = submitTransaction(var2, var3, var4);\n                var temp46 = memory[0x40:0x60];\n                memory[temp46:temp46 + 0x20] = var1;\n                var temp47 = memory[0x40:0x60];\n                return memory[temp47:temp47 + (temp46 + 0x20) - temp47];\n            } else if (var0 == 0xd74f8edd) {\n                // Dispatch table entry for MAX_OWNER_COUNT()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x075b;\n                var2 = MAX_OWNER_COUNT();\n                var temp48 = memory[0x40:0x60];\n                memory[temp48:temp48 + 0x20] = var2;\n                var temp49 = memory[0x40:0x60];\n                return memory[temp49:temp49 + (temp48 + 0x20) - temp49];\n            } else if (var0 == 0xdc8452cd) {\n                // Dispatch table entry for required()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0781;\n                var2 = required();\n                var temp50 = memory[0x40:0x60];\n                memory[temp50:temp50 + 0x20] = var2;\n                var temp51 = memory[0x40:0x60];\n                return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n            } else if (var0 == 0xe20056e6) {\n                // Dispatch table entry for replaceOwner(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x07ea;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                replaceOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xee22610b) {\n                // Dispatch table entry for executeTransaction(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x080a;\n                var2 = msg.data[0x04:0x24];\n                executeTransaction(var2);\n                stop();\n            } else { goto label_011B; }\n        }\n    }\n    \n    function func_0129() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c, msg.sender]);\n    }\n    \n    function func_0177() {}\n    \n    function owners(var arg0) returns (var arg0) {\n        var var0 = 0x03;\n        var var1 = arg0;\n    \n        if (var1 >= storage[var0]) { assert(); }\n    \n        memory[0x00:0x20] = var0;\n        return storage[var1 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n    }\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = (storage[temp0] & ~0xff) | 0x00;\n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03] - 0x01) {\n        label_0A6F:\n            var var2 = storage[0x03] - 0x01;\n            var var3 = 0x0a87;\n            var var5 = var2;\n            var var4 = 0x03;\n            func_1EDD(var4, var5);\n        \n            if (storage[0x04] <= storage[0x03]) {\n            label_0AA6:\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n                var2 = 0x0aa5;\n                var3 = storage[0x03];\n                changeRequirement(var3);\n                goto label_0AA6;\n            }\n        } else {\n        label_0951:\n            var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = 0x03;\n            var4 = var0;\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (storage[var4 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff != var2) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03] - 0x01) { goto label_0A6F; }\n                else { goto label_0951; }\n            } else {\n                var2 = 0x03;\n                var3 = storage[0x03] - 0x01;\n            \n                if (var3 >= storage[var2]) { assert(); }\n            \n                memory[0x00:0x20] = var2;\n                var2 = storage[var3 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = 0x03;\n                var4 = var0;\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var temp2 = var4 + keccak256(memory[0x00:0x20]);\n                storage[temp2] = (var2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp2] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_0A6F;\n            }\n        }\n    }\n    \n    function revokeConfirmation(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        var var2 = msg.sender;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var3 = arg0;\n        memory[0x00:0x20] = var3;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x00;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0xf6a317157440607f36269043eb55f1287a5a19ba2216afeab88cd46cbcfb88e9, msg.sender, stack[-5]]);\n    }\n    \n    function isOwner(var arg0) returns (var arg0) {\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function confirmations(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function getTransactionCount(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x05]) {\n        label_0D83:\n            return var0;\n        } else {\n        label_0D08:\n            var var2 = arg0;\n        \n            if (var2) {\n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n            \n                if (var2) { goto label_0D69; }\n                else { goto label_0D3B; }\n            } else if (var2) {\n            label_0D69:\n            \n                if (!var2) {\n                    var1 = var1 + 0x01;\n                \n                label_0CFD:\n                \n                    if (var1 >= storage[0x05]) { goto label_0D83; }\n                    else { goto label_0D08; }\n                } else {\n                    var0 = var0 + 0x01;\n                    var1 = var1 + 0x01;\n                    goto label_0CFD;\n                }\n            } else {\n            label_0D3B:\n                var2 = arg1;\n            \n                if (!var2) { goto label_0D69; }\n            \n                memory[0x00:0x20] = var1;\n                memory[0x20:0x40] = 0x00;\n                var2 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                goto label_0D69;\n            }\n        }\n    }\n    \n    function addOwner(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = storage[0x03] + 0x01;\n        var var3 = storage[0x04];\n        var var4 = var2 > 0x32;\n    \n        if (!var4) {\n            var4 = var3 > var2;\n        \n            if (var4) { goto label_0E6A; }\n            else { goto label_0E65; }\n        } else if (var4) {\n        label_0E6A:\n        \n            if (var4) {\n            label_0E75:\n            \n                if (var4) { revert(memory[0x00:0x00]); }\n            \n            label_0E80:\n                memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x02;\n                var temp0 = keccak256(memory[0x00:0x40]);\n                storage[temp0] = (storage[temp0] & ~0xff) | 0x01;\n                var4 = 0x03;\n                var var5 = storage[var4];\n                var var6 = var5 + 0x01;\n                var var7 = 0x0eec;\n                var var8 = var4;\n                var var9 = var6;\n                func_1F09(var8, var9);\n                memory[0x00:0x20] = var4;\n                var temp1 = var5 + keccak256(memory[0x00:0x20]);\n                var temp2 = arg0;\n                storage[temp1] = (temp2 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + memory[0x40:0x60] - temp3], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-8] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return;\n            } else {\n            label_0E70:\n            \n                if (var2 != 0x00) { goto label_0E80; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_0E65:\n            var4 = var3 == 0x00;\n        \n            if (var4) { goto label_0E75; }\n            else { goto label_0E70; }\n        }\n    }\n    \n    function isConfirmed(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n    \n        if (var2 >= storage[0x03]) {\n        label_1070:\n            return var0;\n        } else {\n        label_0FAB:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var3 = keccak256(memory[0x00:0x40]);\n            var var4 = 0x00;\n            var var5 = 0x03;\n            var var6 = var2;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            var temp0 = var4;\n            memory[temp0:temp0 + 0x20] = storage[var6 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var3;\n        \n            if (storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff) {\n                var temp2 = var1 + 0x01;\n                var1 = temp2;\n            \n                if (var1 != storage[0x04]) { goto label_1062; }\n                else { goto label_105A; }\n            } else if (var1 != storage[0x04]) {\n            label_1062:\n                var2 = var2 + 0x01;\n            \n                if (var2 >= storage[0x03]) { goto label_1070; }\n                else { goto label_0FAB; }\n            } else {\n            label_105A:\n                return 0x01;\n            }\n        }\n    }\n    \n    function getConfirmationCount(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n    \n        if (var1 >= storage[0x03]) {\n        label_1141:\n            return var0;\n        } else {\n        label_108F:\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x01;\n            var var2 = keccak256(memory[0x00:0x40]);\n            var var3 = 0x00;\n            var var4 = 0x03;\n            var var5 = var1;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n            var temp0 = var3;\n            memory[temp0:temp0 + 0x20] = storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var temp1 = temp0 + 0x20;\n            memory[temp1:temp1 + 0x20] = var2;\n        \n            if (!(storage[keccak256(memory[0x00:0x00 + temp1 + 0x20])] & 0xff)) {\n                var1 = var1 + 0x01;\n            \n            label_1081:\n            \n                if (var1 >= storage[0x03]) { goto label_1141; }\n                else { goto label_108F; }\n            } else {\n                var0 = var0 + 0x01;\n                var1 = var1 + 0x01;\n                goto label_1081;\n            }\n        }\n    }\n    \n    function transactions(var arg0) returns (var arg0, var r1, var r2, var r3) {\n        memory[0x20:0x40] = 0x00;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        arg0 = storage[temp0] & 0xffffffffffffffffffffffffffffffffffffffff;\n        r1 = storage[temp0 + 0x01];\n        r2 = temp0 + 0x02;\n        r3 = storage[temp0 + 0x03] & 0xff;\n        return arg0, r1, r2, r3;\n    }\n    \n    function getOwners() returns (var r0) {\n        var var0 = 0x11ac;\n        var0 = func_1F35();\n        var temp0 = storage[0x03];\n        var temp1 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n        var var1 = temp1;\n        var var2 = 0x03;\n        var var3 = temp0;\n        memory[var1:var1 + 0x20] = var3;\n        var var4 = var1 + 0x20;\n        var var5 = var2;\n        var var6 = storage[var5];\n    \n        if (!var6) {\n        label_122E:\n            return var1;\n        } else {\n            var temp2 = var4;\n            var temp3 = temp2 + var6 * 0x20;\n            var4 = temp3;\n            memory[0x00:0x20] = var5;\n            var temp4 = keccak256(memory[0x00:0x20]);\n            memory[temp2:temp2 + 0x20] = storage[temp4] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = temp2 + 0x20;\n            var5 = temp4 + 0x01;\n        \n            if (var4 <= var6) { goto label_122E; }\n        \n        label_11E4:\n            var temp5 = var5;\n            var temp6 = var6;\n            memory[temp6:temp6 + 0x20] = storage[temp5] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var6 = temp6 + 0x20;\n            var5 = temp5 + 0x01;\n        \n            if (var4 > var6) { goto label_11E4; }\n            else { goto label_122E; }\n        }\n    }\n    \n    function getTransactionIds(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x1241;\n        var0 = func_1F49();\n        var var1 = 0x1249;\n        var1 = func_1F49();\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = storage[0x05];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var5;\n            var temp1 = var4;\n            memory[temp0:temp0 + 0x20] = temp1;\n            memory[0x40:0x60] = temp0 + temp1 * 0x20 + 0x20;\n            var1 = temp0;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) {\n            label_131D:\n                var4 = arg1 - arg0;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) {\n                    label_1391:\n                        return var0;\n                    } else {\n                    label_134E:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3 - arg0;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= arg1) { goto label_1391; }\n                        else { goto label_134E; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = arg0;\n                \n                    if (var3 >= arg1) { goto label_1391; }\n                    else { goto label_134E; }\n                }\n            } else {\n            label_1285:\n                var4 = arg2;\n            \n                if (var4) {\n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = !(storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff);\n                \n                    if (var4) { goto label_12E6; }\n                    else { goto label_12B8; }\n                } else if (var4) {\n                label_12E6:\n                \n                    if (!var4) {\n                    label_130F:\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= storage[0x05]) { goto label_131D; }\n                        else { goto label_1285; }\n                    } else {\n                        var4 = var3;\n                        var5 = var1;\n                        var6 = var2;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4;\n                        var2 = var2 + 0x01;\n                        goto label_130F;\n                    }\n                } else {\n                label_12B8:\n                    var4 = arg3;\n                \n                    if (!var4) { goto label_12E6; }\n                \n                    memory[0x00:0x20] = var3;\n                    memory[0x20:0x40] = 0x00;\n                    var4 = storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff;\n                    goto label_12E6;\n                }\n            }\n        } else {\n            var temp6 = MSIZE();\n            var temp7 = var4;\n            memory[temp6:temp6 + 0x20] = temp7;\n            memory[0x40:0x60] = temp6 + temp7 * 0x20 + 0x20;\n            var1 = temp6;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x05]) { goto label_131D; }\n            else { goto label_1285; }\n        }\n    }\n    \n    function getConfirmations(var arg0) returns (var r0) {\n        var var0 = 0x13a5;\n        var0 = func_1F35();\n        var var1 = 0x13ad;\n        var1 = func_1F35();\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = storage[0x03];\n        var var5 = memory[0x40:0x60];\n    \n        if (MSIZE() < var5) {\n            var temp0 = var4;\n            var temp1 = var5;\n            memory[temp1:temp1 + 0x20] = temp0;\n            memory[0x40:0x60] = temp1 + temp0 * 0x20 + 0x20;\n            var1 = temp1;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) {\n            label_1527:\n                var4 = var2;\n                var5 = memory[0x40:0x60];\n            \n                if (MSIZE() < var5) {\n                    var temp2 = var5;\n                    var temp3 = var4;\n                    memory[temp2:temp2 + 0x20] = temp3;\n                    memory[0x40:0x60] = temp2 + temp3 * 0x20 + 0x20;\n                    var0 = temp2;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) {\n                    label_15C6:\n                        return var0;\n                    } else {\n                    label_1557:\n                        var4 = var1;\n                        var5 = var3;\n                    \n                        if (var5 >= memory[var4:var4 + 0x20]) { assert(); }\n                    \n                        var4 = memory[var5 * 0x20 + var4 + 0x20:var5 * 0x20 + var4 + 0x20 + 0x20];\n                        var5 = var0;\n                        var var6 = var3;\n                    \n                        if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                    \n                        memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        var3 = var3 + 0x01;\n                    \n                        if (var3 >= var2) { goto label_15C6; }\n                        else { goto label_1557; }\n                    }\n                } else {\n                    var temp4 = MSIZE();\n                    var temp5 = var4;\n                    memory[temp4:temp4 + 0x20] = temp5;\n                    memory[0x40:0x60] = temp4 + temp5 * 0x20 + 0x20;\n                    var0 = temp4;\n                    var3 = 0x00;\n                \n                    if (var3 >= var2) { goto label_15C6; }\n                    else { goto label_1557; }\n                }\n            } else {\n            label_13EF:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x01;\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = 0x00;\n                var6 = 0x03;\n                var var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp6 = var5;\n                memory[temp6:temp6 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp7 = temp6 + 0x20;\n                memory[temp7:temp7 + 0x20] = var4;\n            \n                if (!(storage[keccak256(memory[0x00:0x00 + temp7 + 0x20])] & 0xff)) {\n                label_1519:\n                    var3 = var3 + 0x01;\n                \n                    if (var3 >= storage[0x03]) { goto label_1527; }\n                    else { goto label_13EF; }\n                } else {\n                    var4 = 0x03;\n                    var5 = var3;\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    var4 = storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var5 = var1;\n                    var6 = var2;\n                \n                    if (var6 >= memory[var5:var5 + 0x20]) { assert(); }\n                \n                    memory[var6 * 0x20 + var5 + 0x20:var6 * 0x20 + var5 + 0x20 + 0x20] = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var2 = var2 + 0x01;\n                    goto label_1519;\n                }\n            }\n        } else {\n            var temp8 = MSIZE();\n            var temp9 = var4;\n            memory[temp8:temp8 + 0x20] = temp9;\n            memory[0x40:0x60] = temp8 + temp9 * 0x20 + 0x20;\n            var1 = temp8;\n            var2 = 0x00;\n            var3 = 0x00;\n        \n            if (var3 >= storage[0x03]) { goto label_1527; }\n            else { goto label_13EF; }\n        }\n    }\n    \n    function transactionCount() returns (var r0) { return storage[0x05]; }\n    \n    function changeRequirement(var arg0) {\n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var0 = storage[0x03];\n        var var1 = arg0;\n        var var2 = var0 > 0x32;\n    \n        if (!var2) {\n            var2 = var1 > var0;\n        \n            if (var2) { goto label_1630; }\n            else { goto label_162B; }\n        } else if (var2) {\n        label_1630:\n        \n            if (var2) {\n            label_163B:\n            \n                if (var2) { revert(memory[0x00:0x00]); }\n            \n            label_1646:\n                var temp0 = arg0;\n                storage[0x04] = temp0;\n                var temp1 = memory[0x40:0x60];\n                memory[temp1:temp1 + 0x20] = temp0;\n                var temp2 = memory[0x40:0x60];\n                log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0xa3f1ee9126a074d9326c682f561767f710e927faa811f7a99829d49dc421797a]);\n                return;\n            } else {\n            label_1636:\n            \n                if (var0 != 0x00) { goto label_1646; }\n                else { revert(memory[0x00:0x00]); }\n            }\n        } else {\n        label_162B:\n            var2 = var1 == 0x00;\n        \n            if (var2) { goto label_163B; }\n            else { goto label_1636; }\n        }\n    }\n    \n    function confirmTransaction(var arg0) {\n        var var0 = msg.sender;\n        memory[0x00:0x20] = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg0;\n        var var3 = msg.sender;\n        memory[0x00:0x20] = var2;\n        memory[0x20:0x40] = 0x01;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg0;\n        memory[0x00:0x20] = temp1;\n        memory[0x20:0x40] = 0x01;\n        var temp2 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp2;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x4a504a94899432a9846e1aa406dceb1bcfd538bb839071d49d1e5e23f5be30ef, msg.sender, stack[-5]]);\n        var var4 = 0x1866;\n        var var5 = temp1;\n        executeTransaction(var5);\n    }\n    \n    function submitTransaction(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x187e;\n        var var2 = arg0;\n        var var3 = arg1;\n        var var4 = arg2;\n        var1 = func_1D86(var2, var3, var4);\n        var temp0 = var1;\n        var0 = temp0;\n        var1 = 0x1889;\n        var2 = var0;\n        confirmTransaction(var2);\n        return var0;\n    }\n    \n    function MAX_OWNER_COUNT() returns (var r0) { return 0x32; }\n    \n    function required() returns (var r0) { return storage[0x04]; }\n    \n    function replaceOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n    \n        if (msg.sender != address(this)) { revert(memory[0x00:0x00]); }\n    \n        var var1 = arg0;\n        memory[0x00:0x20] = var1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (!(storage[keccak256(memory[0x00:0x40])] & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var var2 = arg1;\n        memory[0x00:0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n    \n        if (storage[keccak256(memory[0x00:0x40])] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var0 = 0x00;\n    \n        if (var0 >= storage[0x03]) {\n        label_1A7A:\n            var temp0 = arg0;\n            memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x00;\n            var temp2 = arg1;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = (storage[temp3] & ~0xff) | 0x01;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + memory[0x40:0x60] - temp4], [0x8001553a916ef2f495d26a907cc54d96ed840d7bda71e73194bf5a9df7a76b90, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0xf39e6e1eb0edcf53c221607b54b00cd28f3196fed0a24994dc308b8f611b682d, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return;\n        } else {\n        label_199F:\n            var var3 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var4 = 0x03;\n            var var5 = var0;\n        \n            if (var5 >= storage[var4]) { assert(); }\n        \n            memory[0x00:0x20] = var4;\n        \n            if (storage[var5 + keccak256(memory[0x00:0x20])] & 0xffffffffffffffffffffffffffffffffffffffff != var3) {\n                var0 = var0 + 0x01;\n            \n                if (var0 >= storage[0x03]) { goto label_1A7A; }\n                else { goto label_199F; }\n            } else {\n                var3 = arg1;\n                var4 = 0x03;\n                var5 = var0;\n            \n                if (var5 >= storage[var4]) { assert(); }\n            \n                memory[0x00:0x20] = var4;\n                var temp6 = var5 + keccak256(memory[0x00:0x20]);\n                storage[temp6] = (var3 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffffffffffffffffffffffffffff);\n                goto label_1A7A;\n            }\n        }\n    }\n    \n    function executeTransaction(var arg0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n        memory[0x00:0x20] = var1;\n        memory[0x20:0x40] = 0x00;\n    \n        if (storage[keccak256(memory[0x00:0x40]) + 0x03] & 0xff) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x1bfc;\n        var var3 = arg0;\n        var2 = isConfirmed(var3);\n    \n        if (!var2) {\n        label_1D7F:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x00;\n            var temp0 = keccak256(memory[0x00:0x40]);\n            var0 = temp0;\n            var temp1 = var0 + 0x03;\n            storage[temp1] = (storage[temp1] & ~0xff) | 0x01;\n            var2 = storage[var0] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var3 = storage[var0 + 0x01];\n            var var4 = var0 + 0x02;\n            var var5 = memory[0x40:0x60];\n            var var6 = var5;\n            var var7 = var4;\n            var temp2 = storage[var7];\n            var var8 = (!(temp2 & 0x01) * 0x0100 - 0x01 & temp2) / 0x02;\n        \n            if (!var8) {\n            label_1CDC:\n                var temp3 = memory[0x40:0x60];\n                var temp4;\n                temp4, memory[temp3:temp3 + 0x00] = address(var2).call.gas(msg.gas - 0x8796).value(var3)(memory[temp3:temp3 + var6 - temp3]);\n            \n                if (!temp4) {\n                    var temp5 = memory[0x40:0x60];\n                    log(memory[temp5:temp5 + memory[0x40:0x60] - temp5], [0x526441bb6c1aba3c9a4a6ca1d6545da9c2333c8c48343ef398eb858d72b79236, stack[-3]]);\n                    var temp6 = var0 + 0x03;\n                    storage[temp6] = (storage[temp6] & ~0xff) | 0x00;\n                    goto label_1D7F;\n                } else {\n                    var temp7 = memory[0x40:0x60];\n                    log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0x33e13ecb54c3076d8e8bb8c2881800a4d972b792045ffae98fdf46df365fed75, stack[-3]]);\n                    goto label_1D7F;\n                }\n            } else if (0x1f < var8) {\n                var temp8 = var6;\n                var temp9 = temp8 + var8;\n                var6 = temp9;\n                memory[0x00:0x20] = var7;\n                var temp10 = keccak256(memory[0x00:0x20]);\n                memory[temp8:temp8 + 0x20] = storage[temp10];\n                var7 = temp10 + 0x01;\n                var8 = temp8 + 0x20;\n            \n                if (var6 <= var8) { goto label_1CD3; }\n            \n            label_1CBF:\n                var temp11 = var7;\n                var temp12 = var8;\n                memory[temp12:temp12 + 0x20] = storage[temp11];\n                var7 = temp11 + 0x01;\n                var8 = temp12 + 0x20;\n            \n                if (var6 > var8) { goto label_1CBF; }\n            \n            label_1CD3:\n                var temp13 = var6;\n                var temp14 = temp13 + (var8 - temp13 & 0x1f);\n                var8 = temp13;\n                var6 = temp14;\n                goto label_1CDC;\n            } else {\n                var temp15 = var6;\n                memory[temp15:temp15 + 0x20] = storage[var7] / 0x0100 * 0x0100;\n                var6 = temp15 + 0x20;\n                var8 = var8;\n                goto label_1CDC;\n            }\n        }\n    }\n    \n    function func_1D86(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg0;\n    \n        if (var1 & 0xffffffffffffffffffffffffffffffffffffffff == 0x00) { revert(memory[0x00:0x00]); }\n    \n        var0 = storage[0x05];\n        var temp0 = memory[0x40:0x60];\n        var var2 = temp0;\n        memory[0x40:0x60] = var2 + 0x80;\n        memory[var2:var2 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var temp1 = var2 + 0x20;\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = arg2;\n        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = !!0x00;\n        memory[0x00:0x20] = var0;\n        memory[0x20:0x40] = 0x00;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        var var3 = temp3;\n        var temp4 = var3;\n        storage[temp4] = (memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        storage[var3 + 0x01] = memory[var2 + 0x20:var2 + 0x20 + 0x20];\n        var temp5 = memory[var2 + 0x40:var2 + 0x40 + 0x20];\n        var var4 = 0x1e6e;\n        var var5 = var3 + 0x02;\n        var var7 = memory[temp5:temp5 + 0x20];\n        var var6 = temp5 + 0x20;\n        var4 = func_1F5D(var5, var6, var7);\n        var temp6 = var3 + 0x03;\n        storage[temp6] = !!memory[var2 + 0x60:var2 + 0x60 + 0x20] | (storage[temp6] & ~0xff);\n        storage[0x05] = storage[0x05] + 0x01;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + memory[0x40:0x60] - temp7], [0xc0ba8fe4b176c1714197d43b9cc6bcf797a4a7461c5fe8d0ef6e184ae7601e51, stack[-5]]);\n        return var0;\n    }\n    \n    function func_1EDD(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1F04:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1f03;\n            var var2 = temp3 + arg1;\n            var var1 = temp4;\n            var0 = func_1FDD(var1, var2);\n            goto label_1F04;\n        }\n    }\n    \n    function func_1F09(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_1F30:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = temp3 + var0;\n            var0 = 0x1f2f;\n            var var2 = temp3 + arg1;\n            var var1 = temp4;\n            var0 = func_1FDD(var1, var2);\n            goto label_1F30;\n        }\n    }\n    \n    function func_1F35() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_1F49() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x20;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        return temp0;\n    }\n    \n    function func_1F5D(var arg0, var arg1, var arg2) returns (var r0) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        memory[0x00:0x20] = temp0;\n        var var0 = keccak256(memory[0x00:0x20]);\n        var temp2 = arg1;\n        arg1 = var0 + ((!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02 + 0x1f) / 0x20;\n        var var1 = temp2;\n    \n        if (0x1f < arg2) {\n            var temp3 = arg2;\n            storage[arg0] = temp3 + temp3 + 0x01;\n        \n            if (!temp3) {\n            label_1FCC:\n                var temp4 = arg1;\n                arg1 = 0x1fd9;\n                var0 = var0;\n                arg2 = temp4;\n                arg1 = func_1FDD(arg2, var0);\n                return arg0;\n            } else {\n                var temp5 = var1;\n                var temp6 = arg2;\n                arg2 = temp5;\n                var1 = arg2 + temp6;\n            \n                if (var1 <= arg2) {\n                label_1FCB:\n                    goto label_1FCC;\n                } else {\n                label_1FB9:\n                    var temp7 = arg2;\n                    var temp8 = var0;\n                    storage[temp8] = memory[temp7:temp7 + 0x20];\n                    arg2 = temp7 + 0x20;\n                    var1 = var1;\n                    var0 = temp8 + 0x01;\n                \n                    if (var1 <= arg2) { goto label_1FCB; }\n                    else { goto label_1FB9; }\n                }\n            }\n        } else {\n            var temp9 = arg2;\n            storage[arg0] = temp9 + temp9 | (memory[var1:var1 + 0x20] & ~0xff);\n            goto label_1FCC;\n        }\n    }\n    \n    function func_1FDD(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x1fff;\n        var temp1 = arg1;\n        var var0 = temp1;\n        arg1 = temp0;\n    \n        if (arg1 <= var0) { return func_1FFB(arg1, var0); }\n    \n    label_1FEC:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_1FEC; }\n    \n        arg0 = func_1FFB(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1FFB(var arg0, var arg1) returns (var r0) { return arg0; }\n}\n\n.",
	"status": "1",
	"time_cost": 54.86705994606018,
	"usage": {
		"completion_tokens": 595,
		"prompt_tokens": 16190,
		"total_tokens": 16785
	}
}