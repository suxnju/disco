{
	"address": "0xe825363f3bedabc95b2a9d42dbc73ec7b82b57d3",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The following is the simplified Solidity code built on the basis of the given decompiled code:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Contract {\n    uint256 private dailyLimit;\n    uint256 private required;\n    uint256 private numOwners;\n    uint256 private lastDay;\n    uint256 private spentToday;\n    mapping (address => bool) private ownerExists;\n    mapping (address => uint256) private ownerIndex;\n    mapping (address => mapping (bytes32 => bool)) private confirmations;\n    mapping (bytes32 => Transaction) private transactions;\n\n    struct Transaction {\n        address destination;\n        uint256 value;\n        bytes data;\n        bool executed;\n    }\n    \n    modifier onlyOwner {\n        require(ownerExists[msg.sender]);\n        _;\n    }\n    \n    modifier ownerDoesNotExist(address owner) {\n        require(!ownerExists[owner]);\n        _;\n    }\n    \n    function addOwner(address owner) public onlyOwner ownerDoesNotExist(owner) {\n        ownerExists[owner] = true;\n        numOwners++;\n    }\n    \n    function removeOwner(address owner) public onlyOwner {\n        require(ownerExists[owner]);\n        ownerExists[owner] = false;\n        numOwners--;\n    }\n    \n    function changeRequirement(uint256 _required) public onlyOwner {\n        required = _required;\n    }\n    \n    function setDailyLimit(uint256 _dailyLimit) public onlyOwner {\n        dailyLimit = _dailyLimit;\n    }\n    \n    function execute(address destination, uint256 value, bytes memory data) public onlyOwner returns (bool) {\n        bytes32 txHash = keccak256(abi.encodePacked(destination, value, data));\n        require(!transactions[txHash].executed);\n        transactions[txHash].destination = destination;\n        transactions[txHash].value = value;\n        transactions[txHash].data = data;\n        transactions[txHash].executed = false;\n        confirmations[msg.sender][txHash] = true;\n        return executeTransaction(txHash);\n    }\n    \n    function confirm(bytes32 txHash) public onlyOwner returns (bool) {\n        require(!transactions[txHash].executed);\n        confirmations[msg.sender][txHash] = true;\n        return executeTransaction(txHash);\n    }\n    \n    function executeTransaction(bytes32 txHash) private returns (bool) {\n        if (isConfirmed(txHash)) {\n            transactions[txHash].executed = true;\n            (bool success, ) = transactions[txHash].destination.call{value: transactions[txHash].value}(transactions[txHash].data);\n            require(success);\n            return true;\n        }\n        return false;\n    }\n    \n    function isConfirmed(bytes32 txHash) private view returns (bool) {\n        uint256 count = 0;\n        for (uint256 i=0; i<numOwners; i++) {\n            if (confirmations[msg.sender][txHash]) {\n                count += 1;\n            }\n            if (count == required) {\n                return true;\n            }\n        }\n        return false;\n    }\n}\n```\n\nPlease note that the provided Solidity code is based on the decompiled code you provided, but it's simplified and may lack some features or mechanisms that the original contract might have contained.",
				"role": "assistant"
			}
		}
	],
	"created": 1700470537,
	"id": "chatcmpl-8MuM5Nu2q5IXrZW7Xo2aupccv2QIv",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00E0:\n            var var0 = 0x0134;\n        \n            if (msg.value <= 0x00) {\n                func_0131();\n                stop();\n            } else {\n                func_00EE();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x0134;\n                var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0170;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = isOwner(var2);\n            \n            label_0170:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = !!var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n            } else if (var0 == 0x4123cb6b) {\n                // Dispatch table entry for m_numOwners()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_numOwners();\n            \n            label_0194:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x52375093) {\n                // Dispatch table entry for m_lastDay()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_lastDay();\n                goto label_0194;\n            } else if (var0 == 0x5c52c2f5) {\n                // Dispatch table entry for resetSpentToday()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                resetSpentToday();\n                stop();\n            } else if (var0 == 0x659010e7) {\n                // Dispatch table entry for m_spentToday()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_spentToday();\n                goto label_0194;\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x746c9171) {\n                // Dispatch table entry for m_required()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_required();\n                goto label_0194;\n            } else if (var0 == 0x797af627) {\n                // Dispatch table entry for confirm(bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0170;\n                var2 = msg.data[0x04:0x24];\n                var1 = confirm(var2);\n                goto label_0170;\n            } else if (var0 == 0xb20d30a9) {\n                // Dispatch table entry for setDailyLimit(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24];\n                setDailyLimit(var2);\n                stop();\n            } else if (var0 == 0xb61d27f6) {\n                // Dispatch table entry for execute(address,uint256,bytes)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var var3 = msg.data[0x24:0x44];\n                var temp4 = msg.data[0x44:0x64];\n                var var4 = temp4 + 0x24;\n                var var5 = msg.data[temp4 + 0x04:temp4 + 0x04 + 0x20];\n                var1 = execute(var2, var3, var4, var5);\n                goto label_0194;\n            } else if (var0 == 0xb75c7dc6) {\n                // Dispatch table entry for revoke(bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24];\n                revoke(var2);\n                stop();\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc2cf7326) {\n                // Dispatch table entry for hasConfirmed(bytes32,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0170;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var1 = hasConfirmed(var2, var3);\n                goto label_0170;\n            } else if (var0 == 0xc41a360a) {\n                // Dispatch table entry for getOwner(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0326;\n                var2 = msg.data[0x04:0x24];\n                var1 = getOwner(var2);\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                var temp6 = memory[0x40:0x60];\n                return memory[temp6:temp6 + temp5 - temp6 + 0x20];\n            } else if (var0 == 0xcbf0b0c0) {\n                // Dispatch table entry for kill(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                kill(var2);\n                stop();\n            } else if (var0 == 0xf00d4b5d) {\n                // Dispatch table entry for changeOwner(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var temp7 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp7 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp7;\n                changeOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xf1736d86) {\n                // Dispatch table entry for m_dailyLimit()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_dailyLimit();\n                goto label_0194;\n            } else { goto label_00E0; }\n        }\n    }\n    \n    function func_00EE() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x40], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c]);\n    }\n    \n    function func_0131() {}\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var1 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var2 = 0x03cf;\n        var var3 = var1;\n        var2 = func_0F48(var3);\n    \n        if (!var2) {\n        label_048D:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0102;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (!var0) { goto label_048D; }\n        \n            if (storage[0x00] > storage[0x01] - 0x01) { goto label_048D; }\n        \n            var2 = 0x00;\n            var3 = 0x02;\n            var var4 = var0;\n        \n            if (var4 >= 0x0100) { assert(); }\n        \n            storage[var4 + var3] = var2;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0102;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var2 = 0x0448;\n            var3 = storage[0x0104];\n            var4 = 0x00;\n        \n            if (var4 >= var3) {\n            label_1127:\n                var var5 = 0x05eb;\n                var var6 = storage[0x0104];\n                var var7 = 0x00;\n            \n                if (var7 >= var6) {\n                label_137F:\n                    var var8 = 0x05eb;\n                    var var9 = 0x0104;\n                    var var10 = 0x00;\n                    var temp3 = var9;\n                    var temp4 = storage[temp3];\n                    storage[temp3] = 0x00;\n                    memory[0x00:0x20] = temp3;\n                    var9 = 0x04f5;\n                    var var11 = keccak256(memory[0x00:0x20]);\n                    var10 = var11 + temp4;\n                    var9 = func_14B3(var10, var11);\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_130D:\n                    var8 = 0x0104;\n                    var9 = var7;\n                \n                    if (var9 >= storage[var8]) { assert(); }\n                \n                    memory[0x00:0x20] = var8;\n                \n                    if (!storage[var9 + keccak256(memory[0x00:0x20])]) {\n                    label_1376:\n                        var7 = var7 + 0x01;\n                    \n                        if (var7 >= var6) { goto label_137F; }\n                        else { goto label_130D; }\n                    } else {\n                        var8 = 0x0103;\n                        var9 = 0x00;\n                        var10 = 0x0104;\n                        var11 = var7;\n                    \n                        if (var11 >= storage[var10]) { assert(); }\n                    \n                        memory[0x00:0x20] = var10;\n                        var temp5 = var9;\n                        memory[temp5:temp5 + 0x20] = storage[var11 + keccak256(memory[0x00:0x20])];\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var8;\n                        var temp6 = keccak256(memory[0x00:0x00 + temp5 + 0x40]);\n                        storage[temp6] = 0x00;\n                        storage[temp6 + 0x01] = 0x00;\n                        storage[temp6 + 0x02] = 0x00;\n                        goto label_1376;\n                    }\n                }\n            } else {\n            label_10C3:\n                var5 = 0x0108;\n                var6 = 0x00;\n                var7 = 0x0104;\n                var8 = var4;\n            \n                if (var8 >= storage[var7]) { assert(); }\n            \n                memory[0x00:0x20] = var7;\n                var temp7 = var6;\n                memory[temp7:temp7 + 0x20] = storage[var8 + keccak256(memory[0x00:0x20])];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var5;\n                var temp8 = keccak256(memory[0x00:0x00 + temp7 + 0x40]);\n                storage[temp8] = storage[temp8] & ~(0x02 ** 0xa0 - 0x01);\n                storage[temp8 + 0x01] = 0x00;\n                var6 = 0x00;\n                var5 = temp8;\n                var7 = 0x111c;\n                var8 = var5 + 0x02;\n                var9 = var6;\n                func_13A0(var8, var9);\n                var4 = var4 + 0x01;\n            \n                if (var4 >= var3) { goto label_1127; }\n                else { goto label_10C3; }\n            }\n        }\n    }\n    \n    function isOwner(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0102;\n        return storage[keccak256(memory[0x00:0x40])] > 0x00;\n    }\n    \n    function m_numOwners() returns (var r0) { return storage[0x01]; }\n    \n    function m_lastDay() returns (var r0) { return storage[0x0107]; }\n    \n    function resetSpentToday() {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x04e9;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) { return; }\n    \n        storage[0x0106] = 0x00;\n    }\n    \n    function m_spentToday() returns (var r0) { return storage[0x0106]; }\n    \n    function addOwner(var arg0) {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x0528;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) {\n        label_05EB:\n            return;\n        } else {\n            var1 = 0x0536;\n            var2 = arg0;\n            var1 = isOwner(var2);\n        \n            if (var1) { goto label_05EB; }\n        \n            var1 = 0x0548;\n            var2 = storage[0x0104];\n            var var3 = 0x00;\n        \n            if (var3 >= var2) {\n            label_1127:\n                var var4 = 0x05eb;\n                var var5 = storage[0x0104];\n                var var6 = 0x00;\n            \n                if (var6 >= var5) {\n                label_137F:\n                    var var7 = 0x05eb;\n                    var var8 = 0x0104;\n                    var var9 = 0x00;\n                    var temp3 = var8;\n                    var temp4 = storage[temp3];\n                    storage[temp3] = 0x00;\n                    memory[0x00:0x20] = temp3;\n                    var8 = 0x04f5;\n                    var var10 = keccak256(memory[0x00:0x20]);\n                    var9 = var10 + temp4;\n                    var8 = func_14B3(var9, var10);\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_130D:\n                    var7 = 0x0104;\n                    var8 = var6;\n                \n                    if (var8 >= storage[var7]) { assert(); }\n                \n                    memory[0x00:0x20] = var7;\n                \n                    if (!storage[var8 + keccak256(memory[0x00:0x20])]) {\n                    label_1376:\n                        var6 = var6 + 0x01;\n                    \n                        if (var6 >= var5) { goto label_137F; }\n                        else { goto label_130D; }\n                    } else {\n                        var7 = 0x0103;\n                        var8 = 0x00;\n                        var9 = 0x0104;\n                        var10 = var6;\n                    \n                        if (var10 >= storage[var9]) { assert(); }\n                    \n                        memory[0x00:0x20] = var9;\n                        var temp5 = var8;\n                        memory[temp5:temp5 + 0x20] = storage[var10 + keccak256(memory[0x00:0x20])];\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var7;\n                        var temp6 = keccak256(memory[0x00:0x00 + temp5 + 0x40]);\n                        storage[temp6] = 0x00;\n                        storage[temp6 + 0x01] = 0x00;\n                        storage[temp6 + 0x02] = 0x00;\n                        goto label_1376;\n                    }\n                }\n            } else {\n            label_10C3:\n                var4 = 0x0108;\n                var5 = 0x00;\n                var6 = 0x0104;\n                var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp7 = var5;\n                memory[temp7:temp7 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var4;\n                var temp8 = keccak256(memory[0x00:0x00 + temp7 + 0x40]);\n                storage[temp8] = storage[temp8] & ~(0x02 ** 0xa0 - 0x01);\n                storage[temp8 + 0x01] = 0x00;\n                var5 = 0x00;\n                var4 = temp8;\n                var6 = 0x111c;\n                var7 = var4 + 0x02;\n                var8 = var5;\n                func_13A0(var7, var8);\n                var3 = var3 + 0x01;\n            \n                if (var3 >= var2) { goto label_1127; }\n                else { goto label_10C3; }\n            }\n        }\n    }\n    \n    function m_required() returns (var r0) { return storage[0x00]; }\n    \n    function confirm(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = arg0;\n        var var3 = 0x0605;\n        var var4 = var2;\n        var3 = func_0F48(var4);\n    \n        if (!var3) {\n        label_0940:\n            return var0;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0108;\n            var3 = !!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01);\n        \n            if (!var3) {\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0108;\n                var3 = !!storage[keccak256(memory[0x00:0x40]) + 0x01];\n            \n                if (var3) { goto label_066E; }\n                else { goto label_0647; }\n            } else if (var3) {\n            label_066E:\n            \n                if (!var3) { goto label_0940; }\n            \n            label_0674:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0108;\n            \n                if (storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01) {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0108;\n                    var temp0 = keccak256(memory[0x00:0x40]);\n                    var temp1 = storage[temp0 + 0x02];\n                    var3 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n                    var4 = storage[temp0 + 0x01];\n                    var var5 = temp0 + 0x02;\n                    var var6 = memory[0x40:0x60];\n                    var var7 = var6;\n                    var var8 = var5;\n                    var var9 = (!(temp1 & 0x01) * 0x0100 + ~0x00 & temp1) / 0x02;\n                \n                    if (!var9) {\n                    label_07D8:\n                        var temp2 = memory[0x40:0x60];\n                        var temp3;\n                        temp3, memory[temp2:temp2 + 0x00] = address(var3).call.gas(msg.gas - 0x8502).value(var4)(memory[temp2:temp2 + var7 - temp2]);\n                    \n                        if (!temp3) { revert(memory[0x00:0x00]); }\n                    \n                    label_07FE:\n                        var temp4 = arg0;\n                        memory[0x00:0x20] = temp4;\n                        memory[0x20:0x40] = 0x0108;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        var temp6 = memory[0x40:0x60];\n                        var temp7 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp6:temp6 + 0x20] = msg.sender & temp7;\n                        var4 = msg.sender;\n                        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = temp4;\n                        memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = storage[temp5 + 0x01];\n                        memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = temp7 & storage[temp5];\n                        memory[temp6 + 0xa0:temp6 + 0xa0 + 0x20] = var1 & temp7;\n                        memory[temp6 + 0x80:temp6 + 0x80 + 0x20] = 0xc0;\n                        var temp8 = storage[temp5 + 0x02];\n                        var temp9 = (temp8 & !(temp8 & 0x01) * 0x0100 + ~0x00) / 0x02;\n                        memory[temp6 + 0xc0:temp6 + 0xc0 + 0x20] = temp9;\n                        var3 = 0xe3a3a4111a84df27d76b68dc721e65c7711605ea5eee4afd3a9c58195217365c;\n                        var5 = temp4;\n                        var6 = storage[temp5 + 0x01];\n                        var7 = temp7 & storage[temp5];\n                        var8 = temp5 + 0x02;\n                        var9 = var1;\n                        var var10 = temp6;\n                        var var11 = temp6 + 0x80;\n                        var var12 = var10 + 0xe0;\n                        var var13 = var8;\n                        var var14 = temp9;\n                    \n                        if (!var14) {\n                        label_08F4:\n                            var temp10 = memory[0x40:0x60];\n                            log(memory[temp10:temp10 + var12 - temp10], [stack[-12]]);\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x0108;\n                            var temp11 = keccak256(memory[0x00:0x40]);\n                            storage[temp11] = storage[temp11] & ~(0x02 ** 0xa0 - 0x01);\n                            storage[temp11 + 0x01] = 0x00;\n                            var4 = 0x00;\n                            var3 = temp11;\n                            var5 = 0x0939;\n                            var6 = var3 + 0x02;\n                            var7 = var4;\n                            func_13A0(var6, var7);\n                            var0 = 0x01;\n                            goto label_0940;\n                        } else if (0x1f < var14) {\n                            var temp12 = var12;\n                            var temp13 = temp12 + var14;\n                            var12 = temp13;\n                            memory[0x00:0x20] = var13;\n                            var temp14 = keccak256(memory[0x00:0x20]);\n                            memory[temp12:temp12 + 0x20] = storage[temp14];\n                            var13 = temp14 + 0x01;\n                            var14 = temp12 + 0x20;\n                        \n                            if (var12 <= var14) { goto label_08EB; }\n                        \n                        label_08D7:\n                            var temp15 = var13;\n                            var temp16 = var14;\n                            memory[temp16:temp16 + 0x20] = storage[temp15];\n                            var13 = temp15 + 0x01;\n                            var14 = temp16 + 0x20;\n                        \n                            if (var12 > var14) { goto label_08D7; }\n                        \n                        label_08EB:\n                            var temp17 = var12;\n                            var temp18 = temp17 + (var14 - temp17 & 0x1f);\n                            var14 = temp17;\n                            var12 = temp18;\n                            goto label_08F4;\n                        } else {\n                            var temp19 = var12;\n                            memory[temp19:temp19 + 0x20] = storage[var13] / 0x0100 * 0x0100;\n                            var12 = temp19 + 0x20;\n                            var14 = var14;\n                            goto label_08F4;\n                        }\n                    } else if (0x1f < var9) {\n                        var temp20 = var7;\n                        var temp21 = temp20 + var9;\n                        var7 = temp21;\n                        memory[0x00:0x20] = var8;\n                        var temp22 = keccak256(memory[0x00:0x20]);\n                        memory[temp20:temp20 + 0x20] = storage[temp22];\n                        var8 = temp22 + 0x01;\n                        var9 = temp20 + 0x20;\n                    \n                        if (var7 <= var9) { goto label_07CF; }\n                    \n                    label_07BB:\n                        var temp23 = var8;\n                        var temp24 = var9;\n                        memory[temp24:temp24 + 0x20] = storage[temp23];\n                        var8 = temp23 + 0x01;\n                        var9 = temp24 + 0x20;\n                    \n                        if (var7 > var9) { goto label_07BB; }\n                    \n                    label_07CF:\n                        var temp25 = var7;\n                        var temp26 = temp25 + (var9 - temp25 & 0x1f);\n                        var9 = temp25;\n                        var7 = temp26;\n                        goto label_07D8;\n                    } else {\n                        var temp27 = var7;\n                        memory[temp27:temp27 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n                        var7 = temp27 + 0x20;\n                        var9 = var9;\n                        goto label_07D8;\n                    }\n                } else {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0108;\n                    var temp28 = keccak256(memory[0x00:0x40]);\n                    var temp29 = storage[temp28 + 0x02];\n                    var temp30 = memory[0x40:0x60];\n                    var temp31 = (!(temp29 & 0x01) * 0x0100 + ~0x00 & temp29) / 0x02;\n                    memory[0x40:0x60] = temp30 + (temp31 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp30:temp30 + 0x20] = temp31;\n                    var3 = 0x073f;\n                    var7 = temp31;\n                    var4 = storage[temp28 + 0x01];\n                    var5 = temp30;\n                    var6 = temp28 + 0x02;\n                    var8 = var5 + 0x20;\n                    var9 = var6;\n                    var10 = var7;\n                \n                    if (!var10) {\n                        var3 = func_0735(var4, var5, var6, var7, var8, var9, var10);\n                        var1 = var3;\n                        goto label_07FE;\n                    } else if (0x1f < var10) {\n                        var temp32 = var8;\n                        var temp33 = temp32 + var10;\n                        var8 = temp33;\n                        memory[0x00:0x20] = var9;\n                        var temp34 = keccak256(memory[0x00:0x20]);\n                        memory[temp32:temp32 + 0x20] = storage[temp34];\n                        var9 = temp34 + 0x01;\n                        var10 = temp32 + 0x20;\n                    \n                        if (var8 <= var10) { goto label_072C; }\n                    \n                    label_0718:\n                        var temp35 = var9;\n                        var temp36 = var10;\n                        memory[temp36:temp36 + 0x20] = storage[temp35];\n                        var9 = temp35 + 0x01;\n                        var10 = temp36 + 0x20;\n                    \n                        if (var8 > var10) { goto label_0718; }\n                    \n                    label_072C:\n                        var temp37 = var8;\n                        var temp38 = temp37 + (var10 - temp37 & 0x1f);\n                        var10 = temp37;\n                        var8 = temp38;\n                        var3 = func_0735(var4, var5, var6, var7, var8, var9, var10);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp39 = var8;\n                        memory[temp39:temp39 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                        var10 = var10;\n                        var8 = temp39 + 0x20;\n                        var3 = func_0735(var4, var5, var6, var7, var8, var9, var10);\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            } else {\n            label_0647:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0108;\n                var temp40 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n            \n                if (!((!(temp40 & 0x01) * 0x0100 + ~0x00 & temp40) / 0x02)) { goto label_0940; }\n                else { goto label_0674; }\n            }\n        }\n    }\n    \n    function func_0735(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) returns (var r0) {\n        r0 = func_1270(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setDailyLimit(var arg0) {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x0971;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) { return; }\n    \n        storage[0x0105] = arg0;\n    }\n    \n    function execute(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x0990;\n        var var3 = msg.sender;\n        var2 = isOwner(var3);\n    \n        if (!var2) {\n        label_0C59:\n            return var0;\n        } else {\n            var2 = !arg3;\n        \n            if (!var2) {\n            label_09A7:\n            \n                if (var2) {\n                    if (!var2) {\n                    label_0AF8:\n                        var temp0 = msg.data.length;\n                        var temp1 = memory[0x40:0x60];\n                        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n                        var temp2 = temp0 + temp1;\n                        memory[temp2:temp2 + 0x20] = block.number;\n                        var temp3 = memory[0x40:0x60];\n                        var temp4 = keccak256(memory[temp3:temp3 + temp2 - temp3 + 0x20]);\n                        memory[0x00:0x20] = temp4;\n                        memory[0x20:0x40] = 0x0108;\n                        var0 = temp4;\n                        var2 = !(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01);\n                    \n                        if (var2) {\n                            memory[0x00:0x20] = var0;\n                            memory[0x20:0x40] = 0x0108;\n                            var2 = !storage[keccak256(memory[0x00:0x40]) + 0x01];\n                        \n                            if (!var2) { goto label_0B84; }\n                            else { goto label_0B5E; }\n                        } else if (!var2) {\n                        label_0B84:\n                        \n                            if (!var2) {\n                            label_0BC8:\n                                var2 = 0x0bd1;\n                                var3 = var0;\n                                var2 = confirm(var3);\n                            \n                                if (var2) { goto label_0C59; }\n                            \n                                var temp5 = memory[0x40:0x60];\n                                memory[temp5:temp5 + 0x20] = var0;\n                                var temp6 = 0x02 ** 0xa0 - 0x01;\n                                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = msg.sender & temp6;\n                                memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = arg1;\n                                memory[temp5 + 0x60:temp5 + 0x60 + 0x20] = arg0 & temp6;\n                                memory[temp5 + 0x80:temp5 + 0x80 + 0x20] = 0xa0;\n                                var temp7 = arg3;\n                                memory[temp5 + 0xa0:temp5 + 0xa0 + 0x20] = temp7;\n                                var temp8 = temp5 + 0xc0;\n                                memory[temp8:temp8 + temp7] = msg.data[arg2:arg2 + temp7];\n                                var temp9 = memory[0x40:0x60];\n                                log(memory[temp9:temp9 + (temp8 + temp7) - temp9], [0x1733cbb53659d713b79580f79f3f9ff215f78a7c7aa45890f3b89fc5cddfbf32]);\n                                goto label_0C59;\n                            } else {\n                            label_0B8A:\n                                memory[0x00:0x20] = var0;\n                                memory[0x20:0x40] = 0x0108;\n                                var temp10 = keccak256(memory[0x00:0x40]);\n                                storage[temp10] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[temp10] & ~(0x02 ** 0xa0 - 0x01));\n                                storage[temp10 + 0x01] = arg1;\n                                var2 = 0x0bc6;\n                                var3 = temp10 + 0x02;\n                                var var4 = arg2;\n                                var var5 = arg3;\n                                var temp11 = var3;\n                                var temp12 = storage[temp11];\n                                memory[0x00:0x20] = temp11;\n                                var var6 = keccak256(memory[0x00:0x20]);\n                                var var7 = var4;\n                                var4 = var6 + ((!(temp12 & 0x01) * 0x0100 - 0x01 & temp12) / 0x02 + 0x1f) / 0x20;\n                            \n                                if (0x1f < var5) {\n                                    var temp13 = var5;\n                                    storage[var3] = temp13 + temp13 + 0x01;\n                                \n                                    if (!temp13) {\n                                    label_1456:\n                                        var temp14 = var4;\n                                        var4 = 0x1463;\n                                        var5 = temp14;\n                                        var4 = func_14B3(var5, var6);\n                                        var2 = func_1463(var3, var4);\n                                        // Error: Could not resolve method call return address!\n                                    } else {\n                                        var temp15 = var5;\n                                        var temp16 = var7;\n                                        var5 = temp16;\n                                        var7 = var5 + temp15;\n                                    \n                                        if (var7 <= var5) { goto label_1456; }\n                                    \n                                    label_1444:\n                                        var temp17 = var5;\n                                        var temp18 = var6;\n                                        storage[temp18] = msg.data[temp17:temp17 + 0x20];\n                                        var5 = temp17 + 0x20;\n                                        var6 = temp18 + 0x01;\n                                        var7 = var7;\n                                    \n                                        if (var7 <= var5) { goto label_1456; }\n                                        else { goto label_1444; }\n                                    }\n                                } else {\n                                    var temp19 = var5;\n                                    storage[var3] = (msg.data[var7:var7 + 0x20] & ~0xff) | temp19 + temp19;\n                                    goto label_1456;\n                                }\n                            }\n                        } else {\n                        label_0B5E:\n                            memory[0x00:0x20] = var0;\n                            memory[0x20:0x40] = 0x0108;\n                            var temp20 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                        \n                            if ((!(temp20 & 0x01) * 0x0100 + ~0x00 & temp20) / 0x02) { goto label_0BC8; }\n                            else { goto label_0B8A; }\n                        }\n                    } else {\n                    label_09BB:\n                    \n                        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n                            var temp21 = arg3;\n                            var temp22 = memory[0x40:0x60];\n                            memory[temp22:temp22 + temp21] = msg.data[arg2:arg2 + temp21];\n                            var temp23 = memory[0x40:0x60];\n                            var temp24;\n                            temp24, memory[temp23:temp23 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(msg.gas - 0x8502).value(arg1)(memory[temp23:temp23 + (temp22 + temp21) - temp23]);\n                        \n                            if (!temp24) { revert(memory[0x00:0x00]); }\n                        \n                        label_0A4C:\n                            var temp25 = arg3;\n                            var temp26 = memory[0x40:0x60];\n                            memory[temp26:temp26 + 0x20] = msg.sender;\n                            var temp27 = temp26 + 0x20;\n                            memory[temp27:temp27 + 0x20] = arg1;\n                            var temp28 = temp27 + 0x20;\n                            memory[temp28:temp28 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                            var temp29 = temp28 + 0x20;\n                            var temp30 = temp29 + 0x20;\n                            memory[temp30:temp30 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                            var temp31 = temp30 + 0x20;\n                            memory[temp29:temp29 + 0x20] = temp31 - temp26;\n                            memory[temp31:temp31 + 0x20] = temp25;\n                            var temp32 = temp31 + 0x20;\n                            memory[temp32:temp32 + temp25] = msg.data[arg2:arg2 + temp25];\n                            var temp33 = memory[0x40:0x60];\n                            log(memory[temp33:temp33 + (temp32 + temp25) - temp33], [0x9738cd1a8777c86b011f7b01d87d484217dc6ab5154a9d41eda5d14af8caf292]);\n                            goto label_0C59;\n                        } else {\n                            var2 = 0x0a04;\n                            var3 = arg1;\n                            var temp34 = arg3;\n                            var temp35 = memory[0x40:0x60];\n                            memory[0x40:0x60] = temp35 + (temp34 + 0x1f) / 0x20 * 0x20 + 0x20;\n                            var4 = temp35;\n                            memory[var4:var4 + 0x20] = temp34;\n                            memory[var4 + 0x20:var4 + 0x20 + temp34] = msg.data[arg2:arg2 + temp34];\n                            var2 = func_1270(var3, var4);\n                            var1 = var2;\n                            goto label_0A4C;\n                        }\n                    }\n                } else if (storage[0x00] != 0x01) { goto label_0AF8; }\n                else { goto label_09BB; }\n            } else {\n                var2 = 0x09a7;\n                var3 = arg1;\n                var2 = func_128A(var3);\n                goto label_09A7;\n            }\n        }\n    }\n    \n    function revoke(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0102;\n        var var1 = 0x00;\n        var var0 = storage[keccak256(memory[var1:var1 + 0x40])];\n        var var2 = var1;\n    \n        if (!var0) { goto label_0D0A; }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0103;\n        var2 = keccak256(memory[0x00:0x40]);\n        var1 = 0x02 ** var0;\n    \n        if (var1 & storage[var2 + 0x01] <= 0x00) {\n        label_0D0A:\n            return;\n        } else {\n            var temp0 = var2;\n            storage[temp0] = storage[temp0] + 0x01;\n            var temp1 = temp0 + 0x01;\n            storage[temp1] = storage[temp1] - var1;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = msg.sender;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = arg0;\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + temp2 - temp3 + 0x40], [0xc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b]);\n            goto label_0D0A;\n        }\n    }\n    \n    function changeRequirement(var arg0) {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x0d38;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) {\n        label_05EB:\n            return;\n        } else if (arg0 <= storage[0x01]) {\n            storage[0x00] = arg0;\n            var1 = 0x0d59;\n            var2 = storage[0x0104];\n            var var3 = 0x00;\n        \n            if (var3 >= var2) {\n            label_1127:\n                var var4 = 0x05eb;\n                var var5 = storage[0x0104];\n                var var6 = 0x00;\n            \n                if (var6 >= var5) {\n                label_137F:\n                    var var7 = 0x05eb;\n                    var var8 = 0x0104;\n                    var var9 = 0x00;\n                    var temp3 = var8;\n                    var temp4 = storage[temp3];\n                    storage[temp3] = 0x00;\n                    memory[0x00:0x20] = temp3;\n                    var8 = 0x04f5;\n                    var var10 = keccak256(memory[0x00:0x20]);\n                    var9 = var10 + temp4;\n                    var8 = func_14B3(var9, var10);\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_130D:\n                    var7 = 0x0104;\n                    var8 = var6;\n                \n                    if (var8 >= storage[var7]) { assert(); }\n                \n                    memory[0x00:0x20] = var7;\n                \n                    if (!storage[var8 + keccak256(memory[0x00:0x20])]) {\n                    label_1376:\n                        var6 = var6 + 0x01;\n                    \n                        if (var6 >= var5) { goto label_137F; }\n                        else { goto label_130D; }\n                    } else {\n                        var7 = 0x0103;\n                        var8 = 0x00;\n                        var9 = 0x0104;\n                        var10 = var6;\n                    \n                        if (var10 >= storage[var9]) { assert(); }\n                    \n                        memory[0x00:0x20] = var9;\n                        var temp5 = var8;\n                        memory[temp5:temp5 + 0x20] = storage[var10 + keccak256(memory[0x00:0x20])];\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var7;\n                        var temp6 = keccak256(memory[0x00:0x00 + temp5 + 0x40]);\n                        storage[temp6] = 0x00;\n                        storage[temp6 + 0x01] = 0x00;\n                        storage[temp6 + 0x02] = 0x00;\n                        goto label_1376;\n                    }\n                }\n            } else {\n            label_10C3:\n                var4 = 0x0108;\n                var5 = 0x00;\n                var6 = 0x0104;\n                var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp7 = var5;\n                memory[temp7:temp7 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var4;\n                var temp8 = keccak256(memory[0x00:0x00 + temp7 + 0x40]);\n                storage[temp8] = storage[temp8] & ~(0x02 ** 0xa0 - 0x01);\n                storage[temp8 + 0x01] = 0x00;\n                var5 = 0x00;\n                var4 = temp8;\n                var6 = 0x111c;\n                var7 = var4 + 0x02;\n                var8 = var5;\n                func_13A0(var7, var8);\n                var3 = var3 + 0x01;\n            \n                if (var3 >= var2) { goto label_1127; }\n                else { goto label_10C3; }\n            }\n        } else { goto label_05EB; }\n    }\n    \n    function hasConfirmed(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x0103;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        var var1 = temp0;\n        memory[0x20:0x40] = 0x0102;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var3 = var0;\n    \n        if (var2) { return storage[var1 + 0x01] & 0x02 ** var2 != 0x00; }\n        else { return 0x00; }\n    }\n    \n    function getOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x02;\n        var var2 = arg0 + 0x01;\n    \n        if (var2 < 0x0100) { return storage[var2 + var1]; }\n        else { assert(); }\n    }\n    \n    function kill(var arg0) {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x0e30;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) { return; }\n        else { selfdestruct(arg0 & 0x02 ** 0xa0 - 0x01); }\n    }\n    \n    function changeOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var1 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var2 = 0x0e70;\n        var var3 = var1;\n        var2 = func_0F48(var3);\n    \n        if (!var2) {\n        label_0D0A:\n            return;\n        } else {\n            var2 = 0x0e7e;\n            var3 = arg1;\n            var2 = isOwner(var3);\n        \n            if (var2) { goto label_0D0A; }\n        \n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0102;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (!var0) { goto label_0D0A; }\n        \n            var2 = 0x0eb8;\n            var3 = storage[0x0104];\n            var var4 = 0x00;\n        \n            if (var4 >= var3) {\n            label_1127:\n                var var5 = 0x05eb;\n                var var6 = storage[0x0104];\n                var var7 = 0x00;\n            \n                if (var7 >= var6) {\n                label_137F:\n                    var var8 = 0x05eb;\n                    var var9 = 0x0104;\n                    var var10 = 0x00;\n                    var temp3 = var9;\n                    var temp4 = storage[temp3];\n                    storage[temp3] = 0x00;\n                    memory[0x00:0x20] = temp3;\n                    var9 = 0x04f5;\n                    var var11 = keccak256(memory[0x00:0x20]);\n                    var10 = var11 + temp4;\n                    var9 = func_14B3(var10, var11);\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_130D:\n                    var8 = 0x0104;\n                    var9 = var7;\n                \n                    if (var9 >= storage[var8]) { assert(); }\n                \n                    memory[0x00:0x20] = var8;\n                \n                    if (!storage[var9 + keccak256(memory[0x00:0x20])]) {\n                    label_1376:\n                        var7 = var7 + 0x01;\n                    \n                        if (var7 >= var6) { goto label_137F; }\n                        else { goto label_130D; }\n                    } else {\n                        var8 = 0x0103;\n                        var9 = 0x00;\n                        var10 = 0x0104;\n                        var11 = var7;\n                    \n                        if (var11 >= storage[var10]) { assert(); }\n                    \n                        memory[0x00:0x20] = var10;\n                        var temp5 = var9;\n                        memory[temp5:temp5 + 0x20] = storage[var11 + keccak256(memory[0x00:0x20])];\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var8;\n                        var temp6 = keccak256(memory[0x00:0x00 + temp5 + 0x40]);\n                        storage[temp6] = 0x00;\n                        storage[temp6 + 0x01] = 0x00;\n                        storage[temp6 + 0x02] = 0x00;\n                        goto label_1376;\n                    }\n                }\n            } else {\n            label_10C3:\n                var5 = 0x0108;\n                var6 = 0x00;\n                var7 = 0x0104;\n                var8 = var4;\n            \n                if (var8 >= storage[var7]) { assert(); }\n            \n                memory[0x00:0x20] = var7;\n                var temp7 = var6;\n                memory[temp7:temp7 + 0x20] = storage[var8 + keccak256(memory[0x00:0x20])];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var5;\n                var temp8 = keccak256(memory[0x00:0x00 + temp7 + 0x40]);\n                storage[temp8] = storage[temp8] & ~(0x02 ** 0xa0 - 0x01);\n                storage[temp8 + 0x01] = 0x00;\n                var6 = 0x00;\n                var5 = temp8;\n                var7 = 0x111c;\n                var8 = var5 + 0x02;\n                var9 = var6;\n                func_13A0(var8, var9);\n                var4 = var4 + 0x01;\n            \n                if (var4 >= var3) { goto label_1127; }\n                else { goto label_10C3; }\n            }\n        }\n    }\n    \n    function m_dailyLimit() returns (var r0) { return storage[0x0105]; }\n    \n    function func_0F48(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0102;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var2 = var0;\n        var var3 = var2;\n    \n        if (!var1) { goto label_10A9; }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0103;\n        var2 = keccak256(memory[0x00:0x40]);\n    \n        if (storage[var2]) {\n        label_0FD3:\n            var3 = 0x02 ** var1;\n        \n            if (storage[var2 + 0x01] & var3 != 0x00) {\n            label_10A9:\n                return var0;\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = msg.sender;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0;\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + temp0 - temp1 + 0x40], [0xe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda]);\n            \n                if (storage[var2] > 0x01) {\n                    var temp2 = var2;\n                    storage[temp2] = storage[temp2] + ~0x00;\n                    var temp3 = temp2 + 0x01;\n                    storage[temp3] = var3 | storage[temp3];\n                    goto label_10A9;\n                } else {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0103;\n                    var var4 = 0x0104;\n                    var var5 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    storage[var5 + keccak256(memory[0x00:0x20])] = 0x00;\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0103;\n                    var temp4 = keccak256(memory[0x00:0x40]);\n                    storage[temp4] = 0x00;\n                    storage[temp4 + 0x01] = 0x00;\n                    storage[temp4 + 0x02] = 0x00;\n                    var0 = 0x01;\n                    goto label_10A9;\n                }\n            }\n        } else {\n            var temp5 = var2;\n            storage[temp5] = storage[0x00];\n            storage[temp5 + 0x01] = 0x00;\n            var4 = storage[0x0104];\n            var5 = 0x0fab;\n            var var6 = 0x0104;\n            var var7 = var4 + 0x01;\n            func_1467(var6, var7);\n            var temp6 = var4;\n            storage[var2 + 0x02] = temp6;\n            var5 = 0x0104;\n            var4 = arg0;\n            var6 = temp6;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            storage[var6 + keccak256(memory[0x00:0x20])] = var4;\n            goto label_0FD3;\n        }\n    }\n    \n    function func_1270(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = new(memory[temp0 + 0x20:temp0 + 0x20 + memory[temp0:temp0 + 0x20]]).value(arg0)();\n        var var0 = temp1;\n    \n        if (address(var0).code.length) { return var0; }\n    \n        main();\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_128A(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1295;\n        var var2 = msg.sender;\n        var1 = isOwner(var2);\n    \n        if (!var1) { return var0; }\n    \n        var1 = storage[0x0107];\n        var2 = 0x12a6;\n        var var3 = block.timestamp / 0x015180;\n        var2 = var3;\n        // Error: Could not resolve jump destination!\n    }\n    \n    function func_13A0(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        arg1 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        storage[temp0] = 0x00;\n    \n        if (0x1f >= arg1) { goto label_04F5; }\n    \n        memory[0x00:0x20] = arg0;\n        arg0 = 0x04f5;\n        arg1 = keccak256(memory[0x00:0x20]) + (arg1 + 0x1f) / 0x20;\n        var var0 = keccak256(memory[0x00:0x20]);\n        arg0 = func_14B3(arg1, var0);\n    \n    label_04F5:\n    }\n    \n    function func_1463(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_1467(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_048D:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x048d;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_14B3(var1, var2);\n            goto label_048D;\n        }\n    }\n    \n    function func_14B3(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x139d;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_1463(arg1, var0); }\n    \n    label_14C2:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_14C2; }\n    \n        arg0 = func_1463(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00E0:\n            var var0 = 0x0134;\n        \n            if (msg.value <= 0x00) {\n                func_0131();\n                stop();\n            } else {\n                func_00EE();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x0134;\n                var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0170;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = isOwner(var2);\n            \n            label_0170:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = !!var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n            } else if (var0 == 0x4123cb6b) {\n                // Dispatch table entry for m_numOwners()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_numOwners();\n            \n            label_0194:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x52375093) {\n                // Dispatch table entry for m_lastDay()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_lastDay();\n                goto label_0194;\n            } else if (var0 == 0x5c52c2f5) {\n                // Dispatch table entry for resetSpentToday()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                resetSpentToday();\n                stop();\n            } else if (var0 == 0x659010e7) {\n                // Dispatch table entry for m_spentToday()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_spentToday();\n                goto label_0194;\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x746c9171) {\n                // Dispatch table entry for m_required()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_required();\n                goto label_0194;\n            } else if (var0 == 0x797af627) {\n                // Dispatch table entry for confirm(bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0170;\n                var2 = msg.data[0x04:0x24];\n                var1 = confirm(var2);\n                goto label_0170;\n            } else if (var0 == 0xb20d30a9) {\n                // Dispatch table entry for setDailyLimit(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24];\n                setDailyLimit(var2);\n                stop();\n            } else if (var0 == 0xb61d27f6) {\n                // Dispatch table entry for execute(address,uint256,bytes)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var var3 = msg.data[0x24:0x44];\n                var temp4 = msg.data[0x44:0x64];\n                var var4 = temp4 + 0x24;\n                var var5 = msg.data[temp4 + 0x04:temp4 + 0x04 + 0x20];\n                var1 = execute(var2, var3, var4, var5);\n                goto label_0194;\n            } else if (var0 == 0xb75c7dc6) {\n                // Dispatch table entry for revoke(bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24];\n                revoke(var2);\n                stop();\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc2cf7326) {\n                // Dispatch table entry for hasConfirmed(bytes32,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0170;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var1 = hasConfirmed(var2, var3);\n                goto label_0170;\n            } else if (var0 == 0xc41a360a) {\n                // Dispatch table entry for getOwner(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0326;\n                var2 = msg.data[0x04:0x24];\n                var1 = getOwner(var2);\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                var temp6 = memory[0x40:0x60];\n                return memory[temp6:temp6 + temp5 - temp6 + 0x20];\n            } else if (var0 == 0xcbf0b0c0) {\n                // Dispatch table entry for kill(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                kill(var2);\n                stop();\n            } else if (var0 == 0xf00d4b5d) {\n                // Dispatch table entry for changeOwner(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var temp7 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp7 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp7;\n                changeOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xf1736d86) {\n                // Dispatch table entry for m_dailyLimit()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_dailyLimit();\n                goto label_0194;\n            } else { goto label_00E0; }\n        }\n    }\n    \n    function func_00EE() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x40], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c]);\n    }\n    \n    function func_0131() {}\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var1 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var2 = 0x03cf;\n        var var3 = var1;\n        var2 = func_0F48(var3);\n    \n        if (!var2) {\n        label_048D:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0102;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (!var0) { goto label_048D; }\n        \n            if (storage[0x00] > storage[0x01] - 0x01) { goto label_048D; }\n        \n            var2 = 0x00;\n            var3 = 0x02;\n            var var4 = var0;\n        \n            if (var4 >= 0x0100) { assert(); }\n        \n            storage[var4 + var3] = var2;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0102;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var2 = 0x0448;\n            var3 = storage[0x0104];\n            var4 = 0x00;\n        \n            if (var4 >= var3) {\n            label_1127:\n                var var5 = 0x05eb;\n                var var6 = storage[0x0104];\n                var var7 = 0x00;\n            \n                if (var7 >= var6) {\n                label_137F:\n                    var var8 = 0x05eb;\n                    var var9 = 0x0104;\n                    var var10 = 0x00;\n                    var temp3 = var9;\n                    var temp4 = storage[temp3];\n                    storage[temp3] = 0x00;\n                    memory[0x00:0x20] = temp3;\n                    var9 = 0x04f5;\n                    var var11 = keccak256(memory[0x00:0x20]);\n                    var10 = var11 + temp4;\n                    var9 = func_14B3(var10, var11);\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_130D:\n                    var8 = 0x0104;\n                    var9 = var7;\n                \n                    if (var9 >= storage[var8]) { assert(); }\n                \n                    memory[0x00:0x20] = var8;\n                \n                    if (!storage[var9 + keccak256(memory[0x00:0x20])]) {\n                    label_1376:\n                        var7 = var7 + 0x01;\n                    \n                        if (var7 >= var6) { goto label_137F; }\n                        else { goto label_130D; }\n                    } else {\n                        var8 = 0x0103;\n                        var9 = 0x00;\n                        var10 = 0x0104;\n                        var11 = var7;\n                    \n                        if (var11 >= storage[var10]) { assert(); }\n                    \n                        memory[0x00:0x20] = var10;\n                        var temp5 = var9;\n                        memory[temp5:temp5 + 0x20] = storage[var11 + keccak256(memory[0x00:0x20])];\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var8;\n                        var temp6 = keccak256(memory[0x00:0x00 + temp5 + 0x40]);\n                        storage[temp6] = 0x00;\n                        storage[temp6 + 0x01] = 0x00;\n                        storage[temp6 + 0x02] = 0x00;\n                        goto label_1376;\n                    }\n                }\n            } else {\n            label_10C3:\n                var5 = 0x0108;\n                var6 = 0x00;\n                var7 = 0x0104;\n                var8 = var4;\n            \n                if (var8 >= storage[var7]) { assert(); }\n            \n                memory[0x00:0x20] = var7;\n                var temp7 = var6;\n                memory[temp7:temp7 + 0x20] = storage[var8 + keccak256(memory[0x00:0x20])];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var5;\n                var temp8 = keccak256(memory[0x00:0x00 + temp7 + 0x40]);\n                storage[temp8] = storage[temp8] & ~(0x02 ** 0xa0 - 0x01);\n                storage[temp8 + 0x01] = 0x00;\n                var6 = 0x00;\n                var5 = temp8;\n                var7 = 0x111c;\n                var8 = var5 + 0x02;\n                var9 = var6;\n                func_13A0(var8, var9);\n                var4 = var4 + 0x01;\n            \n                if (var4 >= var3) { goto label_1127; }\n                else { goto label_10C3; }\n            }\n        }\n    }\n    \n    function isOwner(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0102;\n        return storage[keccak256(memory[0x00:0x40])] > 0x00;\n    }\n    \n    function m_numOwners() returns (var r0) { return storage[0x01]; }\n    \n    function m_lastDay() returns (var r0) { return storage[0x0107]; }\n    \n    function resetSpentToday() {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x04e9;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) { return; }\n    \n        storage[0x0106] = 0x00;\n    }\n    \n    function m_spentToday() returns (var r0) { return storage[0x0106]; }\n    \n    function addOwner(var arg0) {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x0528;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) {\n        label_05EB:\n            return;\n        } else {\n            var1 = 0x0536;\n            var2 = arg0;\n            var1 = isOwner(var2);\n        \n            if (var1) { goto label_05EB; }\n        \n            var1 = 0x0548;\n            var2 = storage[0x0104];\n            var var3 = 0x00;\n        \n            if (var3 >= var2) {\n            label_1127:\n                var var4 = 0x05eb;\n                var var5 = storage[0x0104];\n                var var6 = 0x00;\n            \n                if (var6 >= var5) {\n                label_137F:\n                    var var7 = 0x05eb;\n                    var var8 = 0x0104;\n                    var var9 = 0x00;\n                    var temp3 = var8;\n                    var temp4 = storage[temp3];\n                    storage[temp3] = 0x00;\n                    memory[0x00:0x20] = temp3;\n                    var8 = 0x04f5;\n                    var var10 = keccak256(memory[0x00:0x20]);\n                    var9 = var10 + temp4;\n                    var8 = func_14B3(var9, var10);\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_130D:\n                    var7 = 0x0104;\n                    var8 = var6;\n                \n                    if (var8 >= storage[var7]) { assert(); }\n                \n                    memory[0x00:0x20] = var7;\n                \n                    if (!storage[var8 + keccak256(memory[0x00:0x20])]) {\n                    label_1376:\n                        var6 = var6 + 0x01;\n                    \n                        if (var6 >= var5) { goto label_137F; }\n                        else { goto label_130D; }\n                    } else {\n                        var7 = 0x0103;\n                        var8 = 0x00;\n                        var9 = 0x0104;\n                        var10 = var6;\n                    \n                        if (var10 >= storage[var9]) { assert(); }\n                    \n                        memory[0x00:0x20] = var9;\n                        var temp5 = var8;\n                        memory[temp5:temp5 + 0x20] = storage[var10 + keccak256(memory[0x00:0x20])];\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var7;\n                        var temp6 = keccak256(memory[0x00:0x00 + temp5 + 0x40]);\n                        storage[temp6] = 0x00;\n                        storage[temp6 + 0x01] = 0x00;\n                        storage[temp6 + 0x02] = 0x00;\n                        goto label_1376;\n                    }\n                }\n            } else {\n            label_10C3:\n                var4 = 0x0108;\n                var5 = 0x00;\n                var6 = 0x0104;\n                var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp7 = var5;\n                memory[temp7:temp7 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var4;\n                var temp8 = keccak256(memory[0x00:0x00 + temp7 + 0x40]);\n                storage[temp8] = storage[temp8] & ~(0x02 ** 0xa0 - 0x01);\n                storage[temp8 + 0x01] = 0x00;\n                var5 = 0x00;\n                var4 = temp8;\n                var6 = 0x111c;\n                var7 = var4 + 0x02;\n                var8 = var5;\n                func_13A0(var7, var8);\n                var3 = var3 + 0x01;\n            \n                if (var3 >= var2) { goto label_1127; }\n                else { goto label_10C3; }\n            }\n        }\n    }\n    \n    function m_required() returns (var r0) { return storage[0x00]; }\n    \n    function confirm(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = arg0;\n        var var3 = 0x0605;\n        var var4 = var2;\n        var3 = func_0F48(var4);\n    \n        if (!var3) {\n        label_0940:\n            return var0;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0108;\n            var3 = !!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01);\n        \n            if (!var3) {\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0108;\n                var3 = !!storage[keccak256(memory[0x00:0x40]) + 0x01];\n            \n                if (var3) { goto label_066E; }\n                else { goto label_0647; }\n            } else if (var3) {\n            label_066E:\n            \n                if (!var3) { goto label_0940; }\n            \n            label_0674:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0108;\n            \n                if (storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01) {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0108;\n                    var temp0 = keccak256(memory[0x00:0x40]);\n                    var temp1 = storage[temp0 + 0x02];\n                    var3 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n                    var4 = storage[temp0 + 0x01];\n                    var var5 = temp0 + 0x02;\n                    var var6 = memory[0x40:0x60];\n                    var var7 = var6;\n                    var var8 = var5;\n                    var var9 = (!(temp1 & 0x01) * 0x0100 + ~0x00 & temp1) / 0x02;\n                \n                    if (!var9) {\n                    label_07D8:\n                        var temp2 = memory[0x40:0x60];\n                        var temp3;\n                        temp3, memory[temp2:temp2 + 0x00] = address(var3).call.gas(msg.gas - 0x8502).value(var4)(memory[temp2:temp2 + var7 - temp2]);\n                    \n                        if (!temp3) { revert(memory[0x00:0x00]); }\n                    \n                    label_07FE:\n                        var temp4 = arg0;\n                        memory[0x00:0x20] = temp4;\n                        memory[0x20:0x40] = 0x0108;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        var temp6 = memory[0x40:0x60];\n                        var temp7 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp6:temp6 + 0x20] = msg.sender & temp7;\n                        var4 = msg.sender;\n                        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = temp4;\n                        memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = storage[temp5 + 0x01];\n                        memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = temp7 & storage[temp5];\n                        memory[temp6 + 0xa0:temp6 + 0xa0 + 0x20] = var1 & temp7;\n                        memory[temp6 + 0x80:temp6 + 0x80 + 0x20] = 0xc0;\n                        var temp8 = storage[temp5 + 0x02];\n                        var temp9 = (temp8 & !(temp8 & 0x01) * 0x0100 + ~0x00) / 0x02;\n                        memory[temp6 + 0xc0:temp6 + 0xc0 + 0x20] = temp9;\n                        var3 = 0xe3a3a4111a84df27d76b68dc721e65c7711605ea5eee4afd3a9c58195217365c;\n                        var5 = temp4;\n                        var6 = storage[temp5 + 0x01];\n                        var7 = temp7 & storage[temp5];\n                        var8 = temp5 + 0x02;\n                        var9 = var1;\n                        var var10 = temp6;\n                        var var11 = temp6 + 0x80;\n                        var var12 = var10 + 0xe0;\n                        var var13 = var8;\n                        var var14 = temp9;\n                    \n                        if (!var14) {\n                        label_08F4:\n                            var temp10 = memory[0x40:0x60];\n                            log(memory[temp10:temp10 + var12 - temp10], [stack[-12]]);\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x0108;\n                            var temp11 = keccak256(memory[0x00:0x40]);\n                            storage[temp11] = storage[temp11] & ~(0x02 ** 0xa0 - 0x01);\n                            storage[temp11 + 0x01] = 0x00;\n                            var4 = 0x00;\n                            var3 = temp11;\n                            var5 = 0x0939;\n                            var6 = var3 + 0x02;\n                            var7 = var4;\n                            func_13A0(var6, var7);\n                            var0 = 0x01;\n                            goto label_0940;\n                        } else if (0x1f < var14) {\n                            var temp12 = var12;\n                            var temp13 = temp12 + var14;\n                            var12 = temp13;\n                            memory[0x00:0x20] = var13;\n                            var temp14 = keccak256(memory[0x00:0x20]);\n                            memory[temp12:temp12 + 0x20] = storage[temp14];\n                            var13 = temp14 + 0x01;\n                            var14 = temp12 + 0x20;\n                        \n                            if (var12 <= var14) { goto label_08EB; }\n                        \n                        label_08D7:\n                            var temp15 = var13;\n                            var temp16 = var14;\n                            memory[temp16:temp16 + 0x20] = storage[temp15];\n                            var13 = temp15 + 0x01;\n                            var14 = temp16 + 0x20;\n                        \n                            if (var12 > var14) { goto label_08D7; }\n                        \n                        label_08EB:\n                            var temp17 = var12;\n                            var temp18 = temp17 + (var14 - temp17 & 0x1f);\n                            var14 = temp17;\n                            var12 = temp18;\n                            goto label_08F4;\n                        } else {\n                            var temp19 = var12;\n                            memory[temp19:temp19 + 0x20] = storage[var13] / 0x0100 * 0x0100;\n                            var12 = temp19 + 0x20;\n                            var14 = var14;\n                            goto label_08F4;\n                        }\n                    } else if (0x1f < var9) {\n                        var temp20 = var7;\n                        var temp21 = temp20 + var9;\n                        var7 = temp21;\n                        memory[0x00:0x20] = var8;\n                        var temp22 = keccak256(memory[0x00:0x20]);\n                        memory[temp20:temp20 + 0x20] = storage[temp22];\n                        var8 = temp22 + 0x01;\n                        var9 = temp20 + 0x20;\n                    \n                        if (var7 <= var9) { goto label_07CF; }\n                    \n                    label_07BB:\n                        var temp23 = var8;\n                        var temp24 = var9;\n                        memory[temp24:temp24 + 0x20] = storage[temp23];\n                        var8 = temp23 + 0x01;\n                        var9 = temp24 + 0x20;\n                    \n                        if (var7 > var9) { goto label_07BB; }\n                    \n                    label_07CF:\n                        var temp25 = var7;\n                        var temp26 = temp25 + (var9 - temp25 & 0x1f);\n                        var9 = temp25;\n                        var7 = temp26;\n                        goto label_07D8;\n                    } else {\n                        var temp27 = var7;\n                        memory[temp27:temp27 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n                        var7 = temp27 + 0x20;\n                        var9 = var9;\n                        goto label_07D8;\n                    }\n                } else {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0108;\n                    var temp28 = keccak256(memory[0x00:0x40]);\n                    var temp29 = storage[temp28 + 0x02];\n                    var temp30 = memory[0x40:0x60];\n                    var temp31 = (!(temp29 & 0x01) * 0x0100 + ~0x00 & temp29) / 0x02;\n                    memory[0x40:0x60] = temp30 + (temp31 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp30:temp30 + 0x20] = temp31;\n                    var3 = 0x073f;\n                    var7 = temp31;\n                    var4 = storage[temp28 + 0x01];\n                    var5 = temp30;\n                    var6 = temp28 + 0x02;\n                    var8 = var5 + 0x20;\n                    var9 = var6;\n                    var10 = var7;\n                \n                    if (!var10) {\n                        var3 = func_0735(var4, var5, var6, var7, var8, var9, var10);\n                        var1 = var3;\n                        goto label_07FE;\n                    } else if (0x1f < var10) {\n                        var temp32 = var8;\n                        var temp33 = temp32 + var10;\n                        var8 = temp33;\n                        memory[0x00:0x20] = var9;\n                        var temp34 = keccak256(memory[0x00:0x20]);\n                        memory[temp32:temp32 + 0x20] = storage[temp34];\n                        var9 = temp34 + 0x01;\n                        var10 = temp32 + 0x20;\n                    \n                        if (var8 <= var10) { goto label_072C; }\n                    \n                    label_0718:\n                        var temp35 = var9;\n                        var temp36 = var10;\n                        memory[temp36:temp36 + 0x20] = storage[temp35];\n                        var9 = temp35 + 0x01;\n                        var10 = temp36 + 0x20;\n                    \n                        if (var8 > var10) { goto label_0718; }\n                    \n                    label_072C:\n                        var temp37 = var8;\n                        var temp38 = temp37 + (var10 - temp37 & 0x1f);\n                        var10 = temp37;\n                        var8 = temp38;\n                        var3 = func_0735(var4, var5, var6, var7, var8, var9, var10);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp39 = var8;\n                        memory[temp39:temp39 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                        var10 = var10;\n                        var8 = temp39 + 0x20;\n                        var3 = func_0735(var4, var5, var6, var7, var8, var9, var10);\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            } else {\n            label_0647:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0108;\n                var temp40 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n            \n                if (!((!(temp40 & 0x01) * 0x0100 + ~0x00 & temp40) / 0x02)) { goto label_0940; }\n                else { goto label_0674; }\n            }\n        }\n    }\n    \n    function func_0735(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) returns (var r0) {\n        r0 = func_1270(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setDailyLimit(var arg0) {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x0971;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) { return; }\n    \n        storage[0x0105] = arg0;\n    }\n    \n    function execute(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x0990;\n        var var3 = msg.sender;\n        var2 = isOwner(var3);\n    \n        if (!var2) {\n        label_0C59:\n            return var0;\n        } else {\n            var2 = !arg3;\n        \n            if (!var2) {\n            label_09A7:\n            \n                if (var2) {\n                    if (!var2) {\n                    label_0AF8:\n                        var temp0 = msg.data.length;\n                        var temp1 = memory[0x40:0x60];\n                        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n                        var temp2 = temp0 + temp1;\n                        memory[temp2:temp2 + 0x20] = block.number;\n                        var temp3 = memory[0x40:0x60];\n                        var temp4 = keccak256(memory[temp3:temp3 + temp2 - temp3 + 0x20]);\n                        memory[0x00:0x20] = temp4;\n                        memory[0x20:0x40] = 0x0108;\n                        var0 = temp4;\n                        var2 = !(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01);\n                    \n                        if (var2) {\n                            memory[0x00:0x20] = var0;\n                            memory[0x20:0x40] = 0x0108;\n                            var2 = !storage[keccak256(memory[0x00:0x40]) + 0x01];\n                        \n                            if (!var2) { goto label_0B84; }\n                            else { goto label_0B5E; }\n                        } else if (!var2) {\n                        label_0B84:\n                        \n                            if (!var2) {\n                            label_0BC8:\n                                var2 = 0x0bd1;\n                                var3 = var0;\n                                var2 = confirm(var3);\n                            \n                                if (var2) { goto label_0C59; }\n                            \n                                var temp5 = memory[0x40:0x60];\n                                memory[temp5:temp5 + 0x20] = var0;\n                                var temp6 = 0x02 ** 0xa0 - 0x01;\n                                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = msg.sender & temp6;\n                                memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = arg1;\n                                memory[temp5 + 0x60:temp5 + 0x60 + 0x20] = arg0 & temp6;\n                                memory[temp5 + 0x80:temp5 + 0x80 + 0x20] = 0xa0;\n                                var temp7 = arg3;\n                                memory[temp5 + 0xa0:temp5 + 0xa0 + 0x20] = temp7;\n                                var temp8 = temp5 + 0xc0;\n                                memory[temp8:temp8 + temp7] = msg.data[arg2:arg2 + temp7];\n                                var temp9 = memory[0x40:0x60];\n                                log(memory[temp9:temp9 + (temp8 + temp7) - temp9], [0x1733cbb53659d713b79580f79f3f9ff215f78a7c7aa45890f3b89fc5cddfbf32]);\n                                goto label_0C59;\n                            } else {\n                            label_0B8A:\n                                memory[0x00:0x20] = var0;\n                                memory[0x20:0x40] = 0x0108;\n                                var temp10 = keccak256(memory[0x00:0x40]);\n                                storage[temp10] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[temp10] & ~(0x02 ** 0xa0 - 0x01));\n                                storage[temp10 + 0x01] = arg1;\n                                var2 = 0x0bc6;\n                                var3 = temp10 + 0x02;\n                                var var4 = arg2;\n                                var var5 = arg3;\n                                var temp11 = var3;\n                                var temp12 = storage[temp11];\n                                memory[0x00:0x20] = temp11;\n                                var var6 = keccak256(memory[0x00:0x20]);\n                                var var7 = var4;\n                                var4 = var6 + ((!(temp12 & 0x01) * 0x0100 - 0x01 & temp12) / 0x02 + 0x1f) / 0x20;\n                            \n                                if (0x1f < var5) {\n                                    var temp13 = var5;\n                                    storage[var3] = temp13 + temp13 + 0x01;\n                                \n                                    if (!temp13) {\n                                    label_1456:\n                                        var temp14 = var4;\n                                        var4 = 0x1463;\n                                        var5 = temp14;\n                                        var4 = func_14B3(var5, var6);\n                                        var2 = func_1463(var3, var4);\n                                        // Error: Could not resolve method call return address!\n                                    } else {\n                                        var temp15 = var5;\n                                        var temp16 = var7;\n                                        var5 = temp16;\n                                        var7 = var5 + temp15;\n                                    \n                                        if (var7 <= var5) { goto label_1456; }\n                                    \n                                    label_1444:\n                                        var temp17 = var5;\n                                        var temp18 = var6;\n                                        storage[temp18] = msg.data[temp17:temp17 + 0x20];\n                                        var5 = temp17 + 0x20;\n                                        var6 = temp18 + 0x01;\n                                        var7 = var7;\n                                    \n                                        if (var7 <= var5) { goto label_1456; }\n                                        else { goto label_1444; }\n                                    }\n                                } else {\n                                    var temp19 = var5;\n                                    storage[var3] = (msg.data[var7:var7 + 0x20] & ~0xff) | temp19 + temp19;\n                                    goto label_1456;\n                                }\n                            }\n                        } else {\n                        label_0B5E:\n                            memory[0x00:0x20] = var0;\n                            memory[0x20:0x40] = 0x0108;\n                            var temp20 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                        \n                            if ((!(temp20 & 0x01) * 0x0100 + ~0x00 & temp20) / 0x02) { goto label_0BC8; }\n                            else { goto label_0B8A; }\n                        }\n                    } else {\n                    label_09BB:\n                    \n                        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n                            var temp21 = arg3;\n                            var temp22 = memory[0x40:0x60];\n                            memory[temp22:temp22 + temp21] = msg.data[arg2:arg2 + temp21];\n                            var temp23 = memory[0x40:0x60];\n                            var temp24;\n                            temp24, memory[temp23:temp23 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(msg.gas - 0x8502).value(arg1)(memory[temp23:temp23 + (temp22 + temp21) - temp23]);\n                        \n                            if (!temp24) { revert(memory[0x00:0x00]); }\n                        \n                        label_0A4C:\n                            var temp25 = arg3;\n                            var temp26 = memory[0x40:0x60];\n                            memory[temp26:temp26 + 0x20] = msg.sender;\n                            var temp27 = temp26 + 0x20;\n                            memory[temp27:temp27 + 0x20] = arg1;\n                            var temp28 = temp27 + 0x20;\n                            memory[temp28:temp28 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                            var temp29 = temp28 + 0x20;\n                            var temp30 = temp29 + 0x20;\n                            memory[temp30:temp30 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                            var temp31 = temp30 + 0x20;\n                            memory[temp29:temp29 + 0x20] = temp31 - temp26;\n                            memory[temp31:temp31 + 0x20] = temp25;\n                            var temp32 = temp31 + 0x20;\n                            memory[temp32:temp32 + temp25] = msg.data[arg2:arg2 + temp25];\n                            var temp33 = memory[0x40:0x60];\n                            log(memory[temp33:temp33 + (temp32 + temp25) - temp33], [0x9738cd1a8777c86b011f7b01d87d484217dc6ab5154a9d41eda5d14af8caf292]);\n                            goto label_0C59;\n                        } else {\n                            var2 = 0x0a04;\n                            var3 = arg1;\n                            var temp34 = arg3;\n                            var temp35 = memory[0x40:0x60];\n                            memory[0x40:0x60] = temp35 + (temp34 + 0x1f) / 0x20 * 0x20 + 0x20;\n                            var4 = temp35;\n                            memory[var4:var4 + 0x20] = temp34;\n                            memory[var4 + 0x20:var4 + 0x20 + temp34] = msg.data[arg2:arg2 + temp34];\n                            var2 = func_1270(var3, var4);\n                            var1 = var2;\n                            goto label_0A4C;\n                        }\n                    }\n                } else if (storage[0x00] != 0x01) { goto label_0AF8; }\n                else { goto label_09BB; }\n            } else {\n                var2 = 0x09a7;\n                var3 = arg1;\n                var2 = func_128A(var3);\n                goto label_09A7;\n            }\n        }\n    }\n    \n    function revoke(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0102;\n        var var1 = 0x00;\n        var var0 = storage[keccak256(memory[var1:var1 + 0x40])];\n        var var2 = var1;\n    \n        if (!var0) { goto label_0D0A; }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0103;\n        var2 = keccak256(memory[0x00:0x40]);\n        var1 = 0x02 ** var0;\n    \n        if (var1 & storage[var2 + 0x01] <= 0x00) {\n        label_0D0A:\n            return;\n        } else {\n            var temp0 = var2;\n            storage[temp0] = storage[temp0] + 0x01;\n            var temp1 = temp0 + 0x01;\n            storage[temp1] = storage[temp1] - var1;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = msg.sender;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = arg0;\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + temp2 - temp3 + 0x40], [0xc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b]);\n            goto label_0D0A;\n        }\n    }\n    \n    function changeRequirement(var arg0) {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x0d38;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) {\n        label_05EB:\n            return;\n        } else if (arg0 <= storage[0x01]) {\n            storage[0x00] = arg0;\n            var1 = 0x0d59;\n            var2 = storage[0x0104];\n            var var3 = 0x00;\n        \n            if (var3 >= var2) {\n            label_1127:\n                var var4 = 0x05eb;\n                var var5 = storage[0x0104];\n                var var6 = 0x00;\n            \n                if (var6 >= var5) {\n                label_137F:\n                    var var7 = 0x05eb;\n                    var var8 = 0x0104;\n                    var var9 = 0x00;\n                    var temp3 = var8;\n                    var temp4 = storage[temp3];\n                    storage[temp3] = 0x00;\n                    memory[0x00:0x20] = temp3;\n                    var8 = 0x04f5;\n                    var var10 = keccak256(memory[0x00:0x20]);\n                    var9 = var10 + temp4;\n                    var8 = func_14B3(var9, var10);\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_130D:\n                    var7 = 0x0104;\n                    var8 = var6;\n                \n                    if (var8 >= storage[var7]) { assert(); }\n                \n                    memory[0x00:0x20] = var7;\n                \n                    if (!storage[var8 + keccak256(memory[0x00:0x20])]) {\n                    label_1376:\n                        var6 = var6 + 0x01;\n                    \n                        if (var6 >= var5) { goto label_137F; }\n                        else { goto label_130D; }\n                    } else {\n                        var7 = 0x0103;\n                        var8 = 0x00;\n                        var9 = 0x0104;\n                        var10 = var6;\n                    \n                        if (var10 >= storage[var9]) { assert(); }\n                    \n                        memory[0x00:0x20] = var9;\n                        var temp5 = var8;\n                        memory[temp5:temp5 + 0x20] = storage[var10 + keccak256(memory[0x00:0x20])];\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var7;\n                        var temp6 = keccak256(memory[0x00:0x00 + temp5 + 0x40]);\n                        storage[temp6] = 0x00;\n                        storage[temp6 + 0x01] = 0x00;\n                        storage[temp6 + 0x02] = 0x00;\n                        goto label_1376;\n                    }\n                }\n            } else {\n            label_10C3:\n                var4 = 0x0108;\n                var5 = 0x00;\n                var6 = 0x0104;\n                var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp7 = var5;\n                memory[temp7:temp7 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var4;\n                var temp8 = keccak256(memory[0x00:0x00 + temp7 + 0x40]);\n                storage[temp8] = storage[temp8] & ~(0x02 ** 0xa0 - 0x01);\n                storage[temp8 + 0x01] = 0x00;\n                var5 = 0x00;\n                var4 = temp8;\n                var6 = 0x111c;\n                var7 = var4 + 0x02;\n                var8 = var5;\n                func_13A0(var7, var8);\n                var3 = var3 + 0x01;\n            \n                if (var3 >= var2) { goto label_1127; }\n                else { goto label_10C3; }\n            }\n        } else { goto label_05EB; }\n    }\n    \n    function hasConfirmed(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x0103;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        var var1 = temp0;\n        memory[0x20:0x40] = 0x0102;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var3 = var0;\n    \n        if (var2) { return storage[var1 + 0x01] & 0x02 ** var2 != 0x00; }\n        else { return 0x00; }\n    }\n    \n    function getOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x02;\n        var var2 = arg0 + 0x01;\n    \n        if (var2 < 0x0100) { return storage[var2 + var1]; }\n        else { assert(); }\n    }\n    \n    function kill(var arg0) {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x0e30;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) { return; }\n        else { selfdestruct(arg0 & 0x02 ** 0xa0 - 0x01); }\n    }\n    \n    function changeOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var1 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var2 = 0x0e70;\n        var var3 = var1;\n        var2 = func_0F48(var3);\n    \n        if (!var2) {\n        label_0D0A:\n            return;\n        } else {\n            var2 = 0x0e7e;\n            var3 = arg1;\n            var2 = isOwner(var3);\n        \n            if (var2) { goto label_0D0A; }\n        \n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0102;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (!var0) { goto label_0D0A; }\n        \n            var2 = 0x0eb8;\n            var3 = storage[0x0104];\n            var var4 = 0x00;\n        \n            if (var4 >= var3) {\n            label_1127:\n                var var5 = 0x05eb;\n                var var6 = storage[0x0104];\n                var var7 = 0x00;\n            \n                if (var7 >= var6) {\n                label_137F:\n                    var var8 = 0x05eb;\n                    var var9 = 0x0104;\n                    var var10 = 0x00;\n                    var temp3 = var9;\n                    var temp4 = storage[temp3];\n                    storage[temp3] = 0x00;\n                    memory[0x00:0x20] = temp3;\n                    var9 = 0x04f5;\n                    var var11 = keccak256(memory[0x00:0x20]);\n                    var10 = var11 + temp4;\n                    var9 = func_14B3(var10, var11);\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_130D:\n                    var8 = 0x0104;\n                    var9 = var7;\n                \n                    if (var9 >= storage[var8]) { assert(); }\n                \n                    memory[0x00:0x20] = var8;\n                \n                    if (!storage[var9 + keccak256(memory[0x00:0x20])]) {\n                    label_1376:\n                        var7 = var7 + 0x01;\n                    \n                        if (var7 >= var6) { goto label_137F; }\n                        else { goto label_130D; }\n                    } else {\n                        var8 = 0x0103;\n                        var9 = 0x00;\n                        var10 = 0x0104;\n                        var11 = var7;\n                    \n                        if (var11 >= storage[var10]) { assert(); }\n                    \n                        memory[0x00:0x20] = var10;\n                        var temp5 = var9;\n                        memory[temp5:temp5 + 0x20] = storage[var11 + keccak256(memory[0x00:0x20])];\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var8;\n                        var temp6 = keccak256(memory[0x00:0x00 + temp5 + 0x40]);\n                        storage[temp6] = 0x00;\n                        storage[temp6 + 0x01] = 0x00;\n                        storage[temp6 + 0x02] = 0x00;\n                        goto label_1376;\n                    }\n                }\n            } else {\n            label_10C3:\n                var5 = 0x0108;\n                var6 = 0x00;\n                var7 = 0x0104;\n                var8 = var4;\n            \n                if (var8 >= storage[var7]) { assert(); }\n            \n                memory[0x00:0x20] = var7;\n                var temp7 = var6;\n                memory[temp7:temp7 + 0x20] = storage[var8 + keccak256(memory[0x00:0x20])];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var5;\n                var temp8 = keccak256(memory[0x00:0x00 + temp7 + 0x40]);\n                storage[temp8] = storage[temp8] & ~(0x02 ** 0xa0 - 0x01);\n                storage[temp8 + 0x01] = 0x00;\n                var6 = 0x00;\n                var5 = temp8;\n                var7 = 0x111c;\n                var8 = var5 + 0x02;\n                var9 = var6;\n                func_13A0(var8, var9);\n                var4 = var4 + 0x01;\n            \n                if (var4 >= var3) { goto label_1127; }\n                else { goto label_10C3; }\n            }\n        }\n    }\n    \n    function m_dailyLimit() returns (var r0) { return storage[0x0105]; }\n    \n    function func_0F48(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0102;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var2 = var0;\n        var var3 = var2;\n    \n        if (!var1) { goto label_10A9; }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0103;\n        var2 = keccak256(memory[0x00:0x40]);\n    \n        if (storage[var2]) {\n        label_0FD3:\n            var3 = 0x02 ** var1;\n        \n            if (storage[var2 + 0x01] & var3 != 0x00) {\n            label_10A9:\n                return var0;\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = msg.sender;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0;\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + temp0 - temp1 + 0x40], [0xe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda]);\n            \n                if (storage[var2] > 0x01) {\n                    var temp2 = var2;\n                    storage[temp2] = storage[temp2] + ~0x00;\n                    var temp3 = temp2 + 0x01;\n                    storage[temp3] = var3 | storage[temp3];\n                    goto label_10A9;\n                } else {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0103;\n                    var var4 = 0x0104;\n                    var var5 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    storage[var5 + keccak256(memory[0x00:0x20])] = 0x00;\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0103;\n                    var temp4 = keccak256(memory[0x00:0x40]);\n                    storage[temp4] = 0x00;\n                    storage[temp4 + 0x01] = 0x00;\n                    storage[temp4 + 0x02] = 0x00;\n                    var0 = 0x01;\n                    goto label_10A9;\n                }\n            }\n        } else {\n            var temp5 = var2;\n            storage[temp5] = storage[0x00];\n            storage[temp5 + 0x01] = 0x00;\n            var4 = storage[0x0104];\n            var5 = 0x0fab;\n            var var6 = 0x0104;\n            var var7 = var4 + 0x01;\n            func_1467(var6, var7);\n            var temp6 = var4;\n            storage[var2 + 0x02] = temp6;\n            var5 = 0x0104;\n            var4 = arg0;\n            var6 = temp6;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            storage[var6 + keccak256(memory[0x00:0x20])] = var4;\n            goto label_0FD3;\n        }\n    }\n    \n    function func_1270(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = new(memory[temp0 + 0x20:temp0 + 0x20 + memory[temp0:temp0 + 0x20]]).value(arg0)();\n        var var0 = temp1;\n    \n        if (address(var0).code.length) { return var0; }\n    \n        main();\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_128A(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1295;\n        var var2 = msg.sender;\n        var1 = isOwner(var2);\n    \n        if (!var1) { return var0; }\n    \n        var1 = storage[0x0107];\n        var2 = 0x12a6;\n        var var3 = block.timestamp / 0x015180;\n        var2 = var3;\n        // Error: Could not resolve jump destination!\n    }\n    \n    function func_13A0(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        arg1 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        storage[temp0] = 0x00;\n    \n        if (0x1f >= arg1) { goto label_04F5; }\n    \n        memory[0x00:0x20] = arg0;\n        arg0 = 0x04f5;\n        arg1 = keccak256(memory[0x00:0x20]) + (arg1 + 0x1f) / 0x20;\n        var var0 = keccak256(memory[0x00:0x20]);\n        arg0 = func_14B3(arg1, var0);\n    \n    label_04F5:\n    }\n    \n    function func_1463(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_1467(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_048D:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x048d;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_14B3(var1, var2);\n            goto label_048D;\n        }\n    }\n    \n    function func_14B3(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x139d;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_1463(arg1, var0); }\n    \n    label_14C2:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_14C2; }\n    \n        arg0 = func_1463(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_00E0:\n            var var0 = 0x0134;\n        \n            if (msg.value <= 0x00) {\n                func_0131();\n                stop();\n            } else {\n                func_00EE();\n                stop();\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x173825d9) {\n                // Dispatch table entry for removeOwner(address)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x0134;\n                var var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                removeOwner(var2);\n                stop();\n            } else if (var0 == 0x2f54bf6e) {\n                // Dispatch table entry for isOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0170;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var1 = isOwner(var2);\n            \n            label_0170:\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = !!var1;\n                var temp1 = memory[0x40:0x60];\n                return memory[temp1:temp1 + temp0 - temp1 + 0x20];\n            } else if (var0 == 0x4123cb6b) {\n                // Dispatch table entry for m_numOwners()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_numOwners();\n            \n            label_0194:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x52375093) {\n                // Dispatch table entry for m_lastDay()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_lastDay();\n                goto label_0194;\n            } else if (var0 == 0x5c52c2f5) {\n                // Dispatch table entry for resetSpentToday()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                resetSpentToday();\n                stop();\n            } else if (var0 == 0x659010e7) {\n                // Dispatch table entry for m_spentToday()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_spentToday();\n                goto label_0194;\n            } else if (var0 == 0x7065cb48) {\n                // Dispatch table entry for addOwner(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                addOwner(var2);\n                stop();\n            } else if (var0 == 0x746c9171) {\n                // Dispatch table entry for m_required()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_required();\n                goto label_0194;\n            } else if (var0 == 0x797af627) {\n                // Dispatch table entry for confirm(bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0170;\n                var2 = msg.data[0x04:0x24];\n                var1 = confirm(var2);\n                goto label_0170;\n            } else if (var0 == 0xb20d30a9) {\n                // Dispatch table entry for setDailyLimit(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24];\n                setDailyLimit(var2);\n                stop();\n            } else if (var0 == 0xb61d27f6) {\n                // Dispatch table entry for execute(address,uint256,bytes)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var var3 = msg.data[0x24:0x44];\n                var temp4 = msg.data[0x44:0x64];\n                var var4 = temp4 + 0x24;\n                var var5 = msg.data[temp4 + 0x04:temp4 + 0x04 + 0x20];\n                var1 = execute(var2, var3, var4, var5);\n                goto label_0194;\n            } else if (var0 == 0xb75c7dc6) {\n                // Dispatch table entry for revoke(bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24];\n                revoke(var2);\n                stop();\n            } else if (var0 == 0xba51a6df) {\n                // Dispatch table entry for changeRequirement(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24];\n                changeRequirement(var2);\n                stop();\n            } else if (var0 == 0xc2cf7326) {\n                // Dispatch table entry for hasConfirmed(bytes32,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0170;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0xa0 - 0x01;\n                var1 = hasConfirmed(var2, var3);\n                goto label_0170;\n            } else if (var0 == 0xc41a360a) {\n                // Dispatch table entry for getOwner(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0326;\n                var2 = msg.data[0x04:0x24];\n                var1 = getOwner(var2);\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n                var temp6 = memory[0x40:0x60];\n                return memory[temp6:temp6 + temp5 - temp6 + 0x20];\n            } else if (var0 == 0xcbf0b0c0) {\n                // Dispatch table entry for kill(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                kill(var2);\n                stop();\n            } else if (var0 == 0xf00d4b5d) {\n                // Dispatch table entry for changeOwner(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0134;\n                var temp7 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp7 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp7;\n                changeOwner(var2, var3);\n                stop();\n            } else if (var0 == 0xf1736d86) {\n                // Dispatch table entry for m_dailyLimit()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0194;\n                var2 = m_dailyLimit();\n                goto label_0194;\n            } else { goto label_00E0; }\n        }\n    }\n    \n    function func_00EE() {\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = msg.sender;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = msg.value;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x40], [0xe1fffcc4923d04b559f4d29a8bfc6cda04eb5b0d3c460751c2402c5c5cc9109c]);\n    }\n    \n    function func_0131() {}\n    \n    function removeOwner(var arg0) {\n        var var0 = 0x00;\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var1 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var2 = 0x03cf;\n        var var3 = var1;\n        var2 = func_0F48(var3);\n    \n        if (!var2) {\n        label_048D:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0102;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (!var0) { goto label_048D; }\n        \n            if (storage[0x00] > storage[0x01] - 0x01) { goto label_048D; }\n        \n            var2 = 0x00;\n            var3 = 0x02;\n            var var4 = var0;\n        \n            if (var4 >= 0x0100) { assert(); }\n        \n            storage[var4 + var3] = var2;\n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0102;\n            storage[keccak256(memory[0x00:0x40])] = 0x00;\n            var2 = 0x0448;\n            var3 = storage[0x0104];\n            var4 = 0x00;\n        \n            if (var4 >= var3) {\n            label_1127:\n                var var5 = 0x05eb;\n                var var6 = storage[0x0104];\n                var var7 = 0x00;\n            \n                if (var7 >= var6) {\n                label_137F:\n                    var var8 = 0x05eb;\n                    var var9 = 0x0104;\n                    var var10 = 0x00;\n                    var temp3 = var9;\n                    var temp4 = storage[temp3];\n                    storage[temp3] = 0x00;\n                    memory[0x00:0x20] = temp3;\n                    var9 = 0x04f5;\n                    var var11 = keccak256(memory[0x00:0x20]);\n                    var10 = var11 + temp4;\n                    var9 = func_14B3(var10, var11);\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_130D:\n                    var8 = 0x0104;\n                    var9 = var7;\n                \n                    if (var9 >= storage[var8]) { assert(); }\n                \n                    memory[0x00:0x20] = var8;\n                \n                    if (!storage[var9 + keccak256(memory[0x00:0x20])]) {\n                    label_1376:\n                        var7 = var7 + 0x01;\n                    \n                        if (var7 >= var6) { goto label_137F; }\n                        else { goto label_130D; }\n                    } else {\n                        var8 = 0x0103;\n                        var9 = 0x00;\n                        var10 = 0x0104;\n                        var11 = var7;\n                    \n                        if (var11 >= storage[var10]) { assert(); }\n                    \n                        memory[0x00:0x20] = var10;\n                        var temp5 = var9;\n                        memory[temp5:temp5 + 0x20] = storage[var11 + keccak256(memory[0x00:0x20])];\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var8;\n                        var temp6 = keccak256(memory[0x00:0x00 + temp5 + 0x40]);\n                        storage[temp6] = 0x00;\n                        storage[temp6 + 0x01] = 0x00;\n                        storage[temp6 + 0x02] = 0x00;\n                        goto label_1376;\n                    }\n                }\n            } else {\n            label_10C3:\n                var5 = 0x0108;\n                var6 = 0x00;\n                var7 = 0x0104;\n                var8 = var4;\n            \n                if (var8 >= storage[var7]) { assert(); }\n            \n                memory[0x00:0x20] = var7;\n                var temp7 = var6;\n                memory[temp7:temp7 + 0x20] = storage[var8 + keccak256(memory[0x00:0x20])];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var5;\n                var temp8 = keccak256(memory[0x00:0x00 + temp7 + 0x40]);\n                storage[temp8] = storage[temp8] & ~(0x02 ** 0xa0 - 0x01);\n                storage[temp8 + 0x01] = 0x00;\n                var6 = 0x00;\n                var5 = temp8;\n                var7 = 0x111c;\n                var8 = var5 + 0x02;\n                var9 = var6;\n                func_13A0(var8, var9);\n                var4 = var4 + 0x01;\n            \n                if (var4 >= var3) { goto label_1127; }\n                else { goto label_10C3; }\n            }\n        }\n    }\n    \n    function isOwner(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x0102;\n        return storage[keccak256(memory[0x00:0x40])] > 0x00;\n    }\n    \n    function m_numOwners() returns (var r0) { return storage[0x01]; }\n    \n    function m_lastDay() returns (var r0) { return storage[0x0107]; }\n    \n    function resetSpentToday() {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x04e9;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) { return; }\n    \n        storage[0x0106] = 0x00;\n    }\n    \n    function m_spentToday() returns (var r0) { return storage[0x0106]; }\n    \n    function addOwner(var arg0) {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x0528;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) {\n        label_05EB:\n            return;\n        } else {\n            var1 = 0x0536;\n            var2 = arg0;\n            var1 = isOwner(var2);\n        \n            if (var1) { goto label_05EB; }\n        \n            var1 = 0x0548;\n            var2 = storage[0x0104];\n            var var3 = 0x00;\n        \n            if (var3 >= var2) {\n            label_1127:\n                var var4 = 0x05eb;\n                var var5 = storage[0x0104];\n                var var6 = 0x00;\n            \n                if (var6 >= var5) {\n                label_137F:\n                    var var7 = 0x05eb;\n                    var var8 = 0x0104;\n                    var var9 = 0x00;\n                    var temp3 = var8;\n                    var temp4 = storage[temp3];\n                    storage[temp3] = 0x00;\n                    memory[0x00:0x20] = temp3;\n                    var8 = 0x04f5;\n                    var var10 = keccak256(memory[0x00:0x20]);\n                    var9 = var10 + temp4;\n                    var8 = func_14B3(var9, var10);\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_130D:\n                    var7 = 0x0104;\n                    var8 = var6;\n                \n                    if (var8 >= storage[var7]) { assert(); }\n                \n                    memory[0x00:0x20] = var7;\n                \n                    if (!storage[var8 + keccak256(memory[0x00:0x20])]) {\n                    label_1376:\n                        var6 = var6 + 0x01;\n                    \n                        if (var6 >= var5) { goto label_137F; }\n                        else { goto label_130D; }\n                    } else {\n                        var7 = 0x0103;\n                        var8 = 0x00;\n                        var9 = 0x0104;\n                        var10 = var6;\n                    \n                        if (var10 >= storage[var9]) { assert(); }\n                    \n                        memory[0x00:0x20] = var9;\n                        var temp5 = var8;\n                        memory[temp5:temp5 + 0x20] = storage[var10 + keccak256(memory[0x00:0x20])];\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var7;\n                        var temp6 = keccak256(memory[0x00:0x00 + temp5 + 0x40]);\n                        storage[temp6] = 0x00;\n                        storage[temp6 + 0x01] = 0x00;\n                        storage[temp6 + 0x02] = 0x00;\n                        goto label_1376;\n                    }\n                }\n            } else {\n            label_10C3:\n                var4 = 0x0108;\n                var5 = 0x00;\n                var6 = 0x0104;\n                var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp7 = var5;\n                memory[temp7:temp7 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var4;\n                var temp8 = keccak256(memory[0x00:0x00 + temp7 + 0x40]);\n                storage[temp8] = storage[temp8] & ~(0x02 ** 0xa0 - 0x01);\n                storage[temp8 + 0x01] = 0x00;\n                var5 = 0x00;\n                var4 = temp8;\n                var6 = 0x111c;\n                var7 = var4 + 0x02;\n                var8 = var5;\n                func_13A0(var7, var8);\n                var3 = var3 + 0x01;\n            \n                if (var3 >= var2) { goto label_1127; }\n                else { goto label_10C3; }\n            }\n        }\n    }\n    \n    function m_required() returns (var r0) { return storage[0x00]; }\n    \n    function confirm(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = arg0;\n        var var3 = 0x0605;\n        var var4 = var2;\n        var3 = func_0F48(var4);\n    \n        if (!var3) {\n        label_0940:\n            return var0;\n        } else {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0108;\n            var3 = !!(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01);\n        \n            if (!var3) {\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0108;\n                var3 = !!storage[keccak256(memory[0x00:0x40]) + 0x01];\n            \n                if (var3) { goto label_066E; }\n                else { goto label_0647; }\n            } else if (var3) {\n            label_066E:\n            \n                if (!var3) { goto label_0940; }\n            \n            label_0674:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0108;\n            \n                if (storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01) {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0108;\n                    var temp0 = keccak256(memory[0x00:0x40]);\n                    var temp1 = storage[temp0 + 0x02];\n                    var3 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n                    var4 = storage[temp0 + 0x01];\n                    var var5 = temp0 + 0x02;\n                    var var6 = memory[0x40:0x60];\n                    var var7 = var6;\n                    var var8 = var5;\n                    var var9 = (!(temp1 & 0x01) * 0x0100 + ~0x00 & temp1) / 0x02;\n                \n                    if (!var9) {\n                    label_07D8:\n                        var temp2 = memory[0x40:0x60];\n                        var temp3;\n                        temp3, memory[temp2:temp2 + 0x00] = address(var3).call.gas(msg.gas - 0x8502).value(var4)(memory[temp2:temp2 + var7 - temp2]);\n                    \n                        if (!temp3) { revert(memory[0x00:0x00]); }\n                    \n                    label_07FE:\n                        var temp4 = arg0;\n                        memory[0x00:0x20] = temp4;\n                        memory[0x20:0x40] = 0x0108;\n                        var temp5 = keccak256(memory[0x00:0x40]);\n                        var temp6 = memory[0x40:0x60];\n                        var temp7 = 0x02 ** 0xa0 - 0x01;\n                        memory[temp6:temp6 + 0x20] = msg.sender & temp7;\n                        var4 = msg.sender;\n                        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = temp4;\n                        memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = storage[temp5 + 0x01];\n                        memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = temp7 & storage[temp5];\n                        memory[temp6 + 0xa0:temp6 + 0xa0 + 0x20] = var1 & temp7;\n                        memory[temp6 + 0x80:temp6 + 0x80 + 0x20] = 0xc0;\n                        var temp8 = storage[temp5 + 0x02];\n                        var temp9 = (temp8 & !(temp8 & 0x01) * 0x0100 + ~0x00) / 0x02;\n                        memory[temp6 + 0xc0:temp6 + 0xc0 + 0x20] = temp9;\n                        var3 = 0xe3a3a4111a84df27d76b68dc721e65c7711605ea5eee4afd3a9c58195217365c;\n                        var5 = temp4;\n                        var6 = storage[temp5 + 0x01];\n                        var7 = temp7 & storage[temp5];\n                        var8 = temp5 + 0x02;\n                        var9 = var1;\n                        var var10 = temp6;\n                        var var11 = temp6 + 0x80;\n                        var var12 = var10 + 0xe0;\n                        var var13 = var8;\n                        var var14 = temp9;\n                    \n                        if (!var14) {\n                        label_08F4:\n                            var temp10 = memory[0x40:0x60];\n                            log(memory[temp10:temp10 + var12 - temp10], [stack[-12]]);\n                            memory[0x00:0x20] = arg0;\n                            memory[0x20:0x40] = 0x0108;\n                            var temp11 = keccak256(memory[0x00:0x40]);\n                            storage[temp11] = storage[temp11] & ~(0x02 ** 0xa0 - 0x01);\n                            storage[temp11 + 0x01] = 0x00;\n                            var4 = 0x00;\n                            var3 = temp11;\n                            var5 = 0x0939;\n                            var6 = var3 + 0x02;\n                            var7 = var4;\n                            func_13A0(var6, var7);\n                            var0 = 0x01;\n                            goto label_0940;\n                        } else if (0x1f < var14) {\n                            var temp12 = var12;\n                            var temp13 = temp12 + var14;\n                            var12 = temp13;\n                            memory[0x00:0x20] = var13;\n                            var temp14 = keccak256(memory[0x00:0x20]);\n                            memory[temp12:temp12 + 0x20] = storage[temp14];\n                            var13 = temp14 + 0x01;\n                            var14 = temp12 + 0x20;\n                        \n                            if (var12 <= var14) { goto label_08EB; }\n                        \n                        label_08D7:\n                            var temp15 = var13;\n                            var temp16 = var14;\n                            memory[temp16:temp16 + 0x20] = storage[temp15];\n                            var13 = temp15 + 0x01;\n                            var14 = temp16 + 0x20;\n                        \n                            if (var12 > var14) { goto label_08D7; }\n                        \n                        label_08EB:\n                            var temp17 = var12;\n                            var temp18 = temp17 + (var14 - temp17 & 0x1f);\n                            var14 = temp17;\n                            var12 = temp18;\n                            goto label_08F4;\n                        } else {\n                            var temp19 = var12;\n                            memory[temp19:temp19 + 0x20] = storage[var13] / 0x0100 * 0x0100;\n                            var12 = temp19 + 0x20;\n                            var14 = var14;\n                            goto label_08F4;\n                        }\n                    } else if (0x1f < var9) {\n                        var temp20 = var7;\n                        var temp21 = temp20 + var9;\n                        var7 = temp21;\n                        memory[0x00:0x20] = var8;\n                        var temp22 = keccak256(memory[0x00:0x20]);\n                        memory[temp20:temp20 + 0x20] = storage[temp22];\n                        var8 = temp22 + 0x01;\n                        var9 = temp20 + 0x20;\n                    \n                        if (var7 <= var9) { goto label_07CF; }\n                    \n                    label_07BB:\n                        var temp23 = var8;\n                        var temp24 = var9;\n                        memory[temp24:temp24 + 0x20] = storage[temp23];\n                        var8 = temp23 + 0x01;\n                        var9 = temp24 + 0x20;\n                    \n                        if (var7 > var9) { goto label_07BB; }\n                    \n                    label_07CF:\n                        var temp25 = var7;\n                        var temp26 = temp25 + (var9 - temp25 & 0x1f);\n                        var9 = temp25;\n                        var7 = temp26;\n                        goto label_07D8;\n                    } else {\n                        var temp27 = var7;\n                        memory[temp27:temp27 + 0x20] = storage[var8] / 0x0100 * 0x0100;\n                        var7 = temp27 + 0x20;\n                        var9 = var9;\n                        goto label_07D8;\n                    }\n                } else {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0108;\n                    var temp28 = keccak256(memory[0x00:0x40]);\n                    var temp29 = storage[temp28 + 0x02];\n                    var temp30 = memory[0x40:0x60];\n                    var temp31 = (!(temp29 & 0x01) * 0x0100 + ~0x00 & temp29) / 0x02;\n                    memory[0x40:0x60] = temp30 + (temp31 + 0x1f) / 0x20 * 0x20 + 0x20;\n                    memory[temp30:temp30 + 0x20] = temp31;\n                    var3 = 0x073f;\n                    var7 = temp31;\n                    var4 = storage[temp28 + 0x01];\n                    var5 = temp30;\n                    var6 = temp28 + 0x02;\n                    var8 = var5 + 0x20;\n                    var9 = var6;\n                    var10 = var7;\n                \n                    if (!var10) {\n                        var3 = func_0735(var4, var5, var6, var7, var8, var9, var10);\n                        var1 = var3;\n                        goto label_07FE;\n                    } else if (0x1f < var10) {\n                        var temp32 = var8;\n                        var temp33 = temp32 + var10;\n                        var8 = temp33;\n                        memory[0x00:0x20] = var9;\n                        var temp34 = keccak256(memory[0x00:0x20]);\n                        memory[temp32:temp32 + 0x20] = storage[temp34];\n                        var9 = temp34 + 0x01;\n                        var10 = temp32 + 0x20;\n                    \n                        if (var8 <= var10) { goto label_072C; }\n                    \n                    label_0718:\n                        var temp35 = var9;\n                        var temp36 = var10;\n                        memory[temp36:temp36 + 0x20] = storage[temp35];\n                        var9 = temp35 + 0x01;\n                        var10 = temp36 + 0x20;\n                    \n                        if (var8 > var10) { goto label_0718; }\n                    \n                    label_072C:\n                        var temp37 = var8;\n                        var temp38 = temp37 + (var10 - temp37 & 0x1f);\n                        var10 = temp37;\n                        var8 = temp38;\n                        var3 = func_0735(var4, var5, var6, var7, var8, var9, var10);\n                        // Error: Could not resolve method call return address!\n                    } else {\n                        var temp39 = var8;\n                        memory[temp39:temp39 + 0x20] = storage[var9] / 0x0100 * 0x0100;\n                        var10 = var10;\n                        var8 = temp39 + 0x20;\n                        var3 = func_0735(var4, var5, var6, var7, var8, var9, var10);\n                        // Error: Could not resolve method call return address!\n                    }\n                }\n            } else {\n            label_0647:\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0108;\n                var temp40 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n            \n                if (!((!(temp40 & 0x01) * 0x0100 + ~0x00 & temp40) / 0x02)) { goto label_0940; }\n                else { goto label_0674; }\n            }\n        }\n    }\n    \n    function func_0735(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6) returns (var r0) {\n        r0 = func_1270(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function setDailyLimit(var arg0) {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x0971;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) { return; }\n    \n        storage[0x0105] = arg0;\n    }\n    \n    function execute(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x0990;\n        var var3 = msg.sender;\n        var2 = isOwner(var3);\n    \n        if (!var2) {\n        label_0C59:\n            return var0;\n        } else {\n            var2 = !arg3;\n        \n            if (!var2) {\n            label_09A7:\n            \n                if (var2) {\n                    if (!var2) {\n                    label_0AF8:\n                        var temp0 = msg.data.length;\n                        var temp1 = memory[0x40:0x60];\n                        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n                        var temp2 = temp0 + temp1;\n                        memory[temp2:temp2 + 0x20] = block.number;\n                        var temp3 = memory[0x40:0x60];\n                        var temp4 = keccak256(memory[temp3:temp3 + temp2 - temp3 + 0x20]);\n                        memory[0x00:0x20] = temp4;\n                        memory[0x20:0x40] = 0x0108;\n                        var0 = temp4;\n                        var2 = !(storage[keccak256(memory[0x00:0x40])] & 0x02 ** 0xa0 - 0x01);\n                    \n                        if (var2) {\n                            memory[0x00:0x20] = var0;\n                            memory[0x20:0x40] = 0x0108;\n                            var2 = !storage[keccak256(memory[0x00:0x40]) + 0x01];\n                        \n                            if (!var2) { goto label_0B84; }\n                            else { goto label_0B5E; }\n                        } else if (!var2) {\n                        label_0B84:\n                        \n                            if (!var2) {\n                            label_0BC8:\n                                var2 = 0x0bd1;\n                                var3 = var0;\n                                var2 = confirm(var3);\n                            \n                                if (var2) { goto label_0C59; }\n                            \n                                var temp5 = memory[0x40:0x60];\n                                memory[temp5:temp5 + 0x20] = var0;\n                                var temp6 = 0x02 ** 0xa0 - 0x01;\n                                memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = msg.sender & temp6;\n                                memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = arg1;\n                                memory[temp5 + 0x60:temp5 + 0x60 + 0x20] = arg0 & temp6;\n                                memory[temp5 + 0x80:temp5 + 0x80 + 0x20] = 0xa0;\n                                var temp7 = arg3;\n                                memory[temp5 + 0xa0:temp5 + 0xa0 + 0x20] = temp7;\n                                var temp8 = temp5 + 0xc0;\n                                memory[temp8:temp8 + temp7] = msg.data[arg2:arg2 + temp7];\n                                var temp9 = memory[0x40:0x60];\n                                log(memory[temp9:temp9 + (temp8 + temp7) - temp9], [0x1733cbb53659d713b79580f79f3f9ff215f78a7c7aa45890f3b89fc5cddfbf32]);\n                                goto label_0C59;\n                            } else {\n                            label_0B8A:\n                                memory[0x00:0x20] = var0;\n                                memory[0x20:0x40] = 0x0108;\n                                var temp10 = keccak256(memory[0x00:0x40]);\n                                storage[temp10] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[temp10] & ~(0x02 ** 0xa0 - 0x01));\n                                storage[temp10 + 0x01] = arg1;\n                                var2 = 0x0bc6;\n                                var3 = temp10 + 0x02;\n                                var var4 = arg2;\n                                var var5 = arg3;\n                                var temp11 = var3;\n                                var temp12 = storage[temp11];\n                                memory[0x00:0x20] = temp11;\n                                var var6 = keccak256(memory[0x00:0x20]);\n                                var var7 = var4;\n                                var4 = var6 + ((!(temp12 & 0x01) * 0x0100 - 0x01 & temp12) / 0x02 + 0x1f) / 0x20;\n                            \n                                if (0x1f < var5) {\n                                    var temp13 = var5;\n                                    storage[var3] = temp13 + temp13 + 0x01;\n                                \n                                    if (!temp13) {\n                                    label_1456:\n                                        var temp14 = var4;\n                                        var4 = 0x1463;\n                                        var5 = temp14;\n                                        var4 = func_14B3(var5, var6);\n                                        var2 = func_1463(var3, var4);\n                                        // Error: Could not resolve method call return address!\n                                    } else {\n                                        var temp15 = var5;\n                                        var temp16 = var7;\n                                        var5 = temp16;\n                                        var7 = var5 + temp15;\n                                    \n                                        if (var7 <= var5) { goto label_1456; }\n                                    \n                                    label_1444:\n                                        var temp17 = var5;\n                                        var temp18 = var6;\n                                        storage[temp18] = msg.data[temp17:temp17 + 0x20];\n                                        var5 = temp17 + 0x20;\n                                        var6 = temp18 + 0x01;\n                                        var7 = var7;\n                                    \n                                        if (var7 <= var5) { goto label_1456; }\n                                        else { goto label_1444; }\n                                    }\n                                } else {\n                                    var temp19 = var5;\n                                    storage[var3] = (msg.data[var7:var7 + 0x20] & ~0xff) | temp19 + temp19;\n                                    goto label_1456;\n                                }\n                            }\n                        } else {\n                        label_0B5E:\n                            memory[0x00:0x20] = var0;\n                            memory[0x20:0x40] = 0x0108;\n                            var temp20 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                        \n                            if ((!(temp20 & 0x01) * 0x0100 + ~0x00 & temp20) / 0x02) { goto label_0BC8; }\n                            else { goto label_0B8A; }\n                        }\n                    } else {\n                    label_09BB:\n                    \n                        if (arg0 & 0x02 ** 0xa0 - 0x01) {\n                            var temp21 = arg3;\n                            var temp22 = memory[0x40:0x60];\n                            memory[temp22:temp22 + temp21] = msg.data[arg2:arg2 + temp21];\n                            var temp23 = memory[0x40:0x60];\n                            var temp24;\n                            temp24, memory[temp23:temp23 + 0x00] = address(arg0 & 0x02 ** 0xa0 - 0x01).call.gas(msg.gas - 0x8502).value(arg1)(memory[temp23:temp23 + (temp22 + temp21) - temp23]);\n                        \n                            if (!temp24) { revert(memory[0x00:0x00]); }\n                        \n                        label_0A4C:\n                            var temp25 = arg3;\n                            var temp26 = memory[0x40:0x60];\n                            memory[temp26:temp26 + 0x20] = msg.sender;\n                            var temp27 = temp26 + 0x20;\n                            memory[temp27:temp27 + 0x20] = arg1;\n                            var temp28 = temp27 + 0x20;\n                            memory[temp28:temp28 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                            var temp29 = temp28 + 0x20;\n                            var temp30 = temp29 + 0x20;\n                            memory[temp30:temp30 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01;\n                            var temp31 = temp30 + 0x20;\n                            memory[temp29:temp29 + 0x20] = temp31 - temp26;\n                            memory[temp31:temp31 + 0x20] = temp25;\n                            var temp32 = temp31 + 0x20;\n                            memory[temp32:temp32 + temp25] = msg.data[arg2:arg2 + temp25];\n                            var temp33 = memory[0x40:0x60];\n                            log(memory[temp33:temp33 + (temp32 + temp25) - temp33], [0x9738cd1a8777c86b011f7b01d87d484217dc6ab5154a9d41eda5d14af8caf292]);\n                            goto label_0C59;\n                        } else {\n                            var2 = 0x0a04;\n                            var3 = arg1;\n                            var temp34 = arg3;\n                            var temp35 = memory[0x40:0x60];\n                            memory[0x40:0x60] = temp35 + (temp34 + 0x1f) / 0x20 * 0x20 + 0x20;\n                            var4 = temp35;\n                            memory[var4:var4 + 0x20] = temp34;\n                            memory[var4 + 0x20:var4 + 0x20 + temp34] = msg.data[arg2:arg2 + temp34];\n                            var2 = func_1270(var3, var4);\n                            var1 = var2;\n                            goto label_0A4C;\n                        }\n                    }\n                } else if (storage[0x00] != 0x01) { goto label_0AF8; }\n                else { goto label_09BB; }\n            } else {\n                var2 = 0x09a7;\n                var3 = arg1;\n                var2 = func_128A(var3);\n                goto label_09A7;\n            }\n        }\n    }\n    \n    function revoke(var arg0) {\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0102;\n        var var1 = 0x00;\n        var var0 = storage[keccak256(memory[var1:var1 + 0x40])];\n        var var2 = var1;\n    \n        if (!var0) { goto label_0D0A; }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0103;\n        var2 = keccak256(memory[0x00:0x40]);\n        var1 = 0x02 ** var0;\n    \n        if (var1 & storage[var2 + 0x01] <= 0x00) {\n        label_0D0A:\n            return;\n        } else {\n            var temp0 = var2;\n            storage[temp0] = storage[temp0] + 0x01;\n            var temp1 = temp0 + 0x01;\n            storage[temp1] = storage[temp1] - var1;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = msg.sender;\n            memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = arg0;\n            var temp3 = memory[0x40:0x60];\n            log(memory[temp3:temp3 + temp2 - temp3 + 0x40], [0xc7fb647e59b18047309aa15aad418e5d7ca96d173ad704f1031a2c3d7591734b]);\n            goto label_0D0A;\n        }\n    }\n    \n    function changeRequirement(var arg0) {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x0d38;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) {\n        label_05EB:\n            return;\n        } else if (arg0 <= storage[0x01]) {\n            storage[0x00] = arg0;\n            var1 = 0x0d59;\n            var2 = storage[0x0104];\n            var var3 = 0x00;\n        \n            if (var3 >= var2) {\n            label_1127:\n                var var4 = 0x05eb;\n                var var5 = storage[0x0104];\n                var var6 = 0x00;\n            \n                if (var6 >= var5) {\n                label_137F:\n                    var var7 = 0x05eb;\n                    var var8 = 0x0104;\n                    var var9 = 0x00;\n                    var temp3 = var8;\n                    var temp4 = storage[temp3];\n                    storage[temp3] = 0x00;\n                    memory[0x00:0x20] = temp3;\n                    var8 = 0x04f5;\n                    var var10 = keccak256(memory[0x00:0x20]);\n                    var9 = var10 + temp4;\n                    var8 = func_14B3(var9, var10);\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_130D:\n                    var7 = 0x0104;\n                    var8 = var6;\n                \n                    if (var8 >= storage[var7]) { assert(); }\n                \n                    memory[0x00:0x20] = var7;\n                \n                    if (!storage[var8 + keccak256(memory[0x00:0x20])]) {\n                    label_1376:\n                        var6 = var6 + 0x01;\n                    \n                        if (var6 >= var5) { goto label_137F; }\n                        else { goto label_130D; }\n                    } else {\n                        var7 = 0x0103;\n                        var8 = 0x00;\n                        var9 = 0x0104;\n                        var10 = var6;\n                    \n                        if (var10 >= storage[var9]) { assert(); }\n                    \n                        memory[0x00:0x20] = var9;\n                        var temp5 = var8;\n                        memory[temp5:temp5 + 0x20] = storage[var10 + keccak256(memory[0x00:0x20])];\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var7;\n                        var temp6 = keccak256(memory[0x00:0x00 + temp5 + 0x40]);\n                        storage[temp6] = 0x00;\n                        storage[temp6 + 0x01] = 0x00;\n                        storage[temp6 + 0x02] = 0x00;\n                        goto label_1376;\n                    }\n                }\n            } else {\n            label_10C3:\n                var4 = 0x0108;\n                var5 = 0x00;\n                var6 = 0x0104;\n                var7 = var3;\n            \n                if (var7 >= storage[var6]) { assert(); }\n            \n                memory[0x00:0x20] = var6;\n                var temp7 = var5;\n                memory[temp7:temp7 + 0x20] = storage[var7 + keccak256(memory[0x00:0x20])];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var4;\n                var temp8 = keccak256(memory[0x00:0x00 + temp7 + 0x40]);\n                storage[temp8] = storage[temp8] & ~(0x02 ** 0xa0 - 0x01);\n                storage[temp8 + 0x01] = 0x00;\n                var5 = 0x00;\n                var4 = temp8;\n                var6 = 0x111c;\n                var7 = var4 + 0x02;\n                var8 = var5;\n                func_13A0(var7, var8);\n                var3 = var3 + 0x01;\n            \n                if (var3 >= var2) { goto label_1127; }\n                else { goto label_10C3; }\n            }\n        } else { goto label_05EB; }\n    }\n    \n    function hasConfirmed(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x0103;\n        var temp0 = keccak256(memory[var0:var0 + 0x40]);\n        memory[var0:var0 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        var var1 = temp0;\n        memory[0x20:0x40] = 0x0102;\n        var var2 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var3 = var0;\n    \n        if (var2) { return storage[var1 + 0x01] & 0x02 ** var2 != 0x00; }\n        else { return 0x00; }\n    }\n    \n    function getOwner(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x02;\n        var var2 = arg0 + 0x01;\n    \n        if (var2 < 0x0100) { return storage[var2 + var1]; }\n        else { assert(); }\n    }\n    \n    function kill(var arg0) {\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var0 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var1 = 0x0e30;\n        var var2 = var0;\n        var1 = func_0F48(var2);\n    \n        if (!var1) { return; }\n        else { selfdestruct(arg0 & 0x02 ** 0xa0 - 0x01); }\n    }\n    \n    function changeOwner(var arg0, var arg1) {\n        var var0 = 0x00;\n        var temp0 = msg.data.length;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + temp0] = msg.data[0x00:0x00 + temp0];\n        var temp2 = memory[0x40:0x60];\n        var var1 = keccak256(memory[temp2:temp2 + (temp1 + temp0) - temp2]);\n        var var2 = 0x0e70;\n        var var3 = var1;\n        var2 = func_0F48(var3);\n    \n        if (!var2) {\n        label_0D0A:\n            return;\n        } else {\n            var2 = 0x0e7e;\n            var3 = arg1;\n            var2 = isOwner(var3);\n        \n            if (var2) { goto label_0D0A; }\n        \n            memory[0x00:0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n            memory[0x20:0x40] = 0x0102;\n            var0 = storage[keccak256(memory[0x00:0x40])];\n        \n            if (!var0) { goto label_0D0A; }\n        \n            var2 = 0x0eb8;\n            var3 = storage[0x0104];\n            var var4 = 0x00;\n        \n            if (var4 >= var3) {\n            label_1127:\n                var var5 = 0x05eb;\n                var var6 = storage[0x0104];\n                var var7 = 0x00;\n            \n                if (var7 >= var6) {\n                label_137F:\n                    var var8 = 0x05eb;\n                    var var9 = 0x0104;\n                    var var10 = 0x00;\n                    var temp3 = var9;\n                    var temp4 = storage[temp3];\n                    storage[temp3] = 0x00;\n                    memory[0x00:0x20] = temp3;\n                    var9 = 0x04f5;\n                    var var11 = keccak256(memory[0x00:0x20]);\n                    var10 = var11 + temp4;\n                    var9 = func_14B3(var10, var11);\n                    // Error: Could not resolve jump destination!\n                } else {\n                label_130D:\n                    var8 = 0x0104;\n                    var9 = var7;\n                \n                    if (var9 >= storage[var8]) { assert(); }\n                \n                    memory[0x00:0x20] = var8;\n                \n                    if (!storage[var9 + keccak256(memory[0x00:0x20])]) {\n                    label_1376:\n                        var7 = var7 + 0x01;\n                    \n                        if (var7 >= var6) { goto label_137F; }\n                        else { goto label_130D; }\n                    } else {\n                        var8 = 0x0103;\n                        var9 = 0x00;\n                        var10 = 0x0104;\n                        var11 = var7;\n                    \n                        if (var11 >= storage[var10]) { assert(); }\n                    \n                        memory[0x00:0x20] = var10;\n                        var temp5 = var9;\n                        memory[temp5:temp5 + 0x20] = storage[var11 + keccak256(memory[0x00:0x20])];\n                        memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = var8;\n                        var temp6 = keccak256(memory[0x00:0x00 + temp5 + 0x40]);\n                        storage[temp6] = 0x00;\n                        storage[temp6 + 0x01] = 0x00;\n                        storage[temp6 + 0x02] = 0x00;\n                        goto label_1376;\n                    }\n                }\n            } else {\n            label_10C3:\n                var5 = 0x0108;\n                var6 = 0x00;\n                var7 = 0x0104;\n                var8 = var4;\n            \n                if (var8 >= storage[var7]) { assert(); }\n            \n                memory[0x00:0x20] = var7;\n                var temp7 = var6;\n                memory[temp7:temp7 + 0x20] = storage[var8 + keccak256(memory[0x00:0x20])];\n                memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = var5;\n                var temp8 = keccak256(memory[0x00:0x00 + temp7 + 0x40]);\n                storage[temp8] = storage[temp8] & ~(0x02 ** 0xa0 - 0x01);\n                storage[temp8 + 0x01] = 0x00;\n                var6 = 0x00;\n                var5 = temp8;\n                var7 = 0x111c;\n                var8 = var5 + 0x02;\n                var9 = var6;\n                func_13A0(var8, var9);\n                var4 = var4 + 0x01;\n            \n                if (var4 >= var3) { goto label_1127; }\n                else { goto label_10C3; }\n            }\n        }\n    }\n    \n    function m_dailyLimit() returns (var r0) { return storage[0x0105]; }\n    \n    function func_0F48(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = msg.sender;\n        memory[0x20:0x40] = 0x0102;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])];\n        var var2 = var0;\n        var var3 = var2;\n    \n        if (!var1) { goto label_10A9; }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x0103;\n        var2 = keccak256(memory[0x00:0x40]);\n    \n        if (storage[var2]) {\n        label_0FD3:\n            var3 = 0x02 ** var1;\n        \n            if (storage[var2 + 0x01] & var3 != 0x00) {\n            label_10A9:\n                return var0;\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = msg.sender;\n                memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = arg0;\n                var temp1 = memory[0x40:0x60];\n                log(memory[temp1:temp1 + temp0 - temp1 + 0x40], [0xe1c52dc63b719ade82e8bea94cc41a0d5d28e4aaf536adb5e9cccc9ff8c1aeda]);\n            \n                if (storage[var2] > 0x01) {\n                    var temp2 = var2;\n                    storage[temp2] = storage[temp2] + ~0x00;\n                    var temp3 = temp2 + 0x01;\n                    storage[temp3] = var3 | storage[temp3];\n                    goto label_10A9;\n                } else {\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0103;\n                    var var4 = 0x0104;\n                    var var5 = storage[keccak256(memory[0x00:0x40]) + 0x02];\n                \n                    if (var5 >= storage[var4]) { assert(); }\n                \n                    memory[0x00:0x20] = var4;\n                    storage[var5 + keccak256(memory[0x00:0x20])] = 0x00;\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0103;\n                    var temp4 = keccak256(memory[0x00:0x40]);\n                    storage[temp4] = 0x00;\n                    storage[temp4 + 0x01] = 0x00;\n                    storage[temp4 + 0x02] = 0x00;\n                    var0 = 0x01;\n                    goto label_10A9;\n                }\n            }\n        } else {\n            var temp5 = var2;\n            storage[temp5] = storage[0x00];\n            storage[temp5 + 0x01] = 0x00;\n            var4 = storage[0x0104];\n            var5 = 0x0fab;\n            var var6 = 0x0104;\n            var var7 = var4 + 0x01;\n            func_1467(var6, var7);\n            var temp6 = var4;\n            storage[var2 + 0x02] = temp6;\n            var5 = 0x0104;\n            var4 = arg0;\n            var6 = temp6;\n        \n            if (var6 >= storage[var5]) { assert(); }\n        \n            memory[0x00:0x20] = var5;\n            storage[var6 + keccak256(memory[0x00:0x20])] = var4;\n            goto label_0FD3;\n        }\n    }\n    \n    function func_1270(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        var temp1 = new(memory[temp0 + 0x20:temp0 + 0x20 + memory[temp0:temp0 + 0x20]]).value(arg0)();\n        var var0 = temp1;\n    \n        if (address(var0).code.length) { return var0; }\n    \n        main();\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_128A(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1295;\n        var var2 = msg.sender;\n        var1 = isOwner(var2);\n    \n        if (!var1) { return var0; }\n    \n        var1 = storage[0x0107];\n        var2 = 0x12a6;\n        var var3 = block.timestamp / 0x015180;\n        var2 = var3;\n        // Error: Could not resolve jump destination!\n    }\n    \n    function func_13A0(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        arg1 = (!(temp1 & 0x01) * 0x0100 - 0x01 & temp1) / 0x02;\n        storage[temp0] = 0x00;\n    \n        if (0x1f >= arg1) { goto label_04F5; }\n    \n        memory[0x00:0x20] = arg0;\n        arg0 = 0x04f5;\n        arg1 = keccak256(memory[0x00:0x20]) + (arg1 + 0x1f) / 0x20;\n        var var0 = keccak256(memory[0x00:0x20]);\n        arg0 = func_14B3(arg1, var0);\n    \n    label_04F5:\n    }\n    \n    function func_1463(var arg0, var arg1) returns (var r0) { return arg0; }\n    \n    function func_1467(var arg0, var arg1) {\n        var temp0 = arg0;\n        var temp1 = storage[temp0];\n        var var0 = temp1;\n        var temp2 = arg1;\n        storage[temp0] = temp2;\n    \n        if (!var0 > temp2) {\n        label_048D:\n            return;\n        } else {\n            memory[0x00:0x20] = arg0;\n            var temp3 = keccak256(memory[0x00:0x20]);\n            var temp4 = var0;\n            var0 = 0x048d;\n            var var1 = temp3 + temp4;\n            var var2 = arg1 + temp3;\n            var0 = func_14B3(var1, var2);\n            goto label_048D;\n        }\n    }\n    \n    function func_14B3(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = 0x139d;\n        var temp1 = arg1;\n        arg1 = temp0;\n        var var0 = temp1;\n    \n        if (arg1 <= var0) { return func_1463(arg1, var0); }\n    \n    label_14C2:\n        var temp2 = var0;\n        storage[temp2] = 0x00;\n        var0 = temp2 + 0x01;\n    \n        if (arg1 > var0) { goto label_14C2; }\n    \n        arg0 = func_1463(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 41.96249437332153,
	"usage": {
		"completion_tokens": 674,
		"prompt_tokens": 15255,
		"total_tokens": 15929
	}
}