{
	"address": "0x07e040d474a584cd2e7e4a819fa18420beb5eb4f",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity contract code equivalent to the decompiled code:\n\n```solidity\npragma solidity ^0.6.0;\n\ncontract MyContract {\n    uint256[] private _name; \n    uint256[] private _symbol;\n    uint256 private _totalSupply;\n    uint256 private _remaining;\n    uint256 private _ethRate;\n    uint256 private _amountCollected;\n    uint256 private _icoStatus;\n    uint256 private _icoTokenPrice;\n    uint256 private _allowTransferToken;\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    mapping (address => bool) private _frozenAccount;\n    uint8 private _decimals;\n    address private _owner;\n    address private _benAddress;\n    address private _bkaddress;\n\n    event Burn(address indexed from, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event TransferSell(address indexed from, address indexed to, uint256 value, string status);\n    event FrozenFunds(address target, bool frozen);\n\n    constructor() public {\n        // Initialize contract owner and other variables\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        // Check if the sender has enough\n        require(_balanceOf[msg.sender] >= _value);\n        // Check for overflows\n        require(_balanceOf[_to] + _value >= _balanceOf[_to]);\n        // Subtract from the sender\n        _balanceOf[msg.sender] -= _value;\n        // Add the same to the recipient\n        _balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n    }\n\n    function burn(uint256 _value) public returns (bool success) {\n        require(_balanceOf[msg.sender] >= _value);   // Check if the sender has enough\n        _balanceOf[msg.sender] -= _value;            // Subtract from the sender\n        _totalSupply -= _value;                      // Updates totalSupply\n        emit Burn(msg.sender, _value);\n        return true;\n    }\n\n    function burnFrom(address _from, uint256 _value) public returns (bool success) {\n        require(_balanceOf[_from] >= _value);                // Check if the targeted balance is enough\n        require(_value <= _allowance[_from][msg.sender]);    // Check allowance\n        _balanceOf[_from] -= _value;                         // Subtract from the targeted balance\n        _allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance\n        _totalSupply -= _value;                              // Update totalSupply\n        emit Burn(_from, _value);\n        return true;\n    }\n\n    function mintToken(address target, uint256 mintedAmount) public {\n        _balanceOf[target] += mintedAmount;\n        _totalSupply += mintedAmount;\n        emit Transfer(address(0), target, mintedAmount);\n    }\n\n    function freezeAccount(address target, bool freeze) public {\n        _frozenAccount[target] = freeze;\n        emit FrozenFunds(target, freeze);\n    }\n\n    // Other functions go here...\n\n}\n```\nPlease note that this is a simplified example. Every function argument should be checked for security vulnerabilities such as reentrancy attacks, overflow/underflow attacks, and other common vulnerabilities.",
				"role": "assistant"
			}
		}
	],
	"created": 1701464420,
	"id": "chatcmpl-8R4uSwFH2ngZBTcjgE13QBO49rapY",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.14 08:41 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nuint256 _remaining; // STORAGE[0x4]\nuint256 _ethRate; // STORAGE[0x5]\nuint256 _amountCollected; // STORAGE[0x7]\nuint256 _icoStatus; // STORAGE[0x8]\nuint256 _icoTokenPrice; // STORAGE[0x9]\nuint256 _allowTransferToken; // STORAGE[0xc]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xd]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0xe]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0xf]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\naddress _owner; // STORAGE[0x6] bytes 0 to 19\naddress _benAddress; // STORAGE[0xa] bytes 0 to 19\naddress _bkaddress; // STORAGE[0xb] bytes 0 to 19\n\n// Events\nBurn(address, uint256);\nTransfer(address, address, uint256);\nTransferSell(address, address, uint256, string);\nFrozenFunds(address, bool);\n\nfunction 0x11e7(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    v0 = v1 = 1 == _allowTransferToken;\n    if (1 != _allowTransferToken) {\n        v0 = v2 = _owner == address(varg2);\n    }\n    require(v0);\n    v3 = address(varg2);\n    require(!(0xff & _frozenAccount[v3]));\n    require(address(varg1));\n    v4 = address(varg2);\n    require(_balanceOf[v4] > varg0);\n    v5 = address(varg1);\n    require(_balanceOf[v5] + varg0 > _balanceOf[v5]);\n    v6 = address(varg2);\n    _balanceOf[v6] = _balanceOf[v6] - varg0;\n    v7 = address(varg1);\n    _balanceOf[v7] += varg0;\n    emit Transfer(v6, v7, varg0);\n    return ;\n}\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction changeIcoStatus(uint8 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _icoStatus = 0xff & (varg0 & 0xff);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction getConBal() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    return (address(this)).balance;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 < _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x11e7(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    v2 = v3 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v2 = _bkaddress == msg.sender;\n    }\n    require(v2);\n    v4 = _benAddress.call().value(varg0).gas(2300 * !varg0);\n    require(v4);\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction amountCollected() public nonPayable { \n    return _amountCollected;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] > varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction getTokenPrice() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    return _icoTokenPrice;\n}\n\nfunction remaining() public nonPayable { \n    return _remaining;\n}\n\nfunction icoTokenPrice() public nonPayable { \n    return _icoTokenPrice;\n}\n\nfunction bkaddress() public nonPayable { \n    return _bkaddress;\n}\n\nfunction setTokenPrice(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _icoTokenPrice = varg0;\n}\n\nfunction setEthRate(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _ethRate = varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction getEthRate() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    return _ethRate;\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction adm_trasfer(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    0x11e7(varg2, varg1, varg0);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x11e7(varg1, varg0, msg.sender);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction mintToken(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    if (varg0 > 0) {\n        _balanceOf[_owner] += varg0 * 0xde0b6b3a7640000;\n        _totalSupply += varg0 * 0xde0b6b3a7640000;\n        emit Transfer(0, _owner, varg0 * 0xde0b6b3a7640000);\n        goto 0x1cc0x4e6;\n    }\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v4 + v3.data] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = 1;\n    }\n    return v1;\n}\n\nfunction sellOffline(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    if (_remaining > 0) {\n        if (0xde0b6b3a7640000 * varg1 < _remaining) {\n            _remaining = _remaining - 0xde0b6b3a7640000 * varg1;\n            0x11e7(0xde0b6b3a7640000 * varg1, varg0, _owner);\n            emit TransferSell(_owner, varg0, 0xde0b6b3a7640000 * varg1, 'Offline');\n            exit;\n        }\n    }\n    revert();\n}\n\nfunction ethRate() public nonPayable { \n    return _ethRate;\n}\n\nfunction setTransferStatus(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _allowTransferToken = varg0;\n}\n\nfunction icoStatus() public nonPayable { \n    return _icoStatus;\n}\n\nfunction withdraw_all() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    v2 = v3 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v2 = _bkaddress == msg.sender;\n    }\n    require(v2);\n    v4 = _benAddress.call().value(~0x2386f26fc0ffff + (address(this)).balance).gas(!(~0x2386f26fc0ffff + (address(this)).balance) * 2300);\n    require(v4);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction getCollectedAmount() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    return _amountCollected;\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction benAddress() public nonPayable { \n    return _benAddress;\n}\n\nfunction allowTransferToken() public nonPayable { \n    return _allowTransferToken;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _balanceOf[_owner] = 0;\n    _balanceOf[varg0] = _remaining;\n    _owner = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x11d414af == function_selector) {\n            changeIcoStatus(uint8);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x2242cf7f == function_selector) {\n            getConBal();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x332f7acf == function_selector) {\n            amountCollected();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b94f50e == function_selector) {\n            getTokenPrice();\n        } else if (0x55234ec0 == function_selector) {\n            remaining();\n        } else if (0x5c0e6bc4 == function_selector) {\n            icoTokenPrice();\n        } else if (0x62d21602 == function_selector) {\n            bkaddress();\n        } else if (0x6a61e5fc == function_selector) {\n            setTokenPrice(uint256);\n        } else if (0x6f4215b1 == function_selector) {\n            setEthRate(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x75b44aea == function_selector) {\n            getEthRate();\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x88af883b == function_selector) {\n            adm_trasfer(address,address,uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xc634d032 == function_selector) {\n            mintToken(uint256);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xcf3d1e3c == function_selector) {\n            sellOffline(address,uint256);\n        } else if (0xd2d93f90 == function_selector) {\n            ethRate();\n        } else if (0xd6e89cf0 == function_selector) {\n            setTransferStatus(uint256);\n        } else if (0xd96e1f76 == function_selector) {\n            icoStatus();\n        } else if (0xdd473d2b == function_selector) {\n            withdraw_all();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xde571e48 == function_selector) {\n            getCollectedAmount();\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xea4dfce9 == function_selector) {\n            benAddress();\n        } else if (0xef6a676d == function_selector) {\n            allowTransferToken();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 08:41 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nuint256 _remaining; // STORAGE[0x4]\nuint256 _ethRate; // STORAGE[0x5]\nuint256 _amountCollected; // STORAGE[0x7]\nuint256 _icoStatus; // STORAGE[0x8]\nuint256 _icoTokenPrice; // STORAGE[0x9]\nuint256 _allowTransferToken; // STORAGE[0xc]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xd]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0xe]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0xf]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\naddress _owner; // STORAGE[0x6] bytes 0 to 19\naddress _benAddress; // STORAGE[0xa] bytes 0 to 19\naddress _bkaddress; // STORAGE[0xb] bytes 0 to 19\n\n// Events\nBurn(address, uint256);\nTransfer(address, address, uint256);\nTransferSell(address, address, uint256, string);\nFrozenFunds(address, bool);\n\nfunction 0x11e7(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    v0 = v1 = 1 == _allowTransferToken;\n    if (1 != _allowTransferToken) {\n        v0 = v2 = _owner == address(varg2);\n    }\n    require(v0);\n    v3 = address(varg2);\n    require(!(0xff & _frozenAccount[v3]));\n    require(address(varg1));\n    v4 = address(varg2);\n    require(_balanceOf[v4] > varg0);\n    v5 = address(varg1);\n    require(_balanceOf[v5] + varg0 > _balanceOf[v5]);\n    v6 = address(varg2);\n    _balanceOf[v6] = _balanceOf[v6] - varg0;\n    v7 = address(varg1);\n    _balanceOf[v7] += varg0;\n    emit Transfer(v6, v7, varg0);\n    return ;\n}\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction changeIcoStatus(uint8 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _icoStatus = 0xff & (varg0 & 0xff);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction getConBal() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    return (address(this)).balance;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 < _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x11e7(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    v2 = v3 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v2 = _bkaddress == msg.sender;\n    }\n    require(v2);\n    v4 = _benAddress.call().value(varg0).gas(2300 * !varg0);\n    require(v4);\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction amountCollected() public nonPayable { \n    return _amountCollected;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] > varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction getTokenPrice() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    return _icoTokenPrice;\n}\n\nfunction remaining() public nonPayable { \n    return _remaining;\n}\n\nfunction icoTokenPrice() public nonPayable { \n    return _icoTokenPrice;\n}\n\nfunction bkaddress() public nonPayable { \n    return _bkaddress;\n}\n\nfunction setTokenPrice(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _icoTokenPrice = varg0;\n}\n\nfunction setEthRate(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _ethRate = varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction getEthRate() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    return _ethRate;\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction adm_trasfer(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    0x11e7(varg2, varg1, varg0);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x11e7(varg1, varg0, msg.sender);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction mintToken(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    if (varg0 > 0) {\n        _balanceOf[_owner] += varg0 * 0xde0b6b3a7640000;\n        _totalSupply += varg0 * 0xde0b6b3a7640000;\n        emit Transfer(0, _owner, varg0 * 0xde0b6b3a7640000);\n        goto 0x1cc0x4e6;\n    }\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v4 + v3.data] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = 1;\n    }\n    return v1;\n}\n\nfunction sellOffline(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    if (_remaining > 0) {\n        if (0xde0b6b3a7640000 * varg1 < _remaining) {\n            _remaining = _remaining - 0xde0b6b3a7640000 * varg1;\n            0x11e7(0xde0b6b3a7640000 * varg1, varg0, _owner);\n            emit TransferSell(_owner, varg0, 0xde0b6b3a7640000 * varg1, 'Offline');\n            exit;\n        }\n    }\n    revert();\n}\n\nfunction ethRate() public nonPayable { \n    return _ethRate;\n}\n\nfunction setTransferStatus(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _allowTransferToken = varg0;\n}\n\nfunction icoStatus() public nonPayable { \n    return _icoStatus;\n}\n\nfunction withdraw_all() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    v2 = v3 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v2 = _bkaddress == msg.sender;\n    }\n    require(v2);\n    v4 = _benAddress.call().value(~0x2386f26fc0ffff + (address(this)).balance).gas(!(~0x2386f26fc0ffff + (address(this)).balance) * 2300);\n    require(v4);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction getCollectedAmount() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    return _amountCollected;\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction benAddress() public nonPayable { \n    return _benAddress;\n}\n\nfunction allowTransferToken() public nonPayable { \n    return _allowTransferToken;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _balanceOf[_owner] = 0;\n    _balanceOf[varg0] = _remaining;\n    _owner = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x11d414af == function_selector) {\n            changeIcoStatus(uint8);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x2242cf7f == function_selector) {\n            getConBal();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x332f7acf == function_selector) {\n            amountCollected();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b94f50e == function_selector) {\n            getTokenPrice();\n        } else if (0x55234ec0 == function_selector) {\n            remaining();\n        } else if (0x5c0e6bc4 == function_selector) {\n            icoTokenPrice();\n        } else if (0x62d21602 == function_selector) {\n            bkaddress();\n        } else if (0x6a61e5fc == function_selector) {\n            setTokenPrice(uint256);\n        } else if (0x6f4215b1 == function_selector) {\n            setEthRate(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x75b44aea == function_selector) {\n            getEthRate();\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x88af883b == function_selector) {\n            adm_trasfer(address,address,uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xc634d032 == function_selector) {\n            mintToken(uint256);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xcf3d1e3c == function_selector) {\n            sellOffline(address,uint256);\n        } else if (0xd2d93f90 == function_selector) {\n            ethRate();\n        } else if (0xd6e89cf0 == function_selector) {\n            setTransferStatus(uint256);\n        } else if (0xd96e1f76 == function_selector) {\n            icoStatus();\n        } else if (0xdd473d2b == function_selector) {\n            withdraw_all();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xde571e48 == function_selector) {\n            getCollectedAmount();\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xea4dfce9 == function_selector) {\n            benAddress();\n        } else if (0xef6a676d == function_selector) {\n            allowTransferToken();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 08:41 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x0]\nuint256[] _symbol; // STORAGE[0x1]\nuint256 _totalSupply; // STORAGE[0x3]\nuint256 _remaining; // STORAGE[0x4]\nuint256 _ethRate; // STORAGE[0x5]\nuint256 _amountCollected; // STORAGE[0x7]\nuint256 _icoStatus; // STORAGE[0x8]\nuint256 _icoTokenPrice; // STORAGE[0x9]\nuint256 _allowTransferToken; // STORAGE[0xc]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0xd]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0xe]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0xf]\nuint8 _decimals; // STORAGE[0x2] bytes 0 to 0\naddress _owner; // STORAGE[0x6] bytes 0 to 19\naddress _benAddress; // STORAGE[0xa] bytes 0 to 19\naddress _bkaddress; // STORAGE[0xb] bytes 0 to 19\n\n// Events\nBurn(address, uint256);\nTransfer(address, address, uint256);\nTransferSell(address, address, uint256, string);\nFrozenFunds(address, bool);\n\nfunction 0x11e7(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    v0 = v1 = 1 == _allowTransferToken;\n    if (1 != _allowTransferToken) {\n        v0 = v2 = _owner == address(varg2);\n    }\n    require(v0);\n    v3 = address(varg2);\n    require(!(0xff & _frozenAccount[v3]));\n    require(address(varg1));\n    v4 = address(varg2);\n    require(_balanceOf[v4] > varg0);\n    v5 = address(varg1);\n    require(_balanceOf[v5] + varg0 > _balanceOf[v5]);\n    v6 = address(varg2);\n    _balanceOf[v6] = _balanceOf[v6] - varg0;\n    v7 = address(varg1);\n    _balanceOf[v7] += varg0;\n    emit Transfer(v6, v7, varg0);\n    return ;\n}\n\nfunction fallback() public payable { \n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction changeIcoStatus(uint8 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _icoStatus = 0xff & (varg0 & 0xff);\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction getConBal() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    return (address(this)).balance;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 < _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0x11e7(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    v2 = v3 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v2 = _bkaddress == msg.sender;\n    }\n    require(v2);\n    v4 = _benAddress.call().value(varg0).gas(2300 * !varg0);\n    require(v4);\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction amountCollected() public nonPayable { \n    return _amountCollected;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(_balanceOf[msg.sender] > varg0);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    _totalSupply = _totalSupply - varg0;\n    emit Burn(msg.sender, varg0);\n    return 1;\n}\n\nfunction getTokenPrice() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    return _icoTokenPrice;\n}\n\nfunction remaining() public nonPayable { \n    return _remaining;\n}\n\nfunction icoTokenPrice() public nonPayable { \n    return _icoTokenPrice;\n}\n\nfunction bkaddress() public nonPayable { \n    return _bkaddress;\n}\n\nfunction setTokenPrice(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _icoTokenPrice = varg0;\n}\n\nfunction setEthRate(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _ethRate = varg0;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction getEthRate() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    return _ethRate;\n}\n\nfunction burnFrom(address varg0, uint256 varg1) public nonPayable { \n    require(_balanceOf[varg0] >= varg1);\n    require(varg1 <= _allowance[msg.sender]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg1;\n    _allowance[msg.sender] = _allowance[msg.sender] - varg1;\n    _totalSupply = _totalSupply - varg1;\n    emit Burn(varg0, varg1);\n    return 1;\n}\n\nfunction adm_trasfer(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    0x11e7(varg2, varg1, varg0);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    0x11e7(varg1, varg0, msg.sender);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction mintToken(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    if (varg0 > 0) {\n        _balanceOf[_owner] += varg0 * 0xde0b6b3a7640000;\n        _totalSupply += varg0 * 0xde0b6b3a7640000;\n        emit Transfer(0, _owner, varg0 * 0xde0b6b3a7640000);\n        goto 0x1cc0x4e6;\n    }\n}\n\nfunction approveAndCall(address varg0, uint256 varg1, bytes varg2) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg2 + 36, (?).length);\n    v1 = v2 = 0;\n    _allowance[varg0] = varg1;\n    if (1) {\n        v3 = new array[](v0.length);\n        v4 = v5 = 0;\n        while (v4 < v0.length) {\n            MEM[v4 + v3.data] = MEM[v0.data + v4];\n            v4 += 32;\n        }\n        v6 = v7 = v0.length + v3.data;\n        if (0x1f & v0.length) {\n            MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n        }\n        require(varg0.code.size);\n        v8 = varg0.receiveApproval(msg.sender, varg1, address(this), v3).gas(msg.gas - 710);\n        require(v8);\n        v1 = 1;\n    }\n    return v1;\n}\n\nfunction sellOffline(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    if (_remaining > 0) {\n        if (0xde0b6b3a7640000 * varg1 < _remaining) {\n            _remaining = _remaining - 0xde0b6b3a7640000 * varg1;\n            0x11e7(0xde0b6b3a7640000 * varg1, varg0, _owner);\n            emit TransferSell(_owner, varg0, 0xde0b6b3a7640000 * varg1, 'Offline');\n            exit;\n        }\n    }\n    revert();\n}\n\nfunction ethRate() public nonPayable { \n    return _ethRate;\n}\n\nfunction setTransferStatus(uint256 varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _allowTransferToken = varg0;\n}\n\nfunction icoStatus() public nonPayable { \n    return _icoStatus;\n}\n\nfunction withdraw_all() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    v2 = v3 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v2 = _bkaddress == msg.sender;\n    }\n    require(v2);\n    v4 = _benAddress.call().value(~0x2386f26fc0ffff + (address(this)).balance).gas(!(~0x2386f26fc0ffff + (address(this)).balance) * 2300);\n    require(v4);\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction getCollectedAmount() public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    return _amountCollected;\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction benAddress() public nonPayable { \n    return _benAddress;\n}\n\nfunction allowTransferToken() public nonPayable { \n    return _allowTransferToken;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    v0 = v1 = _owner == msg.sender;\n    if (_owner != msg.sender) {\n        v0 = v2 = _bkaddress == msg.sender;\n    }\n    require(v0);\n    _balanceOf[_owner] = 0;\n    _balanceOf[varg0] = _remaining;\n    _owner = varg0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x11d414af == function_selector) {\n            changeIcoStatus(uint8);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x2242cf7f == function_selector) {\n            getConBal();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x332f7acf == function_selector) {\n            amountCollected();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x4b94f50e == function_selector) {\n            getTokenPrice();\n        } else if (0x55234ec0 == function_selector) {\n            remaining();\n        } else if (0x5c0e6bc4 == function_selector) {\n            icoTokenPrice();\n        } else if (0x62d21602 == function_selector) {\n            bkaddress();\n        } else if (0x6a61e5fc == function_selector) {\n            setTokenPrice(uint256);\n        } else if (0x6f4215b1 == function_selector) {\n            setEthRate(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x75b44aea == function_selector) {\n            getEthRate();\n        } else if (0x79cc6790 == function_selector) {\n            burnFrom(address,uint256);\n        } else if (0x88af883b == function_selector) {\n            adm_trasfer(address,address,uint256);\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xb414d4b6 == function_selector) {\n            frozenAccount(address);\n        } else if (0xc634d032 == function_selector) {\n            mintToken(uint256);\n        } else if (0xcae9ca51 == function_selector) {\n            approveAndCall(address,uint256,bytes);\n        } else if (0xcf3d1e3c == function_selector) {\n            sellOffline(address,uint256);\n        } else if (0xd2d93f90 == function_selector) {\n            ethRate();\n        } else if (0xd6e89cf0 == function_selector) {\n            setTransferStatus(uint256);\n        } else if (0xd96e1f76 == function_selector) {\n            icoStatus();\n        } else if (0xdd473d2b == function_selector) {\n            withdraw_all();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xde571e48 == function_selector) {\n            getCollectedAmount();\n        } else if (0xe724529c == function_selector) {\n            freezeAccount(address,bool);\n        } else if (0xea4dfce9 == function_selector) {\n            benAddress();\n        } else if (0xef6a676d == function_selector) {\n            allowTransferToken();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 41.2947895526886,
	"usage": {
		"completion_tokens": 705,
		"prompt_tokens": 4334,
		"total_tokens": 5039
	}
}