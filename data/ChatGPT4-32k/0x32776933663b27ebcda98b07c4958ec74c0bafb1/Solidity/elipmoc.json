{
	"address": "0x32776933663b27ebcda98b07c4958ec74c0bafb1",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity smart contract that corresponds to the provided decompiled code:\n\n```solidity\npragma solidity >=0.4.22 <0.9.0;\n\ncontract TokenContract {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    mapping (address => uint256) private _blacklist;\n    uint256 private _totalSupply;\n    uint256 private _totalDistributed;\n    uint256 private _totalRemaining;\n    uint256 private _value;\n    uint8 private _distributionFinished;\n    address private _transferOwnership;\n\n    event Approval(address indexed from, address indexed to, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Burn(address indexed from, uint256 value);\n    event DistrFinished();\n    event Distr(address indexed to, uint256 value);\n\n    function name() public pure returns (string memory) {\n        return \"eddbit\";\n    }\n\n    function approve(address to, uint256 value) public returns (bool success) {\n        _allowance[msg.sender][to] = value;\n        emit Approval(msg.sender, to, value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n        require(value <= _balanceOf[from]);\n        require(value <= _allowance[from][msg.sender]);\n        _balanceOf[from] -= value;\n        _allowance[from][msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 18;\n    }\n\n    function withdraw() public {\n        require(msg.sender == _transferOwnership);\n        payable(_transferOwnership).transfer(address(this).balance);\n    }\n\n    function value() public view returns (uint256) {\n        return _value;\n    }\n\n    function burn(uint256 value) public {\n        require(msg.sender == _transferOwnership);\n        require(value <= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] -= value;\n        _totalSupply -= value;\n        _totalDistributed -= value;\n        emit Burn(msg.sender, value);\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"EDD\";\n    }\n\n    function finishDistribution() public {\n        require(msg.sender == _transferOwnership);\n        require(!_distributionFinished);\n        _distributionFinished = 1;\n        emit DistrFinished();\n    }\n\n    function transfer(address to, uint256 value) public returns (bool success) {\n        require(value <= _balanceOf[msg.sender]);\n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function distributionFinished() public view returns (bool) {\n        return _distributionFinished;\n    }\n\n    function totalRemaining() public view returns (uint256) {\n        return _totalRemaining;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function totalDistributed() public view returns (uint256) {\n        return _totalDistributed;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _transferOwnership);\n        _transferOwnership = newOwner;\n    }\n\n    function blacklist(address account) public view returns (bool) {\n        return _blacklist[account] != 0;\n    }\n}\n```\n\nThis contract describes a token with functionalities such as transfer, approve, burn, and distribution. It includes events for Approval, Transfer, Burn, and Distribution. The contract also includes a blacklist functionality. \n\nThe actual logic of some functions (like `getTokens()`, `getTokenBalance(address varg0, address varg1)`, `withdrawForeignTokens(address varg0)`, and the private function `0x757()`) is skipped due to the lack of information. If there is more details or context, the implementation might be different.",
				"role": "assistant"
			}
		}
	],
	"created": 1701458957,
	"id": "chatcmpl-8R3UL5icCXgxDj7URKbsXESTES4gf",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 11:04 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _blacklist; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x5]\nuint256 _totalDistributed; // STORAGE[0x6]\nuint256 _totalRemaining; // STORAGE[0x7]\nuint256 _value; // STORAGE[0x8]\nuint8 _distributionFinished; // STORAGE[0x9] bytes 0 to 0\naddress _transferOwnership; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nBurn(address, uint256);\nDistrFinished();\nDistr(address, uint256);\n\nfunction fallback() public payable { \n    0x757();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (6) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffff & 'eddbit';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1 != 0;\n    if (v1) {\n        v0 = _allowance[varg0] != 0;\n    }\n    if (!v0) {\n        _allowance[varg0] = varg1;\n        emit Approval(msg.sender, varg0, varg1);\n        v2 = v3 = 1;\n    } else {\n        v2 = v4 = 0;\n    }\n    return v2;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    assert(msg.data.length >= 100);\n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    assert(_allowance[varg1] + varg2 >= _allowance[varg1]);\n    _balanceOf[varg1] = _allowance[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _transferOwnership);\n    v0 = _transferOwnership.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction value() public nonPayable { \n    return _value;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.sender == _transferOwnership);\n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _totalDistributed);\n    _totalDistributed = _totalDistributed - varg0;\n    emit Burn(msg.sender, varg0);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4544440000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction finishDistribution() public nonPayable { \n    require(msg.sender == _transferOwnership);\n    require(!_distributionFinished);\n    _distributionFinished = 1;\n    emit DistrFinished();\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    assert(msg.data.length >= 68);\n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction getTokens() public payable { \n    0x757();\n}\n\nfunction distributionFinished() public nonPayable { \n    return _distributionFinished;\n}\n\nfunction getTokenBalance(address varg0, address varg1) public nonPayable { \n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(varg1).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction totalRemaining() public nonPayable { \n    return _totalRemaining;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction withdrawForeignTokens(address varg0) public nonPayable { \n    require(msg.sender == _transferOwnership);\n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(varg0.code.size);\n    v2, v3 = varg0.transfer(_transferOwnership, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v3;\n}\n\nfunction totalDistributed() public nonPayable { \n    return _totalDistributed;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _transferOwnership);\n    if (varg0 != 0) {\n        _transferOwnership = varg0;\n    }\n}\n\nfunction blacklist(address varg0) public nonPayable { \n    return 0xff & _blacklist[varg0];\n}\n\nfunction 0x757() private { \n    require(!_distributionFinished);\n    require(0xff & _blacklist[msg.sender] == 0);\n    if (_value > _totalRemaining) {\n        _value = _totalRemaining;\n    }\n    require(_value <= _totalRemaining);\n    require(!_distributionFinished);\n    assert(_totalDistributed + _value >= _totalDistributed);\n    _totalDistributed = _totalDistributed + _value;\n    assert(_value <= _totalRemaining);\n    _totalRemaining = _totalRemaining - _value;\n    assert(_balanceOf[msg.sender] + _value >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + _value;\n    emit Distr(msg.sender, _value);\n    emit Transfer(0, msg.sender, _value);\n    if (_value > 0) {\n        _blacklist[msg.sender] = 0x1 | ~0xff & _blacklist[msg.sender];\n    }\n    if (_totalDistributed >= _totalSupply) {\n        _distributionFinished = 1;\n    }\n    assert(0x186a0);\n    v0 = v1 = _value / 0x186a0 == 0;\n    if (_value / 0x186a0 != 0) {\n        assert(_value / 0x186a0);\n        v0 = _value / 0x186a0 * 0x1869f / (_value / 0x186a0) == 0x1869f;\n    }\n    assert(v0);\n    _value = _value / 0x186a0 * 0x1869f;\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x3fa4f245 == function_selector) {\n            value();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9b1cbccc == function_selector) {\n            finishDistribution();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xaa6ca808 == function_selector) {\n            getTokens();\n        } else if (0xc108d542 == function_selector) {\n            distributionFinished();\n        } else if (0xc489744b == function_selector) {\n            getTokenBalance(address,address);\n        } else if (0xd8a54360 == function_selector) {\n            totalRemaining();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe58fc54c == function_selector) {\n            withdrawForeignTokens(address);\n        } else if (0xefca2eed == function_selector) {\n            totalDistributed();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf9f92be4 == function_selector) {\n            blacklist(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 11:04 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _blacklist; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x5]\nuint256 _totalDistributed; // STORAGE[0x6]\nuint256 _totalRemaining; // STORAGE[0x7]\nuint256 _value; // STORAGE[0x8]\nuint8 _distributionFinished; // STORAGE[0x9] bytes 0 to 0\naddress _transferOwnership; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nBurn(address, uint256);\nDistrFinished();\nDistr(address, uint256);\n\nfunction fallback() public payable { \n    0x757();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (6) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffff & 'eddbit';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1 != 0;\n    if (v1) {\n        v0 = _allowance[varg0] != 0;\n    }\n    if (!v0) {\n        _allowance[varg0] = varg1;\n        emit Approval(msg.sender, varg0, varg1);\n        v2 = v3 = 1;\n    } else {\n        v2 = v4 = 0;\n    }\n    return v2;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    assert(msg.data.length >= 100);\n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    assert(_allowance[varg1] + varg2 >= _allowance[varg1]);\n    _balanceOf[varg1] = _allowance[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _transferOwnership);\n    v0 = _transferOwnership.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction value() public nonPayable { \n    return _value;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.sender == _transferOwnership);\n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _totalDistributed);\n    _totalDistributed = _totalDistributed - varg0;\n    emit Burn(msg.sender, varg0);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4544440000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction finishDistribution() public nonPayable { \n    require(msg.sender == _transferOwnership);\n    require(!_distributionFinished);\n    _distributionFinished = 1;\n    emit DistrFinished();\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    assert(msg.data.length >= 68);\n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction getTokens() public payable { \n    0x757();\n}\n\nfunction distributionFinished() public nonPayable { \n    return _distributionFinished;\n}\n\nfunction getTokenBalance(address varg0, address varg1) public nonPayable { \n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(varg1).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction totalRemaining() public nonPayable { \n    return _totalRemaining;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction withdrawForeignTokens(address varg0) public nonPayable { \n    require(msg.sender == _transferOwnership);\n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(varg0.code.size);\n    v2, v3 = varg0.transfer(_transferOwnership, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v3;\n}\n\nfunction totalDistributed() public nonPayable { \n    return _totalDistributed;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _transferOwnership);\n    if (varg0 != 0) {\n        _transferOwnership = varg0;\n    }\n}\n\nfunction blacklist(address varg0) public nonPayable { \n    return 0xff & _blacklist[varg0];\n}\n\nfunction 0x757() private { \n    require(!_distributionFinished);\n    require(0xff & _blacklist[msg.sender] == 0);\n    if (_value > _totalRemaining) {\n        _value = _totalRemaining;\n    }\n    require(_value <= _totalRemaining);\n    require(!_distributionFinished);\n    assert(_totalDistributed + _value >= _totalDistributed);\n    _totalDistributed = _totalDistributed + _value;\n    assert(_value <= _totalRemaining);\n    _totalRemaining = _totalRemaining - _value;\n    assert(_balanceOf[msg.sender] + _value >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + _value;\n    emit Distr(msg.sender, _value);\n    emit Transfer(0, msg.sender, _value);\n    if (_value > 0) {\n        _blacklist[msg.sender] = 0x1 | ~0xff & _blacklist[msg.sender];\n    }\n    if (_totalDistributed >= _totalSupply) {\n        _distributionFinished = 1;\n    }\n    assert(0x186a0);\n    v0 = v1 = _value / 0x186a0 == 0;\n    if (_value / 0x186a0 != 0) {\n        assert(_value / 0x186a0);\n        v0 = _value / 0x186a0 * 0x1869f / (_value / 0x186a0) == 0x1869f;\n    }\n    assert(v0);\n    _value = _value / 0x186a0 * 0x1869f;\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x3fa4f245 == function_selector) {\n            value();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9b1cbccc == function_selector) {\n            finishDistribution();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xaa6ca808 == function_selector) {\n            getTokens();\n        } else if (0xc108d542 == function_selector) {\n            distributionFinished();\n        } else if (0xc489744b == function_selector) {\n            getTokenBalance(address,address);\n        } else if (0xd8a54360 == function_selector) {\n            totalRemaining();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe58fc54c == function_selector) {\n            withdrawForeignTokens(address);\n        } else if (0xefca2eed == function_selector) {\n            totalDistributed();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf9f92be4 == function_selector) {\n            blacklist(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 11:04 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _blacklist; // STORAGE[0x4]\nuint256 _totalSupply; // STORAGE[0x5]\nuint256 _totalDistributed; // STORAGE[0x6]\nuint256 _totalRemaining; // STORAGE[0x7]\nuint256 _value; // STORAGE[0x8]\nuint8 _distributionFinished; // STORAGE[0x9] bytes 0 to 0\naddress _transferOwnership; // STORAGE[0x1] bytes 0 to 19\n\n// Events\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\nBurn(address, uint256);\nDistrFinished();\nDistr(address, uint256);\n\nfunction fallback() public payable { \n    0x757();\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (6) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffffffff & 'eddbit';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = varg1 != 0;\n    if (v1) {\n        v0 = _allowance[varg0] != 0;\n    }\n    if (!v0) {\n        _allowance[varg0] = varg1;\n        emit Approval(msg.sender, varg0, varg1);\n        v2 = v3 = 1;\n    } else {\n        v2 = v4 = 0;\n    }\n    return v2;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    assert(msg.data.length >= 100);\n    require(varg1 != 0);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    assert(_allowance[varg1] + varg2 >= _allowance[varg1]);\n    _balanceOf[varg1] = _allowance[varg1] + varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _transferOwnership);\n    v0 = _transferOwnership.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction value() public nonPayable { \n    return _value;\n}\n\nfunction burn(uint256 varg0) public nonPayable { \n    require(msg.sender == _transferOwnership);\n    require(varg0 <= _balanceOf[msg.sender]);\n    assert(varg0 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg0;\n    assert(varg0 <= _totalSupply);\n    _totalSupply = _totalSupply - varg0;\n    assert(varg0 <= _totalDistributed);\n    _totalDistributed = _totalDistributed - varg0;\n    emit Burn(msg.sender, varg0);\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v0.data + v2] = MEM[v1.data + v2];\n        v2 = v2 + 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4544440000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction finishDistribution() public nonPayable { \n    require(msg.sender == _transferOwnership);\n    require(!_distributionFinished);\n    _distributionFinished = 1;\n    emit DistrFinished();\n    return 1;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    assert(msg.data.length >= 68);\n    require(varg0 != 0);\n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(_balanceOf[varg0] + varg1 >= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] + varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction getTokens() public payable { \n    0x757();\n}\n\nfunction distributionFinished() public nonPayable { \n    return _distributionFinished;\n}\n\nfunction getTokenBalance(address varg0, address varg1) public nonPayable { \n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(varg1).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v1;\n}\n\nfunction totalRemaining() public nonPayable { \n    return _totalRemaining;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction withdrawForeignTokens(address varg0) public nonPayable { \n    require(msg.sender == _transferOwnership);\n    require(varg0.code.size);\n    v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(varg0.code.size);\n    v2, v3 = varg0.transfer(_transferOwnership, v1).gas(msg.gas);\n    require(v2); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    return v3;\n}\n\nfunction totalDistributed() public nonPayable { \n    return _totalDistributed;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _transferOwnership);\n    if (varg0 != 0) {\n        _transferOwnership = varg0;\n    }\n}\n\nfunction blacklist(address varg0) public nonPayable { \n    return 0xff & _blacklist[varg0];\n}\n\nfunction 0x757() private { \n    require(!_distributionFinished);\n    require(0xff & _blacklist[msg.sender] == 0);\n    if (_value > _totalRemaining) {\n        _value = _totalRemaining;\n    }\n    require(_value <= _totalRemaining);\n    require(!_distributionFinished);\n    assert(_totalDistributed + _value >= _totalDistributed);\n    _totalDistributed = _totalDistributed + _value;\n    assert(_value <= _totalRemaining);\n    _totalRemaining = _totalRemaining - _value;\n    assert(_balanceOf[msg.sender] + _value >= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + _value;\n    emit Distr(msg.sender, _value);\n    emit Transfer(0, msg.sender, _value);\n    if (_value > 0) {\n        _blacklist[msg.sender] = 0x1 | ~0xff & _blacklist[msg.sender];\n    }\n    if (_totalDistributed >= _totalSupply) {\n        _distributionFinished = 1;\n    }\n    assert(0x186a0);\n    v0 = v1 = _value / 0x186a0 == 0;\n    if (_value / 0x186a0 != 0) {\n        assert(_value / 0x186a0);\n        v0 = _value / 0x186a0 * 0x1869f / (_value / 0x186a0) == 0x1869f;\n    }\n    assert(v0);\n    _value = _value / 0x186a0 * 0x1869f;\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x3fa4f245 == function_selector) {\n            value();\n        } else if (0x42966c68 == function_selector) {\n            burn(uint256);\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0x9b1cbccc == function_selector) {\n            finishDistribution();\n        } else if (0xa9059cbb == function_selector) {\n            transfer(address,uint256);\n        } else if (0xaa6ca808 == function_selector) {\n            getTokens();\n        } else if (0xc108d542 == function_selector) {\n            distributionFinished();\n        } else if (0xc489744b == function_selector) {\n            getTokenBalance(address,address);\n        } else if (0xd8a54360 == function_selector) {\n            totalRemaining();\n        } else if (0xdd62ed3e == function_selector) {\n            allowance(address,address);\n        } else if (0xe58fc54c == function_selector) {\n            withdrawForeignTokens(address);\n        } else if (0xefca2eed == function_selector) {\n            totalDistributed();\n        } else if (0xf2fde38b == function_selector) {\n            transferOwnership(address);\n        } else if (0xf9f92be4 == function_selector) {\n            blacklist(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 88.34543371200562,
	"usage": {
		"completion_tokens": 899,
		"prompt_tokens": 2544,
		"total_tokens": 3443
	}
}