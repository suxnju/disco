{
	"address": "0x18639f44f946983bf3413d9b51322d05c29d269e",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity version of the decompiled code:\n\n```solidity\npragma solidity ^0.6.0;\n\ncontract DecompiledContract {\n\n    mapping (address => uint256) private _callers;\n    address private _disable;\n    address private _data;\n    bool private _disabled;\n\n    event Deposit(address indexed sender, uint256 amount);\n    event AppendCaller(address indexed caller);\n    event Withdraw(address indexed receiver, uint256 amount);\n    event CalledUpdate(address indexed oldData, address newData);\n    event RemoveCaller(address indexed caller);\n\n    modifier onlyDisable {\n        require(msg.sender == _disable, \"Not authorized\");\n        _;\n    }\n\n    function withdraw(uint256 amount) public {\n        _withdraw(amount, msg.sender);\n    }\n\n    function calledUpdate(address oldData, address newData) public onlyDisable {\n        if (_data == oldData) {\n            _data = newData;\n            emit CalledUpdate(oldData, newData);\n        }\n    }\n\n    function data() public view returns (address) {\n        return _data;\n    }\n\n    function callers(address caller) public view returns (uint256) {\n        return _callers[caller];\n    }\n\n    function disable(bool disabled) public onlyDisable {\n        _disabled = disabled;\n    }\n\n    function debugger() public view returns (address) {\n        return _disable;\n    }\n\n    function disableDebug() public onlyDisable {\n        _disable = address(0);\n    }\n\n    function disabled() public view returns (bool) {\n        return _disabled;\n    }\n\n    function removeCaller(address caller) public onlyDisable {\n        _callers[caller] = 0;\n        emit RemoveCaller(caller);\n    }\n\n    function appendCaller(address caller) public onlyDisable {\n        _callers[caller] = 1;\n        emit AppendCaller(caller);\n    }\n\n    function deposit() public payable {\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    function withdrawTo(address receiver, uint256 amount) public {\n        _withdraw(amount, receiver);\n    }\n\n    function _withdraw(uint256 amount, address receiver) private {\n        require(!_disabled, \"Withdraw is disabled\");\n        require(_data != address(0), \"Data address is not set\");\n        (bool success,) = receiver.call.value(amount)(\"\");\n        require(success, \"Withdraw failed\");\n        emit Withdraw(receiver, amount);\n    }\n\n}\n```\n\nThis contract has a few key components:\n\n- A mapping `_callers` that tracks some kind of permission status for each address.\n- An address `_disable`, which seems to be an admin or owner address that can disable certain functions.\n- An address `_data` that seems to be used for some kind of update function.\n- A bool `_disabled` that disables the `withdraw` function if set to `true`.\n\nThe contract also includes several events that provide transparency about the operations that are happening in the smart contract. These include `Deposit`, `AppendCaller`, `Withdraw`, `CalledUpdate`, and `RemoveCaller`.\n\nNote: This contract has been manually decompiled and may not be 100% accurate.",
				"role": "assistant"
			}
		}
	],
	"created": 1698039885,
	"id": "chatcmpl-8Ci2187bBxnQ1mH2EO16dTFMrKu0L",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 04:34 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _callers; // STORAGE[0x1]\naddress _disable; // STORAGE[0x0] bytes 0 to 19\naddress _data; // STORAGE[0x2] bytes 0 to 19\nuint8 _disabled; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nDeposit(address, uint256);\nAppendCaller(address);\nWithdraw(address, uint256);\nCalledUpdate(address, address);\nRemoveCaller(address);\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    0x306(varg0, msg.sender);\n}\n\nfunction calledUpdate(address varg0, address varg1) public nonPayable { \n    assert(msg.sender == _disable);\n    if (_data == varg0) {\n        _data = varg1;\n        emit CalledUpdate(varg0, varg1);\n    }\n}\n\nfunction data() public nonPayable { \n    return _data;\n}\n\nfunction callers(address varg0) public nonPayable { \n    return 0xff & _callers[varg0];\n}\n\nfunction disable(bool varg0) public nonPayable { \n    assert(msg.sender == _disable);\n    _disabled = varg0;\n}\n\nfunction debugger() public nonPayable { \n    return _disable;\n}\n\nfunction disableDebug() public nonPayable { \n    assert(msg.sender == _disable);\n    _disable = 0;\n}\n\nfunction disabled() public nonPayable { \n    return _disabled;\n}\n\nfunction removeCaller(address varg0) public nonPayable { \n    assert(msg.sender == _disable);\n    _callers[varg0] = ~0xff & _callers[varg0];\n    emit RemoveCaller(varg0);\n}\n\nfunction modifyCallers(address[] _remove, address[] _append) public nonPayable { \n    assert(msg.sender == _disable);\n    v0 = v1 = 0;\n    while (v0 < (?).length) {\n        assert(v0 < (?).length);\n        _callers[address((?)[v0])] = ~0xff & _callers[address((?)[v0])];\n        assert(v0 < (?).length);\n        emit RemoveCaller(address((?)[v0]));\n        v0 += 1;\n    }\n    v2 = v3 = 0;\n    while (v2 < (?).length) {\n        assert(v2 < (?).length);\n        _callers[address((?)[v2])] = 0x1 | ~0xff & _callers[address((?)[v2])];\n        assert(v2 < (?).length);\n        emit AppendCaller(address((?)[v2]));\n        v2 += 1;\n    }\n}\n\nfunction 0x306(uint256 varg0, uint256 varg1) private { \n    require(!_disabled);\n    require(_data.code.size);\n    v0, v1 = _data.ba('EmQueue').gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(msg.sender == address(v1));\n    v2 = address(varg1).call().value(varg0).gas(2300 * !varg0);\n    require(v2); // checks call status, propagates error data on error\n    emit Withdraw(address(varg1), varg0);\n    return ;\n}\n\nfunction deposit() public payable { \n    emit Deposit(msg.sender, msg.value);\n}\n\nfunction appendCaller(address varg0) public nonPayable { \n    assert(msg.sender == _disable);\n    _callers[varg0] = 0x1 | ~0xff & _callers[varg0];\n    emit AppendCaller(varg0);\n}\n\nfunction withdrawTo(address varg0, uint256 varg1) public nonPayable { \n    0x306(varg1, varg0);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0xc18865e) {\n            appendCaller(address);\n        } else if (0x205c2878 == function_selector) {\n            withdrawTo(address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x70cfaa8d == function_selector) {\n            calledUpdate(address,address);\n        } else if (0x73d4a13a == function_selector) {\n            data();\n        } else if (0x7bbf4a3f == function_selector) {\n            callers(address);\n        } else if (0xa6f2fd5c == function_selector) {\n            disable(bool);\n        } else if (0xb0f545ba == function_selector) {\n            0xb0f545ba();\n        } else if (0xb8b34132 == function_selector) {\n            0xb8b34132();\n        } else if (0xd0e30db0 != function_selector) {\n            if (0xee070805 == function_selector) {\n                disabled();\n            } else if (0xeef21cd2 == function_selector) {\n                removeCaller(address);\n            } else if (0xf359e65f == function_selector) {\n                0xf359e65f();\n            }\n        }\n    }\n    deposit();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 04:34 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _callers; // STORAGE[0x1]\naddress _disable; // STORAGE[0x0] bytes 0 to 19\naddress _data; // STORAGE[0x2] bytes 0 to 19\nuint8 _disabled; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nDeposit(address, uint256);\nAppendCaller(address);\nWithdraw(address, uint256);\nCalledUpdate(address, address);\nRemoveCaller(address);\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    0x306(varg0, msg.sender);\n}\n\nfunction calledUpdate(address varg0, address varg1) public nonPayable { \n    assert(msg.sender == _disable);\n    if (_data == varg0) {\n        _data = varg1;\n        emit CalledUpdate(varg0, varg1);\n    }\n}\n\nfunction data() public nonPayable { \n    return _data;\n}\n\nfunction callers(address varg0) public nonPayable { \n    return 0xff & _callers[varg0];\n}\n\nfunction disable(bool varg0) public nonPayable { \n    assert(msg.sender == _disable);\n    _disabled = varg0;\n}\n\nfunction debugger() public nonPayable { \n    return _disable;\n}\n\nfunction disableDebug() public nonPayable { \n    assert(msg.sender == _disable);\n    _disable = 0;\n}\n\nfunction disabled() public nonPayable { \n    return _disabled;\n}\n\nfunction removeCaller(address varg0) public nonPayable { \n    assert(msg.sender == _disable);\n    _callers[varg0] = ~0xff & _callers[varg0];\n    emit RemoveCaller(varg0);\n}\n\nfunction modifyCallers(address[] _remove, address[] _append) public nonPayable { \n    assert(msg.sender == _disable);\n    v0 = v1 = 0;\n    while (v0 < (?).length) {\n        assert(v0 < (?).length);\n        _callers[address((?)[v0])] = ~0xff & _callers[address((?)[v0])];\n        assert(v0 < (?).length);\n        emit RemoveCaller(address((?)[v0]));\n        v0 += 1;\n    }\n    v2 = v3 = 0;\n    while (v2 < (?).length) {\n        assert(v2 < (?).length);\n        _callers[address((?)[v2])] = 0x1 | ~0xff & _callers[address((?)[v2])];\n        assert(v2 < (?).length);\n        emit AppendCaller(address((?)[v2]));\n        v2 += 1;\n    }\n}\n\nfunction 0x306(uint256 varg0, uint256 varg1) private { \n    require(!_disabled);\n    require(_data.code.size);\n    v0, v1 = _data.ba('EmQueue').gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(msg.sender == address(v1));\n    v2 = address(varg1).call().value(varg0).gas(2300 * !varg0);\n    require(v2); // checks call status, propagates error data on error\n    emit Withdraw(address(varg1), varg0);\n    return ;\n}\n\nfunction deposit() public payable { \n    emit Deposit(msg.sender, msg.value);\n}\n\nfunction appendCaller(address varg0) public nonPayable { \n    assert(msg.sender == _disable);\n    _callers[varg0] = 0x1 | ~0xff & _callers[varg0];\n    emit AppendCaller(varg0);\n}\n\nfunction withdrawTo(address varg0, uint256 varg1) public nonPayable { \n    0x306(varg1, varg0);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0xc18865e) {\n            appendCaller(address);\n        } else if (0x205c2878 == function_selector) {\n            withdrawTo(address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x70cfaa8d == function_selector) {\n            calledUpdate(address,address);\n        } else if (0x73d4a13a == function_selector) {\n            data();\n        } else if (0x7bbf4a3f == function_selector) {\n            callers(address);\n        } else if (0xa6f2fd5c == function_selector) {\n            disable(bool);\n        } else if (0xb0f545ba == function_selector) {\n            0xb0f545ba();\n        } else if (0xb8b34132 == function_selector) {\n            0xb8b34132();\n        } else if (0xd0e30db0 != function_selector) {\n            if (0xee070805 == function_selector) {\n                disabled();\n            } else if (0xeef21cd2 == function_selector) {\n                removeCaller(address);\n            } else if (0xf359e65f == function_selector) {\n                0xf359e65f();\n            }\n        }\n    }\n    deposit();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 04:34 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _callers; // STORAGE[0x1]\naddress _disable; // STORAGE[0x0] bytes 0 to 19\naddress _data; // STORAGE[0x2] bytes 0 to 19\nuint8 _disabled; // STORAGE[0x0] bytes 20 to 20\n\n// Events\nDeposit(address, uint256);\nAppendCaller(address);\nWithdraw(address, uint256);\nCalledUpdate(address, address);\nRemoveCaller(address);\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    0x306(varg0, msg.sender);\n}\n\nfunction calledUpdate(address varg0, address varg1) public nonPayable { \n    assert(msg.sender == _disable);\n    if (_data == varg0) {\n        _data = varg1;\n        emit CalledUpdate(varg0, varg1);\n    }\n}\n\nfunction data() public nonPayable { \n    return _data;\n}\n\nfunction callers(address varg0) public nonPayable { \n    return 0xff & _callers[varg0];\n}\n\nfunction disable(bool varg0) public nonPayable { \n    assert(msg.sender == _disable);\n    _disabled = varg0;\n}\n\nfunction debugger() public nonPayable { \n    return _disable;\n}\n\nfunction disableDebug() public nonPayable { \n    assert(msg.sender == _disable);\n    _disable = 0;\n}\n\nfunction disabled() public nonPayable { \n    return _disabled;\n}\n\nfunction removeCaller(address varg0) public nonPayable { \n    assert(msg.sender == _disable);\n    _callers[varg0] = ~0xff & _callers[varg0];\n    emit RemoveCaller(varg0);\n}\n\nfunction modifyCallers(address[] _remove, address[] _append) public nonPayable { \n    assert(msg.sender == _disable);\n    v0 = v1 = 0;\n    while (v0 < (?).length) {\n        assert(v0 < (?).length);\n        _callers[address((?)[v0])] = ~0xff & _callers[address((?)[v0])];\n        assert(v0 < (?).length);\n        emit RemoveCaller(address((?)[v0]));\n        v0 += 1;\n    }\n    v2 = v3 = 0;\n    while (v2 < (?).length) {\n        assert(v2 < (?).length);\n        _callers[address((?)[v2])] = 0x1 | ~0xff & _callers[address((?)[v2])];\n        assert(v2 < (?).length);\n        emit AppendCaller(address((?)[v2]));\n        v2 += 1;\n    }\n}\n\nfunction 0x306(uint256 varg0, uint256 varg1) private { \n    require(!_disabled);\n    require(_data.code.size);\n    v0, v1 = _data.ba('EmQueue').gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    require(msg.sender == address(v1));\n    v2 = address(varg1).call().value(varg0).gas(2300 * !varg0);\n    require(v2); // checks call status, propagates error data on error\n    emit Withdraw(address(varg1), varg0);\n    return ;\n}\n\nfunction deposit() public payable { \n    emit Deposit(msg.sender, msg.value);\n}\n\nfunction appendCaller(address varg0) public nonPayable { \n    assert(msg.sender == _disable);\n    _callers[varg0] = 0x1 | ~0xff & _callers[varg0];\n    emit AppendCaller(varg0);\n}\n\nfunction withdrawTo(address varg0, uint256 varg1) public nonPayable { \n    0x306(varg1, varg0);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0xc18865e) {\n            appendCaller(address);\n        } else if (0x205c2878 == function_selector) {\n            withdrawTo(address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x70cfaa8d == function_selector) {\n            calledUpdate(address,address);\n        } else if (0x73d4a13a == function_selector) {\n            data();\n        } else if (0x7bbf4a3f == function_selector) {\n            callers(address);\n        } else if (0xa6f2fd5c == function_selector) {\n            disable(bool);\n        } else if (0xb0f545ba == function_selector) {\n            0xb0f545ba();\n        } else if (0xb8b34132 == function_selector) {\n            0xb8b34132();\n        } else if (0xd0e30db0 != function_selector) {\n            if (0xee070805 == function_selector) {\n                disabled();\n            } else if (0xeef21cd2 == function_selector) {\n                removeCaller(address);\n            } else if (0xf359e65f == function_selector) {\n                0xf359e65f();\n            }\n        }\n    }\n    deposit();\n}\n.",
	"status": "1",
	"time_cost": 41.684688091278076,
	"usage": {
		"completion_tokens": 625,
		"prompt_tokens": 1282,
		"total_tokens": 1907
	}
}