{
	"address": "0x01b34fe45b5c00b71d6ff47e76781269aaa7b5c4",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity code according to the provided decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    mapping (uint256 => uint256) private _verifyPayment;\n\n    event UnauthorizedCashoutAttempt(address indexed sender, uint256 value);\n    event PaymentReceived(address indexed sender, uint256 value);\n\n    function getContractBalance() public view returns (uint256) { \n        return address(this).balance;\n    }\n\n    function buyCredit(bytes32 varg0) public payable returns (bool) { \n        require(msg.data.length - 4 >= 32);\n        _verifyPayment[uint256(varg0)] = 0x1 | ~0xff & _verifyPayment[uint256(varg0)];\n        emit PaymentReceived(msg.sender, msg.value);\n        return true;\n    }\n\n    function payRoyalty() public payable returns (bool) { \n        bool status0 = payable(0xcdad2d448583c1d9084f54c0d207b3ebe0398490).send(((address(this).balance >> 1) * 10 / 100));\n        require(status0);\n        bool status1 = payable(0xd204c49c66011787ef62d9dfd820fd32e07af7f6).send(((address(this).balance >> 1) * 90 / 100));\n        require(status1);\n        return true;\n    }\n\n    function cashOut(address varg0, uint256 varg1) public payable returns (bool) { \n        require(msg.data.length - 4 >= 64);\n        if (msg.sender == 0xb3b8d45a26d16adb41278aa8685538b937487b15) {\n            bool status = payable(varg0).send(varg1);\n            require(status);\n            // The original event is not correctly decompiled. Replace with a correct event.\n            emit PaymentReceived(varg0, varg1);\n            return true;\n        } else {\n            emit UnauthorizedCashoutAttempt(msg.sender, varg1);\n            return false;\n        }\n    }\n\n    function verifyPayment(bytes32 varg0) public view returns (uint256) { \n        require(msg.data.length - 4 >= 32);\n        return 0xff & _verifyPayment[uint256(varg0)];\n    }\n\n    fallback() external payable { \n        revert();\n    }\n}\n```\n\nPlease note that the `__function_selector__` function is not needed in Solidity as the function dispatch is handled by the EVM according to the function signature. Also, the original event in the `cashOut` function seems not correctly decompiled and replaced with a correct event `PaymentReceived`.",
				"role": "assistant"
			}
		}
	],
	"created": 1701461898,
	"id": "chatcmpl-8R4FmTsedEv2Iw0JqdeYUwnLVVILZ",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.15 20:46 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _verifyPayment; // STORAGE[0x0]\n\n// Events\nUnauthorizedCashoutAttempt(address, uint256);\nPaymentReceived(address, uint256);\n\nfunction getContractBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction buyCredit(bytes32 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    _verifyPayment[varg0] = 0x1 | ~0xff & _verifyPayment[varg0];\n    emit PaymentReceived(msg.sender, msg.value);\n    return 1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction payRoyalty() public payable { \n    v0 = 0xcdad2d448583c1d9084f54c0d207b3ebe0398490.call().value(((address(this)).balance >> 1) * 10 / 100).gas(!(((address(this)).balance >> 1) * 10 / 100) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    v1 = 0xd204c49c66011787ef62d9dfd820fd32e07af7f6.call().value(((address(this)).balance >> 1) * 90 / 100).gas(!(((address(this)).balance >> 1) * 90 / 100) * 2300);\n    require(v1); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction cashOut(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    if (msg.sender == 0xb3b8d45a26d16adb41278aa8685538b937487b15) {\n        v0 = varg0.call().value(varg1).gas(!varg1 * 2300);\n        require(v0); // checks call status, propagates error data on error\n        emit 0xa58819e8a8484b4b953261f35757d54a8bb44412938c22784e056a69ffa17c9(varg0, msg.sender, varg1);\n        v1 = v2 = 1;\n    } else {\n        emit UnauthorizedCashoutAttempt(msg.sender, varg1);\n        v1 = v3 = 0;\n    }\n    return v1;\n}\n\nfunction verifyPayment(bytes32 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _verifyPayment[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x212d6723 == function_selector >> 224) {\n            payRoyalty();\n        } else if (0x22405443 == function_selector >> 224) {\n            cashOut(address,uint256);\n        } else if (0x48e68950 == function_selector >> 224) {\n            verifyPayment(bytes32);\n        } else if (0x6f9fb98a == function_selector >> 224) {\n            getContractBalance();\n        } else if (0x818a8abe == function_selector >> 224) {\n            buyCredit(bytes32);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 20:46 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _verifyPayment; // STORAGE[0x0]\n\n// Events\nUnauthorizedCashoutAttempt(address, uint256);\nPaymentReceived(address, uint256);\n\nfunction getContractBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction buyCredit(bytes32 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    _verifyPayment[varg0] = 0x1 | ~0xff & _verifyPayment[varg0];\n    emit PaymentReceived(msg.sender, msg.value);\n    return 1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction payRoyalty() public payable { \n    v0 = 0xcdad2d448583c1d9084f54c0d207b3ebe0398490.call().value(((address(this)).balance >> 1) * 10 / 100).gas(!(((address(this)).balance >> 1) * 10 / 100) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    v1 = 0xd204c49c66011787ef62d9dfd820fd32e07af7f6.call().value(((address(this)).balance >> 1) * 90 / 100).gas(!(((address(this)).balance >> 1) * 90 / 100) * 2300);\n    require(v1); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction cashOut(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    if (msg.sender == 0xb3b8d45a26d16adb41278aa8685538b937487b15) {\n        v0 = varg0.call().value(varg1).gas(!varg1 * 2300);\n        require(v0); // checks call status, propagates error data on error\n        emit 0xa58819e8a8484b4b953261f35757d54a8bb44412938c22784e056a69ffa17c9(varg0, msg.sender, varg1);\n        v1 = v2 = 1;\n    } else {\n        emit UnauthorizedCashoutAttempt(msg.sender, varg1);\n        v1 = v3 = 0;\n    }\n    return v1;\n}\n\nfunction verifyPayment(bytes32 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _verifyPayment[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x212d6723 == function_selector >> 224) {\n            payRoyalty();\n        } else if (0x22405443 == function_selector >> 224) {\n            cashOut(address,uint256);\n        } else if (0x48e68950 == function_selector >> 224) {\n            verifyPayment(bytes32);\n        } else if (0x6f9fb98a == function_selector >> 224) {\n            getContractBalance();\n        } else if (0x818a8abe == function_selector >> 224) {\n            buyCredit(bytes32);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.15 20:46 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _verifyPayment; // STORAGE[0x0]\n\n// Events\nUnauthorizedCashoutAttempt(address, uint256);\nPaymentReceived(address, uint256);\n\nfunction getContractBalance() public nonPayable { \n    return (address(this)).balance;\n}\n\nfunction buyCredit(bytes32 varg0) public payable { \n    require(msg.data.length - 4 >= 32);\n    _verifyPayment[varg0] = 0x1 | ~0xff & _verifyPayment[varg0];\n    emit PaymentReceived(msg.sender, msg.value);\n    return 1;\n}\n\nfunction fallback() public payable { \n    revert();\n}\n\nfunction payRoyalty() public payable { \n    v0 = 0xcdad2d448583c1d9084f54c0d207b3ebe0398490.call().value(((address(this)).balance >> 1) * 10 / 100).gas(!(((address(this)).balance >> 1) * 10 / 100) * 2300);\n    require(v0); // checks call status, propagates error data on error\n    v1 = 0xd204c49c66011787ef62d9dfd820fd32e07af7f6.call().value(((address(this)).balance >> 1) * 90 / 100).gas(!(((address(this)).balance >> 1) * 90 / 100) * 2300);\n    require(v1); // checks call status, propagates error data on error\n    return 1;\n}\n\nfunction cashOut(address varg0, uint256 varg1) public payable { \n    require(msg.data.length - 4 >= 64);\n    if (msg.sender == 0xb3b8d45a26d16adb41278aa8685538b937487b15) {\n        v0 = varg0.call().value(varg1).gas(!varg1 * 2300);\n        require(v0); // checks call status, propagates error data on error\n        emit 0xa58819e8a8484b4b953261f35757d54a8bb44412938c22784e056a69ffa17c9(varg0, msg.sender, varg1);\n        v1 = v2 = 1;\n    } else {\n        emit UnauthorizedCashoutAttempt(msg.sender, varg1);\n        v1 = v3 = 0;\n    }\n    return v1;\n}\n\nfunction verifyPayment(bytes32 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return 0xff & _verifyPayment[varg0];\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x212d6723 == function_selector >> 224) {\n            payRoyalty();\n        } else if (0x22405443 == function_selector >> 224) {\n            cashOut(address,uint256);\n        } else if (0x48e68950 == function_selector >> 224) {\n            verifyPayment(bytes32);\n        } else if (0x6f9fb98a == function_selector >> 224) {\n            getContractBalance();\n        } else if (0x818a8abe == function_selector >> 224) {\n            buyCredit(bytes32);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 31.25059676170349,
	"usage": {
		"completion_tokens": 567,
		"prompt_tokens": 847,
		"total_tokens": 1414
	}
}