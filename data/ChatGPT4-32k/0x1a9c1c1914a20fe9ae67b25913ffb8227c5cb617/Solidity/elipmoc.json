{
	"address": "0x1a9c1c1914a20fe9ae67b25913ffb8227c5cb617",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The provided code is a pseudo Solidity code, making it a bit challenging to convert to a full Solidity contract. Below is a simplifed version of the full Solidity contract you may use based on the provided pseudo code:\n\n```solidity\npragma solidity >=0.6.0 <0.9.0;\n\ncontract Crowdsale {\n    uint256 public _fundingGoal;\n    uint256 public _amountRaised;\n    uint256 public _deadline;\n    uint256 public _price;\n    mapping (address => uint256) public _balanceOf;\n    address payable public _beneficiary;\n    address public _tokenReward;\n    bool public _crowdsaleClosed = false;\n\n    event GoalReached(address recipient, uint256 totalAmountRaised);\n    event FundTransfer(address backer, uint256 amount, bool isContribution);\n\n    constructor(\n        uint256 fundingGoalInEthers,\n        uint256 durationInMinutes,\n        uint256 etherCostOfEachToken,\n        address addressOfTokenUsedAsReward\n    ) public {\n        _beneficiary = msg.sender;\n        _fundingGoal = fundingGoalInEthers;\n        _deadline = block.timestamp + durationInMinutes * 1 minutes;\n        _price = etherCostOfEachToken;\n        _tokenReward = addressOfTokenUsedAsReward;\n    }\n\n    function checkGoalReached() public {\n        if (block.timestamp >= _deadline) {\n            if (_amountRaised >= _fundingGoal) {\n                _crowdsaleClosed = true;\n                emit GoalReached(_beneficiary, _amountRaised);\n            }\n            _crowdsaleClosed = true;\n        }\n    }\n\n    function safeWithdrawal() public {\n        if (block.timestamp >= _deadline) {\n            if (_beneficiary == msg.sender) {\n                if (_beneficiary.send(_amountRaised)) {\n                    _amountRaised = 0;\n                    emit FundTransfer(_beneficiary, _amountRaised, false);\n                }\n            }\n        }\n    }\n}\n```\nPlease note that this is a simplified and basic version of a crowdsale contract, you would need to add more features, security measures and tests to make this a production-ready contract. This contract also doesn't handle the token transfers which would be needed for a full crowdsale contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701463694,
	"id": "chatcmpl-8R4ikD0zZTVaROVehvgrmlmHFY36i",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 21:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x2]\nuint256 _amountRaised; // STORAGE[0x3]\nuint256 _deadline; // STORAGE[0x4]\nuint256 _price; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x7]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\nuint8 stor_8_0_0; // STORAGE[0x8] bytes 0 to 0\nuint8 _crowdsaleClosed; // STORAGE[0x8] bytes 1 to 1\nuint160 _tokenAdmin; // STORAGE[0x1] bytes 0 to 19\naddress _tokenReward; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            stor_8_0_0 = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _crowdsaleClosed = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction tokenAdmin() public nonPayable { \n    return _tokenAdmin;\n}\n\nfunction crowdsaleClosed() public nonPayable { \n    return _crowdsaleClosed;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_beneficiary == msg.sender) {\n            v0 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (v0) {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xb7e1917c == function_selector) {\n            tokenAdmin();\n        } else if (0xccb07cef == function_selector) {\n            crowdsaleClosed();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    require(!_crowdsaleClosed);\n    _balanceOf[msg.sender] = msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    assert(stor_5_0_0);\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transferFrom(_tokenAdmin, msg.sender, msg.value / _price).gas(msg.gas - 710);\n    require(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 21:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x2]\nuint256 _amountRaised; // STORAGE[0x3]\nuint256 _deadline; // STORAGE[0x4]\nuint256 _price; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x7]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\nuint8 stor_8_0_0; // STORAGE[0x8] bytes 0 to 0\nuint8 _crowdsaleClosed; // STORAGE[0x8] bytes 1 to 1\nuint160 _tokenAdmin; // STORAGE[0x1] bytes 0 to 19\naddress _tokenReward; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            stor_8_0_0 = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _crowdsaleClosed = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction tokenAdmin() public nonPayable { \n    return _tokenAdmin;\n}\n\nfunction crowdsaleClosed() public nonPayable { \n    return _crowdsaleClosed;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_beneficiary == msg.sender) {\n            v0 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (v0) {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xb7e1917c == function_selector) {\n            tokenAdmin();\n        } else if (0xccb07cef == function_selector) {\n            crowdsaleClosed();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    require(!_crowdsaleClosed);\n    _balanceOf[msg.sender] = msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    assert(stor_5_0_0);\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transferFrom(_tokenAdmin, msg.sender, msg.value / _price).gas(msg.gas - 710);\n    require(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 21:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x2]\nuint256 _amountRaised; // STORAGE[0x3]\nuint256 _deadline; // STORAGE[0x4]\nuint256 _price; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x7]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\nuint8 stor_8_0_0; // STORAGE[0x8] bytes 0 to 0\nuint8 _crowdsaleClosed; // STORAGE[0x8] bytes 1 to 1\nuint160 _tokenAdmin; // STORAGE[0x1] bytes 0 to 19\naddress _tokenReward; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            stor_8_0_0 = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _crowdsaleClosed = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction tokenAdmin() public nonPayable { \n    return _tokenAdmin;\n}\n\nfunction crowdsaleClosed() public nonPayable { \n    return _crowdsaleClosed;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_beneficiary == msg.sender) {\n            v0 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (v0) {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x1cb3b20 == function_selector) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector) {\n            deadline();\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x6e66f6e9 == function_selector) {\n            tokenReward();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0xa035b1fe == function_selector) {\n            price();\n        } else if (0xb7e1917c == function_selector) {\n            tokenAdmin();\n        } else if (0xccb07cef == function_selector) {\n            crowdsaleClosed();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        }\n    }\n    require(!_crowdsaleClosed);\n    _balanceOf[msg.sender] = msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    assert(stor_5_0_0);\n    require(_tokenReward.code.size);\n    v0 = _tokenReward.transferFrom(_tokenAdmin, msg.sender, msg.value / _price).gas(msg.gas - 710);\n    require(v0);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n.",
	"status": "1",
	"time_cost": 40.44260025024414,
	"usage": {
		"completion_tokens": 465,
		"prompt_tokens": 1014,
		"total_tokens": 1479
	}
}