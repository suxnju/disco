{
	"address": "0x1a9c1c1914a20fe9ae67b25913ffb8227c5cb617",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's a contract using Solidity 0.6.12 that matches the description you provided:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity 0.6.12;\n\ncontract Crowdsale {\n    using SafeMath for uint256;\n\n    address payable public beneficiary;\n    address public tokenadmin;\n    uint256 public fundinggoal;\n    uint256 public amountraised;\n    uint256 public deadline;\n    uint256 public price;\n    address public tokenreward;\n    mapping(address => uint256) public balanceof;\n    bool public crowdsaleclosed;\n    uint8 private decimals;\n\n    constructor() public payable {\n        decimals = 0;\n        crowdsaleclosed = false;\n        if (msg.value == 0) {\n            beneficiary = 0xDbe120fD820a0A4cc9E715f0cbD47d94f5c23638;\n            tokenadmin = 0x934b1498F515E74C6Ec5524A53086e4A02a9F2b8;\n            fundinggoal = 0xde0b6b3a7640000;\n            deadline = block.timestamp + 0x2e2480;\n            price = 0x5af3107a4000;\n            tokenreward = 0xb16DaB600Fc05702132602F4922c0E89e2985B9A;\n        }\n    }\n\n    fallback() external payable {\n        require(!crowdsaleclosed, \"Crowdsale is closed.\");\n        uint amount = msg.value;\n        balanceof[msg.sender] = balanceof[msg.sender].add(amount);\n        amountraised = amountraised.add(amount);\n        if (price != 0) {\n            (bool success, ) = tokenreward.call(abi.encodePacked(\"transferFrom\", tokenadmin, msg.sender, amount.div(price)));\n            require(success, \"Transfer failed.\");\n        }\n    }\n\n    function checkGoalReached() public {\n        require(block.timestamp >= deadline, \"Deadline not reached.\");\n        crowdsaleclosed = true;\n        if (amountraised >= fundinggoal) {\n            decimals = 1;\n        }\n    }\n\n    function safeWithdrawal() public {\n        require(block.timestamp >= deadline, \"Deadline not reached.\");\n        require(msg.sender == beneficiary, \"Only the beneficiary can withdraw.\");\n        (bool success, ) = beneficiary.call{value: amountraised}(\"\");\n        require(success, \"Transfer failed.\");\n    }\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        uint256 c = a / b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n}\n```\n\nThis contract uses the `SafeMath` library to prevent overflow and underflow in arithmetic operations. The `fallback` function is made `payable` to accept Ether and executes the described logic. The function `checkGoalReached` and `safeWithdrawal` are also implemented as described. Note that I made the `beneficiary` address payable to be able to transfer Ether to it.",
				"role": "assistant"
			}
		}
	],
	"created": 1701715183,
	"id": "chatcmpl-8S891aDXvS1eBSYWFot5f0Sv8UOfU",
	"input_format": "TemplateDescription",
	"ir": "For the payable constructor function.\n- the state variable decimals will be updated to 0.\n- the state variable crowdsaleclosed will be updated to 0.\n- When the ether just received (i.e., msg.value) is 0:\n  - the state variable beneficiary will be updated to 0xDbe120fD820a0A4cc9E715f0cbD47d94f5c23638.\n  - the state variable tokenadmin will be updated to 0x934b1498F515E74C6Ec5524A53086e4A02a9F2b8.\n  - the state variable fundinggoal will be updated to 0xde0b6b3a7640000.\n  - the state variable deadline will be updated to (current time+0x2e2480).\n  - the state variable price will be updated to 0x5af3107a4000.\n  - the external contract tokenreward will be updated to 0xb16DaB600Fc05702132602F4922c0E89e2985B9A.\n\nFor the payable fallback function.\n- When crowdsaleclosed is 0:\n  - the balance of caller will be updated to the ether just received (i.e., msg.value).\n  - the state variable amountraised will be updated to (amountraised+the ether just received (i.e., msg.value)).\n  - When price is not 0:\n    - it calls an external function transferFrom of the external contract tokenreward with the following argument list: tokenadmin, caller, and (the ether just received (i.e., msg.value)/price).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable crowdsaleclosed will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable decimals will be updated to 1.\n\nFor the safeWithdrawal function.\n- After deadline, and for beneficiary:\n  - it transfers ether valued amountraised to beneficiary.\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables and programming specifications are provided to help you develop. ",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the payable constructor function.\n- the state variable decimals will be updated to 0.\n- the state variable crowdsaleclosed will be updated to 0.\n- When the ether just received (i.e., msg.value) is 0:\n  - the state variable beneficiary will be updated to 0xDbe120fD820a0A4cc9E715f0cbD47d94f5c23638.\n  - the state variable tokenadmin will be updated to 0x934b1498F515E74C6Ec5524A53086e4A02a9F2b8.\n  - the state variable fundinggoal will be updated to 0xde0b6b3a7640000.\n  - the state variable deadline will be updated to (current time+0x2e2480).\n  - the state variable price will be updated to 0x5af3107a4000.\n  - the external contract tokenreward will be updated to 0xb16DaB600Fc05702132602F4922c0E89e2985B9A.\n\nFor the payable fallback function.\n- When crowdsaleclosed is 0:\n  - the balance of caller will be updated to the ether just received (i.e., msg.value).\n  - the state variable amountraised will be updated to (amountraised+the ether just received (i.e., msg.value)).\n  - When price is not 0:\n    - it calls an external function transferFrom of the external contract tokenreward with the following argument list: tokenadmin, caller, and (the ether just received (i.e., msg.value)/price).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable crowdsaleclosed will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable decimals will be updated to 1.\n\nFor the safeWithdrawal function.\n- After deadline, and for beneficiary:\n  - it transfers ether valued amountraised to beneficiary.\n\n.\n Here are some state variables with their corresponding types: public state variable `beneficiary` is typed address,public state variable `tokenadmin` is typed address,public state variable `fundinggoal` is typed uint256,public state variable `amountraised` is typed uint256,public state variable `deadline` is typed uint256,public state variable `price` is typed uint256,public state variable `tokenreward` is typed address,public state variable `balanceof` is typed mapping,public state variable `crowdsaleclosed` is typed bool,private state variable `decimals` is typed uint8.\n Here are some programming specifications: - You must declare a variable before you can use it, but the same variable cannot be declared twice\n- You must lock the pragma and use a stable version (e.g., pragma solidity `0.6.12`).\n- For exteranal calls, you must use `.call()` instead of `.transfer()` and `.send()`.\n- The target address who receives ether must be `payable address` type.\n- You must make the function `payable` if `msg.value` is used in the public functions.\n- From security perspectives, you must check whether an overflow or underflow is possible before an arithmetic operation (e.g., safemath operations), and you should determine whether the user's address is empty before transferring ether to the him.\n- You cannot import external resources because you are a separate contract.\n- You must use the following methods in new versions rather than old methods\n  - For some built-in functions, \n    - `abi.encodePacked(...) returns (bytes memory)` performs packed encoding of arguments to bytes.\n    - `keccak256(bytes memory) returns (bytes32)` computes the Keccak-256 hash of the input.\n    - `sha256(bytes memory) returns (bytes32)` computes the SHA-256 hash of the input.\n    - `ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)` recovers the address associated with the public key from elliptic curve signature or return zero on error. \n  - For some properties,\n    - `block.number (uint)` returns the current block number.\n    - `block.timestamp (uint)` returns the current block timestamp as seconds since unix epoch.\n    - `blockhash(uint blockNumber) returns (bytes32)` returns the hash of the given block.\n- `0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` means `-1`, so `+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` indeed means `-1`.\n",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables and programming specifications are provided to help you develop. The following is the description of the contract logic: For the payable constructor function.\n- the state variable decimals will be updated to 0.\n- the state variable crowdsaleclosed will be updated to 0.\n- When the ether just received (i.e., msg.value) is 0:\n  - the state variable beneficiary will be updated to 0xDbe120fD820a0A4cc9E715f0cbD47d94f5c23638.\n  - the state variable tokenadmin will be updated to 0x934b1498F515E74C6Ec5524A53086e4A02a9F2b8.\n  - the state variable fundinggoal will be updated to 0xde0b6b3a7640000.\n  - the state variable deadline will be updated to (current time+0x2e2480).\n  - the state variable price will be updated to 0x5af3107a4000.\n  - the external contract tokenreward will be updated to 0xb16DaB600Fc05702132602F4922c0E89e2985B9A.\n\nFor the payable fallback function.\n- When crowdsaleclosed is 0:\n  - the balance of caller will be updated to the ether just received (i.e., msg.value).\n  - the state variable amountraised will be updated to (amountraised+the ether just received (i.e., msg.value)).\n  - When price is not 0:\n    - it calls an external function transferFrom of the external contract tokenreward with the following argument list: tokenadmin, caller, and (the ether just received (i.e., msg.value)/price).\n\nFor the checkGoalReached function.\n- After deadline:\n  - the state variable crowdsaleclosed will be updated to 1.\n  - When amountraised is not smaller than fundinggoal:\n    - the state variable decimals will be updated to 1.\n\nFor the safeWithdrawal function.\n- After deadline, and for beneficiary:\n  - it transfers ether valued amountraised to beneficiary.\n\n.\n Here are some state variables with their corresponding types: public state variable `beneficiary` is typed address,public state variable `tokenadmin` is typed address,public state variable `fundinggoal` is typed uint256,public state variable `amountraised` is typed uint256,public state variable `deadline` is typed uint256,public state variable `price` is typed uint256,public state variable `tokenreward` is typed address,public state variable `balanceof` is typed mapping,public state variable `crowdsaleclosed` is typed bool,private state variable `decimals` is typed uint8.\n Here are some programming specifications: - You must declare a variable before you can use it, but the same variable cannot be declared twice\n- You must lock the pragma and use a stable version (e.g., pragma solidity `0.6.12`).\n- For exteranal calls, you must use `.call()` instead of `.transfer()` and `.send()`.\n- The target address who receives ether must be `payable address` type.\n- You must make the function `payable` if `msg.value` is used in the public functions.\n- From security perspectives, you must check whether an overflow or underflow is possible before an arithmetic operation (e.g., safemath operations), and you should determine whether the user's address is empty before transferring ether to the him.\n- You cannot import external resources because you are a separate contract.\n- You must use the following methods in new versions rather than old methods\n  - For some built-in functions, \n    - `abi.encodePacked(...) returns (bytes memory)` performs packed encoding of arguments to bytes.\n    - `keccak256(bytes memory) returns (bytes32)` computes the Keccak-256 hash of the input.\n    - `sha256(bytes memory) returns (bytes32)` computes the SHA-256 hash of the input.\n    - `ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)` recovers the address associated with the public key from elliptic curve signature or return zero on error. \n  - For some properties,\n    - `block.number (uint)` returns the current block number.\n    - `block.timestamp (uint)` returns the current block timestamp as seconds since unix epoch.\n    - `blockhash(uint blockNumber) returns (bytes32)` returns the hash of the given block.\n- `0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` means `-1`, so `+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` indeed means `-1`.\n",
	"status": "1",
	"time_cost": 28.471858024597168,
	"usage": {
		"completion_tokens": 808,
		"prompt_tokens": 1025,
		"total_tokens": 1833
	}
}