{
	"address": "0xbee149d5cef48724918836c48f2749a5c5f75f8c",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the contract code:\n\n```solidity\npragma solidity ^0.8.7;\n\ncontract Auction {\n    // Data structures and variables\n    uint256 private _auctionStart;\n    uint256 private _biddingTime;\n    uint256 private _highestBid;\n    mapping (address => uint256) private _withdraw;\n    bool private stor_5_0_0;\n    address private _highestBidder;\n\n    // Events\n    event HighestBidIncreased(address bidder, uint256 amount);\n    event AuctionEnded(address winner, uint256 amount);\n\n    // Methods\n    function auctionStart() public view returns (uint256) {\n        return _auctionStart;\n    }\n\n    function highestBidder() public view returns (address) {\n        return _highestBidder;\n    }\n\n    function biddingTime() public view returns (uint256) {\n        return _biddingTime;\n    }\n\n    function highestBid() public view returns (uint256) {\n        return _highestBid;\n    }\n\n    function bid() public payable {\n        require(block.timestamp <= _auctionStart + _biddingTime);\n        require(msg.value > _highestBid);\n        if (_highestBidder != address(0)) {\n            _withdraw[_highestBidder] += _highestBid;\n        }\n        _highestBidder = msg.sender;\n        _highestBid = msg.value;\n        emit HighestBidIncreased(msg.sender, msg.value);\n    }\n\n    function auctionEnd() public {\n        require(block.timestamp >= _auctionStart + _biddingTime);\n        require(!stor_5_0_0);\n        stor_5_0_0 = true;\n        emit AuctionEnded(_highestBidder, _highestBid);\n        (bool success, ) = _highestBidder.call{value: _highestBid}(\"\");\n        require(success);\n    }\n\n    function withdraw() public {\n        uint256 amount = _withdraw[msg.sender];\n        if (amount > 0) {\n            _withdraw[msg.sender] = 0;\n            (bool success, ) = msg.sender.call{value: amount}(\"\");\n            if (!success) {\n                _withdraw[msg.sender] = amount;\n            }\n        }\n    }\n\n    function auctionEndTime() public view returns (uint256) {\n        return _auctionStart + _biddingTime;\n    }\n}\n```\n\nPlease note that the `__function_selector__` function was not translated into the Solidity code as this function is specific to the EVM and does not have an equivalent in Solidity. The dispatcher logic of the EVM is handled automatically by Solidity. Also, it's worth noting that I've made some assumptions such as the visibility of certain methods and the version of Solidity (0.8.7 in this case). Depending on your specific requirements, these could be adjusted as needed.",
				"role": "assistant"
			}
		}
	],
	"created": 1701461872,
	"id": "chatcmpl-8R4FMIOJZyCEkke8SjgnvSFK79UcI",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.24 15:22 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _auctionStart; // STORAGE[0x0]\nuint256 _biddingTime; // STORAGE[0x1]\nuint256 _highestBid; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _withdraw; // STORAGE[0x4]\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\naddress _highestBidder; // STORAGE[0x2] bytes 0 to 19\naddress stor_6_0_19; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nHighestBidIncreased(address, uint256);\nAuctionEnded(address, uint256);\n\nfunction auctionStart() public nonPayable { \n    return _auctionStart;\n}\n\nfunction highestBidder() public nonPayable { \n    return _highestBidder;\n}\n\nfunction biddingTime() public nonPayable { \n    return _biddingTime;\n}\n\nfunction highestBid() public nonPayable { \n    return _highestBid;\n}\n\nfunction bid() public payable { \n    require(block.timestamp <= _auctionStart + _biddingTime);\n    require(msg.value > _highestBid);\n    if (_highestBidder != 0) {\n        _withdraw[_highestBidder] = _withdraw[_highestBidder] + _highestBid;\n    }\n    _highestBidder = msg.sender;\n    _highestBid = msg.value;\n    emit HighestBidIncreased(msg.sender, msg.value);\n}\n\nfunction auctionEnd() public nonPayable { \n    require(block.timestamp >= _auctionStart + _biddingTime);\n    require(!stor_5_0_0);\n    stor_5_0_0 = 1;\n    emit AuctionEnded(_highestBidder, _highestBid);\n    v0 = stor_6_0_19.call().value(_highestBid).gas(!_highestBid * 2300);\n    require(v0);\n}\n\nfunction withdraw() public nonPayable { \n    if (_withdraw[msg.sender] > 0) {\n        _withdraw[msg.sender] = 0;\n        v0 = msg.sender.call().value(_withdraw[msg.sender]).gas(!_withdraw[msg.sender] * 2300);\n        if (!v0) {\n            _withdraw[msg.sender] = _withdraw[msg.sender];\n            v1 = 0;\n        }\n    }\n    return v1;\n    v1 = v2 = 1;\n}\n\nfunction auctionEndTime() public nonPayable { \n    return _auctionStart + _biddingTime;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x1998aeef == function_selector) {\n            bid();\n        } else if (0x2a24f46c == function_selector) {\n            auctionEnd();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b449cba == function_selector) {\n            auctionEndTime();\n        } else if (0x4f245ef7 == function_selector) {\n            auctionStart();\n        } else if (0x91f90157 == function_selector) {\n            highestBidder();\n        } else if (0xd074a38d == function_selector) {\n            biddingTime();\n        } else if (0xd57bde79 == function_selector) {\n            highestBid();\n        }\n    }\n    revert();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 15:22 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _auctionStart; // STORAGE[0x0]\nuint256 _biddingTime; // STORAGE[0x1]\nuint256 _highestBid; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _withdraw; // STORAGE[0x4]\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\naddress _highestBidder; // STORAGE[0x2] bytes 0 to 19\naddress stor_6_0_19; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nHighestBidIncreased(address, uint256);\nAuctionEnded(address, uint256);\n\nfunction auctionStart() public nonPayable { \n    return _auctionStart;\n}\n\nfunction highestBidder() public nonPayable { \n    return _highestBidder;\n}\n\nfunction biddingTime() public nonPayable { \n    return _biddingTime;\n}\n\nfunction highestBid() public nonPayable { \n    return _highestBid;\n}\n\nfunction bid() public payable { \n    require(block.timestamp <= _auctionStart + _biddingTime);\n    require(msg.value > _highestBid);\n    if (_highestBidder != 0) {\n        _withdraw[_highestBidder] = _withdraw[_highestBidder] + _highestBid;\n    }\n    _highestBidder = msg.sender;\n    _highestBid = msg.value;\n    emit HighestBidIncreased(msg.sender, msg.value);\n}\n\nfunction auctionEnd() public nonPayable { \n    require(block.timestamp >= _auctionStart + _biddingTime);\n    require(!stor_5_0_0);\n    stor_5_0_0 = 1;\n    emit AuctionEnded(_highestBidder, _highestBid);\n    v0 = stor_6_0_19.call().value(_highestBid).gas(!_highestBid * 2300);\n    require(v0);\n}\n\nfunction withdraw() public nonPayable { \n    if (_withdraw[msg.sender] > 0) {\n        _withdraw[msg.sender] = 0;\n        v0 = msg.sender.call().value(_withdraw[msg.sender]).gas(!_withdraw[msg.sender] * 2300);\n        if (!v0) {\n            _withdraw[msg.sender] = _withdraw[msg.sender];\n            v1 = 0;\n        }\n    }\n    return v1;\n    v1 = v2 = 1;\n}\n\nfunction auctionEndTime() public nonPayable { \n    return _auctionStart + _biddingTime;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x1998aeef == function_selector) {\n            bid();\n        } else if (0x2a24f46c == function_selector) {\n            auctionEnd();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b449cba == function_selector) {\n            auctionEndTime();\n        } else if (0x4f245ef7 == function_selector) {\n            auctionStart();\n        } else if (0x91f90157 == function_selector) {\n            highestBidder();\n        } else if (0xd074a38d == function_selector) {\n            biddingTime();\n        } else if (0xd57bde79 == function_selector) {\n            highestBid();\n        }\n    }\n    revert();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 15:22 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _auctionStart; // STORAGE[0x0]\nuint256 _biddingTime; // STORAGE[0x1]\nuint256 _highestBid; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _withdraw; // STORAGE[0x4]\nuint8 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\naddress _highestBidder; // STORAGE[0x2] bytes 0 to 19\naddress stor_6_0_19; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nHighestBidIncreased(address, uint256);\nAuctionEnded(address, uint256);\n\nfunction auctionStart() public nonPayable { \n    return _auctionStart;\n}\n\nfunction highestBidder() public nonPayable { \n    return _highestBidder;\n}\n\nfunction biddingTime() public nonPayable { \n    return _biddingTime;\n}\n\nfunction highestBid() public nonPayable { \n    return _highestBid;\n}\n\nfunction bid() public payable { \n    require(block.timestamp <= _auctionStart + _biddingTime);\n    require(msg.value > _highestBid);\n    if (_highestBidder != 0) {\n        _withdraw[_highestBidder] = _withdraw[_highestBidder] + _highestBid;\n    }\n    _highestBidder = msg.sender;\n    _highestBid = msg.value;\n    emit HighestBidIncreased(msg.sender, msg.value);\n}\n\nfunction auctionEnd() public nonPayable { \n    require(block.timestamp >= _auctionStart + _biddingTime);\n    require(!stor_5_0_0);\n    stor_5_0_0 = 1;\n    emit AuctionEnded(_highestBidder, _highestBid);\n    v0 = stor_6_0_19.call().value(_highestBid).gas(!_highestBid * 2300);\n    require(v0);\n}\n\nfunction withdraw() public nonPayable { \n    if (_withdraw[msg.sender] > 0) {\n        _withdraw[msg.sender] = 0;\n        v0 = msg.sender.call().value(_withdraw[msg.sender]).gas(!_withdraw[msg.sender] * 2300);\n        if (!v0) {\n            _withdraw[msg.sender] = _withdraw[msg.sender];\n            v1 = 0;\n        }\n    }\n    return v1;\n    v1 = v2 = 1;\n}\n\nfunction auctionEndTime() public nonPayable { \n    return _auctionStart + _biddingTime;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x1998aeef == function_selector) {\n            bid();\n        } else if (0x2a24f46c == function_selector) {\n            auctionEnd();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else if (0x4b449cba == function_selector) {\n            auctionEndTime();\n        } else if (0x4f245ef7 == function_selector) {\n            auctionStart();\n        } else if (0x91f90157 == function_selector) {\n            highestBidder();\n        } else if (0xd074a38d == function_selector) {\n            biddingTime();\n        } else if (0xd57bde79 == function_selector) {\n            highestBid();\n        }\n    }\n    revert();\n}\n.",
	"status": "1",
	"time_cost": 26.390507698059082,
	"usage": {
		"completion_tokens": 572,
		"prompt_tokens": 842,
		"total_tokens": 1414
	}
}