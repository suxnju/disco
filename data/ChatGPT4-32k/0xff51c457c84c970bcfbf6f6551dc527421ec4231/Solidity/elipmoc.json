{
	"address": "0xff51c457c84c970bcfbf6f6551dc527421ec4231",
	"choices": {
		"finish_reason": "stop",
		"index": 0,
		"logprobs": null,
		"message": {
			"content": "Below is a Solidity contract that should closely represent the decompiled EVM Bytecode:\n\n```solidity\npragma solidity ^0.4.25;\n\ncontract Fundraiser {\n    uint256 public fundingGoal;\n    uint256 public amountRaised;\n    uint256 public deadline;\n    mapping(address => uint256) public balanceOf;\n    address public beneficiary;\n    bool public safeWithdrawal;\n    bool public fallback;\n\n    event FundTransfer(address backer, uint256 amount, bool isContribution);\n    event GoalReached(address recipient, uint256 totalAmountRaised);\n\n    function checkGoalReached() public {\n        require(block.timestamp >= deadline);\n        if (amountRaised >= fundingGoal) {\n            safeWithdrawal = true;\n            emit GoalReached(beneficiary, amountRaised);\n        }\n        fallback = true;\n    }\n\n    function withdrawFunds() public {\n        require(block.timestamp >= deadline);\n        if (!safeWithdrawal) {\n            balanceOf[msg.sender] = 0;\n            if (balanceOf[msg.sender] > 0) {\n                if (!msg.sender.send(balanceOf[msg.sender])) {\n                    balanceOf[msg.sender] = balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, balanceOf[msg.sender], false);\n                }\n            }\n        }\n        if (safeWithdrawal && beneficiary == msg.sender) {\n            if (!msg.sender.send(amountRaised)) {\n                safeWithdrawal = false;\n            } else {\n                emit FundTransfer(beneficiary, amountRaised, false);\n            }\n        }\n    }\n\n    function () public payable {\n        require(!fallback);\n        balanceOf[msg.sender] += msg.value;\n        amountRaised += msg.value;\n        emit FundTransfer(msg.sender, msg.value, true);\n    }\n}\n```\n\nPlease note that this contract is only a representation of the decompiled code and has not been tested. Always remember to test your contracts thoroughly before deploying them.",
			"function_call": null,
			"role": "assistant",
			"tool_calls": null
		}
	},
	"created": 1711532098,
	"id": "chatcmpl-97JyMpqhy84W5FtN4nl0wB8c9pX0J",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2022.11.14 19:24 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nuint256 _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint256 _safeWithdrawal; // STORAGE[0x5] bytes 0 to 0\nuint256 _fallback; // STORAGE[0x5] bytes 1 to 1\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            _safeWithdrawal = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _fallback = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (!_safeWithdrawal) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(!_balanceOf[msg.sender] * 2300);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = _safeWithdrawal;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = msg.sender.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v3) {\n                _safeWithdrawal = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction () public payable { \n    require(!_fallback);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector >> 224) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector >> 224) {\n            deadline();\n        } else if (0x38af3eed == function_selector >> 224) {\n            beneficiary();\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector >> 224) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector >> 224) {\n            amountRaised();\n        } else if (0xfd6b7ef8 == function_selector >> 224) {\n            safeWithdrawal();\n        }\n    }\n    ();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.11.14 19:24 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nuint256 _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint256 _safeWithdrawal; // STORAGE[0x5] bytes 0 to 0\nuint256 _fallback; // STORAGE[0x5] bytes 1 to 1\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            _safeWithdrawal = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _fallback = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (!_safeWithdrawal) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(!_balanceOf[msg.sender] * 2300);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = _safeWithdrawal;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = msg.sender.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v3) {\n                _safeWithdrawal = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction () public payable { \n    require(!_fallback);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector >> 224) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector >> 224) {\n            deadline();\n        } else if (0x38af3eed == function_selector >> 224) {\n            beneficiary();\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector >> 224) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector >> 224) {\n            amountRaised();\n        } else if (0xfd6b7ef8 == function_selector >> 224) {\n            safeWithdrawal();\n        }\n    }\n    ();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.11.14 19:24 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _fundingGoal; // STORAGE[0x1]\nuint256 _amountRaised; // STORAGE[0x2]\nuint256 _deadline; // STORAGE[0x3]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x4]\nuint256 _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint256 _safeWithdrawal; // STORAGE[0x5] bytes 0 to 0\nuint256 _fallback; // STORAGE[0x5] bytes 1 to 1\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _fundingGoal) {\n            _safeWithdrawal = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _fallback = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    return _balanceOf[varg0];\n}\n\nfunction fundingGoal() public nonPayable { \n    return _fundingGoal;\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (!_safeWithdrawal) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(!_balanceOf[msg.sender] * 2300);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = _safeWithdrawal;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = msg.sender.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v3) {\n                _safeWithdrawal = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction () public payable { \n    require(!_fallback);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == function_selector >> 224) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == function_selector >> 224) {\n            deadline();\n        } else if (0x38af3eed == function_selector >> 224) {\n            beneficiary();\n        } else if (0x70a08231 == function_selector >> 224) {\n            balanceOf(address);\n        } else if (0x7a3a0e84 == function_selector >> 224) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector >> 224) {\n            amountRaised();\n        } else if (0xfd6b7ef8 == function_selector >> 224) {\n            safeWithdrawal();\n        }\n    }\n    ();\n}\n.",
	"status": "1",
	"time_cost": 177.4425551891327,
	"usage": {
		"completion_tokens": 389,
		"prompt_tokens": 919,
		"total_tokens": 1308
	}
}