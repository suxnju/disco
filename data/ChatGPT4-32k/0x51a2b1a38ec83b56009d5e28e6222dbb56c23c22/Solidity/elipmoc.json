{
	"address": "0x51a2b1a38ec83b56009d5e28e6222dbb56c23c22",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled EVM Bytecode, the Solidity smart contract code could look like this:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    uint256 private _feeMake;\n    uint256 private _feeTake;\n    uint256 private _feeRebate;\n    mapping (uint256 => uint256) private _tokens;\n    mapping (uint256 => uint256) private _orders;\n    mapping (uint256 => uint256) private _orderFills;\n    address private _admin;\n    uint160 private _feeAccount;\n    address private _accountLevelsAddr;\n    mapping (uint256 => uint256) private _deposit;\n\n    event Trade(address indexed tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, address get, address give);\n    event Order(address indexed tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user);\n    event Cancel(address indexed tokenGet, uint256 amountGet, address tokenGive, uint256 amountGive, uint256 expires, uint256 nonce, address user, uint8 v, bytes32 r, bytes32 s);\n    event Deposit(address token, address user, uint256 amount, uint256 balance);\n    event Withdraw(address token, address user, uint256 amount, uint256 balance);\n\n    constructor() public {\n        _admin = msg.sender;\n        /* Initialize other state variables as needed */\n    }\n\n    function changeAdmin(address admin) external {\n        require(msg.sender == _admin);\n        _admin = admin;\n    }\n\n    function admin() external view returns (address) {\n        return _admin;\n    }\n\n    /* Add other function definitions as required */\n\n    function _SafeAdd(uint256 x, uint256 y) private pure returns (uint256 z) {\n        require((z = x + y) >= x);\n    }\n\n    function _SafeSub(uint256 x, uint256 y) private pure returns (uint256 z) {\n        require((z = x - y) <= x);\n    }\n\n    function _SafeMul(uint256 x, uint256 y) private pure returns (uint256 z) {\n        require(y == 0 || (z = x * y) / y == x);\n    }\n}\n```\n\nPlease note that this is a simplified Solidity code based on the decompiled EVM Bytecode. The actual Solidity code might have additional checks, different access controls, or other business logic. This code also does not include the function definitions for the functions that were identified in the Bytecode. You would need to add those based on your application's requirements.",
				"role": "assistant"
			}
		}
	],
	"created": 1701459040,
	"id": "chatcmpl-8R3Vg46Txz8L77PhA3iUxo1fPACiG",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.24 09:54 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _feeMake; // STORAGE[0x3]\nuint256 _feeTake; // STORAGE[0x4]\nuint256 _feeRebate; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _tokens; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _orders; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _orderFills; // STORAGE[0x8]\naddress _admin; // STORAGE[0x0] bytes 0 to 19\nuint160 _feeAccount; // STORAGE[0x1] bytes 0 to 19\naddress _accountLevelsAddr; // STORAGE[0x2] bytes 0 to 19\nmapping (uint256 => [uint256]) _deposit; // STORAGE[0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8]\n\n// Events\nTrade(address, uint256, address, uint256, address, address);\nOrder(address, uint256, address, uint256, uint256, uint256, address);\nCancel(address, uint256, address, uint256, uint256, uint256, address, uint8, bytes32, bytes32);\nWithdraw(address, address, uint256, uint256);\nDeposit(address, address, uint256, uint256);\n\nfunction 0x1385(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3, uint256 varg4, uint256 varg5, uint256 varg6, uint256 varg7, uint256 varg8, uint256 varg9) private { \n    v0 = address(varg9);\n    v1, v2 = sha256hash(address(this), v0, varg8, varg6, varg5, varg4);\n    require(v1);\n    v3 = address(varg3);\n    v4 = v5 = 0xff & _orders[v3];\n    if (!v5) {\n        MEM[MEM[64]] = 0;\n        v6 = varg2 & 0xff;\n        v7, v8 = ecrecover(keccak256('\\x19Ethereum Signed Message:\\n32', v2), v6, varg1, varg0);\n        require(v7);\n        v4 = v9 = address(v8) == address(varg3);\n    }\n    if (v4) {\n        v4 = v10 = block.number <= varg5;\n    }\n    if (v4) {\n        v11 = address(varg3);\n        v12 = v13 = _SafeSub(_orderFills[v11], varg8);\n        v14 = address(varg7);\n        v15 = address(varg3);\n        v16 = _SafeMul(varg8, _tokens[v15]);\n        assert(varg6);\n        v12 = v17 = v16 / varg6;\n        if (v13 < v17) {\n        }\n    } else {\n        v12 = v18 = 0;\n    }\n    return v12;\n}\n\nfunction fallback() public nonPayable { \n    revert();\n}\n\nfunction trade(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, address varg6, uint8 varg7, bytes32 varg8, bytes32 varg9, uint256 varg10) public nonPayable { \n    v0, v1 = sha256hash(address(this), varg0, varg1, varg2, varg4, varg5);\n    require(v0);\n    v2 = v3 = 0xff & _orders[varg6];\n    if (!v3) {\n        MEM[MEM[64]] = 0;\n        v4, v5 = ecrecover(keccak256('\\x19Ethereum Signed Message:\\n32', v1), varg7 & 0xff & 0xff, varg8, varg9);\n        require(v4);\n        v2 = v6 = address(v5) == varg6;\n    }\n    if (v2) {\n        v2 = v7 = block.number <= varg4;\n    }\n    if (v2) {\n        v8 = _SafeAdd(varg10, _orderFills[varg6]);\n        v2 = v9 = v8 <= varg1;\n    }\n    require(v2);\n    v10 = _SafeMul(_feeMake, varg10);\n    assert(0xde0b6b3a7640000);\n    v11 = _SafeMul(_feeTake, varg10);\n    assert(0xde0b6b3a7640000);\n    v12 = v13 = v11 / 0xde0b6b3a7640000;\n    v12 = v14 = 0;\n    if (_accountLevelsAddr) {\n        require(_accountLevelsAddr.code.size);\n        v15, v16 = _accountLevelsAddr.accountLevel(varg6).gas(msg.gas);\n        require(v15);\n        if (v16 == 1) {\n            v17 = _SafeMul(_feeRebate, varg10);\n            assert(0xde0b6b3a7640000);\n            v12 = v18 = v17 / 0xde0b6b3a7640000;\n        }\n    }\n    v19 = _SafeAdd(v13, varg10);\n    v20 = _SafeSub(v19, _tokens[msg.sender]);\n    _tokens[msg.sender] = v20;\n    v21 = v22 = _tokens[varg6];\n    v23 = v24 = 5958;\n    v25 = _SafeAdd(v12, varg10);\n    v26 = v27 = _SafeSub(v10 / 0xde0b6b3a7640000, v25);\n    while (1) {\n        v28 = _SafeAdd(v26, v21);\n        _tokens[varg6] = v28;\n        v21 = v29 = _tokens[_feeAccount];\n        v23 = v30 = 6034;\n        v31 = _SafeAdd(v13, v10 / 0xde0b6b3a7640000);\n        v26 = v32 = _SafeSub(v12, v31);\n    }\n    _tokens[_feeAccount] = v28;\n    v33 = _SafeMul(varg10, varg3);\n    assert(varg1);\n    require(v33 / varg1 <= _tokens[varg6]);\n    _tokens[varg2] = _tokens[varg6] - v33 / varg1;\n    v34 = _SafeMul(varg10, varg3);\n    assert(varg1);\n    v35 = v34 / varg1 + _tokens[varg2] >= _tokens[varg2];\n    if (v34 / varg1 + _tokens[varg2] >= _tokens[varg2]) {\n        v35 = v36 = v34 / varg1 + _tokens[varg2] >= v34 / varg1;\n    }\n    require(v35);\n    _tokens[varg2] += v34 / varg1;\n    v37 = _SafeAdd(varg10, _orderFills[varg6]);\n    _orderFills[varg6] = v37;\n    assert(varg1);\n    emit Trade(varg0, varg10, varg2, varg10 * varg3 / varg1, varg6, msg.sender);\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    v1 = v0 < varg1;\n    v2 = v3 = v0 >= varg1;\n    if (v0 >= varg1) {\n        v2 = v0 >= varg0;\n    }\n    require(v2);\n    return v0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 <= varg1;\n    require(v0);\n    return varg1 - varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = v2 = !varg1;\n    if (varg1) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\nfunction order(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5) public nonPayable { \n    v0, v1 = sha256hash(address(this), varg0, varg1, varg2, varg4, varg5);\n    require(v0);\n    _orders[msg.sender] = 0x1 | ~0xff & _orders[msg.sender];\n    emit Order(varg0, varg1, varg2, varg3, varg4, varg5, msg.sender);\n}\n\nfunction orderFills(address varg0, bytes32 varg1) public nonPayable { \n    return _orderFills[varg1];\n}\n\nfunction cancelOrder(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, uint8 varg6, bytes32 varg7, bytes32 varg8) public nonPayable { \n    v0, v1 = sha256hash(address(this), varg0, varg1, varg2, varg4, varg5);\n    require(v0);\n    v2 = v3 = 0xff & _orders[msg.sender];\n    if (!v3) {\n        MEM[MEM[64]] = 0;\n        v4, v5 = ecrecover(keccak256('\\x19Ethereum Signed Message:\\n32', v1), varg6 & 0xff & 0xff, varg7, varg8);\n        require(v4);\n        v2 = v6 = address(v5) == msg.sender;\n    }\n    require(v2);\n    _orderFills[msg.sender] = varg1;\n    emit Cancel(varg0, varg1, varg2, varg3, varg4, varg5, msg.sender, varg6 & 0xff & 0xff, varg7, varg8);\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_deposit[msg.sender] >= varg0);\n    v0 = _SafeSub(varg0, _deposit[msg.sender]);\n    _deposit[msg.sender] = v0;\n    v1 = msg.sender.call().value(varg0).gas(msg.gas);\n    require(v1);\n    emit Withdraw(0, msg.sender, varg0, _deposit[msg.sender]);\n}\n\nfunction depositToken(address varg0, uint256 varg1) public nonPayable { \n    require(varg0);\n    require(varg0.code.size);\n    v0, v1 = varg0.transferFrom(msg.sender, address(this), varg1).gas(msg.gas);\n    require(v0);\n    require(v1);\n    v2 = _SafeAdd(varg1, _tokens[msg.sender]);\n    _tokens[msg.sender] = v2;\n    emit Deposit(varg0, msg.sender, varg1, v2);\n}\n\nfunction amountFilled(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, address varg6, uint8 varg7, bytes32 varg8, bytes32 varg9) public nonPayable { \n    v0, v1 = sha256hash(address(this), varg0, varg1, varg2, varg4, varg5);\n    require(v0);\n    return _orderFills[varg6];\n}\n\nfunction tokens(address varg0, address varg1) public nonPayable { \n    return _tokens[varg1];\n}\n\nfunction changeFeeMake(uint256 varg0) public nonPayable { \n    require(_admin == msg.sender);\n    require(varg0 <= _feeMake);\n    _feeMake = varg0;\n}\n\nfunction feeMake() public nonPayable { \n    return _feeMake;\n}\n\nfunction changeFeeRebate(uint256 varg0) public nonPayable { \n    require(_admin == msg.sender);\n    v0 = v1 = varg0 < _feeRebate;\n    if (varg0 >= _feeRebate) {\n        v0 = v2 = varg0 > _feeTake;\n    }\n    require(!v0);\n    _feeRebate = varg0;\n}\n\nfunction feeAccount() public nonPayable { \n    return _feeAccount;\n}\n\nfunction testTrade(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, address varg6, uint8 varg7, bytes32 varg8, bytes32 varg9, uint256 varg10, address varg11) public nonPayable { \n    v0 = v1 = _tokens[varg11] >= varg10;\n    if (_tokens[varg11] >= varg10) {\n        v2 = 0x1385(varg9, varg8, varg7 & 0xff, varg6, varg5, varg4, varg3, varg2, varg1, varg0);\n        v0 = v2 >= varg10;\n    }\n    if (v0) {\n        v3 = v4 = 1;\n    } else {\n        v3 = 0;\n    }\n    return v3;\n}\n\nfunction changeFeeAccount(address varg0) public nonPayable { \n    require(_admin == msg.sender);\n    _feeAccount = varg0;\n}\n\nfunction feeRebate() public nonPayable { \n    return _feeRebate;\n}\n\nfunction changeFeeTake(uint256 varg0) public nonPayable { \n    require(_admin == msg.sender);\n    v0 = v1 = varg0 > _feeTake;\n    if (varg0 <= _feeTake) {\n        v0 = v2 = varg0 < _feeRebate;\n    }\n    require(!v0);\n    _feeTake = varg0;\n}\n\nfunction changeAdmin(address varg0) public nonPayable { \n    require(_admin == msg.sender);\n    _admin = varg0;\n}\n\nfunction withdrawToken(address varg0, uint256 varg1) public nonPayable { \n    require(varg0);\n    require(_tokens[msg.sender] >= varg1);\n    v0 = _SafeSub(varg1, _tokens[msg.sender]);\n    _tokens[msg.sender] = v0;\n    require(varg0.code.size);\n    v1, v2 = varg0.transfer(msg.sender, varg1).gas(msg.gas);\n    require(v1);\n    require(v2);\n    emit Withdraw(varg0, msg.sender, varg1, _tokens[msg.sender]);\n}\n\nfunction orders(address varg0, bytes32 varg1) public nonPayable { \n    return 0xff & _orders[varg1];\n}\n\nfunction feeTake() public nonPayable { \n    return _feeTake;\n}\n\nfunction deposit() public payable { \n    v0 = _SafeAdd(msg.value, _deposit[msg.sender]);\n    _deposit[msg.sender] = v0;\n    emit Deposit(0, msg.sender, msg.value, v0);\n}\n\nfunction changeAccountLevelsAddr(address varg0) public nonPayable { \n    require(_admin == msg.sender);\n    _accountLevelsAddr = varg0;\n}\n\nfunction accountLevelsAddr() public nonPayable { \n    return _accountLevelsAddr;\n}\n\nfunction balanceOf(address varg0, address varg1) public nonPayable { \n    return _tokens[varg1];\n}\n\nfunction admin() public nonPayable { \n    return _admin;\n}\n\nfunction availableVolume(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, address varg6, uint8 varg7, bytes32 varg8, bytes32 varg9) public nonPayable { \n    v0 = 0x1385(varg9, varg8, varg7 & 0xff, varg6, varg5, varg4, varg3, varg2, varg1, varg0);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        v0 = uint32(function_selector >> 224);\n        if (v0 == 0xa19b14a) {\n            trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256);\n        } else if (0xb927666 == v0) {\n            order(address,uint256,address,uint256,uint256,uint256);\n        } else if (0x19774d43 == v0) {\n            orderFills(address,bytes32);\n        } else if (0x278b8c0e == v0) {\n            cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32);\n        } else if (0x2e1a7d4d == v0) {\n            withdraw(uint256);\n        } else if (0x338b5dea == v0) {\n            depositToken(address,uint256);\n        } else if (0x46be96c3 == v0) {\n            amountFilled(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32);\n        } else if (0x508493bc == v0) {\n            tokens(address,address);\n        } else if (0x54d03b5c == v0) {\n            changeFeeMake(uint256);\n        } else if (0x57786394 == v0) {\n            feeMake();\n        } else if (0x5e1d7ae4 == v0) {\n            changeFeeRebate(uint256);\n        } else if (0x65e17c9d == v0) {\n            feeAccount();\n        } else if (0x6c86888b == v0) {\n            testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address);\n        } else if (0x71ffcb16 == v0) {\n            changeFeeAccount(address);\n        } else if (0x731c2f81 == v0) {\n            feeRebate();\n        } else if (0x8823a9c0 == v0) {\n            changeFeeTake(uint256);\n        } else if (0x8f283970 == v0) {\n            changeAdmin(address);\n        } else if (0x9e281a98 == v0) {\n            withdrawToken(address,uint256);\n        } else if (0xbb5f4629 == v0) {\n            orders(address,bytes32);\n        } else if (0xc281309e == v0) {\n            feeTake();\n        } else if (0xd0e30db0 == v0) {\n            deposit();\n        } else if (0xe8f6bc2e == v0) {\n            changeAccountLevelsAddr(address);\n        } else if (0xf3412942 == v0) {\n            accountLevelsAddr();\n        } else if (0xf7888aec == v0) {\n            balanceOf(address,address);\n        } else if (0xf851a440 == v0) {\n            admin();\n        } else if (0xfb6e155f == v0) {\n            availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 09:54 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _feeMake; // STORAGE[0x3]\nuint256 _feeTake; // STORAGE[0x4]\nuint256 _feeRebate; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _tokens; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _orders; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _orderFills; // STORAGE[0x8]\naddress _admin; // STORAGE[0x0] bytes 0 to 19\nuint160 _feeAccount; // STORAGE[0x1] bytes 0 to 19\naddress _accountLevelsAddr; // STORAGE[0x2] bytes 0 to 19\nmapping (uint256 => [uint256]) _deposit; // STORAGE[0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8]\n\n// Events\nTrade(address, uint256, address, uint256, address, address);\nOrder(address, uint256, address, uint256, uint256, uint256, address);\nCancel(address, uint256, address, uint256, uint256, uint256, address, uint8, bytes32, bytes32);\nWithdraw(address, address, uint256, uint256);\nDeposit(address, address, uint256, uint256);\n\nfunction 0x1385(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3, uint256 varg4, uint256 varg5, uint256 varg6, uint256 varg7, uint256 varg8, uint256 varg9) private { \n    v0 = address(varg9);\n    v1, v2 = sha256hash(address(this), v0, varg8, varg6, varg5, varg4);\n    require(v1);\n    v3 = address(varg3);\n    v4 = v5 = 0xff & _orders[v3];\n    if (!v5) {\n        MEM[MEM[64]] = 0;\n        v6 = varg2 & 0xff;\n        v7, v8 = ecrecover(keccak256('\\x19Ethereum Signed Message:\\n32', v2), v6, varg1, varg0);\n        require(v7);\n        v4 = v9 = address(v8) == address(varg3);\n    }\n    if (v4) {\n        v4 = v10 = block.number <= varg5;\n    }\n    if (v4) {\n        v11 = address(varg3);\n        v12 = v13 = _SafeSub(_orderFills[v11], varg8);\n        v14 = address(varg7);\n        v15 = address(varg3);\n        v16 = _SafeMul(varg8, _tokens[v15]);\n        assert(varg6);\n        v12 = v17 = v16 / varg6;\n        if (v13 < v17) {\n        }\n    } else {\n        v12 = v18 = 0;\n    }\n    return v12;\n}\n\nfunction fallback() public nonPayable { \n    revert();\n}\n\nfunction trade(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, address varg6, uint8 varg7, bytes32 varg8, bytes32 varg9, uint256 varg10) public nonPayable { \n    v0, v1 = sha256hash(address(this), varg0, varg1, varg2, varg4, varg5);\n    require(v0);\n    v2 = v3 = 0xff & _orders[varg6];\n    if (!v3) {\n        MEM[MEM[64]] = 0;\n        v4, v5 = ecrecover(keccak256('\\x19Ethereum Signed Message:\\n32', v1), varg7 & 0xff & 0xff, varg8, varg9);\n        require(v4);\n        v2 = v6 = address(v5) == varg6;\n    }\n    if (v2) {\n        v2 = v7 = block.number <= varg4;\n    }\n    if (v2) {\n        v8 = _SafeAdd(varg10, _orderFills[varg6]);\n        v2 = v9 = v8 <= varg1;\n    }\n    require(v2);\n    v10 = _SafeMul(_feeMake, varg10);\n    assert(0xde0b6b3a7640000);\n    v11 = _SafeMul(_feeTake, varg10);\n    assert(0xde0b6b3a7640000);\n    v12 = v13 = v11 / 0xde0b6b3a7640000;\n    v12 = v14 = 0;\n    if (_accountLevelsAddr) {\n        require(_accountLevelsAddr.code.size);\n        v15, v16 = _accountLevelsAddr.accountLevel(varg6).gas(msg.gas);\n        require(v15);\n        if (v16 == 1) {\n            v17 = _SafeMul(_feeRebate, varg10);\n            assert(0xde0b6b3a7640000);\n            v12 = v18 = v17 / 0xde0b6b3a7640000;\n        }\n    }\n    v19 = _SafeAdd(v13, varg10);\n    v20 = _SafeSub(v19, _tokens[msg.sender]);\n    _tokens[msg.sender] = v20;\n    v21 = v22 = _tokens[varg6];\n    v23 = v24 = 5958;\n    v25 = _SafeAdd(v12, varg10);\n    v26 = v27 = _SafeSub(v10 / 0xde0b6b3a7640000, v25);\n    while (1) {\n        v28 = _SafeAdd(v26, v21);\n        _tokens[varg6] = v28;\n        v21 = v29 = _tokens[_feeAccount];\n        v23 = v30 = 6034;\n        v31 = _SafeAdd(v13, v10 / 0xde0b6b3a7640000);\n        v26 = v32 = _SafeSub(v12, v31);\n    }\n    _tokens[_feeAccount] = v28;\n    v33 = _SafeMul(varg10, varg3);\n    assert(varg1);\n    require(v33 / varg1 <= _tokens[varg6]);\n    _tokens[varg2] = _tokens[varg6] - v33 / varg1;\n    v34 = _SafeMul(varg10, varg3);\n    assert(varg1);\n    v35 = v34 / varg1 + _tokens[varg2] >= _tokens[varg2];\n    if (v34 / varg1 + _tokens[varg2] >= _tokens[varg2]) {\n        v35 = v36 = v34 / varg1 + _tokens[varg2] >= v34 / varg1;\n    }\n    require(v35);\n    _tokens[varg2] += v34 / varg1;\n    v37 = _SafeAdd(varg10, _orderFills[varg6]);\n    _orderFills[varg6] = v37;\n    assert(varg1);\n    emit Trade(varg0, varg10, varg2, varg10 * varg3 / varg1, varg6, msg.sender);\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    v1 = v0 < varg1;\n    v2 = v3 = v0 >= varg1;\n    if (v0 >= varg1) {\n        v2 = v0 >= varg0;\n    }\n    require(v2);\n    return v0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 <= varg1;\n    require(v0);\n    return varg1 - varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = v2 = !varg1;\n    if (varg1) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\nfunction order(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5) public nonPayable { \n    v0, v1 = sha256hash(address(this), varg0, varg1, varg2, varg4, varg5);\n    require(v0);\n    _orders[msg.sender] = 0x1 | ~0xff & _orders[msg.sender];\n    emit Order(varg0, varg1, varg2, varg3, varg4, varg5, msg.sender);\n}\n\nfunction orderFills(address varg0, bytes32 varg1) public nonPayable { \n    return _orderFills[varg1];\n}\n\nfunction cancelOrder(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, uint8 varg6, bytes32 varg7, bytes32 varg8) public nonPayable { \n    v0, v1 = sha256hash(address(this), varg0, varg1, varg2, varg4, varg5);\n    require(v0);\n    v2 = v3 = 0xff & _orders[msg.sender];\n    if (!v3) {\n        MEM[MEM[64]] = 0;\n        v4, v5 = ecrecover(keccak256('\\x19Ethereum Signed Message:\\n32', v1), varg6 & 0xff & 0xff, varg7, varg8);\n        require(v4);\n        v2 = v6 = address(v5) == msg.sender;\n    }\n    require(v2);\n    _orderFills[msg.sender] = varg1;\n    emit Cancel(varg0, varg1, varg2, varg3, varg4, varg5, msg.sender, varg6 & 0xff & 0xff, varg7, varg8);\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_deposit[msg.sender] >= varg0);\n    v0 = _SafeSub(varg0, _deposit[msg.sender]);\n    _deposit[msg.sender] = v0;\n    v1 = msg.sender.call().value(varg0).gas(msg.gas);\n    require(v1);\n    emit Withdraw(0, msg.sender, varg0, _deposit[msg.sender]);\n}\n\nfunction depositToken(address varg0, uint256 varg1) public nonPayable { \n    require(varg0);\n    require(varg0.code.size);\n    v0, v1 = varg0.transferFrom(msg.sender, address(this), varg1).gas(msg.gas);\n    require(v0);\n    require(v1);\n    v2 = _SafeAdd(varg1, _tokens[msg.sender]);\n    _tokens[msg.sender] = v2;\n    emit Deposit(varg0, msg.sender, varg1, v2);\n}\n\nfunction amountFilled(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, address varg6, uint8 varg7, bytes32 varg8, bytes32 varg9) public nonPayable { \n    v0, v1 = sha256hash(address(this), varg0, varg1, varg2, varg4, varg5);\n    require(v0);\n    return _orderFills[varg6];\n}\n\nfunction tokens(address varg0, address varg1) public nonPayable { \n    return _tokens[varg1];\n}\n\nfunction changeFeeMake(uint256 varg0) public nonPayable { \n    require(_admin == msg.sender);\n    require(varg0 <= _feeMake);\n    _feeMake = varg0;\n}\n\nfunction feeMake() public nonPayable { \n    return _feeMake;\n}\n\nfunction changeFeeRebate(uint256 varg0) public nonPayable { \n    require(_admin == msg.sender);\n    v0 = v1 = varg0 < _feeRebate;\n    if (varg0 >= _feeRebate) {\n        v0 = v2 = varg0 > _feeTake;\n    }\n    require(!v0);\n    _feeRebate = varg0;\n}\n\nfunction feeAccount() public nonPayable { \n    return _feeAccount;\n}\n\nfunction testTrade(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, address varg6, uint8 varg7, bytes32 varg8, bytes32 varg9, uint256 varg10, address varg11) public nonPayable { \n    v0 = v1 = _tokens[varg11] >= varg10;\n    if (_tokens[varg11] >= varg10) {\n        v2 = 0x1385(varg9, varg8, varg7 & 0xff, varg6, varg5, varg4, varg3, varg2, varg1, varg0);\n        v0 = v2 >= varg10;\n    }\n    if (v0) {\n        v3 = v4 = 1;\n    } else {\n        v3 = 0;\n    }\n    return v3;\n}\n\nfunction changeFeeAccount(address varg0) public nonPayable { \n    require(_admin == msg.sender);\n    _feeAccount = varg0;\n}\n\nfunction feeRebate() public nonPayable { \n    return _feeRebate;\n}\n\nfunction changeFeeTake(uint256 varg0) public nonPayable { \n    require(_admin == msg.sender);\n    v0 = v1 = varg0 > _feeTake;\n    if (varg0 <= _feeTake) {\n        v0 = v2 = varg0 < _feeRebate;\n    }\n    require(!v0);\n    _feeTake = varg0;\n}\n\nfunction changeAdmin(address varg0) public nonPayable { \n    require(_admin == msg.sender);\n    _admin = varg0;\n}\n\nfunction withdrawToken(address varg0, uint256 varg1) public nonPayable { \n    require(varg0);\n    require(_tokens[msg.sender] >= varg1);\n    v0 = _SafeSub(varg1, _tokens[msg.sender]);\n    _tokens[msg.sender] = v0;\n    require(varg0.code.size);\n    v1, v2 = varg0.transfer(msg.sender, varg1).gas(msg.gas);\n    require(v1);\n    require(v2);\n    emit Withdraw(varg0, msg.sender, varg1, _tokens[msg.sender]);\n}\n\nfunction orders(address varg0, bytes32 varg1) public nonPayable { \n    return 0xff & _orders[varg1];\n}\n\nfunction feeTake() public nonPayable { \n    return _feeTake;\n}\n\nfunction deposit() public payable { \n    v0 = _SafeAdd(msg.value, _deposit[msg.sender]);\n    _deposit[msg.sender] = v0;\n    emit Deposit(0, msg.sender, msg.value, v0);\n}\n\nfunction changeAccountLevelsAddr(address varg0) public nonPayable { \n    require(_admin == msg.sender);\n    _accountLevelsAddr = varg0;\n}\n\nfunction accountLevelsAddr() public nonPayable { \n    return _accountLevelsAddr;\n}\n\nfunction balanceOf(address varg0, address varg1) public nonPayable { \n    return _tokens[varg1];\n}\n\nfunction admin() public nonPayable { \n    return _admin;\n}\n\nfunction availableVolume(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, address varg6, uint8 varg7, bytes32 varg8, bytes32 varg9) public nonPayable { \n    v0 = 0x1385(varg9, varg8, varg7 & 0xff, varg6, varg5, varg4, varg3, varg2, varg1, varg0);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        v0 = uint32(function_selector >> 224);\n        if (v0 == 0xa19b14a) {\n            trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256);\n        } else if (0xb927666 == v0) {\n            order(address,uint256,address,uint256,uint256,uint256);\n        } else if (0x19774d43 == v0) {\n            orderFills(address,bytes32);\n        } else if (0x278b8c0e == v0) {\n            cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32);\n        } else if (0x2e1a7d4d == v0) {\n            withdraw(uint256);\n        } else if (0x338b5dea == v0) {\n            depositToken(address,uint256);\n        } else if (0x46be96c3 == v0) {\n            amountFilled(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32);\n        } else if (0x508493bc == v0) {\n            tokens(address,address);\n        } else if (0x54d03b5c == v0) {\n            changeFeeMake(uint256);\n        } else if (0x57786394 == v0) {\n            feeMake();\n        } else if (0x5e1d7ae4 == v0) {\n            changeFeeRebate(uint256);\n        } else if (0x65e17c9d == v0) {\n            feeAccount();\n        } else if (0x6c86888b == v0) {\n            testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address);\n        } else if (0x71ffcb16 == v0) {\n            changeFeeAccount(address);\n        } else if (0x731c2f81 == v0) {\n            feeRebate();\n        } else if (0x8823a9c0 == v0) {\n            changeFeeTake(uint256);\n        } else if (0x8f283970 == v0) {\n            changeAdmin(address);\n        } else if (0x9e281a98 == v0) {\n            withdrawToken(address,uint256);\n        } else if (0xbb5f4629 == v0) {\n            orders(address,bytes32);\n        } else if (0xc281309e == v0) {\n            feeTake();\n        } else if (0xd0e30db0 == v0) {\n            deposit();\n        } else if (0xe8f6bc2e == v0) {\n            changeAccountLevelsAddr(address);\n        } else if (0xf3412942 == v0) {\n            accountLevelsAddr();\n        } else if (0xf7888aec == v0) {\n            balanceOf(address,address);\n        } else if (0xf851a440 == v0) {\n            admin();\n        } else if (0xfb6e155f == v0) {\n            availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.24 09:54 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _feeMake; // STORAGE[0x3]\nuint256 _feeTake; // STORAGE[0x4]\nuint256 _feeRebate; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _tokens; // STORAGE[0x6]\nmapping (uint256 => [uint256]) _orders; // STORAGE[0x7]\nmapping (uint256 => [uint256]) _orderFills; // STORAGE[0x8]\naddress _admin; // STORAGE[0x0] bytes 0 to 19\nuint160 _feeAccount; // STORAGE[0x1] bytes 0 to 19\naddress _accountLevelsAddr; // STORAGE[0x2] bytes 0 to 19\nmapping (uint256 => [uint256]) _deposit; // STORAGE[0x54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f8]\n\n// Events\nTrade(address, uint256, address, uint256, address, address);\nOrder(address, uint256, address, uint256, uint256, uint256, address);\nCancel(address, uint256, address, uint256, uint256, uint256, address, uint8, bytes32, bytes32);\nWithdraw(address, address, uint256, uint256);\nDeposit(address, address, uint256, uint256);\n\nfunction 0x1385(uint256 varg0, uint256 varg1, uint256 varg2, uint256 varg3, uint256 varg4, uint256 varg5, uint256 varg6, uint256 varg7, uint256 varg8, uint256 varg9) private { \n    v0 = address(varg9);\n    v1, v2 = sha256hash(address(this), v0, varg8, varg6, varg5, varg4);\n    require(v1);\n    v3 = address(varg3);\n    v4 = v5 = 0xff & _orders[v3];\n    if (!v5) {\n        MEM[MEM[64]] = 0;\n        v6 = varg2 & 0xff;\n        v7, v8 = ecrecover(keccak256('\\x19Ethereum Signed Message:\\n32', v2), v6, varg1, varg0);\n        require(v7);\n        v4 = v9 = address(v8) == address(varg3);\n    }\n    if (v4) {\n        v4 = v10 = block.number <= varg5;\n    }\n    if (v4) {\n        v11 = address(varg3);\n        v12 = v13 = _SafeSub(_orderFills[v11], varg8);\n        v14 = address(varg7);\n        v15 = address(varg3);\n        v16 = _SafeMul(varg8, _tokens[v15]);\n        assert(varg6);\n        v12 = v17 = v16 / varg6;\n        if (v13 < v17) {\n        }\n    } else {\n        v12 = v18 = 0;\n    }\n    return v12;\n}\n\nfunction fallback() public nonPayable { \n    revert();\n}\n\nfunction trade(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, address varg6, uint8 varg7, bytes32 varg8, bytes32 varg9, uint256 varg10) public nonPayable { \n    v0, v1 = sha256hash(address(this), varg0, varg1, varg2, varg4, varg5);\n    require(v0);\n    v2 = v3 = 0xff & _orders[varg6];\n    if (!v3) {\n        MEM[MEM[64]] = 0;\n        v4, v5 = ecrecover(keccak256('\\x19Ethereum Signed Message:\\n32', v1), varg7 & 0xff & 0xff, varg8, varg9);\n        require(v4);\n        v2 = v6 = address(v5) == varg6;\n    }\n    if (v2) {\n        v2 = v7 = block.number <= varg4;\n    }\n    if (v2) {\n        v8 = _SafeAdd(varg10, _orderFills[varg6]);\n        v2 = v9 = v8 <= varg1;\n    }\n    require(v2);\n    v10 = _SafeMul(_feeMake, varg10);\n    assert(0xde0b6b3a7640000);\n    v11 = _SafeMul(_feeTake, varg10);\n    assert(0xde0b6b3a7640000);\n    v12 = v13 = v11 / 0xde0b6b3a7640000;\n    v12 = v14 = 0;\n    if (_accountLevelsAddr) {\n        require(_accountLevelsAddr.code.size);\n        v15, v16 = _accountLevelsAddr.accountLevel(varg6).gas(msg.gas);\n        require(v15);\n        if (v16 == 1) {\n            v17 = _SafeMul(_feeRebate, varg10);\n            assert(0xde0b6b3a7640000);\n            v12 = v18 = v17 / 0xde0b6b3a7640000;\n        }\n    }\n    v19 = _SafeAdd(v13, varg10);\n    v20 = _SafeSub(v19, _tokens[msg.sender]);\n    _tokens[msg.sender] = v20;\n    v21 = v22 = _tokens[varg6];\n    v23 = v24 = 5958;\n    v25 = _SafeAdd(v12, varg10);\n    v26 = v27 = _SafeSub(v10 / 0xde0b6b3a7640000, v25);\n    while (1) {\n        v28 = _SafeAdd(v26, v21);\n        _tokens[varg6] = v28;\n        v21 = v29 = _tokens[_feeAccount];\n        v23 = v30 = 6034;\n        v31 = _SafeAdd(v13, v10 / 0xde0b6b3a7640000);\n        v26 = v32 = _SafeSub(v12, v31);\n    }\n    _tokens[_feeAccount] = v28;\n    v33 = _SafeMul(varg10, varg3);\n    assert(varg1);\n    require(v33 / varg1 <= _tokens[varg6]);\n    _tokens[varg2] = _tokens[varg6] - v33 / varg1;\n    v34 = _SafeMul(varg10, varg3);\n    assert(varg1);\n    v35 = v34 / varg1 + _tokens[varg2] >= _tokens[varg2];\n    if (v34 / varg1 + _tokens[varg2] >= _tokens[varg2]) {\n        v35 = v36 = v34 / varg1 + _tokens[varg2] >= v34 / varg1;\n    }\n    require(v35);\n    _tokens[varg2] += v34 / varg1;\n    v37 = _SafeAdd(varg10, _orderFills[varg6]);\n    _orderFills[varg6] = v37;\n    assert(varg1);\n    emit Trade(varg0, varg10, varg2, varg10 * varg3 / varg1, varg6, msg.sender);\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    v1 = v0 < varg1;\n    v2 = v3 = v0 >= varg1;\n    if (v0 >= varg1) {\n        v2 = v0 >= varg0;\n    }\n    require(v2);\n    return v0;\n}\n\nfunction _SafeSub(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 <= varg1;\n    require(v0);\n    return varg1 - varg0;\n}\n\nfunction _SafeMul(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 * varg1;\n    v1 = v2 = !varg1;\n    if (varg1) {\n        assert(varg1);\n        v1 = v3 = v0 / varg1 == varg0;\n    }\n    require(v1);\n    return v0;\n}\n\nfunction order(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5) public nonPayable { \n    v0, v1 = sha256hash(address(this), varg0, varg1, varg2, varg4, varg5);\n    require(v0);\n    _orders[msg.sender] = 0x1 | ~0xff & _orders[msg.sender];\n    emit Order(varg0, varg1, varg2, varg3, varg4, varg5, msg.sender);\n}\n\nfunction orderFills(address varg0, bytes32 varg1) public nonPayable { \n    return _orderFills[varg1];\n}\n\nfunction cancelOrder(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, uint8 varg6, bytes32 varg7, bytes32 varg8) public nonPayable { \n    v0, v1 = sha256hash(address(this), varg0, varg1, varg2, varg4, varg5);\n    require(v0);\n    v2 = v3 = 0xff & _orders[msg.sender];\n    if (!v3) {\n        MEM[MEM[64]] = 0;\n        v4, v5 = ecrecover(keccak256('\\x19Ethereum Signed Message:\\n32', v1), varg6 & 0xff & 0xff, varg7, varg8);\n        require(v4);\n        v2 = v6 = address(v5) == msg.sender;\n    }\n    require(v2);\n    _orderFills[msg.sender] = varg1;\n    emit Cancel(varg0, varg1, varg2, varg3, varg4, varg5, msg.sender, varg6 & 0xff & 0xff, varg7, varg8);\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_deposit[msg.sender] >= varg0);\n    v0 = _SafeSub(varg0, _deposit[msg.sender]);\n    _deposit[msg.sender] = v0;\n    v1 = msg.sender.call().value(varg0).gas(msg.gas);\n    require(v1);\n    emit Withdraw(0, msg.sender, varg0, _deposit[msg.sender]);\n}\n\nfunction depositToken(address varg0, uint256 varg1) public nonPayable { \n    require(varg0);\n    require(varg0.code.size);\n    v0, v1 = varg0.transferFrom(msg.sender, address(this), varg1).gas(msg.gas);\n    require(v0);\n    require(v1);\n    v2 = _SafeAdd(varg1, _tokens[msg.sender]);\n    _tokens[msg.sender] = v2;\n    emit Deposit(varg0, msg.sender, varg1, v2);\n}\n\nfunction amountFilled(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, address varg6, uint8 varg7, bytes32 varg8, bytes32 varg9) public nonPayable { \n    v0, v1 = sha256hash(address(this), varg0, varg1, varg2, varg4, varg5);\n    require(v0);\n    return _orderFills[varg6];\n}\n\nfunction tokens(address varg0, address varg1) public nonPayable { \n    return _tokens[varg1];\n}\n\nfunction changeFeeMake(uint256 varg0) public nonPayable { \n    require(_admin == msg.sender);\n    require(varg0 <= _feeMake);\n    _feeMake = varg0;\n}\n\nfunction feeMake() public nonPayable { \n    return _feeMake;\n}\n\nfunction changeFeeRebate(uint256 varg0) public nonPayable { \n    require(_admin == msg.sender);\n    v0 = v1 = varg0 < _feeRebate;\n    if (varg0 >= _feeRebate) {\n        v0 = v2 = varg0 > _feeTake;\n    }\n    require(!v0);\n    _feeRebate = varg0;\n}\n\nfunction feeAccount() public nonPayable { \n    return _feeAccount;\n}\n\nfunction testTrade(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, address varg6, uint8 varg7, bytes32 varg8, bytes32 varg9, uint256 varg10, address varg11) public nonPayable { \n    v0 = v1 = _tokens[varg11] >= varg10;\n    if (_tokens[varg11] >= varg10) {\n        v2 = 0x1385(varg9, varg8, varg7 & 0xff, varg6, varg5, varg4, varg3, varg2, varg1, varg0);\n        v0 = v2 >= varg10;\n    }\n    if (v0) {\n        v3 = v4 = 1;\n    } else {\n        v3 = 0;\n    }\n    return v3;\n}\n\nfunction changeFeeAccount(address varg0) public nonPayable { \n    require(_admin == msg.sender);\n    _feeAccount = varg0;\n}\n\nfunction feeRebate() public nonPayable { \n    return _feeRebate;\n}\n\nfunction changeFeeTake(uint256 varg0) public nonPayable { \n    require(_admin == msg.sender);\n    v0 = v1 = varg0 > _feeTake;\n    if (varg0 <= _feeTake) {\n        v0 = v2 = varg0 < _feeRebate;\n    }\n    require(!v0);\n    _feeTake = varg0;\n}\n\nfunction changeAdmin(address varg0) public nonPayable { \n    require(_admin == msg.sender);\n    _admin = varg0;\n}\n\nfunction withdrawToken(address varg0, uint256 varg1) public nonPayable { \n    require(varg0);\n    require(_tokens[msg.sender] >= varg1);\n    v0 = _SafeSub(varg1, _tokens[msg.sender]);\n    _tokens[msg.sender] = v0;\n    require(varg0.code.size);\n    v1, v2 = varg0.transfer(msg.sender, varg1).gas(msg.gas);\n    require(v1);\n    require(v2);\n    emit Withdraw(varg0, msg.sender, varg1, _tokens[msg.sender]);\n}\n\nfunction orders(address varg0, bytes32 varg1) public nonPayable { \n    return 0xff & _orders[varg1];\n}\n\nfunction feeTake() public nonPayable { \n    return _feeTake;\n}\n\nfunction deposit() public payable { \n    v0 = _SafeAdd(msg.value, _deposit[msg.sender]);\n    _deposit[msg.sender] = v0;\n    emit Deposit(0, msg.sender, msg.value, v0);\n}\n\nfunction changeAccountLevelsAddr(address varg0) public nonPayable { \n    require(_admin == msg.sender);\n    _accountLevelsAddr = varg0;\n}\n\nfunction accountLevelsAddr() public nonPayable { \n    return _accountLevelsAddr;\n}\n\nfunction balanceOf(address varg0, address varg1) public nonPayable { \n    return _tokens[varg1];\n}\n\nfunction admin() public nonPayable { \n    return _admin;\n}\n\nfunction availableVolume(address varg0, uint256 varg1, address varg2, uint256 varg3, uint256 varg4, uint256 varg5, address varg6, uint8 varg7, bytes32 varg8, bytes32 varg9) public nonPayable { \n    v0 = 0x1385(varg9, varg8, varg7 & 0xff, varg6, varg5, varg4, varg3, varg2, varg1, varg0);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        v0 = uint32(function_selector >> 224);\n        if (v0 == 0xa19b14a) {\n            trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256);\n        } else if (0xb927666 == v0) {\n            order(address,uint256,address,uint256,uint256,uint256);\n        } else if (0x19774d43 == v0) {\n            orderFills(address,bytes32);\n        } else if (0x278b8c0e == v0) {\n            cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32);\n        } else if (0x2e1a7d4d == v0) {\n            withdraw(uint256);\n        } else if (0x338b5dea == v0) {\n            depositToken(address,uint256);\n        } else if (0x46be96c3 == v0) {\n            amountFilled(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32);\n        } else if (0x508493bc == v0) {\n            tokens(address,address);\n        } else if (0x54d03b5c == v0) {\n            changeFeeMake(uint256);\n        } else if (0x57786394 == v0) {\n            feeMake();\n        } else if (0x5e1d7ae4 == v0) {\n            changeFeeRebate(uint256);\n        } else if (0x65e17c9d == v0) {\n            feeAccount();\n        } else if (0x6c86888b == v0) {\n            testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address);\n        } else if (0x71ffcb16 == v0) {\n            changeFeeAccount(address);\n        } else if (0x731c2f81 == v0) {\n            feeRebate();\n        } else if (0x8823a9c0 == v0) {\n            changeFeeTake(uint256);\n        } else if (0x8f283970 == v0) {\n            changeAdmin(address);\n        } else if (0x9e281a98 == v0) {\n            withdrawToken(address,uint256);\n        } else if (0xbb5f4629 == v0) {\n            orders(address,bytes32);\n        } else if (0xc281309e == v0) {\n            feeTake();\n        } else if (0xd0e30db0 == v0) {\n            deposit();\n        } else if (0xe8f6bc2e == v0) {\n            changeAccountLevelsAddr(address);\n        } else if (0xf3412942 == v0) {\n            accountLevelsAddr();\n        } else if (0xf7888aec == v0) {\n            balanceOf(address,address);\n        } else if (0xf851a440 == v0) {\n            admin();\n        } else if (0xfb6e155f == v0) {\n            availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 32.63269329071045,
	"usage": {
		"completion_tokens": 544,
		"prompt_tokens": 4497,
		"total_tokens": 5041
	}
}