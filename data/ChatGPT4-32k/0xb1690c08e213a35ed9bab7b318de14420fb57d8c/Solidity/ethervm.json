{
	"address": "0xb1690c08e213a35ed9bab7b318de14420fb57d8c",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity version of the decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n\n    address internal owner;\n    address internal nonFungibleContract;\n    uint256 internal ownerCut;\n    uint256 internal gen0SaleCount;\n    bool internal isSaleClockAuction;\n    bool internal paused;\n\n    struct Auction {\n        address seller;\n        uint256 startingPrice;\n        uint256 endingPrice;\n        uint256 duration;\n        uint256 startedAt;\n    }\n\n    mapping (uint256 => Auction) auctions;\n\n    function createAuction(uint256 _tokenId, uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, address _seller) external {\n        require(msg.sender == nonFungibleContract);\n        require(_startingPrice == uint256(uint128(_startingPrice)));\n        require(_endingPrice == uint256(uint128(_endingPrice)));\n        require(_duration == uint256(uint64(_duration)));\n        require(_tokenId == uint256(uint256(_tokenId)));\n        Auction memory auction = Auction(_seller, _startingPrice, _endingPrice, _duration, now);\n        auctions[_tokenId] = auction;\n    }\n\n    function bid(uint256 _tokenId) external payable {\n        Auction storage auction = auctions[_tokenId];\n        uint256 price = getCurrentPrice(_tokenId);\n        require(msg.value >= price);\n        address seller = auction.seller;\n        delete auctions[_tokenId];\n        if (price > 0) {\n            uint256 auctioneerCut = computeCut(price);\n            uint256 sellerProceeds = price - auctioneerCut;\n            seller.transfer(sellerProceeds);\n        }\n        uint256 bidExcess = msg.value - price;\n        msg.sender.transfer(bidExcess);\n    }\n\n    function getCurrentPrice(uint256 _tokenId) public view returns (uint256) {\n        Auction storage auction = auctions[_tokenId];\n        uint256 secondsPassed = 0;\n        if (now > auction.startedAt) {\n            secondsPassed = now - auction.startedAt;\n        }\n        return computeCurrentPrice(\n            auction.startingPrice,\n            auction.endingPrice,\n            auction.duration,\n            secondsPassed\n        );\n    }\n\n    function computeCurrentPrice(uint256 _startingPrice, uint256 _endingPrice, uint256 _duration, uint256 _secondsPassed) public view returns (uint256) {\n        if (_secondsPassed >= _duration) {\n            return _endingPrice;\n        } else {\n            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);\n            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);\n            int256 currentPrice = int256(_startingPrice) + currentPriceChange;\n            return uint256(currentPrice);\n        }\n    }\n\n    function computeCut(uint256 _price) public view returns (uint256) {\n        return _price * ownerCut / 10000;\n    }\n\n    function cancelAuction(uint256 _tokenId) external {\n        Auction storage auction = auctions[_tokenId];\n        require(msg.sender == auction.seller);\n        delete auctions[_tokenId];\n    }\n\n    function withdrawBalance() external {\n        require(msg.sender == owner);\n        owner.transfer(address(this).balance);\n    }\n\n    function unpause() external {\n        require(msg.sender == owner);\n        paused = false;\n    }\n\n    function pause() external {\n        require(msg.sender == owner);\n        paused = true;\n    }\n\n    function transferOwnership(address _newOwner) external {\n        require(msg.sender == owner);\n        owner = _newOwner;\n    }\n}\n```\n\nPlease note that this is a rough translation from the EVM bytecode to Solidity and may not be an exact match of the original Solidity source code.",
				"role": "assistant"
			}
		}
	],
	"created": 1700471372,
	"id": "chatcmpl-8MuZYKTso1ALXOKy0uu0DvvjtGPGs",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x27ebe40a) {\n            // Dispatch table entry for createAuction(uint256,uint256,uint256,uint256,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0112;\n            var var2 = msg.data[0x04:0x24];\n            var var3 = msg.data[0x24:0x44];\n            var var4 = msg.data[0x44:0x64];\n            var var5 = msg.data[0x64:0x84];\n            var var6 = msg.data[0x84:0xa4] & 0x02 ** 0xa0 - 0x01;\n            createAuction(var2, var3, var4, var5, var6);\n            stop();\n        } else if (var0 == 0x3f4ba83a) {\n            // Dispatch table entry for unpause()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0127;\n            var1 = unpause();\n        \n        label_0127:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = !!var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n        } else if (var0 == 0x454a2ab3) {\n            // Dispatch table entry for bid(uint256)\n            var1 = 0x0112;\n            var2 = msg.data[0x04:0x24];\n            bid(var2);\n            stop();\n        } else if (var0 == 0x484eccb4) {\n            // Dispatch table entry for lastGen0SalePrices(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var2 = msg.data[0x04:0x24];\n            var2 = lastGen0SalePrices(var2);\n        \n        label_015C:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n        } else if (var0 == 0x5c975abb) {\n            // Dispatch table entry for paused()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0127;\n            var2 = paused();\n            goto label_0127;\n        } else if (var0 == 0x5fd8c710) {\n            // Dispatch table entry for withdrawBalance()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0112;\n            withdrawBalance();\n            stop();\n        } else if (var0 == 0x78bd7935) {\n            // Dispatch table entry for getAuction(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01aa;\n            var2 = msg.data[0x04:0x24];\n            var1, var2, var3, var4, var5 = getAuction(var2);\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var2;\n            memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = var3;\n            memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = var4;\n            memory[temp4 + 0x80:temp4 + 0x80 + 0x20] = var5;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + (temp4 + 0xa0) - temp5];\n        } else if (var0 == 0x83b5ff8b) {\n            // Dispatch table entry for ownerCut()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var2 = ownerCut();\n            goto label_015C;\n        } else if (var0 == 0x8456cb59) {\n            // Dispatch table entry for pause()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0127;\n            var1 = pause();\n            goto label_0127;\n        } else if (var0 == 0x85b86188) {\n            // Dispatch table entry for isSaleClockAuction()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0127;\n            var2 = isSaleClockAuction();\n            goto label_0127;\n        } else if (var0 == 0x878eb368) {\n            // Dispatch table entry for cancelAuctionWhenPaused(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0112;\n            var2 = msg.data[0x04:0x24];\n            cancelAuctionWhenPaused(var2);\n            stop();\n        } else if (var0 == 0x8a98a9cc) {\n            // Dispatch table entry for gen0SaleCount()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var2 = gen0SaleCount();\n            goto label_015C;\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025a;\n            var2 = owner();\n        \n        label_025A:\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n        } else if (var0 == 0x96b5a755) {\n            // Dispatch table entry for cancelAuction(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0112;\n            var2 = msg.data[0x04:0x24];\n            cancelAuction(var2);\n            stop();\n        } else if (var0 == 0xc55d0f56) {\n            // Dispatch table entry for getCurrentPrice(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            memory[var3:var3 + 0x20] = var2;\n            memory[0x20:0x40] = 0x03;\n            var4 = keccak256(memory[var3:var3 + 0x40]);\n            var5 = 0x0752;\n            var6 = var4;\n            var5 = func_0BA3(var6);\n        \n            if (!var5) { revert(memory[0x00:0x00]); }\n        \n            var5 = 0x0766;\n            var6 = var4;\n            var5 = func_0C0E(var6);\n            var1 = var5;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0xdd1b7a0f) {\n            // Dispatch table entry for nonFungibleContract()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025a;\n            var2 = nonFungibleContract();\n            goto label_025A;\n        } else if (var0 == 0xeac9d94c) {\n            // Dispatch table entry for averageGen0SalePrice()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var1 = averageGen0SalePrice();\n            goto label_015C;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0112;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            transferOwnership(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function createAuction(var arg0, var arg1, var arg2, var arg3, var arg4) {\n        var var0 = 0x02ef;\n        var0 = func_0D2B();\n        var temp0 = arg1;\n    \n        if (temp0 != temp0 & 0x02 ** 0x80 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg2;\n    \n        if (temp1 != temp1 & 0x02 ** 0x80 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg3;\n    \n        if (temp2 != temp2 & 0xffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp3 != temp3 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0354;\n        var var2 = arg4;\n        var var3 = arg0;\n        func_0806(var2, var3);\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + 0xa0;\n        memory[temp4:temp4 + 0x20] = arg4 & 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg1 & 0x02 ** 0x80 - 0x01;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg2 & 0x02 ** 0x80 - 0x01;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = arg3 & 0xffffffffffffffff;\n        memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = block.timestamp & 0xffffffffffffffff;\n        var0 = temp4;\n        var1 = 0x03b7;\n        var2 = arg0;\n        var3 = var0;\n        func_0881(var2, var3);\n    }\n    \n    function unpause() returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x00] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff0000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33]);\n        return 0x01;\n    }\n    \n    function bid(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var var1 = 0x00;\n        var var0 = storage[keccak256(memory[var1:var1 + 0x40])] & 0x02 ** 0xa0 - 0x01;\n        var var2 = 0x0466;\n        var var3 = arg0;\n        var var4 = msg.value;\n        var2 = func_0A1C(var3, var4);\n        var1 = var2;\n        var2 = 0x0472;\n        var3 = msg.sender;\n        var4 = arg0;\n        func_0B4D(var3, var4);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & var0) {\n        label_04A8:\n            return;\n        } else {\n            var2 = var1;\n            var3 = 0x06;\n            var4 = storage[0x05] % 0x05;\n        \n            if (var4 >= 0x05) { assert(); }\n        \n            storage[var4 + var3] = var2;\n            storage[0x05] = storage[0x05] + 0x01;\n            goto label_04A8;\n        }\n    }\n    \n    function lastGen0SalePrices(var arg0) returns (var arg0) {\n        var var0 = 0x06;\n        var var1 = arg0;\n    \n        if (var1 < 0x05) { return storage[var1 + var0]; }\n        else { assert(); }\n    }\n    \n    function paused() returns (var r0) { return storage[0x00] / 0x02 ** 0xa0 & 0xff; }\n    \n    function withdrawBalance() {\n        var var1 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var var0 = temp0 & storage[0x01];\n        var var2 = storage[var1] & temp0 == temp0 & msg.sender;\n    \n        if (var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0511:\n            var temp1 = address(this).balance;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n            return;\n        } else if (msg.sender == var0 & 0x02 ** 0xa0 - 0x01) { goto label_0511; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getAuction(var arg0) returns (var r0, var arg0, var r2, var r3, var r4) {\n        r2 = 0x00;\n        memory[r2:r2 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        r3 = r2;\n        r4 = r3;\n        var var3 = r4;\n        var var4 = var3;\n        var var5 = keccak256(memory[var4:var4 + 0x40]);\n        var var6 = 0x0566;\n        var var7 = var5;\n        var6 = func_0BA3(var7);\n    \n        if (!var6) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var5;\n        var temp1 = storage[temp0 + 0x01];\n        var temp2 = storage[temp0 + 0x02];\n        r0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        var temp3 = 0x02 ** 0x80 - 0x01;\n        arg0 = temp1 & temp3;\n        r2 = temp3 & temp1 / 0x0100000000000000000000000000000000;\n        r3 = temp2 & 0xffffffffffffffff;\n        r4 = temp2 / 0x010000000000000000 & 0xffffffffffffffff;\n        return r0, arg0, r2, r3, r4;\n    }\n    \n    function ownerCut() returns (var r0) { return storage[0x02]; }\n    \n    function pause() returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625]);\n        return 0x01;\n    }\n    \n    function isSaleClockAuction() returns (var r0) { return storage[0x04] & 0xff; }\n    \n    function cancelAuctionWhenPaused(var arg0) {\n        var var0 = 0x00;\n    \n        if (!(storage[var0] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var0 = keccak256(memory[0x00:0x40]);\n        var var1 = 0x06b8;\n        var var2 = var0;\n        var1 = func_0BA3(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x06d9;\n        var2 = arg0;\n        var var3 = storage[var0] & 0x02 ** 0xa0 - 0x01;\n        func_0BC4(var2, var3);\n    }\n    \n    function gen0SaleCount() returns (var r0) { return storage[0x05]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function cancelAuction(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = 0x00;\n        var var2 = 0x070a;\n        var var3 = var0;\n        var2 = func_0BA3(var3);\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var1 = temp0 & storage[var0];\n    \n        if (var1 != msg.sender & temp0) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x04a8;\n        var3 = arg0;\n        var var4 = var1;\n        func_0BC4(var3, var4);\n    }\n    \n    function nonFungibleContract() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function averageGen0SalePrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= 0x05) {\n        label_07A6:\n            return var1 / 0x05;\n        } else {\n        label_078B:\n            var var3 = 0x06;\n            var var4 = var2;\n        \n            if (var4 >= 0x05) { assert(); }\n        \n            var1 = storage[var4 + var3] + var1;\n            var2 = var2 + 0x01;\n        \n            if (var2 >= 0x05) { goto label_07A6; }\n            else { goto label_078B; }\n        }\n    }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { return; }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_0806(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0x23b872dd;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & arg0;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = arg1;\n        var var2 = temp0 + 0x64;\n        var var3 = 0x00;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0881(var arg0, var arg1) {\n        if (memory[arg1 + 0x60:arg1 + 0x60 + 0x20] & 0xffffffffffffffff < 0x3c) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg1;\n        storage[temp1] = (memory[temp2:temp2 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp3 = temp1 + 0x01;\n        storage[temp3] = (memory[temp2 + 0x20:temp2 + 0x20 + 0x20] & 0x02 ** 0x80 - 0x01) | (storage[temp3] & ~0xffffffffffffffffffffffffffffffff);\n        var temp4 = temp1 + 0x01;\n        var temp5 = 0x02 ** 0x80 - 0x01;\n        storage[temp4] = (temp5 & storage[temp4]) | (temp5 & memory[temp2 + 0x40:temp2 + 0x40 + 0x20]) * 0x0100000000000000000000000000000000;\n        var temp6 = temp1 + 0x02;\n        storage[temp6] = (memory[temp2 + 0x60:temp2 + 0x60 + 0x20] & 0xffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffff);\n        var temp7 = temp1 + 0x02;\n        storage[temp7] = (storage[temp7] & ~0xffffffffffffffff0000000000000000) | (memory[temp2 + 0x80:temp2 + 0x80 + 0x20] & 0xffffffffffffffff) * 0x010000000000000000;\n        var temp8 = memory[temp2 + 0x20:temp2 + 0x20 + 0x20] & 0x02 ** 0x80 - 0x01;\n        var temp9 = memory[temp2 + 0x40:temp2 + 0x40 + 0x20] & 0x02 ** 0x80 - 0x01;\n        var temp10 = memory[temp2 + 0x60:temp2 + 0x60 + 0x20] & 0xffffffffffffffff;\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = temp0;\n        var temp12 = temp11 + 0x20;\n        memory[temp12:temp12 + 0x20] = temp8;\n        var temp13 = temp12 + 0x20;\n        memory[temp13:temp13 + 0x20] = temp9;\n        var temp14 = temp13 + 0x20;\n        memory[temp14:temp14 + 0x20] = temp10;\n        var temp15 = memory[0x40:0x60];\n        log(memory[temp15:temp15 + (temp14 + 0x20) - temp15], [0xa9c8dfcda5664a5a124c713e386da27de87432d5b668e79458501eb296389ba7]);\n    }\n    \n    function func_0A1C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n        var var2 = var0;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = 0x0a38;\n        var var8 = var1;\n        var7 = func_0BA3(var8);\n    \n        if (!var7) { revert(memory[0x00:0x00]); }\n    \n        var7 = 0x0a4c;\n        var8 = var1;\n        var7 = func_0C0E(var8);\n        var2 = var7;\n    \n        if (arg1 < var2) { revert(memory[0x00:0x00]); }\n    \n        var3 = storage[var1] & 0x02 ** 0xa0 - 0x01;\n        var7 = 0x0a71;\n        var8 = arg0;\n        func_0C95(var8);\n    \n        if (var2 <= 0x00) {\n        label_0ABB:\n            var temp0 = arg1 - var2;\n            var6 = temp0;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var6 * 0x08fc).value(var6)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = arg0;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var2;\n            memory[temp3 + 0x40:temp3 + 0x40 + 0x20] = msg.sender;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x60) - temp4], [0x4fcc30d90a842164dd58501ab874a101a3749c3d4747139cefe7c876f4ccebd2]);\n            return var2;\n        } else {\n            var7 = 0x0a83;\n            var8 = var2;\n            var7 = func_0CE2(var8);\n            var4 = var7;\n            var temp5 = var2 - var4;\n            var5 = temp5;\n            var temp6 = memory[0x40:0x60];\n            var temp7;\n            temp7, memory[temp6:temp6 + 0x00] = address(var3 & 0x02 ** 0xa0 - 0x01).call.gas(!var5 * 0x08fc).value(var5)(memory[temp6:temp6 + memory[0x40:0x60] - temp6]);\n        \n            if (temp7) { goto label_0ABB; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_0B4D(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0xa9059cbb;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = arg1;\n        var var2 = temp0 + 0x44;\n        var var3 = 0x00;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (temp1) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0BA3(var arg0) returns (var r0) { return storage[arg0 + 0x02] / 0x010000000000000000 & 0xffffffffffffffff > 0x00; }\n    \n    function func_0BC4(var arg0, var arg1) {\n        var var0 = 0x0bcd;\n        var var1 = arg0;\n        func_0C95(var1);\n        var0 = 0x0bd7;\n        var1 = arg1;\n        var var2 = arg0;\n        func_0B4D(var1, var2);\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df]);\n    }\n    \n    function func_0C0E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (block.timestamp <= storage[arg0 + 0x02] / 0x010000000000000000 & 0xffffffffffffffff) {\n            var temp0 = arg0;\n            var temp1 = storage[temp0 + 0x01];\n            var var2 = 0x0766;\n            var temp2 = 0x02 ** 0x80 - 0x01;\n            var var3 = temp1 & temp2;\n            var var4 = temp1 / 0x0100000000000000000000000000000000 & temp2;\n            var var5 = storage[temp0 + 0x02] & 0xffffffffffffffff;\n            var var6 = var1;\n            var2 = func_0CEE(var3, var4, var5, var6);\n        \n        label_0766:\n            return var2;\n        } else {\n            var temp3 = arg0;\n            var1 = block.timestamp - (storage[temp3 + 0x02] / 0x010000000000000000 & 0xffffffffffffffff);\n            var temp4 = storage[temp3 + 0x01];\n            var2 = 0x0766;\n            var temp5 = 0x02 ** 0x80 - 0x01;\n            var3 = temp4 & temp5;\n            var4 = temp4 / 0x0100000000000000000000000000000000 & temp5;\n            var5 = storage[temp3 + 0x02] & 0xffffffffffffffff;\n            var6 = var1;\n            var2 = func_0CEE(var3, var4, var5, var6);\n            goto label_0766;\n        }\n    }\n    \n    function func_0C95(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[temp0 + 0x01] = 0x00;\n        var temp1 = temp0 + 0x02;\n        storage[temp1] = storage[temp1] & ~0xffffffffffffffffffffffffffffffff;\n    }\n    \n    function func_0CE2(var arg0) returns (var r0) { return (arg0 * storage[0x02]) / 0x2710; }\n    \n    function func_0CEE(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (arg3 >= arg2) { return arg1; }\n    \n        var1 = arg1 - arg0;\n        var var4 = arg2;\n        var var5 = var1 * arg3;\n    \n        if (var4) { return arg0 + var5 i/ var4; }\n        else { assert(); }\n    }\n    \n    function func_0D2B() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x00;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x00;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x27ebe40a) {\n            // Dispatch table entry for createAuction(uint256,uint256,uint256,uint256,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0112;\n            var var2 = msg.data[0x04:0x24];\n            var var3 = msg.data[0x24:0x44];\n            var var4 = msg.data[0x44:0x64];\n            var var5 = msg.data[0x64:0x84];\n            var var6 = msg.data[0x84:0xa4] & 0x02 ** 0xa0 - 0x01;\n            createAuction(var2, var3, var4, var5, var6);\n            stop();\n        } else if (var0 == 0x3f4ba83a) {\n            // Dispatch table entry for unpause()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0127;\n            var1 = unpause();\n        \n        label_0127:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = !!var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n        } else if (var0 == 0x454a2ab3) {\n            // Dispatch table entry for bid(uint256)\n            var1 = 0x0112;\n            var2 = msg.data[0x04:0x24];\n            bid(var2);\n            stop();\n        } else if (var0 == 0x484eccb4) {\n            // Dispatch table entry for lastGen0SalePrices(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var2 = msg.data[0x04:0x24];\n            var2 = lastGen0SalePrices(var2);\n        \n        label_015C:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n        } else if (var0 == 0x5c975abb) {\n            // Dispatch table entry for paused()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0127;\n            var2 = paused();\n            goto label_0127;\n        } else if (var0 == 0x5fd8c710) {\n            // Dispatch table entry for withdrawBalance()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0112;\n            withdrawBalance();\n            stop();\n        } else if (var0 == 0x78bd7935) {\n            // Dispatch table entry for getAuction(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01aa;\n            var2 = msg.data[0x04:0x24];\n            var1, var2, var3, var4, var5 = getAuction(var2);\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var2;\n            memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = var3;\n            memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = var4;\n            memory[temp4 + 0x80:temp4 + 0x80 + 0x20] = var5;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + (temp4 + 0xa0) - temp5];\n        } else if (var0 == 0x83b5ff8b) {\n            // Dispatch table entry for ownerCut()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var2 = ownerCut();\n            goto label_015C;\n        } else if (var0 == 0x8456cb59) {\n            // Dispatch table entry for pause()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0127;\n            var1 = pause();\n            goto label_0127;\n        } else if (var0 == 0x85b86188) {\n            // Dispatch table entry for isSaleClockAuction()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0127;\n            var2 = isSaleClockAuction();\n            goto label_0127;\n        } else if (var0 == 0x878eb368) {\n            // Dispatch table entry for cancelAuctionWhenPaused(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0112;\n            var2 = msg.data[0x04:0x24];\n            cancelAuctionWhenPaused(var2);\n            stop();\n        } else if (var0 == 0x8a98a9cc) {\n            // Dispatch table entry for gen0SaleCount()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var2 = gen0SaleCount();\n            goto label_015C;\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025a;\n            var2 = owner();\n        \n        label_025A:\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n        } else if (var0 == 0x96b5a755) {\n            // Dispatch table entry for cancelAuction(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0112;\n            var2 = msg.data[0x04:0x24];\n            cancelAuction(var2);\n            stop();\n        } else if (var0 == 0xc55d0f56) {\n            // Dispatch table entry for getCurrentPrice(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            memory[var3:var3 + 0x20] = var2;\n            memory[0x20:0x40] = 0x03;\n            var4 = keccak256(memory[var3:var3 + 0x40]);\n            var5 = 0x0752;\n            var6 = var4;\n            var5 = func_0BA3(var6);\n        \n            if (!var5) { revert(memory[0x00:0x00]); }\n        \n            var5 = 0x0766;\n            var6 = var4;\n            var5 = func_0C0E(var6);\n            var1 = var5;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0xdd1b7a0f) {\n            // Dispatch table entry for nonFungibleContract()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025a;\n            var2 = nonFungibleContract();\n            goto label_025A;\n        } else if (var0 == 0xeac9d94c) {\n            // Dispatch table entry for averageGen0SalePrice()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var1 = averageGen0SalePrice();\n            goto label_015C;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0112;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            transferOwnership(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function createAuction(var arg0, var arg1, var arg2, var arg3, var arg4) {\n        var var0 = 0x02ef;\n        var0 = func_0D2B();\n        var temp0 = arg1;\n    \n        if (temp0 != temp0 & 0x02 ** 0x80 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg2;\n    \n        if (temp1 != temp1 & 0x02 ** 0x80 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg3;\n    \n        if (temp2 != temp2 & 0xffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp3 != temp3 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0354;\n        var var2 = arg4;\n        var var3 = arg0;\n        func_0806(var2, var3);\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + 0xa0;\n        memory[temp4:temp4 + 0x20] = arg4 & 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg1 & 0x02 ** 0x80 - 0x01;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg2 & 0x02 ** 0x80 - 0x01;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = arg3 & 0xffffffffffffffff;\n        memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = block.timestamp & 0xffffffffffffffff;\n        var0 = temp4;\n        var1 = 0x03b7;\n        var2 = arg0;\n        var3 = var0;\n        func_0881(var2, var3);\n    }\n    \n    function unpause() returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x00] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff0000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33]);\n        return 0x01;\n    }\n    \n    function bid(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var var1 = 0x00;\n        var var0 = storage[keccak256(memory[var1:var1 + 0x40])] & 0x02 ** 0xa0 - 0x01;\n        var var2 = 0x0466;\n        var var3 = arg0;\n        var var4 = msg.value;\n        var2 = func_0A1C(var3, var4);\n        var1 = var2;\n        var2 = 0x0472;\n        var3 = msg.sender;\n        var4 = arg0;\n        func_0B4D(var3, var4);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & var0) {\n        label_04A8:\n            return;\n        } else {\n            var2 = var1;\n            var3 = 0x06;\n            var4 = storage[0x05] % 0x05;\n        \n            if (var4 >= 0x05) { assert(); }\n        \n            storage[var4 + var3] = var2;\n            storage[0x05] = storage[0x05] + 0x01;\n            goto label_04A8;\n        }\n    }\n    \n    function lastGen0SalePrices(var arg0) returns (var arg0) {\n        var var0 = 0x06;\n        var var1 = arg0;\n    \n        if (var1 < 0x05) { return storage[var1 + var0]; }\n        else { assert(); }\n    }\n    \n    function paused() returns (var r0) { return storage[0x00] / 0x02 ** 0xa0 & 0xff; }\n    \n    function withdrawBalance() {\n        var var1 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var var0 = temp0 & storage[0x01];\n        var var2 = storage[var1] & temp0 == temp0 & msg.sender;\n    \n        if (var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0511:\n            var temp1 = address(this).balance;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n            return;\n        } else if (msg.sender == var0 & 0x02 ** 0xa0 - 0x01) { goto label_0511; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getAuction(var arg0) returns (var r0, var arg0, var r2, var r3, var r4) {\n        r2 = 0x00;\n        memory[r2:r2 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        r3 = r2;\n        r4 = r3;\n        var var3 = r4;\n        var var4 = var3;\n        var var5 = keccak256(memory[var4:var4 + 0x40]);\n        var var6 = 0x0566;\n        var var7 = var5;\n        var6 = func_0BA3(var7);\n    \n        if (!var6) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var5;\n        var temp1 = storage[temp0 + 0x01];\n        var temp2 = storage[temp0 + 0x02];\n        r0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        var temp3 = 0x02 ** 0x80 - 0x01;\n        arg0 = temp1 & temp3;\n        r2 = temp3 & temp1 / 0x0100000000000000000000000000000000;\n        r3 = temp2 & 0xffffffffffffffff;\n        r4 = temp2 / 0x010000000000000000 & 0xffffffffffffffff;\n        return r0, arg0, r2, r3, r4;\n    }\n    \n    function ownerCut() returns (var r0) { return storage[0x02]; }\n    \n    function pause() returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625]);\n        return 0x01;\n    }\n    \n    function isSaleClockAuction() returns (var r0) { return storage[0x04] & 0xff; }\n    \n    function cancelAuctionWhenPaused(var arg0) {\n        var var0 = 0x00;\n    \n        if (!(storage[var0] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var0 = keccak256(memory[0x00:0x40]);\n        var var1 = 0x06b8;\n        var var2 = var0;\n        var1 = func_0BA3(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x06d9;\n        var2 = arg0;\n        var var3 = storage[var0] & 0x02 ** 0xa0 - 0x01;\n        func_0BC4(var2, var3);\n    }\n    \n    function gen0SaleCount() returns (var r0) { return storage[0x05]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function cancelAuction(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = 0x00;\n        var var2 = 0x070a;\n        var var3 = var0;\n        var2 = func_0BA3(var3);\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var1 = temp0 & storage[var0];\n    \n        if (var1 != msg.sender & temp0) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x04a8;\n        var3 = arg0;\n        var var4 = var1;\n        func_0BC4(var3, var4);\n    }\n    \n    function nonFungibleContract() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function averageGen0SalePrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= 0x05) {\n        label_07A6:\n            return var1 / 0x05;\n        } else {\n        label_078B:\n            var var3 = 0x06;\n            var var4 = var2;\n        \n            if (var4 >= 0x05) { assert(); }\n        \n            var1 = storage[var4 + var3] + var1;\n            var2 = var2 + 0x01;\n        \n            if (var2 >= 0x05) { goto label_07A6; }\n            else { goto label_078B; }\n        }\n    }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { return; }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_0806(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0x23b872dd;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & arg0;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = arg1;\n        var var2 = temp0 + 0x64;\n        var var3 = 0x00;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0881(var arg0, var arg1) {\n        if (memory[arg1 + 0x60:arg1 + 0x60 + 0x20] & 0xffffffffffffffff < 0x3c) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg1;\n        storage[temp1] = (memory[temp2:temp2 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp3 = temp1 + 0x01;\n        storage[temp3] = (memory[temp2 + 0x20:temp2 + 0x20 + 0x20] & 0x02 ** 0x80 - 0x01) | (storage[temp3] & ~0xffffffffffffffffffffffffffffffff);\n        var temp4 = temp1 + 0x01;\n        var temp5 = 0x02 ** 0x80 - 0x01;\n        storage[temp4] = (temp5 & storage[temp4]) | (temp5 & memory[temp2 + 0x40:temp2 + 0x40 + 0x20]) * 0x0100000000000000000000000000000000;\n        var temp6 = temp1 + 0x02;\n        storage[temp6] = (memory[temp2 + 0x60:temp2 + 0x60 + 0x20] & 0xffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffff);\n        var temp7 = temp1 + 0x02;\n        storage[temp7] = (storage[temp7] & ~0xffffffffffffffff0000000000000000) | (memory[temp2 + 0x80:temp2 + 0x80 + 0x20] & 0xffffffffffffffff) * 0x010000000000000000;\n        var temp8 = memory[temp2 + 0x20:temp2 + 0x20 + 0x20] & 0x02 ** 0x80 - 0x01;\n        var temp9 = memory[temp2 + 0x40:temp2 + 0x40 + 0x20] & 0x02 ** 0x80 - 0x01;\n        var temp10 = memory[temp2 + 0x60:temp2 + 0x60 + 0x20] & 0xffffffffffffffff;\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = temp0;\n        var temp12 = temp11 + 0x20;\n        memory[temp12:temp12 + 0x20] = temp8;\n        var temp13 = temp12 + 0x20;\n        memory[temp13:temp13 + 0x20] = temp9;\n        var temp14 = temp13 + 0x20;\n        memory[temp14:temp14 + 0x20] = temp10;\n        var temp15 = memory[0x40:0x60];\n        log(memory[temp15:temp15 + (temp14 + 0x20) - temp15], [0xa9c8dfcda5664a5a124c713e386da27de87432d5b668e79458501eb296389ba7]);\n    }\n    \n    function func_0A1C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n        var var2 = var0;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = 0x0a38;\n        var var8 = var1;\n        var7 = func_0BA3(var8);\n    \n        if (!var7) { revert(memory[0x00:0x00]); }\n    \n        var7 = 0x0a4c;\n        var8 = var1;\n        var7 = func_0C0E(var8);\n        var2 = var7;\n    \n        if (arg1 < var2) { revert(memory[0x00:0x00]); }\n    \n        var3 = storage[var1] & 0x02 ** 0xa0 - 0x01;\n        var7 = 0x0a71;\n        var8 = arg0;\n        func_0C95(var8);\n    \n        if (var2 <= 0x00) {\n        label_0ABB:\n            var temp0 = arg1 - var2;\n            var6 = temp0;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var6 * 0x08fc).value(var6)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = arg0;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var2;\n            memory[temp3 + 0x40:temp3 + 0x40 + 0x20] = msg.sender;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x60) - temp4], [0x4fcc30d90a842164dd58501ab874a101a3749c3d4747139cefe7c876f4ccebd2]);\n            return var2;\n        } else {\n            var7 = 0x0a83;\n            var8 = var2;\n            var7 = func_0CE2(var8);\n            var4 = var7;\n            var temp5 = var2 - var4;\n            var5 = temp5;\n            var temp6 = memory[0x40:0x60];\n            var temp7;\n            temp7, memory[temp6:temp6 + 0x00] = address(var3 & 0x02 ** 0xa0 - 0x01).call.gas(!var5 * 0x08fc).value(var5)(memory[temp6:temp6 + memory[0x40:0x60] - temp6]);\n        \n            if (temp7) { goto label_0ABB; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_0B4D(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0xa9059cbb;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = arg1;\n        var var2 = temp0 + 0x44;\n        var var3 = 0x00;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (temp1) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0BA3(var arg0) returns (var r0) { return storage[arg0 + 0x02] / 0x010000000000000000 & 0xffffffffffffffff > 0x00; }\n    \n    function func_0BC4(var arg0, var arg1) {\n        var var0 = 0x0bcd;\n        var var1 = arg0;\n        func_0C95(var1);\n        var0 = 0x0bd7;\n        var1 = arg1;\n        var var2 = arg0;\n        func_0B4D(var1, var2);\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df]);\n    }\n    \n    function func_0C0E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (block.timestamp <= storage[arg0 + 0x02] / 0x010000000000000000 & 0xffffffffffffffff) {\n            var temp0 = arg0;\n            var temp1 = storage[temp0 + 0x01];\n            var var2 = 0x0766;\n            var temp2 = 0x02 ** 0x80 - 0x01;\n            var var3 = temp1 & temp2;\n            var var4 = temp1 / 0x0100000000000000000000000000000000 & temp2;\n            var var5 = storage[temp0 + 0x02] & 0xffffffffffffffff;\n            var var6 = var1;\n            var2 = func_0CEE(var3, var4, var5, var6);\n        \n        label_0766:\n            return var2;\n        } else {\n            var temp3 = arg0;\n            var1 = block.timestamp - (storage[temp3 + 0x02] / 0x010000000000000000 & 0xffffffffffffffff);\n            var temp4 = storage[temp3 + 0x01];\n            var2 = 0x0766;\n            var temp5 = 0x02 ** 0x80 - 0x01;\n            var3 = temp4 & temp5;\n            var4 = temp4 / 0x0100000000000000000000000000000000 & temp5;\n            var5 = storage[temp3 + 0x02] & 0xffffffffffffffff;\n            var6 = var1;\n            var2 = func_0CEE(var3, var4, var5, var6);\n            goto label_0766;\n        }\n    }\n    \n    function func_0C95(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[temp0 + 0x01] = 0x00;\n        var temp1 = temp0 + 0x02;\n        storage[temp1] = storage[temp1] & ~0xffffffffffffffffffffffffffffffff;\n    }\n    \n    function func_0CE2(var arg0) returns (var r0) { return (arg0 * storage[0x02]) / 0x2710; }\n    \n    function func_0CEE(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (arg3 >= arg2) { return arg1; }\n    \n        var1 = arg1 - arg0;\n        var var4 = arg2;\n        var var5 = var1 * arg3;\n    \n        if (var4) { return arg0 + var5 i/ var4; }\n        else { assert(); }\n    }\n    \n    function func_0D2B() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x00;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x00;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n    \n        if (var0 == 0x27ebe40a) {\n            // Dispatch table entry for createAuction(uint256,uint256,uint256,uint256,address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var var1 = 0x0112;\n            var var2 = msg.data[0x04:0x24];\n            var var3 = msg.data[0x24:0x44];\n            var var4 = msg.data[0x44:0x64];\n            var var5 = msg.data[0x64:0x84];\n            var var6 = msg.data[0x84:0xa4] & 0x02 ** 0xa0 - 0x01;\n            createAuction(var2, var3, var4, var5, var6);\n            stop();\n        } else if (var0 == 0x3f4ba83a) {\n            // Dispatch table entry for unpause()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0127;\n            var1 = unpause();\n        \n        label_0127:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = !!var1;\n            var temp1 = memory[0x40:0x60];\n            return memory[temp1:temp1 + (temp0 + 0x20) - temp1];\n        } else if (var0 == 0x454a2ab3) {\n            // Dispatch table entry for bid(uint256)\n            var1 = 0x0112;\n            var2 = msg.data[0x04:0x24];\n            bid(var2);\n            stop();\n        } else if (var0 == 0x484eccb4) {\n            // Dispatch table entry for lastGen0SalePrices(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var2 = msg.data[0x04:0x24];\n            var2 = lastGen0SalePrices(var2);\n        \n        label_015C:\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = var2;\n            var temp3 = memory[0x40:0x60];\n            return memory[temp3:temp3 + (temp2 + 0x20) - temp3];\n        } else if (var0 == 0x5c975abb) {\n            // Dispatch table entry for paused()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0127;\n            var2 = paused();\n            goto label_0127;\n        } else if (var0 == 0x5fd8c710) {\n            // Dispatch table entry for withdrawBalance()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0112;\n            withdrawBalance();\n            stop();\n        } else if (var0 == 0x78bd7935) {\n            // Dispatch table entry for getAuction(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x01aa;\n            var2 = msg.data[0x04:0x24];\n            var1, var2, var3, var4, var5 = getAuction(var2);\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = var1 & 0x02 ** 0xa0 - 0x01;\n            memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = var2;\n            memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = var3;\n            memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = var4;\n            memory[temp4 + 0x80:temp4 + 0x80 + 0x20] = var5;\n            var temp5 = memory[0x40:0x60];\n            return memory[temp5:temp5 + (temp4 + 0xa0) - temp5];\n        } else if (var0 == 0x83b5ff8b) {\n            // Dispatch table entry for ownerCut()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var2 = ownerCut();\n            goto label_015C;\n        } else if (var0 == 0x8456cb59) {\n            // Dispatch table entry for pause()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0127;\n            var1 = pause();\n            goto label_0127;\n        } else if (var0 == 0x85b86188) {\n            // Dispatch table entry for isSaleClockAuction()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0127;\n            var2 = isSaleClockAuction();\n            goto label_0127;\n        } else if (var0 == 0x878eb368) {\n            // Dispatch table entry for cancelAuctionWhenPaused(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0112;\n            var2 = msg.data[0x04:0x24];\n            cancelAuctionWhenPaused(var2);\n            stop();\n        } else if (var0 == 0x8a98a9cc) {\n            // Dispatch table entry for gen0SaleCount()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var2 = gen0SaleCount();\n            goto label_015C;\n        } else if (var0 == 0x8da5cb5b) {\n            // Dispatch table entry for owner()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025a;\n            var2 = owner();\n        \n        label_025A:\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n            var temp7 = memory[0x40:0x60];\n            return memory[temp7:temp7 + (temp6 + 0x20) - temp7];\n        } else if (var0 == 0x96b5a755) {\n            // Dispatch table entry for cancelAuction(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0112;\n            var2 = msg.data[0x04:0x24];\n            cancelAuction(var2);\n            stop();\n        } else if (var0 == 0xc55d0f56) {\n            // Dispatch table entry for getCurrentPrice(uint256)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var2 = msg.data[0x04:0x24];\n            var3 = 0x00;\n            memory[var3:var3 + 0x20] = var2;\n            memory[0x20:0x40] = 0x03;\n            var4 = keccak256(memory[var3:var3 + 0x40]);\n            var5 = 0x0752;\n            var6 = var4;\n            var5 = func_0BA3(var6);\n        \n            if (!var5) { revert(memory[0x00:0x00]); }\n        \n            var5 = 0x0766;\n            var6 = var4;\n            var5 = func_0C0E(var6);\n            var1 = var5;\n            // Error: Could not resolve jump destination!\n        } else if (var0 == 0xdd1b7a0f) {\n            // Dispatch table entry for nonFungibleContract()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x025a;\n            var2 = nonFungibleContract();\n            goto label_025A;\n        } else if (var0 == 0xeac9d94c) {\n            // Dispatch table entry for averageGen0SalePrice()\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x015c;\n            var1 = averageGen0SalePrice();\n            goto label_015C;\n        } else if (var0 == 0xf2fde38b) {\n            // Dispatch table entry for transferOwnership(address)\n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var1 = 0x0112;\n            var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n            transferOwnership(var2);\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function createAuction(var arg0, var arg1, var arg2, var arg3, var arg4) {\n        var var0 = 0x02ef;\n        var0 = func_0D2B();\n        var temp0 = arg1;\n    \n        if (temp0 != temp0 & 0x02 ** 0x80 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp1 = arg2;\n    \n        if (temp1 != temp1 & 0x02 ** 0x80 - 0x01) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = arg3;\n    \n        if (temp2 != temp2 & 0xffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp3 != temp3 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var1 = 0x0354;\n        var var2 = arg4;\n        var var3 = arg0;\n        func_0806(var2, var3);\n        var temp4 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp4 + 0xa0;\n        memory[temp4:temp4 + 0x20] = arg4 & 0x02 ** 0xa0 - 0x01;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg1 & 0x02 ** 0x80 - 0x01;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg2 & 0x02 ** 0x80 - 0x01;\n        var temp7 = temp6 + 0x20;\n        memory[temp7:temp7 + 0x20] = arg3 & 0xffffffffffffffff;\n        memory[temp7 + 0x20:temp7 + 0x20 + 0x20] = block.timestamp & 0xffffffffffffffff;\n        var0 = temp4;\n        var1 = 0x03b7;\n        var2 = arg0;\n        var3 = var0;\n        func_0881(var2, var3);\n    }\n    \n    function unpause() returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(storage[0x00] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = storage[0x00] & ~0xff0000000000000000000000000000000000000000;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b33]);\n        return 0x01;\n    }\n    \n    function bid(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var var1 = 0x00;\n        var var0 = storage[keccak256(memory[var1:var1 + 0x40])] & 0x02 ** 0xa0 - 0x01;\n        var var2 = 0x0466;\n        var var3 = arg0;\n        var var4 = msg.value;\n        var2 = func_0A1C(var3, var4);\n        var1 = var2;\n        var2 = 0x0472;\n        var3 = msg.sender;\n        var4 = arg0;\n        func_0B4D(var3, var4);\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x01] & temp0 != temp0 & var0) {\n        label_04A8:\n            return;\n        } else {\n            var2 = var1;\n            var3 = 0x06;\n            var4 = storage[0x05] % 0x05;\n        \n            if (var4 >= 0x05) { assert(); }\n        \n            storage[var4 + var3] = var2;\n            storage[0x05] = storage[0x05] + 0x01;\n            goto label_04A8;\n        }\n    }\n    \n    function lastGen0SalePrices(var arg0) returns (var arg0) {\n        var var0 = 0x06;\n        var var1 = arg0;\n    \n        if (var1 < 0x05) { return storage[var1 + var0]; }\n        else { assert(); }\n    }\n    \n    function paused() returns (var r0) { return storage[0x00] / 0x02 ** 0xa0 & 0xff; }\n    \n    function withdrawBalance() {\n        var var1 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var var0 = temp0 & storage[0x01];\n        var var2 = storage[var1] & temp0 == temp0 & msg.sender;\n    \n        if (var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0511:\n            var temp1 = address(this).balance;\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x00] = address(var0 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n            return;\n        } else if (msg.sender == var0 & 0x02 ** 0xa0 - 0x01) { goto label_0511; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function getAuction(var arg0) returns (var r0, var arg0, var r2, var r3, var r4) {\n        r2 = 0x00;\n        memory[r2:r2 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        r3 = r2;\n        r4 = r3;\n        var var3 = r4;\n        var var4 = var3;\n        var var5 = keccak256(memory[var4:var4 + 0x40]);\n        var var6 = 0x0566;\n        var var7 = var5;\n        var6 = func_0BA3(var7);\n    \n        if (!var6) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = var5;\n        var temp1 = storage[temp0 + 0x01];\n        var temp2 = storage[temp0 + 0x02];\n        r0 = storage[temp0] & 0x02 ** 0xa0 - 0x01;\n        var temp3 = 0x02 ** 0x80 - 0x01;\n        arg0 = temp1 & temp3;\n        r2 = temp3 & temp1 / 0x0100000000000000000000000000000000;\n        r3 = temp2 & 0xffffffffffffffff;\n        r4 = temp2 / 0x010000000000000000 & 0xffffffffffffffff;\n        return r0, arg0, r2, r3, r4;\n    }\n    \n    function ownerCut() returns (var r0) { return storage[0x02]; }\n    \n    function pause() returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[var0] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (storage[0x00] / 0x02 ** 0xa0 & 0xff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (storage[0x00] & ~0xff0000000000000000000000000000000000000000) | 0x02 ** 0xa0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + memory[0x40:0x60] - temp1], [0x6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff625]);\n        return 0x01;\n    }\n    \n    function isSaleClockAuction() returns (var r0) { return storage[0x04] & 0xff; }\n    \n    function cancelAuctionWhenPaused(var arg0) {\n        var var0 = 0x00;\n    \n        if (!(storage[var0] / 0x02 ** 0xa0 & 0xff)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var0 = keccak256(memory[0x00:0x40]);\n        var var1 = 0x06b8;\n        var var2 = var0;\n        var1 = func_0BA3(var2);\n    \n        if (!var1) { revert(memory[0x00:0x00]); }\n    \n        var1 = 0x06d9;\n        var2 = arg0;\n        var var3 = storage[var0] & 0x02 ** 0xa0 - 0x01;\n        func_0BC4(var2, var3);\n    }\n    \n    function gen0SaleCount() returns (var r0) { return storage[0x05]; }\n    \n    function owner() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function cancelAuction(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var var0 = keccak256(memory[0x00:0x40]);\n        var var1 = 0x00;\n        var var2 = 0x070a;\n        var var3 = var0;\n        var2 = func_0BA3(var3);\n    \n        if (!var2) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        var1 = temp0 & storage[var0];\n    \n        if (var1 != msg.sender & temp0) { revert(memory[0x00:0x00]); }\n    \n        var2 = 0x04a8;\n        var3 = arg0;\n        var var4 = var1;\n        func_0BC4(var3, var4);\n    }\n    \n    function nonFungibleContract() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function averageGen0SalePrice() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (var2 >= 0x05) {\n        label_07A6:\n            return var1 / 0x05;\n        } else {\n        label_078B:\n            var var3 = 0x06;\n            var var4 = var2;\n        \n            if (var4 >= 0x05) { assert(); }\n        \n            var1 = storage[var4 + var3] + var1;\n            var2 = var2 + 0x01;\n        \n            if (var2 >= 0x05) { goto label_07A6; }\n            else { goto label_078B; }\n        }\n    }\n    \n    function transferOwnership(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { return; }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function func_0806(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0x23b872dd;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & arg0;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = arg1;\n        var var2 = temp0 + 0x64;\n        var var3 = 0x00;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp2;\n        temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (temp2) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0881(var arg0, var arg1) {\n        if (memory[arg1 + 0x60:arg1 + 0x60 + 0x20] & 0xffffffffffffffff < 0x3c) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x03;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg1;\n        storage[temp1] = (memory[temp2:temp2 + 0x20] & 0x02 ** 0xa0 - 0x01) | (storage[temp1] & ~0xffffffffffffffffffffffffffffffffffffffff);\n        var temp3 = temp1 + 0x01;\n        storage[temp3] = (memory[temp2 + 0x20:temp2 + 0x20 + 0x20] & 0x02 ** 0x80 - 0x01) | (storage[temp3] & ~0xffffffffffffffffffffffffffffffff);\n        var temp4 = temp1 + 0x01;\n        var temp5 = 0x02 ** 0x80 - 0x01;\n        storage[temp4] = (temp5 & storage[temp4]) | (temp5 & memory[temp2 + 0x40:temp2 + 0x40 + 0x20]) * 0x0100000000000000000000000000000000;\n        var temp6 = temp1 + 0x02;\n        storage[temp6] = (memory[temp2 + 0x60:temp2 + 0x60 + 0x20] & 0xffffffffffffffff) | (storage[temp6] & ~0xffffffffffffffff);\n        var temp7 = temp1 + 0x02;\n        storage[temp7] = (storage[temp7] & ~0xffffffffffffffff0000000000000000) | (memory[temp2 + 0x80:temp2 + 0x80 + 0x20] & 0xffffffffffffffff) * 0x010000000000000000;\n        var temp8 = memory[temp2 + 0x20:temp2 + 0x20 + 0x20] & 0x02 ** 0x80 - 0x01;\n        var temp9 = memory[temp2 + 0x40:temp2 + 0x40 + 0x20] & 0x02 ** 0x80 - 0x01;\n        var temp10 = memory[temp2 + 0x60:temp2 + 0x60 + 0x20] & 0xffffffffffffffff;\n        var temp11 = memory[0x40:0x60];\n        memory[temp11:temp11 + 0x20] = temp0;\n        var temp12 = temp11 + 0x20;\n        memory[temp12:temp12 + 0x20] = temp8;\n        var temp13 = temp12 + 0x20;\n        memory[temp13:temp13 + 0x20] = temp9;\n        var temp14 = temp13 + 0x20;\n        memory[temp14:temp14 + 0x20] = temp10;\n        var temp15 = memory[0x40:0x60];\n        log(memory[temp15:temp15 + (temp14 + 0x20) - temp15], [0xa9c8dfcda5664a5a124c713e386da27de87432d5b668e79458501eb296389ba7]);\n    }\n    \n    function func_0A1C(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        memory[var0:var0 + 0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var var1 = keccak256(memory[var0:var0 + 0x40]);\n        var var2 = var0;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n        var var7 = 0x0a38;\n        var var8 = var1;\n        var7 = func_0BA3(var8);\n    \n        if (!var7) { revert(memory[0x00:0x00]); }\n    \n        var7 = 0x0a4c;\n        var8 = var1;\n        var7 = func_0C0E(var8);\n        var2 = var7;\n    \n        if (arg1 < var2) { revert(memory[0x00:0x00]); }\n    \n        var3 = storage[var1] & 0x02 ** 0xa0 - 0x01;\n        var7 = 0x0a71;\n        var8 = arg0;\n        func_0C95(var8);\n    \n        if (var2 <= 0x00) {\n        label_0ABB:\n            var temp0 = arg1 - var2;\n            var6 = temp0;\n            var temp1 = memory[0x40:0x60];\n            var temp2;\n            temp2, memory[temp1:temp1 + 0x00] = address(msg.sender).call.gas(!var6 * 0x08fc).value(var6)(memory[temp1:temp1 + memory[0x40:0x60] - temp1]);\n        \n            if (!temp2) { revert(memory[0x00:0x00]); }\n        \n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = arg0;\n            memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var2;\n            memory[temp3 + 0x40:temp3 + 0x40 + 0x20] = msg.sender;\n            var temp4 = memory[0x40:0x60];\n            log(memory[temp4:temp4 + (temp3 + 0x60) - temp4], [0x4fcc30d90a842164dd58501ab874a101a3749c3d4747139cefe7c876f4ccebd2]);\n            return var2;\n        } else {\n            var7 = 0x0a83;\n            var8 = var2;\n            var7 = func_0CE2(var8);\n            var4 = var7;\n            var temp5 = var2 - var4;\n            var5 = temp5;\n            var temp6 = memory[0x40:0x60];\n            var temp7;\n            temp7, memory[temp6:temp6 + 0x00] = address(var3 & 0x02 ** 0xa0 - 0x01).call.gas(!var5 * 0x08fc).value(var5)(memory[temp6:temp6 + memory[0x40:0x60] - temp6]);\n        \n            if (temp7) { goto label_0ABB; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function func_0B4D(var arg0, var arg1) {\n        var var0 = storage[0x01] & 0x02 ** 0xa0 - 0x01;\n        var var1 = 0xa9059cbb;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var1 & 0xffffffff) * 0x02 ** 0xe0;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = arg0 & 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = arg1;\n        var var2 = temp0 + 0x44;\n        var var3 = 0x00;\n        var var4 = memory[0x40:0x60];\n        var var5 = var2 - var4;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (temp1) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function func_0BA3(var arg0) returns (var r0) { return storage[arg0 + 0x02] / 0x010000000000000000 & 0xffffffffffffffff > 0x00; }\n    \n    function func_0BC4(var arg0, var arg1) {\n        var var0 = 0x0bcd;\n        var var1 = arg0;\n        func_0C95(var1);\n        var0 = 0x0bd7;\n        var1 = arg1;\n        var var2 = arg0;\n        func_0B4D(var1, var2);\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = arg0;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x2809c7e17bf978fbc7194c0a694b638c4215e9140cacc6c38ca36010b45697df]);\n    }\n    \n    function func_0C0E(var arg0) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (block.timestamp <= storage[arg0 + 0x02] / 0x010000000000000000 & 0xffffffffffffffff) {\n            var temp0 = arg0;\n            var temp1 = storage[temp0 + 0x01];\n            var var2 = 0x0766;\n            var temp2 = 0x02 ** 0x80 - 0x01;\n            var var3 = temp1 & temp2;\n            var var4 = temp1 / 0x0100000000000000000000000000000000 & temp2;\n            var var5 = storage[temp0 + 0x02] & 0xffffffffffffffff;\n            var var6 = var1;\n            var2 = func_0CEE(var3, var4, var5, var6);\n        \n        label_0766:\n            return var2;\n        } else {\n            var temp3 = arg0;\n            var1 = block.timestamp - (storage[temp3 + 0x02] / 0x010000000000000000 & 0xffffffffffffffff);\n            var temp4 = storage[temp3 + 0x01];\n            var2 = 0x0766;\n            var temp5 = 0x02 ** 0x80 - 0x01;\n            var3 = temp4 & temp5;\n            var4 = temp4 / 0x0100000000000000000000000000000000 & temp5;\n            var5 = storage[temp3 + 0x02] & 0xffffffffffffffff;\n            var6 = var1;\n            var2 = func_0CEE(var3, var4, var5, var6);\n            goto label_0766;\n        }\n    }\n    \n    function func_0C95(var arg0) {\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = 0x03;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        storage[temp0] = storage[temp0] & ~0xffffffffffffffffffffffffffffffffffffffff;\n        storage[temp0 + 0x01] = 0x00;\n        var temp1 = temp0 + 0x02;\n        storage[temp1] = storage[temp1] & ~0xffffffffffffffffffffffffffffffff;\n    }\n    \n    function func_0CE2(var arg0) returns (var r0) { return (arg0 * storage[0x02]) / 0x2710; }\n    \n    function func_0CEE(var arg0, var arg1, var arg2, var arg3) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n    \n        if (arg3 >= arg2) { return arg1; }\n    \n        var1 = arg1 - arg0;\n        var var4 = arg2;\n        var var5 = var1 * arg3;\n    \n        if (var4) { return arg0 + var5 i/ var4; }\n        else { assert(); }\n    }\n    \n    function func_0D2B() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0xa0;\n        memory[temp0:temp0 + 0x20] = 0x00;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x00;\n        memory[temp0 + 0x40:temp0 + 0x40 + 0x20] = 0x00;\n        memory[temp0 + 0x60:temp0 + 0x60 + 0x20] = 0x00;\n        memory[temp0 + 0x80:temp0 + 0x80 + 0x20] = 0x00;\n        return temp0;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 45.14633798599243,
	"usage": {
		"completion_tokens": 767,
		"prompt_tokens": 8716,
		"total_tokens": 9483
	}
}