{
	"address": "0x3c020e014069df790d4f4e63fd297ba4e1c8e51f",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "As per your request, here is a Solidity contract that represents the same logic as the provided decompiled code. Please note that due to the complexity and specificity of the decompiled code, the resulting Solidity contract may not be identical but it will be functionally equivalent.\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract Contract {\n    mapping (address => uint256) public balances;\n    uint256 public feeMake;\n    uint256 public feeTake;\n    uint256 public feeRebate;\n    address public feeAccount;\n    address public admin;\n    address public accountLevelsAddr;\n    \n    function deposit() external payable {\n        balances[msg.sender] += msg.value;\n    }\n    \n    function withdraw(uint256 amount) external {\n        require(balances[msg.sender] >= amount);\n        balances[msg.sender] -= amount;\n        payable(msg.sender).transfer(amount);\n    }\n    \n    function changeAdmin(address newAdmin) external {\n        require(msg.sender == admin);\n        admin = newAdmin;\n    }\n    \n    function changeFeeAccount(address newFeeAccount) external {\n        require(msg.sender == admin);\n        feeAccount = newFeeAccount;\n    }\n    \n    function changeAccountLevelsAddr(address newAccountLevelsAddr) external {\n        require(msg.sender == admin);\n        accountLevelsAddr = newAccountLevelsAddr;\n    }\n    \n    function changeFeeMake(uint256 newFeeMake) external {\n        require(msg.sender == admin);\n        feeMake = newFeeMake;\n    }\n    \n    function changeFeeTake(uint256 newFeeTake) external {\n        require(msg.sender == admin);\n        feeTake = newFeeTake;\n    }\n    \n    function changeFeeRebate(uint256 newFeeRebate) external {\n        require(msg.sender == admin);\n        feeRebate = newFeeRebate;\n    }\n    \n    function balanceOf(address user) external view returns (uint256) {\n        return balances[user];\n    }\n}\n```\n\nThis contract allows for deposits and withdrawals, changing of various settings by the admin, and querying of balances. It's important to note that the actual functionality may vary significantly based on the exact nature of the decompiled code.",
				"role": "assistant"
			}
		}
	],
	"created": 1700473524,
	"id": "chatcmpl-8Mv8GHt8i9cCdvAG7a0youQWu4oI2",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0151:\n        \n            if (msg.value) { assert(); }\n        \n            var var0 = 0x0165;\n            revert(memory[0x00:0x00]);\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x0a19b14a) {\n                // Dispatch table entry for trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x0165;\n                var temp0 = 0x02 ** 0xa0 - 0x01;\n                var var2 = temp0 & msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44];\n                var var4 = temp0 & msg.data[0x44:0x64];\n                var var5 = msg.data[0x64:0x84];\n                var var6 = msg.data[0x84:0xa4];\n                var var7 = msg.data[0xa4:0xc4];\n                var var8 = msg.data[0xc4:0xe4] & temp0;\n                var var9 = msg.data[0xe4:0x0104] & 0xff;\n                var var10 = msg.data[0x0104:0x0124];\n                var var11 = msg.data[0x0124:0x0144];\n                var var12 = msg.data[0x0144:0x0164];\n                trade(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12);\n                stop();\n            } else if (var0 == 0x0b927666) {\n                // Dispatch table entry for order(address,uint256,address,uint256,uint256,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var temp1 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp1 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp1;\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                order(var2, var3, var4, var5, var6, var7);\n                stop();\n            } else if (var0 == 0x19774d43) {\n                // Dispatch table entry for orderFills(address,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var2 = orderFills(var2, var3);\n            \n            label_0203:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x278b8c0e) {\n                // Dispatch table entry for cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var temp4 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp4 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp4;\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                var8 = msg.data[0xc4:0xe4] & 0xff;\n                var9 = msg.data[0xe4:0x0104];\n                var10 = msg.data[0x0104:0x0124];\n                cancelOrder(var2, var3, var4, var5, var6, var7, var8, var9, var10);\n                stop();\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24];\n                memory[0x00:0x20] = msg.sender;\n                var temp5 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x19e1:0x1a01];\n                var temp6 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp5;\n                memory[0x20:0x40] = temp6;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < var2) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = msg.sender;\n                var temp7 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x19e1:0x1a01];\n                var temp8 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp7;\n                memory[0x20:0x40] = temp8;\n                var4 = storage[keccak256(memory[0x00:0x40])];\n                var3 = 0x0c54;\n                var5 = var2;\n                var3 = withdraw(var4, var5);\n                var temp9 = msg.sender;\n                memory[0x00:0x20] = temp9;\n                var temp10 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x19e1:0x1a01];\n                var temp11 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp10;\n                memory[0x20:0x40] = temp11;\n                storage[keccak256(memory[0x00:0x40])] = var3;\n                var temp12 = memory[0x40:0x60];\n                var temp13;\n                temp13, memory[temp12:temp12 + 0x00] = address(temp9).call.gas(msg.gas - 0x8796).value(var2)(memory[temp12:temp12 + 0x00]);\n            \n                if (!temp13) { revert(memory[0x00:0x00]); }\n            \n                var temp14 = msg.sender;\n                memory[0x00:0x20] = temp14;\n                var temp15 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x19e1:0x1a01];\n                var temp16 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp15;\n                memory[0x20:0x40] = temp16;\n                var temp17 = storage[keccak256(memory[0x00:0x40])];\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = 0x00;\n                memory[temp18 + 0x20:temp18 + 0x20 + 0x20] = temp14;\n                memory[temp18 + 0x40:temp18 + 0x40 + 0x20] = var2;\n                memory[temp18 + 0x60:temp18 + 0x60 + 0x20] = temp17;\n                var temp19 = memory[0x40:0x60];\n                log(memory[temp19:temp19 + temp18 - temp19 + 0x80], [0xf341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567]);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x338b5dea) {\n                // Dispatch table entry for depositToken(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                depositToken(var2, var3);\n                stop();\n            } else if (var0 == 0x46be96c3) {\n                // Dispatch table entry for amountFilled(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var temp20 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp20 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = temp20 & msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                var8 = msg.data[0xc4:0xe4] & temp20;\n                var9 = msg.data[0xe4:0x0104] & 0xff;\n                var10 = msg.data[0x0104:0x0124];\n                var11 = msg.data[0x0124:0x0144];\n                var1 = amountFilled(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11);\n                goto label_0203;\n            } else if (var0 == 0x508493bc) {\n                // Dispatch table entry for tokens(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var temp21 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp21 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp21;\n                var2 = tokens(var2, var3);\n                goto label_0203;\n            } else if (var0 == 0x54d03b5c) {\n                // Dispatch table entry for changeFeeMake(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24];\n                changeFeeMake(var2);\n                stop();\n            } else if (var0 == 0x57786394) {\n                // Dispatch table entry for feeMake()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var2 = feeMake();\n                goto label_0203;\n            } else if (var0 == 0x5e1d7ae4) {\n                // Dispatch table entry for changeFeeRebate(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24];\n                changeFeeRebate(var2);\n                stop();\n            } else if (var0 == 0x65e17c9d) {\n                // Dispatch table entry for feeAccount()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0371;\n                var2 = feeAccount();\n            \n            label_0371:\n                var temp22 = memory[0x40:0x60];\n                memory[temp22:temp22 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + temp22 - temp23 + 0x20];\n            } else if (var0 == 0x6c86888b) {\n                // Dispatch table entry for testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03e2;\n                var temp24 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp24 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = temp24 & msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                var8 = temp24 & msg.data[0xc4:0xe4];\n                var9 = msg.data[0xe4:0x0104] & 0xff;\n                var10 = msg.data[0x0104:0x0124];\n                var11 = msg.data[0x0124:0x0144];\n                var12 = msg.data[0x0144:0x0164];\n                var var13 = msg.data[0x0164:0x0184] & temp24;\n                var1 = testTrade(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13);\n            \n            label_03E2:\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = !!var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + temp25 - temp26 + 0x20];\n            } else if (var0 == 0x71ffcb16) {\n                // Dispatch table entry for changeFeeAccount(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                changeFeeAccount(var2);\n                stop();\n            } else if (var0 == 0x731c2f81) {\n                // Dispatch table entry for feeRebate()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var2 = feeRebate();\n                goto label_0203;\n            } else if (var0 == 0x8823a9c0) {\n                // Dispatch table entry for changeFeeTake(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24];\n                changeFeeTake(var2);\n                stop();\n            } else if (var0 == 0x8f283970) {\n                // Dispatch table entry for changeAdmin(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                changeAdmin(var2);\n                stop();\n            } else if (var0 == 0x9e281a98) {\n                // Dispatch table entry for withdrawToken(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                withdrawToken(var2, var3);\n                stop();\n            } else if (var0 == 0xbb5f4629) {\n                // Dispatch table entry for orders(address,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03e2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var2 = orders(var2, var3);\n                goto label_03E2;\n            } else if (var0 == 0xc281309e) {\n                // Dispatch table entry for feeTake()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var2 = feeTake();\n                goto label_0203;\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x0165;\n                deposit();\n                stop();\n            } else if (var0 == 0xe8f6bc2e) {\n                // Dispatch table entry for changeAccountLevelsAddr(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                changeAccountLevelsAddr(var2);\n                stop();\n            } else if (var0 == 0xf3412942) {\n                // Dispatch table entry for accountLevelsAddr()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0371;\n                var2 = accountLevelsAddr();\n                goto label_0371;\n            } else if (var0 == 0xf7888aec) {\n                // Dispatch table entry for balanceOf(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var temp27 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp27 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp27;\n                var1 = balanceOf(var2, var3);\n                goto label_0203;\n            } else if (var0 == 0xf851a440) {\n                // Dispatch table entry for admin()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0371;\n                var2 = admin();\n                goto label_0371;\n            } else if (var0 == 0xfb6e155f) {\n                // Dispatch table entry for availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var temp28 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp28 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = temp28 & msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                var8 = msg.data[0xc4:0xe4] & temp28;\n                var9 = msg.data[0xe4:0x0104] & 0xff;\n                var10 = msg.data[0x0104:0x0124];\n                var11 = msg.data[0x0124:0x0144];\n                var1 = availableVolume(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11);\n                goto label_0203;\n            } else { goto label_0151; }\n        }\n    }\n    \n    function trade(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10) {\n        var var0 = 0x00;\n        var var1 = 0x02;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = address(this) * 0x02 ** 0x60;\n        var temp1 = temp0 + 0x14;\n        memory[temp1:temp1 + 0x20] = (arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp2 = temp1 + 0x14;\n        memory[temp2:temp2 + 0x20] = arg1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = (arg2 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp4 = temp3 + 0x14;\n        memory[temp4:temp4 + 0x20] = arg3;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg5;\n        var var2 = temp6 + 0x20;\n        var temp7 = memory[0x40:0x60];\n        var temp8;\n        temp8, memory[temp7:temp7 + 0x20] = address(var1).call.gas(msg.gas - 0x646e)(memory[temp7:temp7 + var2 - temp7]);\n    \n        if (!temp8) { assert(); }\n    \n        var temp9 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp9;\n        memory[0x20:0x40] = temp10;\n        var0 = temp9;\n        var1 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (var1) {\n        label_077C:\n        \n            if (var1) {\n                var1 = block.number <= arg4;\n            \n                if (!var1) { goto label_07C2; }\n                else { goto label_078F; }\n            } else if (!var1) {\n            label_07C2:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07dc;\n                var2 = arg0;\n                var var3 = arg1;\n                var var4 = arg2;\n                var var5 = arg3;\n                var var6 = arg6;\n                var var7 = arg10;\n                func_16AA(var2, var3, var4, var5, var6, var7);\n                memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x08;\n                var temp11 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var0;\n                memory[0x20:0x40] = temp11;\n                var1 = 0x080a;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var3 = arg10;\n                var1 = func_1682(var2, var3);\n                memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x08;\n                var temp12 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var0;\n                memory[0x20:0x40] = temp12;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                var1 = 0x6effdda786735d5033bfad5f53e5131abcced9e52be6c507b62d639685fbed6d;\n                var2 = arg0;\n                var3 = arg10;\n                var4 = arg2;\n                var5 = arg1;\n                var6 = var3 * arg3;\n            \n                if (!var5) { assert(); }\n            \n                var temp13 = memory[0x40:0x60];\n                var temp14 = 0x02 ** 0xa0 - 0x01;\n                memory[temp13:temp13 + 0x20] = temp14 & var2;\n                memory[temp13 + 0x20:temp13 + 0x20 + 0x20] = var3;\n                memory[temp13 + 0x40:temp13 + 0x40 + 0x20] = temp14 & var4;\n                memory[temp13 + 0x60:temp13 + 0x60 + 0x20] = var6 / var5;\n                memory[temp13 + 0x80:temp13 + 0x80 + 0x20] = arg6 & temp14;\n                memory[temp13 + 0xa0:temp13 + 0xa0 + 0x20] = msg.sender & temp14;\n                var temp15 = memory[0x40:0x60];\n                log(memory[temp15:temp15 + temp13 - temp15 + 0xc0], [stack[-6]]);\n                return;\n            } else {\n            label_078F:\n                memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x08;\n                var temp16 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var0;\n                memory[0x20:0x40] = temp16;\n                var1 = arg1;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var2 = 0x07bf;\n                var4 = arg10;\n                var2 = func_1682(var3, var4);\n                var1 = var2 <= var1;\n                goto label_07C2;\n            }\n        } else {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n            memory[temp17 + 0x1c:temp17 + 0x1c + 0x20] = var0;\n            var temp18 = memory[0x40:0x60];\n            var temp19 = keccak256(memory[temp18:temp18 + temp17 - temp18 + 0x3c]);\n            memory[0x00:0x20] = temp18;\n            memory[0x40:0x60] = temp18 + 0x20;\n            memory[temp18 + 0x40:temp18 + 0x40 + 0x20] = 0x00;\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = temp19;\n            memory[temp20 + 0x20:temp20 + 0x20 + 0x20] = arg7 & 0xff;\n            memory[temp20 + 0x40:temp20 + 0x40 + 0x20] = arg8;\n            memory[temp20 + 0x60:temp20 + 0x60 + 0x20] = arg9;\n            var temp21 = memory[0x40:0x60];\n            var1 = arg6 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0x01;\n            var3 = temp20 + 0x80;\n            var temp22;\n            temp22, memory[temp21 + ~0x1f:temp21 + ~0x1f + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp21:temp21 + temp20 - temp21 + 0x80]);\n        \n            if (!temp22) { assert(); }\n        \n            var1 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var1;\n            goto label_077C;\n        }\n    }\n    \n    function order(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & address(this)) * 0x02 ** 0x60;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (arg0 & temp1) * 0x02 ** 0x60;\n        memory[temp0 + 0x28:temp0 + 0x28 + 0x20] = arg1;\n        memory[temp0 + 0x48:temp0 + 0x48 + 0x20] = (arg2 & temp1) * 0x02 ** 0x60;\n        memory[temp0 + 0x5c:temp0 + 0x5c + 0x20] = arg3;\n        memory[temp0 + 0x7c:temp0 + 0x7c + 0x20] = arg4;\n        memory[temp0 + 0x9c:temp0 + 0x9c + 0x20] = arg5;\n        var temp2 = memory[0x40:0x60];\n        var var0 = 0x00;\n        var var1 = 0x02;\n        var var2 = temp0 + 0xbc;\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x20] = address(var1).call.gas(msg.gas - 0x646e).value(var0)(memory[temp2:temp2 + temp0 - temp2 + 0xbc]);\n    \n        if (!temp3) { assert(); }\n    \n        var temp4 = memory[0x40:0x60];\n        var temp5 = memory[temp4:temp4 + 0x20];\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var temp7 = temp6 & msg.sender;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x07;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp8;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        storage[temp9] = (storage[temp9] & ~0xff) | 0x01;\n        memory[temp4:temp4 + 0x20] = temp6 & arg0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = arg1;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = arg2 & temp6;\n        memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = arg3;\n        memory[temp4 + 0x80:temp4 + 0x80 + 0x20] = arg4;\n        memory[temp4 + 0xa0:temp4 + 0xa0 + 0x20] = arg5;\n        memory[temp4 + 0xc0:temp4 + 0xc0 + 0x20] = temp7;\n        var temp10 = memory[0x40:0x60];\n        log(memory[temp10:temp10 + temp4 - temp10 + 0xe0], [0x3f7f2eda73683c21a15f9435af1028c93185b5f1fa38270762dc32be606b3e85]);\n    }\n    \n    function orderFills(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function cancelOrder(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & address(this)) * 0x02 ** 0x60;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (arg0 & temp1) * 0x02 ** 0x60;\n        memory[temp0 + 0x28:temp0 + 0x28 + 0x20] = arg1;\n        memory[temp0 + 0x48:temp0 + 0x48 + 0x20] = (arg2 & temp1) * 0x02 ** 0x60;\n        memory[temp0 + 0x5c:temp0 + 0x5c + 0x20] = arg3;\n        memory[temp0 + 0x7c:temp0 + 0x7c + 0x20] = arg4;\n        memory[temp0 + 0x9c:temp0 + 0x9c + 0x20] = arg5;\n        var temp2 = memory[0x40:0x60];\n        var var0 = 0x00;\n        var var1 = 0x02;\n        var var2 = temp0 + 0xbc;\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x20] = address(var1).call.gas(msg.gas - 0x646e).value(var0)(memory[temp2:temp2 + temp0 - temp2 + 0xbc]);\n    \n        if (!temp3) { assert(); }\n    \n        var temp4 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp4;\n        memory[0x20:0x40] = temp5;\n        var0 = temp4;\n        var1 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (var1) {\n        label_0B39:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp6 = 0x02 ** 0xa0 - 0x01;\n            var temp7 = temp6 & msg.sender;\n            memory[0x00:0x20] = temp7;\n            memory[0x20:0x40] = 0x08;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = temp8;\n            var temp9 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp9;\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = temp6 & arg0;\n            memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = temp9;\n            memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = arg2 & temp6;\n            memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = arg3;\n            memory[temp10 + 0x80:temp10 + 0x80 + 0x20] = arg4;\n            memory[temp10 + 0xa0:temp10 + 0xa0 + 0x20] = arg5;\n            memory[temp10 + 0xc0:temp10 + 0xc0 + 0x20] = temp7;\n            memory[temp10 + 0xe0:temp10 + 0xe0 + 0x20] = arg6 & 0xff;\n            memory[temp10 + 0x0100:temp10 + 0x0100 + 0x20] = arg7;\n            memory[temp10 + 0x0120:temp10 + 0x0120 + 0x20] = arg8;\n            var temp11 = memory[0x40:0x60];\n            log(memory[temp11:temp11 + temp10 - temp11 + 0x0140], [0x1e0b760c386003e9cb9bcf4fcf3997886042859d9b6ed6320e804597fcdb28b0]);\n            return;\n        } else {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n            memory[temp12 + 0x1c:temp12 + 0x1c + 0x20] = var0;\n            var temp13 = memory[0x40:0x60];\n            var temp14 = keccak256(memory[temp13:temp13 + temp12 - temp13 + 0x3c]);\n            memory[0x00:0x20] = temp13;\n            memory[0x40:0x60] = temp13 + 0x20;\n            memory[temp13 + 0x40:temp13 + 0x40 + 0x20] = 0x00;\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = temp14;\n            memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = arg6 & 0xff;\n            memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = arg7;\n            memory[temp15 + 0x60:temp15 + 0x60 + 0x20] = arg8;\n            var temp16 = memory[0x40:0x60];\n            var1 = msg.sender;\n            var2 = 0x01;\n            var var3 = temp15 + 0x80;\n            var temp17;\n            temp17, memory[temp16 + ~0x1f:temp16 + ~0x1f + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp16:temp16 + temp15 - temp16 + 0x80]);\n        \n            if (!temp17) { assert(); }\n        \n            var1 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var1;\n            goto label_0B39;\n        }\n    }\n    \n    function depositToken(var arg0, var arg1) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = arg1;\n        var var0 = arg0 & temp1;\n        var var4 = memory[0x40:0x60];\n        var var1 = 0x23b872dd;\n        var var2 = temp0 + 0x64;\n        var var3 = 0x20;\n        var var5 = temp0 - var4 + 0x64;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { assert(); }\n    \n        var temp2;\n        temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp2) { assert(); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp3;\n        memory[0x20:0x40] = 0x06;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp3 & msg.sender;\n        memory[0x20:0x40] = temp4;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x0df1;\n        var2 = arg1;\n        var0 = func_1682(var1, var2);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        var temp6 = temp5 & arg0;\n        memory[0x00:0x20] = temp6;\n        memory[0x20:0x40] = 0x06;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        var temp8 = temp5 & msg.sender;\n        memory[0x00:0x20] = temp8;\n        memory[0x20:0x40] = temp7;\n        var temp9 = var0;\n        storage[keccak256(memory[0x00:0x40])] = temp9;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = temp6;\n        memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = temp8;\n        memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = arg1;\n        memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = temp9;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + temp10 - temp11 + 0x80], [0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7]);\n    }\n    \n    function amountFilled(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x02;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = address(this) * 0x02 ** 0x60;\n        var temp1 = temp0 + 0x14;\n        memory[temp1:temp1 + 0x20] = (arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp2 = temp1 + 0x14;\n        memory[temp2:temp2 + 0x20] = arg1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = (arg2 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp4 = temp3 + 0x14;\n        memory[temp4:temp4 + 0x20] = arg3;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg5;\n        var var3 = temp6 + 0x20;\n        var temp7 = memory[0x40:0x60];\n        var temp8;\n        temp8, memory[temp7:temp7 + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp7:temp7 + var3 - temp7]);\n    \n        if (!temp8) { assert(); }\n    \n        var temp9 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp9;\n        memory[0x20:0x40] = temp10;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function tokens(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function changeFeeMake(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > storage[0x03]) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = arg0;\n    }\n    \n    function feeMake() returns (var r0) { return storage[0x03]; }\n    \n    function changeFeeRebate(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0 < storage[0x05];\n    \n        if (var0) {\n            if (var0) { revert(memory[0x00:0x00]); }\n        \n        label_0FE4:\n            storage[0x05] = arg0;\n            return;\n        } else if (arg0 <= storage[0x04]) { goto label_0FE4; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function feeAccount() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function testTrade(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10, var arg11) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg11 & temp0;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])] >= arg10;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] >= arg10) {\n        label_1045:\n        \n            if (var1) { return 0x01; }\n            else { return 0x00; }\n        } else {\n            var1 = arg10;\n            var var2 = 0x1042;\n            var var3 = arg0;\n            var var4 = arg1;\n            var var5 = arg2;\n            var var6 = arg3;\n            var var7 = arg4;\n            var var8 = arg5;\n            var var9 = arg6;\n            var var10 = arg7;\n            var var11 = arg8;\n            var var12 = arg9;\n            var2 = availableVolume(var3, var4, var5, var6, var7, var8, var9, var10, var11, var12);\n            var1 = var2 >= var1;\n            goto label_1045;\n        }\n    }\n    \n    function changeFeeAccount(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function feeRebate() returns (var r0) { return storage[0x05]; }\n    \n    function changeFeeTake(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0 > storage[0x04];\n    \n        if (var0) {\n            if (var0) { revert(memory[0x00:0x00]); }\n        \n        label_10ED:\n            storage[0x04] = arg0;\n            return;\n        } else if (arg0 >= storage[0x05]) { goto label_10ED; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function changeAdmin(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function withdrawToken(var arg0, var arg1) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp2;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp3;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x11ba;\n        var var2 = arg1;\n        var0 = withdraw(var1, var2);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = arg0 & temp4;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = 0x06;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        var temp7 = temp4 & msg.sender;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = temp6;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = temp7;\n        memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = arg1;\n        var0 = temp5;\n        var1 = 0xa9059cbb;\n        var2 = temp8 + 0x44;\n        var var4 = memory[0x40:0x60];\n        var var3 = 0x20;\n        var var5 = temp8 - var4 + 0x44;\n        var var7 = 0x00;\n        var var6 = var4;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { assert(); }\n    \n        var temp9;\n        temp9, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp9) { assert(); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp10 = 0x02 ** 0xa0 - 0x01;\n        var temp11 = arg0 & temp10;\n        memory[0x00:0x20] = temp11;\n        memory[0x20:0x40] = 0x06;\n        var temp12 = keccak256(memory[0x00:0x40]);\n        var temp13 = msg.sender & temp10;\n        memory[0x00:0x20] = temp13;\n        memory[0x20:0x40] = temp12;\n        var temp14 = storage[keccak256(memory[0x00:0x40])];\n        var temp15 = memory[0x40:0x60];\n        memory[temp15:temp15 + 0x20] = temp11;\n        memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = temp13;\n        memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = arg1;\n        memory[temp15 + 0x60:temp15 + 0x60 + 0x20] = temp14;\n        var temp16 = memory[0x40:0x60];\n        log(memory[temp16:temp16 + temp15 - temp16 + 0x80], [0xf341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567]);\n    }\n    \n    function orders(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function feeTake() returns (var r0) { return storage[0x04]; }\n    \n    function deposit() {\n        memory[0x00:0x20] = msg.sender;\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x19e1:0x1a01];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x1336;\n        var var2 = msg.value;\n        var0 = func_1682(var1, var2);\n        var temp2 = msg.sender;\n        memory[0x00:0x20] = temp2;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x19e1:0x1a01];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp4;\n        var temp5 = var0;\n        storage[keccak256(memory[0x00:0x40])] = temp5;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = 0x00;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = temp2;\n        memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = msg.value;\n        memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = temp5;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + temp6 - temp7 + 0x80], [0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7]);\n    }\n    \n    function changeAccountLevelsAddr(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function accountLevelsAddr() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function admin() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function availableVolume(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = 0x02;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = address(this) * 0x02 ** 0x60;\n        var temp1 = temp0 + 0x14;\n        memory[temp1:temp1 + 0x20] = (arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp2 = temp1 + 0x14;\n        memory[temp2:temp2 + 0x20] = arg1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = (arg2 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp4 = temp3 + 0x14;\n        memory[temp4:temp4 + 0x20] = arg3;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg5;\n        var var5 = temp6 + 0x20;\n        var temp7 = memory[0x40:0x60];\n        var temp8;\n        temp8, memory[temp7:temp7 + 0x20] = address(var4).call.gas(msg.gas - 0x646e)(memory[temp7:temp7 + var5 - temp7]);\n    \n        if (!temp8) { assert(); }\n    \n        var temp9 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp9;\n        memory[0x20:0x40] = temp10;\n        var1 = temp9;\n        var4 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (var4) {\n        label_15D2:\n        \n            if (!var4) {\n                if (var4) {\n                label_15ED:\n                    memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x08;\n                    var temp11 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = var1;\n                    memory[0x20:0x40] = temp11;\n                    var4 = 0x161c;\n                    var5 = arg1;\n                    var var6 = storage[keccak256(memory[0x00:0x40])];\n                    var4 = withdraw(var5, var6);\n                    var temp12 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = arg2 & temp12;\n                    memory[0x20:0x40] = 0x06;\n                    var temp13 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = arg6 & temp12;\n                    memory[0x20:0x40] = temp13;\n                    var2 = var4;\n                    var4 = arg3;\n                    var5 = 0x1651;\n                    var6 = storage[keccak256(memory[0x00:0x40])];\n                    var var7 = arg1;\n                    var5 = func_19A0(var6, var7);\n                \n                    if (!var4) { assert(); }\n                \n                    var3 = var5 / var4;\n                \n                    if (var2 >= var3) {\n                        var0 = var3;\n                    \n                    label_1671:\n                        return var0;\n                    } else {\n                        var0 = var2;\n                        goto label_1671;\n                    }\n                } else {\n                label_15E5:\n                    var0 = 0x00;\n                    goto label_1671;\n                }\n            } else if (block.number <= arg4) { goto label_15ED; }\n            else { goto label_15E5; }\n        } else {\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n            memory[temp14 + 0x1c:temp14 + 0x1c + 0x20] = var1;\n            var temp15 = memory[0x40:0x60];\n            var temp16 = keccak256(memory[temp15:temp15 + temp14 - temp15 + 0x3c]);\n            memory[0x00:0x20] = temp15;\n            memory[0x40:0x60] = temp15 + 0x20;\n            memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = 0x00;\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = temp16;\n            memory[temp17 + 0x20:temp17 + 0x20 + 0x20] = arg7 & 0xff;\n            memory[temp17 + 0x40:temp17 + 0x40 + 0x20] = arg8;\n            memory[temp17 + 0x60:temp17 + 0x60 + 0x20] = arg9;\n            var temp18 = memory[0x40:0x60];\n            var4 = arg6 & 0x02 ** 0xa0 - 0x01;\n            var5 = 0x01;\n            var6 = temp17 + 0x80;\n            var temp19;\n            temp19, memory[temp18 + ~0x1f:temp18 + ~0x1f + 0x20] = address(var5).call.gas(msg.gas - 0x646e)(memory[temp18:temp18 + temp17 - temp18 + 0x80]);\n        \n            if (!temp19) { assert(); }\n        \n            var4 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var4;\n            goto label_15D2;\n        }\n    }\n    \n    function func_1682(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n        var var2 = 0x169f;\n        var var3 = var1 >= temp0;\n    \n        if (var1 >= temp0) {\n            func_169A(var3);\n            return var1;\n        } else {\n            var3 = var1 >= arg1;\n            func_19CF(var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_169A(var arg0) {\n        func_19CF(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_16AA(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x16c7;\n        var var6 = arg5;\n        var var7 = storage[0x03];\n        var5 = func_19A0(var6, var7);\n    \n        if (!var4) { assert(); }\n    \n        var0 = var5 / var4;\n        var4 = 0x0de0b6b3a7640000;\n        var5 = 0x16e8;\n        var6 = arg5;\n        var7 = storage[0x04];\n        var5 = func_19A0(var6, var7);\n    \n        if (!var4) { assert(); }\n    \n        var1 = var5 / var4;\n        var2 = 0x00;\n    \n        if (!(storage[0x02] & 0x02 ** 0xa0 - 0x01)) {\n        label_17C8:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp0;\n            memory[0x20:0x40] = 0x06;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp0 & msg.sender;\n            memory[0x20:0x40] = temp1;\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x1803;\n            var6 = 0x17fe;\n            var7 = arg5;\n            var var8 = var1;\n            var6 = func_1682(var7, var8);\n            var4 = func_17FE(var5, var6);\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp2 & arg0;\n            memory[0x20:0x40] = 0x06;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp2 & msg.sender;\n            memory[0x20:0x40] = temp3;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            memory[0x00:0x20] = arg4 & temp2;\n            var4 = 0x1851;\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var6 = 0x184c;\n            var7 = 0x1846;\n            var8 = arg5;\n            var var9 = var2;\n            var7 = func_1682(var8, var9);\n            var6 = func_1846(var0, var7);\n            var4 = func_184C(var5, var6);\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp4 & arg0;\n            memory[0x20:0x40] = 0x06;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp4 & arg4;\n            memory[0x20:0x40] = temp5;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            memory[0x00:0x20] = temp4 & storage[0x01];\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x18a2;\n            var6 = 0x184c;\n            var7 = 0x1897;\n            var8 = var0;\n            var9 = var1;\n            var7 = func_1682(var8, var9);\n            var6 = func_1897(var2, var7);\n            var4 = func_184C(var5, var6);\n            var temp6 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp6;\n            memory[0x20:0x40] = 0x06;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp6 & storage[0x01];\n            memory[0x20:0x40] = temp7;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            memory[0x00:0x20] = temp6 & arg2;\n            memory[0x20:0x40] = 0x06;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg4 & temp6;\n            memory[0x20:0x40] = temp8;\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x1902;\n            var6 = arg1;\n            var7 = 0x18f3;\n            var8 = arg3;\n            var9 = arg5;\n            var7 = func_19A0(var8, var9);\n            var4 = func_18F3(var5, var6, var7);\n            var temp9 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp9 & arg2;\n            memory[0x20:0x40] = 0x06;\n            var temp10 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp9 & arg4;\n            memory[0x20:0x40] = temp10;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            memory[0x00:0x20] = temp9 & msg.sender;\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x1953;\n            var6 = arg1;\n            var7 = 0x1944;\n            var8 = arg3;\n            var9 = arg5;\n            var7 = func_19A0(var8, var9);\n            var4 = func_1944(var5, var6, var7);\n            var temp11 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg2 & temp11;\n            memory[0x20:0x40] = 0x06;\n            var temp12 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp11 & msg.sender;\n            memory[0x20:0x40] = temp12;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            return;\n        } else {\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x1cbd051900000000000000000000000000000000000000000000000000000000;\n            var temp14 = 0x02 ** 0xa0 - 0x01;\n            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = temp14 & arg4;\n            var4 = storage[0x02] & temp14;\n            var5 = 0x1cbd0519;\n            var6 = temp13 + 0x24;\n            var7 = 0x20;\n            var8 = memory[0x40:0x60];\n            var9 = temp13 - var8 + 0x24;\n            var var11 = 0x00;\n            var var10 = var8;\n            var var12 = var4;\n        \n            if (!address(var12).code.length) { assert(); }\n        \n            var temp15;\n            temp15, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n        \n            if (!temp15) { assert(); }\n        \n            var3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        \n            if (var3 != 0x01) {\n            label_17BB:\n            \n                if (var3 != 0x02) { goto label_17C8; }\n            \n                var2 = var1;\n                goto label_17C8;\n            } else {\n                var4 = 0x0de0b6b3a7640000;\n                var5 = 0x17ae;\n                var6 = arg5;\n                var7 = storage[0x05];\n                var5 = func_19A0(var6, var7);\n            \n                if (!var4) { assert(); }\n            \n                var2 = var5 / var4;\n                goto label_17BB;\n            }\n        }\n    }\n    \n    function func_17FE(var arg0, var arg1) returns (var r0) {\n        r0 = withdraw(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1846(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = withdraw(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_184C(var arg0, var arg1) returns (var r0) {\n        r0 = func_1682(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1897(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = withdraw(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_18F3(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        arg1 = arg2 / arg1;\n        r0 = withdraw(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1944(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        arg1 = arg2 / arg1;\n        r0 = func_1682(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function withdraw(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1995;\n        var var2 = arg1 <= arg0;\n        func_19CF(var2);\n        return arg0 - arg1;\n    }\n    \n    function func_19A0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = 0x169f;\n        var var3 = !temp0;\n    \n        if (var3) {\n            func_169A(var3);\n            return var1;\n        } else {\n            var3 = arg1;\n            var var4 = arg0;\n            var var5 = var1;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 == var3;\n            func_19CF(var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_19CF(var arg0) {\n        if (arg0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0151:\n        \n            if (msg.value) { assert(); }\n        \n            var var0 = 0x0165;\n            revert(memory[0x00:0x00]);\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x0a19b14a) {\n                // Dispatch table entry for trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x0165;\n                var temp0 = 0x02 ** 0xa0 - 0x01;\n                var var2 = temp0 & msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44];\n                var var4 = temp0 & msg.data[0x44:0x64];\n                var var5 = msg.data[0x64:0x84];\n                var var6 = msg.data[0x84:0xa4];\n                var var7 = msg.data[0xa4:0xc4];\n                var var8 = msg.data[0xc4:0xe4] & temp0;\n                var var9 = msg.data[0xe4:0x0104] & 0xff;\n                var var10 = msg.data[0x0104:0x0124];\n                var var11 = msg.data[0x0124:0x0144];\n                var var12 = msg.data[0x0144:0x0164];\n                trade(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12);\n                stop();\n            } else if (var0 == 0x0b927666) {\n                // Dispatch table entry for order(address,uint256,address,uint256,uint256,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var temp1 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp1 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp1;\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                order(var2, var3, var4, var5, var6, var7);\n                stop();\n            } else if (var0 == 0x19774d43) {\n                // Dispatch table entry for orderFills(address,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var2 = orderFills(var2, var3);\n            \n            label_0203:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x278b8c0e) {\n                // Dispatch table entry for cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var temp4 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp4 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp4;\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                var8 = msg.data[0xc4:0xe4] & 0xff;\n                var9 = msg.data[0xe4:0x0104];\n                var10 = msg.data[0x0104:0x0124];\n                cancelOrder(var2, var3, var4, var5, var6, var7, var8, var9, var10);\n                stop();\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24];\n                memory[0x00:0x20] = msg.sender;\n                var temp5 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x19e1:0x1a01];\n                var temp6 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp5;\n                memory[0x20:0x40] = temp6;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < var2) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = msg.sender;\n                var temp7 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x19e1:0x1a01];\n                var temp8 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp7;\n                memory[0x20:0x40] = temp8;\n                var4 = storage[keccak256(memory[0x00:0x40])];\n                var3 = 0x0c54;\n                var5 = var2;\n                var3 = withdraw(var4, var5);\n                var temp9 = msg.sender;\n                memory[0x00:0x20] = temp9;\n                var temp10 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x19e1:0x1a01];\n                var temp11 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp10;\n                memory[0x20:0x40] = temp11;\n                storage[keccak256(memory[0x00:0x40])] = var3;\n                var temp12 = memory[0x40:0x60];\n                var temp13;\n                temp13, memory[temp12:temp12 + 0x00] = address(temp9).call.gas(msg.gas - 0x8796).value(var2)(memory[temp12:temp12 + 0x00]);\n            \n                if (!temp13) { revert(memory[0x00:0x00]); }\n            \n                var temp14 = msg.sender;\n                memory[0x00:0x20] = temp14;\n                var temp15 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x19e1:0x1a01];\n                var temp16 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp15;\n                memory[0x20:0x40] = temp16;\n                var temp17 = storage[keccak256(memory[0x00:0x40])];\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = 0x00;\n                memory[temp18 + 0x20:temp18 + 0x20 + 0x20] = temp14;\n                memory[temp18 + 0x40:temp18 + 0x40 + 0x20] = var2;\n                memory[temp18 + 0x60:temp18 + 0x60 + 0x20] = temp17;\n                var temp19 = memory[0x40:0x60];\n                log(memory[temp19:temp19 + temp18 - temp19 + 0x80], [0xf341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567]);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x338b5dea) {\n                // Dispatch table entry for depositToken(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                depositToken(var2, var3);\n                stop();\n            } else if (var0 == 0x46be96c3) {\n                // Dispatch table entry for amountFilled(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var temp20 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp20 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = temp20 & msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                var8 = msg.data[0xc4:0xe4] & temp20;\n                var9 = msg.data[0xe4:0x0104] & 0xff;\n                var10 = msg.data[0x0104:0x0124];\n                var11 = msg.data[0x0124:0x0144];\n                var1 = amountFilled(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11);\n                goto label_0203;\n            } else if (var0 == 0x508493bc) {\n                // Dispatch table entry for tokens(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var temp21 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp21 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp21;\n                var2 = tokens(var2, var3);\n                goto label_0203;\n            } else if (var0 == 0x54d03b5c) {\n                // Dispatch table entry for changeFeeMake(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24];\n                changeFeeMake(var2);\n                stop();\n            } else if (var0 == 0x57786394) {\n                // Dispatch table entry for feeMake()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var2 = feeMake();\n                goto label_0203;\n            } else if (var0 == 0x5e1d7ae4) {\n                // Dispatch table entry for changeFeeRebate(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24];\n                changeFeeRebate(var2);\n                stop();\n            } else if (var0 == 0x65e17c9d) {\n                // Dispatch table entry for feeAccount()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0371;\n                var2 = feeAccount();\n            \n            label_0371:\n                var temp22 = memory[0x40:0x60];\n                memory[temp22:temp22 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + temp22 - temp23 + 0x20];\n            } else if (var0 == 0x6c86888b) {\n                // Dispatch table entry for testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03e2;\n                var temp24 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp24 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = temp24 & msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                var8 = temp24 & msg.data[0xc4:0xe4];\n                var9 = msg.data[0xe4:0x0104] & 0xff;\n                var10 = msg.data[0x0104:0x0124];\n                var11 = msg.data[0x0124:0x0144];\n                var12 = msg.data[0x0144:0x0164];\n                var var13 = msg.data[0x0164:0x0184] & temp24;\n                var1 = testTrade(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13);\n            \n            label_03E2:\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = !!var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + temp25 - temp26 + 0x20];\n            } else if (var0 == 0x71ffcb16) {\n                // Dispatch table entry for changeFeeAccount(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                changeFeeAccount(var2);\n                stop();\n            } else if (var0 == 0x731c2f81) {\n                // Dispatch table entry for feeRebate()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var2 = feeRebate();\n                goto label_0203;\n            } else if (var0 == 0x8823a9c0) {\n                // Dispatch table entry for changeFeeTake(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24];\n                changeFeeTake(var2);\n                stop();\n            } else if (var0 == 0x8f283970) {\n                // Dispatch table entry for changeAdmin(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                changeAdmin(var2);\n                stop();\n            } else if (var0 == 0x9e281a98) {\n                // Dispatch table entry for withdrawToken(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                withdrawToken(var2, var3);\n                stop();\n            } else if (var0 == 0xbb5f4629) {\n                // Dispatch table entry for orders(address,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03e2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var2 = orders(var2, var3);\n                goto label_03E2;\n            } else if (var0 == 0xc281309e) {\n                // Dispatch table entry for feeTake()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var2 = feeTake();\n                goto label_0203;\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x0165;\n                deposit();\n                stop();\n            } else if (var0 == 0xe8f6bc2e) {\n                // Dispatch table entry for changeAccountLevelsAddr(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                changeAccountLevelsAddr(var2);\n                stop();\n            } else if (var0 == 0xf3412942) {\n                // Dispatch table entry for accountLevelsAddr()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0371;\n                var2 = accountLevelsAddr();\n                goto label_0371;\n            } else if (var0 == 0xf7888aec) {\n                // Dispatch table entry for balanceOf(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var temp27 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp27 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp27;\n                var1 = balanceOf(var2, var3);\n                goto label_0203;\n            } else if (var0 == 0xf851a440) {\n                // Dispatch table entry for admin()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0371;\n                var2 = admin();\n                goto label_0371;\n            } else if (var0 == 0xfb6e155f) {\n                // Dispatch table entry for availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var temp28 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp28 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = temp28 & msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                var8 = msg.data[0xc4:0xe4] & temp28;\n                var9 = msg.data[0xe4:0x0104] & 0xff;\n                var10 = msg.data[0x0104:0x0124];\n                var11 = msg.data[0x0124:0x0144];\n                var1 = availableVolume(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11);\n                goto label_0203;\n            } else { goto label_0151; }\n        }\n    }\n    \n    function trade(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10) {\n        var var0 = 0x00;\n        var var1 = 0x02;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = address(this) * 0x02 ** 0x60;\n        var temp1 = temp0 + 0x14;\n        memory[temp1:temp1 + 0x20] = (arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp2 = temp1 + 0x14;\n        memory[temp2:temp2 + 0x20] = arg1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = (arg2 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp4 = temp3 + 0x14;\n        memory[temp4:temp4 + 0x20] = arg3;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg5;\n        var var2 = temp6 + 0x20;\n        var temp7 = memory[0x40:0x60];\n        var temp8;\n        temp8, memory[temp7:temp7 + 0x20] = address(var1).call.gas(msg.gas - 0x646e)(memory[temp7:temp7 + var2 - temp7]);\n    \n        if (!temp8) { assert(); }\n    \n        var temp9 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp9;\n        memory[0x20:0x40] = temp10;\n        var0 = temp9;\n        var1 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (var1) {\n        label_077C:\n        \n            if (var1) {\n                var1 = block.number <= arg4;\n            \n                if (!var1) { goto label_07C2; }\n                else { goto label_078F; }\n            } else if (!var1) {\n            label_07C2:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07dc;\n                var2 = arg0;\n                var var3 = arg1;\n                var var4 = arg2;\n                var var5 = arg3;\n                var var6 = arg6;\n                var var7 = arg10;\n                func_16AA(var2, var3, var4, var5, var6, var7);\n                memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x08;\n                var temp11 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var0;\n                memory[0x20:0x40] = temp11;\n                var1 = 0x080a;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var3 = arg10;\n                var1 = func_1682(var2, var3);\n                memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x08;\n                var temp12 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var0;\n                memory[0x20:0x40] = temp12;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                var1 = 0x6effdda786735d5033bfad5f53e5131abcced9e52be6c507b62d639685fbed6d;\n                var2 = arg0;\n                var3 = arg10;\n                var4 = arg2;\n                var5 = arg1;\n                var6 = var3 * arg3;\n            \n                if (!var5) { assert(); }\n            \n                var temp13 = memory[0x40:0x60];\n                var temp14 = 0x02 ** 0xa0 - 0x01;\n                memory[temp13:temp13 + 0x20] = temp14 & var2;\n                memory[temp13 + 0x20:temp13 + 0x20 + 0x20] = var3;\n                memory[temp13 + 0x40:temp13 + 0x40 + 0x20] = temp14 & var4;\n                memory[temp13 + 0x60:temp13 + 0x60 + 0x20] = var6 / var5;\n                memory[temp13 + 0x80:temp13 + 0x80 + 0x20] = arg6 & temp14;\n                memory[temp13 + 0xa0:temp13 + 0xa0 + 0x20] = msg.sender & temp14;\n                var temp15 = memory[0x40:0x60];\n                log(memory[temp15:temp15 + temp13 - temp15 + 0xc0], [stack[-6]]);\n                return;\n            } else {\n            label_078F:\n                memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x08;\n                var temp16 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var0;\n                memory[0x20:0x40] = temp16;\n                var1 = arg1;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var2 = 0x07bf;\n                var4 = arg10;\n                var2 = func_1682(var3, var4);\n                var1 = var2 <= var1;\n                goto label_07C2;\n            }\n        } else {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n            memory[temp17 + 0x1c:temp17 + 0x1c + 0x20] = var0;\n            var temp18 = memory[0x40:0x60];\n            var temp19 = keccak256(memory[temp18:temp18 + temp17 - temp18 + 0x3c]);\n            memory[0x00:0x20] = temp18;\n            memory[0x40:0x60] = temp18 + 0x20;\n            memory[temp18 + 0x40:temp18 + 0x40 + 0x20] = 0x00;\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = temp19;\n            memory[temp20 + 0x20:temp20 + 0x20 + 0x20] = arg7 & 0xff;\n            memory[temp20 + 0x40:temp20 + 0x40 + 0x20] = arg8;\n            memory[temp20 + 0x60:temp20 + 0x60 + 0x20] = arg9;\n            var temp21 = memory[0x40:0x60];\n            var1 = arg6 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0x01;\n            var3 = temp20 + 0x80;\n            var temp22;\n            temp22, memory[temp21 + ~0x1f:temp21 + ~0x1f + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp21:temp21 + temp20 - temp21 + 0x80]);\n        \n            if (!temp22) { assert(); }\n        \n            var1 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var1;\n            goto label_077C;\n        }\n    }\n    \n    function order(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & address(this)) * 0x02 ** 0x60;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (arg0 & temp1) * 0x02 ** 0x60;\n        memory[temp0 + 0x28:temp0 + 0x28 + 0x20] = arg1;\n        memory[temp0 + 0x48:temp0 + 0x48 + 0x20] = (arg2 & temp1) * 0x02 ** 0x60;\n        memory[temp0 + 0x5c:temp0 + 0x5c + 0x20] = arg3;\n        memory[temp0 + 0x7c:temp0 + 0x7c + 0x20] = arg4;\n        memory[temp0 + 0x9c:temp0 + 0x9c + 0x20] = arg5;\n        var temp2 = memory[0x40:0x60];\n        var var0 = 0x00;\n        var var1 = 0x02;\n        var var2 = temp0 + 0xbc;\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x20] = address(var1).call.gas(msg.gas - 0x646e).value(var0)(memory[temp2:temp2 + temp0 - temp2 + 0xbc]);\n    \n        if (!temp3) { assert(); }\n    \n        var temp4 = memory[0x40:0x60];\n        var temp5 = memory[temp4:temp4 + 0x20];\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var temp7 = temp6 & msg.sender;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x07;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp8;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        storage[temp9] = (storage[temp9] & ~0xff) | 0x01;\n        memory[temp4:temp4 + 0x20] = temp6 & arg0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = arg1;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = arg2 & temp6;\n        memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = arg3;\n        memory[temp4 + 0x80:temp4 + 0x80 + 0x20] = arg4;\n        memory[temp4 + 0xa0:temp4 + 0xa0 + 0x20] = arg5;\n        memory[temp4 + 0xc0:temp4 + 0xc0 + 0x20] = temp7;\n        var temp10 = memory[0x40:0x60];\n        log(memory[temp10:temp10 + temp4 - temp10 + 0xe0], [0x3f7f2eda73683c21a15f9435af1028c93185b5f1fa38270762dc32be606b3e85]);\n    }\n    \n    function orderFills(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function cancelOrder(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & address(this)) * 0x02 ** 0x60;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (arg0 & temp1) * 0x02 ** 0x60;\n        memory[temp0 + 0x28:temp0 + 0x28 + 0x20] = arg1;\n        memory[temp0 + 0x48:temp0 + 0x48 + 0x20] = (arg2 & temp1) * 0x02 ** 0x60;\n        memory[temp0 + 0x5c:temp0 + 0x5c + 0x20] = arg3;\n        memory[temp0 + 0x7c:temp0 + 0x7c + 0x20] = arg4;\n        memory[temp0 + 0x9c:temp0 + 0x9c + 0x20] = arg5;\n        var temp2 = memory[0x40:0x60];\n        var var0 = 0x00;\n        var var1 = 0x02;\n        var var2 = temp0 + 0xbc;\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x20] = address(var1).call.gas(msg.gas - 0x646e).value(var0)(memory[temp2:temp2 + temp0 - temp2 + 0xbc]);\n    \n        if (!temp3) { assert(); }\n    \n        var temp4 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp4;\n        memory[0x20:0x40] = temp5;\n        var0 = temp4;\n        var1 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (var1) {\n        label_0B39:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp6 = 0x02 ** 0xa0 - 0x01;\n            var temp7 = temp6 & msg.sender;\n            memory[0x00:0x20] = temp7;\n            memory[0x20:0x40] = 0x08;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = temp8;\n            var temp9 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp9;\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = temp6 & arg0;\n            memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = temp9;\n            memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = arg2 & temp6;\n            memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = arg3;\n            memory[temp10 + 0x80:temp10 + 0x80 + 0x20] = arg4;\n            memory[temp10 + 0xa0:temp10 + 0xa0 + 0x20] = arg5;\n            memory[temp10 + 0xc0:temp10 + 0xc0 + 0x20] = temp7;\n            memory[temp10 + 0xe0:temp10 + 0xe0 + 0x20] = arg6 & 0xff;\n            memory[temp10 + 0x0100:temp10 + 0x0100 + 0x20] = arg7;\n            memory[temp10 + 0x0120:temp10 + 0x0120 + 0x20] = arg8;\n            var temp11 = memory[0x40:0x60];\n            log(memory[temp11:temp11 + temp10 - temp11 + 0x0140], [0x1e0b760c386003e9cb9bcf4fcf3997886042859d9b6ed6320e804597fcdb28b0]);\n            return;\n        } else {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n            memory[temp12 + 0x1c:temp12 + 0x1c + 0x20] = var0;\n            var temp13 = memory[0x40:0x60];\n            var temp14 = keccak256(memory[temp13:temp13 + temp12 - temp13 + 0x3c]);\n            memory[0x00:0x20] = temp13;\n            memory[0x40:0x60] = temp13 + 0x20;\n            memory[temp13 + 0x40:temp13 + 0x40 + 0x20] = 0x00;\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = temp14;\n            memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = arg6 & 0xff;\n            memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = arg7;\n            memory[temp15 + 0x60:temp15 + 0x60 + 0x20] = arg8;\n            var temp16 = memory[0x40:0x60];\n            var1 = msg.sender;\n            var2 = 0x01;\n            var var3 = temp15 + 0x80;\n            var temp17;\n            temp17, memory[temp16 + ~0x1f:temp16 + ~0x1f + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp16:temp16 + temp15 - temp16 + 0x80]);\n        \n            if (!temp17) { assert(); }\n        \n            var1 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var1;\n            goto label_0B39;\n        }\n    }\n    \n    function depositToken(var arg0, var arg1) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = arg1;\n        var var0 = arg0 & temp1;\n        var var4 = memory[0x40:0x60];\n        var var1 = 0x23b872dd;\n        var var2 = temp0 + 0x64;\n        var var3 = 0x20;\n        var var5 = temp0 - var4 + 0x64;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { assert(); }\n    \n        var temp2;\n        temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp2) { assert(); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp3;\n        memory[0x20:0x40] = 0x06;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp3 & msg.sender;\n        memory[0x20:0x40] = temp4;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x0df1;\n        var2 = arg1;\n        var0 = func_1682(var1, var2);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        var temp6 = temp5 & arg0;\n        memory[0x00:0x20] = temp6;\n        memory[0x20:0x40] = 0x06;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        var temp8 = temp5 & msg.sender;\n        memory[0x00:0x20] = temp8;\n        memory[0x20:0x40] = temp7;\n        var temp9 = var0;\n        storage[keccak256(memory[0x00:0x40])] = temp9;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = temp6;\n        memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = temp8;\n        memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = arg1;\n        memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = temp9;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + temp10 - temp11 + 0x80], [0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7]);\n    }\n    \n    function amountFilled(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x02;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = address(this) * 0x02 ** 0x60;\n        var temp1 = temp0 + 0x14;\n        memory[temp1:temp1 + 0x20] = (arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp2 = temp1 + 0x14;\n        memory[temp2:temp2 + 0x20] = arg1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = (arg2 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp4 = temp3 + 0x14;\n        memory[temp4:temp4 + 0x20] = arg3;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg5;\n        var var3 = temp6 + 0x20;\n        var temp7 = memory[0x40:0x60];\n        var temp8;\n        temp8, memory[temp7:temp7 + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp7:temp7 + var3 - temp7]);\n    \n        if (!temp8) { assert(); }\n    \n        var temp9 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp9;\n        memory[0x20:0x40] = temp10;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function tokens(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function changeFeeMake(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > storage[0x03]) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = arg0;\n    }\n    \n    function feeMake() returns (var r0) { return storage[0x03]; }\n    \n    function changeFeeRebate(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0 < storage[0x05];\n    \n        if (var0) {\n            if (var0) { revert(memory[0x00:0x00]); }\n        \n        label_0FE4:\n            storage[0x05] = arg0;\n            return;\n        } else if (arg0 <= storage[0x04]) { goto label_0FE4; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function feeAccount() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function testTrade(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10, var arg11) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg11 & temp0;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])] >= arg10;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] >= arg10) {\n        label_1045:\n        \n            if (var1) { return 0x01; }\n            else { return 0x00; }\n        } else {\n            var1 = arg10;\n            var var2 = 0x1042;\n            var var3 = arg0;\n            var var4 = arg1;\n            var var5 = arg2;\n            var var6 = arg3;\n            var var7 = arg4;\n            var var8 = arg5;\n            var var9 = arg6;\n            var var10 = arg7;\n            var var11 = arg8;\n            var var12 = arg9;\n            var2 = availableVolume(var3, var4, var5, var6, var7, var8, var9, var10, var11, var12);\n            var1 = var2 >= var1;\n            goto label_1045;\n        }\n    }\n    \n    function changeFeeAccount(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function feeRebate() returns (var r0) { return storage[0x05]; }\n    \n    function changeFeeTake(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0 > storage[0x04];\n    \n        if (var0) {\n            if (var0) { revert(memory[0x00:0x00]); }\n        \n        label_10ED:\n            storage[0x04] = arg0;\n            return;\n        } else if (arg0 >= storage[0x05]) { goto label_10ED; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function changeAdmin(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function withdrawToken(var arg0, var arg1) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp2;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp3;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x11ba;\n        var var2 = arg1;\n        var0 = withdraw(var1, var2);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = arg0 & temp4;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = 0x06;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        var temp7 = temp4 & msg.sender;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = temp6;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = temp7;\n        memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = arg1;\n        var0 = temp5;\n        var1 = 0xa9059cbb;\n        var2 = temp8 + 0x44;\n        var var4 = memory[0x40:0x60];\n        var var3 = 0x20;\n        var var5 = temp8 - var4 + 0x44;\n        var var7 = 0x00;\n        var var6 = var4;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { assert(); }\n    \n        var temp9;\n        temp9, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp9) { assert(); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp10 = 0x02 ** 0xa0 - 0x01;\n        var temp11 = arg0 & temp10;\n        memory[0x00:0x20] = temp11;\n        memory[0x20:0x40] = 0x06;\n        var temp12 = keccak256(memory[0x00:0x40]);\n        var temp13 = msg.sender & temp10;\n        memory[0x00:0x20] = temp13;\n        memory[0x20:0x40] = temp12;\n        var temp14 = storage[keccak256(memory[0x00:0x40])];\n        var temp15 = memory[0x40:0x60];\n        memory[temp15:temp15 + 0x20] = temp11;\n        memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = temp13;\n        memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = arg1;\n        memory[temp15 + 0x60:temp15 + 0x60 + 0x20] = temp14;\n        var temp16 = memory[0x40:0x60];\n        log(memory[temp16:temp16 + temp15 - temp16 + 0x80], [0xf341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567]);\n    }\n    \n    function orders(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function feeTake() returns (var r0) { return storage[0x04]; }\n    \n    function deposit() {\n        memory[0x00:0x20] = msg.sender;\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x19e1:0x1a01];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x1336;\n        var var2 = msg.value;\n        var0 = func_1682(var1, var2);\n        var temp2 = msg.sender;\n        memory[0x00:0x20] = temp2;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x19e1:0x1a01];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp4;\n        var temp5 = var0;\n        storage[keccak256(memory[0x00:0x40])] = temp5;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = 0x00;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = temp2;\n        memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = msg.value;\n        memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = temp5;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + temp6 - temp7 + 0x80], [0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7]);\n    }\n    \n    function changeAccountLevelsAddr(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function accountLevelsAddr() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function admin() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function availableVolume(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = 0x02;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = address(this) * 0x02 ** 0x60;\n        var temp1 = temp0 + 0x14;\n        memory[temp1:temp1 + 0x20] = (arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp2 = temp1 + 0x14;\n        memory[temp2:temp2 + 0x20] = arg1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = (arg2 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp4 = temp3 + 0x14;\n        memory[temp4:temp4 + 0x20] = arg3;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg5;\n        var var5 = temp6 + 0x20;\n        var temp7 = memory[0x40:0x60];\n        var temp8;\n        temp8, memory[temp7:temp7 + 0x20] = address(var4).call.gas(msg.gas - 0x646e)(memory[temp7:temp7 + var5 - temp7]);\n    \n        if (!temp8) { assert(); }\n    \n        var temp9 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp9;\n        memory[0x20:0x40] = temp10;\n        var1 = temp9;\n        var4 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (var4) {\n        label_15D2:\n        \n            if (!var4) {\n                if (var4) {\n                label_15ED:\n                    memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x08;\n                    var temp11 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = var1;\n                    memory[0x20:0x40] = temp11;\n                    var4 = 0x161c;\n                    var5 = arg1;\n                    var var6 = storage[keccak256(memory[0x00:0x40])];\n                    var4 = withdraw(var5, var6);\n                    var temp12 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = arg2 & temp12;\n                    memory[0x20:0x40] = 0x06;\n                    var temp13 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = arg6 & temp12;\n                    memory[0x20:0x40] = temp13;\n                    var2 = var4;\n                    var4 = arg3;\n                    var5 = 0x1651;\n                    var6 = storage[keccak256(memory[0x00:0x40])];\n                    var var7 = arg1;\n                    var5 = func_19A0(var6, var7);\n                \n                    if (!var4) { assert(); }\n                \n                    var3 = var5 / var4;\n                \n                    if (var2 >= var3) {\n                        var0 = var3;\n                    \n                    label_1671:\n                        return var0;\n                    } else {\n                        var0 = var2;\n                        goto label_1671;\n                    }\n                } else {\n                label_15E5:\n                    var0 = 0x00;\n                    goto label_1671;\n                }\n            } else if (block.number <= arg4) { goto label_15ED; }\n            else { goto label_15E5; }\n        } else {\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n            memory[temp14 + 0x1c:temp14 + 0x1c + 0x20] = var1;\n            var temp15 = memory[0x40:0x60];\n            var temp16 = keccak256(memory[temp15:temp15 + temp14 - temp15 + 0x3c]);\n            memory[0x00:0x20] = temp15;\n            memory[0x40:0x60] = temp15 + 0x20;\n            memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = 0x00;\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = temp16;\n            memory[temp17 + 0x20:temp17 + 0x20 + 0x20] = arg7 & 0xff;\n            memory[temp17 + 0x40:temp17 + 0x40 + 0x20] = arg8;\n            memory[temp17 + 0x60:temp17 + 0x60 + 0x20] = arg9;\n            var temp18 = memory[0x40:0x60];\n            var4 = arg6 & 0x02 ** 0xa0 - 0x01;\n            var5 = 0x01;\n            var6 = temp17 + 0x80;\n            var temp19;\n            temp19, memory[temp18 + ~0x1f:temp18 + ~0x1f + 0x20] = address(var5).call.gas(msg.gas - 0x646e)(memory[temp18:temp18 + temp17 - temp18 + 0x80]);\n        \n            if (!temp19) { assert(); }\n        \n            var4 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var4;\n            goto label_15D2;\n        }\n    }\n    \n    function func_1682(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n        var var2 = 0x169f;\n        var var3 = var1 >= temp0;\n    \n        if (var1 >= temp0) {\n            func_169A(var3);\n            return var1;\n        } else {\n            var3 = var1 >= arg1;\n            func_19CF(var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_169A(var arg0) {\n        func_19CF(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_16AA(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x16c7;\n        var var6 = arg5;\n        var var7 = storage[0x03];\n        var5 = func_19A0(var6, var7);\n    \n        if (!var4) { assert(); }\n    \n        var0 = var5 / var4;\n        var4 = 0x0de0b6b3a7640000;\n        var5 = 0x16e8;\n        var6 = arg5;\n        var7 = storage[0x04];\n        var5 = func_19A0(var6, var7);\n    \n        if (!var4) { assert(); }\n    \n        var1 = var5 / var4;\n        var2 = 0x00;\n    \n        if (!(storage[0x02] & 0x02 ** 0xa0 - 0x01)) {\n        label_17C8:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp0;\n            memory[0x20:0x40] = 0x06;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp0 & msg.sender;\n            memory[0x20:0x40] = temp1;\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x1803;\n            var6 = 0x17fe;\n            var7 = arg5;\n            var var8 = var1;\n            var6 = func_1682(var7, var8);\n            var4 = func_17FE(var5, var6);\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp2 & arg0;\n            memory[0x20:0x40] = 0x06;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp2 & msg.sender;\n            memory[0x20:0x40] = temp3;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            memory[0x00:0x20] = arg4 & temp2;\n            var4 = 0x1851;\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var6 = 0x184c;\n            var7 = 0x1846;\n            var8 = arg5;\n            var var9 = var2;\n            var7 = func_1682(var8, var9);\n            var6 = func_1846(var0, var7);\n            var4 = func_184C(var5, var6);\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp4 & arg0;\n            memory[0x20:0x40] = 0x06;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp4 & arg4;\n            memory[0x20:0x40] = temp5;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            memory[0x00:0x20] = temp4 & storage[0x01];\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x18a2;\n            var6 = 0x184c;\n            var7 = 0x1897;\n            var8 = var0;\n            var9 = var1;\n            var7 = func_1682(var8, var9);\n            var6 = func_1897(var2, var7);\n            var4 = func_184C(var5, var6);\n            var temp6 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp6;\n            memory[0x20:0x40] = 0x06;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp6 & storage[0x01];\n            memory[0x20:0x40] = temp7;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            memory[0x00:0x20] = temp6 & arg2;\n            memory[0x20:0x40] = 0x06;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg4 & temp6;\n            memory[0x20:0x40] = temp8;\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x1902;\n            var6 = arg1;\n            var7 = 0x18f3;\n            var8 = arg3;\n            var9 = arg5;\n            var7 = func_19A0(var8, var9);\n            var4 = func_18F3(var5, var6, var7);\n            var temp9 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp9 & arg2;\n            memory[0x20:0x40] = 0x06;\n            var temp10 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp9 & arg4;\n            memory[0x20:0x40] = temp10;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            memory[0x00:0x20] = temp9 & msg.sender;\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x1953;\n            var6 = arg1;\n            var7 = 0x1944;\n            var8 = arg3;\n            var9 = arg5;\n            var7 = func_19A0(var8, var9);\n            var4 = func_1944(var5, var6, var7);\n            var temp11 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg2 & temp11;\n            memory[0x20:0x40] = 0x06;\n            var temp12 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp11 & msg.sender;\n            memory[0x20:0x40] = temp12;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            return;\n        } else {\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x1cbd051900000000000000000000000000000000000000000000000000000000;\n            var temp14 = 0x02 ** 0xa0 - 0x01;\n            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = temp14 & arg4;\n            var4 = storage[0x02] & temp14;\n            var5 = 0x1cbd0519;\n            var6 = temp13 + 0x24;\n            var7 = 0x20;\n            var8 = memory[0x40:0x60];\n            var9 = temp13 - var8 + 0x24;\n            var var11 = 0x00;\n            var var10 = var8;\n            var var12 = var4;\n        \n            if (!address(var12).code.length) { assert(); }\n        \n            var temp15;\n            temp15, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n        \n            if (!temp15) { assert(); }\n        \n            var3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        \n            if (var3 != 0x01) {\n            label_17BB:\n            \n                if (var3 != 0x02) { goto label_17C8; }\n            \n                var2 = var1;\n                goto label_17C8;\n            } else {\n                var4 = 0x0de0b6b3a7640000;\n                var5 = 0x17ae;\n                var6 = arg5;\n                var7 = storage[0x05];\n                var5 = func_19A0(var6, var7);\n            \n                if (!var4) { assert(); }\n            \n                var2 = var5 / var4;\n                goto label_17BB;\n            }\n        }\n    }\n    \n    function func_17FE(var arg0, var arg1) returns (var r0) {\n        r0 = withdraw(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1846(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = withdraw(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_184C(var arg0, var arg1) returns (var r0) {\n        r0 = func_1682(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1897(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = withdraw(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_18F3(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        arg1 = arg2 / arg1;\n        r0 = withdraw(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1944(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        arg1 = arg2 / arg1;\n        r0 = func_1682(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function withdraw(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1995;\n        var var2 = arg1 <= arg0;\n        func_19CF(var2);\n        return arg0 - arg1;\n    }\n    \n    function func_19A0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = 0x169f;\n        var var3 = !temp0;\n    \n        if (var3) {\n            func_169A(var3);\n            return var1;\n        } else {\n            var3 = arg1;\n            var var4 = arg0;\n            var var5 = var1;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 == var3;\n            func_19CF(var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_19CF(var arg0) {\n        if (arg0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (!msg.data.length) {\n        label_0151:\n        \n            if (msg.value) { assert(); }\n        \n            var var0 = 0x0165;\n            revert(memory[0x00:0x00]);\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x0a19b14a) {\n                // Dispatch table entry for trade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256)\n                if (msg.value) { assert(); }\n            \n                var var1 = 0x0165;\n                var temp0 = 0x02 ** 0xa0 - 0x01;\n                var var2 = temp0 & msg.data[0x04:0x24];\n                var var3 = msg.data[0x24:0x44];\n                var var4 = temp0 & msg.data[0x44:0x64];\n                var var5 = msg.data[0x64:0x84];\n                var var6 = msg.data[0x84:0xa4];\n                var var7 = msg.data[0xa4:0xc4];\n                var var8 = msg.data[0xc4:0xe4] & temp0;\n                var var9 = msg.data[0xe4:0x0104] & 0xff;\n                var var10 = msg.data[0x0104:0x0124];\n                var var11 = msg.data[0x0124:0x0144];\n                var var12 = msg.data[0x0144:0x0164];\n                trade(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12);\n                stop();\n            } else if (var0 == 0x0b927666) {\n                // Dispatch table entry for order(address,uint256,address,uint256,uint256,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var temp1 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp1 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp1;\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                order(var2, var3, var4, var5, var6, var7);\n                stop();\n            } else if (var0 == 0x19774d43) {\n                // Dispatch table entry for orderFills(address,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var2 = orderFills(var2, var3);\n            \n            label_0203:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x278b8c0e) {\n                // Dispatch table entry for cancelOrder(address,uint256,address,uint256,uint256,uint256,uint8,bytes32,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var temp4 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp4 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = msg.data[0x44:0x64] & temp4;\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                var8 = msg.data[0xc4:0xe4] & 0xff;\n                var9 = msg.data[0xe4:0x0104];\n                var10 = msg.data[0x0104:0x0124];\n                cancelOrder(var2, var3, var4, var5, var6, var7, var8, var9, var10);\n                stop();\n            } else if (var0 == 0x2e1a7d4d) {\n                // Dispatch table entry for withdraw(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24];\n                memory[0x00:0x20] = msg.sender;\n                var temp5 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x19e1:0x1a01];\n                var temp6 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp5;\n                memory[0x20:0x40] = temp6;\n            \n                if (storage[keccak256(memory[0x00:0x40])] < var2) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = msg.sender;\n                var temp7 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x19e1:0x1a01];\n                var temp8 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp7;\n                memory[0x20:0x40] = temp8;\n                var4 = storage[keccak256(memory[0x00:0x40])];\n                var3 = 0x0c54;\n                var5 = var2;\n                var3 = withdraw(var4, var5);\n                var temp9 = msg.sender;\n                memory[0x00:0x20] = temp9;\n                var temp10 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x19e1:0x1a01];\n                var temp11 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp10;\n                memory[0x20:0x40] = temp11;\n                storage[keccak256(memory[0x00:0x40])] = var3;\n                var temp12 = memory[0x40:0x60];\n                var temp13;\n                temp13, memory[temp12:temp12 + 0x00] = address(temp9).call.gas(msg.gas - 0x8796).value(var2)(memory[temp12:temp12 + 0x00]);\n            \n                if (!temp13) { revert(memory[0x00:0x00]); }\n            \n                var temp14 = msg.sender;\n                memory[0x00:0x20] = temp14;\n                var temp15 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x19e1:0x1a01];\n                var temp16 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp15;\n                memory[0x20:0x40] = temp16;\n                var temp17 = storage[keccak256(memory[0x00:0x40])];\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = 0x00;\n                memory[temp18 + 0x20:temp18 + 0x20 + 0x20] = temp14;\n                memory[temp18 + 0x40:temp18 + 0x40 + 0x20] = var2;\n                memory[temp18 + 0x60:temp18 + 0x60 + 0x20] = temp17;\n                var temp19 = memory[0x40:0x60];\n                log(memory[temp19:temp19 + temp18 - temp19 + 0x80], [0xf341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567]);\n                // Error: Could not resolve jump destination!\n            } else if (var0 == 0x338b5dea) {\n                // Dispatch table entry for depositToken(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                depositToken(var2, var3);\n                stop();\n            } else if (var0 == 0x46be96c3) {\n                // Dispatch table entry for amountFilled(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var temp20 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp20 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = temp20 & msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                var8 = msg.data[0xc4:0xe4] & temp20;\n                var9 = msg.data[0xe4:0x0104] & 0xff;\n                var10 = msg.data[0x0104:0x0124];\n                var11 = msg.data[0x0124:0x0144];\n                var1 = amountFilled(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11);\n                goto label_0203;\n            } else if (var0 == 0x508493bc) {\n                // Dispatch table entry for tokens(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var temp21 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp21 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp21;\n                var2 = tokens(var2, var3);\n                goto label_0203;\n            } else if (var0 == 0x54d03b5c) {\n                // Dispatch table entry for changeFeeMake(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24];\n                changeFeeMake(var2);\n                stop();\n            } else if (var0 == 0x57786394) {\n                // Dispatch table entry for feeMake()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var2 = feeMake();\n                goto label_0203;\n            } else if (var0 == 0x5e1d7ae4) {\n                // Dispatch table entry for changeFeeRebate(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24];\n                changeFeeRebate(var2);\n                stop();\n            } else if (var0 == 0x65e17c9d) {\n                // Dispatch table entry for feeAccount()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0371;\n                var2 = feeAccount();\n            \n            label_0371:\n                var temp22 = memory[0x40:0x60];\n                memory[temp22:temp22 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + temp22 - temp23 + 0x20];\n            } else if (var0 == 0x6c86888b) {\n                // Dispatch table entry for testTrade(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32,uint256,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03e2;\n                var temp24 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp24 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = temp24 & msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                var8 = temp24 & msg.data[0xc4:0xe4];\n                var9 = msg.data[0xe4:0x0104] & 0xff;\n                var10 = msg.data[0x0104:0x0124];\n                var11 = msg.data[0x0124:0x0144];\n                var12 = msg.data[0x0144:0x0164];\n                var var13 = msg.data[0x0164:0x0184] & temp24;\n                var1 = testTrade(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11, var12, var13);\n            \n            label_03E2:\n                var temp25 = memory[0x40:0x60];\n                memory[temp25:temp25 + 0x20] = !!var1;\n                var temp26 = memory[0x40:0x60];\n                return memory[temp26:temp26 + temp25 - temp26 + 0x20];\n            } else if (var0 == 0x71ffcb16) {\n                // Dispatch table entry for changeFeeAccount(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                changeFeeAccount(var2);\n                stop();\n            } else if (var0 == 0x731c2f81) {\n                // Dispatch table entry for feeRebate()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var2 = feeRebate();\n                goto label_0203;\n            } else if (var0 == 0x8823a9c0) {\n                // Dispatch table entry for changeFeeTake(uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24];\n                changeFeeTake(var2);\n                stop();\n            } else if (var0 == 0x8f283970) {\n                // Dispatch table entry for changeAdmin(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                changeAdmin(var2);\n                stop();\n            } else if (var0 == 0x9e281a98) {\n                // Dispatch table entry for withdrawToken(address,uint256)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                withdrawToken(var2, var3);\n                stop();\n            } else if (var0 == 0xbb5f4629) {\n                // Dispatch table entry for orders(address,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x03e2;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                var3 = msg.data[0x24:0x44];\n                var2 = orders(var2, var3);\n                goto label_03E2;\n            } else if (var0 == 0xc281309e) {\n                // Dispatch table entry for feeTake()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var2 = feeTake();\n                goto label_0203;\n            } else if (var0 == 0xd0e30db0) {\n                // Dispatch table entry for deposit()\n                var1 = 0x0165;\n                deposit();\n                stop();\n            } else if (var0 == 0xe8f6bc2e) {\n                // Dispatch table entry for changeAccountLevelsAddr(address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0165;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                changeAccountLevelsAddr(var2);\n                stop();\n            } else if (var0 == 0xf3412942) {\n                // Dispatch table entry for accountLevelsAddr()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0371;\n                var2 = accountLevelsAddr();\n                goto label_0371;\n            } else if (var0 == 0xf7888aec) {\n                // Dispatch table entry for balanceOf(address,address)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var temp27 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp27 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & temp27;\n                var1 = balanceOf(var2, var3);\n                goto label_0203;\n            } else if (var0 == 0xf851a440) {\n                // Dispatch table entry for admin()\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0371;\n                var2 = admin();\n                goto label_0371;\n            } else if (var0 == 0xfb6e155f) {\n                // Dispatch table entry for availableVolume(address,uint256,address,uint256,uint256,uint256,address,uint8,bytes32,bytes32)\n                if (msg.value) { assert(); }\n            \n                var1 = 0x0203;\n                var temp28 = 0x02 ** 0xa0 - 0x01;\n                var2 = temp28 & msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44];\n                var4 = temp28 & msg.data[0x44:0x64];\n                var5 = msg.data[0x64:0x84];\n                var6 = msg.data[0x84:0xa4];\n                var7 = msg.data[0xa4:0xc4];\n                var8 = msg.data[0xc4:0xe4] & temp28;\n                var9 = msg.data[0xe4:0x0104] & 0xff;\n                var10 = msg.data[0x0104:0x0124];\n                var11 = msg.data[0x0124:0x0144];\n                var1 = availableVolume(var2, var3, var4, var5, var6, var7, var8, var9, var10, var11);\n                goto label_0203;\n            } else { goto label_0151; }\n        }\n    }\n    \n    function trade(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10) {\n        var var0 = 0x00;\n        var var1 = 0x02;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = address(this) * 0x02 ** 0x60;\n        var temp1 = temp0 + 0x14;\n        memory[temp1:temp1 + 0x20] = (arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp2 = temp1 + 0x14;\n        memory[temp2:temp2 + 0x20] = arg1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = (arg2 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp4 = temp3 + 0x14;\n        memory[temp4:temp4 + 0x20] = arg3;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg5;\n        var var2 = temp6 + 0x20;\n        var temp7 = memory[0x40:0x60];\n        var temp8;\n        temp8, memory[temp7:temp7 + 0x20] = address(var1).call.gas(msg.gas - 0x646e)(memory[temp7:temp7 + var2 - temp7]);\n    \n        if (!temp8) { assert(); }\n    \n        var temp9 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp9;\n        memory[0x20:0x40] = temp10;\n        var0 = temp9;\n        var1 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (var1) {\n        label_077C:\n        \n            if (var1) {\n                var1 = block.number <= arg4;\n            \n                if (!var1) { goto label_07C2; }\n                else { goto label_078F; }\n            } else if (!var1) {\n            label_07C2:\n            \n                if (!var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x07dc;\n                var2 = arg0;\n                var var3 = arg1;\n                var var4 = arg2;\n                var var5 = arg3;\n                var var6 = arg6;\n                var var7 = arg10;\n                func_16AA(var2, var3, var4, var5, var6, var7);\n                memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x08;\n                var temp11 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var0;\n                memory[0x20:0x40] = temp11;\n                var1 = 0x080a;\n                var2 = storage[keccak256(memory[0x00:0x40])];\n                var3 = arg10;\n                var1 = func_1682(var2, var3);\n                memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x08;\n                var temp12 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var0;\n                memory[0x20:0x40] = temp12;\n                storage[keccak256(memory[0x00:0x40])] = var1;\n                var1 = 0x6effdda786735d5033bfad5f53e5131abcced9e52be6c507b62d639685fbed6d;\n                var2 = arg0;\n                var3 = arg10;\n                var4 = arg2;\n                var5 = arg1;\n                var6 = var3 * arg3;\n            \n                if (!var5) { assert(); }\n            \n                var temp13 = memory[0x40:0x60];\n                var temp14 = 0x02 ** 0xa0 - 0x01;\n                memory[temp13:temp13 + 0x20] = temp14 & var2;\n                memory[temp13 + 0x20:temp13 + 0x20 + 0x20] = var3;\n                memory[temp13 + 0x40:temp13 + 0x40 + 0x20] = temp14 & var4;\n                memory[temp13 + 0x60:temp13 + 0x60 + 0x20] = var6 / var5;\n                memory[temp13 + 0x80:temp13 + 0x80 + 0x20] = arg6 & temp14;\n                memory[temp13 + 0xa0:temp13 + 0xa0 + 0x20] = msg.sender & temp14;\n                var temp15 = memory[0x40:0x60];\n                log(memory[temp15:temp15 + temp13 - temp15 + 0xc0], [stack[-6]]);\n                return;\n            } else {\n            label_078F:\n                memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n                memory[0x20:0x40] = 0x08;\n                var temp16 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = var0;\n                memory[0x20:0x40] = temp16;\n                var1 = arg1;\n                var3 = storage[keccak256(memory[0x00:0x40])];\n                var2 = 0x07bf;\n                var4 = arg10;\n                var2 = func_1682(var3, var4);\n                var1 = var2 <= var1;\n                goto label_07C2;\n            }\n        } else {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n            memory[temp17 + 0x1c:temp17 + 0x1c + 0x20] = var0;\n            var temp18 = memory[0x40:0x60];\n            var temp19 = keccak256(memory[temp18:temp18 + temp17 - temp18 + 0x3c]);\n            memory[0x00:0x20] = temp18;\n            memory[0x40:0x60] = temp18 + 0x20;\n            memory[temp18 + 0x40:temp18 + 0x40 + 0x20] = 0x00;\n            var temp20 = memory[0x40:0x60];\n            memory[temp20:temp20 + 0x20] = temp19;\n            memory[temp20 + 0x20:temp20 + 0x20 + 0x20] = arg7 & 0xff;\n            memory[temp20 + 0x40:temp20 + 0x40 + 0x20] = arg8;\n            memory[temp20 + 0x60:temp20 + 0x60 + 0x20] = arg9;\n            var temp21 = memory[0x40:0x60];\n            var1 = arg6 & 0x02 ** 0xa0 - 0x01;\n            var2 = 0x01;\n            var3 = temp20 + 0x80;\n            var temp22;\n            temp22, memory[temp21 + ~0x1f:temp21 + ~0x1f + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp21:temp21 + temp20 - temp21 + 0x80]);\n        \n            if (!temp22) { assert(); }\n        \n            var1 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var1;\n            goto label_077C;\n        }\n    }\n    \n    function order(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & address(this)) * 0x02 ** 0x60;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (arg0 & temp1) * 0x02 ** 0x60;\n        memory[temp0 + 0x28:temp0 + 0x28 + 0x20] = arg1;\n        memory[temp0 + 0x48:temp0 + 0x48 + 0x20] = (arg2 & temp1) * 0x02 ** 0x60;\n        memory[temp0 + 0x5c:temp0 + 0x5c + 0x20] = arg3;\n        memory[temp0 + 0x7c:temp0 + 0x7c + 0x20] = arg4;\n        memory[temp0 + 0x9c:temp0 + 0x9c + 0x20] = arg5;\n        var temp2 = memory[0x40:0x60];\n        var var0 = 0x00;\n        var var1 = 0x02;\n        var var2 = temp0 + 0xbc;\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x20] = address(var1).call.gas(msg.gas - 0x646e).value(var0)(memory[temp2:temp2 + temp0 - temp2 + 0xbc]);\n    \n        if (!temp3) { assert(); }\n    \n        var temp4 = memory[0x40:0x60];\n        var temp5 = memory[temp4:temp4 + 0x20];\n        var temp6 = 0x02 ** 0xa0 - 0x01;\n        var temp7 = temp6 & msg.sender;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = 0x07;\n        var temp8 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = temp8;\n        var temp9 = keccak256(memory[0x00:0x40]);\n        storage[temp9] = (storage[temp9] & ~0xff) | 0x01;\n        memory[temp4:temp4 + 0x20] = temp6 & arg0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = arg1;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = arg2 & temp6;\n        memory[temp4 + 0x60:temp4 + 0x60 + 0x20] = arg3;\n        memory[temp4 + 0x80:temp4 + 0x80 + 0x20] = arg4;\n        memory[temp4 + 0xa0:temp4 + 0xa0 + 0x20] = arg5;\n        memory[temp4 + 0xc0:temp4 + 0xc0 + 0x20] = temp7;\n        var temp10 = memory[0x40:0x60];\n        log(memory[temp10:temp10 + temp4 - temp10 + 0xe0], [0x3f7f2eda73683c21a15f9435af1028c93185b5f1fa38270762dc32be606b3e85]);\n    }\n    \n    function orderFills(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x08;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function cancelOrder(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0:temp0 + 0x20] = (temp1 & address(this)) * 0x02 ** 0x60;\n        memory[temp0 + 0x14:temp0 + 0x14 + 0x20] = (arg0 & temp1) * 0x02 ** 0x60;\n        memory[temp0 + 0x28:temp0 + 0x28 + 0x20] = arg1;\n        memory[temp0 + 0x48:temp0 + 0x48 + 0x20] = (arg2 & temp1) * 0x02 ** 0x60;\n        memory[temp0 + 0x5c:temp0 + 0x5c + 0x20] = arg3;\n        memory[temp0 + 0x7c:temp0 + 0x7c + 0x20] = arg4;\n        memory[temp0 + 0x9c:temp0 + 0x9c + 0x20] = arg5;\n        var temp2 = memory[0x40:0x60];\n        var var0 = 0x00;\n        var var1 = 0x02;\n        var var2 = temp0 + 0xbc;\n        var temp3;\n        temp3, memory[temp2:temp2 + 0x20] = address(var1).call.gas(msg.gas - 0x646e).value(var0)(memory[temp2:temp2 + temp0 - temp2 + 0xbc]);\n    \n        if (!temp3) { assert(); }\n    \n        var temp4 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x07;\n        var temp5 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp4;\n        memory[0x20:0x40] = temp5;\n        var0 = temp4;\n        var1 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (var1) {\n        label_0B39:\n        \n            if (!var1) { revert(memory[0x00:0x00]); }\n        \n            var temp6 = 0x02 ** 0xa0 - 0x01;\n            var temp7 = temp6 & msg.sender;\n            memory[0x00:0x20] = temp7;\n            memory[0x20:0x40] = 0x08;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = var0;\n            memory[0x20:0x40] = temp8;\n            var temp9 = arg1;\n            storage[keccak256(memory[0x00:0x40])] = temp9;\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = temp6 & arg0;\n            memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = temp9;\n            memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = arg2 & temp6;\n            memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = arg3;\n            memory[temp10 + 0x80:temp10 + 0x80 + 0x20] = arg4;\n            memory[temp10 + 0xa0:temp10 + 0xa0 + 0x20] = arg5;\n            memory[temp10 + 0xc0:temp10 + 0xc0 + 0x20] = temp7;\n            memory[temp10 + 0xe0:temp10 + 0xe0 + 0x20] = arg6 & 0xff;\n            memory[temp10 + 0x0100:temp10 + 0x0100 + 0x20] = arg7;\n            memory[temp10 + 0x0120:temp10 + 0x0120 + 0x20] = arg8;\n            var temp11 = memory[0x40:0x60];\n            log(memory[temp11:temp11 + temp10 - temp11 + 0x0140], [0x1e0b760c386003e9cb9bcf4fcf3997886042859d9b6ed6320e804597fcdb28b0]);\n            return;\n        } else {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n            memory[temp12 + 0x1c:temp12 + 0x1c + 0x20] = var0;\n            var temp13 = memory[0x40:0x60];\n            var temp14 = keccak256(memory[temp13:temp13 + temp12 - temp13 + 0x3c]);\n            memory[0x00:0x20] = temp13;\n            memory[0x40:0x60] = temp13 + 0x20;\n            memory[temp13 + 0x40:temp13 + 0x40 + 0x20] = 0x00;\n            var temp15 = memory[0x40:0x60];\n            memory[temp15:temp15 + 0x20] = temp14;\n            memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = arg6 & 0xff;\n            memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = arg7;\n            memory[temp15 + 0x60:temp15 + 0x60 + 0x20] = arg8;\n            var temp16 = memory[0x40:0x60];\n            var1 = msg.sender;\n            var2 = 0x01;\n            var var3 = temp15 + 0x80;\n            var temp17;\n            temp17, memory[temp16 + ~0x1f:temp16 + ~0x1f + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp16:temp16 + temp15 - temp16 + 0x80]);\n        \n            if (!temp17) { assert(); }\n        \n            var1 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var1;\n            goto label_0B39;\n        }\n    }\n    \n    function depositToken(var arg0, var arg1) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\n        var temp1 = 0x02 ** 0xa0 - 0x01;\n        memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = temp1 & msg.sender;\n        memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = temp1 & address(this);\n        memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = arg1;\n        var var0 = arg0 & temp1;\n        var var4 = memory[0x40:0x60];\n        var var1 = 0x23b872dd;\n        var var2 = temp0 + 0x64;\n        var var3 = 0x20;\n        var var5 = temp0 - var4 + 0x64;\n        var var6 = var4;\n        var var7 = 0x00;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { assert(); }\n    \n        var temp2;\n        temp2, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp2) { assert(); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp3;\n        memory[0x20:0x40] = 0x06;\n        var temp4 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp3 & msg.sender;\n        memory[0x20:0x40] = temp4;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x0df1;\n        var2 = arg1;\n        var0 = func_1682(var1, var2);\n        var temp5 = 0x02 ** 0xa0 - 0x01;\n        var temp6 = temp5 & arg0;\n        memory[0x00:0x20] = temp6;\n        memory[0x20:0x40] = 0x06;\n        var temp7 = keccak256(memory[0x00:0x40]);\n        var temp8 = temp5 & msg.sender;\n        memory[0x00:0x20] = temp8;\n        memory[0x20:0x40] = temp7;\n        var temp9 = var0;\n        storage[keccak256(memory[0x00:0x40])] = temp9;\n        var temp10 = memory[0x40:0x60];\n        memory[temp10:temp10 + 0x20] = temp6;\n        memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = temp8;\n        memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = arg1;\n        memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = temp9;\n        var temp11 = memory[0x40:0x60];\n        log(memory[temp11:temp11 + temp10 - temp11 + 0x80], [0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7]);\n    }\n    \n    function amountFilled(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x02;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = address(this) * 0x02 ** 0x60;\n        var temp1 = temp0 + 0x14;\n        memory[temp1:temp1 + 0x20] = (arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp2 = temp1 + 0x14;\n        memory[temp2:temp2 + 0x20] = arg1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = (arg2 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp4 = temp3 + 0x14;\n        memory[temp4:temp4 + 0x20] = arg3;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg5;\n        var var3 = temp6 + 0x20;\n        var temp7 = memory[0x40:0x60];\n        var temp8;\n        temp8, memory[temp7:temp7 + 0x20] = address(var2).call.gas(msg.gas - 0x646e)(memory[temp7:temp7 + var3 - temp7]);\n    \n        if (!temp8) { assert(); }\n    \n        var temp9 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x08;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp9;\n        memory[0x20:0x40] = temp10;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function tokens(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x06;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function changeFeeMake(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        if (arg0 > storage[0x03]) { revert(memory[0x00:0x00]); }\n    \n        storage[0x03] = arg0;\n    }\n    \n    function feeMake() returns (var r0) { return storage[0x03]; }\n    \n    function changeFeeRebate(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0 < storage[0x05];\n    \n        if (var0) {\n            if (var0) { revert(memory[0x00:0x00]); }\n        \n        label_0FE4:\n            storage[0x05] = arg0;\n            return;\n        } else if (arg0 <= storage[0x04]) { goto label_0FE4; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function feeAccount() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function testTrade(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9, var arg10, var arg11) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg11 & temp0;\n        memory[0x20:0x40] = temp1;\n        var var0 = 0x00;\n        var var1 = storage[keccak256(memory[var0:var0 + 0x40])] >= arg10;\n    \n        if (storage[keccak256(memory[var0:var0 + 0x40])] >= arg10) {\n        label_1045:\n        \n            if (var1) { return 0x01; }\n            else { return 0x00; }\n        } else {\n            var1 = arg10;\n            var var2 = 0x1042;\n            var var3 = arg0;\n            var var4 = arg1;\n            var var5 = arg2;\n            var var6 = arg3;\n            var var7 = arg4;\n            var var8 = arg5;\n            var var9 = arg6;\n            var var10 = arg7;\n            var var11 = arg8;\n            var var12 = arg9;\n            var2 = availableVolume(var3, var4, var5, var6, var7, var8, var9, var10, var11, var12);\n            var1 = var2 >= var1;\n            goto label_1045;\n        }\n    }\n    \n    function changeFeeAccount(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x01] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function feeRebate() returns (var r0) { return storage[0x05]; }\n    \n    function changeFeeTake(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        var var0 = arg0 > storage[0x04];\n    \n        if (var0) {\n            if (var0) { revert(memory[0x00:0x00]); }\n        \n        label_10ED:\n            storage[0x04] = arg0;\n            return;\n        } else if (arg0 >= storage[0x05]) { goto label_10ED; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function changeAdmin(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function withdrawToken(var arg0, var arg1) {\n        if (!(arg0 & 0x02 ** 0xa0 - 0x01)) { revert(memory[0x00:0x00]); }\n    \n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp0 & msg.sender;\n        memory[0x20:0x40] = temp1;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp2;\n        memory[0x20:0x40] = 0x06;\n        var temp3 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp2 & msg.sender;\n        memory[0x20:0x40] = temp3;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x11ba;\n        var var2 = arg1;\n        var0 = withdraw(var1, var2);\n        var temp4 = 0x02 ** 0xa0 - 0x01;\n        var temp5 = arg0 & temp4;\n        memory[0x00:0x20] = temp5;\n        memory[0x20:0x40] = 0x06;\n        var temp6 = keccak256(memory[0x00:0x40]);\n        var temp7 = temp4 & msg.sender;\n        memory[0x00:0x20] = temp7;\n        memory[0x20:0x40] = temp6;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp8 = memory[0x40:0x60];\n        memory[temp8:temp8 + 0x20] = 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = temp7;\n        memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = arg1;\n        var0 = temp5;\n        var1 = 0xa9059cbb;\n        var2 = temp8 + 0x44;\n        var var4 = memory[0x40:0x60];\n        var var3 = 0x20;\n        var var5 = temp8 - var4 + 0x44;\n        var var7 = 0x00;\n        var var6 = var4;\n        var var8 = var0;\n    \n        if (!address(var8).code.length) { assert(); }\n    \n        var temp9;\n        temp9, memory[var4:var4 + var3] = address(var8).call.gas(msg.gas - 0x02c6).value(var7)(memory[var6:var6 + var5]);\n    \n        if (!temp9) { assert(); }\n    \n        if (!memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20]) { revert(memory[0x00:0x00]); }\n    \n        var temp10 = 0x02 ** 0xa0 - 0x01;\n        var temp11 = arg0 & temp10;\n        memory[0x00:0x20] = temp11;\n        memory[0x20:0x40] = 0x06;\n        var temp12 = keccak256(memory[0x00:0x40]);\n        var temp13 = msg.sender & temp10;\n        memory[0x00:0x20] = temp13;\n        memory[0x20:0x40] = temp12;\n        var temp14 = storage[keccak256(memory[0x00:0x40])];\n        var temp15 = memory[0x40:0x60];\n        memory[temp15:temp15 + 0x20] = temp11;\n        memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = temp13;\n        memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = arg1;\n        memory[temp15 + 0x60:temp15 + 0x60 + 0x20] = temp14;\n        var temp16 = memory[0x40:0x60];\n        log(memory[temp16:temp16 + temp15 - temp16 + 0x80], [0xf341246adaac6f497bc2a656f546ab9e182111d630394f0c57c710a59a2cb567]);\n    }\n    \n    function orders(var arg0, var arg1) returns (var arg0) {\n        memory[0x20:0x40] = 0x07;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])] & 0xff;\n    }\n    \n    function feeTake() returns (var r0) { return storage[0x04]; }\n    \n    function deposit() {\n        memory[0x00:0x20] = msg.sender;\n        var temp0 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x19e1:0x1a01];\n        var temp1 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x1336;\n        var var2 = msg.value;\n        var0 = func_1682(var1, var2);\n        var temp2 = msg.sender;\n        memory[0x00:0x20] = temp2;\n        var temp3 = memory[0x00:0x20];\n        memory[0x00:0x20] = code[0x19e1:0x1a01];\n        var temp4 = memory[0x00:0x20];\n        memory[0x00:0x20] = temp3;\n        memory[0x20:0x40] = temp4;\n        var temp5 = var0;\n        storage[keccak256(memory[0x00:0x40])] = temp5;\n        var temp6 = memory[0x40:0x60];\n        memory[temp6:temp6 + 0x20] = 0x00;\n        memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = temp2;\n        memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = msg.value;\n        memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = temp5;\n        var temp7 = memory[0x40:0x60];\n        log(memory[temp7:temp7 + temp6 - temp7 + 0x80], [0xdcbc1c05240f31ff3ad067ef1ee35ce4997762752e3a095284754544f4c709d7]);\n    }\n    \n    function changeAccountLevelsAddr(var arg0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n    \n        if (storage[0x00] & temp0 != temp0 & msg.sender) { revert(memory[0x00:0x00]); }\n    \n        storage[0x02] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function accountLevelsAddr() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function balanceOf(var arg0, var arg1) returns (var r0) {\n        var temp0 = 0x02 ** 0xa0 - 0x01;\n        memory[0x00:0x20] = arg0 & temp0;\n        memory[0x20:0x40] = 0x06;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & temp0;\n        memory[0x20:0x40] = temp1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function admin() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function availableVolume(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = 0x02;\n        memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = address(this) * 0x02 ** 0x60;\n        var temp1 = temp0 + 0x14;\n        memory[temp1:temp1 + 0x20] = (arg0 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp2 = temp1 + 0x14;\n        memory[temp2:temp2 + 0x20] = arg1;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = (arg2 & 0x02 ** 0xa0 - 0x01 & 0x02 ** 0xa0 - 0x01) * 0x02 ** 0x60;\n        var temp4 = temp3 + 0x14;\n        memory[temp4:temp4 + 0x20] = arg3;\n        var temp5 = temp4 + 0x20;\n        memory[temp5:temp5 + 0x20] = arg4;\n        var temp6 = temp5 + 0x20;\n        memory[temp6:temp6 + 0x20] = arg5;\n        var var5 = temp6 + 0x20;\n        var temp7 = memory[0x40:0x60];\n        var temp8;\n        temp8, memory[temp7:temp7 + 0x20] = address(var4).call.gas(msg.gas - 0x646e)(memory[temp7:temp7 + var5 - temp7]);\n    \n        if (!temp8) { assert(); }\n    \n        var temp9 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n        memory[0x20:0x40] = 0x07;\n        var temp10 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = temp9;\n        memory[0x20:0x40] = temp10;\n        var1 = temp9;\n        var4 = storage[keccak256(memory[0x00:0x40])] & 0xff;\n    \n        if (var4) {\n        label_15D2:\n        \n            if (!var4) {\n                if (var4) {\n                label_15ED:\n                    memory[0x00:0x20] = arg6 & 0x02 ** 0xa0 - 0x01;\n                    memory[0x20:0x40] = 0x08;\n                    var temp11 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = var1;\n                    memory[0x20:0x40] = temp11;\n                    var4 = 0x161c;\n                    var5 = arg1;\n                    var var6 = storage[keccak256(memory[0x00:0x40])];\n                    var4 = withdraw(var5, var6);\n                    var temp12 = 0x02 ** 0xa0 - 0x01;\n                    memory[0x00:0x20] = arg2 & temp12;\n                    memory[0x20:0x40] = 0x06;\n                    var temp13 = keccak256(memory[0x00:0x40]);\n                    memory[0x00:0x20] = arg6 & temp12;\n                    memory[0x20:0x40] = temp13;\n                    var2 = var4;\n                    var4 = arg3;\n                    var5 = 0x1651;\n                    var6 = storage[keccak256(memory[0x00:0x40])];\n                    var var7 = arg1;\n                    var5 = func_19A0(var6, var7);\n                \n                    if (!var4) { assert(); }\n                \n                    var3 = var5 / var4;\n                \n                    if (var2 >= var3) {\n                        var0 = var3;\n                    \n                    label_1671:\n                        return var0;\n                    } else {\n                        var0 = var2;\n                        goto label_1671;\n                    }\n                } else {\n                label_15E5:\n                    var0 = 0x00;\n                    goto label_1671;\n                }\n            } else if (block.number <= arg4) { goto label_15ED; }\n            else { goto label_15E5; }\n        } else {\n            var temp14 = memory[0x40:0x60];\n            memory[temp14:temp14 + 0x20] = 0x19457468657265756d205369676e6564204d6573736167653a0a333200000000;\n            memory[temp14 + 0x1c:temp14 + 0x1c + 0x20] = var1;\n            var temp15 = memory[0x40:0x60];\n            var temp16 = keccak256(memory[temp15:temp15 + temp14 - temp15 + 0x3c]);\n            memory[0x00:0x20] = temp15;\n            memory[0x40:0x60] = temp15 + 0x20;\n            memory[temp15 + 0x40:temp15 + 0x40 + 0x20] = 0x00;\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = temp16;\n            memory[temp17 + 0x20:temp17 + 0x20 + 0x20] = arg7 & 0xff;\n            memory[temp17 + 0x40:temp17 + 0x40 + 0x20] = arg8;\n            memory[temp17 + 0x60:temp17 + 0x60 + 0x20] = arg9;\n            var temp18 = memory[0x40:0x60];\n            var4 = arg6 & 0x02 ** 0xa0 - 0x01;\n            var5 = 0x01;\n            var6 = temp17 + 0x80;\n            var temp19;\n            temp19, memory[temp18 + ~0x1f:temp18 + ~0x1f + 0x20] = address(var5).call.gas(msg.gas - 0x646e)(memory[temp18:temp18 + temp17 - temp18 + 0x80]);\n        \n            if (!temp19) { assert(); }\n        \n            var4 = memory[memory[0x40:0x60] - 0x20:memory[0x40:0x60] - 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01 == var4;\n            goto label_15D2;\n        }\n    }\n    \n    function func_1682(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 + temp0;\n        var var2 = 0x169f;\n        var var3 = var1 >= temp0;\n    \n        if (var1 >= temp0) {\n            func_169A(var3);\n            return var1;\n        } else {\n            var3 = var1 >= arg1;\n            func_19CF(var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_169A(var arg0) {\n        func_19CF(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_16AA(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5) {\n        var var0 = 0x00;\n        var var1 = 0x00;\n        var var2 = 0x00;\n        var var3 = 0x00;\n        var var4 = 0x0de0b6b3a7640000;\n        var var5 = 0x16c7;\n        var var6 = arg5;\n        var var7 = storage[0x03];\n        var5 = func_19A0(var6, var7);\n    \n        if (!var4) { assert(); }\n    \n        var0 = var5 / var4;\n        var4 = 0x0de0b6b3a7640000;\n        var5 = 0x16e8;\n        var6 = arg5;\n        var7 = storage[0x04];\n        var5 = func_19A0(var6, var7);\n    \n        if (!var4) { assert(); }\n    \n        var1 = var5 / var4;\n        var2 = 0x00;\n    \n        if (!(storage[0x02] & 0x02 ** 0xa0 - 0x01)) {\n        label_17C8:\n            var temp0 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp0;\n            memory[0x20:0x40] = 0x06;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp0 & msg.sender;\n            memory[0x20:0x40] = temp1;\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x1803;\n            var6 = 0x17fe;\n            var7 = arg5;\n            var var8 = var1;\n            var6 = func_1682(var7, var8);\n            var4 = func_17FE(var5, var6);\n            var temp2 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp2 & arg0;\n            memory[0x20:0x40] = 0x06;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp2 & msg.sender;\n            memory[0x20:0x40] = temp3;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            memory[0x00:0x20] = arg4 & temp2;\n            var4 = 0x1851;\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var6 = 0x184c;\n            var7 = 0x1846;\n            var8 = arg5;\n            var var9 = var2;\n            var7 = func_1682(var8, var9);\n            var6 = func_1846(var0, var7);\n            var4 = func_184C(var5, var6);\n            var temp4 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp4 & arg0;\n            memory[0x20:0x40] = 0x06;\n            var temp5 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp4 & arg4;\n            memory[0x20:0x40] = temp5;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            memory[0x00:0x20] = temp4 & storage[0x01];\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x18a2;\n            var6 = 0x184c;\n            var7 = 0x1897;\n            var8 = var0;\n            var9 = var1;\n            var7 = func_1682(var8, var9);\n            var6 = func_1897(var2, var7);\n            var4 = func_184C(var5, var6);\n            var temp6 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg0 & temp6;\n            memory[0x20:0x40] = 0x06;\n            var temp7 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp6 & storage[0x01];\n            memory[0x20:0x40] = temp7;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            memory[0x00:0x20] = temp6 & arg2;\n            memory[0x20:0x40] = 0x06;\n            var temp8 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = arg4 & temp6;\n            memory[0x20:0x40] = temp8;\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x1902;\n            var6 = arg1;\n            var7 = 0x18f3;\n            var8 = arg3;\n            var9 = arg5;\n            var7 = func_19A0(var8, var9);\n            var4 = func_18F3(var5, var6, var7);\n            var temp9 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = temp9 & arg2;\n            memory[0x20:0x40] = 0x06;\n            var temp10 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp9 & arg4;\n            memory[0x20:0x40] = temp10;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            memory[0x00:0x20] = temp9 & msg.sender;\n            var5 = storage[keccak256(memory[0x00:0x40])];\n            var4 = 0x1953;\n            var6 = arg1;\n            var7 = 0x1944;\n            var8 = arg3;\n            var9 = arg5;\n            var7 = func_19A0(var8, var9);\n            var4 = func_1944(var5, var6, var7);\n            var temp11 = 0x02 ** 0xa0 - 0x01;\n            memory[0x00:0x20] = arg2 & temp11;\n            memory[0x20:0x40] = 0x06;\n            var temp12 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = temp11 & msg.sender;\n            memory[0x20:0x40] = temp12;\n            storage[keccak256(memory[0x00:0x40])] = var4;\n            return;\n        } else {\n            memory[memory[0x40:0x60] + 0x20:memory[0x40:0x60] + 0x20 + 0x20] = 0x00;\n            var temp13 = memory[0x40:0x60];\n            memory[temp13:temp13 + 0x20] = 0x1cbd051900000000000000000000000000000000000000000000000000000000;\n            var temp14 = 0x02 ** 0xa0 - 0x01;\n            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = temp14 & arg4;\n            var4 = storage[0x02] & temp14;\n            var5 = 0x1cbd0519;\n            var6 = temp13 + 0x24;\n            var7 = 0x20;\n            var8 = memory[0x40:0x60];\n            var9 = temp13 - var8 + 0x24;\n            var var11 = 0x00;\n            var var10 = var8;\n            var var12 = var4;\n        \n            if (!address(var12).code.length) { assert(); }\n        \n            var temp15;\n            temp15, memory[var8:var8 + var7] = address(var12).call.gas(msg.gas - 0x02c6).value(var11)(memory[var10:var10 + var9]);\n        \n            if (!temp15) { assert(); }\n        \n            var3 = memory[memory[0x40:0x60]:memory[0x40:0x60] + 0x20];\n        \n            if (var3 != 0x01) {\n            label_17BB:\n            \n                if (var3 != 0x02) { goto label_17C8; }\n            \n                var2 = var1;\n                goto label_17C8;\n            } else {\n                var4 = 0x0de0b6b3a7640000;\n                var5 = 0x17ae;\n                var6 = arg5;\n                var7 = storage[0x05];\n                var5 = func_19A0(var6, var7);\n            \n                if (!var4) { assert(); }\n            \n                var2 = var5 / var4;\n                goto label_17BB;\n            }\n        }\n    }\n    \n    function func_17FE(var arg0, var arg1) returns (var r0) {\n        r0 = withdraw(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1846(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = withdraw(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_184C(var arg0, var arg1) returns (var r0) {\n        r0 = func_1682(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1897(var arg0, var arg1) returns (var r0) {\n        var var0 = arg0;\n        r0 = withdraw(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_18F3(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        arg1 = arg2 / arg1;\n        r0 = withdraw(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1944(var arg0, var arg1, var arg2) returns (var r0) {\n        if (!arg1) { assert(); }\n    \n        arg1 = arg2 / arg1;\n        r0 = func_1682(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function withdraw(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x1995;\n        var var2 = arg1 <= arg0;\n        func_19CF(var2);\n        return arg0 - arg1;\n    }\n    \n    function func_19A0(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        var var1 = arg1 * temp0;\n        var var2 = 0x169f;\n        var var3 = !temp0;\n    \n        if (var3) {\n            func_169A(var3);\n            return var1;\n        } else {\n            var3 = arg1;\n            var var4 = arg0;\n            var var5 = var1;\n        \n            if (!var4) { assert(); }\n        \n            var3 = var5 / var4 == var3;\n            func_19CF(var3);\n            // Error: Could not resolve method call return address!\n        }\n    }\n    \n    function func_19CF(var arg0) {\n        if (arg0) { return; }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 36.104857444763184,
	"usage": {
		"completion_tokens": 437,
		"prompt_tokens": 19297,
		"total_tokens": 19734
	}
}