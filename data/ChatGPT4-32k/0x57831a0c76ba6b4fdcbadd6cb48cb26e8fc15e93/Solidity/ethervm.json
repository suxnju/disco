{
	"address": "0x57831a0c76ba6b4fdcbadd6cb48cb26e8fc15e93",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "The Solidity contract that corresponds to the provided EVM Bytecode is as follows:\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract Contract {\n    address public ceoAddress;\n    address public cfoAddress;\n    address public cooAddress;\n    bool public frozen = false;\n\n    function setCEO(address _newCEO) public {\n        require(msg.sender == ceoAddress);\n        require(_newCEO != address(0));\n\n        ceoAddress = _newCEO;\n    }\n\n    function setCFO(address _newCFO) public {\n        require(msg.sender == ceoAddress);\n        require(_newCFO != address(0));\n\n        cfoAddress = _newCFO;\n    }\n\n    function setCOO(address _newCOO) public {\n        require(msg.sender == ceoAddress);\n        require(_newCOO != address(0));\n\n        cooAddress = _newCOO;\n    }\n\n    function freeze() public {\n        require(msg.sender == ceoAddress || msg.sender == cfoAddress);\n        frozen = true;\n    }\n}\n```\nPlease note that the above code is a simplified version of the original contract. It may lack some functionalities present in the original contract but it represents the core functionalities based on the provided EVM Bytecode.",
				"role": "assistant"
			}
		}
	],
	"created": 1700474444,
	"id": "chatcmpl-8MvN60KsVK5pvMILg5ZMKQ9JiqSZm",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_017C:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x776520646f6e27742061636365707420616e79207061796d656e747321000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x0519ce79) {\n                // Dispatch table entry for cfoAddress()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var var2 = cfoAddress();\n            \n            label_01E1:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x054f7d9c) {\n                // Dispatch table entry for frozen()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0212;\n                var2 = frozen();\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x0a0f8168) {\n                // Dispatch table entry for ceoAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var2 = ceoAddress();\n                goto label_01E1;\n            } else if (var0 == 0x14806a32) {\n                // Dispatch table entry for 0x14806a32 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_0572();\n            \n            label_0250:\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var2;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + temp6 - temp7 + 0x20];\n            } else if (var0 == 0x1c091a5f) {\n                // Dispatch table entry for 0x1c091a5f (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var temp8 = msg.data[0x04:0x24];\n                var2 = temp8 + 0x24;\n                var var3 = msg.data[temp8 + 0x04:temp8 + 0x04 + 0x20];\n                func_0578(var2, var3);\n                stop();\n            } else if (var0 == 0x1f747458) {\n                // Dispatch table entry for 0x1f747458 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                func_073F(var2);\n                stop();\n            } else if (var0 == 0x27d7874c) {\n                // Dispatch table entry for setCEO(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setCEO(var2);\n                stop();\n            } else if (var0 == 0x2ba73c15) {\n                // Dispatch table entry for setCOO(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setCOO(var2);\n                stop();\n            } else if (var0 == 0x2d5796ac) {\n                // Dispatch table entry for 0x2d5796ac (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_0A8A(var2);\n                stop();\n            } else if (var0 == 0x302890e1) {\n                // Dispatch table entry for 0x302890e1 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var2 = func_0B76();\n                goto label_01E1;\n            } else if (var0 == 0x3a3d55a0) {\n                // Dispatch table entry for 0x3a3d55a0 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_0B85(var2);\n                stop();\n            } else if (var0 == 0x45394dad) {\n                // Dispatch table entry for 0x45394dad (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                func_0C71();\n                stop();\n            } else if (var0 == 0x4ae772a4) {\n                // Dispatch table entry for 0x4ae772a4 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_0D53(var2);\n                stop();\n            } else if (var0 == 0x4e0a3379) {\n                // Dispatch table entry for setCFO(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setCFO(var2);\n                stop();\n            } else if (var0 == 0x4e8dc003) {\n                // Dispatch table entry for 0x4e8dc003 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                func_0F5B(var2, var3);\n                stop();\n            } else if (var0 == 0x56d282fc) {\n                // Dispatch table entry for 0x56d282fc (unknown)\n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_13D6(var2);\n                stop();\n            } else if (var0 == 0x5ac165af) {\n                // Dispatch table entry for 0x5ac165af (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_165F();\n                goto label_0250;\n            } else if (var0 == 0x62a5af3b) {\n                // Dispatch table entry for freeze()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                freeze();\n                stop();\n            } else if (var0 == 0x69250729) {\n                // Dispatch table entry for 0x69250729 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_1766();\n                goto label_0250;\n            } else if (var0 == 0x7ae86385) {\n                // Dispatch table entry for 0x7ae86385 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_176C();\n                goto label_0250;\n            } else if (var0 == 0x8c0ceea5) {\n                // Dispatch table entry for allocationStrategy()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                allocationStrategy(var2);\n                stop();\n            } else if (var0 == 0x930add29) {\n                // Dispatch table entry for 0x930add29 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                func_18E1();\n                stop();\n            } else if (var0 == 0xa269993d) {\n                // Dispatch table entry for createOffer(uint256)\n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                createOffer(var2);\n                stop();\n            } else if (var0 == 0xb047fb50) {\n                // Dispatch table entry for cooAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var2 = cooAddress();\n                goto label_01E1;\n            } else if (var0 == 0xbea12e00) {\n                // Dispatch table entry for 0xbea12e00 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_1DB2();\n                goto label_0250;\n            } else if (var0 == 0xbff2273e) {\n                // Dispatch table entry for 0xbff2273e (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_1DB8(var2);\n                stop();\n            } else if (var0 == 0xc65b98e7) {\n                // Dispatch table entry for 0xc65b98e7 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_1F23();\n                goto label_0250;\n            } else if (var0 == 0xd531fe2b) {\n                // Dispatch table entry for 0xd531fe2b (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a4;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var var6;\n                var2, var3, var4, var5, var6 = func_1F29(var2);\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2 & 0xffffffffffffffff;\n                memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = var4 & 0xffff;\n                var temp10 = 0x02 ** 0x80 - 0x01;\n                memory[temp9 + 0x60:temp9 + 0x60 + 0x20] = temp10 & var5;\n                memory[temp9 + 0x80:temp9 + 0x80 + 0x20] = temp10 & var6;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp9 - temp11 + 0xa0];\n            } else if (var0 == 0xdb341765) {\n                // Dispatch table entry for 0xdb341765 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_1F92();\n                goto label_0250;\n            } else if (var0 == 0xdd1b7a0f) {\n                // Dispatch table entry for nonFungibleContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var2 = nonFungibleContract();\n                goto label_01E1;\n            } else if (var0 == 0xe1302e2b) {\n                // Dispatch table entry for 0xe1302e2b (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_1FA7(var2);\n                stop();\n            } else if (var0 == 0xef706adf) {\n                // Dispatch table entry for cancelOffer(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                cancelOffer(var2);\n                stop();\n            } else { goto label_017C; }\n        }\n    }\n    \n    function cfoAddress() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function frozen() returns (var r0) { return storage[0x06] & 0xff; }\n    \n    function ceoAddress() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_0572() returns (var r0) { return storage[0x07]; }\n    \n    function func_0578(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n    \n        if (!(storage[0x06] & 0xff)) {\n            var0 = arg1;\n            var1 = 0x00;\n            var2 = var1;\n        \n            if (var2 >= var0) {\n            label_0720:\n            \n                if (var1 <= 0x00) { return; }\n            \n                storage[0x04] = var1 + storage[0x04];\n                return;\n            } else {\n            label_05EF:\n                var var9 = arg0;\n                var var10 = arg1;\n                var var11 = var2;\n            \n                if (var11 >= var10) { assert(); }\n            \n                memory[0x00:0x20] = msg.data[var11 * 0x20 + var9:var11 * 0x20 + var9 + 0x20];\n                memory[0x20:0x40] = 0x0c;\n                var3 = msg.data[var11 * 0x20 + var9:var11 * 0x20 + var9 + 0x20];\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = storage[var4] & 0xffffffffffffffff;\n                var9 = 0x0630;\n                var10 = var5;\n                var9 = func_2491(var10);\n            \n                if (!var9) { goto label_0715; }\n            \n                var9 = 0x0644;\n                var10 = var5;\n                var9 = func_2497(var10);\n            \n                if (var9) { goto label_0715; }\n            \n                var temp0 = var4;\n                var temp1 = storage[temp0];\n                var temp2 = storage[temp0 + 0x01];\n                memory[0x00:0x20] = var3;\n                memory[0x20:0x40] = 0x0c;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] & ~(0x02 ** 0xf0 - 0x01);\n                storage[temp3 + 0x01] = 0x00;\n                var temp4 = 0x02 ** 0x80 - 0x01;\n                var temp5 = temp4 & temp2 / 0x0100000000000000000000000000000000;\n                var1 = temp5 + var1;\n                var7 = temp5;\n                var6 = temp1 / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01;\n                var8 = (temp4 & temp2) - var7;\n                var9 = 0x06c5;\n                var10 = var3;\n                var11 = var6;\n                var var12 = var8;\n                func_249C(var10, var11, var12);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var3;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var6 & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = var8;\n                memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = var7;\n                var temp7 = memory[0x40:0x60];\n                log(memory[temp7:temp7 + temp6 - temp7 + 0x80], [0xd876ee5dd9082a3ac4fe7be4799528f1d5f3545cee1516f2821d0f8ecc9d629c]);\n            \n            label_0715:\n                var8 = var8;\n                var2 = var2 + 0x01;\n            \n                if (var2 >= var0) { goto label_0720; }\n                else { goto label_05EF; }\n            }\n        } else {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x1f;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp8 - temp11 + 0x64]);\n        }\n    }\n    \n    function func_073F(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x2d;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2703:0x2723];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp5;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = temp6;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp2 - temp7 + 0x84]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            storage[0x03] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6e6577206c6f737420616e6420666f756e642063616e6e6f7420626520746865;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x207a65726f2d6163636f756e7400000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function setCEO(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x2d;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2703:0x2723];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp5;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = temp6;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp2 - temp7 + 0x84]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2a;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6e65772043454f20616464726573732063616e6e6f7420626520746865207a65;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x726f2d6163636f756e7400000000000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function setCOO(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x2d;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2703:0x2723];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp5;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = temp6;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp2 - temp7 + 0x84]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            storage[0x01] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2a;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6e657720434f4f20616464726573732063616e6e6f7420626520746865207a65;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x726f2d6163636f756e7400000000000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_0A8A(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x2d;\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp8;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp6 - temp11 + 0x84]);\n        } else if (!(storage[0x06] & 0xff)) {\n            var var0 = 0x0b40;\n            var var1 = arg0;\n            func_2523(var1);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = arg0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x4a13d5076f950a8eb96f30e1f814eecade18fcebc5042f3ce669cea283edaefd]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x1f;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + temp2 - temp5 + 0x64]);\n        }\n    }\n    \n    function func_0B76() returns (var r0) { return storage[0x03] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_0B85(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x2d;\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp8;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp6 - temp11 + 0x84]);\n        } else if (!(storage[0x06] & 0xff)) {\n            var var0 = 0x0c3b;\n            var var1 = arg0;\n            func_25A8(var1);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = arg0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x2fa1029ea9a56473df3e068ba4dc7f4343efacb8a54b808f595f78d1d62f0035]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x1f;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + temp2 - temp5 + 0x64]);\n        }\n    }\n    \n    function func_0C71() {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x03] & 0x02 ** 0xa0 - 0x01;\n    \n        if (!var1) {\n            if (var1) {\n            label_0D09:\n                var temp0 = storage[0x05];\n                storage[0x05] = 0x00;\n                var temp1 = memory[0x40:0x60];\n                var0 = temp0;\n                var temp2;\n                temp2, memory[temp1:temp1 + 0x00] = address(storage[0x03] & 0x02 ** 0xa0 - 0x01).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + 0x00]);\n                var1 = !temp2;\n            \n                if (!var1) { return; }\n            \n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n            label_0C94:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x36;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6f6e6c79204c6f7374416e64466f756e6420697320616c6c6f77656420746f20;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x706572666f726d2074686973206f7065726174696f6e00000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x84]);\n            }\n        } else if (msg.sender) { goto label_0D09; }\n        else { goto label_0C94; }\n    }\n    \n    function func_0D53(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x2d;\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp8;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp6 - temp11 + 0x84]);\n        } else if (!(storage[0x06] & 0xff)) {\n            var var0 = 0x0e0c;\n            var var1 = arg0;\n            var var2 = storage[0x0a];\n            func_262D(var1, var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = arg0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x4193e3b6c8a874196e0068cb9b96b2aaef71a2d90fc46254c4508e1003996bd5]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x1f;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + temp2 - temp5 + 0x64]);\n        }\n    }\n    \n    function setCFO(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x2d;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2703:0x2723];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp5;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = temp6;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp2 - temp7 + 0x84]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            storage[0x02] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2a;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6e65772043464f20616464726573732063616e6e6f7420626520746865207a65;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x726f2d6163636f756e7400000000000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_0F5B(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n    \n        if (!(storage[0x06] & 0xff)) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = keccak256(memory[0x00:0x40]);\n            var1 = storage[var0] & 0xffffffffffffffff;\n            var var7 = 0x0fdb;\n            var var8 = var1;\n            var7 = func_2491(var8);\n        \n            if (var7) {\n                var7 = 0x103a;\n                var8 = var1;\n                var7 = func_2497(var8);\n            \n                if (var7) {\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = 0x6352211e00000000000000000000000000000000000000000000000000000000;\n                    memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = arg0;\n                    var7 = storage[0x0d] & 0x02 ** 0xa0 - 0x01;\n                    var8 = 0x6352211e;\n                    var var9 = temp0 + 0x24;\n                    var var10 = 0x20;\n                    var var11 = memory[0x40:0x60];\n                    var var12 = temp0 - var11 + 0x24;\n                    var var13 = var11;\n                    var var14 = 0x00;\n                    var var15 = var7;\n                    var var16 = !address(var15).code.length;\n                \n                    if (var16) { revert(memory[0x00:0x00]); }\n                \n                    var temp1;\n                    temp1, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas).value(var14)(memory[var13:var13 + var12]);\n                    var10 = !temp1;\n                \n                    if (!var10) {\n                        var7 = memory[0x40:0x60];\n                        var8 = returndata.length;\n                    \n                        if (var8 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = memory[var7:var7 + 0x20];\n                        var7 = msg.sender == storage[0x01] & 0x02 ** 0xa0 - 0x01;\n                    \n                        if (var7) {\n                            if (var7) {\n                            label_11E8:\n                                var temp2 = var0;\n                                var3 = storage[temp2 + 0x01] & 0x02 ** 0x80 - 0x01;\n                                var7 = 0x1212;\n                                var8 = var3;\n                                var9 = storage[temp2] / 0x02 ** 0xe0 & 0xffff;\n                                var7 = func_26B4(var8, var9);\n                                var4 = var7;\n                            \n                                if (var4 >= arg1 & 0x02 ** 0x80 - 0x01) {\n                                    var temp3 = storage[var0];\n                                    var temp4 = arg0;\n                                    memory[0x00:0x20] = temp4;\n                                    memory[0x20:0x40] = 0x0c;\n                                    var temp5 = keccak256(memory[0x00:0x40]);\n                                    storage[temp5] = storage[temp5] & ~(0x02 ** 0xf0 - 0x01);\n                                    storage[temp5 + 0x01] = 0x00;\n                                    var temp6 = memory[0x40:0x60];\n                                    memory[temp6:temp6 + 0x20] = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\n                                    var temp7 = 0x02 ** 0xa0 - 0x01;\n                                    memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = temp7 & var2;\n                                    memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = temp7 & temp3 / 0x010000000000000000;\n                                    memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp4;\n                                    var5 = temp7 & temp3 / 0x010000000000000000;\n                                    var7 = temp7 & storage[0x0d];\n                                    var8 = 0x23b872dd;\n                                    var9 = temp6 + 0x64;\n                                    var11 = memory[0x40:0x60];\n                                    var10 = 0x00;\n                                    var12 = temp6 - var11 + 0x64;\n                                    var13 = var11;\n                                    var14 = var10;\n                                    var15 = var7;\n                                    var16 = !address(var15).code.length;\n                                \n                                    if (var16) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp8;\n                                    temp8, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas).value(var14)(memory[var13:var13 + var12]);\n                                    var10 = !temp8;\n                                \n                                    if (!var10) {\n                                        storage[0x04] = var3 - var4 + storage[0x04];\n                                        var6 = var3 - var4;\n                                        var7 = 0x1374;\n                                        var8 = arg0;\n                                        var9 = var2;\n                                        var10 = var4;\n                                        func_249C(var8, var9, var10);\n                                        var temp9 = memory[0x40:0x60];\n                                        memory[temp9:temp9 + 0x20] = arg0;\n                                        var temp10 = 0x02 ** 0xa0 - 0x01;\n                                        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = var5 & temp10;\n                                        memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = var2 & temp10;\n                                        memory[temp9 + 0x60:temp9 + 0x60 + 0x20] = var4;\n                                        memory[temp9 + 0x80:temp9 + 0x80 + 0x20] = var6;\n                                        var temp11 = memory[0x40:0x60];\n                                        log(memory[temp11:temp11 + temp9 - temp11 + 0xa0], [0x9accbcf984c4cd67a675ee4d38143974e1fa62aa95da283bd4ca645e408ec283]);\n                                        return;\n                                    } else {\n                                        var temp12 = returndata.length;\n                                        memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                                        revert(memory[0x00:0x00 + returndata.length]);\n                                    }\n                                } else {\n                                    var temp13 = memory[0x40:0x60];\n                                    memory[temp13:temp13 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                    memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n                                    memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x2c;\n                                    memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x63616e6e6f742066756c66696c6c206f6666657220e28093206f666665722070;\n                                    memory[temp13 + 0x64:temp13 + 0x64 + 0x20] = 0x7269636520746f6f206c6f770000000000000000000000000000000000000000;\n                                    var temp14 = memory[0x40:0x60];\n                                    revert(memory[temp14:temp14 + temp13 - temp14 + 0x84]);\n                                }\n                            } else {\n                            label_1173:\n                                var temp15 = memory[0x40:0x60];\n                                memory[temp15:temp15 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n                                memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x27;\n                                memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x6f6e6c7920434f4f206f7220746865206f776e65722063616e2066756c66696c;\n                                memory[temp15 + 0x64:temp15 + 0x64 + 0x20] = 0x6c206f7264657200000000000000000000000000000000000000000000000000;\n                                var temp16 = memory[0x40:0x60];\n                                revert(memory[temp16:temp16 + temp15 - temp16 + 0x84]);\n                            }\n                        } else if (var2 & 0x02 ** 0xa0 - 0x01 == msg.sender) { goto label_11E8; }\n                        else { goto label_1173; }\n                    } else {\n                        var temp17 = returndata.length;\n                        memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp18 = memory[0x40:0x60];\n                    memory[temp18:temp18 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = 0x20;\n                    memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = 0x24;\n                    memory[temp18 + 0x44:temp18 + 0x44 + 0x20] = 0x6f6666657220746f2066756c66696c6c206d757374206e6f7420626520657870;\n                    memory[temp18 + 0x64:temp18 + 0x64 + 0x20] = 0x6972656400000000000000000000000000000000000000000000000000000000;\n                    var temp19 = memory[0x40:0x60];\n                    revert(memory[temp19:temp19 + temp18 - temp19 + 0x84]);\n                }\n            } else {\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n                memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x1b;\n                memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x6f6666657220746f2066756c66696c6c206d7573742065786973740000000000;\n                var temp21 = memory[0x40:0x60];\n                revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n            }\n        } else {\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp22 + 0x04:temp22 + 0x04 + 0x20] = 0x20;\n            memory[temp22 + 0x24:temp22 + 0x24 + 0x20] = 0x1f;\n            var temp23 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp24 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp23;\n            memory[temp22 + 0x44:temp22 + 0x44 + 0x20] = temp24;\n            var temp25 = memory[0x40:0x60];\n            revert(memory[temp25:temp25 + temp22 - temp25 + 0x64]);\n        }\n    }\n    \n    function func_13D6(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (!(storage[0x06] & 0xff)) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = keccak256(memory[0x00:0x40]);\n            var1 = storage[var0] & 0xffffffffffffffff;\n            var var3 = 0x144e;\n            var var4 = var1;\n            var3 = func_2491(var4);\n        \n            if (var3) {\n                var3 = 0x14ad;\n                var4 = var1;\n                var3 = func_2497(var4);\n            \n                if (!var3) {\n                    var temp13 = memory[0x40:0x60];\n                    memory[temp13:temp13 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n                    memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x23;\n                    memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x6f6666657220746f20757064617465206d757374206e6f742062652065787069;\n                    memory[temp13 + 0x64:temp13 + 0x64 + 0x20] = 0x7265640000000000000000000000000000000000000000000000000000000000;\n                    var temp14 = memory[0x40:0x60];\n                    revert(memory[temp14:temp14 + temp13 - temp14 + 0x84]);\n                } else if (msg.sender == storage[var0] / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01) {\n                    var2 = block.timestamp + storage[0x07];\n                \n                    if (msg.value <= 0x00) {\n                        var temp0 = var0;\n                        var temp1 = var2;\n                        storage[temp0] = (temp1 & 0xffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffff);\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = arg0;\n                        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = msg.sender;\n                        memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = temp1;\n                        memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = msg.value;\n                        var temp3 = memory[0x40:0x60];\n                        log(memory[temp3:temp3 + temp2 - temp3 + 0x80], [0x56cb95d5e0f3ba4459f610fef3ba603635cef803d945e97c316cdeb392903991]);\n                        return;\n                    } else {\n                        var temp4 = var0;\n                        var temp5 = temp4 + 0x01;\n                        var temp6 = storage[temp5];\n                        var temp7 = 0x02 ** 0x80 - 0x01;\n                        storage[temp5] = (temp6 & ~0xffffffffffffffffffffffffffffffff) | (msg.value + (temp6 & temp7) & temp7);\n                        var temp8 = var2;\n                        storage[temp4] = (temp8 & 0xffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffff);\n                        var temp9 = memory[0x40:0x60];\n                        memory[temp9:temp9 + 0x20] = arg0;\n                        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = msg.sender;\n                        memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = temp8;\n                        memory[temp9 + 0x60:temp9 + 0x60 + 0x20] = msg.value;\n                        var temp10 = memory[0x40:0x60];\n                        log(memory[temp10:temp10 + temp9 - temp10 + 0x80], [0x56cb95d5e0f3ba4459f610fef3ba603635cef803d945e97c316cdeb392903991]);\n                        return;\n                    }\n                } else {\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n                    memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x2c;\n                    memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = 0x63616c6c6572206d75737420626520626964646572206f66206f666665722074;\n                    memory[temp11 + 0x64:temp11 + 0x64 + 0x20] = 0x6f20626520757064617465640000000000000000000000000000000000000000;\n                    var temp12 = memory[0x40:0x60];\n                    revert(memory[temp12:temp12 + temp11 - temp12 + 0x84]);\n                }\n            } else {\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n                memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x1a;\n                memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x6f6666657220746f20757064617465206d757374206578697374000000000000;\n                var temp16 = memory[0x40:0x60];\n                revert(memory[temp16:temp16 + temp15 - temp16 + 0x64]);\n            }\n        } else {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x1f;\n            var temp18 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp19 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp18;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = temp19;\n            var temp20 = memory[0x40:0x60];\n            revert(memory[temp20:temp20 + temp17 - temp20 + 0x64]);\n        }\n    }\n    \n    function func_165F() returns (var r0) { return storage[0x04]; }\n    \n    function freeze() {\n        var var0 = !!msg.sender;\n    \n        if (!msg.sender) {\n        label_1692:\n        \n            if (!var0) {\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x34;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6f6e6c792043454f206f722043464f20697320616c6c6f77656420746f207065;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x72666f726d2074686973206f7065726174696f6e000000000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x84]);\n            } else if (!(storage[0x06] & 0xff)) {\n                storage[0x06] = (storage[0x06] & ~0xff) | 0x01;\n                return;\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1f;\n                var temp1 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2743:0x2763];\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp1;\n                memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp2;\n                var temp3 = memory[0x40:0x60];\n                revert(memory[temp3:temp3 + temp0 - temp3 + 0x64]);\n            }\n        } else {\n            var0 = msg.sender == storage[0x00] & 0x02 ** 0xa0 - 0x01;\n        \n            if (var0) { goto label_1692; }\n        \n            var0 = msg.sender == storage[0x02] & 0x02 ** 0xa0 - 0x01;\n            goto label_1692;\n        }\n    }\n    \n    function func_1766() returns (var r0) { return storage[0x08]; }\n    \n    function func_176C() returns (var r0) { return storage[0x05]; }\n    \n    function allocationStrategy(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;\n            memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x2d;\n            var temp11 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp12 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp11;\n            memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = temp12;\n            var temp13 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp14 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp13;\n            memory[temp10 + 0x64:temp10 + 0x64 + 0x20] = temp14;\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + temp10 - temp15 + 0x84]);\n        } else if (!(storage[0x06] & 0xff)) {\n            var temp0 = arg0;\n        \n            if (temp0 == temp0 & 0xffffffffffffffff) {\n                var temp1 = arg0;\n                storage[0x07] = temp1;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = temp1;\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + temp2 - temp3 + 0x20], [0x66be647974b8677ccbdb171c9fd037f0f64af878ddc5b7f0923da6a32173ae47]);\n                return;\n            } else {\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x2b;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6e657720676c6f62616c4475726174696f6e2076616c7565206d757374206e6f;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x7420756e646572666c6f77000000000000000000000000000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x84]);\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x1f;\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp8;\n            var temp9 = memory[0x40:0x60];\n            revert(memory[temp9:temp9 + temp6 - temp9 + 0x64]);\n        }\n    }\n    \n    function func_18E1() {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x02] & 0x02 ** 0xa0 - 0x01;\n    \n        if (!var1) {\n            if (var1) {\n            label_1967:\n                var temp0 = storage[0x04];\n                storage[0x04] = 0x00;\n                var temp1 = memory[0x40:0x60];\n                var0 = temp0;\n                var temp2;\n                temp2, memory[temp1:temp1 + 0x00] = address(storage[0x02] & 0x02 ** 0xa0 - 0x01).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + 0x00]);\n                var1 = !temp2;\n            \n                if (!var1) { return; }\n            \n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n            label_1904:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x2d;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6f6e6c792043464f20697320616c6c6f77656420746f20706572666f726d2074;\n                var temp5 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x26e3:0x2703];\n                var temp6 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp5;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = temp6;\n                var temp7 = memory[0x40:0x60];\n                revert(memory[temp7:temp7 + temp4 - temp7 + 0x84]);\n            }\n        } else if (msg.sender) { goto label_1967; }\n        else { goto label_1904; }\n    }\n    \n    function createOffer(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n    \n        if (storage[0x06] & 0xff) {\n            var temp28 = memory[0x40:0x60];\n            memory[temp28:temp28 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp28 + 0x04:temp28 + 0x04 + 0x20] = 0x20;\n            memory[temp28 + 0x24:temp28 + 0x24 + 0x20] = 0x1f;\n            var temp29 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp30 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp29;\n            memory[temp28 + 0x44:temp28 + 0x44 + 0x20] = temp30;\n            var temp31 = memory[0x40:0x60];\n            revert(memory[temp31:temp31 + temp28 - temp31 + 0x64]);\n        } else if (msg.value >= storage[0x08]) {\n            var0 = storage[0x0b];\n            var var11 = 0x1aa2;\n            var var12 = msg.value;\n            var var13 = var0;\n            var11 = func_26B4(var12, var13);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var1 = var11;\n            var2 = keccak256(memory[0x00:0x40]);\n            var3 = storage[var2] & 0xffffffffffffffff;\n            var4 = 0x00;\n            var11 = 0x1ad0;\n            var12 = var3;\n            var11 = func_2491(var12);\n        \n            if (!var11) {\n            label_1BCA:\n                var9 = block.timestamp + storage[0x07];\n            \n                if (var4 <= 0x00) {\n                    var temp0 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp0 + 0xa0;\n                    memory[temp0:temp0 + 0x20] = var9 & 0xffffffffffffffff;\n                    var temp1 = temp0 + 0x20;\n                    memory[temp1:temp1 + 0x20] = msg.sender;\n                    var temp2 = temp1 + 0x20;\n                    memory[temp2:temp2 + 0x20] = var0 & 0xffff;\n                    var temp3 = temp2 + 0x20;\n                    memory[temp3:temp3 + 0x20] = msg.value & 0x02 ** 0x80 - 0x01;\n                    memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = storage[0x0a] & 0x02 ** 0x80 - 0x01;\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0c;\n                    var temp4 = keccak256(memory[0x00:0x40]);\n                    var temp5 = temp4;\n                    storage[temp5] = (memory[temp0:temp0 + 0x20] & 0xffffffffffffffff) | (storage[temp5] & ~0xffffffffffffffff);\n                    var temp6 = temp4;\n                    storage[temp6] = (memory[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01) * 0x0100 ** 0x08 | (storage[temp6] & ~(0x02 ** 0xa0 - 0x01 * 0x0100 ** 0x08));\n                    var temp7 = temp4;\n                    storage[temp7] = (memory[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffff) * 0x0100 ** 0x1c | (storage[temp7] & ~(0xffff * 0x0100 ** 0x1c));\n                    var temp8 = temp4 + 0x01;\n                    storage[temp8] = (memory[temp0 + 0x60:temp0 + 0x60 + 0x20] & 0x02 ** 0x80 - 0x01) | (storage[temp8] & ~(0x02 ** 0x80 - 0x01));\n                    var temp9 = temp4 + 0x01;\n                    storage[temp9] = (memory[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0x02 ** 0x80 - 0x01) * 0x0100 ** 0x10 | (storage[temp9] & ~(0x02 ** 0x80 - 0x01 * 0x0100 ** 0x10));\n                \n                    if (var4 <= 0x00) {\n                    label_1D49:\n                        var temp10 = memory[0x40:0x60];\n                        memory[temp10:temp10 + 0x20] = arg0;\n                        memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = msg.sender;\n                        memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = var9;\n                        memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = msg.value;\n                        memory[temp10 + 0x80:temp10 + 0x80 + 0x20] = var1;\n                        var temp11 = memory[0x40:0x60];\n                        log(memory[temp11:temp11 + temp10 - temp11 + 0xa0], [0x05a7f246d4cdcfed1a85bd6331d1638fa8d47fffd48ede9a22f93d06641f309c]);\n                        return;\n                    } else {\n                    label_1D3F:\n                        var11 = 0x1d49;\n                        var12 = arg0;\n                        var13 = var10;\n                        var var14 = var4;\n                        func_249C(var12, var13, var14);\n                        goto label_1D49;\n                    }\n                } else {\n                    var10 = storage[var2] / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01;\n                    var temp12 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp12 + 0xa0;\n                    memory[temp12:temp12 + 0x20] = var9 & 0xffffffffffffffff;\n                    var temp13 = temp12 + 0x20;\n                    memory[temp13:temp13 + 0x20] = msg.sender;\n                    var temp14 = temp13 + 0x20;\n                    memory[temp14:temp14 + 0x20] = var0 & 0xffff;\n                    var temp15 = temp14 + 0x20;\n                    memory[temp15:temp15 + 0x20] = msg.value & 0x02 ** 0x80 - 0x01;\n                    memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = storage[0x0a] & 0x02 ** 0x80 - 0x01;\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0c;\n                    var temp16 = keccak256(memory[0x00:0x40]);\n                    var temp17 = temp16;\n                    storage[temp17] = (memory[temp12:temp12 + 0x20] & 0xffffffffffffffff) | (storage[temp17] & ~0xffffffffffffffff);\n                    var temp18 = temp16;\n                    storage[temp18] = (memory[temp12 + 0x20:temp12 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01) * 0x0100 ** 0x08 | (storage[temp18] & ~(0x02 ** 0xa0 - 0x01 * 0x0100 ** 0x08));\n                    var temp19 = temp16;\n                    storage[temp19] = (memory[temp12 + 0x40:temp12 + 0x40 + 0x20] & 0xffff) * 0x0100 ** 0x1c | (storage[temp19] & ~(0xffff * 0x0100 ** 0x1c));\n                    var temp20 = temp16 + 0x01;\n                    storage[temp20] = (memory[temp12 + 0x60:temp12 + 0x60 + 0x20] & 0x02 ** 0x80 - 0x01) | (storage[temp20] & ~(0x02 ** 0x80 - 0x01));\n                    var temp21 = temp16 + 0x01;\n                    storage[temp21] = (memory[temp12 + 0x80:temp12 + 0x80 + 0x20] & 0x02 ** 0x80 - 0x01) * 0x0100 ** 0x10 | (storage[temp21] & ~(0x02 ** 0x80 - 0x01 * 0x0100 ** 0x10));\n                \n                    if (var4 <= 0x00) { goto label_1D49; }\n                    else { goto label_1D3F; }\n                }\n            } else {\n                var5 = storage[var2 + 0x01] & 0x02 ** 0x80 - 0x01;\n                var11 = 0x1aee;\n                var12 = var3;\n                var11 = func_2497(var12);\n            \n                if (!var11) {\n                label_1B96:\n                    var temp22 = storage[var2 + 0x01] / 0x0100000000000000000000000000000000 & 0x02 ** 0x80 - 0x01;\n                    storage[0x04] = temp22 + storage[0x04];\n                    var4 = var5 - temp22;\n                    var8 = temp22;\n                    goto label_1BCA;\n                } else {\n                    var11 = 0x1b0b;\n                    var12 = var5;\n                    var13 = storage[var2] / 0x02 ** 0xe0 & 0xffff;\n                    var11 = func_26B4(var12, var13);\n                    var temp23 = var11;\n                    var6 = temp23;\n                    var11 = 0x1b16;\n                    var12 = var6;\n                    var11 = func_26D1(var12);\n                    var7 = var11;\n                \n                    if (var1 >= var7) { goto label_1B96; }\n                \n                    var temp24 = memory[0x40:0x60];\n                    memory[temp24:temp24 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp24 + 0x04:temp24 + 0x04 + 0x20] = 0x20;\n                    memory[temp24 + 0x24:temp24 + 0x24 + 0x20] = 0x39;\n                    memory[temp24 + 0x44:temp24 + 0x44 + 0x20] = 0x6f766572626964207072696365206d757374206d61746368206d696e696d756d;\n                    memory[temp24 + 0x64:temp24 + 0x64 + 0x20] = 0x20707269636520696e6372656d656e7420637269746572696100000000000000;\n                    var temp25 = memory[0x40:0x60];\n                    revert(memory[temp25:temp25 + temp24 - temp25 + 0x84]);\n                }\n            }\n        } else {\n            var temp26 = memory[0x40:0x60];\n            memory[temp26:temp26 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp26 + 0x04:temp26 + 0x04 + 0x20] = 0x20;\n            memory[temp26 + 0x24:temp26 + 0x24 + 0x20] = 0x31;\n            memory[temp26 + 0x44:temp26 + 0x44 + 0x20] = 0x6f6666657220746f74616c2076616c7565206d7573742062652061626f766520;\n            memory[temp26 + 0x64:temp26 + 0x64 + 0x20] = 0x6d696e696d756d546f74616c56616c7565000000000000000000000000000000;\n            var temp27 = memory[0x40:0x60];\n            revert(memory[temp27:temp27 + temp26 - temp27 + 0x84]);\n        }\n    }\n    \n    function cooAddress() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_1DB2() returns (var r0) { return storage[0x0b]; }\n    \n    function func_1DB8(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x2d;\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp11 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp10;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = temp11;\n            var temp12 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp13 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp12;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = temp13;\n            var temp14 = memory[0x40:0x60];\n            revert(memory[temp14:temp14 + temp9 - temp14 + 0x84]);\n        } else if (storage[0x06] & 0xff) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n            memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x1f;\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp6;\n            memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = temp7;\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + temp5 - temp8 + 0x64]);\n        } else if (arg0 * 0x02 <= storage[0x08]) {\n            var temp0 = arg0;\n            storage[0x0a] = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xfa4a24dc8c85bb39a38146f43e5611e67c18d4df990b85be0fa17a8d9c7f3cc9]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x37;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x756e7375636365737366756c2076616c7565206d757374206265203c3d206861;\n            memory[temp3 + 0x64:temp3 + 0x64 + 0x20] = 0x6c66206f66206d696e696d756d546f74616c56616c7565000000000000000000;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x84]);\n        }\n    }\n    \n    function func_1F23() returns (var r0) { return storage[0x0a]; }\n    \n    function func_1F29(var arg0) returns (var arg0, var r1, var r2, var r3, var r4) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = storage[temp0 + 0x01];\n        arg0 = temp1 & 0xffffffffffffffff;\n        r1 = temp1 / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01;\n        r2 = temp1 / 0x02 ** 0xe0 & 0xffff;\n        var temp3 = 0x02 ** 0x80 - 0x01;\n        r3 = temp2 & temp3;\n        r4 = temp2 / 0x0100000000000000000000000000000000 & temp3;\n        return arg0, r1, r2, r3, r4;\n    }\n    \n    function func_1F92() returns (var r0) { return storage[0x09]; }\n    \n    function nonFungibleContract() returns (var r0) { return storage[0x0d] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_1FA7(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[0x06] & 0xff) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = keccak256(memory[0x00:0x40]);\n            var var2 = 0x202e;\n            var var3 = storage[var0] & 0xffffffffffffffff;\n            var2 = func_2491(var3);\n        \n            if (!var2) {\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;\n                memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x27;\n                memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = 0x6f6666657220746f2077697468647261772066756e64732066726f6d206d7573;\n                memory[temp10 + 0x64:temp10 + 0x64 + 0x20] = 0x7420657869737400000000000000000000000000000000000000000000000000;\n                var temp11 = memory[0x40:0x60];\n                revert(memory[temp11:temp11 + temp10 - temp11 + 0x84]);\n            } else if (msg.sender == storage[var0] / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01) {\n                var temp0 = storage[var0 + 0x01];\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0c;\n                var temp1 = keccak256(memory[0x00:0x40]);\n                storage[temp1] = storage[temp1] & ~(0x02 ** 0xf0 - 0x01);\n                storage[temp1 + 0x01] = 0x00;\n                var temp2 = memory[0x40:0x60];\n                var temp3 = temp0 & 0x02 ** 0x80 - 0x01;\n                var1 = temp3;\n                var temp4;\n                temp4, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!var1 * 0x08fc).value(var1)(memory[temp2:temp2 + 0x00]);\n                var2 = !temp4;\n            \n                if (!var2) {\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = arg0;\n                    memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = msg.sender;\n                    memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = var1;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + temp5 - temp6 + 0x60], [0x2014255827f37802573fb6164526f1d41d309fd57001e38c8f169ffb76117098]);\n                    return;\n                } else {\n                    var temp7 = returndata.length;\n                    memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n                memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x2f;\n                memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = 0x6f6e6c7920626964646572732063616e20776974686472617720746865697220;\n                memory[temp8 + 0x64:temp8 + 0x64 + 0x20] = 0x66756e647320696e20657363726f770000000000000000000000000000000000;\n                var temp9 = memory[0x40:0x60];\n                revert(memory[temp9:temp9 + temp8 - temp9 + 0x84]);\n            }\n        } else {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n            memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x1b;\n            memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = 0x636f6e7472616374206e6565647320746f2062652066726f7a656e0000000000;\n            var temp13 = memory[0x40:0x60];\n            revert(memory[temp13:temp13 + temp12 - temp13 + 0x64]);\n        }\n    }\n    \n    function cancelOffer(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n    \n        if (!(storage[0x06] & 0xff)) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = keccak256(memory[0x00:0x40]);\n            var1 = storage[var0] & 0xffffffffffffffff;\n            var var6 = 0x2261;\n            var var7 = var1;\n            var6 = func_2491(var7);\n        \n            if (var6) {\n                var6 = 0x22c0;\n                var7 = var1;\n                var6 = func_2497(var7);\n            \n                if (var6) {\n                    var2 = storage[var0] / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01;\n                \n                    if (var2 == msg.sender) {\n                        var temp0 = var0;\n                        var3 = storage[temp0 + 0x01] & 0x02 ** 0x80 - 0x01;\n                        var6 = 0x23fc;\n                        var7 = var3;\n                        var var8 = storage[temp0] / 0x02 ** 0xe0 & 0xffff;\n                        var6 = func_26B4(var7, var8);\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x0c;\n                        var temp1 = keccak256(memory[0x00:0x40]);\n                        storage[temp1] = storage[temp1] & ~(0x02 ** 0xf0 - 0x01);\n                        storage[temp1 + 0x01] = 0x00;\n                        var temp2 = var6;\n                        storage[0x04] = var3 - temp2 + storage[0x04];\n                        var4 = temp2;\n                        var5 = var3 - temp2;\n                        var6 = 0x2439;\n                        var7 = arg0;\n                        var8 = var2;\n                        var var9 = var4;\n                        func_249C(var7, var8, var9);\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = arg0;\n                        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                        memory[temp3 + 0x40:temp3 + 0x40 + 0x20] = var4;\n                        memory[temp3 + 0x60:temp3 + 0x60 + 0x20] = var5;\n                        var temp4 = memory[0x40:0x60];\n                        log(memory[temp4:temp4 + temp3 - temp4 + 0x80], [0x0f30ae9004015531e44539aa93fcbe6e33146abeeed21661204fa432da6bc075]);\n                        return;\n                    } else {\n                        var temp5 = memory[0x40:0x60];\n                        memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n                        memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x2e;\n                        memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = 0x63616c6c6572206d75737420626520626964646572206f66206f666665722074;\n                        memory[temp5 + 0x64:temp5 + 0x64 + 0x20] = 0x6f2062652063616e63656c6c6564000000000000000000000000000000000000;\n                        var temp6 = memory[0x40:0x60];\n                        revert(memory[temp6:temp6 + temp5 - temp6 + 0x84]);\n                    }\n                } else {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                    memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x23;\n                    memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x6f6666657220746f2063616e63656c206d757374206e6f742062652065787069;\n                    memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7265640000000000000000000000000000000000000000000000000000000000;\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + temp7 - temp8 + 0x84]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x1a;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x6f6666657220746f2063616e63656c206d757374206578697374000000000000;\n                var temp10 = memory[0x40:0x60];\n                revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n            }\n        } else {\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n            memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x1f;\n            var temp12 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp13 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp12;\n            memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = temp13;\n            var temp14 = memory[0x40:0x60];\n            revert(memory[temp14:temp14 + temp11 - temp14 + 0x64]);\n        }\n    }\n    \n    function func_2491(var arg0) returns (var r0) { return 0x00 < arg0; }\n    \n    function func_2497(var arg0) returns (var r0) { return block.timestamp < arg0; }\n    \n    function func_249C(var arg0, var arg1, var arg2) {\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg2;\n        var temp2;\n        temp2, memory[temp0:temp0 + 0x00] = address(arg1 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n    \n        if (temp2) { return; }\n    \n        var temp3 = arg2;\n        storage[0x05] = temp3 + storage[0x05];\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x60], [0x47b2b7bdacd5004b5f20c86ec07ecda11e5ac511d4ad9ed9ed2c5af4c42cb4bd]);\n    }\n    \n    function func_2523(var arg0) {\n        if (arg0 <= 0x2710) {\n            storage[0x0b] = arg0;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x25;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6f6666657220637574206d75737420626520612076616c696420626173697320;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x706f696e74000000000000000000000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_25A8(var arg0) {\n        if (arg0 <= 0x2710) {\n            storage[0x09] = arg0;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x33;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6d696e696d756d20707269636520696e6372656d656e74206d75737420626520;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x612076616c696420626173697320706f696e7400000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_262D(var arg0, var arg1) {\n        if (arg0 >= arg1 * 0x02) {\n            storage[0x08] = arg0;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6d696e696d756d2076616c7565206d757374206265203e3d2032202a20756e73;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x75636365737366756c2066656500000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_26B4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 + 0x2710;\n        var var2 = arg0 * 0x2710;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function func_26D1(var arg0) returns (var r0) { return ((storage[0x09] + 0x2710) * arg0) / 0x2710; }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_017C:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x776520646f6e27742061636365707420616e79207061796d656e747321000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x0519ce79) {\n                // Dispatch table entry for cfoAddress()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var var2 = cfoAddress();\n            \n            label_01E1:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x054f7d9c) {\n                // Dispatch table entry for frozen()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0212;\n                var2 = frozen();\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x0a0f8168) {\n                // Dispatch table entry for ceoAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var2 = ceoAddress();\n                goto label_01E1;\n            } else if (var0 == 0x14806a32) {\n                // Dispatch table entry for 0x14806a32 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_0572();\n            \n            label_0250:\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var2;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + temp6 - temp7 + 0x20];\n            } else if (var0 == 0x1c091a5f) {\n                // Dispatch table entry for 0x1c091a5f (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var temp8 = msg.data[0x04:0x24];\n                var2 = temp8 + 0x24;\n                var var3 = msg.data[temp8 + 0x04:temp8 + 0x04 + 0x20];\n                func_0578(var2, var3);\n                stop();\n            } else if (var0 == 0x1f747458) {\n                // Dispatch table entry for 0x1f747458 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                func_073F(var2);\n                stop();\n            } else if (var0 == 0x27d7874c) {\n                // Dispatch table entry for setCEO(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setCEO(var2);\n                stop();\n            } else if (var0 == 0x2ba73c15) {\n                // Dispatch table entry for setCOO(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setCOO(var2);\n                stop();\n            } else if (var0 == 0x2d5796ac) {\n                // Dispatch table entry for 0x2d5796ac (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_0A8A(var2);\n                stop();\n            } else if (var0 == 0x302890e1) {\n                // Dispatch table entry for 0x302890e1 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var2 = func_0B76();\n                goto label_01E1;\n            } else if (var0 == 0x3a3d55a0) {\n                // Dispatch table entry for 0x3a3d55a0 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_0B85(var2);\n                stop();\n            } else if (var0 == 0x45394dad) {\n                // Dispatch table entry for 0x45394dad (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                func_0C71();\n                stop();\n            } else if (var0 == 0x4ae772a4) {\n                // Dispatch table entry for 0x4ae772a4 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_0D53(var2);\n                stop();\n            } else if (var0 == 0x4e0a3379) {\n                // Dispatch table entry for setCFO(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setCFO(var2);\n                stop();\n            } else if (var0 == 0x4e8dc003) {\n                // Dispatch table entry for 0x4e8dc003 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                func_0F5B(var2, var3);\n                stop();\n            } else if (var0 == 0x56d282fc) {\n                // Dispatch table entry for 0x56d282fc (unknown)\n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_13D6(var2);\n                stop();\n            } else if (var0 == 0x5ac165af) {\n                // Dispatch table entry for 0x5ac165af (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_165F();\n                goto label_0250;\n            } else if (var0 == 0x62a5af3b) {\n                // Dispatch table entry for freeze()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                freeze();\n                stop();\n            } else if (var0 == 0x69250729) {\n                // Dispatch table entry for 0x69250729 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_1766();\n                goto label_0250;\n            } else if (var0 == 0x7ae86385) {\n                // Dispatch table entry for 0x7ae86385 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_176C();\n                goto label_0250;\n            } else if (var0 == 0x8c0ceea5) {\n                // Dispatch table entry for allocationStrategy()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                allocationStrategy(var2);\n                stop();\n            } else if (var0 == 0x930add29) {\n                // Dispatch table entry for 0x930add29 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                func_18E1();\n                stop();\n            } else if (var0 == 0xa269993d) {\n                // Dispatch table entry for createOffer(uint256)\n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                createOffer(var2);\n                stop();\n            } else if (var0 == 0xb047fb50) {\n                // Dispatch table entry for cooAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var2 = cooAddress();\n                goto label_01E1;\n            } else if (var0 == 0xbea12e00) {\n                // Dispatch table entry for 0xbea12e00 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_1DB2();\n                goto label_0250;\n            } else if (var0 == 0xbff2273e) {\n                // Dispatch table entry for 0xbff2273e (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_1DB8(var2);\n                stop();\n            } else if (var0 == 0xc65b98e7) {\n                // Dispatch table entry for 0xc65b98e7 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_1F23();\n                goto label_0250;\n            } else if (var0 == 0xd531fe2b) {\n                // Dispatch table entry for 0xd531fe2b (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a4;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var var6;\n                var2, var3, var4, var5, var6 = func_1F29(var2);\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2 & 0xffffffffffffffff;\n                memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = var4 & 0xffff;\n                var temp10 = 0x02 ** 0x80 - 0x01;\n                memory[temp9 + 0x60:temp9 + 0x60 + 0x20] = temp10 & var5;\n                memory[temp9 + 0x80:temp9 + 0x80 + 0x20] = temp10 & var6;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp9 - temp11 + 0xa0];\n            } else if (var0 == 0xdb341765) {\n                // Dispatch table entry for 0xdb341765 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_1F92();\n                goto label_0250;\n            } else if (var0 == 0xdd1b7a0f) {\n                // Dispatch table entry for nonFungibleContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var2 = nonFungibleContract();\n                goto label_01E1;\n            } else if (var0 == 0xe1302e2b) {\n                // Dispatch table entry for 0xe1302e2b (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_1FA7(var2);\n                stop();\n            } else if (var0 == 0xef706adf) {\n                // Dispatch table entry for cancelOffer(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                cancelOffer(var2);\n                stop();\n            } else { goto label_017C; }\n        }\n    }\n    \n    function cfoAddress() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function frozen() returns (var r0) { return storage[0x06] & 0xff; }\n    \n    function ceoAddress() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_0572() returns (var r0) { return storage[0x07]; }\n    \n    function func_0578(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n    \n        if (!(storage[0x06] & 0xff)) {\n            var0 = arg1;\n            var1 = 0x00;\n            var2 = var1;\n        \n            if (var2 >= var0) {\n            label_0720:\n            \n                if (var1 <= 0x00) { return; }\n            \n                storage[0x04] = var1 + storage[0x04];\n                return;\n            } else {\n            label_05EF:\n                var var9 = arg0;\n                var var10 = arg1;\n                var var11 = var2;\n            \n                if (var11 >= var10) { assert(); }\n            \n                memory[0x00:0x20] = msg.data[var11 * 0x20 + var9:var11 * 0x20 + var9 + 0x20];\n                memory[0x20:0x40] = 0x0c;\n                var3 = msg.data[var11 * 0x20 + var9:var11 * 0x20 + var9 + 0x20];\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = storage[var4] & 0xffffffffffffffff;\n                var9 = 0x0630;\n                var10 = var5;\n                var9 = func_2491(var10);\n            \n                if (!var9) { goto label_0715; }\n            \n                var9 = 0x0644;\n                var10 = var5;\n                var9 = func_2497(var10);\n            \n                if (var9) { goto label_0715; }\n            \n                var temp0 = var4;\n                var temp1 = storage[temp0];\n                var temp2 = storage[temp0 + 0x01];\n                memory[0x00:0x20] = var3;\n                memory[0x20:0x40] = 0x0c;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] & ~(0x02 ** 0xf0 - 0x01);\n                storage[temp3 + 0x01] = 0x00;\n                var temp4 = 0x02 ** 0x80 - 0x01;\n                var temp5 = temp4 & temp2 / 0x0100000000000000000000000000000000;\n                var1 = temp5 + var1;\n                var7 = temp5;\n                var6 = temp1 / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01;\n                var8 = (temp4 & temp2) - var7;\n                var9 = 0x06c5;\n                var10 = var3;\n                var11 = var6;\n                var var12 = var8;\n                func_249C(var10, var11, var12);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var3;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var6 & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = var8;\n                memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = var7;\n                var temp7 = memory[0x40:0x60];\n                log(memory[temp7:temp7 + temp6 - temp7 + 0x80], [0xd876ee5dd9082a3ac4fe7be4799528f1d5f3545cee1516f2821d0f8ecc9d629c]);\n            \n            label_0715:\n                var8 = var8;\n                var2 = var2 + 0x01;\n            \n                if (var2 >= var0) { goto label_0720; }\n                else { goto label_05EF; }\n            }\n        } else {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x1f;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp8 - temp11 + 0x64]);\n        }\n    }\n    \n    function func_073F(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x2d;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2703:0x2723];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp5;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = temp6;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp2 - temp7 + 0x84]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            storage[0x03] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6e6577206c6f737420616e6420666f756e642063616e6e6f7420626520746865;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x207a65726f2d6163636f756e7400000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function setCEO(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x2d;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2703:0x2723];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp5;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = temp6;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp2 - temp7 + 0x84]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2a;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6e65772043454f20616464726573732063616e6e6f7420626520746865207a65;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x726f2d6163636f756e7400000000000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function setCOO(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x2d;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2703:0x2723];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp5;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = temp6;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp2 - temp7 + 0x84]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            storage[0x01] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2a;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6e657720434f4f20616464726573732063616e6e6f7420626520746865207a65;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x726f2d6163636f756e7400000000000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_0A8A(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x2d;\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp8;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp6 - temp11 + 0x84]);\n        } else if (!(storage[0x06] & 0xff)) {\n            var var0 = 0x0b40;\n            var var1 = arg0;\n            func_2523(var1);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = arg0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x4a13d5076f950a8eb96f30e1f814eecade18fcebc5042f3ce669cea283edaefd]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x1f;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + temp2 - temp5 + 0x64]);\n        }\n    }\n    \n    function func_0B76() returns (var r0) { return storage[0x03] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_0B85(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x2d;\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp8;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp6 - temp11 + 0x84]);\n        } else if (!(storage[0x06] & 0xff)) {\n            var var0 = 0x0c3b;\n            var var1 = arg0;\n            func_25A8(var1);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = arg0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x2fa1029ea9a56473df3e068ba4dc7f4343efacb8a54b808f595f78d1d62f0035]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x1f;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + temp2 - temp5 + 0x64]);\n        }\n    }\n    \n    function func_0C71() {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x03] & 0x02 ** 0xa0 - 0x01;\n    \n        if (!var1) {\n            if (var1) {\n            label_0D09:\n                var temp0 = storage[0x05];\n                storage[0x05] = 0x00;\n                var temp1 = memory[0x40:0x60];\n                var0 = temp0;\n                var temp2;\n                temp2, memory[temp1:temp1 + 0x00] = address(storage[0x03] & 0x02 ** 0xa0 - 0x01).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + 0x00]);\n                var1 = !temp2;\n            \n                if (!var1) { return; }\n            \n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n            label_0C94:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x36;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6f6e6c79204c6f7374416e64466f756e6420697320616c6c6f77656420746f20;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x706572666f726d2074686973206f7065726174696f6e00000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x84]);\n            }\n        } else if (msg.sender) { goto label_0D09; }\n        else { goto label_0C94; }\n    }\n    \n    function func_0D53(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x2d;\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp8;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp6 - temp11 + 0x84]);\n        } else if (!(storage[0x06] & 0xff)) {\n            var var0 = 0x0e0c;\n            var var1 = arg0;\n            var var2 = storage[0x0a];\n            func_262D(var1, var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = arg0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x4193e3b6c8a874196e0068cb9b96b2aaef71a2d90fc46254c4508e1003996bd5]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x1f;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + temp2 - temp5 + 0x64]);\n        }\n    }\n    \n    function setCFO(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x2d;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2703:0x2723];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp5;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = temp6;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp2 - temp7 + 0x84]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            storage[0x02] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2a;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6e65772043464f20616464726573732063616e6e6f7420626520746865207a65;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x726f2d6163636f756e7400000000000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_0F5B(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n    \n        if (!(storage[0x06] & 0xff)) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = keccak256(memory[0x00:0x40]);\n            var1 = storage[var0] & 0xffffffffffffffff;\n            var var7 = 0x0fdb;\n            var var8 = var1;\n            var7 = func_2491(var8);\n        \n            if (var7) {\n                var7 = 0x103a;\n                var8 = var1;\n                var7 = func_2497(var8);\n            \n                if (var7) {\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = 0x6352211e00000000000000000000000000000000000000000000000000000000;\n                    memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = arg0;\n                    var7 = storage[0x0d] & 0x02 ** 0xa0 - 0x01;\n                    var8 = 0x6352211e;\n                    var var9 = temp0 + 0x24;\n                    var var10 = 0x20;\n                    var var11 = memory[0x40:0x60];\n                    var var12 = temp0 - var11 + 0x24;\n                    var var13 = var11;\n                    var var14 = 0x00;\n                    var var15 = var7;\n                    var var16 = !address(var15).code.length;\n                \n                    if (var16) { revert(memory[0x00:0x00]); }\n                \n                    var temp1;\n                    temp1, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas).value(var14)(memory[var13:var13 + var12]);\n                    var10 = !temp1;\n                \n                    if (!var10) {\n                        var7 = memory[0x40:0x60];\n                        var8 = returndata.length;\n                    \n                        if (var8 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = memory[var7:var7 + 0x20];\n                        var7 = msg.sender == storage[0x01] & 0x02 ** 0xa0 - 0x01;\n                    \n                        if (var7) {\n                            if (var7) {\n                            label_11E8:\n                                var temp2 = var0;\n                                var3 = storage[temp2 + 0x01] & 0x02 ** 0x80 - 0x01;\n                                var7 = 0x1212;\n                                var8 = var3;\n                                var9 = storage[temp2] / 0x02 ** 0xe0 & 0xffff;\n                                var7 = func_26B4(var8, var9);\n                                var4 = var7;\n                            \n                                if (var4 >= arg1 & 0x02 ** 0x80 - 0x01) {\n                                    var temp3 = storage[var0];\n                                    var temp4 = arg0;\n                                    memory[0x00:0x20] = temp4;\n                                    memory[0x20:0x40] = 0x0c;\n                                    var temp5 = keccak256(memory[0x00:0x40]);\n                                    storage[temp5] = storage[temp5] & ~(0x02 ** 0xf0 - 0x01);\n                                    storage[temp5 + 0x01] = 0x00;\n                                    var temp6 = memory[0x40:0x60];\n                                    memory[temp6:temp6 + 0x20] = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\n                                    var temp7 = 0x02 ** 0xa0 - 0x01;\n                                    memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = temp7 & var2;\n                                    memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = temp7 & temp3 / 0x010000000000000000;\n                                    memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp4;\n                                    var5 = temp7 & temp3 / 0x010000000000000000;\n                                    var7 = temp7 & storage[0x0d];\n                                    var8 = 0x23b872dd;\n                                    var9 = temp6 + 0x64;\n                                    var11 = memory[0x40:0x60];\n                                    var10 = 0x00;\n                                    var12 = temp6 - var11 + 0x64;\n                                    var13 = var11;\n                                    var14 = var10;\n                                    var15 = var7;\n                                    var16 = !address(var15).code.length;\n                                \n                                    if (var16) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp8;\n                                    temp8, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas).value(var14)(memory[var13:var13 + var12]);\n                                    var10 = !temp8;\n                                \n                                    if (!var10) {\n                                        storage[0x04] = var3 - var4 + storage[0x04];\n                                        var6 = var3 - var4;\n                                        var7 = 0x1374;\n                                        var8 = arg0;\n                                        var9 = var2;\n                                        var10 = var4;\n                                        func_249C(var8, var9, var10);\n                                        var temp9 = memory[0x40:0x60];\n                                        memory[temp9:temp9 + 0x20] = arg0;\n                                        var temp10 = 0x02 ** 0xa0 - 0x01;\n                                        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = var5 & temp10;\n                                        memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = var2 & temp10;\n                                        memory[temp9 + 0x60:temp9 + 0x60 + 0x20] = var4;\n                                        memory[temp9 + 0x80:temp9 + 0x80 + 0x20] = var6;\n                                        var temp11 = memory[0x40:0x60];\n                                        log(memory[temp11:temp11 + temp9 - temp11 + 0xa0], [0x9accbcf984c4cd67a675ee4d38143974e1fa62aa95da283bd4ca645e408ec283]);\n                                        return;\n                                    } else {\n                                        var temp12 = returndata.length;\n                                        memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                                        revert(memory[0x00:0x00 + returndata.length]);\n                                    }\n                                } else {\n                                    var temp13 = memory[0x40:0x60];\n                                    memory[temp13:temp13 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                    memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n                                    memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x2c;\n                                    memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x63616e6e6f742066756c66696c6c206f6666657220e28093206f666665722070;\n                                    memory[temp13 + 0x64:temp13 + 0x64 + 0x20] = 0x7269636520746f6f206c6f770000000000000000000000000000000000000000;\n                                    var temp14 = memory[0x40:0x60];\n                                    revert(memory[temp14:temp14 + temp13 - temp14 + 0x84]);\n                                }\n                            } else {\n                            label_1173:\n                                var temp15 = memory[0x40:0x60];\n                                memory[temp15:temp15 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n                                memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x27;\n                                memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x6f6e6c7920434f4f206f7220746865206f776e65722063616e2066756c66696c;\n                                memory[temp15 + 0x64:temp15 + 0x64 + 0x20] = 0x6c206f7264657200000000000000000000000000000000000000000000000000;\n                                var temp16 = memory[0x40:0x60];\n                                revert(memory[temp16:temp16 + temp15 - temp16 + 0x84]);\n                            }\n                        } else if (var2 & 0x02 ** 0xa0 - 0x01 == msg.sender) { goto label_11E8; }\n                        else { goto label_1173; }\n                    } else {\n                        var temp17 = returndata.length;\n                        memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp18 = memory[0x40:0x60];\n                    memory[temp18:temp18 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = 0x20;\n                    memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = 0x24;\n                    memory[temp18 + 0x44:temp18 + 0x44 + 0x20] = 0x6f6666657220746f2066756c66696c6c206d757374206e6f7420626520657870;\n                    memory[temp18 + 0x64:temp18 + 0x64 + 0x20] = 0x6972656400000000000000000000000000000000000000000000000000000000;\n                    var temp19 = memory[0x40:0x60];\n                    revert(memory[temp19:temp19 + temp18 - temp19 + 0x84]);\n                }\n            } else {\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n                memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x1b;\n                memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x6f6666657220746f2066756c66696c6c206d7573742065786973740000000000;\n                var temp21 = memory[0x40:0x60];\n                revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n            }\n        } else {\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp22 + 0x04:temp22 + 0x04 + 0x20] = 0x20;\n            memory[temp22 + 0x24:temp22 + 0x24 + 0x20] = 0x1f;\n            var temp23 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp24 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp23;\n            memory[temp22 + 0x44:temp22 + 0x44 + 0x20] = temp24;\n            var temp25 = memory[0x40:0x60];\n            revert(memory[temp25:temp25 + temp22 - temp25 + 0x64]);\n        }\n    }\n    \n    function func_13D6(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (!(storage[0x06] & 0xff)) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = keccak256(memory[0x00:0x40]);\n            var1 = storage[var0] & 0xffffffffffffffff;\n            var var3 = 0x144e;\n            var var4 = var1;\n            var3 = func_2491(var4);\n        \n            if (var3) {\n                var3 = 0x14ad;\n                var4 = var1;\n                var3 = func_2497(var4);\n            \n                if (!var3) {\n                    var temp13 = memory[0x40:0x60];\n                    memory[temp13:temp13 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n                    memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x23;\n                    memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x6f6666657220746f20757064617465206d757374206e6f742062652065787069;\n                    memory[temp13 + 0x64:temp13 + 0x64 + 0x20] = 0x7265640000000000000000000000000000000000000000000000000000000000;\n                    var temp14 = memory[0x40:0x60];\n                    revert(memory[temp14:temp14 + temp13 - temp14 + 0x84]);\n                } else if (msg.sender == storage[var0] / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01) {\n                    var2 = block.timestamp + storage[0x07];\n                \n                    if (msg.value <= 0x00) {\n                        var temp0 = var0;\n                        var temp1 = var2;\n                        storage[temp0] = (temp1 & 0xffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffff);\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = arg0;\n                        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = msg.sender;\n                        memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = temp1;\n                        memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = msg.value;\n                        var temp3 = memory[0x40:0x60];\n                        log(memory[temp3:temp3 + temp2 - temp3 + 0x80], [0x56cb95d5e0f3ba4459f610fef3ba603635cef803d945e97c316cdeb392903991]);\n                        return;\n                    } else {\n                        var temp4 = var0;\n                        var temp5 = temp4 + 0x01;\n                        var temp6 = storage[temp5];\n                        var temp7 = 0x02 ** 0x80 - 0x01;\n                        storage[temp5] = (temp6 & ~0xffffffffffffffffffffffffffffffff) | (msg.value + (temp6 & temp7) & temp7);\n                        var temp8 = var2;\n                        storage[temp4] = (temp8 & 0xffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffff);\n                        var temp9 = memory[0x40:0x60];\n                        memory[temp9:temp9 + 0x20] = arg0;\n                        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = msg.sender;\n                        memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = temp8;\n                        memory[temp9 + 0x60:temp9 + 0x60 + 0x20] = msg.value;\n                        var temp10 = memory[0x40:0x60];\n                        log(memory[temp10:temp10 + temp9 - temp10 + 0x80], [0x56cb95d5e0f3ba4459f610fef3ba603635cef803d945e97c316cdeb392903991]);\n                        return;\n                    }\n                } else {\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n                    memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x2c;\n                    memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = 0x63616c6c6572206d75737420626520626964646572206f66206f666665722074;\n                    memory[temp11 + 0x64:temp11 + 0x64 + 0x20] = 0x6f20626520757064617465640000000000000000000000000000000000000000;\n                    var temp12 = memory[0x40:0x60];\n                    revert(memory[temp12:temp12 + temp11 - temp12 + 0x84]);\n                }\n            } else {\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n                memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x1a;\n                memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x6f6666657220746f20757064617465206d757374206578697374000000000000;\n                var temp16 = memory[0x40:0x60];\n                revert(memory[temp16:temp16 + temp15 - temp16 + 0x64]);\n            }\n        } else {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x1f;\n            var temp18 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp19 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp18;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = temp19;\n            var temp20 = memory[0x40:0x60];\n            revert(memory[temp20:temp20 + temp17 - temp20 + 0x64]);\n        }\n    }\n    \n    function func_165F() returns (var r0) { return storage[0x04]; }\n    \n    function freeze() {\n        var var0 = !!msg.sender;\n    \n        if (!msg.sender) {\n        label_1692:\n        \n            if (!var0) {\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x34;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6f6e6c792043454f206f722043464f20697320616c6c6f77656420746f207065;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x72666f726d2074686973206f7065726174696f6e000000000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x84]);\n            } else if (!(storage[0x06] & 0xff)) {\n                storage[0x06] = (storage[0x06] & ~0xff) | 0x01;\n                return;\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1f;\n                var temp1 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2743:0x2763];\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp1;\n                memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp2;\n                var temp3 = memory[0x40:0x60];\n                revert(memory[temp3:temp3 + temp0 - temp3 + 0x64]);\n            }\n        } else {\n            var0 = msg.sender == storage[0x00] & 0x02 ** 0xa0 - 0x01;\n        \n            if (var0) { goto label_1692; }\n        \n            var0 = msg.sender == storage[0x02] & 0x02 ** 0xa0 - 0x01;\n            goto label_1692;\n        }\n    }\n    \n    function func_1766() returns (var r0) { return storage[0x08]; }\n    \n    function func_176C() returns (var r0) { return storage[0x05]; }\n    \n    function allocationStrategy(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;\n            memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x2d;\n            var temp11 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp12 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp11;\n            memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = temp12;\n            var temp13 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp14 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp13;\n            memory[temp10 + 0x64:temp10 + 0x64 + 0x20] = temp14;\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + temp10 - temp15 + 0x84]);\n        } else if (!(storage[0x06] & 0xff)) {\n            var temp0 = arg0;\n        \n            if (temp0 == temp0 & 0xffffffffffffffff) {\n                var temp1 = arg0;\n                storage[0x07] = temp1;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = temp1;\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + temp2 - temp3 + 0x20], [0x66be647974b8677ccbdb171c9fd037f0f64af878ddc5b7f0923da6a32173ae47]);\n                return;\n            } else {\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x2b;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6e657720676c6f62616c4475726174696f6e2076616c7565206d757374206e6f;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x7420756e646572666c6f77000000000000000000000000000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x84]);\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x1f;\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp8;\n            var temp9 = memory[0x40:0x60];\n            revert(memory[temp9:temp9 + temp6 - temp9 + 0x64]);\n        }\n    }\n    \n    function func_18E1() {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x02] & 0x02 ** 0xa0 - 0x01;\n    \n        if (!var1) {\n            if (var1) {\n            label_1967:\n                var temp0 = storage[0x04];\n                storage[0x04] = 0x00;\n                var temp1 = memory[0x40:0x60];\n                var0 = temp0;\n                var temp2;\n                temp2, memory[temp1:temp1 + 0x00] = address(storage[0x02] & 0x02 ** 0xa0 - 0x01).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + 0x00]);\n                var1 = !temp2;\n            \n                if (!var1) { return; }\n            \n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n            label_1904:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x2d;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6f6e6c792043464f20697320616c6c6f77656420746f20706572666f726d2074;\n                var temp5 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x26e3:0x2703];\n                var temp6 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp5;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = temp6;\n                var temp7 = memory[0x40:0x60];\n                revert(memory[temp7:temp7 + temp4 - temp7 + 0x84]);\n            }\n        } else if (msg.sender) { goto label_1967; }\n        else { goto label_1904; }\n    }\n    \n    function createOffer(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n    \n        if (storage[0x06] & 0xff) {\n            var temp28 = memory[0x40:0x60];\n            memory[temp28:temp28 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp28 + 0x04:temp28 + 0x04 + 0x20] = 0x20;\n            memory[temp28 + 0x24:temp28 + 0x24 + 0x20] = 0x1f;\n            var temp29 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp30 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp29;\n            memory[temp28 + 0x44:temp28 + 0x44 + 0x20] = temp30;\n            var temp31 = memory[0x40:0x60];\n            revert(memory[temp31:temp31 + temp28 - temp31 + 0x64]);\n        } else if (msg.value >= storage[0x08]) {\n            var0 = storage[0x0b];\n            var var11 = 0x1aa2;\n            var var12 = msg.value;\n            var var13 = var0;\n            var11 = func_26B4(var12, var13);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var1 = var11;\n            var2 = keccak256(memory[0x00:0x40]);\n            var3 = storage[var2] & 0xffffffffffffffff;\n            var4 = 0x00;\n            var11 = 0x1ad0;\n            var12 = var3;\n            var11 = func_2491(var12);\n        \n            if (!var11) {\n            label_1BCA:\n                var9 = block.timestamp + storage[0x07];\n            \n                if (var4 <= 0x00) {\n                    var temp0 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp0 + 0xa0;\n                    memory[temp0:temp0 + 0x20] = var9 & 0xffffffffffffffff;\n                    var temp1 = temp0 + 0x20;\n                    memory[temp1:temp1 + 0x20] = msg.sender;\n                    var temp2 = temp1 + 0x20;\n                    memory[temp2:temp2 + 0x20] = var0 & 0xffff;\n                    var temp3 = temp2 + 0x20;\n                    memory[temp3:temp3 + 0x20] = msg.value & 0x02 ** 0x80 - 0x01;\n                    memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = storage[0x0a] & 0x02 ** 0x80 - 0x01;\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0c;\n                    var temp4 = keccak256(memory[0x00:0x40]);\n                    var temp5 = temp4;\n                    storage[temp5] = (memory[temp0:temp0 + 0x20] & 0xffffffffffffffff) | (storage[temp5] & ~0xffffffffffffffff);\n                    var temp6 = temp4;\n                    storage[temp6] = (memory[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01) * 0x0100 ** 0x08 | (storage[temp6] & ~(0x02 ** 0xa0 - 0x01 * 0x0100 ** 0x08));\n                    var temp7 = temp4;\n                    storage[temp7] = (memory[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffff) * 0x0100 ** 0x1c | (storage[temp7] & ~(0xffff * 0x0100 ** 0x1c));\n                    var temp8 = temp4 + 0x01;\n                    storage[temp8] = (memory[temp0 + 0x60:temp0 + 0x60 + 0x20] & 0x02 ** 0x80 - 0x01) | (storage[temp8] & ~(0x02 ** 0x80 - 0x01));\n                    var temp9 = temp4 + 0x01;\n                    storage[temp9] = (memory[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0x02 ** 0x80 - 0x01) * 0x0100 ** 0x10 | (storage[temp9] & ~(0x02 ** 0x80 - 0x01 * 0x0100 ** 0x10));\n                \n                    if (var4 <= 0x00) {\n                    label_1D49:\n                        var temp10 = memory[0x40:0x60];\n                        memory[temp10:temp10 + 0x20] = arg0;\n                        memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = msg.sender;\n                        memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = var9;\n                        memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = msg.value;\n                        memory[temp10 + 0x80:temp10 + 0x80 + 0x20] = var1;\n                        var temp11 = memory[0x40:0x60];\n                        log(memory[temp11:temp11 + temp10 - temp11 + 0xa0], [0x05a7f246d4cdcfed1a85bd6331d1638fa8d47fffd48ede9a22f93d06641f309c]);\n                        return;\n                    } else {\n                    label_1D3F:\n                        var11 = 0x1d49;\n                        var12 = arg0;\n                        var13 = var10;\n                        var var14 = var4;\n                        func_249C(var12, var13, var14);\n                        goto label_1D49;\n                    }\n                } else {\n                    var10 = storage[var2] / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01;\n                    var temp12 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp12 + 0xa0;\n                    memory[temp12:temp12 + 0x20] = var9 & 0xffffffffffffffff;\n                    var temp13 = temp12 + 0x20;\n                    memory[temp13:temp13 + 0x20] = msg.sender;\n                    var temp14 = temp13 + 0x20;\n                    memory[temp14:temp14 + 0x20] = var0 & 0xffff;\n                    var temp15 = temp14 + 0x20;\n                    memory[temp15:temp15 + 0x20] = msg.value & 0x02 ** 0x80 - 0x01;\n                    memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = storage[0x0a] & 0x02 ** 0x80 - 0x01;\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0c;\n                    var temp16 = keccak256(memory[0x00:0x40]);\n                    var temp17 = temp16;\n                    storage[temp17] = (memory[temp12:temp12 + 0x20] & 0xffffffffffffffff) | (storage[temp17] & ~0xffffffffffffffff);\n                    var temp18 = temp16;\n                    storage[temp18] = (memory[temp12 + 0x20:temp12 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01) * 0x0100 ** 0x08 | (storage[temp18] & ~(0x02 ** 0xa0 - 0x01 * 0x0100 ** 0x08));\n                    var temp19 = temp16;\n                    storage[temp19] = (memory[temp12 + 0x40:temp12 + 0x40 + 0x20] & 0xffff) * 0x0100 ** 0x1c | (storage[temp19] & ~(0xffff * 0x0100 ** 0x1c));\n                    var temp20 = temp16 + 0x01;\n                    storage[temp20] = (memory[temp12 + 0x60:temp12 + 0x60 + 0x20] & 0x02 ** 0x80 - 0x01) | (storage[temp20] & ~(0x02 ** 0x80 - 0x01));\n                    var temp21 = temp16 + 0x01;\n                    storage[temp21] = (memory[temp12 + 0x80:temp12 + 0x80 + 0x20] & 0x02 ** 0x80 - 0x01) * 0x0100 ** 0x10 | (storage[temp21] & ~(0x02 ** 0x80 - 0x01 * 0x0100 ** 0x10));\n                \n                    if (var4 <= 0x00) { goto label_1D49; }\n                    else { goto label_1D3F; }\n                }\n            } else {\n                var5 = storage[var2 + 0x01] & 0x02 ** 0x80 - 0x01;\n                var11 = 0x1aee;\n                var12 = var3;\n                var11 = func_2497(var12);\n            \n                if (!var11) {\n                label_1B96:\n                    var temp22 = storage[var2 + 0x01] / 0x0100000000000000000000000000000000 & 0x02 ** 0x80 - 0x01;\n                    storage[0x04] = temp22 + storage[0x04];\n                    var4 = var5 - temp22;\n                    var8 = temp22;\n                    goto label_1BCA;\n                } else {\n                    var11 = 0x1b0b;\n                    var12 = var5;\n                    var13 = storage[var2] / 0x02 ** 0xe0 & 0xffff;\n                    var11 = func_26B4(var12, var13);\n                    var temp23 = var11;\n                    var6 = temp23;\n                    var11 = 0x1b16;\n                    var12 = var6;\n                    var11 = func_26D1(var12);\n                    var7 = var11;\n                \n                    if (var1 >= var7) { goto label_1B96; }\n                \n                    var temp24 = memory[0x40:0x60];\n                    memory[temp24:temp24 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp24 + 0x04:temp24 + 0x04 + 0x20] = 0x20;\n                    memory[temp24 + 0x24:temp24 + 0x24 + 0x20] = 0x39;\n                    memory[temp24 + 0x44:temp24 + 0x44 + 0x20] = 0x6f766572626964207072696365206d757374206d61746368206d696e696d756d;\n                    memory[temp24 + 0x64:temp24 + 0x64 + 0x20] = 0x20707269636520696e6372656d656e7420637269746572696100000000000000;\n                    var temp25 = memory[0x40:0x60];\n                    revert(memory[temp25:temp25 + temp24 - temp25 + 0x84]);\n                }\n            }\n        } else {\n            var temp26 = memory[0x40:0x60];\n            memory[temp26:temp26 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp26 + 0x04:temp26 + 0x04 + 0x20] = 0x20;\n            memory[temp26 + 0x24:temp26 + 0x24 + 0x20] = 0x31;\n            memory[temp26 + 0x44:temp26 + 0x44 + 0x20] = 0x6f6666657220746f74616c2076616c7565206d7573742062652061626f766520;\n            memory[temp26 + 0x64:temp26 + 0x64 + 0x20] = 0x6d696e696d756d546f74616c56616c7565000000000000000000000000000000;\n            var temp27 = memory[0x40:0x60];\n            revert(memory[temp27:temp27 + temp26 - temp27 + 0x84]);\n        }\n    }\n    \n    function cooAddress() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_1DB2() returns (var r0) { return storage[0x0b]; }\n    \n    function func_1DB8(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x2d;\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp11 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp10;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = temp11;\n            var temp12 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp13 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp12;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = temp13;\n            var temp14 = memory[0x40:0x60];\n            revert(memory[temp14:temp14 + temp9 - temp14 + 0x84]);\n        } else if (storage[0x06] & 0xff) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n            memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x1f;\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp6;\n            memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = temp7;\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + temp5 - temp8 + 0x64]);\n        } else if (arg0 * 0x02 <= storage[0x08]) {\n            var temp0 = arg0;\n            storage[0x0a] = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xfa4a24dc8c85bb39a38146f43e5611e67c18d4df990b85be0fa17a8d9c7f3cc9]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x37;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x756e7375636365737366756c2076616c7565206d757374206265203c3d206861;\n            memory[temp3 + 0x64:temp3 + 0x64 + 0x20] = 0x6c66206f66206d696e696d756d546f74616c56616c7565000000000000000000;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x84]);\n        }\n    }\n    \n    function func_1F23() returns (var r0) { return storage[0x0a]; }\n    \n    function func_1F29(var arg0) returns (var arg0, var r1, var r2, var r3, var r4) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = storage[temp0 + 0x01];\n        arg0 = temp1 & 0xffffffffffffffff;\n        r1 = temp1 / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01;\n        r2 = temp1 / 0x02 ** 0xe0 & 0xffff;\n        var temp3 = 0x02 ** 0x80 - 0x01;\n        r3 = temp2 & temp3;\n        r4 = temp2 / 0x0100000000000000000000000000000000 & temp3;\n        return arg0, r1, r2, r3, r4;\n    }\n    \n    function func_1F92() returns (var r0) { return storage[0x09]; }\n    \n    function nonFungibleContract() returns (var r0) { return storage[0x0d] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_1FA7(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[0x06] & 0xff) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = keccak256(memory[0x00:0x40]);\n            var var2 = 0x202e;\n            var var3 = storage[var0] & 0xffffffffffffffff;\n            var2 = func_2491(var3);\n        \n            if (!var2) {\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;\n                memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x27;\n                memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = 0x6f6666657220746f2077697468647261772066756e64732066726f6d206d7573;\n                memory[temp10 + 0x64:temp10 + 0x64 + 0x20] = 0x7420657869737400000000000000000000000000000000000000000000000000;\n                var temp11 = memory[0x40:0x60];\n                revert(memory[temp11:temp11 + temp10 - temp11 + 0x84]);\n            } else if (msg.sender == storage[var0] / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01) {\n                var temp0 = storage[var0 + 0x01];\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0c;\n                var temp1 = keccak256(memory[0x00:0x40]);\n                storage[temp1] = storage[temp1] & ~(0x02 ** 0xf0 - 0x01);\n                storage[temp1 + 0x01] = 0x00;\n                var temp2 = memory[0x40:0x60];\n                var temp3 = temp0 & 0x02 ** 0x80 - 0x01;\n                var1 = temp3;\n                var temp4;\n                temp4, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!var1 * 0x08fc).value(var1)(memory[temp2:temp2 + 0x00]);\n                var2 = !temp4;\n            \n                if (!var2) {\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = arg0;\n                    memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = msg.sender;\n                    memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = var1;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + temp5 - temp6 + 0x60], [0x2014255827f37802573fb6164526f1d41d309fd57001e38c8f169ffb76117098]);\n                    return;\n                } else {\n                    var temp7 = returndata.length;\n                    memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n                memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x2f;\n                memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = 0x6f6e6c7920626964646572732063616e20776974686472617720746865697220;\n                memory[temp8 + 0x64:temp8 + 0x64 + 0x20] = 0x66756e647320696e20657363726f770000000000000000000000000000000000;\n                var temp9 = memory[0x40:0x60];\n                revert(memory[temp9:temp9 + temp8 - temp9 + 0x84]);\n            }\n        } else {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n            memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x1b;\n            memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = 0x636f6e7472616374206e6565647320746f2062652066726f7a656e0000000000;\n            var temp13 = memory[0x40:0x60];\n            revert(memory[temp13:temp13 + temp12 - temp13 + 0x64]);\n        }\n    }\n    \n    function cancelOffer(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n    \n        if (!(storage[0x06] & 0xff)) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = keccak256(memory[0x00:0x40]);\n            var1 = storage[var0] & 0xffffffffffffffff;\n            var var6 = 0x2261;\n            var var7 = var1;\n            var6 = func_2491(var7);\n        \n            if (var6) {\n                var6 = 0x22c0;\n                var7 = var1;\n                var6 = func_2497(var7);\n            \n                if (var6) {\n                    var2 = storage[var0] / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01;\n                \n                    if (var2 == msg.sender) {\n                        var temp0 = var0;\n                        var3 = storage[temp0 + 0x01] & 0x02 ** 0x80 - 0x01;\n                        var6 = 0x23fc;\n                        var7 = var3;\n                        var var8 = storage[temp0] / 0x02 ** 0xe0 & 0xffff;\n                        var6 = func_26B4(var7, var8);\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x0c;\n                        var temp1 = keccak256(memory[0x00:0x40]);\n                        storage[temp1] = storage[temp1] & ~(0x02 ** 0xf0 - 0x01);\n                        storage[temp1 + 0x01] = 0x00;\n                        var temp2 = var6;\n                        storage[0x04] = var3 - temp2 + storage[0x04];\n                        var4 = temp2;\n                        var5 = var3 - temp2;\n                        var6 = 0x2439;\n                        var7 = arg0;\n                        var8 = var2;\n                        var var9 = var4;\n                        func_249C(var7, var8, var9);\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = arg0;\n                        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                        memory[temp3 + 0x40:temp3 + 0x40 + 0x20] = var4;\n                        memory[temp3 + 0x60:temp3 + 0x60 + 0x20] = var5;\n                        var temp4 = memory[0x40:0x60];\n                        log(memory[temp4:temp4 + temp3 - temp4 + 0x80], [0x0f30ae9004015531e44539aa93fcbe6e33146abeeed21661204fa432da6bc075]);\n                        return;\n                    } else {\n                        var temp5 = memory[0x40:0x60];\n                        memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n                        memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x2e;\n                        memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = 0x63616c6c6572206d75737420626520626964646572206f66206f666665722074;\n                        memory[temp5 + 0x64:temp5 + 0x64 + 0x20] = 0x6f2062652063616e63656c6c6564000000000000000000000000000000000000;\n                        var temp6 = memory[0x40:0x60];\n                        revert(memory[temp6:temp6 + temp5 - temp6 + 0x84]);\n                    }\n                } else {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                    memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x23;\n                    memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x6f6666657220746f2063616e63656c206d757374206e6f742062652065787069;\n                    memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7265640000000000000000000000000000000000000000000000000000000000;\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + temp7 - temp8 + 0x84]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x1a;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x6f6666657220746f2063616e63656c206d757374206578697374000000000000;\n                var temp10 = memory[0x40:0x60];\n                revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n            }\n        } else {\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n            memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x1f;\n            var temp12 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp13 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp12;\n            memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = temp13;\n            var temp14 = memory[0x40:0x60];\n            revert(memory[temp14:temp14 + temp11 - temp14 + 0x64]);\n        }\n    }\n    \n    function func_2491(var arg0) returns (var r0) { return 0x00 < arg0; }\n    \n    function func_2497(var arg0) returns (var r0) { return block.timestamp < arg0; }\n    \n    function func_249C(var arg0, var arg1, var arg2) {\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg2;\n        var temp2;\n        temp2, memory[temp0:temp0 + 0x00] = address(arg1 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n    \n        if (temp2) { return; }\n    \n        var temp3 = arg2;\n        storage[0x05] = temp3 + storage[0x05];\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x60], [0x47b2b7bdacd5004b5f20c86ec07ecda11e5ac511d4ad9ed9ed2c5af4c42cb4bd]);\n    }\n    \n    function func_2523(var arg0) {\n        if (arg0 <= 0x2710) {\n            storage[0x0b] = arg0;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x25;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6f6666657220637574206d75737420626520612076616c696420626173697320;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x706f696e74000000000000000000000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_25A8(var arg0) {\n        if (arg0 <= 0x2710) {\n            storage[0x09] = arg0;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x33;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6d696e696d756d20707269636520696e6372656d656e74206d75737420626520;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x612076616c696420626173697320706f696e7400000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_262D(var arg0, var arg1) {\n        if (arg0 >= arg1 * 0x02) {\n            storage[0x08] = arg0;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6d696e696d756d2076616c7565206d757374206265203e3d2032202a20756e73;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x75636365737366756c2066656500000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_26B4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 + 0x2710;\n        var var2 = arg0 * 0x2710;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function func_26D1(var arg0) returns (var r0) { return ((storage[0x09] + 0x2710) * arg0) / 0x2710; }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n    \n        if (msg.data.length < 0x04) {\n        label_017C:\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x776520646f6e27742061636365707420616e79207061796d656e747321000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        } else {\n            var var0 = msg.data[0x00:0x20] / 0x02 ** 0xe0 & 0xffffffff;\n        \n            if (var0 == 0x0519ce79) {\n                // Dispatch table entry for cfoAddress()\n                var var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var var2 = cfoAddress();\n            \n            label_01E1:\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                var temp3 = memory[0x40:0x60];\n                return memory[temp3:temp3 + temp2 - temp3 + 0x20];\n            } else if (var0 == 0x054f7d9c) {\n                // Dispatch table entry for frozen()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0212;\n                var2 = frozen();\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = !!var2;\n                var temp5 = memory[0x40:0x60];\n                return memory[temp5:temp5 + temp4 - temp5 + 0x20];\n            } else if (var0 == 0x0a0f8168) {\n                // Dispatch table entry for ceoAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var2 = ceoAddress();\n                goto label_01E1;\n            } else if (var0 == 0x14806a32) {\n                // Dispatch table entry for 0x14806a32 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_0572();\n            \n            label_0250:\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var2;\n                var temp7 = memory[0x40:0x60];\n                return memory[temp7:temp7 + temp6 - temp7 + 0x20];\n            } else if (var0 == 0x1c091a5f) {\n                // Dispatch table entry for 0x1c091a5f (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var temp8 = msg.data[0x04:0x24];\n                var2 = temp8 + 0x24;\n                var var3 = msg.data[temp8 + 0x04:temp8 + 0x04 + 0x20];\n                func_0578(var2, var3);\n                stop();\n            } else if (var0 == 0x1f747458) {\n                // Dispatch table entry for 0x1f747458 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                func_073F(var2);\n                stop();\n            } else if (var0 == 0x27d7874c) {\n                // Dispatch table entry for setCEO(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setCEO(var2);\n                stop();\n            } else if (var0 == 0x2ba73c15) {\n                // Dispatch table entry for setCOO(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setCOO(var2);\n                stop();\n            } else if (var0 == 0x2d5796ac) {\n                // Dispatch table entry for 0x2d5796ac (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_0A8A(var2);\n                stop();\n            } else if (var0 == 0x302890e1) {\n                // Dispatch table entry for 0x302890e1 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var2 = func_0B76();\n                goto label_01E1;\n            } else if (var0 == 0x3a3d55a0) {\n                // Dispatch table entry for 0x3a3d55a0 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_0B85(var2);\n                stop();\n            } else if (var0 == 0x45394dad) {\n                // Dispatch table entry for 0x45394dad (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                func_0C71();\n                stop();\n            } else if (var0 == 0x4ae772a4) {\n                // Dispatch table entry for 0x4ae772a4 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_0D53(var2);\n                stop();\n            } else if (var0 == 0x4e0a3379) {\n                // Dispatch table entry for setCFO(address)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24] & 0x02 ** 0xa0 - 0x01;\n                setCFO(var2);\n                stop();\n            } else if (var0 == 0x4e8dc003) {\n                // Dispatch table entry for 0x4e8dc003 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                var3 = msg.data[0x24:0x44] & 0x02 ** 0x80 - 0x01;\n                func_0F5B(var2, var3);\n                stop();\n            } else if (var0 == 0x56d282fc) {\n                // Dispatch table entry for 0x56d282fc (unknown)\n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_13D6(var2);\n                stop();\n            } else if (var0 == 0x5ac165af) {\n                // Dispatch table entry for 0x5ac165af (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_165F();\n                goto label_0250;\n            } else if (var0 == 0x62a5af3b) {\n                // Dispatch table entry for freeze()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                freeze();\n                stop();\n            } else if (var0 == 0x69250729) {\n                // Dispatch table entry for 0x69250729 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_1766();\n                goto label_0250;\n            } else if (var0 == 0x7ae86385) {\n                // Dispatch table entry for 0x7ae86385 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_176C();\n                goto label_0250;\n            } else if (var0 == 0x8c0ceea5) {\n                // Dispatch table entry for allocationStrategy()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                allocationStrategy(var2);\n                stop();\n            } else if (var0 == 0x930add29) {\n                // Dispatch table entry for 0x930add29 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                func_18E1();\n                stop();\n            } else if (var0 == 0xa269993d) {\n                // Dispatch table entry for createOffer(uint256)\n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                createOffer(var2);\n                stop();\n            } else if (var0 == 0xb047fb50) {\n                // Dispatch table entry for cooAddress()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var2 = cooAddress();\n                goto label_01E1;\n            } else if (var0 == 0xbea12e00) {\n                // Dispatch table entry for 0xbea12e00 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_1DB2();\n                goto label_0250;\n            } else if (var0 == 0xbff2273e) {\n                // Dispatch table entry for 0xbff2273e (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_1DB8(var2);\n                stop();\n            } else if (var0 == 0xc65b98e7) {\n                // Dispatch table entry for 0xc65b98e7 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_1F23();\n                goto label_0250;\n            } else if (var0 == 0xd531fe2b) {\n                // Dispatch table entry for 0xd531fe2b (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04a4;\n                var2 = msg.data[0x04:0x24];\n                var var4;\n                var var5;\n                var var6;\n                var2, var3, var4, var5, var6 = func_1F29(var2);\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = var2 & 0xffffffffffffffff;\n                memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = var3 & 0x02 ** 0xa0 - 0x01;\n                memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = var4 & 0xffff;\n                var temp10 = 0x02 ** 0x80 - 0x01;\n                memory[temp9 + 0x60:temp9 + 0x60 + 0x20] = temp10 & var5;\n                memory[temp9 + 0x80:temp9 + 0x80 + 0x20] = temp10 & var6;\n                var temp11 = memory[0x40:0x60];\n                return memory[temp11:temp11 + temp9 - temp11 + 0xa0];\n            } else if (var0 == 0xdb341765) {\n                // Dispatch table entry for 0xdb341765 (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0250;\n                var2 = func_1F92();\n                goto label_0250;\n            } else if (var0 == 0xdd1b7a0f) {\n                // Dispatch table entry for nonFungibleContract()\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x01e1;\n                var2 = nonFungibleContract();\n                goto label_01E1;\n            } else if (var0 == 0xe1302e2b) {\n                // Dispatch table entry for 0xe1302e2b (unknown)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                func_1FA7(var2);\n                stop();\n            } else if (var0 == 0xef706adf) {\n                // Dispatch table entry for cancelOffer(uint256)\n                var1 = msg.value;\n            \n                if (var1) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0282;\n                var2 = msg.data[0x04:0x24];\n                cancelOffer(var2);\n                stop();\n            } else { goto label_017C; }\n        }\n    }\n    \n    function cfoAddress() returns (var r0) { return storage[0x02] & 0x02 ** 0xa0 - 0x01; }\n    \n    function frozen() returns (var r0) { return storage[0x06] & 0xff; }\n    \n    function ceoAddress() returns (var r0) { return storage[0x00] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_0572() returns (var r0) { return storage[0x07]; }\n    \n    function func_0578(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n    \n        if (!(storage[0x06] & 0xff)) {\n            var0 = arg1;\n            var1 = 0x00;\n            var2 = var1;\n        \n            if (var2 >= var0) {\n            label_0720:\n            \n                if (var1 <= 0x00) { return; }\n            \n                storage[0x04] = var1 + storage[0x04];\n                return;\n            } else {\n            label_05EF:\n                var var9 = arg0;\n                var var10 = arg1;\n                var var11 = var2;\n            \n                if (var11 >= var10) { assert(); }\n            \n                memory[0x00:0x20] = msg.data[var11 * 0x20 + var9:var11 * 0x20 + var9 + 0x20];\n                memory[0x20:0x40] = 0x0c;\n                var3 = msg.data[var11 * 0x20 + var9:var11 * 0x20 + var9 + 0x20];\n                var4 = keccak256(memory[0x00:0x40]);\n                var5 = storage[var4] & 0xffffffffffffffff;\n                var9 = 0x0630;\n                var10 = var5;\n                var9 = func_2491(var10);\n            \n                if (!var9) { goto label_0715; }\n            \n                var9 = 0x0644;\n                var10 = var5;\n                var9 = func_2497(var10);\n            \n                if (var9) { goto label_0715; }\n            \n                var temp0 = var4;\n                var temp1 = storage[temp0];\n                var temp2 = storage[temp0 + 0x01];\n                memory[0x00:0x20] = var3;\n                memory[0x20:0x40] = 0x0c;\n                var temp3 = keccak256(memory[0x00:0x40]);\n                storage[temp3] = storage[temp3] & ~(0x02 ** 0xf0 - 0x01);\n                storage[temp3 + 0x01] = 0x00;\n                var temp4 = 0x02 ** 0x80 - 0x01;\n                var temp5 = temp4 & temp2 / 0x0100000000000000000000000000000000;\n                var1 = temp5 + var1;\n                var7 = temp5;\n                var6 = temp1 / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01;\n                var8 = (temp4 & temp2) - var7;\n                var9 = 0x06c5;\n                var10 = var3;\n                var11 = var6;\n                var var12 = var8;\n                func_249C(var10, var11, var12);\n                var temp6 = memory[0x40:0x60];\n                memory[temp6:temp6 + 0x20] = var3;\n                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var6 & 0x02 ** 0xa0 - 0x01;\n                memory[temp6 + 0x40:temp6 + 0x40 + 0x20] = var8;\n                memory[temp6 + 0x60:temp6 + 0x60 + 0x20] = var7;\n                var temp7 = memory[0x40:0x60];\n                log(memory[temp7:temp7 + temp6 - temp7 + 0x80], [0xd876ee5dd9082a3ac4fe7be4799528f1d5f3545cee1516f2821d0f8ecc9d629c]);\n            \n            label_0715:\n                var8 = var8;\n                var2 = var2 + 0x01;\n            \n                if (var2 >= var0) { goto label_0720; }\n                else { goto label_05EF; }\n            }\n        } else {\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n            memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x1f;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp8 - temp11 + 0x64]);\n        }\n    }\n    \n    function func_073F(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x2d;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2703:0x2723];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp5;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = temp6;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp2 - temp7 + 0x84]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            storage[0x03] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x03] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6e6577206c6f737420616e6420666f756e642063616e6e6f7420626520746865;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x207a65726f2d6163636f756e7400000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function setCEO(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x2d;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2703:0x2723];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp5;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = temp6;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp2 - temp7 + 0x84]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            storage[0x00] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x00] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2a;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6e65772043454f20616464726573732063616e6e6f7420626520746865207a65;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x726f2d6163636f756e7400000000000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function setCOO(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x2d;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2703:0x2723];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp5;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = temp6;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp2 - temp7 + 0x84]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            storage[0x01] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x01] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2a;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6e657720434f4f20616464726573732063616e6e6f7420626520746865207a65;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x726f2d6163636f756e7400000000000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_0A8A(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x2d;\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp8;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp6 - temp11 + 0x84]);\n        } else if (!(storage[0x06] & 0xff)) {\n            var var0 = 0x0b40;\n            var var1 = arg0;\n            func_2523(var1);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = arg0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x4a13d5076f950a8eb96f30e1f814eecade18fcebc5042f3ce669cea283edaefd]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x1f;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + temp2 - temp5 + 0x64]);\n        }\n    }\n    \n    function func_0B76() returns (var r0) { return storage[0x03] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_0B85(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x2d;\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp8;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp6 - temp11 + 0x84]);\n        } else if (!(storage[0x06] & 0xff)) {\n            var var0 = 0x0c3b;\n            var var1 = arg0;\n            func_25A8(var1);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = arg0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x2fa1029ea9a56473df3e068ba4dc7f4343efacb8a54b808f595f78d1d62f0035]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x1f;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + temp2 - temp5 + 0x64]);\n        }\n    }\n    \n    function func_0C71() {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x03] & 0x02 ** 0xa0 - 0x01;\n    \n        if (!var1) {\n            if (var1) {\n            label_0D09:\n                var temp0 = storage[0x05];\n                storage[0x05] = 0x00;\n                var temp1 = memory[0x40:0x60];\n                var0 = temp0;\n                var temp2;\n                temp2, memory[temp1:temp1 + 0x00] = address(storage[0x03] & 0x02 ** 0xa0 - 0x01).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + 0x00]);\n                var1 = !temp2;\n            \n                if (!var1) { return; }\n            \n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n            label_0C94:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x36;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6f6e6c79204c6f7374416e64466f756e6420697320616c6c6f77656420746f20;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x706572666f726d2074686973206f7065726174696f6e00000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x84]);\n            }\n        } else if (msg.sender) { goto label_0D09; }\n        else { goto label_0C94; }\n    }\n    \n    function func_0D53(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x2d;\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp8;\n            var temp9 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp9;\n            memory[temp6 + 0x64:temp6 + 0x64 + 0x20] = temp10;\n            var temp11 = memory[0x40:0x60];\n            revert(memory[temp11:temp11 + temp6 - temp11 + 0x84]);\n        } else if (!(storage[0x06] & 0xff)) {\n            var var0 = 0x0e0c;\n            var var1 = arg0;\n            var var2 = storage[0x0a];\n            func_262D(var1, var2);\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = arg0;\n            var temp1 = memory[0x40:0x60];\n            log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0x4193e3b6c8a874196e0068cb9b96b2aaef71a2d90fc46254c4508e1003996bd5]);\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x1f;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x40:0x60];\n            revert(memory[temp5:temp5 + temp2 - temp5 + 0x64]);\n        }\n    }\n    \n    function setCFO(var arg0) {\n        if (msg.sender != storage[0x00] & 0x02 ** 0xa0 - 0x01) {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x2d;\n            var temp3 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2703:0x2723];\n            var temp4 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp3;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = temp4;\n            var temp5 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp5;\n            memory[temp2 + 0x64:temp2 + 0x64 + 0x20] = temp6;\n            var temp7 = memory[0x40:0x60];\n            revert(memory[temp7:temp7 + temp2 - temp7 + 0x84]);\n        } else if (arg0 & 0x02 ** 0xa0 - 0x01) {\n            storage[0x02] = (arg0 & 0x02 ** 0xa0 - 0x01) | (storage[0x02] & ~0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2a;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6e65772043464f20616464726573732063616e6e6f7420626520746865207a65;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x726f2d6163636f756e7400000000000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_0F5B(var arg0, var arg1) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n        var var6 = var5;\n    \n        if (!(storage[0x06] & 0xff)) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = keccak256(memory[0x00:0x40]);\n            var1 = storage[var0] & 0xffffffffffffffff;\n            var var7 = 0x0fdb;\n            var var8 = var1;\n            var7 = func_2491(var8);\n        \n            if (var7) {\n                var7 = 0x103a;\n                var8 = var1;\n                var7 = func_2497(var8);\n            \n                if (var7) {\n                    var temp0 = memory[0x40:0x60];\n                    memory[temp0:temp0 + 0x20] = 0x6352211e00000000000000000000000000000000000000000000000000000000;\n                    memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = arg0;\n                    var7 = storage[0x0d] & 0x02 ** 0xa0 - 0x01;\n                    var8 = 0x6352211e;\n                    var var9 = temp0 + 0x24;\n                    var var10 = 0x20;\n                    var var11 = memory[0x40:0x60];\n                    var var12 = temp0 - var11 + 0x24;\n                    var var13 = var11;\n                    var var14 = 0x00;\n                    var var15 = var7;\n                    var var16 = !address(var15).code.length;\n                \n                    if (var16) { revert(memory[0x00:0x00]); }\n                \n                    var temp1;\n                    temp1, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas).value(var14)(memory[var13:var13 + var12]);\n                    var10 = !temp1;\n                \n                    if (!var10) {\n                        var7 = memory[0x40:0x60];\n                        var8 = returndata.length;\n                    \n                        if (var8 < 0x20) { revert(memory[0x00:0x00]); }\n                    \n                        var2 = memory[var7:var7 + 0x20];\n                        var7 = msg.sender == storage[0x01] & 0x02 ** 0xa0 - 0x01;\n                    \n                        if (var7) {\n                            if (var7) {\n                            label_11E8:\n                                var temp2 = var0;\n                                var3 = storage[temp2 + 0x01] & 0x02 ** 0x80 - 0x01;\n                                var7 = 0x1212;\n                                var8 = var3;\n                                var9 = storage[temp2] / 0x02 ** 0xe0 & 0xffff;\n                                var7 = func_26B4(var8, var9);\n                                var4 = var7;\n                            \n                                if (var4 >= arg1 & 0x02 ** 0x80 - 0x01) {\n                                    var temp3 = storage[var0];\n                                    var temp4 = arg0;\n                                    memory[0x00:0x20] = temp4;\n                                    memory[0x20:0x40] = 0x0c;\n                                    var temp5 = keccak256(memory[0x00:0x40]);\n                                    storage[temp5] = storage[temp5] & ~(0x02 ** 0xf0 - 0x01);\n                                    storage[temp5 + 0x01] = 0x00;\n                                    var temp6 = memory[0x40:0x60];\n                                    memory[temp6:temp6 + 0x20] = 0x23b872dd00000000000000000000000000000000000000000000000000000000;\n                                    var temp7 = 0x02 ** 0xa0 - 0x01;\n                                    memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = temp7 & var2;\n                                    memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = temp7 & temp3 / 0x010000000000000000;\n                                    memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp4;\n                                    var5 = temp7 & temp3 / 0x010000000000000000;\n                                    var7 = temp7 & storage[0x0d];\n                                    var8 = 0x23b872dd;\n                                    var9 = temp6 + 0x64;\n                                    var11 = memory[0x40:0x60];\n                                    var10 = 0x00;\n                                    var12 = temp6 - var11 + 0x64;\n                                    var13 = var11;\n                                    var14 = var10;\n                                    var15 = var7;\n                                    var16 = !address(var15).code.length;\n                                \n                                    if (var16) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp8;\n                                    temp8, memory[var11:var11 + var10] = address(var15).call.gas(msg.gas).value(var14)(memory[var13:var13 + var12]);\n                                    var10 = !temp8;\n                                \n                                    if (!var10) {\n                                        storage[0x04] = var3 - var4 + storage[0x04];\n                                        var6 = var3 - var4;\n                                        var7 = 0x1374;\n                                        var8 = arg0;\n                                        var9 = var2;\n                                        var10 = var4;\n                                        func_249C(var8, var9, var10);\n                                        var temp9 = memory[0x40:0x60];\n                                        memory[temp9:temp9 + 0x20] = arg0;\n                                        var temp10 = 0x02 ** 0xa0 - 0x01;\n                                        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = var5 & temp10;\n                                        memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = var2 & temp10;\n                                        memory[temp9 + 0x60:temp9 + 0x60 + 0x20] = var4;\n                                        memory[temp9 + 0x80:temp9 + 0x80 + 0x20] = var6;\n                                        var temp11 = memory[0x40:0x60];\n                                        log(memory[temp11:temp11 + temp9 - temp11 + 0xa0], [0x9accbcf984c4cd67a675ee4d38143974e1fa62aa95da283bd4ca645e408ec283]);\n                                        return;\n                                    } else {\n                                        var temp12 = returndata.length;\n                                        memory[0x00:0x00 + temp12] = returndata[0x00:0x00 + temp12];\n                                        revert(memory[0x00:0x00 + returndata.length]);\n                                    }\n                                } else {\n                                    var temp13 = memory[0x40:0x60];\n                                    memory[temp13:temp13 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                    memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n                                    memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x2c;\n                                    memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x63616e6e6f742066756c66696c6c206f6666657220e28093206f666665722070;\n                                    memory[temp13 + 0x64:temp13 + 0x64 + 0x20] = 0x7269636520746f6f206c6f770000000000000000000000000000000000000000;\n                                    var temp14 = memory[0x40:0x60];\n                                    revert(memory[temp14:temp14 + temp13 - temp14 + 0x84]);\n                                }\n                            } else {\n                            label_1173:\n                                var temp15 = memory[0x40:0x60];\n                                memory[temp15:temp15 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                                memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n                                memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x27;\n                                memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x6f6e6c7920434f4f206f7220746865206f776e65722063616e2066756c66696c;\n                                memory[temp15 + 0x64:temp15 + 0x64 + 0x20] = 0x6c206f7264657200000000000000000000000000000000000000000000000000;\n                                var temp16 = memory[0x40:0x60];\n                                revert(memory[temp16:temp16 + temp15 - temp16 + 0x84]);\n                            }\n                        } else if (var2 & 0x02 ** 0xa0 - 0x01 == msg.sender) { goto label_11E8; }\n                        else { goto label_1173; }\n                    } else {\n                        var temp17 = returndata.length;\n                        memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                        revert(memory[0x00:0x00 + returndata.length]);\n                    }\n                } else {\n                    var temp18 = memory[0x40:0x60];\n                    memory[temp18:temp18 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp18 + 0x04:temp18 + 0x04 + 0x20] = 0x20;\n                    memory[temp18 + 0x24:temp18 + 0x24 + 0x20] = 0x24;\n                    memory[temp18 + 0x44:temp18 + 0x44 + 0x20] = 0x6f6666657220746f2066756c66696c6c206d757374206e6f7420626520657870;\n                    memory[temp18 + 0x64:temp18 + 0x64 + 0x20] = 0x6972656400000000000000000000000000000000000000000000000000000000;\n                    var temp19 = memory[0x40:0x60];\n                    revert(memory[temp19:temp19 + temp18 - temp19 + 0x84]);\n                }\n            } else {\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp20 + 0x04:temp20 + 0x04 + 0x20] = 0x20;\n                memory[temp20 + 0x24:temp20 + 0x24 + 0x20] = 0x1b;\n                memory[temp20 + 0x44:temp20 + 0x44 + 0x20] = 0x6f6666657220746f2066756c66696c6c206d7573742065786973740000000000;\n                var temp21 = memory[0x40:0x60];\n                revert(memory[temp21:temp21 + temp20 - temp21 + 0x64]);\n            }\n        } else {\n            var temp22 = memory[0x40:0x60];\n            memory[temp22:temp22 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp22 + 0x04:temp22 + 0x04 + 0x20] = 0x20;\n            memory[temp22 + 0x24:temp22 + 0x24 + 0x20] = 0x1f;\n            var temp23 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp24 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp23;\n            memory[temp22 + 0x44:temp22 + 0x44 + 0x20] = temp24;\n            var temp25 = memory[0x40:0x60];\n            revert(memory[temp25:temp25 + temp22 - temp25 + 0x64]);\n        }\n    }\n    \n    function func_13D6(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n    \n        if (!(storage[0x06] & 0xff)) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = keccak256(memory[0x00:0x40]);\n            var1 = storage[var0] & 0xffffffffffffffff;\n            var var3 = 0x144e;\n            var var4 = var1;\n            var3 = func_2491(var4);\n        \n            if (var3) {\n                var3 = 0x14ad;\n                var4 = var1;\n                var3 = func_2497(var4);\n            \n                if (!var3) {\n                    var temp13 = memory[0x40:0x60];\n                    memory[temp13:temp13 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n                    memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x23;\n                    memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x6f6666657220746f20757064617465206d757374206e6f742062652065787069;\n                    memory[temp13 + 0x64:temp13 + 0x64 + 0x20] = 0x7265640000000000000000000000000000000000000000000000000000000000;\n                    var temp14 = memory[0x40:0x60];\n                    revert(memory[temp14:temp14 + temp13 - temp14 + 0x84]);\n                } else if (msg.sender == storage[var0] / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01) {\n                    var2 = block.timestamp + storage[0x07];\n                \n                    if (msg.value <= 0x00) {\n                        var temp0 = var0;\n                        var temp1 = var2;\n                        storage[temp0] = (temp1 & 0xffffffffffffffff) | (storage[temp0] & ~0xffffffffffffffff);\n                        var temp2 = memory[0x40:0x60];\n                        memory[temp2:temp2 + 0x20] = arg0;\n                        memory[temp2 + 0x20:temp2 + 0x20 + 0x20] = msg.sender;\n                        memory[temp2 + 0x40:temp2 + 0x40 + 0x20] = temp1;\n                        memory[temp2 + 0x60:temp2 + 0x60 + 0x20] = msg.value;\n                        var temp3 = memory[0x40:0x60];\n                        log(memory[temp3:temp3 + temp2 - temp3 + 0x80], [0x56cb95d5e0f3ba4459f610fef3ba603635cef803d945e97c316cdeb392903991]);\n                        return;\n                    } else {\n                        var temp4 = var0;\n                        var temp5 = temp4 + 0x01;\n                        var temp6 = storage[temp5];\n                        var temp7 = 0x02 ** 0x80 - 0x01;\n                        storage[temp5] = (temp6 & ~0xffffffffffffffffffffffffffffffff) | (msg.value + (temp6 & temp7) & temp7);\n                        var temp8 = var2;\n                        storage[temp4] = (temp8 & 0xffffffffffffffff) | (storage[temp4] & ~0xffffffffffffffff);\n                        var temp9 = memory[0x40:0x60];\n                        memory[temp9:temp9 + 0x20] = arg0;\n                        memory[temp9 + 0x20:temp9 + 0x20 + 0x20] = msg.sender;\n                        memory[temp9 + 0x40:temp9 + 0x40 + 0x20] = temp8;\n                        memory[temp9 + 0x60:temp9 + 0x60 + 0x20] = msg.value;\n                        var temp10 = memory[0x40:0x60];\n                        log(memory[temp10:temp10 + temp9 - temp10 + 0x80], [0x56cb95d5e0f3ba4459f610fef3ba603635cef803d945e97c316cdeb392903991]);\n                        return;\n                    }\n                } else {\n                    var temp11 = memory[0x40:0x60];\n                    memory[temp11:temp11 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n                    memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x2c;\n                    memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = 0x63616c6c6572206d75737420626520626964646572206f66206f666665722074;\n                    memory[temp11 + 0x64:temp11 + 0x64 + 0x20] = 0x6f20626520757064617465640000000000000000000000000000000000000000;\n                    var temp12 = memory[0x40:0x60];\n                    revert(memory[temp12:temp12 + temp11 - temp12 + 0x84]);\n                }\n            } else {\n                var temp15 = memory[0x40:0x60];\n                memory[temp15:temp15 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp15 + 0x04:temp15 + 0x04 + 0x20] = 0x20;\n                memory[temp15 + 0x24:temp15 + 0x24 + 0x20] = 0x1a;\n                memory[temp15 + 0x44:temp15 + 0x44 + 0x20] = 0x6f6666657220746f20757064617465206d757374206578697374000000000000;\n                var temp16 = memory[0x40:0x60];\n                revert(memory[temp16:temp16 + temp15 - temp16 + 0x64]);\n            }\n        } else {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x1f;\n            var temp18 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp19 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp18;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = temp19;\n            var temp20 = memory[0x40:0x60];\n            revert(memory[temp20:temp20 + temp17 - temp20 + 0x64]);\n        }\n    }\n    \n    function func_165F() returns (var r0) { return storage[0x04]; }\n    \n    function freeze() {\n        var var0 = !!msg.sender;\n    \n        if (!msg.sender) {\n        label_1692:\n        \n            if (!var0) {\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x34;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6f6e6c792043454f206f722043464f20697320616c6c6f77656420746f207065;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x72666f726d2074686973206f7065726174696f6e000000000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x84]);\n            } else if (!(storage[0x06] & 0xff)) {\n                storage[0x06] = (storage[0x06] & ~0xff) | 0x01;\n                return;\n            } else {\n                var temp0 = memory[0x40:0x60];\n                memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n                memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x1f;\n                var temp1 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x2743:0x2763];\n                var temp2 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp1;\n                memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = temp2;\n                var temp3 = memory[0x40:0x60];\n                revert(memory[temp3:temp3 + temp0 - temp3 + 0x64]);\n            }\n        } else {\n            var0 = msg.sender == storage[0x00] & 0x02 ** 0xa0 - 0x01;\n        \n            if (var0) { goto label_1692; }\n        \n            var0 = msg.sender == storage[0x02] & 0x02 ** 0xa0 - 0x01;\n            goto label_1692;\n        }\n    }\n    \n    function func_1766() returns (var r0) { return storage[0x08]; }\n    \n    function func_176C() returns (var r0) { return storage[0x05]; }\n    \n    function allocationStrategy(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp10 = memory[0x40:0x60];\n            memory[temp10:temp10 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;\n            memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x2d;\n            var temp11 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp12 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp11;\n            memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = temp12;\n            var temp13 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp14 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp13;\n            memory[temp10 + 0x64:temp10 + 0x64 + 0x20] = temp14;\n            var temp15 = memory[0x40:0x60];\n            revert(memory[temp15:temp15 + temp10 - temp15 + 0x84]);\n        } else if (!(storage[0x06] & 0xff)) {\n            var temp0 = arg0;\n        \n            if (temp0 == temp0 & 0xffffffffffffffff) {\n                var temp1 = arg0;\n                storage[0x07] = temp1;\n                var temp2 = memory[0x40:0x60];\n                memory[temp2:temp2 + 0x20] = temp1;\n                var temp3 = memory[0x40:0x60];\n                log(memory[temp3:temp3 + temp2 - temp3 + 0x20], [0x66be647974b8677ccbdb171c9fd037f0f64af878ddc5b7f0923da6a32173ae47]);\n                return;\n            } else {\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x2b;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6e657720676c6f62616c4475726174696f6e2076616c7565206d757374206e6f;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = 0x7420756e646572666c6f77000000000000000000000000000000000000000000;\n                var temp5 = memory[0x40:0x60];\n                revert(memory[temp5:temp5 + temp4 - temp5 + 0x84]);\n            }\n        } else {\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = 0x20;\n            memory[temp6 + 0x24:temp6 + 0x24 + 0x20] = 0x1f;\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp8 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp7;\n            memory[temp6 + 0x44:temp6 + 0x44 + 0x20] = temp8;\n            var temp9 = memory[0x40:0x60];\n            revert(memory[temp9:temp9 + temp6 - temp9 + 0x64]);\n        }\n    }\n    \n    function func_18E1() {\n        var var0 = 0x00;\n        var var1 = msg.sender == storage[0x02] & 0x02 ** 0xa0 - 0x01;\n    \n        if (!var1) {\n            if (var1) {\n            label_1967:\n                var temp0 = storage[0x04];\n                storage[0x04] = 0x00;\n                var temp1 = memory[0x40:0x60];\n                var0 = temp0;\n                var temp2;\n                temp2, memory[temp1:temp1 + 0x00] = address(storage[0x02] & 0x02 ** 0xa0 - 0x01).call.gas(!var0 * 0x08fc).value(var0)(memory[temp1:temp1 + 0x00]);\n                var1 = !temp2;\n            \n                if (!var1) { return; }\n            \n                var temp3 = returndata.length;\n                memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n                revert(memory[0x00:0x00 + returndata.length]);\n            } else {\n            label_1904:\n                var temp4 = memory[0x40:0x60];\n                memory[temp4:temp4 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp4 + 0x04:temp4 + 0x04 + 0x20] = 0x20;\n                memory[temp4 + 0x24:temp4 + 0x24 + 0x20] = 0x2d;\n                memory[temp4 + 0x44:temp4 + 0x44 + 0x20] = 0x6f6e6c792043464f20697320616c6c6f77656420746f20706572666f726d2074;\n                var temp5 = memory[0x00:0x20];\n                memory[0x00:0x20] = code[0x26e3:0x2703];\n                var temp6 = memory[0x00:0x20];\n                memory[0x00:0x20] = temp5;\n                memory[temp4 + 0x64:temp4 + 0x64 + 0x20] = temp6;\n                var temp7 = memory[0x40:0x60];\n                revert(memory[temp7:temp7 + temp4 - temp7 + 0x84]);\n            }\n        } else if (msg.sender) { goto label_1967; }\n        else { goto label_1904; }\n    }\n    \n    function createOffer(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var4 = 0x00;\n        var var5 = var4;\n        var var6 = 0x00;\n        var var7 = var6;\n        var var8 = 0x00;\n        var var9 = var8;\n        var var10 = 0x00;\n    \n        if (storage[0x06] & 0xff) {\n            var temp28 = memory[0x40:0x60];\n            memory[temp28:temp28 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp28 + 0x04:temp28 + 0x04 + 0x20] = 0x20;\n            memory[temp28 + 0x24:temp28 + 0x24 + 0x20] = 0x1f;\n            var temp29 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp30 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp29;\n            memory[temp28 + 0x44:temp28 + 0x44 + 0x20] = temp30;\n            var temp31 = memory[0x40:0x60];\n            revert(memory[temp31:temp31 + temp28 - temp31 + 0x64]);\n        } else if (msg.value >= storage[0x08]) {\n            var0 = storage[0x0b];\n            var var11 = 0x1aa2;\n            var var12 = msg.value;\n            var var13 = var0;\n            var11 = func_26B4(var12, var13);\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var1 = var11;\n            var2 = keccak256(memory[0x00:0x40]);\n            var3 = storage[var2] & 0xffffffffffffffff;\n            var4 = 0x00;\n            var11 = 0x1ad0;\n            var12 = var3;\n            var11 = func_2491(var12);\n        \n            if (!var11) {\n            label_1BCA:\n                var9 = block.timestamp + storage[0x07];\n            \n                if (var4 <= 0x00) {\n                    var temp0 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp0 + 0xa0;\n                    memory[temp0:temp0 + 0x20] = var9 & 0xffffffffffffffff;\n                    var temp1 = temp0 + 0x20;\n                    memory[temp1:temp1 + 0x20] = msg.sender;\n                    var temp2 = temp1 + 0x20;\n                    memory[temp2:temp2 + 0x20] = var0 & 0xffff;\n                    var temp3 = temp2 + 0x20;\n                    memory[temp3:temp3 + 0x20] = msg.value & 0x02 ** 0x80 - 0x01;\n                    memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = storage[0x0a] & 0x02 ** 0x80 - 0x01;\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0c;\n                    var temp4 = keccak256(memory[0x00:0x40]);\n                    var temp5 = temp4;\n                    storage[temp5] = (memory[temp0:temp0 + 0x20] & 0xffffffffffffffff) | (storage[temp5] & ~0xffffffffffffffff);\n                    var temp6 = temp4;\n                    storage[temp6] = (memory[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01) * 0x0100 ** 0x08 | (storage[temp6] & ~(0x02 ** 0xa0 - 0x01 * 0x0100 ** 0x08));\n                    var temp7 = temp4;\n                    storage[temp7] = (memory[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffff) * 0x0100 ** 0x1c | (storage[temp7] & ~(0xffff * 0x0100 ** 0x1c));\n                    var temp8 = temp4 + 0x01;\n                    storage[temp8] = (memory[temp0 + 0x60:temp0 + 0x60 + 0x20] & 0x02 ** 0x80 - 0x01) | (storage[temp8] & ~(0x02 ** 0x80 - 0x01));\n                    var temp9 = temp4 + 0x01;\n                    storage[temp9] = (memory[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0x02 ** 0x80 - 0x01) * 0x0100 ** 0x10 | (storage[temp9] & ~(0x02 ** 0x80 - 0x01 * 0x0100 ** 0x10));\n                \n                    if (var4 <= 0x00) {\n                    label_1D49:\n                        var temp10 = memory[0x40:0x60];\n                        memory[temp10:temp10 + 0x20] = arg0;\n                        memory[temp10 + 0x20:temp10 + 0x20 + 0x20] = msg.sender;\n                        memory[temp10 + 0x40:temp10 + 0x40 + 0x20] = var9;\n                        memory[temp10 + 0x60:temp10 + 0x60 + 0x20] = msg.value;\n                        memory[temp10 + 0x80:temp10 + 0x80 + 0x20] = var1;\n                        var temp11 = memory[0x40:0x60];\n                        log(memory[temp11:temp11 + temp10 - temp11 + 0xa0], [0x05a7f246d4cdcfed1a85bd6331d1638fa8d47fffd48ede9a22f93d06641f309c]);\n                        return;\n                    } else {\n                    label_1D3F:\n                        var11 = 0x1d49;\n                        var12 = arg0;\n                        var13 = var10;\n                        var var14 = var4;\n                        func_249C(var12, var13, var14);\n                        goto label_1D49;\n                    }\n                } else {\n                    var10 = storage[var2] / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01;\n                    var temp12 = memory[0x40:0x60];\n                    memory[0x40:0x60] = temp12 + 0xa0;\n                    memory[temp12:temp12 + 0x20] = var9 & 0xffffffffffffffff;\n                    var temp13 = temp12 + 0x20;\n                    memory[temp13:temp13 + 0x20] = msg.sender;\n                    var temp14 = temp13 + 0x20;\n                    memory[temp14:temp14 + 0x20] = var0 & 0xffff;\n                    var temp15 = temp14 + 0x20;\n                    memory[temp15:temp15 + 0x20] = msg.value & 0x02 ** 0x80 - 0x01;\n                    memory[temp15 + 0x20:temp15 + 0x20 + 0x20] = storage[0x0a] & 0x02 ** 0x80 - 0x01;\n                    memory[0x00:0x20] = arg0;\n                    memory[0x20:0x40] = 0x0c;\n                    var temp16 = keccak256(memory[0x00:0x40]);\n                    var temp17 = temp16;\n                    storage[temp17] = (memory[temp12:temp12 + 0x20] & 0xffffffffffffffff) | (storage[temp17] & ~0xffffffffffffffff);\n                    var temp18 = temp16;\n                    storage[temp18] = (memory[temp12 + 0x20:temp12 + 0x20 + 0x20] & 0x02 ** 0xa0 - 0x01) * 0x0100 ** 0x08 | (storage[temp18] & ~(0x02 ** 0xa0 - 0x01 * 0x0100 ** 0x08));\n                    var temp19 = temp16;\n                    storage[temp19] = (memory[temp12 + 0x40:temp12 + 0x40 + 0x20] & 0xffff) * 0x0100 ** 0x1c | (storage[temp19] & ~(0xffff * 0x0100 ** 0x1c));\n                    var temp20 = temp16 + 0x01;\n                    storage[temp20] = (memory[temp12 + 0x60:temp12 + 0x60 + 0x20] & 0x02 ** 0x80 - 0x01) | (storage[temp20] & ~(0x02 ** 0x80 - 0x01));\n                    var temp21 = temp16 + 0x01;\n                    storage[temp21] = (memory[temp12 + 0x80:temp12 + 0x80 + 0x20] & 0x02 ** 0x80 - 0x01) * 0x0100 ** 0x10 | (storage[temp21] & ~(0x02 ** 0x80 - 0x01 * 0x0100 ** 0x10));\n                \n                    if (var4 <= 0x00) { goto label_1D49; }\n                    else { goto label_1D3F; }\n                }\n            } else {\n                var5 = storage[var2 + 0x01] & 0x02 ** 0x80 - 0x01;\n                var11 = 0x1aee;\n                var12 = var3;\n                var11 = func_2497(var12);\n            \n                if (!var11) {\n                label_1B96:\n                    var temp22 = storage[var2 + 0x01] / 0x0100000000000000000000000000000000 & 0x02 ** 0x80 - 0x01;\n                    storage[0x04] = temp22 + storage[0x04];\n                    var4 = var5 - temp22;\n                    var8 = temp22;\n                    goto label_1BCA;\n                } else {\n                    var11 = 0x1b0b;\n                    var12 = var5;\n                    var13 = storage[var2] / 0x02 ** 0xe0 & 0xffff;\n                    var11 = func_26B4(var12, var13);\n                    var temp23 = var11;\n                    var6 = temp23;\n                    var11 = 0x1b16;\n                    var12 = var6;\n                    var11 = func_26D1(var12);\n                    var7 = var11;\n                \n                    if (var1 >= var7) { goto label_1B96; }\n                \n                    var temp24 = memory[0x40:0x60];\n                    memory[temp24:temp24 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp24 + 0x04:temp24 + 0x04 + 0x20] = 0x20;\n                    memory[temp24 + 0x24:temp24 + 0x24 + 0x20] = 0x39;\n                    memory[temp24 + 0x44:temp24 + 0x44 + 0x20] = 0x6f766572626964207072696365206d757374206d61746368206d696e696d756d;\n                    memory[temp24 + 0x64:temp24 + 0x64 + 0x20] = 0x20707269636520696e6372656d656e7420637269746572696100000000000000;\n                    var temp25 = memory[0x40:0x60];\n                    revert(memory[temp25:temp25 + temp24 - temp25 + 0x84]);\n                }\n            }\n        } else {\n            var temp26 = memory[0x40:0x60];\n            memory[temp26:temp26 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp26 + 0x04:temp26 + 0x04 + 0x20] = 0x20;\n            memory[temp26 + 0x24:temp26 + 0x24 + 0x20] = 0x31;\n            memory[temp26 + 0x44:temp26 + 0x44 + 0x20] = 0x6f6666657220746f74616c2076616c7565206d7573742062652061626f766520;\n            memory[temp26 + 0x64:temp26 + 0x64 + 0x20] = 0x6d696e696d756d546f74616c56616c7565000000000000000000000000000000;\n            var temp27 = memory[0x40:0x60];\n            revert(memory[temp27:temp27 + temp26 - temp27 + 0x84]);\n        }\n    }\n    \n    function cooAddress() returns (var r0) { return storage[0x01] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_1DB2() returns (var r0) { return storage[0x0b]; }\n    \n    function func_1DB8(var arg0) {\n        if (msg.sender != storage[0x01] & 0x02 ** 0xa0 - 0x01) {\n            var temp9 = memory[0x40:0x60];\n            memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n            memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x2d;\n            var temp10 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2723:0x2743];\n            var temp11 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp10;\n            memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = temp11;\n            var temp12 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x26e3:0x2703];\n            var temp13 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp12;\n            memory[temp9 + 0x64:temp9 + 0x64 + 0x20] = temp13;\n            var temp14 = memory[0x40:0x60];\n            revert(memory[temp14:temp14 + temp9 - temp14 + 0x84]);\n        } else if (storage[0x06] & 0xff) {\n            var temp5 = memory[0x40:0x60];\n            memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n            memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x1f;\n            var temp6 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp7 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp6;\n            memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = temp7;\n            var temp8 = memory[0x40:0x60];\n            revert(memory[temp8:temp8 + temp5 - temp8 + 0x64]);\n        } else if (arg0 * 0x02 <= storage[0x08]) {\n            var temp0 = arg0;\n            storage[0x0a] = temp0;\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = temp0;\n            var temp2 = memory[0x40:0x60];\n            log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xfa4a24dc8c85bb39a38146f43e5611e67c18d4df990b85be0fa17a8d9c7f3cc9]);\n            return;\n        } else {\n            var temp3 = memory[0x40:0x60];\n            memory[temp3:temp3 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n            memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x37;\n            memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x756e7375636365737366756c2076616c7565206d757374206265203c3d206861;\n            memory[temp3 + 0x64:temp3 + 0x64 + 0x20] = 0x6c66206f66206d696e696d756d546f74616c56616c7565000000000000000000;\n            var temp4 = memory[0x40:0x60];\n            revert(memory[temp4:temp4 + temp3 - temp4 + 0x84]);\n        }\n    }\n    \n    function func_1F23() returns (var r0) { return storage[0x0a]; }\n    \n    function func_1F29(var arg0) returns (var arg0, var r1, var r2, var r3, var r4) {\n        memory[0x20:0x40] = 0x0c;\n        memory[0x00:0x20] = arg0;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        var temp1 = storage[temp0];\n        var temp2 = storage[temp0 + 0x01];\n        arg0 = temp1 & 0xffffffffffffffff;\n        r1 = temp1 / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01;\n        r2 = temp1 / 0x02 ** 0xe0 & 0xffff;\n        var temp3 = 0x02 ** 0x80 - 0x01;\n        r3 = temp2 & temp3;\n        r4 = temp2 / 0x0100000000000000000000000000000000 & temp3;\n        return arg0, r1, r2, r3, r4;\n    }\n    \n    function func_1F92() returns (var r0) { return storage[0x09]; }\n    \n    function nonFungibleContract() returns (var r0) { return storage[0x0d] & 0x02 ** 0xa0 - 0x01; }\n    \n    function func_1FA7(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n    \n        if (storage[0x06] & 0xff) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = keccak256(memory[0x00:0x40]);\n            var var2 = 0x202e;\n            var var3 = storage[var0] & 0xffffffffffffffff;\n            var2 = func_2491(var3);\n        \n            if (!var2) {\n                var temp10 = memory[0x40:0x60];\n                memory[temp10:temp10 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = 0x20;\n                memory[temp10 + 0x24:temp10 + 0x24 + 0x20] = 0x27;\n                memory[temp10 + 0x44:temp10 + 0x44 + 0x20] = 0x6f6666657220746f2077697468647261772066756e64732066726f6d206d7573;\n                memory[temp10 + 0x64:temp10 + 0x64 + 0x20] = 0x7420657869737400000000000000000000000000000000000000000000000000;\n                var temp11 = memory[0x40:0x60];\n                revert(memory[temp11:temp11 + temp10 - temp11 + 0x84]);\n            } else if (msg.sender == storage[var0] / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01) {\n                var temp0 = storage[var0 + 0x01];\n                memory[0x00:0x20] = arg0;\n                memory[0x20:0x40] = 0x0c;\n                var temp1 = keccak256(memory[0x00:0x40]);\n                storage[temp1] = storage[temp1] & ~(0x02 ** 0xf0 - 0x01);\n                storage[temp1 + 0x01] = 0x00;\n                var temp2 = memory[0x40:0x60];\n                var temp3 = temp0 & 0x02 ** 0x80 - 0x01;\n                var1 = temp3;\n                var temp4;\n                temp4, memory[temp2:temp2 + 0x00] = address(msg.sender).call.gas(!var1 * 0x08fc).value(var1)(memory[temp2:temp2 + 0x00]);\n                var2 = !temp4;\n            \n                if (!var2) {\n                    var temp5 = memory[0x40:0x60];\n                    memory[temp5:temp5 + 0x20] = arg0;\n                    memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = msg.sender;\n                    memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = var1;\n                    var temp6 = memory[0x40:0x60];\n                    log(memory[temp6:temp6 + temp5 - temp6 + 0x60], [0x2014255827f37802573fb6164526f1d41d309fd57001e38c8f169ffb76117098]);\n                    return;\n                } else {\n                    var temp7 = returndata.length;\n                    memory[0x00:0x00 + temp7] = returndata[0x00:0x00 + temp7];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp8 = memory[0x40:0x60];\n                memory[temp8:temp8 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp8 + 0x04:temp8 + 0x04 + 0x20] = 0x20;\n                memory[temp8 + 0x24:temp8 + 0x24 + 0x20] = 0x2f;\n                memory[temp8 + 0x44:temp8 + 0x44 + 0x20] = 0x6f6e6c7920626964646572732063616e20776974686472617720746865697220;\n                memory[temp8 + 0x64:temp8 + 0x64 + 0x20] = 0x66756e647320696e20657363726f770000000000000000000000000000000000;\n                var temp9 = memory[0x40:0x60];\n                revert(memory[temp9:temp9 + temp8 - temp9 + 0x84]);\n            }\n        } else {\n            var temp12 = memory[0x40:0x60];\n            memory[temp12:temp12 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp12 + 0x04:temp12 + 0x04 + 0x20] = 0x20;\n            memory[temp12 + 0x24:temp12 + 0x24 + 0x20] = 0x1b;\n            memory[temp12 + 0x44:temp12 + 0x44 + 0x20] = 0x636f6e7472616374206e6565647320746f2062652066726f7a656e0000000000;\n            var temp13 = memory[0x40:0x60];\n            revert(memory[temp13:temp13 + temp12 - temp13 + 0x64]);\n        }\n    }\n    \n    function cancelOffer(var arg0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = var1;\n        var var3 = var2;\n        var var4 = var3;\n        var var5 = var4;\n    \n        if (!(storage[0x06] & 0xff)) {\n            memory[0x00:0x20] = arg0;\n            memory[0x20:0x40] = 0x0c;\n            var0 = keccak256(memory[0x00:0x40]);\n            var1 = storage[var0] & 0xffffffffffffffff;\n            var var6 = 0x2261;\n            var var7 = var1;\n            var6 = func_2491(var7);\n        \n            if (var6) {\n                var6 = 0x22c0;\n                var7 = var1;\n                var6 = func_2497(var7);\n            \n                if (var6) {\n                    var2 = storage[var0] / 0x010000000000000000 & 0x02 ** 0xa0 - 0x01;\n                \n                    if (var2 == msg.sender) {\n                        var temp0 = var0;\n                        var3 = storage[temp0 + 0x01] & 0x02 ** 0x80 - 0x01;\n                        var6 = 0x23fc;\n                        var7 = var3;\n                        var var8 = storage[temp0] / 0x02 ** 0xe0 & 0xffff;\n                        var6 = func_26B4(var7, var8);\n                        memory[0x00:0x20] = arg0;\n                        memory[0x20:0x40] = 0x0c;\n                        var temp1 = keccak256(memory[0x00:0x40]);\n                        storage[temp1] = storage[temp1] & ~(0x02 ** 0xf0 - 0x01);\n                        storage[temp1 + 0x01] = 0x00;\n                        var temp2 = var6;\n                        storage[0x04] = var3 - temp2 + storage[0x04];\n                        var4 = temp2;\n                        var5 = var3 - temp2;\n                        var6 = 0x2439;\n                        var7 = arg0;\n                        var8 = var2;\n                        var var9 = var4;\n                        func_249C(var7, var8, var9);\n                        var temp3 = memory[0x40:0x60];\n                        memory[temp3:temp3 + 0x20] = arg0;\n                        memory[temp3 + 0x20:temp3 + 0x20 + 0x20] = var2 & 0x02 ** 0xa0 - 0x01;\n                        memory[temp3 + 0x40:temp3 + 0x40 + 0x20] = var4;\n                        memory[temp3 + 0x60:temp3 + 0x60 + 0x20] = var5;\n                        var temp4 = memory[0x40:0x60];\n                        log(memory[temp4:temp4 + temp3 - temp4 + 0x80], [0x0f30ae9004015531e44539aa93fcbe6e33146abeeed21661204fa432da6bc075]);\n                        return;\n                    } else {\n                        var temp5 = memory[0x40:0x60];\n                        memory[temp5:temp5 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                        memory[temp5 + 0x04:temp5 + 0x04 + 0x20] = 0x20;\n                        memory[temp5 + 0x24:temp5 + 0x24 + 0x20] = 0x2e;\n                        memory[temp5 + 0x44:temp5 + 0x44 + 0x20] = 0x63616c6c6572206d75737420626520626964646572206f66206f666665722074;\n                        memory[temp5 + 0x64:temp5 + 0x64 + 0x20] = 0x6f2062652063616e63656c6c6564000000000000000000000000000000000000;\n                        var temp6 = memory[0x40:0x60];\n                        revert(memory[temp6:temp6 + temp5 - temp6 + 0x84]);\n                    }\n                } else {\n                    var temp7 = memory[0x40:0x60];\n                    memory[temp7:temp7 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                    memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = 0x20;\n                    memory[temp7 + 0x24:temp7 + 0x24 + 0x20] = 0x23;\n                    memory[temp7 + 0x44:temp7 + 0x44 + 0x20] = 0x6f6666657220746f2063616e63656c206d757374206e6f742062652065787069;\n                    memory[temp7 + 0x64:temp7 + 0x64 + 0x20] = 0x7265640000000000000000000000000000000000000000000000000000000000;\n                    var temp8 = memory[0x40:0x60];\n                    revert(memory[temp8:temp8 + temp7 - temp8 + 0x84]);\n                }\n            } else {\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n                memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x1a;\n                memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x6f6666657220746f2063616e63656c206d757374206578697374000000000000;\n                var temp10 = memory[0x40:0x60];\n                revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n            }\n        } else {\n            var temp11 = memory[0x40:0x60];\n            memory[temp11:temp11 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp11 + 0x04:temp11 + 0x04 + 0x20] = 0x20;\n            memory[temp11 + 0x24:temp11 + 0x24 + 0x20] = 0x1f;\n            var temp12 = memory[0x00:0x20];\n            memory[0x00:0x20] = code[0x2743:0x2763];\n            var temp13 = memory[0x00:0x20];\n            memory[0x00:0x20] = temp12;\n            memory[temp11 + 0x44:temp11 + 0x44 + 0x20] = temp13;\n            var temp14 = memory[0x40:0x60];\n            revert(memory[temp14:temp14 + temp11 - temp14 + 0x64]);\n        }\n    }\n    \n    function func_2491(var arg0) returns (var r0) { return 0x00 < arg0; }\n    \n    function func_2497(var arg0) returns (var r0) { return block.timestamp < arg0; }\n    \n    function func_249C(var arg0, var arg1, var arg2) {\n        var temp0 = memory[0x40:0x60];\n        var temp1 = arg2;\n        var temp2;\n        temp2, memory[temp0:temp0 + 0x00] = address(arg1 & 0x02 ** 0xa0 - 0x01).call.gas(!temp1 * 0x08fc).value(temp1)(memory[temp0:temp0 + 0x00]);\n    \n        if (temp2) { return; }\n    \n        var temp3 = arg2;\n        storage[0x05] = temp3 + storage[0x05];\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = arg0;\n        memory[temp4 + 0x20:temp4 + 0x20 + 0x20] = arg1 & 0x02 ** 0xa0 - 0x01;\n        memory[temp4 + 0x40:temp4 + 0x40 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x60], [0x47b2b7bdacd5004b5f20c86ec07ecda11e5ac511d4ad9ed9ed2c5af4c42cb4bd]);\n    }\n    \n    function func_2523(var arg0) {\n        if (arg0 <= 0x2710) {\n            storage[0x0b] = arg0;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x25;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6f6666657220637574206d75737420626520612076616c696420626173697320;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x706f696e74000000000000000000000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_25A8(var arg0) {\n        if (arg0 <= 0x2710) {\n            storage[0x09] = arg0;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x33;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6d696e696d756d20707269636520696e6372656d656e74206d75737420626520;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x612076616c696420626173697320706f696e7400000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_262D(var arg0, var arg1) {\n        if (arg0 >= arg1 * 0x02) {\n            storage[0x08] = arg0;\n            return;\n        } else {\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x461bcd * 0x02 ** 0xe5;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x2d;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x6d696e696d756d2076616c7565206d757374206265203e3d2032202a20756e73;\n            memory[temp0 + 0x64:temp0 + 0x64 + 0x20] = 0x75636365737366756c2066656500000000000000000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x84]);\n        }\n    }\n    \n    function func_26B4(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = arg1 + 0x2710;\n        var var2 = arg0 * 0x2710;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function func_26D1(var arg0) returns (var r0) { return ((storage[0x09] + 0x2710) * arg0) / 0x2710; }\n}\n\n.",
	"status": "1",
	"time_cost": 24.72820019721985,
	"usage": {
		"completion_tokens": 270,
		"prompt_tokens": 26933,
		"total_tokens": 27203
	}
}