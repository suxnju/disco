{
	"address": "0x68af0f18c974a9603ec863fefcebb4ceb2589070",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's the Solidity code equivalent of your decompiled EVM Bytecode:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract ContractName {\n    uint256 private _pwdHasBeenSet;\n    uint256 private stor_2;\n    uint8 private _setPwd;\n    address private _setcashOutTime;\n    address private _cashOut;\n\n    function PwdHasBeenSet(bytes32 varg0) public { \n        bool v0 = varg0 == _pwdHasBeenSet;\n        if (msg.sender == _setcashOutTime) {\n            v0 = true;\n        }\n        if (v0) {\n            _setPwd = 1;\n        }\n    }\n\n    function CashOut() public payable { \n        bool v0 = msg.sender == _cashOut;\n        if (block.timestamp > stor_2) {\n            v0 = true;\n        }\n        if (v0) {\n            (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\n            require(success, \"Transfer failed.\");\n        }\n    }\n\n    function SetcashOutTime(uint256 varg0) public { \n        if (msg.sender == _setcashOutTime) {\n            stor_2 = varg0;\n        }\n    }\n\n    function SetPwd(bytes32 varg0) public payable { \n        bool v0 = !_setPwd;\n        if (msg.value > 1 ether) {\n            v0 = true;\n        }\n        if (v0 && _pwdHasBeenSet == 0) {\n            _pwdHasBeenSet = uint256(varg0);\n            _setcashOutTime = msg.sender;\n            stor_2 = block.timestamp;\n        }\n    }\n\n    fallback() external payable {}\n\n    function CashOut(bytes memory varg0) public payable { \n        bool v1 = _pwdHasBeenSet == uint256(keccak256(varg0));\n        if (block.timestamp > stor_2) {\n            v1 = true;\n        }\n        if (v1) {\n            (bool success, ) = msg.sender.call{value: address(this).balance}(\"\");\n            require(success, \"Transfer failed.\");\n        }\n    }\n\n    function Setmyadress(address varg0) public { \n        if (msg.sender == _setcashOutTime) {\n            _cashOut = varg0;\n        }\n    }\n\n    function DebugHash(bytes memory varg0) public view returns (bytes32) { \n        return keccak256(varg0);\n    }\n}\n```\n\nNote: The \"__function_selector__\" function and related bytecodes are used to determine which function to call depending on the function selector present in the call data. This is an artifact of the low-level nature of EVM bytecode and does not have a direct equivalent in Solidity. In Solidity, this routing is handled automatically by the EVM according to the function signatures in the contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701457210,
	"id": "chatcmpl-8R32AV3lZ1qcqBdE0sN1xizRX5Rxb",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.14 02:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _pwdHasBeenSet; // STORAGE[0x0]\nuint256 stor_2; // STORAGE[0x2]\nuint8 _setPwd; // STORAGE[0x1] bytes 0 to 0\naddress _setcashOutTime; // STORAGE[0x3] bytes 0 to 19\naddress _cashOut; // STORAGE[0x4] bytes 0 to 19\n\n\nfunction PwdHasBeenSet(bytes32 varg0) public nonPayable { \n    v0 = v1 = ~0x0 & (~0x0 & varg0) == ~0x0 & _pwdHasBeenSet;\n    if (v1) {\n        v0 = msg.sender == _setcashOutTime;\n    }\n    if (v0) {\n        _setPwd = 1;\n    }\n}\n\nfunction CashOut() public payable { \n    v0 = v1 = msg.sender == _cashOut;\n    if (v1) {\n        v0 = block.timestamp > stor_2;\n    }\n    if (v0) {\n        v2 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v2); // checks call status, propagates error data on error\n    }\n}\n\nfunction SetcashOutTime(uint256 varg0) public nonPayable { \n    if (msg.sender == _setcashOutTime) {\n        stor_2 = varg0;\n    }\n}\n\nfunction SetPwd(bytes32 varg0) public payable { \n    v0 = v1 = !_setPwd;\n    if (!_setPwd) {\n        v0 = v2 = msg.value > 0xde0b6b3a7640000;\n    }\n    if (!v0) {\n        v0 = ~0x0 & _pwdHasBeenSet == 0;\n    }\n    if (v0) {\n        _pwdHasBeenSet = ~0x0 & (~0x0 & varg0);\n        _setcashOutTime = msg.sender;\n        stor_2 = block.timestamp;\n    }\n}\n\nfunction fallback() public payable { \n}\n\nfunction CashOut(bytes varg0) public payable { \n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v1 = v2 = ~0x0 & _pwdHasBeenSet == ~0x0 & keccak256(v0.data);\n    if (v2) {\n        v1 = block.timestamp > stor_2;\n    }\n    if (v1) {\n        v3 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v3); // checks call status, propagates error data on error\n    }\n}\n\nfunction Setmyadress(address varg0) public nonPayable { \n    if (msg.sender == _setcashOutTime) {\n        _cashOut = varg0;\n    }\n}\n\nfunction DebugHash(bytes varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v1 = v2 = v2.data;\n    v3 = v4 = v0.length;\n    v5 = v6 = v0.data;\n    while (v3 >= 32) {\n        MEM[v1] = MEM[v5];\n        v1 = v1 + 32;\n        v5 = v5 + 32;\n        v3 = v3 - 32;\n    }\n    MEM[v1] = MEM[v5] & ~(256 ** (32 - v3) - 1) | MEM[v1] & 256 ** (32 - v3) - 1;\n    return ~0x0 & (~0x0 & keccak256(v2));\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x25f885d0 == function_selector) {\n            CashOut(bytes);\n        } else if (0x3f3c51c3 == function_selector) {\n            Setmyadress(address);\n        } else if (0x42fc63be == function_selector) {\n            DebugHash(bytes);\n        } else if (0x65d61ad6 == function_selector) {\n            PwdHasBeenSet(bytes32);\n        } else if (0xa1e564b1 == function_selector) {\n            CashOut();\n        } else if (0xa8276d97 == function_selector) {\n            SetcashOutTime(uint256);\n        } else if (0xdf9933e5 == function_selector) {\n            SetPwd(bytes32);\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 02:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _pwdHasBeenSet; // STORAGE[0x0]\nuint256 stor_2; // STORAGE[0x2]\nuint8 _setPwd; // STORAGE[0x1] bytes 0 to 0\naddress _setcashOutTime; // STORAGE[0x3] bytes 0 to 19\naddress _cashOut; // STORAGE[0x4] bytes 0 to 19\n\n\nfunction PwdHasBeenSet(bytes32 varg0) public nonPayable { \n    v0 = v1 = ~0x0 & (~0x0 & varg0) == ~0x0 & _pwdHasBeenSet;\n    if (v1) {\n        v0 = msg.sender == _setcashOutTime;\n    }\n    if (v0) {\n        _setPwd = 1;\n    }\n}\n\nfunction CashOut() public payable { \n    v0 = v1 = msg.sender == _cashOut;\n    if (v1) {\n        v0 = block.timestamp > stor_2;\n    }\n    if (v0) {\n        v2 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v2); // checks call status, propagates error data on error\n    }\n}\n\nfunction SetcashOutTime(uint256 varg0) public nonPayable { \n    if (msg.sender == _setcashOutTime) {\n        stor_2 = varg0;\n    }\n}\n\nfunction SetPwd(bytes32 varg0) public payable { \n    v0 = v1 = !_setPwd;\n    if (!_setPwd) {\n        v0 = v2 = msg.value > 0xde0b6b3a7640000;\n    }\n    if (!v0) {\n        v0 = ~0x0 & _pwdHasBeenSet == 0;\n    }\n    if (v0) {\n        _pwdHasBeenSet = ~0x0 & (~0x0 & varg0);\n        _setcashOutTime = msg.sender;\n        stor_2 = block.timestamp;\n    }\n}\n\nfunction fallback() public payable { \n}\n\nfunction CashOut(bytes varg0) public payable { \n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v1 = v2 = ~0x0 & _pwdHasBeenSet == ~0x0 & keccak256(v0.data);\n    if (v2) {\n        v1 = block.timestamp > stor_2;\n    }\n    if (v1) {\n        v3 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v3); // checks call status, propagates error data on error\n    }\n}\n\nfunction Setmyadress(address varg0) public nonPayable { \n    if (msg.sender == _setcashOutTime) {\n        _cashOut = varg0;\n    }\n}\n\nfunction DebugHash(bytes varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v1 = v2 = v2.data;\n    v3 = v4 = v0.length;\n    v5 = v6 = v0.data;\n    while (v3 >= 32) {\n        MEM[v1] = MEM[v5];\n        v1 = v1 + 32;\n        v5 = v5 + 32;\n        v3 = v3 - 32;\n    }\n    MEM[v1] = MEM[v5] & ~(256 ** (32 - v3) - 1) | MEM[v1] & 256 ** (32 - v3) - 1;\n    return ~0x0 & (~0x0 & keccak256(v2));\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x25f885d0 == function_selector) {\n            CashOut(bytes);\n        } else if (0x3f3c51c3 == function_selector) {\n            Setmyadress(address);\n        } else if (0x42fc63be == function_selector) {\n            DebugHash(bytes);\n        } else if (0x65d61ad6 == function_selector) {\n            PwdHasBeenSet(bytes32);\n        } else if (0xa1e564b1 == function_selector) {\n            CashOut();\n        } else if (0xa8276d97 == function_selector) {\n            SetcashOutTime(uint256);\n        } else if (0xdf9933e5 == function_selector) {\n            SetPwd(bytes32);\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 02:37 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _pwdHasBeenSet; // STORAGE[0x0]\nuint256 stor_2; // STORAGE[0x2]\nuint8 _setPwd; // STORAGE[0x1] bytes 0 to 0\naddress _setcashOutTime; // STORAGE[0x3] bytes 0 to 19\naddress _cashOut; // STORAGE[0x4] bytes 0 to 19\n\n\nfunction PwdHasBeenSet(bytes32 varg0) public nonPayable { \n    v0 = v1 = ~0x0 & (~0x0 & varg0) == ~0x0 & _pwdHasBeenSet;\n    if (v1) {\n        v0 = msg.sender == _setcashOutTime;\n    }\n    if (v0) {\n        _setPwd = 1;\n    }\n}\n\nfunction CashOut() public payable { \n    v0 = v1 = msg.sender == _cashOut;\n    if (v1) {\n        v0 = block.timestamp > stor_2;\n    }\n    if (v0) {\n        v2 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v2); // checks call status, propagates error data on error\n    }\n}\n\nfunction SetcashOutTime(uint256 varg0) public nonPayable { \n    if (msg.sender == _setcashOutTime) {\n        stor_2 = varg0;\n    }\n}\n\nfunction SetPwd(bytes32 varg0) public payable { \n    v0 = v1 = !_setPwd;\n    if (!_setPwd) {\n        v0 = v2 = msg.value > 0xde0b6b3a7640000;\n    }\n    if (!v0) {\n        v0 = ~0x0 & _pwdHasBeenSet == 0;\n    }\n    if (v0) {\n        _pwdHasBeenSet = ~0x0 & (~0x0 & varg0);\n        _setcashOutTime = msg.sender;\n        stor_2 = block.timestamp;\n    }\n}\n\nfunction fallback() public payable { \n}\n\nfunction CashOut(bytes varg0) public payable { \n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v1 = v2 = ~0x0 & _pwdHasBeenSet == ~0x0 & keccak256(v0.data);\n    if (v2) {\n        v1 = block.timestamp > stor_2;\n    }\n    if (v1) {\n        v3 = msg.sender.call().value((address(this)).balance).gas(!(address(this)).balance * 2300);\n        require(v3); // checks call status, propagates error data on error\n    }\n}\n\nfunction Setmyadress(address varg0) public nonPayable { \n    if (msg.sender == _setcashOutTime) {\n        _cashOut = varg0;\n    }\n}\n\nfunction DebugHash(bytes varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, 36 + varg0, (?).length);\n    v1 = v2 = v2.data;\n    v3 = v4 = v0.length;\n    v5 = v6 = v0.data;\n    while (v3 >= 32) {\n        MEM[v1] = MEM[v5];\n        v1 = v1 + 32;\n        v5 = v5 + 32;\n        v3 = v3 - 32;\n    }\n    MEM[v1] = MEM[v5] & ~(256 ** (32 - v3) - 1) | MEM[v1] & 256 ** (32 - v3) - 1;\n    return ~0x0 & (~0x0 & keccak256(v2));\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x25f885d0 == function_selector) {\n            CashOut(bytes);\n        } else if (0x3f3c51c3 == function_selector) {\n            Setmyadress(address);\n        } else if (0x42fc63be == function_selector) {\n            DebugHash(bytes);\n        } else if (0x65d61ad6 == function_selector) {\n            PwdHasBeenSet(bytes32);\n        } else if (0xa1e564b1 == function_selector) {\n            CashOut();\n        } else if (0xa8276d97 == function_selector) {\n            SetcashOutTime(uint256);\n        } else if (0xdf9933e5 == function_selector) {\n            SetPwd(bytes32);\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 29.00424838066101,
	"usage": {
		"completion_tokens": 594,
		"prompt_tokens": 1126,
		"total_tokens": 1720
	}
}