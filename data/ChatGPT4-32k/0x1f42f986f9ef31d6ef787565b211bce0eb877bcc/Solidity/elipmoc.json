{
	"address": "0x1f42f986f9ef31d6ef787565b211bce0eb877bcc",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity implementation of the decompiled code:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract GameContract {\n    mapping (uint256 => uint256[]) private depositBears;\n    mapping (uint256 => uint256[]) private depositBulls;\n    uint256 private currentDeadline;\n    uint256 private currentRound;\n    uint256 private lastDeadline;\n    uint256 private defaultCurrentDeadlineInHours;\n    uint256 private defaultLastDeadlineInHours;\n    uint256 private countOfBears;\n    uint256 private countOfBulls;\n    uint256 private totalSupplyOfBulls;\n    uint256 private totalSupplyOfBears;\n    uint256 private totalGWSupplyOfBulls;\n    uint256 private totalGWSupplyOfBears;\n    uint256 private probabilityOfBulls;\n    uint256 private probabilityOfBears;\n    uint256 private jackPot;\n    uint256 private winner;\n    uint256 private withdrawn;\n    uint256 private withdrawnGW;\n    uint256 private remainder;\n    uint256 private remainderGW;\n    uint256 private rate;\n    uint256 private rateModifier;\n    address private owner;\n    uint256 private tokenReturn;\n    uint256 private lastTotalSupplyOfBulls;\n    uint256 private lastTotalSupplyOfBears;\n    uint256 private lastTotalGWSupplyOfBulls;\n    uint256 private lastTotalGWSupplyOfBears;\n    uint256 private lastProbabilityOfBulls;\n    uint256 private lastProbabilityOfBears;\n    uint256 private lastJackPot;\n    uint256 private lastWinner;\n    uint256 private lastBalance;\n    uint256 private lastBalanceGW;\n    uint256 private lastCountOfBears;\n    uint256 private lastCountOfBulls;\n    uint256 private lastWithdrawn;\n    uint256 private lastWithdrawnGW;\n    uint8 private finished;\n    uint160 private lastHero;\n    uint160 private lastHeroHistory;\n    uint160 private stor_1b_0_19;\n    address private lastRoundHero;\n    address private bearsContract;\n    address private bullsContract;\n    address private gameWaveContract;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function checkDeadline() private view returns (bool) { \n        if (block.timestamp <= currentDeadline) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    function _SafeDiv(uint256 a, uint256 b) private pure returns (uint256) { \n        require(a > 0);\n        return b / a;\n    }\n\n    function _SafeAdd(uint256 a, uint256 b) private pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a);\n        return c;\n    }\n\n    // More functions to be implemented...\n\n    function setBullsAddress(address _bullsContract) public {\n        require(msg.sender == owner);\n        require(_bullsContract != address(0));\n        bullsContract = _bullsContract;\n    }\n\n    function setBearsAddress(address _bearsContract) public {\n        require(msg.sender == owner);\n        require(_bearsContract != address(0));\n        bearsContract = _bearsContract;\n    }\n\n    function setGameWaveAddress(address _gameWaveContract) public {\n        require(msg.sender == owner);\n        require(_gameWaveContract != address(0));\n        gameWaveContract = _gameWaveContract;\n    }\n\n    // More functions to be implemented...\n}\n```\n\nPlease note that:\n\n- This is a simplified version of the contract and many of the functions are not implemented.\n- Solidity version is assumed to be 0.8.0 but it could be different.\n- The decompiled code does not provide information about the public, external, internal, or private visibility of the functions and variables.\n- The decompiled code does not provide information about the state mutability of the functions (whether they are pure, view, or payable).\n- The decompiled code does not provide information about the inheritance or interfaces.\n- The decompiled code does not provide information about the events, libraries, or other features of Solidity.\n- The decompiled code does not provide information about the constructor and the parameters it might require.\n- The decompiled code does not provide information about the error messages in the require statements.\n- The decompiled code does not provide information about the exact version of Solidity used to compile the contract.",
				"role": "assistant"
			}
		}
	],
	"created": 1701463077,
	"id": "chatcmpl-8R4YnM36tOpB7wmfzGjDDMLCdcxiV",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.26 00:41 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _depositBears; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _depositBulls; // STORAGE[0x2]\nuint256 _currentDeadline; // STORAGE[0x3]\nuint256 _currentRound; // STORAGE[0x4]\nuint256 _lastDeadline; // STORAGE[0x5]\nuint256 _defaultCurrentDeadlineInHours; // STORAGE[0x6]\nuint256 _defaultLastDeadlineInHours; // STORAGE[0x7]\nuint256 _countOfBears; // STORAGE[0x8]\nuint256 _countOfBulls; // STORAGE[0x9]\nuint256 _totalSupplyOfBulls; // STORAGE[0xa]\nuint256 _totalSupplyOfBears; // STORAGE[0xb]\nuint256 _totalGWSupplyOfBulls; // STORAGE[0xc]\nuint256 _totalGWSupplyOfBears; // STORAGE[0xd]\nuint256 _probabilityOfBulls; // STORAGE[0xe]\nuint256 _probabilityOfBears; // STORAGE[0xf]\nuint256 _jackPot; // STORAGE[0x12]\nuint256 _winner; // STORAGE[0x13]\nuint256 _withdrawn; // STORAGE[0x14]\nuint256 _withdrawnGW; // STORAGE[0x15]\nuint256 _remainder; // STORAGE[0x16]\nuint256 _remainderGW; // STORAGE[0x17]\nuint256 _rate; // STORAGE[0x18]\nuint256 _rateModifier; // STORAGE[0x19]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint256 _tokenReturn; // STORAGE[0x1a]\nuint256 _lastTotalSupplyOfBulls; // STORAGE[0x1c]\nuint256 _lastTotalSupplyOfBears; // STORAGE[0x1d]\nuint256 _lastTotalGWSupplyOfBulls; // STORAGE[0x1e]\nuint256 _lastTotalGWSupplyOfBears; // STORAGE[0x1f]\nuint256 _lastProbabilityOfBulls; // STORAGE[0x20]\nuint256 _lastProbabilityOfBears; // STORAGE[0x21]\nuint256 _lastJackPot; // STORAGE[0x23]\nuint256 _lastWinner; // STORAGE[0x24]\nuint256 _lastBalance; // STORAGE[0x25]\nuint256 _lastBalanceGW; // STORAGE[0x26]\nuint256 _lastCountOfBears; // STORAGE[0x27]\nuint256 _lastCountOfBulls; // STORAGE[0x28]\nuint256 _lastWithdrawn; // STORAGE[0x29]\nuint256 _lastWithdrawnGW; // STORAGE[0x2a]\nuint8 _finished; // STORAGE[0x2b] bytes 0 to 0\nuint160 _lastHero; // STORAGE[0x10] bytes 0 to 19\nuint160 _lastHeroHistory; // STORAGE[0x11] bytes 0 to 19\nuint160 stor_1b_0_19; // STORAGE[0x1b] bytes 0 to 19\naddress _lastRoundHero; // STORAGE[0x22] bytes 0 to 19\naddress _bearsContract; // STORAGE[0x2b] bytes 1 to 20\naddress _bullsContract; // STORAGE[0x2c] bytes 0 to 19\naddress _gameWaveContract; // STORAGE[0x2d] bytes 0 to 19\n\n\nfunction 0x10d6() private { \n    if (block.timestamp <= _currentDeadline) {\n        v0 = v1 = 1;\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction 0x115b(uint256 varg0) private { \n    if (0 != _rateModifier) {\n        v0 = v1 = _SafeDiv(_rate, varg0);\n    } else {\n        v0 = v2 = 0x2190(_rate, varg0);\n    }\n    return v0;\n}\n\nfunction 0x1660(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    v0 = v1 = !_winner;\n    if (v1) {\n        v0 = v2 = 0x10d6();\n    }\n    require(v0);\n    require(_gameWaveContract.code.size);\n    v3, v4 = _gameWaveContract.balanceOf(_bullsContract).gas(msg.gas);\n    require(v3); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _totalGWSupplyOfBulls = v4;\n    require(_gameWaveContract.code.size);\n    v5, v6 = _gameWaveContract.balanceOf(_bearsContract).gas(msg.gas);\n    require(v5); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _totalGWSupplyOfBears = v6;\n    v7 = v8 = 0;\n    v9 = v10 = 6053;\n    v11 = v12 = 100;\n    v13 = v14 = _SafeAdd(_totalSupplyOfBears, _totalSupplyOfBulls);\n    while (1) {\n        v11 = _SafeDiv(v11, v13);\n        if (_totalGWSupplyOfBulls < 0xde0b6b3a7640000) {\n            _totalGWSupplyOfBulls = 0;\n        }\n        if (_totalGWSupplyOfBears < 0xde0b6b3a7640000) {\n            _totalGWSupplyOfBears = 0;\n        }\n        if (_totalGWSupplyOfBulls > _totalGWSupplyOfBears) {\n            v7 = v15 = 0;\n            v9 = v16 = 6294;\n            v11 = v17 = 0x2386f26fc10000;\n            require(_totalGWSupplyOfBears <= _totalGWSupplyOfBulls);\n            v13 = _totalGWSupplyOfBulls - _totalGWSupplyOfBears;\n            goto 0xe810x1660;\n        } else {\n            v7 = v18 = 0;\n            v9 = v19 = 6150;\n            v11 = v20 = 0x2386f26fc10000;\n            require(_totalGWSupplyOfBulls <= _totalGWSupplyOfBears);\n            v13 = v21 = _totalGWSupplyOfBears - _totalGWSupplyOfBulls;\n            goto 0xe810x1660;\n        }\n        v11 = v22 = 6202;\n        v7 = v23 = 0x115b(v11);\n        v9 = v24 = 6190;\n        v13 = v25 = 0x2190(100, _totalSupplyOfBears);\n        v11 = v26 = 6334;\n        v7 = v27 = 0x115b(v11);\n        v9 = v28 = 6190;\n        v13 = v29 = 0x2190(100, _totalSupplyOfBulls);\n    }\n    v30 = _SafeAdd(v7, v11);\n    _probabilityOfBears = v30;\n    if (8000 < v30) {\n        _probabilityOfBears = 8000;\n    }\n    if (_probabilityOfBears < 2000) {\n        _probabilityOfBears = 2000;\n    }\n    _probabilityOfBulls = 10000 - _probabilityOfBears;\n    require(_gameWaveContract.code.size);\n    v31, v32 = _gameWaveContract.balanceOf(_bullsContract).gas(msg.gas);\n    require(v31); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _totalGWSupplyOfBulls = v32;\n    require(_gameWaveContract.code.size);\n    v33, v34 = _gameWaveContract.balanceOf(_bearsContract).gas(msg.gas);\n    require(v33); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _totalGWSupplyOfBears = v34;\n    return ;\n    _probabilityOfBulls = v30;\n    if (8000 < v30) {\n        _probabilityOfBulls = 8000;\n    }\n    if (_probabilityOfBulls < 2000) {\n        _probabilityOfBulls = 2000;\n    }\n    _probabilityOfBears = 10000 - _probabilityOfBulls;\n}\n\nfunction 0x2190(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        require(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0);\n    assert(varg0);\n    return varg1 / varg0;\n}\n\nfunction fallback() public payable { \n    if (!msg.value) {\n        v0 = v1 = _depositBears[msg.sender];\n        if (!_depositBears[msg.sender]) {\n            v0 = v2 = _depositBulls[msg.sender];\n        }\n        require(v0);\n        v3 = v4 = 0;\n        v5 = v6 = 1 == _lastWinner;\n        if (v6) {\n            v5 = v7 = _depositBears[msg.sender];\n        }\n        if (v5) {\n            v3 = v8 = 0xdef(msg.sender);\n        }\n        v9 = v10 = 2 == _lastWinner;\n        if (v10) {\n            v9 = v11 = _depositBulls[msg.sender];\n        }\n        if (v9) {\n            v3 = v12 = 0xdef(msg.sender);\n        }\n        if (v3) {\n            _depositBears[msg.sender] = 0;\n            _depositBulls[~0 + _currentRound] = 0;\n            v13 = _SafeAdd(v3, _withdrawn);\n            _withdrawn = v13;\n            v14 = msg.sender.call().value(v3).gas(2300 * !v3);\n            require(v14); // checks call status, propagates error data on error\n        }\n        v15 = v16 = 1 == _lastWinner;\n        if (v16) {\n            v15 = v17 = !_depositBears[msg.sender];\n        }\n        if (!v15) {\n            v15 = v18 = 2 == _lastWinner;\n            if (v18) {\n                v15 = v19 = !_depositBulls[msg.sender];\n            }\n        }\n        if (v15) {\n            v20 = v21 = 0;\n            v20 = v22 = 0;\n            v23 = v24 = 3596;\n            v25 = v26 = 100;\n            v27 = _SafeAdd(_lastTotalGWSupplyOfBulls, _lastTotalGWSupplyOfBears);\n            v28 = 0x2190(80, v27);\n            while (1) {\n                v20 = _SafeDiv(v25, v28);\n                if (_depositBears[~0 + _currentRound]) {\n                    v25 = v29 = _lastTotalSupplyOfBears;\n                    v23 = v30 = 3725;\n                    v28 = 0x2190(_depositBears[~0 + _currentRound], v20);\n                }\n                if (_depositBulls[~0 + _currentRound]) {\n                    v25 = v31 = _lastTotalSupplyOfBulls;\n                    v23 = v32 = 3842;\n                    v28 = 0x2190(_depositBulls[~0 + _currentRound], v20);\n                }\n            }\n            v33 = _SafeAdd(v20, _withdrawnGW);\n            _withdrawnGW = v33;\n            require(_gameWaveContract.code.size);\n            v34 = _gameWaveContract.transfer(msg.sender, v20).gas(msg.gas);\n            require(v34); // checks call status, propagates error data on error\n            require(RETURNDATASIZE() >= 32);\n        }\n        if (msg.sender == _lastRoundHero) {\n            _lastHeroHistory = _lastRoundHero;\n            _lastRoundHero = 0;\n            v35 = _SafeAdd(_lastJackPot, _withdrawn);\n            _withdrawn = v35;\n            v36 = msg.sender.call().value(_lastJackPot).gas(2300 * !_lastJackPot);\n            require(v36); // checks call status, propagates error data on error\n        }\n    }\n}\n\nfunction countOfBulls() public nonPayable { \n    return _countOfBulls;\n}\n\nfunction rateModifier() public nonPayable { \n    return _rateModifier;\n}\n\nfunction totalGWSupplyOfBulls() public nonPayable { \n    return _totalGWSupplyOfBulls;\n}\n\nfunction depositBears(uint256 varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _depositBears[varg1];\n}\n\nfunction setBullsAddress(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!_bullsContract);\n    _bullsContract = varg0;\n}\n\nfunction totalSupplyOfBears() public nonPayable { \n    return _totalSupplyOfBears;\n}\n\nfunction defaultCurrentDeadlineInHours() public nonPayable { \n    return _defaultCurrentDeadlineInHours;\n}\n\nfunction calculateGWPrize(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    v0 = v2 = 0;\n    v3 = v4 = 4092;\n    v5 = v6 = 100;\n    v7 = _SafeAdd(_totalGWSupplyOfBulls, _totalGWSupplyOfBears);\n    v8 = v9 = 0x2190(80, v7);\n    while (1) {\n        v0 = _SafeDiv(v5, v8);\n        if (_depositBears[_currentRound]) {\n            v5 = _totalSupplyOfBears;\n            v3 = v10 = 4201;\n            v8 = 0x2190(_depositBears[_currentRound], v0);\n        }\n        if (_depositBulls[_currentRound]) {\n            v5 = v11 = _totalSupplyOfBulls;\n            v3 = v12 = 3842;\n            v8 = 0x2190(_depositBulls[_currentRound], v0);\n        }\n    }\n    return v0;\n}\n\nfunction getState() public nonPayable { \n    v0 = 0x10d6();\n    return v0;\n}\n\nfunction lastTotalSupplyOfBulls() public nonPayable { \n    return _lastTotalSupplyOfBulls;\n}\n\nfunction lastTotalGWSupplyOfBears() public nonPayable { \n    return _lastTotalGWSupplyOfBears;\n}\n\nfunction setBearsAddress(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!_bearsContract);\n    _bearsContract = varg0;\n}\n\nfunction lastRoundHero() public nonPayable { \n    return _lastRoundHero;\n}\n\nfunction rate() public nonPayable { \n    return _rate;\n}\n\nfunction probabilityOfBears() public nonPayable { \n    return _probabilityOfBears;\n}\n\nfunction estimateTokenPercent(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (0 != _rateModifier) {\n        v0 = v1 = _SafeDiv(_rate, varg0);\n    } else {\n        v0 = v2 = 0x2190(_rate, varg0);\n    }\n    return v0;\n}\n\nfunction probabilityOfBulls() public nonPayable { \n    return _probabilityOfBulls;\n}\n\nfunction countOfBears() public nonPayable { \n    return _countOfBears;\n}\n\nfunction lastBalanceGW() public nonPayable { \n    return _lastBalanceGW;\n}\n\nfunction remainderGW() public nonPayable { \n    return _remainderGW;\n}\n\nfunction lastWithdrawn() public nonPayable { \n    return _lastWithdrawn;\n}\n\nfunction jackPot() public nonPayable { \n    return _jackPot;\n}\n\nfunction calculateLastGWPrize(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    v0 = v2 = 0;\n    v3 = v4 = 3596;\n    v5 = v6 = 100;\n    v7 = _SafeAdd(_lastTotalGWSupplyOfBulls, _lastTotalGWSupplyOfBears);\n    v8 = v9 = 0x2190(80, v7);\n    while (1) {\n        v0 = _SafeDiv(v5, v8);\n        if (_depositBears[~0 + _currentRound]) {\n            v5 = _lastTotalSupplyOfBears;\n            v3 = v10 = 3725;\n            v8 = 0x2190(_depositBears[~0 + _currentRound], v0);\n        }\n        if (_depositBulls[~0 + _currentRound]) {\n            v5 = v11 = _lastTotalSupplyOfBulls;\n            v3 = v12 = 3842;\n            v8 = 0x2190(_depositBulls[~0 + _currentRound], v0);\n        }\n    }\n    return v0;\n}\n\nfunction depositBulls(uint256 varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _depositBulls[varg1];\n}\n\nfunction totalSupplyOfBulls() public nonPayable { \n    return _totalSupplyOfBulls;\n}\n\nfunction lastWithdrawnGW() public nonPayable { \n    return _lastWithdrawnGW;\n}\n\nfunction lastHero() public nonPayable { \n    return _lastHero;\n}\n\nfunction withdrawnGW() public nonPayable { \n    return _withdrawnGW;\n}\n\nfunction currentDeadline() public nonPayable { \n    return _currentDeadline;\n}\n\nfunction BearsContract() public nonPayable { \n    return _bearsContract;\n}\n\nfunction setGameWaveAddress(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!_gameWaveContract);\n    _gameWaveContract = varg0;\n}\n\nfunction lastDeadline() public nonPayable { \n    return _lastDeadline;\n}\n\nfunction lastProbabilityOfBears() public nonPayable { \n    return _lastProbabilityOfBears;\n}\n\nfunction currentRound() public nonPayable { \n    return _currentRound;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction calculateETHPrize(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    v2 = _SafeAdd(_totalSupplyOfBulls, _totalSupplyOfBears);\n    if (_depositBears[_currentRound]) {\n        v3 = _totalSupplyOfBears;\n        v4 = v5 = 4201;\n        v6 = v7 = 0x2190(_depositBears[_currentRound], v2);\n    }\n    v0 = v8 = _SafeDiv(v3, v6);\n    if (_depositBulls[_currentRound]) {\n        v3 = v9 = _totalSupplyOfBulls;\n        v4 = v10 = 3842;\n        v6 = v11 = 0x2190(_depositBulls[_currentRound], v2);\n    }\n    return v0;\n}\n\nfunction lastBalance() public nonPayable { \n    return _lastBalance;\n}\n\nfunction setInfo(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = 1723;\n    require(msg.data.length - 4 >= 64);\n    v2 = v3 = msg.sender == _bearsContract;\n    if (msg.sender != _bearsContract) {\n        v2 = v4 = msg.sender == _bullsContract;\n    }\n    require(v2);\n    if (msg.sender == _bearsContract) {\n        require(!_depositBulls[varg0], 'You are already in bulls team');\n        if (!_depositBears[varg0]) {\n            _countOfBears += 1;\n        }\n        v0 = v5 = 5039;\n        v6 = v7 = 5024;\n        v8 = v9 = 100;\n        v10 = v11 = 0x2190(90, varg1);\n    }\n    while (1) {\n        v12 = _SafeDiv(v8, v10);\n        v13 = _SafeAdd(v12, _totalSupplyOfBears);\n        _totalSupplyOfBears = v13;\n        v0 = v14 = 5117;\n        v6 = v15 = 5067;\n        v8 = v16 = 100;\n        v10 = v17 = 0x2190(90, v0);\n        v18 = _SafeAdd(v12, _totalSupplyOfBulls);\n        _totalSupplyOfBulls = v18;\n        v0 = v19 = 5468;\n        v6 = v20 = 5418;\n        v8 = v21 = 100;\n        v10 = v22 = 0x2190(90, v0);\n    }\n    v23 = address(v0);\n    v24 = _SafeAdd(v12, _depositBears[v23]);\n    v25 = address(v0);\n    _depositBears[v25] = v24;\n    v26 = address(v0);\n    v27 = _SafeAdd(v12, _depositBulls[v26]);\n    v28 = address(v0);\n    _depositBulls[v28] = v27;\n    _jackPot += v12;\n    0x1660(5630, v0, v0);\n    exit;\n    if (msg.sender == _bullsContract) {\n        v29 = address(v0);\n        require(!_depositBears[v29], 'You are already in bears team');\n        v30 = address(v0);\n        if (!_depositBulls[v30]) {\n            _countOfBulls += 1;\n        }\n        v0 = v31 = 5390;\n        v6 = v32 = 5375;\n        v8 = v33 = 100;\n        v10 = v34 = 0x2190(90, v0);\n    }\n    _lastHero = v0;\n    v35 = _SafeAdd(120, _currentDeadline);\n    if (v35 > _lastDeadline) {\n        _currentDeadline = _lastDeadline;\n    } else {\n        v36 = _SafeAdd(120, _currentDeadline);\n        _currentDeadline = v36;\n    }\n    v6 = v37 = 5613;\n    v8 = v38 = 100;\n    v10 = v39 = 0x2190(10, v0);\n}\n\nfunction totalGWSupplyOfBears() public nonPayable { \n    return _totalGWSupplyOfBears;\n}\n\nfunction lastCountOfBears() public nonPayable { \n    return _lastCountOfBears;\n}\n\nfunction remainder() public nonPayable { \n    return _remainder;\n}\n\nfunction defaultLastDeadlineInHours() public nonPayable { \n    return _defaultLastDeadlineInHours;\n}\n\nfunction lastHeroHistory() public nonPayable { \n    return _lastHeroHistory;\n}\n\nfunction setRateToken(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _rate = varg0;\n    _rateModifier = varg1;\n    return 0;\n}\n\nfunction getNow() public nonPayable { \n    return block.timestamp;\n}\n\nfunction finished() public nonPayable { \n    return _finished;\n}\n\nfunction withdrawn() public nonPayable { \n    return _withdrawn;\n}\n\nfunction calculateProbability() public nonPayable { \n    0x1660(1723, v0, v1);\n}\n\nfunction lastJackPot() public nonPayable { \n    return _lastJackPot;\n}\n\nfunction tokenReturn() public nonPayable { \n    return _tokenReturn;\n}\n\nfunction BullsContract() public nonPayable { \n    return _bullsContract;\n}\n\nfunction getWinners() public nonPayable { \n    v0 = v1 = !_winner;\n    if (v1) {\n        v2 = 0x10d6();\n        v0 = v3 = !v2;\n    }\n    require(v0);\n    MEM[64] = MEM[64] + 256;\n    v4 = v5 = keccak256(this.balance, _totalSupplyOfBulls, _totalSupplyOfBears, _totalGWSupplyOfBulls, _totalGWSupplyOfBulls, block.difficulty, block.timestamp);\n    if (!v5) {\n        v4 = v6 = 1;\n    }\n    v7 = v8 = v4 % 10000 >= 1;\n    if (v4 % 10000 >= 1) {\n        v7 = v9 = v4 % 10000 <= _probabilityOfBears;\n    }\n    if (v7) {\n        _winner = 1;\n    }\n    v10 = v11 = _probabilityOfBears < v4 % 10000;\n    if (v11) {\n        v10 = v12 = v4 % 10000 <= 10000;\n    }\n    if (v10) {\n        _winner = 2;\n    }\n    require(_gameWaveContract.code.size);\n    v13, v14 = _gameWaveContract.balanceOf(_bullsContract).gas(msg.gas);\n    require(v13); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v14 > 0) {\n        require(_gameWaveContract.code.size);\n        v15, v16 = _gameWaveContract.balanceOf(_bullsContract).gas(msg.gas);\n        require(v15); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        require(_gameWaveContract.code.size);\n        v17 = _gameWaveContract.transferFrom(_bullsContract, address(this), v16).gas(msg.gas);\n        require(v17); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n    }\n    require(_gameWaveContract.code.size);\n    v18, v19 = _gameWaveContract.balanceOf(_bearsContract).gas(msg.gas);\n    require(v18); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v19 > 0) {\n        require(_gameWaveContract.code.size);\n        v20, v21 = _gameWaveContract.balanceOf(_bearsContract).gas(msg.gas);\n        require(v20); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        require(_gameWaveContract.code.size);\n        v22 = _gameWaveContract.transferFrom(_bearsContract, address(this), v21).gas(msg.gas);\n        require(v22); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n    }\n    _lastTotalSupplyOfBulls = _totalSupplyOfBulls;\n    _lastTotalSupplyOfBears = _totalSupplyOfBears;\n    _lastTotalGWSupplyOfBears = _totalGWSupplyOfBears;\n    _lastTotalGWSupplyOfBulls = _totalGWSupplyOfBulls;\n    _lastRoundHero = _lastHero;\n    _lastJackPot = _jackPot;\n    _lastWinner = _winner;\n    _lastCountOfBears = _countOfBears;\n    _lastCountOfBulls = _countOfBulls;\n    _lastWithdrawn = _withdrawn;\n    _lastWithdrawnGW = _withdrawnGW;\n    if (_lastBalance > _withdrawn) {\n        require(_lastWithdrawn <= _lastBalance);\n        _remainder = _lastBalance - _lastWithdrawn;\n        v23 = _gameWaveContract.call().value(_lastBalance - _lastWithdrawn).gas(2300 * !(_lastBalance - _lastWithdrawn));\n        require(v23); // checks call status, propagates error data on error\n    }\n    v24 = v25 = 7922;\n    v26 = v27 = _lastJackPot;\n    v28 = v29 = _SafeAdd(_lastTotalSupplyOfBulls, _lastTotalSupplyOfBears);\n    while (1) {\n        v30 = _SafeAdd(v26, v28);\n        _lastBalance = v30;\n        if (_lastBalanceGW > _lastWithdrawnGW) {\n            require(_lastWithdrawnGW <= _lastBalanceGW);\n            _remainderGW = _lastBalanceGW - _lastWithdrawnGW;\n            v24 = v31 = 8003;\n            v26 = v32 = _remainderGW;\n            v33 = _SafeAdd(_totalGWSupplyOfBulls, _totalGWSupplyOfBears);\n            v34 = 0x2190(20, v33);\n            v28 = v35 = _SafeDiv(100, v34);\n        }\n    }\n    require(_gameWaveContract.code.size);\n    v36, v37 = _gameWaveContract.balanceOf(this).gas(msg.gas);\n    require(v36); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _lastBalanceGW = v37;\n    _totalSupplyOfBulls = 0;\n    _totalSupplyOfBears = 0;\n    _totalGWSupplyOfBulls = 0;\n    _totalGWSupplyOfBears = 0;\n    _remainder = 0;\n    _remainderGW = 0;\n    _jackPot = 0;\n    _withdrawn = 0;\n    _winner = 0;\n    _withdrawnGW = 0;\n    _countOfBears = 0;\n    _countOfBulls = 0;\n    _probabilityOfBulls = 0;\n    _probabilityOfBears = 0;\n    _defaultCurrentDeadlineInHours = _defaultCurrentDeadlineInHours;\n    _defaultLastDeadlineInHours = _defaultLastDeadlineInHours;\n    _currentDeadline = block.timestamp + 3600 * _defaultCurrentDeadlineInHours;\n    _lastDeadline = 3600 * _defaultLastDeadlineInHours + block.timestamp;\n    _currentRound += 1;\n    exit;\n    _tokenReturn = v30;\n    require(_gameWaveContract.code.size);\n    v38 = _gameWaveContract.transfer(stor_1b_0_19, v30).gas(msg.gas);\n    require(v38); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n}\n\nfunction winner() public nonPayable { \n    return _winner;\n}\n\nfunction lastProbabilityOfBulls() public nonPayable { \n    return _lastProbabilityOfBulls;\n}\n\nfunction calculateLastETHPrize(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    v2 = _SafeAdd(_lastTotalSupplyOfBulls, _lastTotalSupplyOfBears);\n    if (_depositBears[~0 + _currentRound]) {\n        v3 = _lastTotalSupplyOfBears;\n        v4 = v5 = 3725;\n        v6 = v7 = 0x2190(_depositBears[~0 + _currentRound], v2);\n    }\n    v0 = v8 = _SafeDiv(v3, v6);\n    if (_depositBulls[~0 + _currentRound]) {\n        v3 = v9 = _lastTotalSupplyOfBulls;\n        v4 = v10 = 3842;\n        v6 = v11 = 0x2190(_depositBulls[~0 + _currentRound], v2);\n    }\n    return v0;\n}\n\nfunction lastCountOfBulls() public nonPayable { \n    return _lastCountOfBulls;\n}\n\nfunction lastTotalGWSupplyOfBulls() public nonPayable { \n    return _lastTotalGWSupplyOfBulls;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    require(varg0);\n    _owner = varg0;\n}\n\nfunction GameWaveContract() public nonPayable { \n    return _gameWaveContract;\n}\n\nfunction setCrowdSale(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    stor_1b_0_19 = varg0;\n}\n\nfunction lastTotalSupplyOfBears() public nonPayable { \n    return _lastTotalSupplyOfBears;\n}\n\nfunction setRoundTime(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _defaultCurrentDeadlineInHours = varg0;\n    _defaultLastDeadlineInHours = varg1;\n    _currentDeadline = block.timestamp + 3600 * varg0;\n    _lastDeadline = 3600 * varg1 + block.timestamp;\n}\n\nfunction lastWinner() public nonPayable { \n    return _lastWinner;\n}\n\nfunction 0xdef(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = _SafeAdd(_lastTotalSupplyOfBulls, _lastTotalSupplyOfBears);\n    v3 = address(varg0);\n    if (_depositBears[~0 + _currentRound]) {\n        v4 = _lastTotalSupplyOfBears;\n        v5 = address(varg0);\n        v6 = v7 = 3725;\n        v8 = v9 = 0x2190(_depositBears[~0 + _currentRound], v2);\n    }\n    v0 = v10 = _SafeDiv(v4, v8);\n    v11 = address(varg0);\n    if (_depositBulls[~0 + _currentRound]) {\n        v4 = v12 = _lastTotalSupplyOfBulls;\n        v13 = address(varg0);\n        v6 = v14 = 3842;\n        v8 = v15 = 0x2190(_depositBulls[~0 + _currentRound], v2);\n    }\n    return v0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    require(v0 >= varg1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        v0 = function_selector >> 224;\n        if (0x89db3d20 > v0) {\n            if (0x32bc4cfd > v0) {\n                if (0x16dc3fbe > v0) {\n                    if (0x12cc1203 > v0) {\n                        if (0x58c6ed1 == v0) {\n                            countOfBulls();\n                        } else if (0xef4ea03 == v0) {\n                            rateModifier();\n                        } else if (0x12c426fe == v0) {\n                            totalGWSupplyOfBulls();\n                        }\n                    } else if (0x12cc1203 == v0) {\n                        depositBears(uint256,address);\n                    } else if (0x12d65fd9 == v0) {\n                        setBullsAddress(address);\n                    } else if (0x12f4ced1 == v0) {\n                        totalSupplyOfBears();\n                    } else if (0x165ee67e == v0) {\n                        defaultCurrentDeadlineInHours();\n                    }\n                } else if (0x2acf4217 > v0) {\n                    if (0x16dc3fbe == v0) {\n                        calculateGWPrize(address);\n                    } else if (0x1865c57d == v0) {\n                        getState();\n                    } else if (0x1f803c6e == v0) {\n                        lastTotalSupplyOfBulls();\n                    } else if (0x2073c8d8 == v0) {\n                        lastTotalGWSupplyOfBears();\n                    }\n                } else if (0x2acf4217 == v0) {\n                    setBearsAddress(address);\n                } else if (0x2b566abf == v0) {\n                    lastRoundHero();\n                } else if (0x2c4e722e == v0) {\n                    rate();\n                } else if (0x327fee98 == v0) {\n                    probabilityOfBears();\n                }\n            } else if (0x5338312a > v0) {\n                if (0x41911077 > v0) {\n                    if (0x32bc4cfd == v0) {\n                        estimateTokenPercent(uint256);\n                    } else if (0x353fe20c == v0) {\n                        probabilityOfBulls();\n                    } else if (0x36d7ac39 == v0) {\n                        countOfBears();\n                    } else if (0x39c70390 == v0) {\n                        lastBalanceGW();\n                    }\n                } else if (0x41911077 == v0) {\n                    remainderGW();\n                } else if (0x472c9fcc == v0) {\n                    lastWithdrawn();\n                } else if (0x4a78cdba == v0) {\n                    jackPot();\n                } else if (0x4e0dea91 == v0) {\n                    calculateLastGWPrize(address);\n                }\n            } else if (0x718f571b > v0) {\n                if (0x5338312a == v0) {\n                    depositBulls(uint256,address);\n                } else if (0x5a2215de == v0) {\n                    totalSupplyOfBulls();\n                } else if (0x6654a773 == v0) {\n                    lastWithdrawnGW();\n                } else if (0x6cae4a8f == v0) {\n                    lastHero();\n                }\n            } else if (0x718f571b == v0) {\n                withdrawnGW();\n            } else if (0x721ec693 == v0) {\n                currentDeadline();\n            } else if (0x72f35f9e == v0) {\n                BearsContract();\n            } else if (0x7eb4530a == v0) {\n                setGameWaveAddress(address);\n            }\n        } else if (0xc922d4d5 > v0) {\n            if (0x9b2f2818 > v0) {\n                if (0x8e5e66c8 > v0) {\n                    if (0x89db3d20 == v0) {\n                        lastDeadline();\n                    } else if (0x8a1704af == v0) {\n                        lastProbabilityOfBears();\n                    } else if (0x8a19c8bc == v0) {\n                        currentRound();\n                    } else if (0x8da5cb5b == v0) {\n                        owner();\n                    }\n                } else if (0x8e5e66c8 == v0) {\n                    calculateETHPrize(address);\n                } else if (0x8f1c56bd == v0) {\n                    lastBalance();\n                } else if (0x914dea93 == v0) {\n                    setInfo(address,uint256);\n                } else if (0x96e26159 == v0) {\n                    totalGWSupplyOfBears();\n                }\n            } else if (0xb2412340 > v0) {\n                if (0x9b2f2818 == v0) {\n                    lastCountOfBears();\n                } else if (0xa0684251 == v0) {\n                    remainder();\n                } else if (0xa2d5738f == v0) {\n                    defaultLastDeadlineInHours();\n                } else if (0xa80a8cf9 == v0) {\n                    lastHeroHistory();\n                }\n            } else if (0xb2412340 == v0) {\n                setRateToken(uint256,uint256);\n            } else if (0xbbe4fd50 == v0) {\n                getNow();\n            } else if (0xbef4876b == v0) {\n                finished();\n            } else if (0xc80ec522 == v0) {\n                withdrawn();\n            }\n        } else if (0xeed22fc0 > v0) {\n            if (0xdf15c37e > v0) {\n                if (0xc922d4d5 == v0) {\n                    calculateProbability();\n                } else if (0xd52f80a5 == v0) {\n                    lastJackPot();\n                } else if (0xd8829531 == v0) {\n                    tokenReturn();\n                } else if (0xdaf2917e == v0) {\n                    BullsContract();\n                }\n            } else if (0xdf15c37e == v0) {\n                getWinners();\n            } else if (0xdfbf53ae == v0) {\n                winner();\n            } else if (0xdfe66829 == v0) {\n                lastProbabilityOfBulls();\n            } else if (0xe52aaf0e == v0) {\n                calculateLastETHPrize(address);\n            }\n        } else if (0xf4b5cbc4 > v0) {\n            if (0xeed22fc0 == v0) {\n                lastCountOfBulls();\n            } else if (0xf24c7d71 == v0) {\n                lastTotalGWSupplyOfBulls();\n            } else if (0xf2fde38b == v0) {\n                transferOwnership(address);\n            } else if (0xf3ce955e == v0) {\n                GameWaveContract();\n            }\n        } else if (0xf4b5cbc4 == v0) {\n            setCrowdSale(address);\n        } else if (0xfb4dcb7a == v0) {\n            lastTotalSupplyOfBears();\n        } else if (0xfc9dc608 == v0) {\n            setRoundTime(uint256,uint256);\n        } else if (0xfe188184 == v0) {\n            lastWinner();\n        }\n    }\n    fallback();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 00:41 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _depositBears; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _depositBulls; // STORAGE[0x2]\nuint256 _currentDeadline; // STORAGE[0x3]\nuint256 _currentRound; // STORAGE[0x4]\nuint256 _lastDeadline; // STORAGE[0x5]\nuint256 _defaultCurrentDeadlineInHours; // STORAGE[0x6]\nuint256 _defaultLastDeadlineInHours; // STORAGE[0x7]\nuint256 _countOfBears; // STORAGE[0x8]\nuint256 _countOfBulls; // STORAGE[0x9]\nuint256 _totalSupplyOfBulls; // STORAGE[0xa]\nuint256 _totalSupplyOfBears; // STORAGE[0xb]\nuint256 _totalGWSupplyOfBulls; // STORAGE[0xc]\nuint256 _totalGWSupplyOfBears; // STORAGE[0xd]\nuint256 _probabilityOfBulls; // STORAGE[0xe]\nuint256 _probabilityOfBears; // STORAGE[0xf]\nuint256 _jackPot; // STORAGE[0x12]\nuint256 _winner; // STORAGE[0x13]\nuint256 _withdrawn; // STORAGE[0x14]\nuint256 _withdrawnGW; // STORAGE[0x15]\nuint256 _remainder; // STORAGE[0x16]\nuint256 _remainderGW; // STORAGE[0x17]\nuint256 _rate; // STORAGE[0x18]\nuint256 _rateModifier; // STORAGE[0x19]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint256 _tokenReturn; // STORAGE[0x1a]\nuint256 _lastTotalSupplyOfBulls; // STORAGE[0x1c]\nuint256 _lastTotalSupplyOfBears; // STORAGE[0x1d]\nuint256 _lastTotalGWSupplyOfBulls; // STORAGE[0x1e]\nuint256 _lastTotalGWSupplyOfBears; // STORAGE[0x1f]\nuint256 _lastProbabilityOfBulls; // STORAGE[0x20]\nuint256 _lastProbabilityOfBears; // STORAGE[0x21]\nuint256 _lastJackPot; // STORAGE[0x23]\nuint256 _lastWinner; // STORAGE[0x24]\nuint256 _lastBalance; // STORAGE[0x25]\nuint256 _lastBalanceGW; // STORAGE[0x26]\nuint256 _lastCountOfBears; // STORAGE[0x27]\nuint256 _lastCountOfBulls; // STORAGE[0x28]\nuint256 _lastWithdrawn; // STORAGE[0x29]\nuint256 _lastWithdrawnGW; // STORAGE[0x2a]\nuint8 _finished; // STORAGE[0x2b] bytes 0 to 0\nuint160 _lastHero; // STORAGE[0x10] bytes 0 to 19\nuint160 _lastHeroHistory; // STORAGE[0x11] bytes 0 to 19\nuint160 stor_1b_0_19; // STORAGE[0x1b] bytes 0 to 19\naddress _lastRoundHero; // STORAGE[0x22] bytes 0 to 19\naddress _bearsContract; // STORAGE[0x2b] bytes 1 to 20\naddress _bullsContract; // STORAGE[0x2c] bytes 0 to 19\naddress _gameWaveContract; // STORAGE[0x2d] bytes 0 to 19\n\n\nfunction 0x10d6() private { \n    if (block.timestamp <= _currentDeadline) {\n        v0 = v1 = 1;\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction 0x115b(uint256 varg0) private { \n    if (0 != _rateModifier) {\n        v0 = v1 = _SafeDiv(_rate, varg0);\n    } else {\n        v0 = v2 = 0x2190(_rate, varg0);\n    }\n    return v0;\n}\n\nfunction 0x1660(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    v0 = v1 = !_winner;\n    if (v1) {\n        v0 = v2 = 0x10d6();\n    }\n    require(v0);\n    require(_gameWaveContract.code.size);\n    v3, v4 = _gameWaveContract.balanceOf(_bullsContract).gas(msg.gas);\n    require(v3); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _totalGWSupplyOfBulls = v4;\n    require(_gameWaveContract.code.size);\n    v5, v6 = _gameWaveContract.balanceOf(_bearsContract).gas(msg.gas);\n    require(v5); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _totalGWSupplyOfBears = v6;\n    v7 = v8 = 0;\n    v9 = v10 = 6053;\n    v11 = v12 = 100;\n    v13 = v14 = _SafeAdd(_totalSupplyOfBears, _totalSupplyOfBulls);\n    while (1) {\n        v11 = _SafeDiv(v11, v13);\n        if (_totalGWSupplyOfBulls < 0xde0b6b3a7640000) {\n            _totalGWSupplyOfBulls = 0;\n        }\n        if (_totalGWSupplyOfBears < 0xde0b6b3a7640000) {\n            _totalGWSupplyOfBears = 0;\n        }\n        if (_totalGWSupplyOfBulls > _totalGWSupplyOfBears) {\n            v7 = v15 = 0;\n            v9 = v16 = 6294;\n            v11 = v17 = 0x2386f26fc10000;\n            require(_totalGWSupplyOfBears <= _totalGWSupplyOfBulls);\n            v13 = _totalGWSupplyOfBulls - _totalGWSupplyOfBears;\n            goto 0xe810x1660;\n        } else {\n            v7 = v18 = 0;\n            v9 = v19 = 6150;\n            v11 = v20 = 0x2386f26fc10000;\n            require(_totalGWSupplyOfBulls <= _totalGWSupplyOfBears);\n            v13 = v21 = _totalGWSupplyOfBears - _totalGWSupplyOfBulls;\n            goto 0xe810x1660;\n        }\n        v11 = v22 = 6202;\n        v7 = v23 = 0x115b(v11);\n        v9 = v24 = 6190;\n        v13 = v25 = 0x2190(100, _totalSupplyOfBears);\n        v11 = v26 = 6334;\n        v7 = v27 = 0x115b(v11);\n        v9 = v28 = 6190;\n        v13 = v29 = 0x2190(100, _totalSupplyOfBulls);\n    }\n    v30 = _SafeAdd(v7, v11);\n    _probabilityOfBears = v30;\n    if (8000 < v30) {\n        _probabilityOfBears = 8000;\n    }\n    if (_probabilityOfBears < 2000) {\n        _probabilityOfBears = 2000;\n    }\n    _probabilityOfBulls = 10000 - _probabilityOfBears;\n    require(_gameWaveContract.code.size);\n    v31, v32 = _gameWaveContract.balanceOf(_bullsContract).gas(msg.gas);\n    require(v31); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _totalGWSupplyOfBulls = v32;\n    require(_gameWaveContract.code.size);\n    v33, v34 = _gameWaveContract.balanceOf(_bearsContract).gas(msg.gas);\n    require(v33); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _totalGWSupplyOfBears = v34;\n    return ;\n    _probabilityOfBulls = v30;\n    if (8000 < v30) {\n        _probabilityOfBulls = 8000;\n    }\n    if (_probabilityOfBulls < 2000) {\n        _probabilityOfBulls = 2000;\n    }\n    _probabilityOfBears = 10000 - _probabilityOfBulls;\n}\n\nfunction 0x2190(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        require(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0);\n    assert(varg0);\n    return varg1 / varg0;\n}\n\nfunction fallback() public payable { \n    if (!msg.value) {\n        v0 = v1 = _depositBears[msg.sender];\n        if (!_depositBears[msg.sender]) {\n            v0 = v2 = _depositBulls[msg.sender];\n        }\n        require(v0);\n        v3 = v4 = 0;\n        v5 = v6 = 1 == _lastWinner;\n        if (v6) {\n            v5 = v7 = _depositBears[msg.sender];\n        }\n        if (v5) {\n            v3 = v8 = 0xdef(msg.sender);\n        }\n        v9 = v10 = 2 == _lastWinner;\n        if (v10) {\n            v9 = v11 = _depositBulls[msg.sender];\n        }\n        if (v9) {\n            v3 = v12 = 0xdef(msg.sender);\n        }\n        if (v3) {\n            _depositBears[msg.sender] = 0;\n            _depositBulls[~0 + _currentRound] = 0;\n            v13 = _SafeAdd(v3, _withdrawn);\n            _withdrawn = v13;\n            v14 = msg.sender.call().value(v3).gas(2300 * !v3);\n            require(v14); // checks call status, propagates error data on error\n        }\n        v15 = v16 = 1 == _lastWinner;\n        if (v16) {\n            v15 = v17 = !_depositBears[msg.sender];\n        }\n        if (!v15) {\n            v15 = v18 = 2 == _lastWinner;\n            if (v18) {\n                v15 = v19 = !_depositBulls[msg.sender];\n            }\n        }\n        if (v15) {\n            v20 = v21 = 0;\n            v20 = v22 = 0;\n            v23 = v24 = 3596;\n            v25 = v26 = 100;\n            v27 = _SafeAdd(_lastTotalGWSupplyOfBulls, _lastTotalGWSupplyOfBears);\n            v28 = 0x2190(80, v27);\n            while (1) {\n                v20 = _SafeDiv(v25, v28);\n                if (_depositBears[~0 + _currentRound]) {\n                    v25 = v29 = _lastTotalSupplyOfBears;\n                    v23 = v30 = 3725;\n                    v28 = 0x2190(_depositBears[~0 + _currentRound], v20);\n                }\n                if (_depositBulls[~0 + _currentRound]) {\n                    v25 = v31 = _lastTotalSupplyOfBulls;\n                    v23 = v32 = 3842;\n                    v28 = 0x2190(_depositBulls[~0 + _currentRound], v20);\n                }\n            }\n            v33 = _SafeAdd(v20, _withdrawnGW);\n            _withdrawnGW = v33;\n            require(_gameWaveContract.code.size);\n            v34 = _gameWaveContract.transfer(msg.sender, v20).gas(msg.gas);\n            require(v34); // checks call status, propagates error data on error\n            require(RETURNDATASIZE() >= 32);\n        }\n        if (msg.sender == _lastRoundHero) {\n            _lastHeroHistory = _lastRoundHero;\n            _lastRoundHero = 0;\n            v35 = _SafeAdd(_lastJackPot, _withdrawn);\n            _withdrawn = v35;\n            v36 = msg.sender.call().value(_lastJackPot).gas(2300 * !_lastJackPot);\n            require(v36); // checks call status, propagates error data on error\n        }\n    }\n}\n\nfunction countOfBulls() public nonPayable { \n    return _countOfBulls;\n}\n\nfunction rateModifier() public nonPayable { \n    return _rateModifier;\n}\n\nfunction totalGWSupplyOfBulls() public nonPayable { \n    return _totalGWSupplyOfBulls;\n}\n\nfunction depositBears(uint256 varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _depositBears[varg1];\n}\n\nfunction setBullsAddress(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!_bullsContract);\n    _bullsContract = varg0;\n}\n\nfunction totalSupplyOfBears() public nonPayable { \n    return _totalSupplyOfBears;\n}\n\nfunction defaultCurrentDeadlineInHours() public nonPayable { \n    return _defaultCurrentDeadlineInHours;\n}\n\nfunction calculateGWPrize(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    v0 = v2 = 0;\n    v3 = v4 = 4092;\n    v5 = v6 = 100;\n    v7 = _SafeAdd(_totalGWSupplyOfBulls, _totalGWSupplyOfBears);\n    v8 = v9 = 0x2190(80, v7);\n    while (1) {\n        v0 = _SafeDiv(v5, v8);\n        if (_depositBears[_currentRound]) {\n            v5 = _totalSupplyOfBears;\n            v3 = v10 = 4201;\n            v8 = 0x2190(_depositBears[_currentRound], v0);\n        }\n        if (_depositBulls[_currentRound]) {\n            v5 = v11 = _totalSupplyOfBulls;\n            v3 = v12 = 3842;\n            v8 = 0x2190(_depositBulls[_currentRound], v0);\n        }\n    }\n    return v0;\n}\n\nfunction getState() public nonPayable { \n    v0 = 0x10d6();\n    return v0;\n}\n\nfunction lastTotalSupplyOfBulls() public nonPayable { \n    return _lastTotalSupplyOfBulls;\n}\n\nfunction lastTotalGWSupplyOfBears() public nonPayable { \n    return _lastTotalGWSupplyOfBears;\n}\n\nfunction setBearsAddress(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!_bearsContract);\n    _bearsContract = varg0;\n}\n\nfunction lastRoundHero() public nonPayable { \n    return _lastRoundHero;\n}\n\nfunction rate() public nonPayable { \n    return _rate;\n}\n\nfunction probabilityOfBears() public nonPayable { \n    return _probabilityOfBears;\n}\n\nfunction estimateTokenPercent(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (0 != _rateModifier) {\n        v0 = v1 = _SafeDiv(_rate, varg0);\n    } else {\n        v0 = v2 = 0x2190(_rate, varg0);\n    }\n    return v0;\n}\n\nfunction probabilityOfBulls() public nonPayable { \n    return _probabilityOfBulls;\n}\n\nfunction countOfBears() public nonPayable { \n    return _countOfBears;\n}\n\nfunction lastBalanceGW() public nonPayable { \n    return _lastBalanceGW;\n}\n\nfunction remainderGW() public nonPayable { \n    return _remainderGW;\n}\n\nfunction lastWithdrawn() public nonPayable { \n    return _lastWithdrawn;\n}\n\nfunction jackPot() public nonPayable { \n    return _jackPot;\n}\n\nfunction calculateLastGWPrize(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    v0 = v2 = 0;\n    v3 = v4 = 3596;\n    v5 = v6 = 100;\n    v7 = _SafeAdd(_lastTotalGWSupplyOfBulls, _lastTotalGWSupplyOfBears);\n    v8 = v9 = 0x2190(80, v7);\n    while (1) {\n        v0 = _SafeDiv(v5, v8);\n        if (_depositBears[~0 + _currentRound]) {\n            v5 = _lastTotalSupplyOfBears;\n            v3 = v10 = 3725;\n            v8 = 0x2190(_depositBears[~0 + _currentRound], v0);\n        }\n        if (_depositBulls[~0 + _currentRound]) {\n            v5 = v11 = _lastTotalSupplyOfBulls;\n            v3 = v12 = 3842;\n            v8 = 0x2190(_depositBulls[~0 + _currentRound], v0);\n        }\n    }\n    return v0;\n}\n\nfunction depositBulls(uint256 varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _depositBulls[varg1];\n}\n\nfunction totalSupplyOfBulls() public nonPayable { \n    return _totalSupplyOfBulls;\n}\n\nfunction lastWithdrawnGW() public nonPayable { \n    return _lastWithdrawnGW;\n}\n\nfunction lastHero() public nonPayable { \n    return _lastHero;\n}\n\nfunction withdrawnGW() public nonPayable { \n    return _withdrawnGW;\n}\n\nfunction currentDeadline() public nonPayable { \n    return _currentDeadline;\n}\n\nfunction BearsContract() public nonPayable { \n    return _bearsContract;\n}\n\nfunction setGameWaveAddress(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!_gameWaveContract);\n    _gameWaveContract = varg0;\n}\n\nfunction lastDeadline() public nonPayable { \n    return _lastDeadline;\n}\n\nfunction lastProbabilityOfBears() public nonPayable { \n    return _lastProbabilityOfBears;\n}\n\nfunction currentRound() public nonPayable { \n    return _currentRound;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction calculateETHPrize(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    v2 = _SafeAdd(_totalSupplyOfBulls, _totalSupplyOfBears);\n    if (_depositBears[_currentRound]) {\n        v3 = _totalSupplyOfBears;\n        v4 = v5 = 4201;\n        v6 = v7 = 0x2190(_depositBears[_currentRound], v2);\n    }\n    v0 = v8 = _SafeDiv(v3, v6);\n    if (_depositBulls[_currentRound]) {\n        v3 = v9 = _totalSupplyOfBulls;\n        v4 = v10 = 3842;\n        v6 = v11 = 0x2190(_depositBulls[_currentRound], v2);\n    }\n    return v0;\n}\n\nfunction lastBalance() public nonPayable { \n    return _lastBalance;\n}\n\nfunction setInfo(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = 1723;\n    require(msg.data.length - 4 >= 64);\n    v2 = v3 = msg.sender == _bearsContract;\n    if (msg.sender != _bearsContract) {\n        v2 = v4 = msg.sender == _bullsContract;\n    }\n    require(v2);\n    if (msg.sender == _bearsContract) {\n        require(!_depositBulls[varg0], 'You are already in bulls team');\n        if (!_depositBears[varg0]) {\n            _countOfBears += 1;\n        }\n        v0 = v5 = 5039;\n        v6 = v7 = 5024;\n        v8 = v9 = 100;\n        v10 = v11 = 0x2190(90, varg1);\n    }\n    while (1) {\n        v12 = _SafeDiv(v8, v10);\n        v13 = _SafeAdd(v12, _totalSupplyOfBears);\n        _totalSupplyOfBears = v13;\n        v0 = v14 = 5117;\n        v6 = v15 = 5067;\n        v8 = v16 = 100;\n        v10 = v17 = 0x2190(90, v0);\n        v18 = _SafeAdd(v12, _totalSupplyOfBulls);\n        _totalSupplyOfBulls = v18;\n        v0 = v19 = 5468;\n        v6 = v20 = 5418;\n        v8 = v21 = 100;\n        v10 = v22 = 0x2190(90, v0);\n    }\n    v23 = address(v0);\n    v24 = _SafeAdd(v12, _depositBears[v23]);\n    v25 = address(v0);\n    _depositBears[v25] = v24;\n    v26 = address(v0);\n    v27 = _SafeAdd(v12, _depositBulls[v26]);\n    v28 = address(v0);\n    _depositBulls[v28] = v27;\n    _jackPot += v12;\n    0x1660(5630, v0, v0);\n    exit;\n    if (msg.sender == _bullsContract) {\n        v29 = address(v0);\n        require(!_depositBears[v29], 'You are already in bears team');\n        v30 = address(v0);\n        if (!_depositBulls[v30]) {\n            _countOfBulls += 1;\n        }\n        v0 = v31 = 5390;\n        v6 = v32 = 5375;\n        v8 = v33 = 100;\n        v10 = v34 = 0x2190(90, v0);\n    }\n    _lastHero = v0;\n    v35 = _SafeAdd(120, _currentDeadline);\n    if (v35 > _lastDeadline) {\n        _currentDeadline = _lastDeadline;\n    } else {\n        v36 = _SafeAdd(120, _currentDeadline);\n        _currentDeadline = v36;\n    }\n    v6 = v37 = 5613;\n    v8 = v38 = 100;\n    v10 = v39 = 0x2190(10, v0);\n}\n\nfunction totalGWSupplyOfBears() public nonPayable { \n    return _totalGWSupplyOfBears;\n}\n\nfunction lastCountOfBears() public nonPayable { \n    return _lastCountOfBears;\n}\n\nfunction remainder() public nonPayable { \n    return _remainder;\n}\n\nfunction defaultLastDeadlineInHours() public nonPayable { \n    return _defaultLastDeadlineInHours;\n}\n\nfunction lastHeroHistory() public nonPayable { \n    return _lastHeroHistory;\n}\n\nfunction setRateToken(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _rate = varg0;\n    _rateModifier = varg1;\n    return 0;\n}\n\nfunction getNow() public nonPayable { \n    return block.timestamp;\n}\n\nfunction finished() public nonPayable { \n    return _finished;\n}\n\nfunction withdrawn() public nonPayable { \n    return _withdrawn;\n}\n\nfunction calculateProbability() public nonPayable { \n    0x1660(1723, v0, v1);\n}\n\nfunction lastJackPot() public nonPayable { \n    return _lastJackPot;\n}\n\nfunction tokenReturn() public nonPayable { \n    return _tokenReturn;\n}\n\nfunction BullsContract() public nonPayable { \n    return _bullsContract;\n}\n\nfunction getWinners() public nonPayable { \n    v0 = v1 = !_winner;\n    if (v1) {\n        v2 = 0x10d6();\n        v0 = v3 = !v2;\n    }\n    require(v0);\n    MEM[64] = MEM[64] + 256;\n    v4 = v5 = keccak256(this.balance, _totalSupplyOfBulls, _totalSupplyOfBears, _totalGWSupplyOfBulls, _totalGWSupplyOfBulls, block.difficulty, block.timestamp);\n    if (!v5) {\n        v4 = v6 = 1;\n    }\n    v7 = v8 = v4 % 10000 >= 1;\n    if (v4 % 10000 >= 1) {\n        v7 = v9 = v4 % 10000 <= _probabilityOfBears;\n    }\n    if (v7) {\n        _winner = 1;\n    }\n    v10 = v11 = _probabilityOfBears < v4 % 10000;\n    if (v11) {\n        v10 = v12 = v4 % 10000 <= 10000;\n    }\n    if (v10) {\n        _winner = 2;\n    }\n    require(_gameWaveContract.code.size);\n    v13, v14 = _gameWaveContract.balanceOf(_bullsContract).gas(msg.gas);\n    require(v13); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v14 > 0) {\n        require(_gameWaveContract.code.size);\n        v15, v16 = _gameWaveContract.balanceOf(_bullsContract).gas(msg.gas);\n        require(v15); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        require(_gameWaveContract.code.size);\n        v17 = _gameWaveContract.transferFrom(_bullsContract, address(this), v16).gas(msg.gas);\n        require(v17); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n    }\n    require(_gameWaveContract.code.size);\n    v18, v19 = _gameWaveContract.balanceOf(_bearsContract).gas(msg.gas);\n    require(v18); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v19 > 0) {\n        require(_gameWaveContract.code.size);\n        v20, v21 = _gameWaveContract.balanceOf(_bearsContract).gas(msg.gas);\n        require(v20); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        require(_gameWaveContract.code.size);\n        v22 = _gameWaveContract.transferFrom(_bearsContract, address(this), v21).gas(msg.gas);\n        require(v22); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n    }\n    _lastTotalSupplyOfBulls = _totalSupplyOfBulls;\n    _lastTotalSupplyOfBears = _totalSupplyOfBears;\n    _lastTotalGWSupplyOfBears = _totalGWSupplyOfBears;\n    _lastTotalGWSupplyOfBulls = _totalGWSupplyOfBulls;\n    _lastRoundHero = _lastHero;\n    _lastJackPot = _jackPot;\n    _lastWinner = _winner;\n    _lastCountOfBears = _countOfBears;\n    _lastCountOfBulls = _countOfBulls;\n    _lastWithdrawn = _withdrawn;\n    _lastWithdrawnGW = _withdrawnGW;\n    if (_lastBalance > _withdrawn) {\n        require(_lastWithdrawn <= _lastBalance);\n        _remainder = _lastBalance - _lastWithdrawn;\n        v23 = _gameWaveContract.call().value(_lastBalance - _lastWithdrawn).gas(2300 * !(_lastBalance - _lastWithdrawn));\n        require(v23); // checks call status, propagates error data on error\n    }\n    v24 = v25 = 7922;\n    v26 = v27 = _lastJackPot;\n    v28 = v29 = _SafeAdd(_lastTotalSupplyOfBulls, _lastTotalSupplyOfBears);\n    while (1) {\n        v30 = _SafeAdd(v26, v28);\n        _lastBalance = v30;\n        if (_lastBalanceGW > _lastWithdrawnGW) {\n            require(_lastWithdrawnGW <= _lastBalanceGW);\n            _remainderGW = _lastBalanceGW - _lastWithdrawnGW;\n            v24 = v31 = 8003;\n            v26 = v32 = _remainderGW;\n            v33 = _SafeAdd(_totalGWSupplyOfBulls, _totalGWSupplyOfBears);\n            v34 = 0x2190(20, v33);\n            v28 = v35 = _SafeDiv(100, v34);\n        }\n    }\n    require(_gameWaveContract.code.size);\n    v36, v37 = _gameWaveContract.balanceOf(this).gas(msg.gas);\n    require(v36); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _lastBalanceGW = v37;\n    _totalSupplyOfBulls = 0;\n    _totalSupplyOfBears = 0;\n    _totalGWSupplyOfBulls = 0;\n    _totalGWSupplyOfBears = 0;\n    _remainder = 0;\n    _remainderGW = 0;\n    _jackPot = 0;\n    _withdrawn = 0;\n    _winner = 0;\n    _withdrawnGW = 0;\n    _countOfBears = 0;\n    _countOfBulls = 0;\n    _probabilityOfBulls = 0;\n    _probabilityOfBears = 0;\n    _defaultCurrentDeadlineInHours = _defaultCurrentDeadlineInHours;\n    _defaultLastDeadlineInHours = _defaultLastDeadlineInHours;\n    _currentDeadline = block.timestamp + 3600 * _defaultCurrentDeadlineInHours;\n    _lastDeadline = 3600 * _defaultLastDeadlineInHours + block.timestamp;\n    _currentRound += 1;\n    exit;\n    _tokenReturn = v30;\n    require(_gameWaveContract.code.size);\n    v38 = _gameWaveContract.transfer(stor_1b_0_19, v30).gas(msg.gas);\n    require(v38); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n}\n\nfunction winner() public nonPayable { \n    return _winner;\n}\n\nfunction lastProbabilityOfBulls() public nonPayable { \n    return _lastProbabilityOfBulls;\n}\n\nfunction calculateLastETHPrize(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    v2 = _SafeAdd(_lastTotalSupplyOfBulls, _lastTotalSupplyOfBears);\n    if (_depositBears[~0 + _currentRound]) {\n        v3 = _lastTotalSupplyOfBears;\n        v4 = v5 = 3725;\n        v6 = v7 = 0x2190(_depositBears[~0 + _currentRound], v2);\n    }\n    v0 = v8 = _SafeDiv(v3, v6);\n    if (_depositBulls[~0 + _currentRound]) {\n        v3 = v9 = _lastTotalSupplyOfBulls;\n        v4 = v10 = 3842;\n        v6 = v11 = 0x2190(_depositBulls[~0 + _currentRound], v2);\n    }\n    return v0;\n}\n\nfunction lastCountOfBulls() public nonPayable { \n    return _lastCountOfBulls;\n}\n\nfunction lastTotalGWSupplyOfBulls() public nonPayable { \n    return _lastTotalGWSupplyOfBulls;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    require(varg0);\n    _owner = varg0;\n}\n\nfunction GameWaveContract() public nonPayable { \n    return _gameWaveContract;\n}\n\nfunction setCrowdSale(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    stor_1b_0_19 = varg0;\n}\n\nfunction lastTotalSupplyOfBears() public nonPayable { \n    return _lastTotalSupplyOfBears;\n}\n\nfunction setRoundTime(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _defaultCurrentDeadlineInHours = varg0;\n    _defaultLastDeadlineInHours = varg1;\n    _currentDeadline = block.timestamp + 3600 * varg0;\n    _lastDeadline = 3600 * varg1 + block.timestamp;\n}\n\nfunction lastWinner() public nonPayable { \n    return _lastWinner;\n}\n\nfunction 0xdef(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = _SafeAdd(_lastTotalSupplyOfBulls, _lastTotalSupplyOfBears);\n    v3 = address(varg0);\n    if (_depositBears[~0 + _currentRound]) {\n        v4 = _lastTotalSupplyOfBears;\n        v5 = address(varg0);\n        v6 = v7 = 3725;\n        v8 = v9 = 0x2190(_depositBears[~0 + _currentRound], v2);\n    }\n    v0 = v10 = _SafeDiv(v4, v8);\n    v11 = address(varg0);\n    if (_depositBulls[~0 + _currentRound]) {\n        v4 = v12 = _lastTotalSupplyOfBulls;\n        v13 = address(varg0);\n        v6 = v14 = 3842;\n        v8 = v15 = 0x2190(_depositBulls[~0 + _currentRound], v2);\n    }\n    return v0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    require(v0 >= varg1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        v0 = function_selector >> 224;\n        if (0x89db3d20 > v0) {\n            if (0x32bc4cfd > v0) {\n                if (0x16dc3fbe > v0) {\n                    if (0x12cc1203 > v0) {\n                        if (0x58c6ed1 == v0) {\n                            countOfBulls();\n                        } else if (0xef4ea03 == v0) {\n                            rateModifier();\n                        } else if (0x12c426fe == v0) {\n                            totalGWSupplyOfBulls();\n                        }\n                    } else if (0x12cc1203 == v0) {\n                        depositBears(uint256,address);\n                    } else if (0x12d65fd9 == v0) {\n                        setBullsAddress(address);\n                    } else if (0x12f4ced1 == v0) {\n                        totalSupplyOfBears();\n                    } else if (0x165ee67e == v0) {\n                        defaultCurrentDeadlineInHours();\n                    }\n                } else if (0x2acf4217 > v0) {\n                    if (0x16dc3fbe == v0) {\n                        calculateGWPrize(address);\n                    } else if (0x1865c57d == v0) {\n                        getState();\n                    } else if (0x1f803c6e == v0) {\n                        lastTotalSupplyOfBulls();\n                    } else if (0x2073c8d8 == v0) {\n                        lastTotalGWSupplyOfBears();\n                    }\n                } else if (0x2acf4217 == v0) {\n                    setBearsAddress(address);\n                } else if (0x2b566abf == v0) {\n                    lastRoundHero();\n                } else if (0x2c4e722e == v0) {\n                    rate();\n                } else if (0x327fee98 == v0) {\n                    probabilityOfBears();\n                }\n            } else if (0x5338312a > v0) {\n                if (0x41911077 > v0) {\n                    if (0x32bc4cfd == v0) {\n                        estimateTokenPercent(uint256);\n                    } else if (0x353fe20c == v0) {\n                        probabilityOfBulls();\n                    } else if (0x36d7ac39 == v0) {\n                        countOfBears();\n                    } else if (0x39c70390 == v0) {\n                        lastBalanceGW();\n                    }\n                } else if (0x41911077 == v0) {\n                    remainderGW();\n                } else if (0x472c9fcc == v0) {\n                    lastWithdrawn();\n                } else if (0x4a78cdba == v0) {\n                    jackPot();\n                } else if (0x4e0dea91 == v0) {\n                    calculateLastGWPrize(address);\n                }\n            } else if (0x718f571b > v0) {\n                if (0x5338312a == v0) {\n                    depositBulls(uint256,address);\n                } else if (0x5a2215de == v0) {\n                    totalSupplyOfBulls();\n                } else if (0x6654a773 == v0) {\n                    lastWithdrawnGW();\n                } else if (0x6cae4a8f == v0) {\n                    lastHero();\n                }\n            } else if (0x718f571b == v0) {\n                withdrawnGW();\n            } else if (0x721ec693 == v0) {\n                currentDeadline();\n            } else if (0x72f35f9e == v0) {\n                BearsContract();\n            } else if (0x7eb4530a == v0) {\n                setGameWaveAddress(address);\n            }\n        } else if (0xc922d4d5 > v0) {\n            if (0x9b2f2818 > v0) {\n                if (0x8e5e66c8 > v0) {\n                    if (0x89db3d20 == v0) {\n                        lastDeadline();\n                    } else if (0x8a1704af == v0) {\n                        lastProbabilityOfBears();\n                    } else if (0x8a19c8bc == v0) {\n                        currentRound();\n                    } else if (0x8da5cb5b == v0) {\n                        owner();\n                    }\n                } else if (0x8e5e66c8 == v0) {\n                    calculateETHPrize(address);\n                } else if (0x8f1c56bd == v0) {\n                    lastBalance();\n                } else if (0x914dea93 == v0) {\n                    setInfo(address,uint256);\n                } else if (0x96e26159 == v0) {\n                    totalGWSupplyOfBears();\n                }\n            } else if (0xb2412340 > v0) {\n                if (0x9b2f2818 == v0) {\n                    lastCountOfBears();\n                } else if (0xa0684251 == v0) {\n                    remainder();\n                } else if (0xa2d5738f == v0) {\n                    defaultLastDeadlineInHours();\n                } else if (0xa80a8cf9 == v0) {\n                    lastHeroHistory();\n                }\n            } else if (0xb2412340 == v0) {\n                setRateToken(uint256,uint256);\n            } else if (0xbbe4fd50 == v0) {\n                getNow();\n            } else if (0xbef4876b == v0) {\n                finished();\n            } else if (0xc80ec522 == v0) {\n                withdrawn();\n            }\n        } else if (0xeed22fc0 > v0) {\n            if (0xdf15c37e > v0) {\n                if (0xc922d4d5 == v0) {\n                    calculateProbability();\n                } else if (0xd52f80a5 == v0) {\n                    lastJackPot();\n                } else if (0xd8829531 == v0) {\n                    tokenReturn();\n                } else if (0xdaf2917e == v0) {\n                    BullsContract();\n                }\n            } else if (0xdf15c37e == v0) {\n                getWinners();\n            } else if (0xdfbf53ae == v0) {\n                winner();\n            } else if (0xdfe66829 == v0) {\n                lastProbabilityOfBulls();\n            } else if (0xe52aaf0e == v0) {\n                calculateLastETHPrize(address);\n            }\n        } else if (0xf4b5cbc4 > v0) {\n            if (0xeed22fc0 == v0) {\n                lastCountOfBulls();\n            } else if (0xf24c7d71 == v0) {\n                lastTotalGWSupplyOfBulls();\n            } else if (0xf2fde38b == v0) {\n                transferOwnership(address);\n            } else if (0xf3ce955e == v0) {\n                GameWaveContract();\n            }\n        } else if (0xf4b5cbc4 == v0) {\n            setCrowdSale(address);\n        } else if (0xfb4dcb7a == v0) {\n            lastTotalSupplyOfBears();\n        } else if (0xfc9dc608 == v0) {\n            setRoundTime(uint256,uint256);\n        } else if (0xfe188184 == v0) {\n            lastWinner();\n        }\n    }\n    fallback();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.26 00:41 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _depositBears; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _depositBulls; // STORAGE[0x2]\nuint256 _currentDeadline; // STORAGE[0x3]\nuint256 _currentRound; // STORAGE[0x4]\nuint256 _lastDeadline; // STORAGE[0x5]\nuint256 _defaultCurrentDeadlineInHours; // STORAGE[0x6]\nuint256 _defaultLastDeadlineInHours; // STORAGE[0x7]\nuint256 _countOfBears; // STORAGE[0x8]\nuint256 _countOfBulls; // STORAGE[0x9]\nuint256 _totalSupplyOfBulls; // STORAGE[0xa]\nuint256 _totalSupplyOfBears; // STORAGE[0xb]\nuint256 _totalGWSupplyOfBulls; // STORAGE[0xc]\nuint256 _totalGWSupplyOfBears; // STORAGE[0xd]\nuint256 _probabilityOfBulls; // STORAGE[0xe]\nuint256 _probabilityOfBears; // STORAGE[0xf]\nuint256 _jackPot; // STORAGE[0x12]\nuint256 _winner; // STORAGE[0x13]\nuint256 _withdrawn; // STORAGE[0x14]\nuint256 _withdrawnGW; // STORAGE[0x15]\nuint256 _remainder; // STORAGE[0x16]\nuint256 _remainderGW; // STORAGE[0x17]\nuint256 _rate; // STORAGE[0x18]\nuint256 _rateModifier; // STORAGE[0x19]\naddress _owner; // STORAGE[0x0] bytes 0 to 19\nuint256 _tokenReturn; // STORAGE[0x1a]\nuint256 _lastTotalSupplyOfBulls; // STORAGE[0x1c]\nuint256 _lastTotalSupplyOfBears; // STORAGE[0x1d]\nuint256 _lastTotalGWSupplyOfBulls; // STORAGE[0x1e]\nuint256 _lastTotalGWSupplyOfBears; // STORAGE[0x1f]\nuint256 _lastProbabilityOfBulls; // STORAGE[0x20]\nuint256 _lastProbabilityOfBears; // STORAGE[0x21]\nuint256 _lastJackPot; // STORAGE[0x23]\nuint256 _lastWinner; // STORAGE[0x24]\nuint256 _lastBalance; // STORAGE[0x25]\nuint256 _lastBalanceGW; // STORAGE[0x26]\nuint256 _lastCountOfBears; // STORAGE[0x27]\nuint256 _lastCountOfBulls; // STORAGE[0x28]\nuint256 _lastWithdrawn; // STORAGE[0x29]\nuint256 _lastWithdrawnGW; // STORAGE[0x2a]\nuint8 _finished; // STORAGE[0x2b] bytes 0 to 0\nuint160 _lastHero; // STORAGE[0x10] bytes 0 to 19\nuint160 _lastHeroHistory; // STORAGE[0x11] bytes 0 to 19\nuint160 stor_1b_0_19; // STORAGE[0x1b] bytes 0 to 19\naddress _lastRoundHero; // STORAGE[0x22] bytes 0 to 19\naddress _bearsContract; // STORAGE[0x2b] bytes 1 to 20\naddress _bullsContract; // STORAGE[0x2c] bytes 0 to 19\naddress _gameWaveContract; // STORAGE[0x2d] bytes 0 to 19\n\n\nfunction 0x10d6() private { \n    if (block.timestamp <= _currentDeadline) {\n        v0 = v1 = 1;\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction 0x115b(uint256 varg0) private { \n    if (0 != _rateModifier) {\n        v0 = v1 = _SafeDiv(_rate, varg0);\n    } else {\n        v0 = v2 = 0x2190(_rate, varg0);\n    }\n    return v0;\n}\n\nfunction 0x1660(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    v0 = v1 = !_winner;\n    if (v1) {\n        v0 = v2 = 0x10d6();\n    }\n    require(v0);\n    require(_gameWaveContract.code.size);\n    v3, v4 = _gameWaveContract.balanceOf(_bullsContract).gas(msg.gas);\n    require(v3); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _totalGWSupplyOfBulls = v4;\n    require(_gameWaveContract.code.size);\n    v5, v6 = _gameWaveContract.balanceOf(_bearsContract).gas(msg.gas);\n    require(v5); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _totalGWSupplyOfBears = v6;\n    v7 = v8 = 0;\n    v9 = v10 = 6053;\n    v11 = v12 = 100;\n    v13 = v14 = _SafeAdd(_totalSupplyOfBears, _totalSupplyOfBulls);\n    while (1) {\n        v11 = _SafeDiv(v11, v13);\n        if (_totalGWSupplyOfBulls < 0xde0b6b3a7640000) {\n            _totalGWSupplyOfBulls = 0;\n        }\n        if (_totalGWSupplyOfBears < 0xde0b6b3a7640000) {\n            _totalGWSupplyOfBears = 0;\n        }\n        if (_totalGWSupplyOfBulls > _totalGWSupplyOfBears) {\n            v7 = v15 = 0;\n            v9 = v16 = 6294;\n            v11 = v17 = 0x2386f26fc10000;\n            require(_totalGWSupplyOfBears <= _totalGWSupplyOfBulls);\n            v13 = _totalGWSupplyOfBulls - _totalGWSupplyOfBears;\n            goto 0xe810x1660;\n        } else {\n            v7 = v18 = 0;\n            v9 = v19 = 6150;\n            v11 = v20 = 0x2386f26fc10000;\n            require(_totalGWSupplyOfBulls <= _totalGWSupplyOfBears);\n            v13 = v21 = _totalGWSupplyOfBears - _totalGWSupplyOfBulls;\n            goto 0xe810x1660;\n        }\n        v11 = v22 = 6202;\n        v7 = v23 = 0x115b(v11);\n        v9 = v24 = 6190;\n        v13 = v25 = 0x2190(100, _totalSupplyOfBears);\n        v11 = v26 = 6334;\n        v7 = v27 = 0x115b(v11);\n        v9 = v28 = 6190;\n        v13 = v29 = 0x2190(100, _totalSupplyOfBulls);\n    }\n    v30 = _SafeAdd(v7, v11);\n    _probabilityOfBears = v30;\n    if (8000 < v30) {\n        _probabilityOfBears = 8000;\n    }\n    if (_probabilityOfBears < 2000) {\n        _probabilityOfBears = 2000;\n    }\n    _probabilityOfBulls = 10000 - _probabilityOfBears;\n    require(_gameWaveContract.code.size);\n    v31, v32 = _gameWaveContract.balanceOf(_bullsContract).gas(msg.gas);\n    require(v31); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _totalGWSupplyOfBulls = v32;\n    require(_gameWaveContract.code.size);\n    v33, v34 = _gameWaveContract.balanceOf(_bearsContract).gas(msg.gas);\n    require(v33); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _totalGWSupplyOfBears = v34;\n    return ;\n    _probabilityOfBulls = v30;\n    if (8000 < v30) {\n        _probabilityOfBulls = 8000;\n    }\n    if (_probabilityOfBulls < 2000) {\n        _probabilityOfBulls = 2000;\n    }\n    _probabilityOfBears = 10000 - _probabilityOfBulls;\n}\n\nfunction 0x2190(uint256 varg0, uint256 varg1) private { \n    if (varg1) {\n        v0 = v1 = varg0 * varg1;\n        assert(varg1);\n        require(v1 / varg1 == varg0);\n    } else {\n        v0 = v2 = 0;\n    }\n    return v0;\n}\n\nfunction _SafeDiv(uint256 varg0, uint256 varg1) private { \n    require(varg0 > 0);\n    assert(varg0);\n    return varg1 / varg0;\n}\n\nfunction fallback() public payable { \n    if (!msg.value) {\n        v0 = v1 = _depositBears[msg.sender];\n        if (!_depositBears[msg.sender]) {\n            v0 = v2 = _depositBulls[msg.sender];\n        }\n        require(v0);\n        v3 = v4 = 0;\n        v5 = v6 = 1 == _lastWinner;\n        if (v6) {\n            v5 = v7 = _depositBears[msg.sender];\n        }\n        if (v5) {\n            v3 = v8 = 0xdef(msg.sender);\n        }\n        v9 = v10 = 2 == _lastWinner;\n        if (v10) {\n            v9 = v11 = _depositBulls[msg.sender];\n        }\n        if (v9) {\n            v3 = v12 = 0xdef(msg.sender);\n        }\n        if (v3) {\n            _depositBears[msg.sender] = 0;\n            _depositBulls[~0 + _currentRound] = 0;\n            v13 = _SafeAdd(v3, _withdrawn);\n            _withdrawn = v13;\n            v14 = msg.sender.call().value(v3).gas(2300 * !v3);\n            require(v14); // checks call status, propagates error data on error\n        }\n        v15 = v16 = 1 == _lastWinner;\n        if (v16) {\n            v15 = v17 = !_depositBears[msg.sender];\n        }\n        if (!v15) {\n            v15 = v18 = 2 == _lastWinner;\n            if (v18) {\n                v15 = v19 = !_depositBulls[msg.sender];\n            }\n        }\n        if (v15) {\n            v20 = v21 = 0;\n            v20 = v22 = 0;\n            v23 = v24 = 3596;\n            v25 = v26 = 100;\n            v27 = _SafeAdd(_lastTotalGWSupplyOfBulls, _lastTotalGWSupplyOfBears);\n            v28 = 0x2190(80, v27);\n            while (1) {\n                v20 = _SafeDiv(v25, v28);\n                if (_depositBears[~0 + _currentRound]) {\n                    v25 = v29 = _lastTotalSupplyOfBears;\n                    v23 = v30 = 3725;\n                    v28 = 0x2190(_depositBears[~0 + _currentRound], v20);\n                }\n                if (_depositBulls[~0 + _currentRound]) {\n                    v25 = v31 = _lastTotalSupplyOfBulls;\n                    v23 = v32 = 3842;\n                    v28 = 0x2190(_depositBulls[~0 + _currentRound], v20);\n                }\n            }\n            v33 = _SafeAdd(v20, _withdrawnGW);\n            _withdrawnGW = v33;\n            require(_gameWaveContract.code.size);\n            v34 = _gameWaveContract.transfer(msg.sender, v20).gas(msg.gas);\n            require(v34); // checks call status, propagates error data on error\n            require(RETURNDATASIZE() >= 32);\n        }\n        if (msg.sender == _lastRoundHero) {\n            _lastHeroHistory = _lastRoundHero;\n            _lastRoundHero = 0;\n            v35 = _SafeAdd(_lastJackPot, _withdrawn);\n            _withdrawn = v35;\n            v36 = msg.sender.call().value(_lastJackPot).gas(2300 * !_lastJackPot);\n            require(v36); // checks call status, propagates error data on error\n        }\n    }\n}\n\nfunction countOfBulls() public nonPayable { \n    return _countOfBulls;\n}\n\nfunction rateModifier() public nonPayable { \n    return _rateModifier;\n}\n\nfunction totalGWSupplyOfBulls() public nonPayable { \n    return _totalGWSupplyOfBulls;\n}\n\nfunction depositBears(uint256 varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _depositBears[varg1];\n}\n\nfunction setBullsAddress(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!_bullsContract);\n    _bullsContract = varg0;\n}\n\nfunction totalSupplyOfBears() public nonPayable { \n    return _totalSupplyOfBears;\n}\n\nfunction defaultCurrentDeadlineInHours() public nonPayable { \n    return _defaultCurrentDeadlineInHours;\n}\n\nfunction calculateGWPrize(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    v0 = v2 = 0;\n    v3 = v4 = 4092;\n    v5 = v6 = 100;\n    v7 = _SafeAdd(_totalGWSupplyOfBulls, _totalGWSupplyOfBears);\n    v8 = v9 = 0x2190(80, v7);\n    while (1) {\n        v0 = _SafeDiv(v5, v8);\n        if (_depositBears[_currentRound]) {\n            v5 = _totalSupplyOfBears;\n            v3 = v10 = 4201;\n            v8 = 0x2190(_depositBears[_currentRound], v0);\n        }\n        if (_depositBulls[_currentRound]) {\n            v5 = v11 = _totalSupplyOfBulls;\n            v3 = v12 = 3842;\n            v8 = 0x2190(_depositBulls[_currentRound], v0);\n        }\n    }\n    return v0;\n}\n\nfunction getState() public nonPayable { \n    v0 = 0x10d6();\n    return v0;\n}\n\nfunction lastTotalSupplyOfBulls() public nonPayable { \n    return _lastTotalSupplyOfBulls;\n}\n\nfunction lastTotalGWSupplyOfBears() public nonPayable { \n    return _lastTotalGWSupplyOfBears;\n}\n\nfunction setBearsAddress(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!_bearsContract);\n    _bearsContract = varg0;\n}\n\nfunction lastRoundHero() public nonPayable { \n    return _lastRoundHero;\n}\n\nfunction rate() public nonPayable { \n    return _rate;\n}\n\nfunction probabilityOfBears() public nonPayable { \n    return _probabilityOfBears;\n}\n\nfunction estimateTokenPercent(uint256 varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    if (0 != _rateModifier) {\n        v0 = v1 = _SafeDiv(_rate, varg0);\n    } else {\n        v0 = v2 = 0x2190(_rate, varg0);\n    }\n    return v0;\n}\n\nfunction probabilityOfBulls() public nonPayable { \n    return _probabilityOfBulls;\n}\n\nfunction countOfBears() public nonPayable { \n    return _countOfBears;\n}\n\nfunction lastBalanceGW() public nonPayable { \n    return _lastBalanceGW;\n}\n\nfunction remainderGW() public nonPayable { \n    return _remainderGW;\n}\n\nfunction lastWithdrawn() public nonPayable { \n    return _lastWithdrawn;\n}\n\nfunction jackPot() public nonPayable { \n    return _jackPot;\n}\n\nfunction calculateLastGWPrize(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    v0 = v2 = 0;\n    v3 = v4 = 3596;\n    v5 = v6 = 100;\n    v7 = _SafeAdd(_lastTotalGWSupplyOfBulls, _lastTotalGWSupplyOfBears);\n    v8 = v9 = 0x2190(80, v7);\n    while (1) {\n        v0 = _SafeDiv(v5, v8);\n        if (_depositBears[~0 + _currentRound]) {\n            v5 = _lastTotalSupplyOfBears;\n            v3 = v10 = 3725;\n            v8 = 0x2190(_depositBears[~0 + _currentRound], v0);\n        }\n        if (_depositBulls[~0 + _currentRound]) {\n            v5 = v11 = _lastTotalSupplyOfBulls;\n            v3 = v12 = 3842;\n            v8 = 0x2190(_depositBulls[~0 + _currentRound], v0);\n        }\n    }\n    return v0;\n}\n\nfunction depositBulls(uint256 varg0, address varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    return _depositBulls[varg1];\n}\n\nfunction totalSupplyOfBulls() public nonPayable { \n    return _totalSupplyOfBulls;\n}\n\nfunction lastWithdrawnGW() public nonPayable { \n    return _lastWithdrawnGW;\n}\n\nfunction lastHero() public nonPayable { \n    return _lastHero;\n}\n\nfunction withdrawnGW() public nonPayable { \n    return _withdrawnGW;\n}\n\nfunction currentDeadline() public nonPayable { \n    return _currentDeadline;\n}\n\nfunction BearsContract() public nonPayable { \n    return _bearsContract;\n}\n\nfunction setGameWaveAddress(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(!_gameWaveContract);\n    _gameWaveContract = varg0;\n}\n\nfunction lastDeadline() public nonPayable { \n    return _lastDeadline;\n}\n\nfunction lastProbabilityOfBears() public nonPayable { \n    return _lastProbabilityOfBears;\n}\n\nfunction currentRound() public nonPayable { \n    return _currentRound;\n}\n\nfunction owner() public nonPayable { \n    return _owner;\n}\n\nfunction calculateETHPrize(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    v2 = _SafeAdd(_totalSupplyOfBulls, _totalSupplyOfBears);\n    if (_depositBears[_currentRound]) {\n        v3 = _totalSupplyOfBears;\n        v4 = v5 = 4201;\n        v6 = v7 = 0x2190(_depositBears[_currentRound], v2);\n    }\n    v0 = v8 = _SafeDiv(v3, v6);\n    if (_depositBulls[_currentRound]) {\n        v3 = v9 = _totalSupplyOfBulls;\n        v4 = v10 = 3842;\n        v6 = v11 = 0x2190(_depositBulls[_currentRound], v2);\n    }\n    return v0;\n}\n\nfunction lastBalance() public nonPayable { \n    return _lastBalance;\n}\n\nfunction setInfo(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = 1723;\n    require(msg.data.length - 4 >= 64);\n    v2 = v3 = msg.sender == _bearsContract;\n    if (msg.sender != _bearsContract) {\n        v2 = v4 = msg.sender == _bullsContract;\n    }\n    require(v2);\n    if (msg.sender == _bearsContract) {\n        require(!_depositBulls[varg0], 'You are already in bulls team');\n        if (!_depositBears[varg0]) {\n            _countOfBears += 1;\n        }\n        v0 = v5 = 5039;\n        v6 = v7 = 5024;\n        v8 = v9 = 100;\n        v10 = v11 = 0x2190(90, varg1);\n    }\n    while (1) {\n        v12 = _SafeDiv(v8, v10);\n        v13 = _SafeAdd(v12, _totalSupplyOfBears);\n        _totalSupplyOfBears = v13;\n        v0 = v14 = 5117;\n        v6 = v15 = 5067;\n        v8 = v16 = 100;\n        v10 = v17 = 0x2190(90, v0);\n        v18 = _SafeAdd(v12, _totalSupplyOfBulls);\n        _totalSupplyOfBulls = v18;\n        v0 = v19 = 5468;\n        v6 = v20 = 5418;\n        v8 = v21 = 100;\n        v10 = v22 = 0x2190(90, v0);\n    }\n    v23 = address(v0);\n    v24 = _SafeAdd(v12, _depositBears[v23]);\n    v25 = address(v0);\n    _depositBears[v25] = v24;\n    v26 = address(v0);\n    v27 = _SafeAdd(v12, _depositBulls[v26]);\n    v28 = address(v0);\n    _depositBulls[v28] = v27;\n    _jackPot += v12;\n    0x1660(5630, v0, v0);\n    exit;\n    if (msg.sender == _bullsContract) {\n        v29 = address(v0);\n        require(!_depositBears[v29], 'You are already in bears team');\n        v30 = address(v0);\n        if (!_depositBulls[v30]) {\n            _countOfBulls += 1;\n        }\n        v0 = v31 = 5390;\n        v6 = v32 = 5375;\n        v8 = v33 = 100;\n        v10 = v34 = 0x2190(90, v0);\n    }\n    _lastHero = v0;\n    v35 = _SafeAdd(120, _currentDeadline);\n    if (v35 > _lastDeadline) {\n        _currentDeadline = _lastDeadline;\n    } else {\n        v36 = _SafeAdd(120, _currentDeadline);\n        _currentDeadline = v36;\n    }\n    v6 = v37 = 5613;\n    v8 = v38 = 100;\n    v10 = v39 = 0x2190(10, v0);\n}\n\nfunction totalGWSupplyOfBears() public nonPayable { \n    return _totalGWSupplyOfBears;\n}\n\nfunction lastCountOfBears() public nonPayable { \n    return _lastCountOfBears;\n}\n\nfunction remainder() public nonPayable { \n    return _remainder;\n}\n\nfunction defaultLastDeadlineInHours() public nonPayable { \n    return _defaultLastDeadlineInHours;\n}\n\nfunction lastHeroHistory() public nonPayable { \n    return _lastHeroHistory;\n}\n\nfunction setRateToken(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _rate = varg0;\n    _rateModifier = varg1;\n    return 0;\n}\n\nfunction getNow() public nonPayable { \n    return block.timestamp;\n}\n\nfunction finished() public nonPayable { \n    return _finished;\n}\n\nfunction withdrawn() public nonPayable { \n    return _withdrawn;\n}\n\nfunction calculateProbability() public nonPayable { \n    0x1660(1723, v0, v1);\n}\n\nfunction lastJackPot() public nonPayable { \n    return _lastJackPot;\n}\n\nfunction tokenReturn() public nonPayable { \n    return _tokenReturn;\n}\n\nfunction BullsContract() public nonPayable { \n    return _bullsContract;\n}\n\nfunction getWinners() public nonPayable { \n    v0 = v1 = !_winner;\n    if (v1) {\n        v2 = 0x10d6();\n        v0 = v3 = !v2;\n    }\n    require(v0);\n    MEM[64] = MEM[64] + 256;\n    v4 = v5 = keccak256(this.balance, _totalSupplyOfBulls, _totalSupplyOfBears, _totalGWSupplyOfBulls, _totalGWSupplyOfBulls, block.difficulty, block.timestamp);\n    if (!v5) {\n        v4 = v6 = 1;\n    }\n    v7 = v8 = v4 % 10000 >= 1;\n    if (v4 % 10000 >= 1) {\n        v7 = v9 = v4 % 10000 <= _probabilityOfBears;\n    }\n    if (v7) {\n        _winner = 1;\n    }\n    v10 = v11 = _probabilityOfBears < v4 % 10000;\n    if (v11) {\n        v10 = v12 = v4 % 10000 <= 10000;\n    }\n    if (v10) {\n        _winner = 2;\n    }\n    require(_gameWaveContract.code.size);\n    v13, v14 = _gameWaveContract.balanceOf(_bullsContract).gas(msg.gas);\n    require(v13); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v14 > 0) {\n        require(_gameWaveContract.code.size);\n        v15, v16 = _gameWaveContract.balanceOf(_bullsContract).gas(msg.gas);\n        require(v15); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        require(_gameWaveContract.code.size);\n        v17 = _gameWaveContract.transferFrom(_bullsContract, address(this), v16).gas(msg.gas);\n        require(v17); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n    }\n    require(_gameWaveContract.code.size);\n    v18, v19 = _gameWaveContract.balanceOf(_bearsContract).gas(msg.gas);\n    require(v18); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    if (v19 > 0) {\n        require(_gameWaveContract.code.size);\n        v20, v21 = _gameWaveContract.balanceOf(_bearsContract).gas(msg.gas);\n        require(v20); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n        require(_gameWaveContract.code.size);\n        v22 = _gameWaveContract.transferFrom(_bearsContract, address(this), v21).gas(msg.gas);\n        require(v22); // checks call status, propagates error data on error\n        require(RETURNDATASIZE() >= 32);\n    }\n    _lastTotalSupplyOfBulls = _totalSupplyOfBulls;\n    _lastTotalSupplyOfBears = _totalSupplyOfBears;\n    _lastTotalGWSupplyOfBears = _totalGWSupplyOfBears;\n    _lastTotalGWSupplyOfBulls = _totalGWSupplyOfBulls;\n    _lastRoundHero = _lastHero;\n    _lastJackPot = _jackPot;\n    _lastWinner = _winner;\n    _lastCountOfBears = _countOfBears;\n    _lastCountOfBulls = _countOfBulls;\n    _lastWithdrawn = _withdrawn;\n    _lastWithdrawnGW = _withdrawnGW;\n    if (_lastBalance > _withdrawn) {\n        require(_lastWithdrawn <= _lastBalance);\n        _remainder = _lastBalance - _lastWithdrawn;\n        v23 = _gameWaveContract.call().value(_lastBalance - _lastWithdrawn).gas(2300 * !(_lastBalance - _lastWithdrawn));\n        require(v23); // checks call status, propagates error data on error\n    }\n    v24 = v25 = 7922;\n    v26 = v27 = _lastJackPot;\n    v28 = v29 = _SafeAdd(_lastTotalSupplyOfBulls, _lastTotalSupplyOfBears);\n    while (1) {\n        v30 = _SafeAdd(v26, v28);\n        _lastBalance = v30;\n        if (_lastBalanceGW > _lastWithdrawnGW) {\n            require(_lastWithdrawnGW <= _lastBalanceGW);\n            _remainderGW = _lastBalanceGW - _lastWithdrawnGW;\n            v24 = v31 = 8003;\n            v26 = v32 = _remainderGW;\n            v33 = _SafeAdd(_totalGWSupplyOfBulls, _totalGWSupplyOfBears);\n            v34 = 0x2190(20, v33);\n            v28 = v35 = _SafeDiv(100, v34);\n        }\n    }\n    require(_gameWaveContract.code.size);\n    v36, v37 = _gameWaveContract.balanceOf(this).gas(msg.gas);\n    require(v36); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    _lastBalanceGW = v37;\n    _totalSupplyOfBulls = 0;\n    _totalSupplyOfBears = 0;\n    _totalGWSupplyOfBulls = 0;\n    _totalGWSupplyOfBears = 0;\n    _remainder = 0;\n    _remainderGW = 0;\n    _jackPot = 0;\n    _withdrawn = 0;\n    _winner = 0;\n    _withdrawnGW = 0;\n    _countOfBears = 0;\n    _countOfBulls = 0;\n    _probabilityOfBulls = 0;\n    _probabilityOfBears = 0;\n    _defaultCurrentDeadlineInHours = _defaultCurrentDeadlineInHours;\n    _defaultLastDeadlineInHours = _defaultLastDeadlineInHours;\n    _currentDeadline = block.timestamp + 3600 * _defaultCurrentDeadlineInHours;\n    _lastDeadline = 3600 * _defaultLastDeadlineInHours + block.timestamp;\n    _currentRound += 1;\n    exit;\n    _tokenReturn = v30;\n    require(_gameWaveContract.code.size);\n    v38 = _gameWaveContract.transfer(stor_1b_0_19, v30).gas(msg.gas);\n    require(v38); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n}\n\nfunction winner() public nonPayable { \n    return _winner;\n}\n\nfunction lastProbabilityOfBulls() public nonPayable { \n    return _lastProbabilityOfBulls;\n}\n\nfunction calculateLastETHPrize(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    v0 = v1 = 0;\n    v2 = _SafeAdd(_lastTotalSupplyOfBulls, _lastTotalSupplyOfBears);\n    if (_depositBears[~0 + _currentRound]) {\n        v3 = _lastTotalSupplyOfBears;\n        v4 = v5 = 3725;\n        v6 = v7 = 0x2190(_depositBears[~0 + _currentRound], v2);\n    }\n    v0 = v8 = _SafeDiv(v3, v6);\n    if (_depositBulls[~0 + _currentRound]) {\n        v3 = v9 = _lastTotalSupplyOfBulls;\n        v4 = v10 = 3842;\n        v6 = v11 = 0x2190(_depositBulls[~0 + _currentRound], v2);\n    }\n    return v0;\n}\n\nfunction lastCountOfBulls() public nonPayable { \n    return _lastCountOfBulls;\n}\n\nfunction lastTotalGWSupplyOfBulls() public nonPayable { \n    return _lastTotalGWSupplyOfBulls;\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    require(varg0);\n    _owner = varg0;\n}\n\nfunction GameWaveContract() public nonPayable { \n    return _gameWaveContract;\n}\n\nfunction setCrowdSale(address varg0) public nonPayable { \n    require(msg.data.length - 4 >= 32);\n    require(msg.sender == _owner);\n    stor_1b_0_19 = varg0;\n}\n\nfunction lastTotalSupplyOfBears() public nonPayable { \n    return _lastTotalSupplyOfBears;\n}\n\nfunction setRoundTime(uint256 varg0, uint256 varg1) public nonPayable { \n    require(msg.data.length - 4 >= 64);\n    require(msg.sender == _owner);\n    _defaultCurrentDeadlineInHours = varg0;\n    _defaultLastDeadlineInHours = varg1;\n    _currentDeadline = block.timestamp + 3600 * varg0;\n    _lastDeadline = 3600 * varg1 + block.timestamp;\n}\n\nfunction lastWinner() public nonPayable { \n    return _lastWinner;\n}\n\nfunction 0xdef(uint256 varg0) private { \n    v0 = v1 = 0;\n    v2 = _SafeAdd(_lastTotalSupplyOfBulls, _lastTotalSupplyOfBears);\n    v3 = address(varg0);\n    if (_depositBears[~0 + _currentRound]) {\n        v4 = _lastTotalSupplyOfBears;\n        v5 = address(varg0);\n        v6 = v7 = 3725;\n        v8 = v9 = 0x2190(_depositBears[~0 + _currentRound], v2);\n    }\n    v0 = v10 = _SafeDiv(v4, v8);\n    v11 = address(varg0);\n    if (_depositBulls[~0 + _currentRound]) {\n        v4 = v12 = _lastTotalSupplyOfBulls;\n        v13 = address(varg0);\n        v6 = v14 = 3842;\n        v8 = v15 = 0x2190(_depositBulls[~0 + _currentRound], v2);\n    }\n    return v0;\n}\n\nfunction _SafeAdd(uint256 varg0, uint256 varg1) private { \n    v0 = varg0 + varg1;\n    require(v0 >= varg1);\n    return v0;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        v0 = function_selector >> 224;\n        if (0x89db3d20 > v0) {\n            if (0x32bc4cfd > v0) {\n                if (0x16dc3fbe > v0) {\n                    if (0x12cc1203 > v0) {\n                        if (0x58c6ed1 == v0) {\n                            countOfBulls();\n                        } else if (0xef4ea03 == v0) {\n                            rateModifier();\n                        } else if (0x12c426fe == v0) {\n                            totalGWSupplyOfBulls();\n                        }\n                    } else if (0x12cc1203 == v0) {\n                        depositBears(uint256,address);\n                    } else if (0x12d65fd9 == v0) {\n                        setBullsAddress(address);\n                    } else if (0x12f4ced1 == v0) {\n                        totalSupplyOfBears();\n                    } else if (0x165ee67e == v0) {\n                        defaultCurrentDeadlineInHours();\n                    }\n                } else if (0x2acf4217 > v0) {\n                    if (0x16dc3fbe == v0) {\n                        calculateGWPrize(address);\n                    } else if (0x1865c57d == v0) {\n                        getState();\n                    } else if (0x1f803c6e == v0) {\n                        lastTotalSupplyOfBulls();\n                    } else if (0x2073c8d8 == v0) {\n                        lastTotalGWSupplyOfBears();\n                    }\n                } else if (0x2acf4217 == v0) {\n                    setBearsAddress(address);\n                } else if (0x2b566abf == v0) {\n                    lastRoundHero();\n                } else if (0x2c4e722e == v0) {\n                    rate();\n                } else if (0x327fee98 == v0) {\n                    probabilityOfBears();\n                }\n            } else if (0x5338312a > v0) {\n                if (0x41911077 > v0) {\n                    if (0x32bc4cfd == v0) {\n                        estimateTokenPercent(uint256);\n                    } else if (0x353fe20c == v0) {\n                        probabilityOfBulls();\n                    } else if (0x36d7ac39 == v0) {\n                        countOfBears();\n                    } else if (0x39c70390 == v0) {\n                        lastBalanceGW();\n                    }\n                } else if (0x41911077 == v0) {\n                    remainderGW();\n                } else if (0x472c9fcc == v0) {\n                    lastWithdrawn();\n                } else if (0x4a78cdba == v0) {\n                    jackPot();\n                } else if (0x4e0dea91 == v0) {\n                    calculateLastGWPrize(address);\n                }\n            } else if (0x718f571b > v0) {\n                if (0x5338312a == v0) {\n                    depositBulls(uint256,address);\n                } else if (0x5a2215de == v0) {\n                    totalSupplyOfBulls();\n                } else if (0x6654a773 == v0) {\n                    lastWithdrawnGW();\n                } else if (0x6cae4a8f == v0) {\n                    lastHero();\n                }\n            } else if (0x718f571b == v0) {\n                withdrawnGW();\n            } else if (0x721ec693 == v0) {\n                currentDeadline();\n            } else if (0x72f35f9e == v0) {\n                BearsContract();\n            } else if (0x7eb4530a == v0) {\n                setGameWaveAddress(address);\n            }\n        } else if (0xc922d4d5 > v0) {\n            if (0x9b2f2818 > v0) {\n                if (0x8e5e66c8 > v0) {\n                    if (0x89db3d20 == v0) {\n                        lastDeadline();\n                    } else if (0x8a1704af == v0) {\n                        lastProbabilityOfBears();\n                    } else if (0x8a19c8bc == v0) {\n                        currentRound();\n                    } else if (0x8da5cb5b == v0) {\n                        owner();\n                    }\n                } else if (0x8e5e66c8 == v0) {\n                    calculateETHPrize(address);\n                } else if (0x8f1c56bd == v0) {\n                    lastBalance();\n                } else if (0x914dea93 == v0) {\n                    setInfo(address,uint256);\n                } else if (0x96e26159 == v0) {\n                    totalGWSupplyOfBears();\n                }\n            } else if (0xb2412340 > v0) {\n                if (0x9b2f2818 == v0) {\n                    lastCountOfBears();\n                } else if (0xa0684251 == v0) {\n                    remainder();\n                } else if (0xa2d5738f == v0) {\n                    defaultLastDeadlineInHours();\n                } else if (0xa80a8cf9 == v0) {\n                    lastHeroHistory();\n                }\n            } else if (0xb2412340 == v0) {\n                setRateToken(uint256,uint256);\n            } else if (0xbbe4fd50 == v0) {\n                getNow();\n            } else if (0xbef4876b == v0) {\n                finished();\n            } else if (0xc80ec522 == v0) {\n                withdrawn();\n            }\n        } else if (0xeed22fc0 > v0) {\n            if (0xdf15c37e > v0) {\n                if (0xc922d4d5 == v0) {\n                    calculateProbability();\n                } else if (0xd52f80a5 == v0) {\n                    lastJackPot();\n                } else if (0xd8829531 == v0) {\n                    tokenReturn();\n                } else if (0xdaf2917e == v0) {\n                    BullsContract();\n                }\n            } else if (0xdf15c37e == v0) {\n                getWinners();\n            } else if (0xdfbf53ae == v0) {\n                winner();\n            } else if (0xdfe66829 == v0) {\n                lastProbabilityOfBulls();\n            } else if (0xe52aaf0e == v0) {\n                calculateLastETHPrize(address);\n            }\n        } else if (0xf4b5cbc4 > v0) {\n            if (0xeed22fc0 == v0) {\n                lastCountOfBulls();\n            } else if (0xf24c7d71 == v0) {\n                lastTotalGWSupplyOfBulls();\n            } else if (0xf2fde38b == v0) {\n                transferOwnership(address);\n            } else if (0xf3ce955e == v0) {\n                GameWaveContract();\n            }\n        } else if (0xf4b5cbc4 == v0) {\n            setCrowdSale(address);\n        } else if (0xfb4dcb7a == v0) {\n            lastTotalSupplyOfBears();\n        } else if (0xfc9dc608 == v0) {\n            setRoundTime(uint256,uint256);\n        } else if (0xfe188184 == v0) {\n            lastWinner();\n        }\n    }\n    fallback();\n}\n.",
	"status": "1",
	"time_cost": 52.4265079498291,
	"usage": {
		"completion_tokens": 908,
		"prompt_tokens": 9625,
		"total_tokens": 10533
	}
}