{
	"address": "0xdfd8e9fda3ac12884e35eaea35d763517bb79176",
	"choices": {
		"finish_reason": "stop",
		"index": 0,
		"logprobs": null,
		"message": {
			"content": "Apologies for the confusion, but the given decompiled code seems to be pseudo-code and it's not directly translatable into Solidity code. However, I can provide a simplified Solidity smart contract that contains some of the features mentioned in the provided pseudo-code such as total supply, balance tracking, and basic token transfers.\n\n```solidity\n// SPDX-License-Identifier: MIT\npragma solidity >=0.4.22 <0.9.0;\n\ncontract Token {\n    uint256 public totalSupply;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping (address => uint256)) public allowance;\n\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    constructor(uint256 initialSupply) public {\n        totalSupply = initialSupply;\n        balanceOf[msg.sender] = initialSupply;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        emit Transfer(msg.sender, _to, _value);\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        emit Approval(msg.sender, _spender, _value);\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balanceOf[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        emit Transfer(_from, _to, _value);\n        return true;\n    }\n}\n```\nThis is a basic ERC20 token contract. It allows for the creation of an initial supply of tokens, transfer of tokens between addresses, and approval for transfers from one address by another.",
			"function_call": null,
			"role": "assistant",
			"tool_calls": null
		}
	},
	"created": 1711532006,
	"id": "chatcmpl-97JwsbYwwsQXqg65G7K3VrLCYJAgv",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2022.11.23 18:47 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256[] _version; // STORAGE[0x3]\nuint256 _fundingStartBlock; // STORAGE[0x6]\nuint256 _fundingEndBlock; // STORAGE[0x7]\nuint256 _ethFundDeposit; // STORAGE[0x4] bytes 0 to 19\nuint256 _sPINFundDeposit; // STORAGE[0x5] bytes 0 to 19\nuint256 _isFinalized; // STORAGE[0x5] bytes 20 to 20\n\n// Events\nCreateSPIN(address, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction () public payable { \n    require(!_isFinalized);\n    require(block.number >= _fundingStartBlock);\n    require(block.number <= _fundingEndBlock);\n    require(msg.value);\n    v0 = 0x621();\n    v1 = v2 = !msg.value;\n    if (msg.value) {\n        assert(msg.value);\n        v1 = v3 = v0 * msg.value / msg.value == v0;\n    }\n    assert(v1);\n    if (v0 * msg.value + _totalSupply < _totalSupply) {\n        assert(v0 * msg.value + _totalSupply >= _totalSupply);\n    } else {\n        assert(v0 * msg.value + _totalSupply >= v0 * msg.value);\n    }\n    require(0x84595161401484a000000 >= v0 * msg.value + _totalSupply);\n    _totalSupply += v0 * msg.value;\n    _balanceOf[msg.sender] += v0 * msg.value;\n    emit CreateSPIN(msg.sender, v0 * msg.value);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        v0[v2] = v1[v2];\n        v2 += 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'ETHERSPIN';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = varg2 > 0;\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        _balanceOf[varg1] += varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction tokenRate() public nonPayable { \n    v0 = 0x621();\n    return v0;\n}\n\nfunction finalize() public nonPayable { \n    require(!_isFinalized);\n    require(_ethFundDeposit == msg.sender);\n    v0 = v1 = block.number <= _fundingEndBlock;\n    if (v1) {\n        v0 = 0x84595161401484a000000 != _totalSupply;\n    }\n    require(!v0);\n    _isFinalized = 1;\n    v2 = _ethFundDeposit.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v2);\n}\n\nfunction SPINFund() public nonPayable { \n    return 0x1a784379d99db42000000;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[](_version.length);\n    v1 = v2 = v0.data;\n    if (_version.length) {\n        if (31 < _version.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _version.length <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        v4[v5] = v0[v5];\n        v5 += 32;\n    }\n    v7 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction tokenCreationCap() public nonPayable { \n    return 0x84595161401484a000000;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction isFinalized() public nonPayable { \n    return _isFinalized;\n}\n\nfunction fundingEndBlock() public nonPayable { \n    return _fundingEndBlock;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        v0[v2] = v1[v2];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x5350494e00000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction SPINFundDeposit() public nonPayable { \n    return _sPINFundDeposit;\n}\n\nfunction ethFundDeposit() public nonPayable { \n    return _ethFundDeposit;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v0 = varg1 > 0;\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0x5180x8efB0x33f;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction fundingStartBlock() public nonPayable { \n    return _fundingStartBlock;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction 0x621() private { \n    v0 = v1 = block.number >= _fundingStartBlock;\n    if (v1) {\n        v0 = v2 = block.number < 250 + _fundingStartBlock;\n    }\n    if (!v0) {\n        v3 = v4 = block.number >= _fundingStartBlock;\n        if (v4) {\n            v3 = v5 = block.number < 33600 + _fundingStartBlock;\n        }\n        if (!v3) {\n            v6 = v7 = block.number >= _fundingStartBlock;\n            if (v7) {\n                v6 = v8 = block.number < 0x10680 + _fundingStartBlock;\n            }\n            if (!v6) {\n                v9 = v10 = block.number >= _fundingStartBlock;\n                if (v10) {\n                    v9 = v11 = block.number < 0x189c0 + _fundingStartBlock;\n                }\n                if (!v9) {\n                    v12 = v13 = 500;\n                } else {\n                    v12 = v14 = 600;\n                }\n            } else {\n                v12 = v15 = 750;\n            }\n        } else {\n            v12 = v16 = 1000;\n        }\n    } else {\n        v12 = v17 = 1300;\n    }\n    return v12;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        v0 = uint32(function_selector >> 224);\n        if (v0 == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == v0) {\n            approve(address,uint256);\n        } else if (0x18160ddd == v0) {\n            totalSupply();\n        } else if (0x23b872dd == v0) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == v0) {\n            decimals();\n        } else if (0x31711884 == v0) {\n            tokenRate();\n        } else if (0x4bb278f3 == v0) {\n            finalize();\n        } else if (0x54659d99 == v0) {\n            SPINFund();\n        } else if (0x54fd4d50 == v0) {\n            version();\n        } else if (0x6f7920fd == v0) {\n            tokenCreationCap();\n        } else if (0x70a08231 == v0) {\n            balanceOf(address);\n        } else if (0x8d4e4083 == v0) {\n            isFinalized();\n        } else if (0x91b43d13 == v0) {\n            fundingEndBlock();\n        } else if (0x95d89b41 == v0) {\n            symbol();\n        } else if (0x9ba4eb5f == v0) {\n            SPINFundDeposit();\n        } else if (0xa81c3bdf == v0) {\n            ethFundDeposit();\n        } else if (0xa9059cbb == v0) {\n            transfer(address,uint256);\n        } else if (0xbe28f5db != v0) {\n            if (0xd648a647 == v0) {\n                fundingStartBlock();\n            } else if (0xdd62ed3e == v0) {\n                allowance(address,address);\n            }\n        }\n    }\n    ();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.11.23 18:47 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256[] _version; // STORAGE[0x3]\nuint256 _fundingStartBlock; // STORAGE[0x6]\nuint256 _fundingEndBlock; // STORAGE[0x7]\nuint256 _ethFundDeposit; // STORAGE[0x4] bytes 0 to 19\nuint256 _sPINFundDeposit; // STORAGE[0x5] bytes 0 to 19\nuint256 _isFinalized; // STORAGE[0x5] bytes 20 to 20\n\n// Events\nCreateSPIN(address, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction () public payable { \n    require(!_isFinalized);\n    require(block.number >= _fundingStartBlock);\n    require(block.number <= _fundingEndBlock);\n    require(msg.value);\n    v0 = 0x621();\n    v1 = v2 = !msg.value;\n    if (msg.value) {\n        assert(msg.value);\n        v1 = v3 = v0 * msg.value / msg.value == v0;\n    }\n    assert(v1);\n    if (v0 * msg.value + _totalSupply < _totalSupply) {\n        assert(v0 * msg.value + _totalSupply >= _totalSupply);\n    } else {\n        assert(v0 * msg.value + _totalSupply >= v0 * msg.value);\n    }\n    require(0x84595161401484a000000 >= v0 * msg.value + _totalSupply);\n    _totalSupply += v0 * msg.value;\n    _balanceOf[msg.sender] += v0 * msg.value;\n    emit CreateSPIN(msg.sender, v0 * msg.value);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        v0[v2] = v1[v2];\n        v2 += 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'ETHERSPIN';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = varg2 > 0;\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        _balanceOf[varg1] += varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction tokenRate() public nonPayable { \n    v0 = 0x621();\n    return v0;\n}\n\nfunction finalize() public nonPayable { \n    require(!_isFinalized);\n    require(_ethFundDeposit == msg.sender);\n    v0 = v1 = block.number <= _fundingEndBlock;\n    if (v1) {\n        v0 = 0x84595161401484a000000 != _totalSupply;\n    }\n    require(!v0);\n    _isFinalized = 1;\n    v2 = _ethFundDeposit.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v2);\n}\n\nfunction SPINFund() public nonPayable { \n    return 0x1a784379d99db42000000;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[](_version.length);\n    v1 = v2 = v0.data;\n    if (_version.length) {\n        if (31 < _version.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _version.length <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        v4[v5] = v0[v5];\n        v5 += 32;\n    }\n    v7 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction tokenCreationCap() public nonPayable { \n    return 0x84595161401484a000000;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction isFinalized() public nonPayable { \n    return _isFinalized;\n}\n\nfunction fundingEndBlock() public nonPayable { \n    return _fundingEndBlock;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        v0[v2] = v1[v2];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x5350494e00000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction SPINFundDeposit() public nonPayable { \n    return _sPINFundDeposit;\n}\n\nfunction ethFundDeposit() public nonPayable { \n    return _ethFundDeposit;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v0 = varg1 > 0;\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0x5180x8efB0x33f;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction fundingStartBlock() public nonPayable { \n    return _fundingStartBlock;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction 0x621() private { \n    v0 = v1 = block.number >= _fundingStartBlock;\n    if (v1) {\n        v0 = v2 = block.number < 250 + _fundingStartBlock;\n    }\n    if (!v0) {\n        v3 = v4 = block.number >= _fundingStartBlock;\n        if (v4) {\n            v3 = v5 = block.number < 33600 + _fundingStartBlock;\n        }\n        if (!v3) {\n            v6 = v7 = block.number >= _fundingStartBlock;\n            if (v7) {\n                v6 = v8 = block.number < 0x10680 + _fundingStartBlock;\n            }\n            if (!v6) {\n                v9 = v10 = block.number >= _fundingStartBlock;\n                if (v10) {\n                    v9 = v11 = block.number < 0x189c0 + _fundingStartBlock;\n                }\n                if (!v9) {\n                    v12 = v13 = 500;\n                } else {\n                    v12 = v14 = 600;\n                }\n            } else {\n                v12 = v15 = 750;\n            }\n        } else {\n            v12 = v16 = 1000;\n        }\n    } else {\n        v12 = v17 = 1300;\n    }\n    return v12;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        v0 = uint32(function_selector >> 224);\n        if (v0 == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == v0) {\n            approve(address,uint256);\n        } else if (0x18160ddd == v0) {\n            totalSupply();\n        } else if (0x23b872dd == v0) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == v0) {\n            decimals();\n        } else if (0x31711884 == v0) {\n            tokenRate();\n        } else if (0x4bb278f3 == v0) {\n            finalize();\n        } else if (0x54659d99 == v0) {\n            SPINFund();\n        } else if (0x54fd4d50 == v0) {\n            version();\n        } else if (0x6f7920fd == v0) {\n            tokenCreationCap();\n        } else if (0x70a08231 == v0) {\n            balanceOf(address);\n        } else if (0x8d4e4083 == v0) {\n            isFinalized();\n        } else if (0x91b43d13 == v0) {\n            fundingEndBlock();\n        } else if (0x95d89b41 == v0) {\n            symbol();\n        } else if (0x9ba4eb5f == v0) {\n            SPINFundDeposit();\n        } else if (0xa81c3bdf == v0) {\n            ethFundDeposit();\n        } else if (0xa9059cbb == v0) {\n            transfer(address,uint256);\n        } else if (0xbe28f5db != v0) {\n            if (0xd648a647 == v0) {\n                fundingStartBlock();\n            } else if (0xdd62ed3e == v0) {\n                allowance(address,address);\n            }\n        }\n    }\n    ();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.11.23 18:47 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _totalSupply; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x2]\nuint256[] _version; // STORAGE[0x3]\nuint256 _fundingStartBlock; // STORAGE[0x6]\nuint256 _fundingEndBlock; // STORAGE[0x7]\nuint256 _ethFundDeposit; // STORAGE[0x4] bytes 0 to 19\nuint256 _sPINFundDeposit; // STORAGE[0x5] bytes 0 to 19\nuint256 _isFinalized; // STORAGE[0x5] bytes 20 to 20\n\n// Events\nCreateSPIN(address, uint256);\nApproval(address, address, uint256);\nTransfer(address, address, uint256);\n\nfunction () public payable { \n    require(!_isFinalized);\n    require(block.number >= _fundingStartBlock);\n    require(block.number <= _fundingEndBlock);\n    require(msg.value);\n    v0 = 0x621();\n    v1 = v2 = !msg.value;\n    if (msg.value) {\n        assert(msg.value);\n        v1 = v3 = v0 * msg.value / msg.value == v0;\n    }\n    assert(v1);\n    if (v0 * msg.value + _totalSupply < _totalSupply) {\n        assert(v0 * msg.value + _totalSupply >= _totalSupply);\n    } else {\n        assert(v0 * msg.value + _totalSupply >= v0 * msg.value);\n    }\n    require(0x84595161401484a000000 >= v0 * msg.value + _totalSupply);\n    _totalSupply += v0 * msg.value;\n    _balanceOf[msg.sender] += v0 * msg.value;\n    emit CreateSPIN(msg.sender, v0 * msg.value);\n}\n\nfunction name() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        v0[v2] = v1[v2];\n        v2 += 32;\n    }\n    if (9) {\n        MEM[v0.data] = ~0xffffffffffffffffffffffffffffffffffffffffffffff & 'ETHERSPIN';\n    }\n    return v0;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    emit Approval(msg.sender, varg0, varg1);\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    v0 = v1 = _balanceOf[varg0] >= varg2;\n    if (_balanceOf[varg0] >= varg2) {\n        v0 = v2 = _allowance[msg.sender] >= varg2;\n    }\n    if (v0) {\n        v0 = varg2 > 0;\n    }\n    if (!v0) {\n        v3 = v4 = 0;\n    } else {\n        _balanceOf[varg1] += varg2;\n        _balanceOf[varg0] = _balanceOf[varg0] - varg2;\n        _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n        emit Transfer(varg0, varg1, varg2);\n        v3 = v5 = 1;\n    }\n    return v3;\n}\n\nfunction decimals() public nonPayable { \n    return 18;\n}\n\nfunction tokenRate() public nonPayable { \n    v0 = 0x621();\n    return v0;\n}\n\nfunction finalize() public nonPayable { \n    require(!_isFinalized);\n    require(_ethFundDeposit == msg.sender);\n    v0 = v1 = block.number <= _fundingEndBlock;\n    if (v1) {\n        v0 = 0x84595161401484a000000 != _totalSupply;\n    }\n    require(!v0);\n    _isFinalized = 1;\n    v2 = _ethFundDeposit.call().value((address(this)).balance).gas(2300 * !(address(this)).balance);\n    require(v2);\n}\n\nfunction SPINFund() public nonPayable { \n    return 0x1a784379d99db42000000;\n}\n\nfunction version() public nonPayable { \n    v0 = new bytes[](_version.length);\n    v1 = v2 = v0.data;\n    if (_version.length) {\n        if (31 < _version.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _version.length <= v1);\n        } else {\n            MEM[v2] = _version.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        v4[v5] = v0[v5];\n        v5 += 32;\n    }\n    v7 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v7 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v7 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction tokenCreationCap() public nonPayable { \n    return 0x84595161401484a000000;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction isFinalized() public nonPayable { \n    return _isFinalized;\n}\n\nfunction fundingEndBlock() public nonPayable { \n    return _fundingEndBlock;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new array[](v1.length);\n    v2 = v3 = 0;\n    while (v2 < v1.length) {\n        v0[v2] = v1[v2];\n        v2 += 32;\n    }\n    if (4) {\n        MEM[v0.data] = 0x5350494e00000000000000000000000000000000000000000000000000000000;\n    }\n    return v0;\n}\n\nfunction SPINFundDeposit() public nonPayable { \n    return _sPINFundDeposit;\n}\n\nfunction ethFundDeposit() public nonPayable { \n    return _ethFundDeposit;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = _balanceOf[msg.sender] >= varg1;\n    if (_balanceOf[msg.sender] >= varg1) {\n        v0 = varg1 > 0;\n    }\n    if (!v0) {\n        v2 = v3 = 0;\n        goto 0x5180x8efB0x33f;\n    } else {\n        _balanceOf[msg.sender] = _balanceOf[msg.sender] - varg1;\n        _balanceOf[varg0] += varg1;\n        emit Transfer(msg.sender, varg0, varg1);\n        v2 = v4 = 1;\n    }\n    return v2;\n}\n\nfunction fundingStartBlock() public nonPayable { \n    return _fundingStartBlock;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction 0x621() private { \n    v0 = v1 = block.number >= _fundingStartBlock;\n    if (v1) {\n        v0 = v2 = block.number < 250 + _fundingStartBlock;\n    }\n    if (!v0) {\n        v3 = v4 = block.number >= _fundingStartBlock;\n        if (v4) {\n            v3 = v5 = block.number < 33600 + _fundingStartBlock;\n        }\n        if (!v3) {\n            v6 = v7 = block.number >= _fundingStartBlock;\n            if (v7) {\n                v6 = v8 = block.number < 0x10680 + _fundingStartBlock;\n            }\n            if (!v6) {\n                v9 = v10 = block.number >= _fundingStartBlock;\n                if (v10) {\n                    v9 = v11 = block.number < 0x189c0 + _fundingStartBlock;\n                }\n                if (!v9) {\n                    v12 = v13 = 500;\n                } else {\n                    v12 = v14 = 600;\n                }\n            } else {\n                v12 = v15 = 750;\n            }\n        } else {\n            v12 = v16 = 1000;\n        }\n    } else {\n        v12 = v17 = 1300;\n    }\n    return v12;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        v0 = uint32(function_selector >> 224);\n        if (v0 == 0x6fdde03) {\n            name();\n        } else if (0x95ea7b3 == v0) {\n            approve(address,uint256);\n        } else if (0x18160ddd == v0) {\n            totalSupply();\n        } else if (0x23b872dd == v0) {\n            transferFrom(address,address,uint256);\n        } else if (0x313ce567 == v0) {\n            decimals();\n        } else if (0x31711884 == v0) {\n            tokenRate();\n        } else if (0x4bb278f3 == v0) {\n            finalize();\n        } else if (0x54659d99 == v0) {\n            SPINFund();\n        } else if (0x54fd4d50 == v0) {\n            version();\n        } else if (0x6f7920fd == v0) {\n            tokenCreationCap();\n        } else if (0x70a08231 == v0) {\n            balanceOf(address);\n        } else if (0x8d4e4083 == v0) {\n            isFinalized();\n        } else if (0x91b43d13 == v0) {\n            fundingEndBlock();\n        } else if (0x95d89b41 == v0) {\n            symbol();\n        } else if (0x9ba4eb5f == v0) {\n            SPINFundDeposit();\n        } else if (0xa81c3bdf == v0) {\n            ethFundDeposit();\n        } else if (0xa9059cbb == v0) {\n            transfer(address,uint256);\n        } else if (0xbe28f5db != v0) {\n            if (0xd648a647 == v0) {\n                fundingStartBlock();\n            } else if (0xdd62ed3e == v0) {\n                allowance(address,address);\n            }\n        }\n    }\n    ();\n}\n.",
	"status": "1",
	"time_cost": 175.98019766807556,
	"usage": {
		"completion_tokens": 436,
		"prompt_tokens": 2559,
		"total_tokens": 2995
	}
}