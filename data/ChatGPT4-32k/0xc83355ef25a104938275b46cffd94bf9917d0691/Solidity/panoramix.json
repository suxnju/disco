{
	"address": "0xc83355ef25a104938275b46cffd94bf9917d0691",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\ndef storage:\n  stor0 is uint256 at storage 0\n  totalSupply is uint256 at storage 1\n  stor2 is array of uint256 at storage 2\n  stor3 is array of uint256 at storage 3\n  submitted is uint256 at storage 4\n  tier is uint256 at storage 5\n  name is array of uint256 at storage 6\n  decimals is uint8 at storage 7\n  symbol is array of uint256 at storage 8\n  swap is uint8 at storage 9\n  wait is uint8 at storage 9 offset 8\n  extended is uint8 at storage 9 offset 16\n  stor9 is uint256 at storage 9 offset 16\n  stor9 is uint256 at storage 9 offset 8\n  endTime is uint256 at storage 10\n  stor11 is uint256 at storage 11\n  stor12 is uint256 at storage 12\n  stor13 is uint256 at storage 13\n  stor14 is uint256 at storage 14\n  stor15 is uint256 at storage 15\n  payRate is uint256 at storage 16\n  stor17 is uint256 at storage 17\n  stor18 is uint256 at storage 18\n  stor19 is uint256 at storage 19\n  balanceOf is mapping of uint256 at storage 20\n  allowance is mapping of uint256 at storage 21\n  foundationAddress is address at storage 22\n  owner is address at storage 23\n  devAddress is address at storage 24\n\ndef name(): # not payable\n  return name[0 len name.length]\n\ndef tier(): # not payable\n  return tier\n\ndef totalSupply(): # not payable\n  return totalSupply\n\ndef decimals(): # not payable\n  return decimals\n\ndef endTime(): # not payable\n  return endTime\n\ndef foundation(): # not payable\n  return foundationAddress\n\ndef wait(): # not payable\n  return bool(wait)\n\ndef extended(): # not payable\n  return bool(extended)\n\ndef submitted(): # not payable\n  return submitted\n\ndef balanceOf(address account): # not payable\n  return balanceOf[address(account)]\n\ndef swap(): # not payable\n  return bool(swap)\n\ndef owner(): # not payable\n  return owner\n\ndef dev(): # not payable\n  return devAddress\n\ndef symbol(): # not payable\n  return symbol[0 len symbol.length]\n\ndef allowance(address owner, address spender): # not payable\n  return allowance[address(owner)][address(spender)]\n\ndef payRate(): # not payable\n  return payRate\n\n#\n#  Regular functions\n#\n\ndef currentTier(): # not payable\n  if tier != 10:\n      return (tier + 1)\n  return 10\n\ndef changeOwner(address _newOwner): # not payable\n  require caller == owner\n  owner = _newOwner\n\ndef changeDev(address _receiver): # not payable\n  require caller == devAddress\n  devAddress = _receiver\n\ndef changeFoundation(address _receiver): # not payable\n  require caller == foundationAddress\n  foundationAddress = _receiver\n\ndef balanceMinusFeesOutstanding(): # not payable\n  return (eth.balance(this.address) - stor18 - ((1530 * submitted) - (1530 * stor17) / 10000))\n\ndef leftInTier(): # not payable\n  if tier == 10:\n      return 0\n  require tier < stor2.length\n  return (stor2[stor5] - submitted)\n\ndef approve(address spender, uint256 amount): # not payable\n  allowance[caller][address(spender)] = amount\n  log Approval(\n        address owner=amount,\n        address spender=caller,\n        uint256 value=spender)\n  return 1\n\ndef transferFrom(address sender, address recipient, uint256 amount): # not payable\n  require balanceOf[address(sender)] >= amount\n  require allowance[address(sender)][caller] >= amount\n  balanceOf[address(recipient)] += amount\n  balanceOf[address(sender)] -= amount\n  if allowance[address(sender)][caller] < -1:\n      allowance[address(sender)][caller] -= amount\n  log Transfer(\n        address from=amount,\n        address to=sender,\n        uint256 value=recipient)\n  return 1\n\ndef payFees(): # not payable\n  if block.timestamp >= endTime:\n      if swap:\n          if wait:\n              swap = 1\n              Mask(248, 0, stor9.field_8) = 0\n              if not extended:\n                  endTime = stor12\n              else:\n                  endTime = stor15\n              log SwapStarted(uint256 endTime=endTime)\n      else:\n          if wait:\n              swap = 1\n              Mask(248, 0, stor9.field_8) = 0\n              if not extended:\n                  endTime = stor12\n              else:\n                  endTime = stor15\n              log SwapStarted(uint256 endTime=endTime)\n          else:\n              if extended:\n                  Mask(248, 0, stor9.field_8) = 1\n                  endTime = stor14\n                  log WaitStarted(uint256 endTime=endTime)\n              else:\n                  if tier != 10:\n                      endTime = stor13\n                      Mask(240, 0, stor9.field_16) = 1\n                      log MiningExtended(\n                            uint256 end_time=endTime,\n                            uint256 swap_time=stor11,\n                            uint256 swap_end_time=stor12)\n                  else:\n                      Mask(248, 0, stor9.field_8) = 1\n                      endTime = stor11\n                      log WaitStarted(uint256 endTime=endTime)\n  stor17 = submitted\n  stor19 = 0\n  stor18 = 0\n  if stor18 + ((1530 * submitted) - (1530 * stor17) / 10000) > 0:\n      call foundationAddress with:\n         value stor18 + ((1530 * submitted) - (1530 * stor17) / 10000) / 2 wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n      call owner with:\n         value stor18 + ((1530 * submitted) - (1530 * stor17) / 10000) / 4 wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n      call devAddress with:\n         value stor18 + ((1530 * submitted) - (1530 * stor17) / 10000) / 4 wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n\ndef transfer(address recipient, uint256 amount): # not payable\n  require balanceOf[caller] >= amount\n  if block.timestamp >= endTime:\n      if swap:\n          if wait:\n              swap = 1\n              Mask(248, 0, stor9.field_8) = 0\n              if not extended:\n                  endTime = stor12\n              else:\n                  endTime = stor15\n              log SwapStarted(uint256 endTime=endTime)\n      else:\n          if wait:\n              swap = 1\n              Mask(248, 0, stor9.field_8) = 0\n              if not extended:\n                  endTime = stor12\n              else:\n                  endTime = stor15\n              log SwapStarted(uint256 endTime=endTime)\n          else:\n              if extended:\n                  Mask(248, 0, stor9.field_8) = 1\n                  endTime = stor14\n                  log WaitStarted(uint256 endTime=endTime)\n              else:\n                  if tier != 10:\n                      endTime = stor13\n                      Mask(240, 0, stor9.field_16) = 1\n                      log MiningExtended(\n                            uint256 end_time=endTime,\n                            uint256 swap_time=stor11,\n                            uint256 swap_end_time=stor12)\n                  else:\n                      Mask(248, 0, stor9.field_8) = 1\n                      endTime = stor11\n                      log WaitStarted(uint256 endTime=endTime)\n  if recipient != this.address:\n      balanceOf[caller] -= amount\n      balanceOf[address(recipient)] += amount\n      log Transfer(\n            address from=amount,\n            address to=caller,\n            uint256 value=recipient)\n  else:\n      require swap\n      if not payRate:\n          stor19 = stor18 + ((1530 * submitted) - (1530 * stor17) / 10000)\n          payRate = eth.balance(this.address) - stor19\n          require totalSupply / 10^18\n          payRate = payRate / totalSupply / 10^18\n      balanceOf[caller] -= amount\n      totalSupply -= amount\n      log Transfer(\n            address from=amount,\n            address to=caller,\n            uint256 value=recipient)\n      call caller with:\n         value amount * payRate / 10^18 wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n  return 1\n\ndef restart(): # not payable\n  require swap\n  require block.timestamp >= endTime\n  stor18 = 2000 * eth.balance(this.address) / 10000\n  if block.timestamp >= endTime:\n      if swap:\n          if wait:\n              swap = 1\n              Mask(248, 0, stor9.field_8) = 0\n              if not extended:\n                  endTime = stor12\n              else:\n                  endTime = stor15\n              log SwapStarted(uint256 endTime=endTime)\n      else:\n          if wait:\n              swap = 1\n              Mask(248, 0, stor9.field_8) = 0\n              if not extended:\n                  endTime = stor12\n              else:\n                  endTime = stor15\n              log SwapStarted(uint256 endTime=endTime)\n          else:\n              if extended:\n                  Mask(248, 0, stor9.field_8) = 1\n                  endTime = stor14\n                  log WaitStarted(uint256 endTime=endTime)\n              else:\n                  if tier != 10:\n                      endTime = stor13\n                      Mask(240, 0, stor9.field_16) = 1\n                      log MiningExtended(\n                            uint256 end_time=endTime,\n                            uint256 swap_time=stor11,\n                            uint256 swap_end_time=stor12)\n                  else:\n                      Mask(248, 0, stor9.field_8) = 1\n                      endTime = stor11\n                      log WaitStarted(uint256 endTime=endTime)\n  stor17 = submitted\n  stor19 = 0\n  stor18 = 0\n  if stor18 + ((1530 * submitted) - (1530 * stor17) / 10000) > 0:\n      call foundationAddress with:\n         value stor18 + ((1530 * submitted) - (1530 * stor17) / 10000) / 2 wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n      call owner with:\n         value stor18 + ((1530 * submitted) - (1530 * stor17) / 10000) / 4 wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n      call devAddress with:\n         value stor18 + ((1530 * submitted) - (1530 * stor17) / 10000) / 4 wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n  swap = 0\n  Mask(248, 0, stor9.field_8) = 0\n  Mask(240, 0, stor9.field_16) = 0\n  endTime = block.timestamp + (8784 * 24 * 3600)\n  stor11 = endTime + (720 * 24 * 3600)\n  stor12 = stor11 + (120 * 24 * 3600)\n  stor13 = block.timestamp + (26304 * 24 * 3600)\n  stor14 = stor13 + (720 * 24 * 3600)\n  stor15 = stor14 + (120 * 24 * 3600)\n  stor17 = 0\n  submitted = 0\n  stor19 = 0\n  payRate = 0\n  tier = 0\n  log MiningStart(\n        uint256 end_time=endTime,\n        uint256 swap_time=stor11,\n        uint256 swap_end_time=stor12)\n\ndef _fallback(?) payable: # default function\n  require caller\n  require tier != 10\n  require not swap\n  require not wait\n  if submitted + call.value <= stor0:\n      submitted += call.value\n      if tier == 10:\n          balanceOf[caller] += 7400 * 10^6\n          totalSupply += 7400 * 10^6\n          log Mined(\n                address miner=7400 * 10^6,\n                uint256 amount=caller)\n          log Transfer(\n                address from=7400 * 10^6,\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] += call.value * stor3[stor5]\n          totalSupply += call.value * stor3[stor5]\n          log Mined(\n                address miner=(call.value * stor3[stor5]),\n                uint256 amount=caller)\n          log Transfer(\n                address from=(call.value * stor3[stor5]),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if submitted + call.value <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (submitted * stor3[stor5]) + (call.value * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier != 10:\n          require tier < stor2.length\n          if submitted + call.value <= stor2[stor5]:\n              require tier < stor3.length\n              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n          require tier < stor2.length\n          require tier < stor3.length\n          tier++\n          if tier != 10:\n              require tier < stor2.length\n              if submitted + call.value <= stor2[stor5]:\n                  require tier < stor3.length\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require tier < stor2.length\n              require tier < stor3.length\n              tier++\n              if tier != 10:\n                  require tier < stor2.length\n                  if submitted + call.value <= stor2[stor5]:\n                      require tier < stor3.length\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require tier < stor2.length\n                  require tier < stor3.length\n                  tier++\n                  if tier != 10:\n                      require tier < stor2.length\n                      if submitted + call.value <= stor2[stor5]:\n                          require tier < stor3.length\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require tier < stor2.length\n                      require tier < stor3.length\n                      tier++\n                      if tier != 10:\n                          require tier < stor2.length\n                          if submitted + call.value <= stor2[stor5]:\n                              require tier < stor3.length\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require tier < stor2.length\n                          require tier < stor3.length\n                          tier++\n                          if tier != 10:\n                              require tier < stor2.length\n                              if submitted + call.value <= stor2[stor5]:\n                                  require tier < stor3.length\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require tier < stor2.length\n                              require tier < stor3.length\n                              tier++\n                              if tier != 10:\n                                  require tier < stor2.length\n                                  if submitted + call.value <= stor2[stor5]:\n                                      require tier < stor3.length\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  require tier < stor2.length\n                                  require tier < stor3.length\n                                  tier++\n                                  if tier != 10:\n                                      require tier < stor2.length\n                                      if submitted + call.value <= stor2[stor5]:\n                                          require tier < stor3.length\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      require tier < stor2.length\n                                      require tier < stor3.length\n                                      tier++\n                                      if tier != 10:\n                                          require tier < stor2.length\n                                          if submitted + call.value <= stor2[stor5]:\n                                              require tier < stor3.length\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          require tier < stor2.length\n                                          require tier < stor3.length\n                                          tier++\n                                          if tier != 10:\n                                              require tier < stor2.length\n                                              if submitted + call.value <= stor2[stor5]:\n                                                  require tier < stor3.length\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                              require tier < stor2.length\n                                              require tier < stor3.length\n                                              tier++\n                                              if tier != 10:\n                                                  require tier < stor2.length\n                                                  if submitted + call.value > stor2[stor5]:\n  else:\n      call caller with:\n         value submitted + call.value + -stor0 - 1 wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n      submitted = stor0 + 1\n      if tier == 10:\n          balanceOf[caller] += 7400 * 10^6\n          totalSupply += 7400 * 10^6\n          log Mined(\n                address miner=7400 * 10^6,\n                uint256 amount=caller)\n          log Transfer(\n                address from=7400 * 10^6,\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] + stor3[stor5] - (submitted * stor3[stor5]) + (stor0 * stor3[stor5])\n          totalSupply = totalSupply + stor3[stor5] - (submitted * stor3[stor5]) + (stor0 * stor3[stor5])\n          log Mined(\n                address miner=(stor3[stor5] - (submitted * stor3[stor5]) + (stor0 * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=(stor3[stor5] - (submitted * stor3[stor5]) + (stor0 * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      require tier < stor3.length\n      tier++\n      if tier == 10:\n          balanceOf[caller] = balanceOf[caller] + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          totalSupply = totalSupply + (-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6\n          log Mined(\n                address miner=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                uint256 amount=caller)\n          log Transfer(\n                address from=((-1 * submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + (-1 * stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + 7400 * 10^6),\n                address to=this.address,\n                uint256 value=caller)\n          stop\n      require tier < stor2.length\n      if stor0 + 1 <= stor2[stor5]:\n          require tier < stor3.length\n          balanceOf[caller] = balanceOf[caller] - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n          totalSupply = totalSupply - (submitted * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) - (stor2[stor5] * stor3[stor5]) + (stor2[stor5] * stor3[stor5]) + stor3[stor5] + (stor0 * stor3[stor5]) - (stor2[stor5] * stor3[stor5])\n      else:\n          require tier < stor2.length\n          require tier < stor3.length\n          tier++\n          if tier != 10:\n              require tier < stor2.length\n              if stor0 + 1 <= stor2[stor5]:\n                  require tier < stor3.length\n                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n              require tier < stor2.length\n              require tier < stor3.length\n              tier++\n              if tier != 10:\n                  require tier < stor2.length\n                  if stor0 + 1 <= stor2[stor5]:\n                      require tier < stor3.length\n                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                  require tier < stor2.length\n                  require tier < stor3.length\n                  tier++\n                  if tier != 10:\n                      require tier < stor2.length\n                      if stor0 + 1 <= stor2[stor5]:\n                          require tier < stor3.length\n                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                      require tier < stor2.length\n                      require tier < stor3.length\n                      tier++\n                      if tier != 10:\n                          require tier < stor2.length\n                          if stor0 + 1 <= stor2[stor5]:\n                              require tier < stor3.length\n                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                          require tier < stor2.length\n                          require tier < stor3.length\n                          tier++\n                          if tier != 10:\n                              require tier < stor2.length\n                              if stor0 + 1 <= stor2[stor5]:\n                                  require tier < stor3.length\n                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                              require tier < stor2.length\n                              require tier < stor3.length\n                              tier++\n                              if tier != 10:\n                                  require tier < stor2.length\n                                  if stor0 + 1 <= stor2[stor5]:\n                                      require tier < stor3.length\n                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                  require tier < stor2.length\n                                  require tier < stor3.length\n                                  tier++\n                                  if tier != 10:\n                                      require tier < stor2.length\n                                      if stor0 + 1 <= stor2[stor5]:\n                                          require tier < stor3.length\n                                          ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                      require tier < stor2.length\n                                      require tier < stor3.length\n                                      tier++\n                                      if tier != 10:\n                                          require tier < stor2.length\n                                          if stor0 + 1 <= stor2[stor5]:\n                                              require tier < stor3.length\n                                              ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                          require tier < stor2.length\n                                          require tier < stor3.length\n                                          tier++\n                                          if tier != 10:\n                                              require tier < stor2.length\n                                              if stor0 + 1 <= stor2[stor5]:\n                                                  require tier < stor3.length\n                                                  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                              require tier < stor2.length\n                                              require tier < stor3.length\n                                              tier++\n                                              if tier != 10:\n                                                  require tier < stor2.length\n                                                  if stor0 + 1 <= stor2[stor5]:\n                                                      require tier < stor3.length\n                                                      ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n                                                  require tier < stor2.length\n                                                  require tier < stor3.length\n                                                  tier++\n                                                  if tier != 10:\n  ...  # Decompilation aborted, sorry: (\"decompilation didn't finish\",)\n\n",
	"language": "Solidity",
	"status": "This model's maximum context length is 32768 tokens. However, your messages resulted in 120111 tokens. Please reduce the length of the messages."
}