{
	"address": "0xc83355ef25a104938275b46cffd94bf9917d0691",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity contract code for the given decompiled code:\n\n```solidity\npragma solidity ^0.4.24;\n\ncontract Contract {\n    mapping (address => uint256) balances;\n    mapping (address => mapping (address => uint256)) allowed;\n    uint256 public totalSupply;\n    uint256 public decimals;\n    string public name;\n    string public symbol;\n    address public owner;\n    address public foundation;\n    uint256 public endTime;\n    uint256 public currentTier;\n    uint256 private var0; // no information given about this variable's purpose in the original code\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(allowed[_from][msg.sender] >= _value);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowed[_from][msg.sender] -= _value;\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function allowance(address _owner, address _spender) public view returns (uint256 remaining) {\n        return allowed[_owner][_spender];\n    }\n\n    function balanceOf(address _owner) public view returns (uint256 balance) {\n        return balances[_owner];\n    }\n\n    function name() public view returns (string) {\n        return name;\n    }\n\n    function symbol() public view returns (string) {\n        return symbol;\n    }\n\n    function decimals() public view returns (uint256) {\n        return decimals;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return totalSupply;\n    }\n\n    function changeFoundation(address _newFoundation) public {\n        require(msg.sender == foundation);\n        foundation = _newFoundation;\n    }\n\n    function changeOwner(address _newOwner) public {\n        require(msg.sender == owner);\n        owner = _newOwner;\n    }\n}\n```\n\nPlease note that the contract code here is based on ERC20 standard as per the decompiled EVM bytecode provided. However, the functionality of the original contract cannot be determined solely from the decompiled EVM bytecode. Therefore, the constructed Solidity contract may not fully reflect the functionality of the original contract. The variable names are chosen to be generic, as the decompiled code does not provide the original variable names. The functions `restart()`, `payFees()`, and `swap()` from the decompiled code are not included in the Solidity contract as their implementations are unknown.",
				"role": "assistant"
			}
		}
	],
	"created": 1700472129,
	"id": "chatcmpl-8Mullp11PbbeHTaO7K0i2YUSEVjkq",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_015F:\n            var var0 = 0x00;\n            var var1 = msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var1) {\n                var1 = storage[0x05] != 0x0a;\n            \n                if (!var1) { goto label_01BF; }\n                else { goto label_01A7; }\n            } else if (!var1) {\n            label_01BF:\n            \n                if (!var1) {\n                label_01DE:\n                \n                    if (!var1) { revert(memory[0x00:0x00]); }\n                \n                label_01E9:\n                    var1 = 0x01f3;\n                    var var2 = msg.sender;\n                    var var3 = msg.value;\n                    var1 = func_097F(var2, var3);\n                    var temp0 = var1;\n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = temp0;\n                    var temp2 = memory[0x40:0x60];\n                    log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x3ad10ba9777a3bc21180a465e5459861d07cbdb271af9a0f10c993b365b760f8, msg.sender]);\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = temp0;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, address(this), msg.sender]);\n                    stop();\n                } else {\n                label_01C6:\n                \n                    if (!!(storage[0x09] / 0x0100 ** 0x01 & 0xff) == !!0x00) { goto label_01E9; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_01A7:\n                var1 = !!(storage[0x09] & 0xff) == !!0x00;\n            \n                if (!var1) { goto label_01DE; }\n                else { goto label_01C6; }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02be;\n                var2 = name();\n                var temp5 = memory[0x40:0x60];\n                var3 = temp5;\n                var var4 = var3;\n                var temp6 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp6 - var4;\n                var temp7 = var2;\n                memory[temp6:temp6 + 0x20] = memory[temp7:temp7 + 0x20];\n                var var5 = temp6 + 0x20;\n                var var7 = memory[temp7:temp7 + 0x20];\n                var var6 = temp7 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_02FE:\n                    var temp8 = var7;\n                    var5 = temp8 + var5;\n                    var6 = temp8 & 0x1f;\n                \n                    if (!var6) {\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + var5 - temp9];\n                    } else {\n                        var temp10 = var6;\n                        var temp11 = var5 - temp10;\n                        memory[temp11:temp11 + 0x20] = ~(0x0100 ** (0x20 - temp10) - 0x01) & memory[temp11:temp11 + 0x20];\n                        var temp12 = memory[0x40:0x60];\n                        return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n                    }\n                } else {\n                label_02EC:\n                    var temp13 = var11;\n                    memory[var9 + temp13:var9 + temp13 + 0x20] = memory[var10 + temp13:var10 + temp13 + 0x20];\n                    var11 = temp13 + 0x20;\n                \n                    if (var11 >= var8) { goto label_02FE; }\n                    else { goto label_02EC; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0379;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = !!var1;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x16f4d022) {\n                // Dispatch table entry for tier()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03a6;\n                var2 = tier();\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var2;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cf;\n                var1 = totalSupply();\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var1;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n            } else if (var0 == 0x1ef3755d) {\n                // Dispatch table entry for restart()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f8;\n                restart();\n                stop();\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0459;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = !!var1;\n                var temp21 = memory[0x40:0x60];\n                return memory[temp21:temp21 + (temp20 + 0x20) - temp21];\n            } else if (var0 == 0x24bb49d6) {\n                // Dispatch table entry for balanceMinusFeesOutstanding()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0486;\n                var1 = balanceMinusFeesOutstanding();\n                var temp22 = memory[0x40:0x60];\n                memory[temp22:temp22 + 0x20] = var1;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04af;\n                var2 = decimals();\n                var temp24 = memory[0x40:0x60];\n                memory[temp24:temp24 + 0x20] = var2 & 0xff;\n                var temp25 = memory[0x40:0x60];\n                return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n            } else if (var0 == 0x3197cbb6) {\n                // Dispatch table entry for endTime()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04de;\n                var2 = endTime();\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0x41fbb050) {\n                // Dispatch table entry for foundation()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0507;\n                var2 = foundation();\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else if (var0 == 0x62779e15) {\n                // Dispatch table entry for payFees()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x055c;\n                payFees();\n                stop();\n            } else if (var0 == 0x64bd7013) {\n                // Dispatch table entry for wait()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0571;\n                var2 = wait();\n                var temp30 = memory[0x40:0x60];\n                memory[temp30:temp30 + 0x20] = !!var2;\n                var temp31 = memory[0x40:0x60];\n                return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n            } else if (var0 == 0x65a5f1cd) {\n                // Dispatch table entry for changeFoundation(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05c2;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                changeFoundation(var2);\n                stop();\n            } else if (var0 == 0x6f3921ee) {\n                // Dispatch table entry for extended()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d7;\n                var2 = extended();\n                var temp32 = memory[0x40:0x60];\n                memory[temp32:temp32 + 0x20] = !!var2;\n                var temp33 = memory[0x40:0x60];\n                return memory[temp33:temp33 + (temp32 + 0x20) - temp33];\n            } else if (var0 == 0x708ddf7b) {\n                // Dispatch table entry for submitted()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0604;\n                var1 = submitted();\n                var temp34 = memory[0x40:0x60];\n                memory[temp34:temp34 + 0x20] = var1;\n                var temp35 = memory[0x40:0x60];\n                return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0651;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp36 = memory[0x40:0x60];\n                memory[temp36:temp36 + 0x20] = var1;\n                var temp37 = memory[0x40:0x60];\n                return memory[temp37:temp37 + (temp36 + 0x20) - temp37];\n            } else if (var0 == 0x8119c065) {\n                // Dispatch table entry for swap()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x067a;\n                var2 = swap();\n                var temp38 = memory[0x40:0x60];\n                memory[temp38:temp38 + 0x20] = !!var2;\n                var temp39 = memory[0x40:0x60];\n                return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n            } else if (var0 == 0x88a8c95c) {\n                // Dispatch table entry for changeDev(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06cb;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                changeDev(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06e0;\n                var2 = owner();\n                var temp40 = memory[0x40:0x60];\n                memory[temp40:temp40 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp41 = memory[0x40:0x60];\n                return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n            } else if (var0 == 0x91cca3db) {\n                // Dispatch table entry for dev()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0735;\n                var2 = dev();\n                var temp42 = memory[0x40:0x60];\n                memory[temp42:temp42 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp43 = memory[0x40:0x60];\n                return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x078a;\n                var2 = symbol();\n                var temp44 = memory[0x40:0x60];\n                var3 = temp44;\n                var4 = var3;\n                var temp45 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp45 - var4;\n                var temp46 = var2;\n                memory[temp45:temp45 + 0x20] = memory[temp46:temp46 + 0x20];\n                var5 = temp45 + 0x20;\n                var7 = memory[temp46:temp46 + 0x20];\n                var6 = temp46 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_07CA:\n                    var temp47 = var7;\n                    var5 = temp47 + var5;\n                    var6 = temp47 & 0x1f;\n                \n                    if (!var6) {\n                        var temp48 = memory[0x40:0x60];\n                        return memory[temp48:temp48 + var5 - temp48];\n                    } else {\n                        var temp49 = var6;\n                        var temp50 = var5 - temp49;\n                        memory[temp50:temp50 + 0x20] = ~(0x0100 ** (0x20 - temp49) - 0x01) & memory[temp50:temp50 + 0x20];\n                        var temp51 = memory[0x40:0x60];\n                        return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n                    }\n                } else {\n                label_07B8:\n                    var temp52 = var11;\n                    memory[var9 + temp52:var9 + temp52 + 0x20] = memory[var10 + temp52:var10 + temp52 + 0x20];\n                    var11 = temp52 + 0x20;\n                \n                    if (var11 >= var8) { goto label_07CA; }\n                    else { goto label_07B8; }\n                }\n            } else if (var0 == 0xa6f9dae1) {\n                // Dispatch table entry for changeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x083c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                changeOwner(var2);\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x087e;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp53 = memory[0x40:0x60];\n                memory[temp53:temp53 + 0x20] = !!var1;\n                var temp54 = memory[0x40:0x60];\n                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n            } else if (var0 == 0xd679677a) {\n                // Dispatch table entry for currentTier()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08ab;\n                var1 = currentTier();\n                var temp55 = memory[0x40:0x60];\n                memory[temp55:temp55 + 0x20] = var1;\n                var temp56 = memory[0x40:0x60];\n                return memory[temp56:temp56 + (temp55 + 0x20) - temp56];\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0917;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp57 = memory[0x40:0x60];\n                memory[temp57:temp57 + 0x20] = var1;\n                var temp58 = memory[0x40:0x60];\n                return memory[temp58:temp58 + (temp57 + 0x20) - temp58];\n            } else if (var0 == 0xf51fb6a1) {\n                // Dispatch table entry for leftInTier()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0940;\n                var1 = leftInTier();\n                var temp59 = memory[0x40:0x60];\n                memory[temp59:temp59 + 0x20] = var1;\n                var temp60 = memory[0x40:0x60];\n                return memory[temp60:temp60 + (temp59 + 0x20) - temp60];\n            } else if (var0 == 0xf97e17d9) {\n                // Dispatch table entry for payRate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0969;\n                var2 = payRate();\n                var temp61 = memory[0x40:0x60];\n                memory[temp61:temp61 + 0x20] = var2;\n                var temp62 = memory[0x40:0x60];\n                return memory[temp62:temp62 + (temp61 + 0x20) - temp62];\n            } else { goto label_015F; }\n        }\n    }\n    \n    function func_097F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var1 = storage[0x04] + arg1;\n    \n        if (var1 <= storage[0x00]) {\n        label_09E6:\n            storage[0x04] = storage[0x04] + arg1;\n            var temp0 = var1 - var2;\n            var1 = temp0;\n            var var4 = 0x0a05;\n            var var5 = var1;\n            var var6 = arg1;\n            var4 = func_1854(var5, var6);\n            var temp1 = var4;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x14;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = storage[temp2] + temp1;\n            storage[0x01] = storage[0x01] + temp1;\n            return temp1;\n        } else {\n            var temp3 = var1 - storage[0x00] - 0x01;\n            var2 = temp3;\n            arg1 = arg1 - var2;\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var2 * 0x08fc).value(var2)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n        \n            if (temp5) { goto label_09E6; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x06];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x06;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0B06:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0AFD; }\n        \n        label_0AE9:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0AE9; }\n        \n        label_0AFD:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0B06;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0B06;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x15;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function tier() returns (var r0) { return storage[0x05]; }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function restart() {\n        var var0 = storage[0x09] & 0xff;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0C39:\n            var0 = 0x2710;\n            var var1 = address(this).balance * 0x07d0;\n        \n            if (!var0) { assert(); }\n        \n            storage[0x12] = var1 / var0;\n            var0 = 0x0c70;\n            payFees();\n            var0 = 0x0c78;\n            func_1932();\n            return;\n        } else if (block.timestamp >= storage[0x0a]) { goto label_0C39; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x15;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x14;\n        var var2 = storage[keccak256(memory[0x00:0x40])] >= arg2;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0D56:\n            var temp2 = arg2;\n            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x14;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] + temp2;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x14;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] - temp2;\n        \n            if (var1 >= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg2;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n                var temp7 = arg2;\n                var temp8 = arg0;\n                memory[0x00:0x20] = temp8 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x15;\n                var temp9 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp9;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                storage[temp10] = storage[temp10] - temp7;\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = temp7;\n                var temp12 = memory[0x40:0x60];\n                log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            }\n        } else if (var1 >= arg2) { goto label_0D56; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function balanceMinusFeesOutstanding() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x2710;\n        var var2 = storage[0x04] - storage[0x11] * 0x05fa;\n    \n        if (var1) { return address(this).balance - (storage[0x12] + var2 / var1); }\n        else { assert(); }\n    }\n    \n    function decimals() returns (var r0) { return storage[0x07] & 0xff; }\n    \n    function endTime() returns (var r0) { return storage[0x0a]; }\n    \n    function foundation() returns (var r0) { return storage[0x16] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function payFees() {\n        var var0 = 0x00;\n        var var1 = 0x0f99;\n        func_1A4C();\n        var1 = 0x2710;\n        var var2 = storage[0x04] - storage[0x11] * 0x05fa;\n    \n        if (!var1) { assert(); }\n    \n        var temp0 = storage[0x12] + var2 / var1;\n        var0 = temp0;\n        storage[0x11] = storage[0x04];\n        storage[0x13] = 0x00;\n        storage[0x12] = 0x00;\n    \n        if (var0 <= 0x00) {\n        label_1124:\n            return;\n        } else {\n            var1 = storage[0x16] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = 0x08fc;\n            var var3 = 0x02;\n            var var4 = var0;\n        \n            if (!var3) { assert(); }\n        \n            var temp1 = var4 / var3;\n            var temp2 = memory[0x40:0x60];\n            var temp3;\n            temp3, memory[temp2:temp2 + 0x00] = address(var1).call.gas(!temp1 * var2).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n        \n            if (!temp3) { revert(memory[0x00:0x00]); }\n        \n            var1 = storage[0x17] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = 0x08fc;\n            var3 = 0x04;\n            var4 = var0;\n        \n            if (!var3) { assert(); }\n        \n            var temp4 = var4 / var3;\n            var temp5 = memory[0x40:0x60];\n            var temp6;\n            temp6, memory[temp5:temp5 + 0x00] = address(var1).call.gas(!temp4 * var2).value(temp4)(memory[temp5:temp5 + memory[0x40:0x60] - temp5]);\n        \n            if (!temp6) { revert(memory[0x00:0x00]); }\n        \n            var1 = storage[0x18] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = 0x08fc;\n            var3 = 0x04;\n            var4 = var0;\n        \n            if (!var3) { assert(); }\n        \n            var temp7 = var4 / var3;\n            var temp8 = memory[0x40:0x60];\n            var temp9;\n            temp9, memory[temp8:temp8 + 0x00] = address(var1).call.gas(!temp7 * var2).value(temp7)(memory[temp8:temp8 + memory[0x40:0x60] - temp8]);\n        \n            if (temp9) { goto label_1124; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function wait() returns (var r0) { return storage[0x09] / 0x0100 ** 0x01 & 0xff; }\n    \n    function changeFoundation(var arg0) {\n        if (msg.sender != storage[0x16] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x16] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x16] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function extended() returns (var r0) { return storage[0x09] / 0x0100 ** 0x02 & 0xff; }\n    \n    function submitted() returns (var r0) { return storage[0x04]; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x14;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function swap() returns (var r0) { return storage[0x09] & 0xff; }\n    \n    function changeDev(var arg0) {\n        if (msg.sender != storage[0x18] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x18] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x18] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function owner() returns (var r0) { return storage[0x17] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function dev() returns (var r0) { return storage[0x18] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x08];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x08;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_13D5:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_13CC; }\n        \n        label_13B8:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_13B8; }\n        \n        label_13CC:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_13D5;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_13D5;\n        }\n    }\n    \n    function changeOwner(var arg0) {\n        if (msg.sender != storage[0x17] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x17] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x17] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x14;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x14d6;\n        func_1A4C();\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff != address(this)) {\n            var temp0 = arg1;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x14;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = storage[temp1] - temp0;\n            var temp2 = arg0;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x14;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] + temp0;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp0;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else if (storage[0x09] & 0xff) {\n            if (storage[0x10] != 0x00) {\n            label_1539:\n                var1 = arg1 * storage[0x10];\n                var2 = 0x0de0b6b3a7640000;\n                var var3 = var1;\n            \n                if (!var2) { assert(); }\n            \n                var temp6 = var3 / var2;\n                var1 = temp6;\n                var temp7 = arg1;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x14;\n                var temp8 = keccak256(memory[0x00:0x40]);\n                storage[temp8] = storage[temp8] - temp7;\n                storage[0x01] = storage[0x01] - temp7;\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = temp7;\n                var temp10 = memory[0x40:0x60];\n                log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                var temp11 = memory[0x40:0x60];\n                var temp12;\n                temp12, memory[temp11:temp11 + 0x00] = address(msg.sender).call.gas(!var1 * 0x08fc).value(var1)(memory[temp11:temp11 + memory[0x40:0x60] - temp11]);\n            \n                if (temp12) { return 0x01; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var2 = 0x1538;\n                func_1C98();\n                goto label_1539;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function currentTier() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x05] != 0x0a) { return storage[0x05] + 0x01; }\n        else { return 0x0a; }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x15;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function leftInTier() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x05] == 0x0a) { return 0x00; }\n    \n        var var1 = storage[0x04];\n        var var2 = 0x02;\n        var var3 = storage[0x05];\n    \n        if (var3 >= storage[var2]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n        return storage[var3 + keccak256(memory[0x00:0x20])] - var1;\n    }\n    \n    function payRate() returns (var r0) { return storage[0x10]; }\n    \n    function func_1854(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (storage[0x05] != 0x0a) {\n            var1 = 0x00;\n            var var3 = 0x02;\n            var var4 = storage[0x05];\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (arg0 <= storage[var4 + keccak256(memory[0x00:0x20])]) {\n                var3 = 0x03;\n                var4 = storage[0x05];\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                return arg1 * storage[var4 + keccak256(memory[0x00:0x20])];\n            } else {\n                var3 = 0x02;\n                var4 = storage[0x05];\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var2 = arg0 - storage[var4 + keccak256(memory[0x00:0x20])];\n                arg1 = arg1 - var2;\n                var3 = 0x03;\n                var4 = storage[0x05];\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var1 = arg1 * storage[var4 + keccak256(memory[0x00:0x20])];\n                storage[0x05] = storage[0x05] + 0x01;\n                var3 = 0x18fb;\n                var4 = arg0;\n                var var5 = var2;\n                var3 = func_1854(var4, var5);\n                var1 = var1 + var3;\n                var0 = var1;\n            \n            label_192A:\n                return var0;\n            }\n        } else {\n            var0 = 0x01b9130a00;\n            goto label_192A;\n        }\n    }\n    \n    function func_1932() {\n        storage[0x09] = (storage[0x09] & ~0xff) | 0x00;\n        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x01)) | 0x00;\n        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x02)) | 0x00;\n        storage[0x0a] = block.timestamp + 0x01e28500;\n        storage[0x0b] = storage[0x0a] + 0x278d00;\n        storage[0x0c] = storage[0x0b] + 0x069780;\n        storage[0x0d] = block.timestamp + 0x05a4ec00;\n        storage[0x0e] = storage[0x0d] + 0x278d00;\n        storage[0x0f] = storage[0x0e] + 0x069780;\n        storage[0x11] = 0x00;\n        storage[0x04] = 0x00;\n        storage[0x13] = 0x00;\n        storage[0x10] = 0x00;\n        storage[0x05] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = storage[0x0a];\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = storage[0x0b];\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = storage[0x0c];\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x938e6fcc245d7476cacd79a5032e14b706e6a7ead38fab7a0d73c4feaded40eb]);\n    }\n    \n    function func_1A4C() {\n        if (block.timestamp < storage[0x0a]) {\n        label_1C96:\n            return;\n        } else {\n            var var0 = !(storage[0x09] & 0xff);\n        \n            if (!var0) {\n                if (!var0) {\n                label_1BE2:\n                \n                    if (!(storage[0x09] / 0x0100 ** 0x01 & 0xff)) {\n                    label_1C94:\n                        goto label_1C96;\n                    } else {\n                        storage[0x09] = (storage[0x09] & ~0xff) | 0x01;\n                        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x01)) | 0x00;\n                    \n                        if (!(storage[0x09] / 0x0100 ** 0x02 & 0xff)) {\n                            storage[0x0a] = storage[0x0c];\n                            var temp0 = memory[0x40:0x60];\n                            memory[temp0:temp0 + 0x20] = storage[0x0a];\n                            var temp1 = memory[0x40:0x60];\n                            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x4ebcdc2b14eacac39cf3ffaa28fc33f98e82cb4ce5d3002187b611b4d7a8b398]);\n                            goto label_1C94;\n                        } else {\n                            storage[0x0a] = storage[0x0f];\n                            var temp2 = memory[0x40:0x60];\n                            memory[temp2:temp2 + 0x20] = storage[0x0a];\n                            var temp3 = memory[0x40:0x60];\n                            log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x4ebcdc2b14eacac39cf3ffaa28fc33f98e82cb4ce5d3002187b611b4d7a8b398]);\n                            goto label_1C94;\n                        }\n                    }\n                } else {\n                label_1A87:\n                \n                    if (storage[0x09] / 0x0100 ** 0x02 & 0xff) {\n                        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x01)) | 0x0100 ** 0x01;\n                        storage[0x0a] = storage[0x0e];\n                        var temp10 = memory[0x40:0x60];\n                        memory[temp10:temp10 + 0x20] = storage[0x0a];\n                        var temp11 = memory[0x40:0x60];\n                        log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [0x24f7a980d4f032f59e7197d51a3cd619f138504a9b0da6fee19a08985863775e]);\n                        goto label_1BDD;\n                    } else if (storage[0x05] != 0x0a) {\n                        storage[0x0a] = storage[0x0d];\n                        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x02)) | 0x0100 ** 0x02;\n                        var temp4 = memory[0x40:0x60];\n                        memory[temp4:temp4 + 0x20] = storage[0x0a];\n                        var temp5 = temp4 + 0x20;\n                        memory[temp5:temp5 + 0x20] = storage[0x0b];\n                        var temp6 = temp5 + 0x20;\n                        memory[temp6:temp6 + 0x20] = storage[0x0c];\n                        var temp7 = memory[0x40:0x60];\n                        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xd157e8167dfe7e28a6a152fd1fa166e7e3404cf58c49c769442efce28d387e00]);\n                    \n                    label_1BDD:\n                        goto label_1C96;\n                    } else {\n                        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x01)) | 0x0100 ** 0x01;\n                        storage[0x0a] = storage[0x0b];\n                        var temp8 = memory[0x40:0x60];\n                        memory[temp8:temp8 + 0x20] = storage[0x0a];\n                        var temp9 = memory[0x40:0x60];\n                        log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x24f7a980d4f032f59e7197d51a3cd619f138504a9b0da6fee19a08985863775e]);\n                        goto label_1BDD;\n                    }\n                }\n            } else if (storage[0x09] / 0x0100 ** 0x01 & 0xff) { goto label_1BE2; }\n            else { goto label_1A87; }\n        }\n    }\n    \n    function func_1C98() {\n        var var0 = 0x00;\n        var var1 = 0x2710;\n        var var2 = storage[0x04] - storage[0x11] * 0x05fa;\n    \n        if (!var1) { assert(); }\n    \n        storage[0x13] = storage[0x12] + var2 / var1;\n        var1 = 0x0de0b6b3a7640000;\n        var2 = storage[0x01];\n    \n        if (!var1) { assert(); }\n    \n        var temp0 = var2 / var1;\n        var0 = temp0;\n        storage[0x10] = address(this).balance - storage[0x13];\n        var1 = var0;\n        var2 = storage[0x10];\n    \n        if (!var1) { assert(); }\n    \n        storage[0x10] = var2 / var1;\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_015F:\n            var var0 = 0x00;\n            var var1 = msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var1) {\n                var1 = storage[0x05] != 0x0a;\n            \n                if (!var1) { goto label_01BF; }\n                else { goto label_01A7; }\n            } else if (!var1) {\n            label_01BF:\n            \n                if (!var1) {\n                label_01DE:\n                \n                    if (!var1) { revert(memory[0x00:0x00]); }\n                \n                label_01E9:\n                    var1 = 0x01f3;\n                    var var2 = msg.sender;\n                    var var3 = msg.value;\n                    var1 = func_097F(var2, var3);\n                    var temp0 = var1;\n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = temp0;\n                    var temp2 = memory[0x40:0x60];\n                    log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x3ad10ba9777a3bc21180a465e5459861d07cbdb271af9a0f10c993b365b760f8, msg.sender]);\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = temp0;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, address(this), msg.sender]);\n                    stop();\n                } else {\n                label_01C6:\n                \n                    if (!!(storage[0x09] / 0x0100 ** 0x01 & 0xff) == !!0x00) { goto label_01E9; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_01A7:\n                var1 = !!(storage[0x09] & 0xff) == !!0x00;\n            \n                if (!var1) { goto label_01DE; }\n                else { goto label_01C6; }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02be;\n                var2 = name();\n                var temp5 = memory[0x40:0x60];\n                var3 = temp5;\n                var var4 = var3;\n                var temp6 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp6 - var4;\n                var temp7 = var2;\n                memory[temp6:temp6 + 0x20] = memory[temp7:temp7 + 0x20];\n                var var5 = temp6 + 0x20;\n                var var7 = memory[temp7:temp7 + 0x20];\n                var var6 = temp7 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_02FE:\n                    var temp8 = var7;\n                    var5 = temp8 + var5;\n                    var6 = temp8 & 0x1f;\n                \n                    if (!var6) {\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + var5 - temp9];\n                    } else {\n                        var temp10 = var6;\n                        var temp11 = var5 - temp10;\n                        memory[temp11:temp11 + 0x20] = ~(0x0100 ** (0x20 - temp10) - 0x01) & memory[temp11:temp11 + 0x20];\n                        var temp12 = memory[0x40:0x60];\n                        return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n                    }\n                } else {\n                label_02EC:\n                    var temp13 = var11;\n                    memory[var9 + temp13:var9 + temp13 + 0x20] = memory[var10 + temp13:var10 + temp13 + 0x20];\n                    var11 = temp13 + 0x20;\n                \n                    if (var11 >= var8) { goto label_02FE; }\n                    else { goto label_02EC; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0379;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = !!var1;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x16f4d022) {\n                // Dispatch table entry for tier()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03a6;\n                var2 = tier();\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var2;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cf;\n                var1 = totalSupply();\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var1;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n            } else if (var0 == 0x1ef3755d) {\n                // Dispatch table entry for restart()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f8;\n                restart();\n                stop();\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0459;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = !!var1;\n                var temp21 = memory[0x40:0x60];\n                return memory[temp21:temp21 + (temp20 + 0x20) - temp21];\n            } else if (var0 == 0x24bb49d6) {\n                // Dispatch table entry for balanceMinusFeesOutstanding()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0486;\n                var1 = balanceMinusFeesOutstanding();\n                var temp22 = memory[0x40:0x60];\n                memory[temp22:temp22 + 0x20] = var1;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04af;\n                var2 = decimals();\n                var temp24 = memory[0x40:0x60];\n                memory[temp24:temp24 + 0x20] = var2 & 0xff;\n                var temp25 = memory[0x40:0x60];\n                return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n            } else if (var0 == 0x3197cbb6) {\n                // Dispatch table entry for endTime()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04de;\n                var2 = endTime();\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0x41fbb050) {\n                // Dispatch table entry for foundation()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0507;\n                var2 = foundation();\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else if (var0 == 0x62779e15) {\n                // Dispatch table entry for payFees()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x055c;\n                payFees();\n                stop();\n            } else if (var0 == 0x64bd7013) {\n                // Dispatch table entry for wait()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0571;\n                var2 = wait();\n                var temp30 = memory[0x40:0x60];\n                memory[temp30:temp30 + 0x20] = !!var2;\n                var temp31 = memory[0x40:0x60];\n                return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n            } else if (var0 == 0x65a5f1cd) {\n                // Dispatch table entry for changeFoundation(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05c2;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                changeFoundation(var2);\n                stop();\n            } else if (var0 == 0x6f3921ee) {\n                // Dispatch table entry for extended()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d7;\n                var2 = extended();\n                var temp32 = memory[0x40:0x60];\n                memory[temp32:temp32 + 0x20] = !!var2;\n                var temp33 = memory[0x40:0x60];\n                return memory[temp33:temp33 + (temp32 + 0x20) - temp33];\n            } else if (var0 == 0x708ddf7b) {\n                // Dispatch table entry for submitted()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0604;\n                var1 = submitted();\n                var temp34 = memory[0x40:0x60];\n                memory[temp34:temp34 + 0x20] = var1;\n                var temp35 = memory[0x40:0x60];\n                return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0651;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp36 = memory[0x40:0x60];\n                memory[temp36:temp36 + 0x20] = var1;\n                var temp37 = memory[0x40:0x60];\n                return memory[temp37:temp37 + (temp36 + 0x20) - temp37];\n            } else if (var0 == 0x8119c065) {\n                // Dispatch table entry for swap()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x067a;\n                var2 = swap();\n                var temp38 = memory[0x40:0x60];\n                memory[temp38:temp38 + 0x20] = !!var2;\n                var temp39 = memory[0x40:0x60];\n                return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n            } else if (var0 == 0x88a8c95c) {\n                // Dispatch table entry for changeDev(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06cb;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                changeDev(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06e0;\n                var2 = owner();\n                var temp40 = memory[0x40:0x60];\n                memory[temp40:temp40 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp41 = memory[0x40:0x60];\n                return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n            } else if (var0 == 0x91cca3db) {\n                // Dispatch table entry for dev()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0735;\n                var2 = dev();\n                var temp42 = memory[0x40:0x60];\n                memory[temp42:temp42 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp43 = memory[0x40:0x60];\n                return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x078a;\n                var2 = symbol();\n                var temp44 = memory[0x40:0x60];\n                var3 = temp44;\n                var4 = var3;\n                var temp45 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp45 - var4;\n                var temp46 = var2;\n                memory[temp45:temp45 + 0x20] = memory[temp46:temp46 + 0x20];\n                var5 = temp45 + 0x20;\n                var7 = memory[temp46:temp46 + 0x20];\n                var6 = temp46 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_07CA:\n                    var temp47 = var7;\n                    var5 = temp47 + var5;\n                    var6 = temp47 & 0x1f;\n                \n                    if (!var6) {\n                        var temp48 = memory[0x40:0x60];\n                        return memory[temp48:temp48 + var5 - temp48];\n                    } else {\n                        var temp49 = var6;\n                        var temp50 = var5 - temp49;\n                        memory[temp50:temp50 + 0x20] = ~(0x0100 ** (0x20 - temp49) - 0x01) & memory[temp50:temp50 + 0x20];\n                        var temp51 = memory[0x40:0x60];\n                        return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n                    }\n                } else {\n                label_07B8:\n                    var temp52 = var11;\n                    memory[var9 + temp52:var9 + temp52 + 0x20] = memory[var10 + temp52:var10 + temp52 + 0x20];\n                    var11 = temp52 + 0x20;\n                \n                    if (var11 >= var8) { goto label_07CA; }\n                    else { goto label_07B8; }\n                }\n            } else if (var0 == 0xa6f9dae1) {\n                // Dispatch table entry for changeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x083c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                changeOwner(var2);\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x087e;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp53 = memory[0x40:0x60];\n                memory[temp53:temp53 + 0x20] = !!var1;\n                var temp54 = memory[0x40:0x60];\n                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n            } else if (var0 == 0xd679677a) {\n                // Dispatch table entry for currentTier()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08ab;\n                var1 = currentTier();\n                var temp55 = memory[0x40:0x60];\n                memory[temp55:temp55 + 0x20] = var1;\n                var temp56 = memory[0x40:0x60];\n                return memory[temp56:temp56 + (temp55 + 0x20) - temp56];\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0917;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp57 = memory[0x40:0x60];\n                memory[temp57:temp57 + 0x20] = var1;\n                var temp58 = memory[0x40:0x60];\n                return memory[temp58:temp58 + (temp57 + 0x20) - temp58];\n            } else if (var0 == 0xf51fb6a1) {\n                // Dispatch table entry for leftInTier()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0940;\n                var1 = leftInTier();\n                var temp59 = memory[0x40:0x60];\n                memory[temp59:temp59 + 0x20] = var1;\n                var temp60 = memory[0x40:0x60];\n                return memory[temp60:temp60 + (temp59 + 0x20) - temp60];\n            } else if (var0 == 0xf97e17d9) {\n                // Dispatch table entry for payRate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0969;\n                var2 = payRate();\n                var temp61 = memory[0x40:0x60];\n                memory[temp61:temp61 + 0x20] = var2;\n                var temp62 = memory[0x40:0x60];\n                return memory[temp62:temp62 + (temp61 + 0x20) - temp62];\n            } else { goto label_015F; }\n        }\n    }\n    \n    function func_097F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var1 = storage[0x04] + arg1;\n    \n        if (var1 <= storage[0x00]) {\n        label_09E6:\n            storage[0x04] = storage[0x04] + arg1;\n            var temp0 = var1 - var2;\n            var1 = temp0;\n            var var4 = 0x0a05;\n            var var5 = var1;\n            var var6 = arg1;\n            var4 = func_1854(var5, var6);\n            var temp1 = var4;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x14;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = storage[temp2] + temp1;\n            storage[0x01] = storage[0x01] + temp1;\n            return temp1;\n        } else {\n            var temp3 = var1 - storage[0x00] - 0x01;\n            var2 = temp3;\n            arg1 = arg1 - var2;\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var2 * 0x08fc).value(var2)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n        \n            if (temp5) { goto label_09E6; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x06];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x06;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0B06:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0AFD; }\n        \n        label_0AE9:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0AE9; }\n        \n        label_0AFD:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0B06;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0B06;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x15;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function tier() returns (var r0) { return storage[0x05]; }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function restart() {\n        var var0 = storage[0x09] & 0xff;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0C39:\n            var0 = 0x2710;\n            var var1 = address(this).balance * 0x07d0;\n        \n            if (!var0) { assert(); }\n        \n            storage[0x12] = var1 / var0;\n            var0 = 0x0c70;\n            payFees();\n            var0 = 0x0c78;\n            func_1932();\n            return;\n        } else if (block.timestamp >= storage[0x0a]) { goto label_0C39; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x15;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x14;\n        var var2 = storage[keccak256(memory[0x00:0x40])] >= arg2;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0D56:\n            var temp2 = arg2;\n            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x14;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] + temp2;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x14;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] - temp2;\n        \n            if (var1 >= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg2;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n                var temp7 = arg2;\n                var temp8 = arg0;\n                memory[0x00:0x20] = temp8 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x15;\n                var temp9 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp9;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                storage[temp10] = storage[temp10] - temp7;\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = temp7;\n                var temp12 = memory[0x40:0x60];\n                log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            }\n        } else if (var1 >= arg2) { goto label_0D56; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function balanceMinusFeesOutstanding() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x2710;\n        var var2 = storage[0x04] - storage[0x11] * 0x05fa;\n    \n        if (var1) { return address(this).balance - (storage[0x12] + var2 / var1); }\n        else { assert(); }\n    }\n    \n    function decimals() returns (var r0) { return storage[0x07] & 0xff; }\n    \n    function endTime() returns (var r0) { return storage[0x0a]; }\n    \n    function foundation() returns (var r0) { return storage[0x16] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function payFees() {\n        var var0 = 0x00;\n        var var1 = 0x0f99;\n        func_1A4C();\n        var1 = 0x2710;\n        var var2 = storage[0x04] - storage[0x11] * 0x05fa;\n    \n        if (!var1) { assert(); }\n    \n        var temp0 = storage[0x12] + var2 / var1;\n        var0 = temp0;\n        storage[0x11] = storage[0x04];\n        storage[0x13] = 0x00;\n        storage[0x12] = 0x00;\n    \n        if (var0 <= 0x00) {\n        label_1124:\n            return;\n        } else {\n            var1 = storage[0x16] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = 0x08fc;\n            var var3 = 0x02;\n            var var4 = var0;\n        \n            if (!var3) { assert(); }\n        \n            var temp1 = var4 / var3;\n            var temp2 = memory[0x40:0x60];\n            var temp3;\n            temp3, memory[temp2:temp2 + 0x00] = address(var1).call.gas(!temp1 * var2).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n        \n            if (!temp3) { revert(memory[0x00:0x00]); }\n        \n            var1 = storage[0x17] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = 0x08fc;\n            var3 = 0x04;\n            var4 = var0;\n        \n            if (!var3) { assert(); }\n        \n            var temp4 = var4 / var3;\n            var temp5 = memory[0x40:0x60];\n            var temp6;\n            temp6, memory[temp5:temp5 + 0x00] = address(var1).call.gas(!temp4 * var2).value(temp4)(memory[temp5:temp5 + memory[0x40:0x60] - temp5]);\n        \n            if (!temp6) { revert(memory[0x00:0x00]); }\n        \n            var1 = storage[0x18] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = 0x08fc;\n            var3 = 0x04;\n            var4 = var0;\n        \n            if (!var3) { assert(); }\n        \n            var temp7 = var4 / var3;\n            var temp8 = memory[0x40:0x60];\n            var temp9;\n            temp9, memory[temp8:temp8 + 0x00] = address(var1).call.gas(!temp7 * var2).value(temp7)(memory[temp8:temp8 + memory[0x40:0x60] - temp8]);\n        \n            if (temp9) { goto label_1124; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function wait() returns (var r0) { return storage[0x09] / 0x0100 ** 0x01 & 0xff; }\n    \n    function changeFoundation(var arg0) {\n        if (msg.sender != storage[0x16] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x16] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x16] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function extended() returns (var r0) { return storage[0x09] / 0x0100 ** 0x02 & 0xff; }\n    \n    function submitted() returns (var r0) { return storage[0x04]; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x14;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function swap() returns (var r0) { return storage[0x09] & 0xff; }\n    \n    function changeDev(var arg0) {\n        if (msg.sender != storage[0x18] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x18] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x18] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function owner() returns (var r0) { return storage[0x17] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function dev() returns (var r0) { return storage[0x18] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x08];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x08;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_13D5:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_13CC; }\n        \n        label_13B8:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_13B8; }\n        \n        label_13CC:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_13D5;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_13D5;\n        }\n    }\n    \n    function changeOwner(var arg0) {\n        if (msg.sender != storage[0x17] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x17] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x17] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x14;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x14d6;\n        func_1A4C();\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff != address(this)) {\n            var temp0 = arg1;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x14;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = storage[temp1] - temp0;\n            var temp2 = arg0;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x14;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] + temp0;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp0;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else if (storage[0x09] & 0xff) {\n            if (storage[0x10] != 0x00) {\n            label_1539:\n                var1 = arg1 * storage[0x10];\n                var2 = 0x0de0b6b3a7640000;\n                var var3 = var1;\n            \n                if (!var2) { assert(); }\n            \n                var temp6 = var3 / var2;\n                var1 = temp6;\n                var temp7 = arg1;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x14;\n                var temp8 = keccak256(memory[0x00:0x40]);\n                storage[temp8] = storage[temp8] - temp7;\n                storage[0x01] = storage[0x01] - temp7;\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = temp7;\n                var temp10 = memory[0x40:0x60];\n                log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                var temp11 = memory[0x40:0x60];\n                var temp12;\n                temp12, memory[temp11:temp11 + 0x00] = address(msg.sender).call.gas(!var1 * 0x08fc).value(var1)(memory[temp11:temp11 + memory[0x40:0x60] - temp11]);\n            \n                if (temp12) { return 0x01; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var2 = 0x1538;\n                func_1C98();\n                goto label_1539;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function currentTier() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x05] != 0x0a) { return storage[0x05] + 0x01; }\n        else { return 0x0a; }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x15;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function leftInTier() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x05] == 0x0a) { return 0x00; }\n    \n        var var1 = storage[0x04];\n        var var2 = 0x02;\n        var var3 = storage[0x05];\n    \n        if (var3 >= storage[var2]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n        return storage[var3 + keccak256(memory[0x00:0x20])] - var1;\n    }\n    \n    function payRate() returns (var r0) { return storage[0x10]; }\n    \n    function func_1854(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (storage[0x05] != 0x0a) {\n            var1 = 0x00;\n            var var3 = 0x02;\n            var var4 = storage[0x05];\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (arg0 <= storage[var4 + keccak256(memory[0x00:0x20])]) {\n                var3 = 0x03;\n                var4 = storage[0x05];\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                return arg1 * storage[var4 + keccak256(memory[0x00:0x20])];\n            } else {\n                var3 = 0x02;\n                var4 = storage[0x05];\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var2 = arg0 - storage[var4 + keccak256(memory[0x00:0x20])];\n                arg1 = arg1 - var2;\n                var3 = 0x03;\n                var4 = storage[0x05];\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var1 = arg1 * storage[var4 + keccak256(memory[0x00:0x20])];\n                storage[0x05] = storage[0x05] + 0x01;\n                var3 = 0x18fb;\n                var4 = arg0;\n                var var5 = var2;\n                var3 = func_1854(var4, var5);\n                var1 = var1 + var3;\n                var0 = var1;\n            \n            label_192A:\n                return var0;\n            }\n        } else {\n            var0 = 0x01b9130a00;\n            goto label_192A;\n        }\n    }\n    \n    function func_1932() {\n        storage[0x09] = (storage[0x09] & ~0xff) | 0x00;\n        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x01)) | 0x00;\n        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x02)) | 0x00;\n        storage[0x0a] = block.timestamp + 0x01e28500;\n        storage[0x0b] = storage[0x0a] + 0x278d00;\n        storage[0x0c] = storage[0x0b] + 0x069780;\n        storage[0x0d] = block.timestamp + 0x05a4ec00;\n        storage[0x0e] = storage[0x0d] + 0x278d00;\n        storage[0x0f] = storage[0x0e] + 0x069780;\n        storage[0x11] = 0x00;\n        storage[0x04] = 0x00;\n        storage[0x13] = 0x00;\n        storage[0x10] = 0x00;\n        storage[0x05] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = storage[0x0a];\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = storage[0x0b];\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = storage[0x0c];\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x938e6fcc245d7476cacd79a5032e14b706e6a7ead38fab7a0d73c4feaded40eb]);\n    }\n    \n    function func_1A4C() {\n        if (block.timestamp < storage[0x0a]) {\n        label_1C96:\n            return;\n        } else {\n            var var0 = !(storage[0x09] & 0xff);\n        \n            if (!var0) {\n                if (!var0) {\n                label_1BE2:\n                \n                    if (!(storage[0x09] / 0x0100 ** 0x01 & 0xff)) {\n                    label_1C94:\n                        goto label_1C96;\n                    } else {\n                        storage[0x09] = (storage[0x09] & ~0xff) | 0x01;\n                        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x01)) | 0x00;\n                    \n                        if (!(storage[0x09] / 0x0100 ** 0x02 & 0xff)) {\n                            storage[0x0a] = storage[0x0c];\n                            var temp0 = memory[0x40:0x60];\n                            memory[temp0:temp0 + 0x20] = storage[0x0a];\n                            var temp1 = memory[0x40:0x60];\n                            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x4ebcdc2b14eacac39cf3ffaa28fc33f98e82cb4ce5d3002187b611b4d7a8b398]);\n                            goto label_1C94;\n                        } else {\n                            storage[0x0a] = storage[0x0f];\n                            var temp2 = memory[0x40:0x60];\n                            memory[temp2:temp2 + 0x20] = storage[0x0a];\n                            var temp3 = memory[0x40:0x60];\n                            log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x4ebcdc2b14eacac39cf3ffaa28fc33f98e82cb4ce5d3002187b611b4d7a8b398]);\n                            goto label_1C94;\n                        }\n                    }\n                } else {\n                label_1A87:\n                \n                    if (storage[0x09] / 0x0100 ** 0x02 & 0xff) {\n                        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x01)) | 0x0100 ** 0x01;\n                        storage[0x0a] = storage[0x0e];\n                        var temp10 = memory[0x40:0x60];\n                        memory[temp10:temp10 + 0x20] = storage[0x0a];\n                        var temp11 = memory[0x40:0x60];\n                        log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [0x24f7a980d4f032f59e7197d51a3cd619f138504a9b0da6fee19a08985863775e]);\n                        goto label_1BDD;\n                    } else if (storage[0x05] != 0x0a) {\n                        storage[0x0a] = storage[0x0d];\n                        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x02)) | 0x0100 ** 0x02;\n                        var temp4 = memory[0x40:0x60];\n                        memory[temp4:temp4 + 0x20] = storage[0x0a];\n                        var temp5 = temp4 + 0x20;\n                        memory[temp5:temp5 + 0x20] = storage[0x0b];\n                        var temp6 = temp5 + 0x20;\n                        memory[temp6:temp6 + 0x20] = storage[0x0c];\n                        var temp7 = memory[0x40:0x60];\n                        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xd157e8167dfe7e28a6a152fd1fa166e7e3404cf58c49c769442efce28d387e00]);\n                    \n                    label_1BDD:\n                        goto label_1C96;\n                    } else {\n                        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x01)) | 0x0100 ** 0x01;\n                        storage[0x0a] = storage[0x0b];\n                        var temp8 = memory[0x40:0x60];\n                        memory[temp8:temp8 + 0x20] = storage[0x0a];\n                        var temp9 = memory[0x40:0x60];\n                        log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x24f7a980d4f032f59e7197d51a3cd619f138504a9b0da6fee19a08985863775e]);\n                        goto label_1BDD;\n                    }\n                }\n            } else if (storage[0x09] / 0x0100 ** 0x01 & 0xff) { goto label_1BE2; }\n            else { goto label_1A87; }\n        }\n    }\n    \n    function func_1C98() {\n        var var0 = 0x00;\n        var var1 = 0x2710;\n        var var2 = storage[0x04] - storage[0x11] * 0x05fa;\n    \n        if (!var1) { assert(); }\n    \n        storage[0x13] = storage[0x12] + var2 / var1;\n        var1 = 0x0de0b6b3a7640000;\n        var2 = storage[0x01];\n    \n        if (!var1) { assert(); }\n    \n        var temp0 = var2 / var1;\n        var0 = temp0;\n        storage[0x10] = address(this).balance - storage[0x13];\n        var1 = var0;\n        var2 = storage[0x10];\n    \n        if (!var1) { assert(); }\n    \n        storage[0x10] = var2 / var1;\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x60;\n    \n        if (msg.data.length < 0x04) {\n        label_015F:\n            var var0 = 0x00;\n            var var1 = msg.sender != var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        \n            if (var1) {\n                var1 = storage[0x05] != 0x0a;\n            \n                if (!var1) { goto label_01BF; }\n                else { goto label_01A7; }\n            } else if (!var1) {\n            label_01BF:\n            \n                if (!var1) {\n                label_01DE:\n                \n                    if (!var1) { revert(memory[0x00:0x00]); }\n                \n                label_01E9:\n                    var1 = 0x01f3;\n                    var var2 = msg.sender;\n                    var var3 = msg.value;\n                    var1 = func_097F(var2, var3);\n                    var temp0 = var1;\n                    var temp1 = memory[0x40:0x60];\n                    memory[temp1:temp1 + 0x20] = temp0;\n                    var temp2 = memory[0x40:0x60];\n                    log(memory[temp2:temp2 + (temp1 + 0x20) - temp2], [0x3ad10ba9777a3bc21180a465e5459861d07cbdb271af9a0f10c993b365b760f8, msg.sender]);\n                    var temp3 = memory[0x40:0x60];\n                    memory[temp3:temp3 + 0x20] = temp0;\n                    var temp4 = memory[0x40:0x60];\n                    log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, address(this), msg.sender]);\n                    stop();\n                } else {\n                label_01C6:\n                \n                    if (!!(storage[0x09] / 0x0100 ** 0x01 & 0xff) == !!0x00) { goto label_01E9; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else {\n            label_01A7:\n                var1 = !!(storage[0x09] & 0xff) == !!0x00;\n            \n                if (!var1) { goto label_01DE; }\n                else { goto label_01C6; }\n            }\n        } else {\n            var0 = msg.data[0x00:0x20] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        \n            if (var0 == 0x06fdde03) {\n                // Dispatch table entry for name()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x02be;\n                var2 = name();\n                var temp5 = memory[0x40:0x60];\n                var3 = temp5;\n                var var4 = var3;\n                var temp6 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp6 - var4;\n                var temp7 = var2;\n                memory[temp6:temp6 + 0x20] = memory[temp7:temp7 + 0x20];\n                var var5 = temp6 + 0x20;\n                var var7 = memory[temp7:temp7 + 0x20];\n                var var6 = temp7 + 0x20;\n                var var8 = var7;\n                var var9 = var5;\n                var var10 = var6;\n                var var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_02FE:\n                    var temp8 = var7;\n                    var5 = temp8 + var5;\n                    var6 = temp8 & 0x1f;\n                \n                    if (!var6) {\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + var5 - temp9];\n                    } else {\n                        var temp10 = var6;\n                        var temp11 = var5 - temp10;\n                        memory[temp11:temp11 + 0x20] = ~(0x0100 ** (0x20 - temp10) - 0x01) & memory[temp11:temp11 + 0x20];\n                        var temp12 = memory[0x40:0x60];\n                        return memory[temp12:temp12 + (temp11 + 0x20) - temp12];\n                    }\n                } else {\n                label_02EC:\n                    var temp13 = var11;\n                    memory[var9 + temp13:var9 + temp13 + 0x20] = memory[var10 + temp13:var10 + temp13 + 0x20];\n                    var11 = temp13 + 0x20;\n                \n                    if (var11 >= var8) { goto label_02FE; }\n                    else { goto label_02EC; }\n                }\n            } else if (var0 == 0x095ea7b3) {\n                // Dispatch table entry for approve(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0379;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = approve(var2, var3);\n                var temp14 = memory[0x40:0x60];\n                memory[temp14:temp14 + 0x20] = !!var1;\n                var temp15 = memory[0x40:0x60];\n                return memory[temp15:temp15 + (temp14 + 0x20) - temp15];\n            } else if (var0 == 0x16f4d022) {\n                // Dispatch table entry for tier()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03a6;\n                var2 = tier();\n                var temp16 = memory[0x40:0x60];\n                memory[temp16:temp16 + 0x20] = var2;\n                var temp17 = memory[0x40:0x60];\n                return memory[temp17:temp17 + (temp16 + 0x20) - temp17];\n            } else if (var0 == 0x18160ddd) {\n                // Dispatch table entry for totalSupply()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03cf;\n                var1 = totalSupply();\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var1;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + (temp18 + 0x20) - temp19];\n            } else if (var0 == 0x1ef3755d) {\n                // Dispatch table entry for restart()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x03f8;\n                restart();\n                stop();\n            } else if (var0 == 0x23b872dd) {\n                // Dispatch table entry for transferFrom(address,address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0459;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var4 = msg.data[0x44:0x64];\n                var1 = transferFrom(var2, var3, var4);\n                var temp20 = memory[0x40:0x60];\n                memory[temp20:temp20 + 0x20] = !!var1;\n                var temp21 = memory[0x40:0x60];\n                return memory[temp21:temp21 + (temp20 + 0x20) - temp21];\n            } else if (var0 == 0x24bb49d6) {\n                // Dispatch table entry for balanceMinusFeesOutstanding()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0486;\n                var1 = balanceMinusFeesOutstanding();\n                var temp22 = memory[0x40:0x60];\n                memory[temp22:temp22 + 0x20] = var1;\n                var temp23 = memory[0x40:0x60];\n                return memory[temp23:temp23 + (temp22 + 0x20) - temp23];\n            } else if (var0 == 0x313ce567) {\n                // Dispatch table entry for decimals()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04af;\n                var2 = decimals();\n                var temp24 = memory[0x40:0x60];\n                memory[temp24:temp24 + 0x20] = var2 & 0xff;\n                var temp25 = memory[0x40:0x60];\n                return memory[temp25:temp25 + (temp24 + 0x20) - temp25];\n            } else if (var0 == 0x3197cbb6) {\n                // Dispatch table entry for endTime()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x04de;\n                var2 = endTime();\n                var temp26 = memory[0x40:0x60];\n                memory[temp26:temp26 + 0x20] = var2;\n                var temp27 = memory[0x40:0x60];\n                return memory[temp27:temp27 + (temp26 + 0x20) - temp27];\n            } else if (var0 == 0x41fbb050) {\n                // Dispatch table entry for foundation()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0507;\n                var2 = foundation();\n                var temp28 = memory[0x40:0x60];\n                memory[temp28:temp28 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp29 = memory[0x40:0x60];\n                return memory[temp29:temp29 + (temp28 + 0x20) - temp29];\n            } else if (var0 == 0x62779e15) {\n                // Dispatch table entry for payFees()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x055c;\n                payFees();\n                stop();\n            } else if (var0 == 0x64bd7013) {\n                // Dispatch table entry for wait()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0571;\n                var2 = wait();\n                var temp30 = memory[0x40:0x60];\n                memory[temp30:temp30 + 0x20] = !!var2;\n                var temp31 = memory[0x40:0x60];\n                return memory[temp31:temp31 + (temp30 + 0x20) - temp31];\n            } else if (var0 == 0x65a5f1cd) {\n                // Dispatch table entry for changeFoundation(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05c2;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                changeFoundation(var2);\n                stop();\n            } else if (var0 == 0x6f3921ee) {\n                // Dispatch table entry for extended()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x05d7;\n                var2 = extended();\n                var temp32 = memory[0x40:0x60];\n                memory[temp32:temp32 + 0x20] = !!var2;\n                var temp33 = memory[0x40:0x60];\n                return memory[temp33:temp33 + (temp32 + 0x20) - temp33];\n            } else if (var0 == 0x708ddf7b) {\n                // Dispatch table entry for submitted()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0604;\n                var1 = submitted();\n                var temp34 = memory[0x40:0x60];\n                memory[temp34:temp34 + 0x20] = var1;\n                var temp35 = memory[0x40:0x60];\n                return memory[temp35:temp35 + (temp34 + 0x20) - temp35];\n            } else if (var0 == 0x70a08231) {\n                // Dispatch table entry for balanceOf(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0651;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = balanceOf(var2);\n                var temp36 = memory[0x40:0x60];\n                memory[temp36:temp36 + 0x20] = var1;\n                var temp37 = memory[0x40:0x60];\n                return memory[temp37:temp37 + (temp36 + 0x20) - temp37];\n            } else if (var0 == 0x8119c065) {\n                // Dispatch table entry for swap()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x067a;\n                var2 = swap();\n                var temp38 = memory[0x40:0x60];\n                memory[temp38:temp38 + 0x20] = !!var2;\n                var temp39 = memory[0x40:0x60];\n                return memory[temp39:temp39 + (temp38 + 0x20) - temp39];\n            } else if (var0 == 0x88a8c95c) {\n                // Dispatch table entry for changeDev(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06cb;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                changeDev(var2);\n                stop();\n            } else if (var0 == 0x8da5cb5b) {\n                // Dispatch table entry for owner()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x06e0;\n                var2 = owner();\n                var temp40 = memory[0x40:0x60];\n                memory[temp40:temp40 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp41 = memory[0x40:0x60];\n                return memory[temp41:temp41 + (temp40 + 0x20) - temp41];\n            } else if (var0 == 0x91cca3db) {\n                // Dispatch table entry for dev()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0735;\n                var2 = dev();\n                var temp42 = memory[0x40:0x60];\n                memory[temp42:temp42 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var temp43 = memory[0x40:0x60];\n                return memory[temp43:temp43 + (temp42 + 0x20) - temp43];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x078a;\n                var2 = symbol();\n                var temp44 = memory[0x40:0x60];\n                var3 = temp44;\n                var4 = var3;\n                var temp45 = var4 + 0x20;\n                memory[var4:var4 + 0x20] = temp45 - var4;\n                var temp46 = var2;\n                memory[temp45:temp45 + 0x20] = memory[temp46:temp46 + 0x20];\n                var5 = temp45 + 0x20;\n                var7 = memory[temp46:temp46 + 0x20];\n                var6 = temp46 + 0x20;\n                var8 = var7;\n                var9 = var5;\n                var10 = var6;\n                var11 = 0x00;\n            \n                if (var11 >= var8) {\n                label_07CA:\n                    var temp47 = var7;\n                    var5 = temp47 + var5;\n                    var6 = temp47 & 0x1f;\n                \n                    if (!var6) {\n                        var temp48 = memory[0x40:0x60];\n                        return memory[temp48:temp48 + var5 - temp48];\n                    } else {\n                        var temp49 = var6;\n                        var temp50 = var5 - temp49;\n                        memory[temp50:temp50 + 0x20] = ~(0x0100 ** (0x20 - temp49) - 0x01) & memory[temp50:temp50 + 0x20];\n                        var temp51 = memory[0x40:0x60];\n                        return memory[temp51:temp51 + (temp50 + 0x20) - temp51];\n                    }\n                } else {\n                label_07B8:\n                    var temp52 = var11;\n                    memory[var9 + temp52:var9 + temp52 + 0x20] = memory[var10 + temp52:var10 + temp52 + 0x20];\n                    var11 = temp52 + 0x20;\n                \n                    if (var11 >= var8) { goto label_07CA; }\n                    else { goto label_07B8; }\n                }\n            } else if (var0 == 0xa6f9dae1) {\n                // Dispatch table entry for changeOwner(address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x083c;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                changeOwner(var2);\n                stop();\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x087e;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44];\n                var1 = transfer(var2, var3);\n                var temp53 = memory[0x40:0x60];\n                memory[temp53:temp53 + 0x20] = !!var1;\n                var temp54 = memory[0x40:0x60];\n                return memory[temp54:temp54 + (temp53 + 0x20) - temp54];\n            } else if (var0 == 0xd679677a) {\n                // Dispatch table entry for currentTier()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x08ab;\n                var1 = currentTier();\n                var temp55 = memory[0x40:0x60];\n                memory[temp55:temp55 + 0x20] = var1;\n                var temp56 = memory[0x40:0x60];\n                return memory[temp56:temp56 + (temp55 + 0x20) - temp56];\n            } else if (var0 == 0xdd62ed3e) {\n                // Dispatch table entry for allowance(address,address)\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0917;\n                var2 = msg.data[0x04:0x24] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[0x24:0x44] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var1 = allowance(var2, var3);\n                var temp57 = memory[0x40:0x60];\n                memory[temp57:temp57 + 0x20] = var1;\n                var temp58 = memory[0x40:0x60];\n                return memory[temp58:temp58 + (temp57 + 0x20) - temp58];\n            } else if (var0 == 0xf51fb6a1) {\n                // Dispatch table entry for leftInTier()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0940;\n                var1 = leftInTier();\n                var temp59 = memory[0x40:0x60];\n                memory[temp59:temp59 + 0x20] = var1;\n                var temp60 = memory[0x40:0x60];\n                return memory[temp60:temp60 + (temp59 + 0x20) - temp60];\n            } else if (var0 == 0xf97e17d9) {\n                // Dispatch table entry for payRate()\n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var1 = 0x0969;\n                var2 = payRate();\n                var temp61 = memory[0x40:0x60];\n                memory[temp61:temp61 + 0x20] = var2;\n                var temp62 = memory[0x40:0x60];\n                return memory[temp62:temp62 + (temp61 + 0x20) - temp62];\n            } else { goto label_015F; }\n        }\n    }\n    \n    function func_097F(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var2 = 0x00;\n        var var3 = var2;\n        var var1 = storage[0x04] + arg1;\n    \n        if (var1 <= storage[0x00]) {\n        label_09E6:\n            storage[0x04] = storage[0x04] + arg1;\n            var temp0 = var1 - var2;\n            var1 = temp0;\n            var var4 = 0x0a05;\n            var var5 = var1;\n            var var6 = arg1;\n            var4 = func_1854(var5, var6);\n            var temp1 = var4;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x14;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            storage[temp2] = storage[temp2] + temp1;\n            storage[0x01] = storage[0x01] + temp1;\n            return temp1;\n        } else {\n            var temp3 = var1 - storage[0x00] - 0x01;\n            var2 = temp3;\n            arg1 = arg1 - var2;\n            var temp4 = memory[0x40:0x60];\n            var temp5;\n            temp5, memory[temp4:temp4 + 0x00] = address(arg0 & 0xffffffffffffffffffffffffffffffffffffffff).call.gas(!var2 * 0x08fc).value(var2)(memory[temp4:temp4 + memory[0x40:0x60] - temp4]);\n        \n            if (temp5) { goto label_09E6; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = storage[0x06];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x06;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_0B06:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_0AFD; }\n        \n        label_0AE9:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_0AE9; }\n        \n        label_0AFD:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_0B06;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var5 = var5;\n            var3 = temp11 + 0x20;\n            goto label_0B06;\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg1;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x15;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg0;\n        memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp1;\n        storage[keccak256(memory[0x00:0x40])] = temp0;\n        var temp3 = memory[0x40:0x60];\n        memory[temp3:temp3 + 0x20] = temp0;\n        var temp4 = memory[0x40:0x60];\n        log(memory[temp4:temp4 + (temp3 + 0x20) - temp4], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, msg.sender, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n        return 0x01;\n    }\n    \n    function tier() returns (var r0) { return storage[0x05]; }\n    \n    function totalSupply() returns (var r0) { return storage[0x01]; }\n    \n    function restart() {\n        var var0 = storage[0x09] & 0xff;\n    \n        if (!var0) {\n            if (!var0) { revert(memory[0x00:0x00]); }\n        \n        label_0C39:\n            var0 = 0x2710;\n            var var1 = address(this).balance * 0x07d0;\n        \n            if (!var0) { assert(); }\n        \n            storage[0x12] = var1 / var0;\n            var0 = 0x0c70;\n            payFees();\n            var0 = 0x0c78;\n            func_1932();\n            return;\n        } else if (block.timestamp >= storage[0x0a]) { goto label_0C39; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function transferFrom(var arg0, var arg1, var arg2) returns (var r0) {\n        var var0 = 0x00;\n        var temp0 = arg0;\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x15;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        memory[0x00:0x20] = temp0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x14;\n        var var2 = storage[keccak256(memory[0x00:0x40])] >= arg2;\n    \n        if (!var2) {\n            if (!var2) { revert(memory[0x00:0x00]); }\n        \n        label_0D56:\n            var temp2 = arg2;\n            memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x14;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] + temp2;\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x14;\n            var temp4 = keccak256(memory[0x00:0x40]);\n            storage[temp4] = storage[temp4] - temp2;\n        \n            if (var1 >= 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n                var temp5 = memory[0x40:0x60];\n                memory[temp5:temp5 + 0x20] = arg2;\n                var temp6 = memory[0x40:0x60];\n                log(memory[temp6:temp6 + (temp5 + 0x20) - temp6], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            } else {\n                var temp7 = arg2;\n                var temp8 = arg0;\n                memory[0x00:0x20] = temp8 & 0xffffffffffffffffffffffffffffffffffffffff;\n                memory[0x20:0x40] = 0x15;\n                var temp9 = keccak256(memory[0x00:0x40]);\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = temp9;\n                var temp10 = keccak256(memory[0x00:0x40]);\n                storage[temp10] = storage[temp10] - temp7;\n                var temp11 = memory[0x40:0x60];\n                memory[temp11:temp11 + 0x20] = temp7;\n                var temp12 = memory[0x40:0x60];\n                log(memory[temp12:temp12 + (temp11 + 0x20) - temp12], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-5] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                return 0x01;\n            }\n        } else if (var1 >= arg2) { goto label_0D56; }\n        else { revert(memory[0x00:0x00]); }\n    }\n    \n    function balanceMinusFeesOutstanding() returns (var r0) {\n        var var0 = 0x00;\n        var var1 = 0x2710;\n        var var2 = storage[0x04] - storage[0x11] * 0x05fa;\n    \n        if (var1) { return address(this).balance - (storage[0x12] + var2 / var1); }\n        else { assert(); }\n    }\n    \n    function decimals() returns (var r0) { return storage[0x07] & 0xff; }\n    \n    function endTime() returns (var r0) { return storage[0x0a]; }\n    \n    function foundation() returns (var r0) { return storage[0x16] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function payFees() {\n        var var0 = 0x00;\n        var var1 = 0x0f99;\n        func_1A4C();\n        var1 = 0x2710;\n        var var2 = storage[0x04] - storage[0x11] * 0x05fa;\n    \n        if (!var1) { assert(); }\n    \n        var temp0 = storage[0x12] + var2 / var1;\n        var0 = temp0;\n        storage[0x11] = storage[0x04];\n        storage[0x13] = 0x00;\n        storage[0x12] = 0x00;\n    \n        if (var0 <= 0x00) {\n        label_1124:\n            return;\n        } else {\n            var1 = storage[0x16] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = 0x08fc;\n            var var3 = 0x02;\n            var var4 = var0;\n        \n            if (!var3) { assert(); }\n        \n            var temp1 = var4 / var3;\n            var temp2 = memory[0x40:0x60];\n            var temp3;\n            temp3, memory[temp2:temp2 + 0x00] = address(var1).call.gas(!temp1 * var2).value(temp1)(memory[temp2:temp2 + memory[0x40:0x60] - temp2]);\n        \n            if (!temp3) { revert(memory[0x00:0x00]); }\n        \n            var1 = storage[0x17] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = 0x08fc;\n            var3 = 0x04;\n            var4 = var0;\n        \n            if (!var3) { assert(); }\n        \n            var temp4 = var4 / var3;\n            var temp5 = memory[0x40:0x60];\n            var temp6;\n            temp6, memory[temp5:temp5 + 0x00] = address(var1).call.gas(!temp4 * var2).value(temp4)(memory[temp5:temp5 + memory[0x40:0x60] - temp5]);\n        \n            if (!temp6) { revert(memory[0x00:0x00]); }\n        \n            var1 = storage[0x18] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var2 = 0x08fc;\n            var3 = 0x04;\n            var4 = var0;\n        \n            if (!var3) { assert(); }\n        \n            var temp7 = var4 / var3;\n            var temp8 = memory[0x40:0x60];\n            var temp9;\n            temp9, memory[temp8:temp8 + 0x00] = address(var1).call.gas(!temp7 * var2).value(temp7)(memory[temp8:temp8 + memory[0x40:0x60] - temp8]);\n        \n            if (temp9) { goto label_1124; }\n            else { revert(memory[0x00:0x00]); }\n        }\n    }\n    \n    function wait() returns (var r0) { return storage[0x09] / 0x0100 ** 0x01 & 0xff; }\n    \n    function changeFoundation(var arg0) {\n        if (msg.sender != storage[0x16] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x16] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x16] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function extended() returns (var r0) { return storage[0x09] / 0x0100 ** 0x02 & 0xff; }\n    \n    function submitted() returns (var r0) { return storage[0x04]; }\n    \n    function balanceOf(var arg0) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x14;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function swap() returns (var r0) { return storage[0x09] & 0xff; }\n    \n    function changeDev(var arg0) {\n        if (msg.sender != storage[0x18] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x18] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x18] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function owner() returns (var r0) { return storage[0x17] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function dev() returns (var r0) { return storage[0x18] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = storage[0x08];\n        var temp1 = (!(temp0 & 0x01) * 0x0100 - 0x01 & temp0) / 0x02;\n        var temp2 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp2 + (temp1 + 0x1f) / 0x20 * 0x20 + 0x20;\n        r0 = temp2;\n        var var1 = 0x08;\n        var var2 = temp1;\n        memory[r0:r0 + 0x20] = var2;\n        var var3 = r0 + 0x20;\n        var var4 = var1;\n        var temp3 = storage[var4];\n        var var5 = (!(temp3 & 0x01) * 0x0100 - 0x01 & temp3) / 0x02;\n    \n        if (!var5) {\n        label_13D5:\n            return r0;\n        } else if (0x1f < var5) {\n            var temp4 = var3;\n            var temp5 = temp4 + var5;\n            var3 = temp5;\n            memory[0x00:0x20] = var4;\n            var temp6 = keccak256(memory[0x00:0x20]);\n            memory[temp4:temp4 + 0x20] = storage[temp6];\n            var4 = temp6 + 0x01;\n            var5 = temp4 + 0x20;\n        \n            if (var3 <= var5) { goto label_13CC; }\n        \n        label_13B8:\n            var temp7 = var4;\n            var temp8 = var5;\n            memory[temp8:temp8 + 0x20] = storage[temp7];\n            var4 = temp7 + 0x01;\n            var5 = temp8 + 0x20;\n        \n            if (var3 > var5) { goto label_13B8; }\n        \n        label_13CC:\n            var temp9 = var3;\n            var temp10 = temp9 + (var5 - temp9 & 0x1f);\n            var5 = temp9;\n            var3 = temp10;\n            goto label_13D5;\n        } else {\n            var temp11 = var3;\n            memory[temp11:temp11 + 0x20] = storage[var4] / 0x0100 * 0x0100;\n            var3 = temp11 + 0x20;\n            var5 = var5;\n            goto label_13D5;\n        }\n    }\n    \n    function changeOwner(var arg0) {\n        if (msg.sender != storage[0x17] & 0xffffffffffffffffffffffffffffffffffffffff) { revert(memory[0x00:0x00]); }\n    \n        storage[0x17] = (arg0 & 0xffffffffffffffffffffffffffffffffffffffff) | (storage[0x17] & ~0xffffffffffffffffffffffffffffffffffffffff);\n    }\n    \n    function transfer(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        memory[0x00:0x20] = msg.sender;\n        memory[0x20:0x40] = 0x14;\n    \n        if (storage[keccak256(memory[0x00:0x40])] < arg1) { revert(memory[0x00:0x00]); }\n    \n        var var2 = 0x14d6;\n        func_1A4C();\n    \n        if (arg0 & 0xffffffffffffffffffffffffffffffffffffffff != address(this)) {\n            var temp0 = arg1;\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = 0x14;\n            var temp1 = keccak256(memory[0x00:0x40]);\n            storage[temp1] = storage[temp1] - temp0;\n            var temp2 = arg0;\n            memory[0x00:0x20] = temp2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x14;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            storage[temp3] = storage[temp3] + temp0;\n            var temp4 = memory[0x40:0x60];\n            memory[temp4:temp4 + 0x20] = temp0;\n            var temp5 = memory[0x40:0x60];\n            log(memory[temp5:temp5 + (temp4 + 0x20) - temp5], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff]);\n            return 0x01;\n        } else if (storage[0x09] & 0xff) {\n            if (storage[0x10] != 0x00) {\n            label_1539:\n                var1 = arg1 * storage[0x10];\n                var2 = 0x0de0b6b3a7640000;\n                var var3 = var1;\n            \n                if (!var2) { assert(); }\n            \n                var temp6 = var3 / var2;\n                var1 = temp6;\n                var temp7 = arg1;\n                memory[0x00:0x20] = msg.sender;\n                memory[0x20:0x40] = 0x14;\n                var temp8 = keccak256(memory[0x00:0x40]);\n                storage[temp8] = storage[temp8] - temp7;\n                storage[0x01] = storage[0x01] - temp7;\n                var temp9 = memory[0x40:0x60];\n                memory[temp9:temp9 + 0x20] = temp7;\n                var temp10 = memory[0x40:0x60];\n                log(memory[temp10:temp10 + (temp9 + 0x20) - temp10], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, msg.sender, stack[-6] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                var temp11 = memory[0x40:0x60];\n                var temp12;\n                temp12, memory[temp11:temp11 + 0x00] = address(msg.sender).call.gas(!var1 * 0x08fc).value(var1)(memory[temp11:temp11 + memory[0x40:0x60] - temp11]);\n            \n                if (temp12) { return 0x01; }\n                else { revert(memory[0x00:0x00]); }\n            } else {\n                var2 = 0x1538;\n                func_1C98();\n                goto label_1539;\n            }\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function currentTier() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x05] != 0x0a) { return storage[0x05] + 0x01; }\n        else { return 0x0a; }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var r0) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x15;\n        var temp0 = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = temp0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function leftInTier() returns (var r0) {\n        var var0 = 0x00;\n    \n        if (storage[0x05] == 0x0a) { return 0x00; }\n    \n        var var1 = storage[0x04];\n        var var2 = 0x02;\n        var var3 = storage[0x05];\n    \n        if (var3 >= storage[var2]) { assert(); }\n    \n        memory[0x00:0x20] = var2;\n        return storage[var3 + keccak256(memory[0x00:0x20])] - var1;\n    }\n    \n    function payRate() returns (var r0) { return storage[0x10]; }\n    \n    function func_1854(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = 0x00;\n    \n        if (storage[0x05] != 0x0a) {\n            var1 = 0x00;\n            var var3 = 0x02;\n            var var4 = storage[0x05];\n        \n            if (var4 >= storage[var3]) { assert(); }\n        \n            memory[0x00:0x20] = var3;\n        \n            if (arg0 <= storage[var4 + keccak256(memory[0x00:0x20])]) {\n                var3 = 0x03;\n                var4 = storage[0x05];\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                return arg1 * storage[var4 + keccak256(memory[0x00:0x20])];\n            } else {\n                var3 = 0x02;\n                var4 = storage[0x05];\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var2 = arg0 - storage[var4 + keccak256(memory[0x00:0x20])];\n                arg1 = arg1 - var2;\n                var3 = 0x03;\n                var4 = storage[0x05];\n            \n                if (var4 >= storage[var3]) { assert(); }\n            \n                memory[0x00:0x20] = var3;\n                var1 = arg1 * storage[var4 + keccak256(memory[0x00:0x20])];\n                storage[0x05] = storage[0x05] + 0x01;\n                var3 = 0x18fb;\n                var4 = arg0;\n                var var5 = var2;\n                var3 = func_1854(var4, var5);\n                var1 = var1 + var3;\n                var0 = var1;\n            \n            label_192A:\n                return var0;\n            }\n        } else {\n            var0 = 0x01b9130a00;\n            goto label_192A;\n        }\n    }\n    \n    function func_1932() {\n        storage[0x09] = (storage[0x09] & ~0xff) | 0x00;\n        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x01)) | 0x00;\n        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x02)) | 0x00;\n        storage[0x0a] = block.timestamp + 0x01e28500;\n        storage[0x0b] = storage[0x0a] + 0x278d00;\n        storage[0x0c] = storage[0x0b] + 0x069780;\n        storage[0x0d] = block.timestamp + 0x05a4ec00;\n        storage[0x0e] = storage[0x0d] + 0x278d00;\n        storage[0x0f] = storage[0x0e] + 0x069780;\n        storage[0x11] = 0x00;\n        storage[0x04] = 0x00;\n        storage[0x13] = 0x00;\n        storage[0x10] = 0x00;\n        storage[0x05] = 0x00;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = storage[0x0a];\n        var temp1 = temp0 + 0x20;\n        memory[temp1:temp1 + 0x20] = storage[0x0b];\n        var temp2 = temp1 + 0x20;\n        memory[temp2:temp2 + 0x20] = storage[0x0c];\n        var temp3 = memory[0x40:0x60];\n        log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x938e6fcc245d7476cacd79a5032e14b706e6a7ead38fab7a0d73c4feaded40eb]);\n    }\n    \n    function func_1A4C() {\n        if (block.timestamp < storage[0x0a]) {\n        label_1C96:\n            return;\n        } else {\n            var var0 = !(storage[0x09] & 0xff);\n        \n            if (!var0) {\n                if (!var0) {\n                label_1BE2:\n                \n                    if (!(storage[0x09] / 0x0100 ** 0x01 & 0xff)) {\n                    label_1C94:\n                        goto label_1C96;\n                    } else {\n                        storage[0x09] = (storage[0x09] & ~0xff) | 0x01;\n                        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x01)) | 0x00;\n                    \n                        if (!(storage[0x09] / 0x0100 ** 0x02 & 0xff)) {\n                            storage[0x0a] = storage[0x0c];\n                            var temp0 = memory[0x40:0x60];\n                            memory[temp0:temp0 + 0x20] = storage[0x0a];\n                            var temp1 = memory[0x40:0x60];\n                            log(memory[temp1:temp1 + (temp0 + 0x20) - temp1], [0x4ebcdc2b14eacac39cf3ffaa28fc33f98e82cb4ce5d3002187b611b4d7a8b398]);\n                            goto label_1C94;\n                        } else {\n                            storage[0x0a] = storage[0x0f];\n                            var temp2 = memory[0x40:0x60];\n                            memory[temp2:temp2 + 0x20] = storage[0x0a];\n                            var temp3 = memory[0x40:0x60];\n                            log(memory[temp3:temp3 + (temp2 + 0x20) - temp3], [0x4ebcdc2b14eacac39cf3ffaa28fc33f98e82cb4ce5d3002187b611b4d7a8b398]);\n                            goto label_1C94;\n                        }\n                    }\n                } else {\n                label_1A87:\n                \n                    if (storage[0x09] / 0x0100 ** 0x02 & 0xff) {\n                        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x01)) | 0x0100 ** 0x01;\n                        storage[0x0a] = storage[0x0e];\n                        var temp10 = memory[0x40:0x60];\n                        memory[temp10:temp10 + 0x20] = storage[0x0a];\n                        var temp11 = memory[0x40:0x60];\n                        log(memory[temp11:temp11 + (temp10 + 0x20) - temp11], [0x24f7a980d4f032f59e7197d51a3cd619f138504a9b0da6fee19a08985863775e]);\n                        goto label_1BDD;\n                    } else if (storage[0x05] != 0x0a) {\n                        storage[0x0a] = storage[0x0d];\n                        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x02)) | 0x0100 ** 0x02;\n                        var temp4 = memory[0x40:0x60];\n                        memory[temp4:temp4 + 0x20] = storage[0x0a];\n                        var temp5 = temp4 + 0x20;\n                        memory[temp5:temp5 + 0x20] = storage[0x0b];\n                        var temp6 = temp5 + 0x20;\n                        memory[temp6:temp6 + 0x20] = storage[0x0c];\n                        var temp7 = memory[0x40:0x60];\n                        log(memory[temp7:temp7 + (temp6 + 0x20) - temp7], [0xd157e8167dfe7e28a6a152fd1fa166e7e3404cf58c49c769442efce28d387e00]);\n                    \n                    label_1BDD:\n                        goto label_1C96;\n                    } else {\n                        storage[0x09] = (storage[0x09] & ~(0xff * 0x0100 ** 0x01)) | 0x0100 ** 0x01;\n                        storage[0x0a] = storage[0x0b];\n                        var temp8 = memory[0x40:0x60];\n                        memory[temp8:temp8 + 0x20] = storage[0x0a];\n                        var temp9 = memory[0x40:0x60];\n                        log(memory[temp9:temp9 + (temp8 + 0x20) - temp9], [0x24f7a980d4f032f59e7197d51a3cd619f138504a9b0da6fee19a08985863775e]);\n                        goto label_1BDD;\n                    }\n                }\n            } else if (storage[0x09] / 0x0100 ** 0x01 & 0xff) { goto label_1BE2; }\n            else { goto label_1A87; }\n        }\n    }\n    \n    function func_1C98() {\n        var var0 = 0x00;\n        var var1 = 0x2710;\n        var var2 = storage[0x04] - storage[0x11] * 0x05fa;\n    \n        if (!var1) { assert(); }\n    \n        storage[0x13] = storage[0x12] + var2 / var1;\n        var1 = 0x0de0b6b3a7640000;\n        var2 = storage[0x01];\n    \n        if (!var1) { assert(); }\n    \n        var temp0 = var2 / var1;\n        var0 = temp0;\n        storage[0x10] = address(this).balance - storage[0x13];\n        var1 = var0;\n        var2 = storage[0x10];\n    \n        if (!var1) { assert(); }\n    \n        storage[0x10] = var2 / var1;\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 34.05056643486023,
	"usage": {
		"completion_tokens": 588,
		"prompt_tokens": 13185,
		"total_tokens": 13773
	}
}