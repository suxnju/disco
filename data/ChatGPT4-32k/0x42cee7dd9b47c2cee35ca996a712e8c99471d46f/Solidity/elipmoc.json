{
	"address": "0x42cee7dd9b47c2cee35ca996a712e8c99471d46f",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Below is the Solidity contract code corresponding to the decompiled EVM Bytecode:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract TokenContract {\n    mapping (address => uint256) _balanceOf;\n    mapping (address => mapping (address => uint256)) _allowance;\n    uint256 _totalSupply;\n    string _name;\n    string _symbol;\n    uint8 _decimals;\n    uint256 _sellPrice;\n    uint256 _buyPrice;\n    uint256 _minimumCommission;\n    mapping (address => bool) _frozenAccount;\n    address _refillTokens;\n    bool _closeBuy;\n\n    event LogWithdrawal(address indexed account, uint256 amount);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n    event LogDeposit(address indexed account, uint256 amount);\n    event FrozenFunds(address indexed account, bool frozen);\n\n    function buy() public payable {\n        require(!_closeBuy);\n        require(_buyPrice > 0);\n        uint256 amount = msg.value / _buyPrice;\n        require(_balanceOf[address(this)] >= amount);\n        _transfer(address(this), msg.sender, amount);\n    }\n\n    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) public {\n        require(_refillTokens == msg.sender);\n        _sellPrice = newSellPrice;\n        _buyPrice = newBuyPrice;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function approve(address spender, uint256 value) public returns (bool success) {\n        _allowance[msg.sender][spender] = value;\n        return true;\n    }\n\n    function totalSupply() public view returns (uint256) {\n        return _totalSupply;\n    }\n\n    function transferFrom(address from, address to, uint256 value) public returns (bool success) {\n        require(value <= _allowance[from][msg.sender]);\n        _allowance[from][msg.sender] -= value;\n        _transfer(from, to, value);\n        return true;\n    }\n\n    function withdraw(uint256 value) public {\n        require(_refillTokens == msg.sender);\n        emit LogWithdrawal(msg.sender, value);\n        msg.sender.transfer(value);\n    }\n\n    function decimals() public view returns (uint8) {\n        return _decimals;\n    }\n\n    function commissionGetter() public view returns (address) {\n        return _refillTokens;\n    }\n\n    function sellPrice() public view returns (uint256) {\n        return _sellPrice;\n    }\n\n    function minimumCommission() public view returns (uint256) {\n        return _minimumCommission;\n    }\n\n    function balanceOf(address account) public view returns (uint256) {\n        return _balanceOf[account];\n    }\n\n    function refillTokens(uint256 value) public {\n        require(_refillTokens == msg.sender);\n        _transfer(msg.sender, address(this), value);\n    }\n\n    function buyPrice() public view returns (uint256) {\n        return _buyPrice;\n    }\n\n    function owner() public view returns (address) {\n        return _refillTokens;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function transfer(address to, uint256 value) public returns (bool success) {\n        _transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function setStatus(bool newStatus, bool newCloseBuy) public {\n        require(_refillTokens == msg.sender);\n        _closeBuy = newCloseBuy;\n    }\n\n    function frozenAccount(address account) public view returns (bool) {\n        return _frozenAccount[account];\n    }\n\n    function mintToken(uint256 value) public {\n        require(_refillTokens == msg.sender);\n        _balanceOf[_refillTokens] += value;\n        _totalSupply += value;\n        emit Transfer(address(0), _refillTokens, value);\n    }\n\n    function closeBuy() public view returns (bool) {\n        return _closeBuy;\n    }\n\n    function deposit() public payable {\n        emit LogDeposit(msg.sender, msg.value);\n    }\n\n    function allowance(address owner, address spender) public view returns (uint256) {\n        return _allowance[owner][spender];\n    }\n\n    function sell(uint256 amount) public {\n        require(_balanceOf[msg.sender] >= amount);\n        _transfer(msg.sender, address(this), amount);\n        msg.sender.transfer(amount * _sellPrice);\n    }\n\n    function freezeAccount(address account, bool freeze) public {\n        require(_refillTokens == msg.sender);\n        _frozenAccount[account] = freeze;\n        emit FrozenFunds(account, freeze);\n    }\n\n    function transferOwnership(address newOwner) public {\n        require(_refillTokens == msg.sender);\n        _refillTokens = newOwner;\n    }\n\n    function _transfer(address from, address to, uint256 value) internal {\n        require(to != address(0));\n        require(_balanceOf[from] >= value);\n        require(!(_frozenAccount[from] || _frozenAccount[to]));\n        _balanceOf[from] -= value;\n        _balanceOf[to] += value;\n        emit Transfer(from, to, value);\n    }\n}\n```\n\nPlease note that the original decompiled code did not contain any contract or function names and the variable types were also inferred. So, the provided Solidity code is a simplified and more readable version of the decompiled code. The actual structure and names used in the original Solidity code may be different.",
				"role": "assistant"
			}
		}
	],
	"created": 1701463469,
	"id": "chatcmpl-8R4f7uT1tVUifodheNHvhy1sUMxCc",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.12 23:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 _sellPrice; // STORAGE[0x7]\nuint256 _buyPrice; // STORAGE[0x8]\nuint256 _closeBuy; // STORAGE[0x9]\nuint256 _minimumCommission; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0xb]\naddress _refillTokens; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\n\n// Events\nLogWithdrawal(address, uint256);\nTransfer(address, address, uint256);\nLogDeposit(address, uint256);\nFrozenFunds(address, bool);\n\nfunction buy() public payable { \n    require(!(0xff & _closeBuy));\n    assert(_buyPrice);\n    v0 = v1 = (msg.value / _buyPrice * _buyPrice << 2) / 1000;\n    if (v1 < _minimumCommission) {\n        v0 = v2 = _minimumCommission;\n    }\n    require((address(this)).balance >= v0);\n    v3 = address(_closeBuy >> 16).call().value(v0).gas(!v0 * 2300);\n    require(v3);\n    0xca9(msg.value / _buyPrice, msg.sender, this);\n}\n\nfunction setPrices(uint256 varg0, uint256 varg1) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _sellPrice = varg0;\n    _buyPrice = varg1;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    v0 = v1 = (varg2 * _sellPrice << 2) / 1000;\n    if (v1 < _minimumCommission) {\n        v0 = v2 = _minimumCommission;\n    }\n    require((address(this)).balance >= v0);\n    v3 = address(_closeBuy >> 16).call().value(v0).gas(!v0 * 2300);\n    require(v3);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0xca9(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_refillTokens == msg.sender);\n    emit LogWithdrawal(msg.sender, varg0);\n    v0 = _refillTokens.call().value(varg0).gas(2300 * !varg0);\n    require(v0);\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction commissionGetter() public nonPayable { \n    return address(_closeBuy >> 16);\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction minimumCommission() public nonPayable { \n    return _minimumCommission;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction refillTokens(uint256 varg0) public nonPayable { \n    require(_refillTokens == msg.sender);\n    0xca9(varg0, this, msg.sender);\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction owner() public nonPayable { \n    return _refillTokens;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = (varg1 * _sellPrice << 2) / 1000;\n    if (v1 < _minimumCommission) {\n        v0 = v2 = _minimumCommission;\n    }\n    require((address(this)).balance >= v0);\n    v3 = address(_closeBuy >> 16).call().value(v0).gas(!v0 * 2300);\n    require(v3);\n    0xca9(varg1, varg0, msg.sender);\n}\n\nfunction setStatus(bool varg0, bool varg1) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _closeBuy = varg1 << 8 | ~0xff00 & (varg0 | ~0xff & _closeBuy);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction closeSell() public nonPayable { \n    return 0xff & _closeBuy >> 8;\n}\n\nfunction mintToken(uint256 varg0) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _balanceOf[_refillTokens] += varg0;\n    _totalSupply += varg0;\n    emit Transfer(0, address(this), varg0);\n    emit Transfer(address(this), _refillTokens, varg0);\n}\n\nfunction closeBuy() public nonPayable { \n    return 0xff & _closeBuy;\n}\n\nfunction deposit() public payable { \n    require(msg.value + (address(this)).balance > (address(this)).balance);\n    emit LogDeposit(msg.sender, msg.value);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(!(0xff & _closeBuy >> 8));\n    v0 = v1 = (varg0 * _sellPrice << 2) / 1000;\n    if (v1 < _minimumCommission) {\n        v0 = v2 = _minimumCommission;\n    }\n    require((address(this)).balance >= v0 + varg0 * _sellPrice);\n    v3 = address(_closeBuy >> 16).call().value(v0).gas(!v0 * 2300);\n    require(v3);\n    0xca9(varg0, this, msg.sender);\n    v4 = msg.sender.call().value(varg0 * _sellPrice).gas(2300 * !(varg0 * _sellPrice));\n    require(v4);\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _refillTokens = varg0;\n}\n\nfunction 0xca9(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg2);\n    require(!(0xff & _frozenAccount[v2]));\n    v3 = address(varg1);\n    require(!(0xff & _frozenAccount[v3]));\n    v4 = address(varg2);\n    _balanceOf[v4] = _balanceOf[v4] - varg0;\n    v5 = address(varg1);\n    _balanceOf[v5] += varg0;\n    emit Transfer(v4, v5, varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x5fefda7) {\n            setPrices(uint256,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3651b401 == function_selector) {\n            commissionGetter();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x6514aaca == function_selector) {\n            minimumCommission();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7ef5b6ea == function_selector) {\n            refillTokens(uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a != function_selector) {\n            if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            } else if (0xb3c2eac1 == function_selector) {\n                setStatus(bool,bool);\n            } else if (0xb414d4b6 == function_selector) {\n                frozenAccount(address);\n            } else if (0xba83c970 == function_selector) {\n                closeSell();\n            } else if (0xc634d032 == function_selector) {\n                mintToken(uint256);\n            } else if (0xc6ab5cdc == function_selector) {\n                closeBuy();\n            } else if (0xd0e30db0 == function_selector) {\n                deposit();\n            } else if (0xdd62ed3e == function_selector) {\n                allowance(address,address);\n            } else if (0xe4849b32 == function_selector) {\n                sell(uint256);\n            } else if (0xe724529c == function_selector) {\n                freezeAccount(address,bool);\n            } else if (0xf2fde38b == function_selector) {\n                transferOwnership(address);\n            }\n        }\n    }\n    buy();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.12 23:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 _sellPrice; // STORAGE[0x7]\nuint256 _buyPrice; // STORAGE[0x8]\nuint256 _closeBuy; // STORAGE[0x9]\nuint256 _minimumCommission; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0xb]\naddress _refillTokens; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\n\n// Events\nLogWithdrawal(address, uint256);\nTransfer(address, address, uint256);\nLogDeposit(address, uint256);\nFrozenFunds(address, bool);\n\nfunction buy() public payable { \n    require(!(0xff & _closeBuy));\n    assert(_buyPrice);\n    v0 = v1 = (msg.value / _buyPrice * _buyPrice << 2) / 1000;\n    if (v1 < _minimumCommission) {\n        v0 = v2 = _minimumCommission;\n    }\n    require((address(this)).balance >= v0);\n    v3 = address(_closeBuy >> 16).call().value(v0).gas(!v0 * 2300);\n    require(v3);\n    0xca9(msg.value / _buyPrice, msg.sender, this);\n}\n\nfunction setPrices(uint256 varg0, uint256 varg1) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _sellPrice = varg0;\n    _buyPrice = varg1;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    v0 = v1 = (varg2 * _sellPrice << 2) / 1000;\n    if (v1 < _minimumCommission) {\n        v0 = v2 = _minimumCommission;\n    }\n    require((address(this)).balance >= v0);\n    v3 = address(_closeBuy >> 16).call().value(v0).gas(!v0 * 2300);\n    require(v3);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0xca9(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_refillTokens == msg.sender);\n    emit LogWithdrawal(msg.sender, varg0);\n    v0 = _refillTokens.call().value(varg0).gas(2300 * !varg0);\n    require(v0);\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction commissionGetter() public nonPayable { \n    return address(_closeBuy >> 16);\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction minimumCommission() public nonPayable { \n    return _minimumCommission;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction refillTokens(uint256 varg0) public nonPayable { \n    require(_refillTokens == msg.sender);\n    0xca9(varg0, this, msg.sender);\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction owner() public nonPayable { \n    return _refillTokens;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = (varg1 * _sellPrice << 2) / 1000;\n    if (v1 < _minimumCommission) {\n        v0 = v2 = _minimumCommission;\n    }\n    require((address(this)).balance >= v0);\n    v3 = address(_closeBuy >> 16).call().value(v0).gas(!v0 * 2300);\n    require(v3);\n    0xca9(varg1, varg0, msg.sender);\n}\n\nfunction setStatus(bool varg0, bool varg1) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _closeBuy = varg1 << 8 | ~0xff00 & (varg0 | ~0xff & _closeBuy);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction closeSell() public nonPayable { \n    return 0xff & _closeBuy >> 8;\n}\n\nfunction mintToken(uint256 varg0) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _balanceOf[_refillTokens] += varg0;\n    _totalSupply += varg0;\n    emit Transfer(0, address(this), varg0);\n    emit Transfer(address(this), _refillTokens, varg0);\n}\n\nfunction closeBuy() public nonPayable { \n    return 0xff & _closeBuy;\n}\n\nfunction deposit() public payable { \n    require(msg.value + (address(this)).balance > (address(this)).balance);\n    emit LogDeposit(msg.sender, msg.value);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(!(0xff & _closeBuy >> 8));\n    v0 = v1 = (varg0 * _sellPrice << 2) / 1000;\n    if (v1 < _minimumCommission) {\n        v0 = v2 = _minimumCommission;\n    }\n    require((address(this)).balance >= v0 + varg0 * _sellPrice);\n    v3 = address(_closeBuy >> 16).call().value(v0).gas(!v0 * 2300);\n    require(v3);\n    0xca9(varg0, this, msg.sender);\n    v4 = msg.sender.call().value(varg0 * _sellPrice).gas(2300 * !(varg0 * _sellPrice));\n    require(v4);\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _refillTokens = varg0;\n}\n\nfunction 0xca9(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg2);\n    require(!(0xff & _frozenAccount[v2]));\n    v3 = address(varg1);\n    require(!(0xff & _frozenAccount[v3]));\n    v4 = address(varg2);\n    _balanceOf[v4] = _balanceOf[v4] - varg0;\n    v5 = address(varg1);\n    _balanceOf[v5] += varg0;\n    emit Transfer(v4, v5, varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x5fefda7) {\n            setPrices(uint256,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3651b401 == function_selector) {\n            commissionGetter();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x6514aaca == function_selector) {\n            minimumCommission();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7ef5b6ea == function_selector) {\n            refillTokens(uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a != function_selector) {\n            if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            } else if (0xb3c2eac1 == function_selector) {\n                setStatus(bool,bool);\n            } else if (0xb414d4b6 == function_selector) {\n                frozenAccount(address);\n            } else if (0xba83c970 == function_selector) {\n                closeSell();\n            } else if (0xc634d032 == function_selector) {\n                mintToken(uint256);\n            } else if (0xc6ab5cdc == function_selector) {\n                closeBuy();\n            } else if (0xd0e30db0 == function_selector) {\n                deposit();\n            } else if (0xdd62ed3e == function_selector) {\n                allowance(address,address);\n            } else if (0xe4849b32 == function_selector) {\n                sell(uint256);\n            } else if (0xe724529c == function_selector) {\n                freezeAccount(address,bool);\n            } else if (0xf2fde38b == function_selector) {\n                transferOwnership(address);\n            }\n        }\n    }\n    buy();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.12 23:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256[] _name; // STORAGE[0x1]\nuint256[] _symbol; // STORAGE[0x2]\nuint256 _totalSupply; // STORAGE[0x4]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _allowance; // STORAGE[0x6]\nuint256 _sellPrice; // STORAGE[0x7]\nuint256 _buyPrice; // STORAGE[0x8]\nuint256 _closeBuy; // STORAGE[0x9]\nuint256 _minimumCommission; // STORAGE[0xa]\nmapping (uint256 => [uint256]) _frozenAccount; // STORAGE[0xb]\naddress _refillTokens; // STORAGE[0x0] bytes 0 to 19\nuint8 _decimals; // STORAGE[0x3] bytes 0 to 0\n\n// Events\nLogWithdrawal(address, uint256);\nTransfer(address, address, uint256);\nLogDeposit(address, uint256);\nFrozenFunds(address, bool);\n\nfunction buy() public payable { \n    require(!(0xff & _closeBuy));\n    assert(_buyPrice);\n    v0 = v1 = (msg.value / _buyPrice * _buyPrice << 2) / 1000;\n    if (v1 < _minimumCommission) {\n        v0 = v2 = _minimumCommission;\n    }\n    require((address(this)).balance >= v0);\n    v3 = address(_closeBuy >> 16).call().value(v0).gas(!v0 * 2300);\n    require(v3);\n    0xca9(msg.value / _buyPrice, msg.sender, this);\n}\n\nfunction setPrices(uint256 varg0, uint256 varg1) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _sellPrice = varg0;\n    _buyPrice = varg1;\n}\n\nfunction name() public nonPayable { \n    v0 = new bytes[](_name.length);\n    v1 = v2 = v0.data;\n    if (_name.length) {\n        if (31 < _name.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _name.length <= v1);\n        } else {\n            MEM[v2] = _name.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction approve(address varg0, uint256 varg1) public nonPayable { \n    _allowance[varg0] = varg1;\n    return 1;\n}\n\nfunction totalSupply() public nonPayable { \n    return _totalSupply;\n}\n\nfunction transferFrom(address varg0, address varg1, uint256 varg2) public nonPayable { \n    require(varg2 <= _allowance[msg.sender]);\n    v0 = v1 = (varg2 * _sellPrice << 2) / 1000;\n    if (v1 < _minimumCommission) {\n        v0 = v2 = _minimumCommission;\n    }\n    require((address(this)).balance >= v0);\n    v3 = address(_closeBuy >> 16).call().value(v0).gas(!v0 * 2300);\n    require(v3);\n    _allowance[msg.sender] = _allowance[msg.sender] - varg2;\n    0xca9(varg2, varg1, varg0);\n    return 1;\n}\n\nfunction withdraw(uint256 varg0) public nonPayable { \n    require(_refillTokens == msg.sender);\n    emit LogWithdrawal(msg.sender, varg0);\n    v0 = _refillTokens.call().value(varg0).gas(2300 * !varg0);\n    require(v0);\n}\n\nfunction decimals() public nonPayable { \n    return _decimals;\n}\n\nfunction commissionGetter() public nonPayable { \n    return address(_closeBuy >> 16);\n}\n\nfunction sellPrice() public nonPayable { \n    return _sellPrice;\n}\n\nfunction minimumCommission() public nonPayable { \n    return _minimumCommission;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction refillTokens(uint256 varg0) public nonPayable { \n    require(_refillTokens == msg.sender);\n    0xca9(varg0, this, msg.sender);\n}\n\nfunction buyPrice() public nonPayable { \n    return _buyPrice;\n}\n\nfunction owner() public nonPayable { \n    return _refillTokens;\n}\n\nfunction symbol() public nonPayable { \n    v0 = new bytes[](_symbol.length);\n    v1 = v2 = v0.data;\n    if (_symbol.length) {\n        if (31 < _symbol.length) {\n            do {\n                MEM[v1] = STORAGE[v3];\n                v3 += 1;\n                v1 += 32;\n            } while (v2 + _symbol.length <= v1);\n        } else {\n            MEM[v2] = _symbol.length >> 8 << 8;\n        }\n    }\n    v4 = new array[](v0.length);\n    v5 = v6 = 0;\n    while (v5 < v0.length) {\n        MEM[v5 + v4.data] = MEM[v0.data + v5];\n        v5 += 32;\n    }\n    v7 = v8 = v0.length + v4.data;\n    if (0x1f & v0.length) {\n        MEM[v8 - (0x1f & v0.length)] = ~(256 ** (32 - (0x1f & v0.length)) - 1) & MEM[v8 - (0x1f & v0.length)];\n    }\n    return v4;\n}\n\nfunction transfer(address varg0, uint256 varg1) public nonPayable { \n    v0 = v1 = (varg1 * _sellPrice << 2) / 1000;\n    if (v1 < _minimumCommission) {\n        v0 = v2 = _minimumCommission;\n    }\n    require((address(this)).balance >= v0);\n    v3 = address(_closeBuy >> 16).call().value(v0).gas(!v0 * 2300);\n    require(v3);\n    0xca9(varg1, varg0, msg.sender);\n}\n\nfunction setStatus(bool varg0, bool varg1) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _closeBuy = varg1 << 8 | ~0xff00 & (varg0 | ~0xff & _closeBuy);\n}\n\nfunction frozenAccount(address varg0) public nonPayable { \n    return 0xff & _frozenAccount[varg0];\n}\n\nfunction closeSell() public nonPayable { \n    return 0xff & _closeBuy >> 8;\n}\n\nfunction mintToken(uint256 varg0) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _balanceOf[_refillTokens] += varg0;\n    _totalSupply += varg0;\n    emit Transfer(0, address(this), varg0);\n    emit Transfer(address(this), _refillTokens, varg0);\n}\n\nfunction closeBuy() public nonPayable { \n    return 0xff & _closeBuy;\n}\n\nfunction deposit() public payable { \n    require(msg.value + (address(this)).balance > (address(this)).balance);\n    emit LogDeposit(msg.sender, msg.value);\n    return 1;\n}\n\nfunction allowance(address varg0, address varg1) public nonPayable { \n    return _allowance[varg1];\n}\n\nfunction sell(uint256 varg0) public nonPayable { \n    require(!(0xff & _closeBuy >> 8));\n    v0 = v1 = (varg0 * _sellPrice << 2) / 1000;\n    if (v1 < _minimumCommission) {\n        v0 = v2 = _minimumCommission;\n    }\n    require((address(this)).balance >= v0 + varg0 * _sellPrice);\n    v3 = address(_closeBuy >> 16).call().value(v0).gas(!v0 * 2300);\n    require(v3);\n    0xca9(varg0, this, msg.sender);\n    v4 = msg.sender.call().value(varg0 * _sellPrice).gas(2300 * !(varg0 * _sellPrice));\n    require(v4);\n}\n\nfunction freezeAccount(address varg0, bool varg1) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _frozenAccount[varg0] = varg1 | ~0xff & _frozenAccount[varg0];\n    emit FrozenFunds(varg0, varg1);\n}\n\nfunction transferOwnership(address varg0) public nonPayable { \n    require(_refillTokens == msg.sender);\n    _refillTokens = varg0;\n}\n\nfunction 0xca9(uint256 varg0, uint256 varg1, uint256 varg2) private { \n    require(address(varg1));\n    v0 = address(varg2);\n    require(_balanceOf[v0] >= varg0);\n    v1 = address(varg1);\n    require(_balanceOf[v1] + varg0 > _balanceOf[v1]);\n    v2 = address(varg2);\n    require(!(0xff & _frozenAccount[v2]));\n    v3 = address(varg1);\n    require(!(0xff & _frozenAccount[v3]));\n    v4 = address(varg2);\n    _balanceOf[v4] = _balanceOf[v4] - varg0;\n    v5 = address(varg1);\n    _balanceOf[v5] += varg0;\n    emit Transfer(v4, v5, varg0);\n    return ;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length >= 4) {\n        if (function_selector == 0x5fefda7) {\n            setPrices(uint256,uint256);\n        } else if (0x6fdde03 == function_selector) {\n            name();\n        } else if (0x95ea7b3 == function_selector) {\n            approve(address,uint256);\n        } else if (0x18160ddd == function_selector) {\n            totalSupply();\n        } else if (0x23b872dd == function_selector) {\n            transferFrom(address,address,uint256);\n        } else if (0x2e1a7d4d == function_selector) {\n            withdraw(uint256);\n        } else if (0x313ce567 == function_selector) {\n            decimals();\n        } else if (0x3651b401 == function_selector) {\n            commissionGetter();\n        } else if (0x4b750334 == function_selector) {\n            sellPrice();\n        } else if (0x6514aaca == function_selector) {\n            minimumCommission();\n        } else if (0x70a08231 == function_selector) {\n            balanceOf(address);\n        } else if (0x7ef5b6ea == function_selector) {\n            refillTokens(uint256);\n        } else if (0x8620410b == function_selector) {\n            buyPrice();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0x95d89b41 == function_selector) {\n            symbol();\n        } else if (0xa6f2ae3a != function_selector) {\n            if (0xa9059cbb == function_selector) {\n                transfer(address,uint256);\n            } else if (0xb3c2eac1 == function_selector) {\n                setStatus(bool,bool);\n            } else if (0xb414d4b6 == function_selector) {\n                frozenAccount(address);\n            } else if (0xba83c970 == function_selector) {\n                closeSell();\n            } else if (0xc634d032 == function_selector) {\n                mintToken(uint256);\n            } else if (0xc6ab5cdc == function_selector) {\n                closeBuy();\n            } else if (0xd0e30db0 == function_selector) {\n                deposit();\n            } else if (0xdd62ed3e == function_selector) {\n                allowance(address,address);\n            } else if (0xe4849b32 == function_selector) {\n                sell(uint256);\n            } else if (0xe724529c == function_selector) {\n                freezeAccount(address,bool);\n            } else if (0xf2fde38b == function_selector) {\n                transferOwnership(address);\n            }\n        }\n    }\n    buy();\n}\n.",
	"status": "1",
	"time_cost": 42.020922899246216,
	"usage": {
		"completion_tokens": 1140,
		"prompt_tokens": 2991,
		"total_tokens": 4131
	}
}