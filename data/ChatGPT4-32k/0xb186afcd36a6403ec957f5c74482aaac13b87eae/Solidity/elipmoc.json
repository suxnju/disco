{
	"address": "0xb186afcd36a6403ec957f5c74482aaac13b87eae",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Based on the decompiled code provided, the corresponding Solidity smart contract might look like this:\n\n```solidity\npragma solidity ^0.8.0;\n\ncontract MyContract {\n    mapping (address => uint256) private _balances;\n    mapping (address => uint256) private _balances_for_refund;\n    address private _developer;\n    address private _sale;\n    uint256 private _contract_eth_value;\n    uint256 private _refund_contract_eth_value;\n    uint256 private _refund_eth_value;\n    uint256 private stor_7;\n    uint256 private _eth_minimum;\n    address private _token;\n    uint8 private _bought_tokens;\n    uint8 private _token_set;\n    uint8 private _kill_switch;\n    uint8 private stor_9_0_0;\n\n    function balances(address varg0) public view returns (uint256) {\n        return _balances[varg0];\n    }\n\n    function personal_withdraw(string memory varg0, uint256 varg1) public {\n        require(_developer == msg.sender, \"Only developer can call this function\");\n        payable(msg.sender).transfer(varg1);\n    }\n\n    function balances_for_refund(address varg0) public view returns (uint256) {\n        return _balances_for_refund[varg0];\n    }\n\n    function refund_contract_eth_value() public view returns (uint256) {\n        return _refund_contract_eth_value;\n    }\n\n    function withdraw_refund() public {\n        require(_refund_eth_value > 0, \"Insufficient refund value\");\n        require(_balances_for_refund[msg.sender] > 0, \"No refund balance\");\n        \n        uint256 refundAmount = _balances_for_refund[msg.sender] * _refund_eth_value / _refund_contract_eth_value;\n        _refund_contract_eth_value -= _balances_for_refund[msg.sender];\n        _refund_eth_value -= refundAmount;\n        _balances_for_refund[msg.sender] = 0;\n        \n        payable(msg.sender).transfer(refundAmount);\n    }\n\n    function bought_tokens() public view returns (uint8) {\n        return _bought_tokens;\n    }\n\n    function sale() public view returns (address) {\n        return _sale;\n    }\n\n    function refund_eth_value() public view returns (uint256) {\n        return _refund_eth_value;\n    }\n\n    function token_set() public view returns (uint8) {\n        return _token_set;\n    }\n\n    function withdraw_token(address varg0) public {\n        require(_balances[msg.sender] > 0, \"No balance to withdraw\");\n        require(_sale != msg.sender, \"Sale address cannot withdraw\");\n        \n        _balances[msg.sender] = 0;\n        payable(msg.sender).transfer(_balances[msg.sender]);\n    }\n\n    function kill_switch() public view returns (uint8) {\n        return _kill_switch;\n    }\n\n    function eth_minimum() public view returns (uint256) {\n        return _eth_minimum;\n    }\n\n    function contract_eth_value() public view returns (uint256) {\n        return _contract_eth_value;\n    }\n\n    function developer() public view returns (address) {\n        return _developer;\n    }\n\n    function set_token(address varg0) public {\n        require(_developer == msg.sender, \"Only developer can call this function\");\n        _token = varg0;\n        _token_set = 1;\n    }\n\n    function activate_kill_switch(string memory varg0) public {\n        require(_developer == msg.sender, \"Only developer can call this function\");\n        _kill_switch = 1;\n    }\n\n    function token() public view returns (address) {\n        return _token;\n    }\n}\n```\n\nNote: This is a simplified version of the original decompiled code. It's assumed that the `varg0` in `withdraw_token` function and `stor_7`, `stor_9_0_0` variables are placeholder variables that are not clear in the context. Also, this code doesn't contain the exact functionality of the `__function_selector__` function because this function seems to map function selectors to functions manually, which is automatically handled by the EVM in Solidity. The `personal_withdraw` and `activate_kill_switch` functions have been simplified for the sake of readability and they do not include the string argument operation that appears in the original code. The `withdraw_token` function also does not include token transfer functionality due to the absence of a token interface. Please adjust the code accordingly to fit your exact use case.",
				"role": "assistant"
			}
		}
	],
	"created": 1701467273,
	"id": "chatcmpl-8R5eTSLm558AVq1s2lNvEl71ByxKY",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.08.25 22:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balances; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balances_for_refund; // STORAGE[0x1]\nuint256 _contract_eth_value; // STORAGE[0x3]\nuint256 _refund_contract_eth_value; // STORAGE[0x4]\nuint256 _refund_eth_value; // STORAGE[0x5]\nuint256 stor_7; // STORAGE[0x7]\nuint256 _eth_minimum; // STORAGE[0xb]\nuint8 _bought_tokens; // STORAGE[0x2] bytes 0 to 0\nuint8 _token_set; // STORAGE[0x2] bytes 1 to 1\nuint8 _kill_switch; // STORAGE[0x6] bytes 0 to 0\nuint8 stor_9_0_0; // STORAGE[0x9] bytes 0 to 0\naddress _developer; // STORAGE[0x8] bytes 0 to 19\naddress _sale; // STORAGE[0x9] bytes 0 to 19\nuint160 _token; // STORAGE[0xa] bytes 0 to 19\n\n\nfunction balances(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction personal_withdraw(string varg0, uint256 varg1) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg0 + 36, (?).length);\n    v1 = v2 = _developer == msg.sender;\n    if (_developer != msg.sender) {\n        v3 = v4 = v4.data;\n        v5 = v6 = v0.length;\n        v7 = v8 = v0.data;\n        while (v5 >= 32) {\n            MEM[v3] = MEM[v7];\n            v5 = v5 + ~31;\n            v3 += 32;\n            v7 += 32;\n        }\n        MEM[v3] = MEM[v3] & 256 ** (32 - v5) - 1 | MEM[v7] & ~(256 ** (32 - v5) - 1);\n        v1 = keccak256(v4) == stor_7;\n    }\n    require(v1);\n    v9 = msg.sender.call().value(varg1).gas(2300 * !varg1);\n    require(v9);\n}\n\nfunction balances_for_refund(address varg0) public nonPayable { \n    return _balances_for_refund[varg0];\n}\n\nfunction refund_contract_eth_value() public nonPayable { \n    return _refund_contract_eth_value;\n}\n\nfunction withdraw_refund() public nonPayable { \n    require(_refund_eth_value);\n    require(_balances_for_refund[msg.sender]);\n    assert(_refund_contract_eth_value);\n    _refund_contract_eth_value = _refund_contract_eth_value - _balances_for_refund[msg.sender];\n    _refund_eth_value = _refund_eth_value - _balances_for_refund[msg.sender] * _refund_eth_value / _refund_contract_eth_value;\n    _balances_for_refund[msg.sender] = 0;\n    v0 = msg.sender.call().value(_balances_for_refund[msg.sender] * _refund_eth_value / _refund_contract_eth_value).gas(2300 * !(_balances_for_refund[msg.sender] * _refund_eth_value / _refund_contract_eth_value));\n    require(v0);\n}\n\nfunction bought_tokens() public nonPayable { \n    return _bought_tokens;\n}\n\nfunction sale() public nonPayable { \n    return _sale;\n}\n\nfunction refund_eth_value() public nonPayable { \n    return _refund_eth_value;\n}\n\nfunction token_set() public nonPayable { \n    return _token_set;\n}\n\nfunction withdraw_token(address varg0) public nonPayable { \n    if (_balances[msg.sender]) {\n        require(_sale != msg.sender);\n        if (_bought_tokens) {\n            MEM[32 + MEM[64]] = 0;\n            require(varg0.code.size);\n            v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas - 710);\n            require(v0);\n            require(v1);\n            assert(_contract_eth_value);\n            _contract_eth_value = _contract_eth_value - _balances[msg.sender];\n            _balances[msg.sender] = 0;\n            MEM[32 + MEM[64]] = 0;\n            require(varg0.code.size);\n            v2, v3 = varg0.transfer(_developer, v1 * _balances[msg.sender] / _contract_eth_value / 100).gas(msg.gas - 710);\n            require(v2);\n            require(v3);\n            MEM[32 + MEM[64]] = 0;\n            require(varg0.code.size);\n            v4, v5 = varg0.transfer(msg.sender, v1 * _balances[msg.sender] / _contract_eth_value - v1 * _balances[msg.sender] / _contract_eth_value / 100).gas(msg.gas - 710);\n            require(v4);\n            require(v5);\n        } else {\n            _balances[msg.sender] = 0;\n            v6 = msg.sender.call().value(_balances[msg.sender]).gas(2300 * !_balances[msg.sender]);\n            require(v6);\n        }\n    }\n}\n\nfunction kill_switch() public nonPayable { \n    return _kill_switch;\n}\n\nfunction eth_minimum() public nonPayable { \n    return _eth_minimum;\n}\n\nfunction contract_eth_value() public nonPayable { \n    return _contract_eth_value;\n}\n\nfunction developer() public nonPayable { \n    return _developer;\n}\n\nfunction set_token(address varg0) public nonPayable { \n    require(_developer == msg.sender);\n    _token = varg0;\n    _token_set = 1;\n}\n\nfunction activate_kill_switch(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg0 + 36, (?).length);\n    v1 = v2 = _developer == msg.sender;\n    if (_developer != msg.sender) {\n        v3 = v4 = v4.data;\n        v5 = v6 = v0.length;\n        v7 = v8 = v0.data;\n        while (v5 >= 32) {\n            MEM[v3] = MEM[v7];\n            v5 = v5 + ~31;\n            v3 += 32;\n            v7 += 32;\n        }\n        MEM[v3] = MEM[v3] & 256 ** (32 - v5) - 1 | MEM[v7] & ~(256 ** (32 - v5) - 1);\n        v1 = keccak256(v4) == stor_7;\n    }\n    require(v1);\n    _kill_switch = 1;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        v0 = uint32(function_selector >> 224);\n        if (v0 == 0x27e235e3) {\n            balances(address);\n        } else if (0x2a707d2c == v0) {\n            personal_withdraw(string,uint256);\n        } else if (0x3166f49f == v0) {\n            balances_for_refund(address);\n        } else if (0x4915ef4a == v0) {\n            refund_contract_eth_value();\n        } else if (0x50d7d290 == v0) {\n            withdraw_refund();\n        } else if (0x6360fc3f == v0) {\n            bought_tokens();\n        } else if (0x6ad1fe02 == v0) {\n            sale();\n        } else if (0x88908546 == v0) {\n            refund_eth_value();\n        } else if (0x8a7e30a1 == v0) {\n            token_set();\n        } else if (0x9cd3cb5d == v0) {\n            withdraw_token(address);\n        } else if (0xa089feea == v0) {\n            kill_switch();\n        } else if (0xa5c860ba == v0) {\n            eth_minimum();\n        } else if (0xc42bb1e4 == v0) {\n            contract_eth_value();\n        } else if (0xca4b208b == v0) {\n            developer();\n        } else if (0xcc63a3c9 == v0) {\n            set_token(address);\n        } else if (0xd4701c35 == v0) {\n            activate_kill_switch(string);\n        } else if (0xfc0c546a == v0) {\n            token();\n        }\n    }\n    if (_bought_tokens) {\n        require(_sale == msg.sender);\n        _refund_eth_value += msg.value;\n    } else {\n        _balances[msg.sender] += msg.value;\n        _balances_for_refund[msg.sender] += msg.value;\n        if ((address(this)).balance >= _eth_minimum) {\n            if (!_kill_switch) {\n                require(stor_9_0_0);\n                _bought_tokens = 1;\n                _contract_eth_value = (address(this)).balance;\n                _refund_contract_eth_value = (address(this)).balance;\n                v1 = _sale.call().value((address(this)).balance).gas(msg.gas - 34710);\n                require(v1);\n                require(!(address(this)).balance);\n            }\n        }\n    }\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 22:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balances; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balances_for_refund; // STORAGE[0x1]\nuint256 _contract_eth_value; // STORAGE[0x3]\nuint256 _refund_contract_eth_value; // STORAGE[0x4]\nuint256 _refund_eth_value; // STORAGE[0x5]\nuint256 stor_7; // STORAGE[0x7]\nuint256 _eth_minimum; // STORAGE[0xb]\nuint8 _bought_tokens; // STORAGE[0x2] bytes 0 to 0\nuint8 _token_set; // STORAGE[0x2] bytes 1 to 1\nuint8 _kill_switch; // STORAGE[0x6] bytes 0 to 0\nuint8 stor_9_0_0; // STORAGE[0x9] bytes 0 to 0\naddress _developer; // STORAGE[0x8] bytes 0 to 19\naddress _sale; // STORAGE[0x9] bytes 0 to 19\nuint160 _token; // STORAGE[0xa] bytes 0 to 19\n\n\nfunction balances(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction personal_withdraw(string varg0, uint256 varg1) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg0 + 36, (?).length);\n    v1 = v2 = _developer == msg.sender;\n    if (_developer != msg.sender) {\n        v3 = v4 = v4.data;\n        v5 = v6 = v0.length;\n        v7 = v8 = v0.data;\n        while (v5 >= 32) {\n            MEM[v3] = MEM[v7];\n            v5 = v5 + ~31;\n            v3 += 32;\n            v7 += 32;\n        }\n        MEM[v3] = MEM[v3] & 256 ** (32 - v5) - 1 | MEM[v7] & ~(256 ** (32 - v5) - 1);\n        v1 = keccak256(v4) == stor_7;\n    }\n    require(v1);\n    v9 = msg.sender.call().value(varg1).gas(2300 * !varg1);\n    require(v9);\n}\n\nfunction balances_for_refund(address varg0) public nonPayable { \n    return _balances_for_refund[varg0];\n}\n\nfunction refund_contract_eth_value() public nonPayable { \n    return _refund_contract_eth_value;\n}\n\nfunction withdraw_refund() public nonPayable { \n    require(_refund_eth_value);\n    require(_balances_for_refund[msg.sender]);\n    assert(_refund_contract_eth_value);\n    _refund_contract_eth_value = _refund_contract_eth_value - _balances_for_refund[msg.sender];\n    _refund_eth_value = _refund_eth_value - _balances_for_refund[msg.sender] * _refund_eth_value / _refund_contract_eth_value;\n    _balances_for_refund[msg.sender] = 0;\n    v0 = msg.sender.call().value(_balances_for_refund[msg.sender] * _refund_eth_value / _refund_contract_eth_value).gas(2300 * !(_balances_for_refund[msg.sender] * _refund_eth_value / _refund_contract_eth_value));\n    require(v0);\n}\n\nfunction bought_tokens() public nonPayable { \n    return _bought_tokens;\n}\n\nfunction sale() public nonPayable { \n    return _sale;\n}\n\nfunction refund_eth_value() public nonPayable { \n    return _refund_eth_value;\n}\n\nfunction token_set() public nonPayable { \n    return _token_set;\n}\n\nfunction withdraw_token(address varg0) public nonPayable { \n    if (_balances[msg.sender]) {\n        require(_sale != msg.sender);\n        if (_bought_tokens) {\n            MEM[32 + MEM[64]] = 0;\n            require(varg0.code.size);\n            v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas - 710);\n            require(v0);\n            require(v1);\n            assert(_contract_eth_value);\n            _contract_eth_value = _contract_eth_value - _balances[msg.sender];\n            _balances[msg.sender] = 0;\n            MEM[32 + MEM[64]] = 0;\n            require(varg0.code.size);\n            v2, v3 = varg0.transfer(_developer, v1 * _balances[msg.sender] / _contract_eth_value / 100).gas(msg.gas - 710);\n            require(v2);\n            require(v3);\n            MEM[32 + MEM[64]] = 0;\n            require(varg0.code.size);\n            v4, v5 = varg0.transfer(msg.sender, v1 * _balances[msg.sender] / _contract_eth_value - v1 * _balances[msg.sender] / _contract_eth_value / 100).gas(msg.gas - 710);\n            require(v4);\n            require(v5);\n        } else {\n            _balances[msg.sender] = 0;\n            v6 = msg.sender.call().value(_balances[msg.sender]).gas(2300 * !_balances[msg.sender]);\n            require(v6);\n        }\n    }\n}\n\nfunction kill_switch() public nonPayable { \n    return _kill_switch;\n}\n\nfunction eth_minimum() public nonPayable { \n    return _eth_minimum;\n}\n\nfunction contract_eth_value() public nonPayable { \n    return _contract_eth_value;\n}\n\nfunction developer() public nonPayable { \n    return _developer;\n}\n\nfunction set_token(address varg0) public nonPayable { \n    require(_developer == msg.sender);\n    _token = varg0;\n    _token_set = 1;\n}\n\nfunction activate_kill_switch(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg0 + 36, (?).length);\n    v1 = v2 = _developer == msg.sender;\n    if (_developer != msg.sender) {\n        v3 = v4 = v4.data;\n        v5 = v6 = v0.length;\n        v7 = v8 = v0.data;\n        while (v5 >= 32) {\n            MEM[v3] = MEM[v7];\n            v5 = v5 + ~31;\n            v3 += 32;\n            v7 += 32;\n        }\n        MEM[v3] = MEM[v3] & 256 ** (32 - v5) - 1 | MEM[v7] & ~(256 ** (32 - v5) - 1);\n        v1 = keccak256(v4) == stor_7;\n    }\n    require(v1);\n    _kill_switch = 1;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        v0 = uint32(function_selector >> 224);\n        if (v0 == 0x27e235e3) {\n            balances(address);\n        } else if (0x2a707d2c == v0) {\n            personal_withdraw(string,uint256);\n        } else if (0x3166f49f == v0) {\n            balances_for_refund(address);\n        } else if (0x4915ef4a == v0) {\n            refund_contract_eth_value();\n        } else if (0x50d7d290 == v0) {\n            withdraw_refund();\n        } else if (0x6360fc3f == v0) {\n            bought_tokens();\n        } else if (0x6ad1fe02 == v0) {\n            sale();\n        } else if (0x88908546 == v0) {\n            refund_eth_value();\n        } else if (0x8a7e30a1 == v0) {\n            token_set();\n        } else if (0x9cd3cb5d == v0) {\n            withdraw_token(address);\n        } else if (0xa089feea == v0) {\n            kill_switch();\n        } else if (0xa5c860ba == v0) {\n            eth_minimum();\n        } else if (0xc42bb1e4 == v0) {\n            contract_eth_value();\n        } else if (0xca4b208b == v0) {\n            developer();\n        } else if (0xcc63a3c9 == v0) {\n            set_token(address);\n        } else if (0xd4701c35 == v0) {\n            activate_kill_switch(string);\n        } else if (0xfc0c546a == v0) {\n            token();\n        }\n    }\n    if (_bought_tokens) {\n        require(_sale == msg.sender);\n        _refund_eth_value += msg.value;\n    } else {\n        _balances[msg.sender] += msg.value;\n        _balances_for_refund[msg.sender] += msg.value;\n        if ((address(this)).balance >= _eth_minimum) {\n            if (!_kill_switch) {\n                require(stor_9_0_0);\n                _bought_tokens = 1;\n                _contract_eth_value = (address(this)).balance;\n                _refund_contract_eth_value = (address(this)).balance;\n                v1 = _sale.call().value((address(this)).balance).gas(msg.gas - 34710);\n                require(v1);\n                require(!(address(this)).balance);\n            }\n        }\n    }\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.08.25 22:09 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _balances; // STORAGE[0x0]\nmapping (uint256 => [uint256]) _balances_for_refund; // STORAGE[0x1]\nuint256 _contract_eth_value; // STORAGE[0x3]\nuint256 _refund_contract_eth_value; // STORAGE[0x4]\nuint256 _refund_eth_value; // STORAGE[0x5]\nuint256 stor_7; // STORAGE[0x7]\nuint256 _eth_minimum; // STORAGE[0xb]\nuint8 _bought_tokens; // STORAGE[0x2] bytes 0 to 0\nuint8 _token_set; // STORAGE[0x2] bytes 1 to 1\nuint8 _kill_switch; // STORAGE[0x6] bytes 0 to 0\nuint8 stor_9_0_0; // STORAGE[0x9] bytes 0 to 0\naddress _developer; // STORAGE[0x8] bytes 0 to 19\naddress _sale; // STORAGE[0x9] bytes 0 to 19\nuint160 _token; // STORAGE[0xa] bytes 0 to 19\n\n\nfunction balances(address varg0) public nonPayable { \n    return _balances[varg0];\n}\n\nfunction personal_withdraw(string varg0, uint256 varg1) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg0 + 36, (?).length);\n    v1 = v2 = _developer == msg.sender;\n    if (_developer != msg.sender) {\n        v3 = v4 = v4.data;\n        v5 = v6 = v0.length;\n        v7 = v8 = v0.data;\n        while (v5 >= 32) {\n            MEM[v3] = MEM[v7];\n            v5 = v5 + ~31;\n            v3 += 32;\n            v7 += 32;\n        }\n        MEM[v3] = MEM[v3] & 256 ** (32 - v5) - 1 | MEM[v7] & ~(256 ** (32 - v5) - 1);\n        v1 = keccak256(v4) == stor_7;\n    }\n    require(v1);\n    v9 = msg.sender.call().value(varg1).gas(2300 * !varg1);\n    require(v9);\n}\n\nfunction balances_for_refund(address varg0) public nonPayable { \n    return _balances_for_refund[varg0];\n}\n\nfunction refund_contract_eth_value() public nonPayable { \n    return _refund_contract_eth_value;\n}\n\nfunction withdraw_refund() public nonPayable { \n    require(_refund_eth_value);\n    require(_balances_for_refund[msg.sender]);\n    assert(_refund_contract_eth_value);\n    _refund_contract_eth_value = _refund_contract_eth_value - _balances_for_refund[msg.sender];\n    _refund_eth_value = _refund_eth_value - _balances_for_refund[msg.sender] * _refund_eth_value / _refund_contract_eth_value;\n    _balances_for_refund[msg.sender] = 0;\n    v0 = msg.sender.call().value(_balances_for_refund[msg.sender] * _refund_eth_value / _refund_contract_eth_value).gas(2300 * !(_balances_for_refund[msg.sender] * _refund_eth_value / _refund_contract_eth_value));\n    require(v0);\n}\n\nfunction bought_tokens() public nonPayable { \n    return _bought_tokens;\n}\n\nfunction sale() public nonPayable { \n    return _sale;\n}\n\nfunction refund_eth_value() public nonPayable { \n    return _refund_eth_value;\n}\n\nfunction token_set() public nonPayable { \n    return _token_set;\n}\n\nfunction withdraw_token(address varg0) public nonPayable { \n    if (_balances[msg.sender]) {\n        require(_sale != msg.sender);\n        if (_bought_tokens) {\n            MEM[32 + MEM[64]] = 0;\n            require(varg0.code.size);\n            v0, v1 = varg0.balanceOf(address(this)).gas(msg.gas - 710);\n            require(v0);\n            require(v1);\n            assert(_contract_eth_value);\n            _contract_eth_value = _contract_eth_value - _balances[msg.sender];\n            _balances[msg.sender] = 0;\n            MEM[32 + MEM[64]] = 0;\n            require(varg0.code.size);\n            v2, v3 = varg0.transfer(_developer, v1 * _balances[msg.sender] / _contract_eth_value / 100).gas(msg.gas - 710);\n            require(v2);\n            require(v3);\n            MEM[32 + MEM[64]] = 0;\n            require(varg0.code.size);\n            v4, v5 = varg0.transfer(msg.sender, v1 * _balances[msg.sender] / _contract_eth_value - v1 * _balances[msg.sender] / _contract_eth_value / 100).gas(msg.gas - 710);\n            require(v4);\n            require(v5);\n        } else {\n            _balances[msg.sender] = 0;\n            v6 = msg.sender.call().value(_balances[msg.sender]).gas(2300 * !_balances[msg.sender]);\n            require(v6);\n        }\n    }\n}\n\nfunction kill_switch() public nonPayable { \n    return _kill_switch;\n}\n\nfunction eth_minimum() public nonPayable { \n    return _eth_minimum;\n}\n\nfunction contract_eth_value() public nonPayable { \n    return _contract_eth_value;\n}\n\nfunction developer() public nonPayable { \n    return _developer;\n}\n\nfunction set_token(address varg0) public nonPayable { \n    require(_developer == msg.sender);\n    _token = varg0;\n    _token_set = 1;\n}\n\nfunction activate_kill_switch(string varg0) public nonPayable { \n    v0 = new bytes[]((?).length);\n    CALLDATACOPY(v0.data, varg0 + 36, (?).length);\n    v1 = v2 = _developer == msg.sender;\n    if (_developer != msg.sender) {\n        v3 = v4 = v4.data;\n        v5 = v6 = v0.length;\n        v7 = v8 = v0.data;\n        while (v5 >= 32) {\n            MEM[v3] = MEM[v7];\n            v5 = v5 + ~31;\n            v3 += 32;\n            v7 += 32;\n        }\n        MEM[v3] = MEM[v3] & 256 ** (32 - v5) - 1 | MEM[v7] & ~(256 ** (32 - v5) - 1);\n        v1 = keccak256(v4) == stor_7;\n    }\n    require(v1);\n    _kill_switch = 1;\n}\n\nfunction token() public nonPayable { \n    return _token;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint256 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        v0 = uint32(function_selector >> 224);\n        if (v0 == 0x27e235e3) {\n            balances(address);\n        } else if (0x2a707d2c == v0) {\n            personal_withdraw(string,uint256);\n        } else if (0x3166f49f == v0) {\n            balances_for_refund(address);\n        } else if (0x4915ef4a == v0) {\n            refund_contract_eth_value();\n        } else if (0x50d7d290 == v0) {\n            withdraw_refund();\n        } else if (0x6360fc3f == v0) {\n            bought_tokens();\n        } else if (0x6ad1fe02 == v0) {\n            sale();\n        } else if (0x88908546 == v0) {\n            refund_eth_value();\n        } else if (0x8a7e30a1 == v0) {\n            token_set();\n        } else if (0x9cd3cb5d == v0) {\n            withdraw_token(address);\n        } else if (0xa089feea == v0) {\n            kill_switch();\n        } else if (0xa5c860ba == v0) {\n            eth_minimum();\n        } else if (0xc42bb1e4 == v0) {\n            contract_eth_value();\n        } else if (0xca4b208b == v0) {\n            developer();\n        } else if (0xcc63a3c9 == v0) {\n            set_token(address);\n        } else if (0xd4701c35 == v0) {\n            activate_kill_switch(string);\n        } else if (0xfc0c546a == v0) {\n            token();\n        }\n    }\n    if (_bought_tokens) {\n        require(_sale == msg.sender);\n        _refund_eth_value += msg.value;\n    } else {\n        _balances[msg.sender] += msg.value;\n        _balances_for_refund[msg.sender] += msg.value;\n        if ((address(this)).balance >= _eth_minimum) {\n            if (!_kill_switch) {\n                require(stor_9_0_0);\n                _bought_tokens = 1;\n                _contract_eth_value = (address(this)).balance;\n                _refund_contract_eth_value = (address(this)).balance;\n                v1 = _sale.call().value((address(this)).balance).gas(msg.gas - 34710);\n                require(v1);\n                require(!(address(this)).balance);\n            }\n        }\n    }\n}\n.",
	"status": "1",
	"time_cost": 39.962977170944214,
	"usage": {
		"completion_tokens": 921,
		"prompt_tokens": 2154,
		"total_tokens": 3075
	}
}