{
	"address": "0xa0a4a2af46af4cf37eacc495eedcae269ef2720e",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity code representation of the provided pseudocode:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping (address => uint256)) public allowance;\n    address private owner;\n\n    constructor() public {\n        owner = msg.sender;\n    }\n\n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value, \"Insufficient balance\");\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        return true;\n    }\n\n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[_from] >= _value, \"Insufficient balance\");\n        require(allowance[_from][msg.sender] >= _value, \"Insufficient allowance\");\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        return true;\n    }\n\n    function destruct() public {\n        require(msg.sender == owner, \"Only the owner can destroy the contract\");\n        selfdestruct(msg.sender);\n    }\n}\n```\n\nThe contract above is a simple implementation of a ERC-20 like token. Note that the original bytecode is not enough to fully rebuild the original solidity contract, because important metadata is lost during the compilation process (like function and variable names).",
				"role": "assistant"
			}
		}
	],
	"created": 1700474813,
	"id": "chatcmpl-8MvT35IURl9teWxX8lYkOxlC2uqdU",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] == 0xc87b56dd) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x04;\n            memory[0xc0:0xe0] = var0;\n            var1 = keccak256(memory[0xc0:0xe0]);\n            var2 = 0x01a0;\n            var temp59 = storage[var1] + 0x20;\n            var3 = temp59;\n            var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var5 = 0x05;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_00E2; }\n        \n        label_00E6:\n            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n            var temp60 = var4;\n            var temp61 = memory[temp60:temp60 + 0x20] + 0x01;\n            memory[temp60:temp60 + 0x20] = temp61;\n        \n            if (var5 == temp61) { goto label_0108; }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_00E6; }\n        \n        label_00E2:\n        \n        label_0108:\n            var temp62 = memory[0x01a0:0x01c0];\n            var0 = (temp62 + 0x1f) - temp62 - 0x01 % 0x20;\n            var1 = 0x0260;\n            var temp63 = memory[0x01a0:0x01c0];\n            memory[var1:var1 + 0x20] = temp63;\n            var2 = temp63 + 0x80;\n        \n            if (memory[0x0260:0x0280] > var0) { goto label_013A; }\n        \n        label_013E:\n            memory[memory[0x0260:0x0280] + 0x01c0:memory[0x0260:0x0280] + 0x01c0 + 0x01] = 0x00;\n            var temp64 = var1;\n            var temp65 = memory[temp64:temp64 + 0x20] + 0x01;\n            memory[temp64:temp64 + 0x20] = temp65;\n        \n            if (var2 == temp65) { goto label_015A; }\n        \n            if (memory[0x0260:0x0280] <= var0) { goto label_013E; }\n        \n        label_013A:\n        \n        label_015A:\n            memory[0x0180:0x01a0] = 0x20;\n            var temp66 = memory[0x01a0:0x01c0] + 0x40;\n            return memory[0x0180:0x0180 + (temp66 + 0x1f) - temp66 - 0x01 % 0x20];\n        } else if (memory[0x00:0x20] == 0xe5e01c11) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x0200] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0xa0];\n        \n            if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x80) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x0160;\n            var1 = var0;\n            memory[0xc0:0xe0] = 0x04;\n            var2 = keccak256(memory[0xc0:0xe0]);\n            var temp56 = memory[var1:var1 + 0x20] + 0x20;\n            var3 = temp56;\n            var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var5 = 0x05;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_01ED; }\n        \n        label_01F1:\n            storage[var2 + memory[0x0120:0x0140]] = memory[var1 + memory[0x0120:0x0140] * 0x20:var1 + memory[0x0120:0x0140] * 0x20 + 0x20];\n            var temp57 = var4;\n            var temp58 = memory[temp57:temp57 + 0x20] + 0x01;\n            memory[temp57:temp57 + 0x20] = temp58;\n        \n            if (var5 == temp58) { stop(); }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_01F1; }\n        \n        label_01ED:\n            stop();\n        } else if (memory[0x00:0x20] != 0x1c02708d) {\n            if (memory[0x00:0x20] == 0x4f6ccce7) {\n                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                if (memory[0x0140:0x0160] >= storage[0x02]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = memory[0x0140:0x0160];\n                return memory[0x00:0x20];\n            } else if (memory[0x00:0x20] == 0x2f745c59) {\n                memory[0x0140:0x0180] = msg.data[0x04:0x44];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n            \n                if (memory[0x0160:0x0180] >= storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0a;\n                var temp55 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = temp55;\n                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                return memory[0x00:0x20];\n            } else if (0x00) {\n                // Error: StackRead before write???\n                var var-4;\n                // Error: StackRead before write???\n                var var-2;\n                // Error: StackRead before write???\n                var var-1;\n                // Error: StackRead before write???\n                var var-3;\n                // Error: StackRead before write???\n                var var-5;\n                memory[0x01c0:0x01e0] = var-1;\n                memory[0x0140:0x0160] = var-2;\n                memory[0x0160:0x0180] = var-3;\n                memory[0x0180:0x01a0] = var-4;\n                memory[0x01a0:0x01c0] = var-5;\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x05;\n                memory[0x01e0:0x0200] = storage[keccak256(memory[0xc0:0x0100])];\n            \n                if (!((memory[0x01e0:0x0200] == memory[0x0140:0x0160]) & (memory[0x0160:0x0180] != 0x00))) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0200:0x0220] = memory[0x01a0:0x01c0] == memory[0x01e0:0x0200];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x07;\n                memory[0x0220:0x0240] = memory[0x01a0:0x01c0] == storage[keccak256(memory[0xc0:0x0100])];\n                memory[0xe0:0x0100] = memory[0x01e0:0x0200];\n                memory[0xc0:0xe0] = 0x08;\n                var temp38 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x01a0:0x01c0];\n                memory[0xc0:0xe0] = temp38;\n                memory[0x0240:0x0260] = storage[keccak256(memory[0xc0:0x0100])];\n            \n                if (!(memory[0x0240:0x0260] | memory[0x0200:0x0220] | memory[0x0220:0x0240])) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n            \n                if (storage[keccak256(memory[0xc0:0x0100])] < 0x01) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n                memory[0x0260:0x0280] = storage[keccak256(memory[0xc0:0x0100])] - 0x01;\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x0b;\n                memory[0x0280:0x02a0] = storage[keccak256(memory[0xc0:0x0100])];\n            \n                if (memory[0x0260:0x0280] != memory[0x0280:0x02a0]) {\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp39 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                    memory[0xc0:0xe0] = temp39;\n                    var temp40 = storage[keccak256(memory[0xc0:0x0100])];\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp41 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0280:0x02a0];\n                    memory[0xc0:0xe0] = temp41;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp40;\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp42 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                    memory[0xc0:0xe0] = temp42;\n                    storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x06;\n                    memory[0x02a0:0x02c0] = storage[keccak256(memory[0xc0:0x0100])];\n                    var temp43 = memory[0x0180:0x01a0];\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp44 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x02a0:0x02c0];\n                    memory[0xc0:0xe0] = temp44;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp43;\n                    var temp45 = memory[0x02a0:0x02c0];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x0b;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp45;\n                    var temp46 = memory[0x0160:0x0180];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x05;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp46;\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x06;\n                    var-5 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var-5] < 0x01) { revert(memory[0x00:0x00]); }\n                \n                label_0518:\n                    var temp47 = var-5;\n                    storage[temp47] = storage[temp47] - 0x01;\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x06;\n                    var temp48 = keccak256(memory[0xc0:0x0100]);\n                    var-5 = temp48;\n                \n                    if (storage[var-5] + 0x01 < storage[var-5]) { revert(memory[0x00:0x00]); }\n                \n                    var temp49 = var-5;\n                    storage[temp49] = storage[temp49] + 0x01;\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x07;\n                \n                    if (storage[keccak256(memory[0xc0:0x0100])] == 0x00) {\n                        log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180], memory[0x0180:0x01a0]]);\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                        memory[0xc0:0xe0] = 0x07;\n                        storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                        log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180], memory[0x0180:0x01a0]]);\n                        // Error: Could not resolve jump destination!\n                    }\n                } else {\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp50 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                    memory[0xc0:0xe0] = temp50;\n                    storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x06;\n                    memory[0x02a0:0x02c0] = storage[keccak256(memory[0xc0:0x0100])];\n                    var temp51 = memory[0x0180:0x01a0];\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp52 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x02a0:0x02c0];\n                    memory[0xc0:0xe0] = temp52;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp51;\n                    var temp53 = memory[0x02a0:0x02c0];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x0b;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp53;\n                    var temp54 = memory[0x0160:0x0180];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x05;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp54;\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x06;\n                    var-5 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var-5] >= 0x01) { goto label_0518; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else if (memory[0x00:0x20] == 0x23b872dd) {\n                memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x24:0x44];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[0x0140:0x0160];\n                var1 = memory[0x0160:0x0180];\n                var2 = memory[0x0180:0x01a0];\n                memory[0x01a0:0x01c0] = 0x092863fe;\n                memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                memory[0x01e0:0x0200] = memory[0x0160:0x0180];\n                memory[0x0200:0x0220] = memory[0x0180:0x01a0];\n                memory[0x0220:0x0240] = msg.sender;\n                var3 = memory[0x0220:0x0240];\n                var4 = memory[0x0200:0x0220];\n                var5 = memory[0x01e0:0x0200];\n                var6 = memory[0x01c0:0x01e0];\n                var7 = 0x06;\n                // Unhandled termination\n            } else if (memory[0x00:0x20] == 0x42842e0e) {\n                memory[0x0600:0x0620] = 0x00;\n                var0 = 0x0600;\n                var temp36 = memory[var0:var0 + 0x20] + 0x20;\n                var1 = temp36;\n                var temp37;\n                temp37, memory[0x01c0:0x01c0 + var1] = address(0x04).call.gas(var1 / 0x0a + 0x12)(memory[var0:var0 + var1]);\n            \n                if (temp37) { goto label_06DF; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (memory[0x00:0x20] == 0xb88d4fde) {\n                memory[0x01c0:0x05e0] = msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x0420];\n            \n                if (msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x20] > 0x0400) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01c0:0x0600] = msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x0440];\n                goto label_06DF;\n            } else if (0x00) {\n            label_06DF:\n                memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x24:0x44];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[0x0140:0x0160];\n                var1 = memory[0x0160:0x0180];\n                var2 = memory[0x0180:0x01a0];\n                var3 = memory[0x01a0:0x01c0];\n                var4 = memory[0x01c0:0x01e0];\n                var5 = memory[0x01e0:0x0200];\n                var var6 = memory[0x0200:0x0220];\n                var var7 = memory[0x0220:0x0240];\n                var var8 = memory[0x0240:0x0260];\n                var var9 = memory[0x0260:0x0280];\n                var var10 = memory[0x0280:0x02a0];\n                var var11 = memory[0x02a0:0x02c0];\n                var var12 = memory[0x02c0:0x02e0];\n                var var13 = memory[0x02e0:0x0300];\n                var var14 = memory[0x0300:0x0320];\n                var var15 = memory[0x0320:0x0340];\n                var var16 = memory[0x0340:0x0360];\n                var var17 = memory[0x0360:0x0380];\n                var var18 = memory[0x0380:0x03a0];\n                var var19 = memory[0x03a0:0x03c0];\n                var var20 = memory[0x03c0:0x03e0];\n                var var21 = memory[0x03e0:0x0400];\n                var var22 = memory[0x0400:0x0420];\n                var var23 = memory[0x0420:0x0440];\n                var var24 = memory[0x0440:0x0460];\n                var var25 = memory[0x0460:0x0480];\n                var var26 = memory[0x0480:0x04a0];\n                var var27 = memory[0x04a0:0x04c0];\n                var var28 = memory[0x04c0:0x04e0];\n                var var29 = memory[0x04e0:0x0500];\n                var var30 = memory[0x0500:0x0520];\n                var var31 = memory[0x0520:0x0540];\n                var var32 = memory[0x0540:0x0560];\n                var var33 = memory[0x0560:0x0580];\n                var var34 = memory[0x0580:0x05a0];\n                var var35 = memory[0x05a0:0x05c0];\n                var var36 = memory[0x05c0:0x05e0];\n                var var37 = memory[0x05e0:0x0600];\n                var var38 = memory[0x0600:0x0620];\n                var var39 = memory[0x0620:0x0640];\n                memory[0x0640:0x0660] = 0x092863fe;\n                memory[0x0660:0x0680] = memory[0x0140:0x0160];\n                memory[0x0680:0x06a0] = memory[0x0160:0x0180];\n                memory[0x06a0:0x06c0] = memory[0x0180:0x01a0];\n                memory[0x06c0:0x06e0] = msg.sender;\n                var var40 = memory[0x06c0:0x06e0];\n                var var41 = memory[0x06a0:0x06c0];\n                var var42 = memory[0x0680:0x06a0];\n                var var43 = memory[0x0660:0x0680];\n                var var44 = 0x06;\n                // Unhandled termination\n            } else if (memory[0x00:0x20] == 0x095ea7b3) {\n                memory[0x0140:0x0180] = msg.data[0x04:0x44];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x05;\n                memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0x0100])];\n                memory[0x01a0:0x01c0] = msg.sender == memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x08;\n                var temp34 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = msg.sender;\n                memory[0xc0:0xe0] = temp34;\n                memory[0x01c0:0x01e0] = storage[keccak256(memory[0xc0:0x0100])];\n            \n                if (!(memory[0x01a0:0x01c0] | memory[0x01c0:0x01e0])) { revert(memory[0x00:0x00]); }\n            \n                var temp35 = memory[0x0140:0x0160];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x07;\n                storage[keccak256(memory[0xc0:0x0100])] = temp35;\n                log(memory[0x00:0x00], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, memory[0x0180:0x01a0], memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n                stop();\n            } else if (memory[0x00:0x20] == 0xa22cb465) {\n                memory[0x0140:0x0180] = msg.data[0x04:0x44];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x24:0x44];\n            \n                if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n            \n                if (memory[0x0140:0x0160] == msg.sender) { revert(memory[0x00:0x00]); }\n            \n                var temp32 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = msg.sender;\n                memory[0xc0:0xe0] = 0x08;\n                var temp33 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = temp33;\n                storage[keccak256(memory[0xc0:0x0100])] = temp32;\n                memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n                log(memory[0x0180:0x01a0], [0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, msg.sender, memory[0x0140:0x0160]]);\n                stop();\n            } else if (memory[0x00:0x20] == 0x6a627842) {\n                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                if (!((msg.sender == storage[0x03]) & (memory[0x0140:0x0160] != 0x00))) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0160:0x0180] = storage[0x02];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n                memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0x0100])];\n                var temp25 = memory[0x0140:0x0160];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x05;\n                storage[keccak256(memory[0xc0:0x0100])] = temp25;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n                var temp26 = keccak256(memory[0xc0:0x0100]);\n                var0 = temp26;\n            \n                if (storage[var0] + 0x01 < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp27 = var0;\n                storage[temp27] = storage[temp27] + 0x01;\n                var temp28 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0a;\n                var temp29 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = temp29;\n                storage[keccak256(memory[0xc0:0x0100])] = temp28;\n                var temp30 = memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x0b;\n                storage[keccak256(memory[0xc0:0x0100])] = temp30;\n                var0 = 0x02;\n            \n                if (storage[var0] + 0x01 < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp31 = var0;\n                storage[temp31] = storage[temp31] + 0x01;\n                log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else if (memory[0x00:0x20] == 0x2c4d4d18) {\n                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n            \n                storage[0x03] = memory[0x0140:0x0160];\n                stop();\n            } else if (memory[0x00:0x20] != 0x06fdde03) {\n                if (memory[0x00:0x20] != 0x95d89b41) {\n                    if (memory[0x00:0x20] != 0x18160ddd) {\n                        if (memory[0x00:0x20] != 0x07546172) {\n                            if (memory[0x00:0x20] != 0x4e73a241) {\n                                if (memory[0x00:0x20] == 0x6352211e) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x05;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0x70a08231) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x06;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0x081812fc) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x07;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0xe985e9c5) {\n                                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    var var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x24:0x44];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x08;\n                                    var temp0 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                    memory[0xc0:0xe0] = temp0;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] != 0xf1753550) { revert(memory[0x00:0x00]); }\n                                else {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x09;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                }\n                            } else if (!msg.value) {\n                                var0 = 0x04;\n                                memory[0xc0:0xe0] = var0;\n                                var var1 = keccak256(memory[0xc0:0xe0]);\n                                var var2 = 0x0180;\n                                var temp1 = storage[var1] + 0x20;\n                                var var3 = temp1;\n                                var var4 = 0x0120;\n                                memory[var4:var4 + 0x20] = 0x00;\n                                var var5 = 0x05;\n                            \n                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0EC2; }\n                            \n                            label_0EC6:\n                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                var temp2 = var4;\n                                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                                memory[temp2:temp2 + 0x20] = temp3;\n                            \n                                if (var5 == temp3) { goto label_0EE8; }\n                            \n                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0EC6; }\n                            \n                            label_0EC2:\n                            \n                            label_0EE8:\n                                var temp4 = memory[0x0180:0x01a0];\n                                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                                var1 = 0x0240;\n                                var temp5 = memory[0x0180:0x01a0];\n                                memory[var1:var1 + 0x20] = temp5;\n                                var2 = temp5 + 0x80;\n                            \n                                if (memory[0x0240:0x0260] > var0) { goto label_0F1A; }\n                            \n                            label_0F1E:\n                                memory[memory[0x0240:0x0260] + 0x01a0:memory[0x0240:0x0260] + 0x01a0 + 0x01] = 0x00;\n                                var temp6 = var1;\n                                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                                memory[temp6:temp6 + 0x20] = temp7;\n                            \n                                if (var2 == temp7) { goto label_0F3A; }\n                            \n                                if (memory[0x0240:0x0260] <= var0) { goto label_0F1E; }\n                            \n                            label_0F1A:\n                            \n                            label_0F3A:\n                                memory[0x0160:0x0180] = 0x20;\n                                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x03];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x02];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = 0x01;\n                    memory[0xc0:0xe0] = var0;\n                    var1 = keccak256(memory[0xc0:0xe0]);\n                    var2 = 0x0180;\n                    var temp9 = storage[var1] + 0x20;\n                    var3 = temp9;\n                    var4 = 0x0120;\n                    memory[var4:var4 + 0x20] = 0x00;\n                    var5 = 0x02;\n                \n                    if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0D93; }\n                \n                label_0D97:\n                    memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                    var temp10 = var4;\n                    var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n                    memory[temp10:temp10 + 0x20] = temp11;\n                \n                    if (var5 == temp11) { goto label_0DB9; }\n                \n                    if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0D97; }\n                \n                label_0D93:\n                \n                label_0DB9:\n                    var temp12 = memory[0x0180:0x01a0];\n                    var0 = (temp12 + 0x1f) - temp12 - 0x01 % 0x20;\n                    var1 = 0x01e0;\n                    var temp13 = memory[0x0180:0x01a0];\n                    memory[var1:var1 + 0x20] = temp13;\n                    var2 = temp13 + 0x20;\n                \n                    if (memory[0x01e0:0x0200] > var0) { goto label_0DEB; }\n                \n                label_0DEF:\n                    memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                    var temp14 = var1;\n                    var temp15 = memory[temp14:temp14 + 0x20] + 0x01;\n                    memory[temp14:temp14 + 0x20] = temp15;\n                \n                    if (var2 == temp15) { goto label_0E0B; }\n                \n                    if (memory[0x01e0:0x0200] <= var0) { goto label_0DEF; }\n                \n                label_0DEB:\n                \n                label_0E0B:\n                    memory[0x0160:0x0180] = 0x20;\n                    var temp16 = memory[0x0180:0x01a0] + 0x40;\n                    return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = 0x00;\n                memory[0xc0:0xe0] = var0;\n                var1 = keccak256(memory[0xc0:0xe0]);\n                var2 = 0x0180;\n                var temp17 = storage[var1] + 0x20;\n                var3 = temp17;\n                var4 = 0x0120;\n                memory[var4:var4 + 0x20] = 0x00;\n                var5 = 0x02;\n            \n                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0CB0; }\n            \n            label_0CB4:\n                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                var temp18 = var4;\n                var temp19 = memory[temp18:temp18 + 0x20] + 0x01;\n                memory[temp18:temp18 + 0x20] = temp19;\n            \n                if (var5 == temp19) { goto label_0CD6; }\n            \n                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0CB4; }\n            \n            label_0CB0:\n            \n            label_0CD6:\n                var temp20 = memory[0x0180:0x01a0];\n                var0 = (temp20 + 0x1f) - temp20 - 0x01 % 0x20;\n                var1 = 0x01e0;\n                var temp21 = memory[0x0180:0x01a0];\n                memory[var1:var1 + 0x20] = temp21;\n                var2 = temp21 + 0x20;\n            \n                if (memory[0x01e0:0x0200] > var0) { goto label_0D08; }\n            \n            label_0D0C:\n                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                var temp22 = var1;\n                var temp23 = memory[temp22:temp22 + 0x20] + 0x01;\n                memory[temp22:temp22 + 0x20] = temp23;\n            \n                if (var2 == temp23) { goto label_0D28; }\n            \n                if (memory[0x01e0:0x0200] <= var0) { goto label_0D0C; }\n            \n            label_0D08:\n            \n            label_0D28:\n                memory[0x0160:0x0180] = 0x20;\n                var temp24 = memory[0x0180:0x01a0] + 0x40;\n                return memory[0x0160:0x0160 + (temp24 + 0x1f) - temp24 - 0x01 % 0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) { selfdestruct(msg.sender); }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] == 0xc87b56dd) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x04;\n            memory[0xc0:0xe0] = var0;\n            var1 = keccak256(memory[0xc0:0xe0]);\n            var2 = 0x01a0;\n            var temp59 = storage[var1] + 0x20;\n            var3 = temp59;\n            var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var5 = 0x05;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_00E2; }\n        \n        label_00E6:\n            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n            var temp60 = var4;\n            var temp61 = memory[temp60:temp60 + 0x20] + 0x01;\n            memory[temp60:temp60 + 0x20] = temp61;\n        \n            if (var5 == temp61) { goto label_0108; }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_00E6; }\n        \n        label_00E2:\n        \n        label_0108:\n            var temp62 = memory[0x01a0:0x01c0];\n            var0 = (temp62 + 0x1f) - temp62 - 0x01 % 0x20;\n            var1 = 0x0260;\n            var temp63 = memory[0x01a0:0x01c0];\n            memory[var1:var1 + 0x20] = temp63;\n            var2 = temp63 + 0x80;\n        \n            if (memory[0x0260:0x0280] > var0) { goto label_013A; }\n        \n        label_013E:\n            memory[memory[0x0260:0x0280] + 0x01c0:memory[0x0260:0x0280] + 0x01c0 + 0x01] = 0x00;\n            var temp64 = var1;\n            var temp65 = memory[temp64:temp64 + 0x20] + 0x01;\n            memory[temp64:temp64 + 0x20] = temp65;\n        \n            if (var2 == temp65) { goto label_015A; }\n        \n            if (memory[0x0260:0x0280] <= var0) { goto label_013E; }\n        \n        label_013A:\n        \n        label_015A:\n            memory[0x0180:0x01a0] = 0x20;\n            var temp66 = memory[0x01a0:0x01c0] + 0x40;\n            return memory[0x0180:0x0180 + (temp66 + 0x1f) - temp66 - 0x01 % 0x20];\n        } else if (memory[0x00:0x20] == 0xe5e01c11) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x0200] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0xa0];\n        \n            if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x80) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x0160;\n            var1 = var0;\n            memory[0xc0:0xe0] = 0x04;\n            var2 = keccak256(memory[0xc0:0xe0]);\n            var temp56 = memory[var1:var1 + 0x20] + 0x20;\n            var3 = temp56;\n            var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var5 = 0x05;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_01ED; }\n        \n        label_01F1:\n            storage[var2 + memory[0x0120:0x0140]] = memory[var1 + memory[0x0120:0x0140] * 0x20:var1 + memory[0x0120:0x0140] * 0x20 + 0x20];\n            var temp57 = var4;\n            var temp58 = memory[temp57:temp57 + 0x20] + 0x01;\n            memory[temp57:temp57 + 0x20] = temp58;\n        \n            if (var5 == temp58) { stop(); }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_01F1; }\n        \n        label_01ED:\n            stop();\n        } else if (memory[0x00:0x20] != 0x1c02708d) {\n            if (memory[0x00:0x20] == 0x4f6ccce7) {\n                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                if (memory[0x0140:0x0160] >= storage[0x02]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = memory[0x0140:0x0160];\n                return memory[0x00:0x20];\n            } else if (memory[0x00:0x20] == 0x2f745c59) {\n                memory[0x0140:0x0180] = msg.data[0x04:0x44];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n            \n                if (memory[0x0160:0x0180] >= storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0a;\n                var temp55 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = temp55;\n                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                return memory[0x00:0x20];\n            } else if (0x00) {\n                // Error: StackRead before write???\n                var var-4;\n                // Error: StackRead before write???\n                var var-2;\n                // Error: StackRead before write???\n                var var-1;\n                // Error: StackRead before write???\n                var var-3;\n                // Error: StackRead before write???\n                var var-5;\n                memory[0x01c0:0x01e0] = var-1;\n                memory[0x0140:0x0160] = var-2;\n                memory[0x0160:0x0180] = var-3;\n                memory[0x0180:0x01a0] = var-4;\n                memory[0x01a0:0x01c0] = var-5;\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x05;\n                memory[0x01e0:0x0200] = storage[keccak256(memory[0xc0:0x0100])];\n            \n                if (!((memory[0x01e0:0x0200] == memory[0x0140:0x0160]) & (memory[0x0160:0x0180] != 0x00))) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0200:0x0220] = memory[0x01a0:0x01c0] == memory[0x01e0:0x0200];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x07;\n                memory[0x0220:0x0240] = memory[0x01a0:0x01c0] == storage[keccak256(memory[0xc0:0x0100])];\n                memory[0xe0:0x0100] = memory[0x01e0:0x0200];\n                memory[0xc0:0xe0] = 0x08;\n                var temp38 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x01a0:0x01c0];\n                memory[0xc0:0xe0] = temp38;\n                memory[0x0240:0x0260] = storage[keccak256(memory[0xc0:0x0100])];\n            \n                if (!(memory[0x0240:0x0260] | memory[0x0200:0x0220] | memory[0x0220:0x0240])) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n            \n                if (storage[keccak256(memory[0xc0:0x0100])] < 0x01) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n                memory[0x0260:0x0280] = storage[keccak256(memory[0xc0:0x0100])] - 0x01;\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x0b;\n                memory[0x0280:0x02a0] = storage[keccak256(memory[0xc0:0x0100])];\n            \n                if (memory[0x0260:0x0280] != memory[0x0280:0x02a0]) {\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp39 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                    memory[0xc0:0xe0] = temp39;\n                    var temp40 = storage[keccak256(memory[0xc0:0x0100])];\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp41 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0280:0x02a0];\n                    memory[0xc0:0xe0] = temp41;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp40;\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp42 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                    memory[0xc0:0xe0] = temp42;\n                    storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x06;\n                    memory[0x02a0:0x02c0] = storage[keccak256(memory[0xc0:0x0100])];\n                    var temp43 = memory[0x0180:0x01a0];\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp44 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x02a0:0x02c0];\n                    memory[0xc0:0xe0] = temp44;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp43;\n                    var temp45 = memory[0x02a0:0x02c0];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x0b;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp45;\n                    var temp46 = memory[0x0160:0x0180];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x05;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp46;\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x06;\n                    var-5 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var-5] < 0x01) { revert(memory[0x00:0x00]); }\n                \n                label_0518:\n                    var temp47 = var-5;\n                    storage[temp47] = storage[temp47] - 0x01;\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x06;\n                    var temp48 = keccak256(memory[0xc0:0x0100]);\n                    var-5 = temp48;\n                \n                    if (storage[var-5] + 0x01 < storage[var-5]) { revert(memory[0x00:0x00]); }\n                \n                    var temp49 = var-5;\n                    storage[temp49] = storage[temp49] + 0x01;\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x07;\n                \n                    if (storage[keccak256(memory[0xc0:0x0100])] == 0x00) {\n                        log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180], memory[0x0180:0x01a0]]);\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                        memory[0xc0:0xe0] = 0x07;\n                        storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                        log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180], memory[0x0180:0x01a0]]);\n                        // Error: Could not resolve jump destination!\n                    }\n                } else {\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp50 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                    memory[0xc0:0xe0] = temp50;\n                    storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x06;\n                    memory[0x02a0:0x02c0] = storage[keccak256(memory[0xc0:0x0100])];\n                    var temp51 = memory[0x0180:0x01a0];\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp52 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x02a0:0x02c0];\n                    memory[0xc0:0xe0] = temp52;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp51;\n                    var temp53 = memory[0x02a0:0x02c0];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x0b;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp53;\n                    var temp54 = memory[0x0160:0x0180];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x05;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp54;\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x06;\n                    var-5 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var-5] >= 0x01) { goto label_0518; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else if (memory[0x00:0x20] == 0x23b872dd) {\n                memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x24:0x44];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[0x0140:0x0160];\n                var1 = memory[0x0160:0x0180];\n                var2 = memory[0x0180:0x01a0];\n                memory[0x01a0:0x01c0] = 0x092863fe;\n                memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                memory[0x01e0:0x0200] = memory[0x0160:0x0180];\n                memory[0x0200:0x0220] = memory[0x0180:0x01a0];\n                memory[0x0220:0x0240] = msg.sender;\n                var3 = memory[0x0220:0x0240];\n                var4 = memory[0x0200:0x0220];\n                var5 = memory[0x01e0:0x0200];\n                var6 = memory[0x01c0:0x01e0];\n                var7 = 0x06;\n                // Unhandled termination\n            } else if (memory[0x00:0x20] == 0x42842e0e) {\n                memory[0x0600:0x0620] = 0x00;\n                var0 = 0x0600;\n                var temp36 = memory[var0:var0 + 0x20] + 0x20;\n                var1 = temp36;\n                var temp37;\n                temp37, memory[0x01c0:0x01c0 + var1] = address(0x04).call.gas(var1 / 0x0a + 0x12)(memory[var0:var0 + var1]);\n            \n                if (temp37) { goto label_06DF; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (memory[0x00:0x20] == 0xb88d4fde) {\n                memory[0x01c0:0x05e0] = msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x0420];\n            \n                if (msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x20] > 0x0400) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01c0:0x0600] = msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x0440];\n                goto label_06DF;\n            } else if (0x00) {\n            label_06DF:\n                memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x24:0x44];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[0x0140:0x0160];\n                var1 = memory[0x0160:0x0180];\n                var2 = memory[0x0180:0x01a0];\n                var3 = memory[0x01a0:0x01c0];\n                var4 = memory[0x01c0:0x01e0];\n                var5 = memory[0x01e0:0x0200];\n                var var6 = memory[0x0200:0x0220];\n                var var7 = memory[0x0220:0x0240];\n                var var8 = memory[0x0240:0x0260];\n                var var9 = memory[0x0260:0x0280];\n                var var10 = memory[0x0280:0x02a0];\n                var var11 = memory[0x02a0:0x02c0];\n                var var12 = memory[0x02c0:0x02e0];\n                var var13 = memory[0x02e0:0x0300];\n                var var14 = memory[0x0300:0x0320];\n                var var15 = memory[0x0320:0x0340];\n                var var16 = memory[0x0340:0x0360];\n                var var17 = memory[0x0360:0x0380];\n                var var18 = memory[0x0380:0x03a0];\n                var var19 = memory[0x03a0:0x03c0];\n                var var20 = memory[0x03c0:0x03e0];\n                var var21 = memory[0x03e0:0x0400];\n                var var22 = memory[0x0400:0x0420];\n                var var23 = memory[0x0420:0x0440];\n                var var24 = memory[0x0440:0x0460];\n                var var25 = memory[0x0460:0x0480];\n                var var26 = memory[0x0480:0x04a0];\n                var var27 = memory[0x04a0:0x04c0];\n                var var28 = memory[0x04c0:0x04e0];\n                var var29 = memory[0x04e0:0x0500];\n                var var30 = memory[0x0500:0x0520];\n                var var31 = memory[0x0520:0x0540];\n                var var32 = memory[0x0540:0x0560];\n                var var33 = memory[0x0560:0x0580];\n                var var34 = memory[0x0580:0x05a0];\n                var var35 = memory[0x05a0:0x05c0];\n                var var36 = memory[0x05c0:0x05e0];\n                var var37 = memory[0x05e0:0x0600];\n                var var38 = memory[0x0600:0x0620];\n                var var39 = memory[0x0620:0x0640];\n                memory[0x0640:0x0660] = 0x092863fe;\n                memory[0x0660:0x0680] = memory[0x0140:0x0160];\n                memory[0x0680:0x06a0] = memory[0x0160:0x0180];\n                memory[0x06a0:0x06c0] = memory[0x0180:0x01a0];\n                memory[0x06c0:0x06e0] = msg.sender;\n                var var40 = memory[0x06c0:0x06e0];\n                var var41 = memory[0x06a0:0x06c0];\n                var var42 = memory[0x0680:0x06a0];\n                var var43 = memory[0x0660:0x0680];\n                var var44 = 0x06;\n                // Unhandled termination\n            } else if (memory[0x00:0x20] == 0x095ea7b3) {\n                memory[0x0140:0x0180] = msg.data[0x04:0x44];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x05;\n                memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0x0100])];\n                memory[0x01a0:0x01c0] = msg.sender == memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x08;\n                var temp34 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = msg.sender;\n                memory[0xc0:0xe0] = temp34;\n                memory[0x01c0:0x01e0] = storage[keccak256(memory[0xc0:0x0100])];\n            \n                if (!(memory[0x01a0:0x01c0] | memory[0x01c0:0x01e0])) { revert(memory[0x00:0x00]); }\n            \n                var temp35 = memory[0x0140:0x0160];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x07;\n                storage[keccak256(memory[0xc0:0x0100])] = temp35;\n                log(memory[0x00:0x00], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, memory[0x0180:0x01a0], memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n                stop();\n            } else if (memory[0x00:0x20] == 0xa22cb465) {\n                memory[0x0140:0x0180] = msg.data[0x04:0x44];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x24:0x44];\n            \n                if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n            \n                if (memory[0x0140:0x0160] == msg.sender) { revert(memory[0x00:0x00]); }\n            \n                var temp32 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = msg.sender;\n                memory[0xc0:0xe0] = 0x08;\n                var temp33 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = temp33;\n                storage[keccak256(memory[0xc0:0x0100])] = temp32;\n                memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n                log(memory[0x0180:0x01a0], [0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, msg.sender, memory[0x0140:0x0160]]);\n                stop();\n            } else if (memory[0x00:0x20] == 0x6a627842) {\n                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                if (!((msg.sender == storage[0x03]) & (memory[0x0140:0x0160] != 0x00))) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0160:0x0180] = storage[0x02];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n                memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0x0100])];\n                var temp25 = memory[0x0140:0x0160];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x05;\n                storage[keccak256(memory[0xc0:0x0100])] = temp25;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n                var temp26 = keccak256(memory[0xc0:0x0100]);\n                var0 = temp26;\n            \n                if (storage[var0] + 0x01 < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp27 = var0;\n                storage[temp27] = storage[temp27] + 0x01;\n                var temp28 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0a;\n                var temp29 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = temp29;\n                storage[keccak256(memory[0xc0:0x0100])] = temp28;\n                var temp30 = memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x0b;\n                storage[keccak256(memory[0xc0:0x0100])] = temp30;\n                var0 = 0x02;\n            \n                if (storage[var0] + 0x01 < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp31 = var0;\n                storage[temp31] = storage[temp31] + 0x01;\n                log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else if (memory[0x00:0x20] == 0x2c4d4d18) {\n                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n            \n                storage[0x03] = memory[0x0140:0x0160];\n                stop();\n            } else if (memory[0x00:0x20] != 0x06fdde03) {\n                if (memory[0x00:0x20] != 0x95d89b41) {\n                    if (memory[0x00:0x20] != 0x18160ddd) {\n                        if (memory[0x00:0x20] != 0x07546172) {\n                            if (memory[0x00:0x20] != 0x4e73a241) {\n                                if (memory[0x00:0x20] == 0x6352211e) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x05;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0x70a08231) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x06;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0x081812fc) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x07;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0xe985e9c5) {\n                                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    var var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x24:0x44];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x08;\n                                    var temp0 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                    memory[0xc0:0xe0] = temp0;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] != 0xf1753550) { revert(memory[0x00:0x00]); }\n                                else {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x09;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                }\n                            } else if (!msg.value) {\n                                var0 = 0x04;\n                                memory[0xc0:0xe0] = var0;\n                                var var1 = keccak256(memory[0xc0:0xe0]);\n                                var var2 = 0x0180;\n                                var temp1 = storage[var1] + 0x20;\n                                var var3 = temp1;\n                                var var4 = 0x0120;\n                                memory[var4:var4 + 0x20] = 0x00;\n                                var var5 = 0x05;\n                            \n                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0EC2; }\n                            \n                            label_0EC6:\n                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                var temp2 = var4;\n                                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                                memory[temp2:temp2 + 0x20] = temp3;\n                            \n                                if (var5 == temp3) { goto label_0EE8; }\n                            \n                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0EC6; }\n                            \n                            label_0EC2:\n                            \n                            label_0EE8:\n                                var temp4 = memory[0x0180:0x01a0];\n                                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                                var1 = 0x0240;\n                                var temp5 = memory[0x0180:0x01a0];\n                                memory[var1:var1 + 0x20] = temp5;\n                                var2 = temp5 + 0x80;\n                            \n                                if (memory[0x0240:0x0260] > var0) { goto label_0F1A; }\n                            \n                            label_0F1E:\n                                memory[memory[0x0240:0x0260] + 0x01a0:memory[0x0240:0x0260] + 0x01a0 + 0x01] = 0x00;\n                                var temp6 = var1;\n                                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                                memory[temp6:temp6 + 0x20] = temp7;\n                            \n                                if (var2 == temp7) { goto label_0F3A; }\n                            \n                                if (memory[0x0240:0x0260] <= var0) { goto label_0F1E; }\n                            \n                            label_0F1A:\n                            \n                            label_0F3A:\n                                memory[0x0160:0x0180] = 0x20;\n                                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x03];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x02];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = 0x01;\n                    memory[0xc0:0xe0] = var0;\n                    var1 = keccak256(memory[0xc0:0xe0]);\n                    var2 = 0x0180;\n                    var temp9 = storage[var1] + 0x20;\n                    var3 = temp9;\n                    var4 = 0x0120;\n                    memory[var4:var4 + 0x20] = 0x00;\n                    var5 = 0x02;\n                \n                    if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0D93; }\n                \n                label_0D97:\n                    memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                    var temp10 = var4;\n                    var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n                    memory[temp10:temp10 + 0x20] = temp11;\n                \n                    if (var5 == temp11) { goto label_0DB9; }\n                \n                    if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0D97; }\n                \n                label_0D93:\n                \n                label_0DB9:\n                    var temp12 = memory[0x0180:0x01a0];\n                    var0 = (temp12 + 0x1f) - temp12 - 0x01 % 0x20;\n                    var1 = 0x01e0;\n                    var temp13 = memory[0x0180:0x01a0];\n                    memory[var1:var1 + 0x20] = temp13;\n                    var2 = temp13 + 0x20;\n                \n                    if (memory[0x01e0:0x0200] > var0) { goto label_0DEB; }\n                \n                label_0DEF:\n                    memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                    var temp14 = var1;\n                    var temp15 = memory[temp14:temp14 + 0x20] + 0x01;\n                    memory[temp14:temp14 + 0x20] = temp15;\n                \n                    if (var2 == temp15) { goto label_0E0B; }\n                \n                    if (memory[0x01e0:0x0200] <= var0) { goto label_0DEF; }\n                \n                label_0DEB:\n                \n                label_0E0B:\n                    memory[0x0160:0x0180] = 0x20;\n                    var temp16 = memory[0x0180:0x01a0] + 0x40;\n                    return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = 0x00;\n                memory[0xc0:0xe0] = var0;\n                var1 = keccak256(memory[0xc0:0xe0]);\n                var2 = 0x0180;\n                var temp17 = storage[var1] + 0x20;\n                var3 = temp17;\n                var4 = 0x0120;\n                memory[var4:var4 + 0x20] = 0x00;\n                var5 = 0x02;\n            \n                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0CB0; }\n            \n            label_0CB4:\n                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                var temp18 = var4;\n                var temp19 = memory[temp18:temp18 + 0x20] + 0x01;\n                memory[temp18:temp18 + 0x20] = temp19;\n            \n                if (var5 == temp19) { goto label_0CD6; }\n            \n                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0CB4; }\n            \n            label_0CB0:\n            \n            label_0CD6:\n                var temp20 = memory[0x0180:0x01a0];\n                var0 = (temp20 + 0x1f) - temp20 - 0x01 % 0x20;\n                var1 = 0x01e0;\n                var temp21 = memory[0x0180:0x01a0];\n                memory[var1:var1 + 0x20] = temp21;\n                var2 = temp21 + 0x20;\n            \n                if (memory[0x01e0:0x0200] > var0) { goto label_0D08; }\n            \n            label_0D0C:\n                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                var temp22 = var1;\n                var temp23 = memory[temp22:temp22 + 0x20] + 0x01;\n                memory[temp22:temp22 + 0x20] = temp23;\n            \n                if (var2 == temp23) { goto label_0D28; }\n            \n                if (memory[0x01e0:0x0200] <= var0) { goto label_0D0C; }\n            \n            label_0D08:\n            \n            label_0D28:\n                memory[0x0160:0x0180] = 0x20;\n                var temp24 = memory[0x0180:0x01a0] + 0x40;\n                return memory[0x0160:0x0160 + (temp24 + 0x1f) - temp24 - 0x01 % 0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) { selfdestruct(msg.sender); }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x1c:0x3c] = msg.data[0x00:0x20];\n        memory[0x20:0x40] = 0x010000000000000000000000000000000000000000;\n        memory[0x40:0x60] = 0x7fffffffffffffffffffffffffffffff;\n        memory[0x60:0x80] = 0xffffffffffffffffffffffffffffffff80000000000000000000000000000000;\n        memory[0x80:0xa0] = 0x012a05f1fffffffffffffffffffffffffdabf41c00;\n        memory[0xa0:0xc0] = 0xfffffffffffffffffffffffed5fa0e0000000000000000000000000000000000;\n    \n        if (memory[0x00:0x20] == 0xc87b56dd) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x04;\n            memory[0xc0:0xe0] = var0;\n            var1 = keccak256(memory[0xc0:0xe0]);\n            var2 = 0x01a0;\n            var temp59 = storage[var1] + 0x20;\n            var3 = temp59;\n            var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var5 = 0x05;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_00E2; }\n        \n        label_00E6:\n            memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n            var temp60 = var4;\n            var temp61 = memory[temp60:temp60 + 0x20] + 0x01;\n            memory[temp60:temp60 + 0x20] = temp61;\n        \n            if (var5 == temp61) { goto label_0108; }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_00E6; }\n        \n        label_00E2:\n        \n        label_0108:\n            var temp62 = memory[0x01a0:0x01c0];\n            var0 = (temp62 + 0x1f) - temp62 - 0x01 % 0x20;\n            var1 = 0x0260;\n            var temp63 = memory[0x01a0:0x01c0];\n            memory[var1:var1 + 0x20] = temp63;\n            var2 = temp63 + 0x80;\n        \n            if (memory[0x0260:0x0280] > var0) { goto label_013A; }\n        \n        label_013E:\n            memory[memory[0x0260:0x0280] + 0x01c0:memory[0x0260:0x0280] + 0x01c0 + 0x01] = 0x00;\n            var temp64 = var1;\n            var temp65 = memory[temp64:temp64 + 0x20] + 0x01;\n            memory[temp64:temp64 + 0x20] = temp65;\n        \n            if (var2 == temp65) { goto label_015A; }\n        \n            if (memory[0x0260:0x0280] <= var0) { goto label_013E; }\n        \n        label_013A:\n        \n        label_015A:\n            memory[0x0180:0x01a0] = 0x20;\n            var temp66 = memory[0x01a0:0x01c0] + 0x40;\n            return memory[0x0180:0x0180 + (temp66 + 0x1f) - temp66 - 0x01 % 0x20];\n        } else if (memory[0x00:0x20] == 0xe5e01c11) {\n            memory[0x0140:0x0160] = msg.data[0x04:0x24];\n        \n            if (msg.value) { revert(memory[0x00:0x00]); }\n        \n            memory[0x0160:0x0200] = msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0xa0];\n        \n            if (msg.data[msg.data[0x04:0x24] + 0x04:msg.data[0x04:0x24] + 0x04 + 0x20] > 0x80) { revert(memory[0x00:0x00]); }\n        \n            var0 = 0x0160;\n            var1 = var0;\n            memory[0xc0:0xe0] = 0x04;\n            var2 = keccak256(memory[0xc0:0xe0]);\n            var temp56 = memory[var1:var1 + 0x20] + 0x20;\n            var3 = temp56;\n            var4 = 0x0120;\n            memory[var4:var4 + 0x20] = 0x00;\n            var5 = 0x05;\n        \n            if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_01ED; }\n        \n        label_01F1:\n            storage[var2 + memory[0x0120:0x0140]] = memory[var1 + memory[0x0120:0x0140] * 0x20:var1 + memory[0x0120:0x0140] * 0x20 + 0x20];\n            var temp57 = var4;\n            var temp58 = memory[temp57:temp57 + 0x20] + 0x01;\n            memory[temp57:temp57 + 0x20] = temp58;\n        \n            if (var5 == temp58) { stop(); }\n        \n            if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_01F1; }\n        \n        label_01ED:\n            stop();\n        } else if (memory[0x00:0x20] != 0x1c02708d) {\n            if (memory[0x00:0x20] == 0x4f6ccce7) {\n                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                if (memory[0x0140:0x0160] >= storage[0x02]) { revert(memory[0x00:0x00]); }\n            \n                memory[0x00:0x20] = memory[0x0140:0x0160];\n                return memory[0x00:0x20];\n            } else if (memory[0x00:0x20] == 0x2f745c59) {\n                memory[0x0140:0x0180] = msg.data[0x04:0x44];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n            \n                if (memory[0x0160:0x0180] >= storage[keccak256(memory[0xc0:0x0100])]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0a;\n                var temp55 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = temp55;\n                memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                return memory[0x00:0x20];\n            } else if (0x00) {\n                // Error: StackRead before write???\n                var var-4;\n                // Error: StackRead before write???\n                var var-2;\n                // Error: StackRead before write???\n                var var-1;\n                // Error: StackRead before write???\n                var var-3;\n                // Error: StackRead before write???\n                var var-5;\n                memory[0x01c0:0x01e0] = var-1;\n                memory[0x0140:0x0160] = var-2;\n                memory[0x0160:0x0180] = var-3;\n                memory[0x0180:0x01a0] = var-4;\n                memory[0x01a0:0x01c0] = var-5;\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x05;\n                memory[0x01e0:0x0200] = storage[keccak256(memory[0xc0:0x0100])];\n            \n                if (!((memory[0x01e0:0x0200] == memory[0x0140:0x0160]) & (memory[0x0160:0x0180] != 0x00))) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0200:0x0220] = memory[0x01a0:0x01c0] == memory[0x01e0:0x0200];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x07;\n                memory[0x0220:0x0240] = memory[0x01a0:0x01c0] == storage[keccak256(memory[0xc0:0x0100])];\n                memory[0xe0:0x0100] = memory[0x01e0:0x0200];\n                memory[0xc0:0xe0] = 0x08;\n                var temp38 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x01a0:0x01c0];\n                memory[0xc0:0xe0] = temp38;\n                memory[0x0240:0x0260] = storage[keccak256(memory[0xc0:0x0100])];\n            \n                if (!(memory[0x0240:0x0260] | memory[0x0200:0x0220] | memory[0x0220:0x0240])) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n            \n                if (storage[keccak256(memory[0xc0:0x0100])] < 0x01) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n                memory[0x0260:0x0280] = storage[keccak256(memory[0xc0:0x0100])] - 0x01;\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x0b;\n                memory[0x0280:0x02a0] = storage[keccak256(memory[0xc0:0x0100])];\n            \n                if (memory[0x0260:0x0280] != memory[0x0280:0x02a0]) {\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp39 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                    memory[0xc0:0xe0] = temp39;\n                    var temp40 = storage[keccak256(memory[0xc0:0x0100])];\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp41 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0280:0x02a0];\n                    memory[0xc0:0xe0] = temp41;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp40;\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp42 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                    memory[0xc0:0xe0] = temp42;\n                    storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x06;\n                    memory[0x02a0:0x02c0] = storage[keccak256(memory[0xc0:0x0100])];\n                    var temp43 = memory[0x0180:0x01a0];\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp44 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x02a0:0x02c0];\n                    memory[0xc0:0xe0] = temp44;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp43;\n                    var temp45 = memory[0x02a0:0x02c0];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x0b;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp45;\n                    var temp46 = memory[0x0160:0x0180];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x05;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp46;\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x06;\n                    var-5 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var-5] < 0x01) { revert(memory[0x00:0x00]); }\n                \n                label_0518:\n                    var temp47 = var-5;\n                    storage[temp47] = storage[temp47] - 0x01;\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x06;\n                    var temp48 = keccak256(memory[0xc0:0x0100]);\n                    var-5 = temp48;\n                \n                    if (storage[var-5] + 0x01 < storage[var-5]) { revert(memory[0x00:0x00]); }\n                \n                    var temp49 = var-5;\n                    storage[temp49] = storage[temp49] + 0x01;\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x07;\n                \n                    if (storage[keccak256(memory[0xc0:0x0100])] == 0x00) {\n                        log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180], memory[0x0180:0x01a0]]);\n                        // Error: Could not resolve jump destination!\n                    } else {\n                        memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                        memory[0xc0:0xe0] = 0x07;\n                        storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                        log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, memory[0x0140:0x0160], memory[0x0160:0x0180], memory[0x0180:0x01a0]]);\n                        // Error: Could not resolve jump destination!\n                    }\n                } else {\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp50 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x0260:0x0280];\n                    memory[0xc0:0xe0] = temp50;\n                    storage[keccak256(memory[0xc0:0x0100])] = 0x00;\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x06;\n                    memory[0x02a0:0x02c0] = storage[keccak256(memory[0xc0:0x0100])];\n                    var temp51 = memory[0x0180:0x01a0];\n                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                    memory[0xc0:0xe0] = 0x0a;\n                    var temp52 = keccak256(memory[0xc0:0x0100]);\n                    memory[0xe0:0x0100] = memory[0x02a0:0x02c0];\n                    memory[0xc0:0xe0] = temp52;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp51;\n                    var temp53 = memory[0x02a0:0x02c0];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x0b;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp53;\n                    var temp54 = memory[0x0160:0x0180];\n                    memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                    memory[0xc0:0xe0] = 0x05;\n                    storage[keccak256(memory[0xc0:0x0100])] = temp54;\n                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                    memory[0xc0:0xe0] = 0x06;\n                    var-5 = keccak256(memory[0xc0:0x0100]);\n                \n                    if (storage[var-5] >= 0x01) { goto label_0518; }\n                    else { revert(memory[0x00:0x00]); }\n                }\n            } else if (memory[0x00:0x20] == 0x23b872dd) {\n                memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x24:0x44];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[0x0140:0x0160];\n                var1 = memory[0x0160:0x0180];\n                var2 = memory[0x0180:0x01a0];\n                memory[0x01a0:0x01c0] = 0x092863fe;\n                memory[0x01c0:0x01e0] = memory[0x0140:0x0160];\n                memory[0x01e0:0x0200] = memory[0x0160:0x0180];\n                memory[0x0200:0x0220] = memory[0x0180:0x01a0];\n                memory[0x0220:0x0240] = msg.sender;\n                var3 = memory[0x0220:0x0240];\n                var4 = memory[0x0200:0x0220];\n                var5 = memory[0x01e0:0x0200];\n                var6 = memory[0x01c0:0x01e0];\n                var7 = 0x06;\n                // Unhandled termination\n            } else if (memory[0x00:0x20] == 0x42842e0e) {\n                memory[0x0600:0x0620] = 0x00;\n                var0 = 0x0600;\n                var temp36 = memory[var0:var0 + 0x20] + 0x20;\n                var1 = temp36;\n                var temp37;\n                temp37, memory[0x01c0:0x01c0 + var1] = address(0x04).call.gas(var1 / 0x0a + 0x12)(memory[var0:var0 + var1]);\n            \n                if (temp37) { goto label_06DF; }\n                else { revert(memory[0x00:0x00]); }\n            } else if (memory[0x00:0x20] == 0xb88d4fde) {\n                memory[0x01c0:0x05e0] = msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x0420];\n            \n                if (msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x20] > 0x0400) { revert(memory[0x00:0x00]); }\n            \n                memory[0x01c0:0x0600] = msg.data[msg.data[0x64:0x84] + 0x04:msg.data[0x64:0x84] + 0x04 + 0x0440];\n                goto label_06DF;\n            } else if (0x00) {\n            label_06DF:\n                memory[0x0140:0x01a0] = msg.data[0x04:0x64];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x24:0x44];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = memory[0x0140:0x0160];\n                var1 = memory[0x0160:0x0180];\n                var2 = memory[0x0180:0x01a0];\n                var3 = memory[0x01a0:0x01c0];\n                var4 = memory[0x01c0:0x01e0];\n                var5 = memory[0x01e0:0x0200];\n                var var6 = memory[0x0200:0x0220];\n                var var7 = memory[0x0220:0x0240];\n                var var8 = memory[0x0240:0x0260];\n                var var9 = memory[0x0260:0x0280];\n                var var10 = memory[0x0280:0x02a0];\n                var var11 = memory[0x02a0:0x02c0];\n                var var12 = memory[0x02c0:0x02e0];\n                var var13 = memory[0x02e0:0x0300];\n                var var14 = memory[0x0300:0x0320];\n                var var15 = memory[0x0320:0x0340];\n                var var16 = memory[0x0340:0x0360];\n                var var17 = memory[0x0360:0x0380];\n                var var18 = memory[0x0380:0x03a0];\n                var var19 = memory[0x03a0:0x03c0];\n                var var20 = memory[0x03c0:0x03e0];\n                var var21 = memory[0x03e0:0x0400];\n                var var22 = memory[0x0400:0x0420];\n                var var23 = memory[0x0420:0x0440];\n                var var24 = memory[0x0440:0x0460];\n                var var25 = memory[0x0460:0x0480];\n                var var26 = memory[0x0480:0x04a0];\n                var var27 = memory[0x04a0:0x04c0];\n                var var28 = memory[0x04c0:0x04e0];\n                var var29 = memory[0x04e0:0x0500];\n                var var30 = memory[0x0500:0x0520];\n                var var31 = memory[0x0520:0x0540];\n                var var32 = memory[0x0540:0x0560];\n                var var33 = memory[0x0560:0x0580];\n                var var34 = memory[0x0580:0x05a0];\n                var var35 = memory[0x05a0:0x05c0];\n                var var36 = memory[0x05c0:0x05e0];\n                var var37 = memory[0x05e0:0x0600];\n                var var38 = memory[0x0600:0x0620];\n                var var39 = memory[0x0620:0x0640];\n                memory[0x0640:0x0660] = 0x092863fe;\n                memory[0x0660:0x0680] = memory[0x0140:0x0160];\n                memory[0x0680:0x06a0] = memory[0x0160:0x0180];\n                memory[0x06a0:0x06c0] = memory[0x0180:0x01a0];\n                memory[0x06c0:0x06e0] = msg.sender;\n                var var40 = memory[0x06c0:0x06e0];\n                var var41 = memory[0x06a0:0x06c0];\n                var var42 = memory[0x0680:0x06a0];\n                var var43 = memory[0x0660:0x0680];\n                var var44 = 0x06;\n                // Unhandled termination\n            } else if (memory[0x00:0x20] == 0x095ea7b3) {\n                memory[0x0140:0x0180] = msg.data[0x04:0x44];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x05;\n                memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0x0100])];\n                memory[0x01a0:0x01c0] = msg.sender == memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = 0x08;\n                var temp34 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = msg.sender;\n                memory[0xc0:0xe0] = temp34;\n                memory[0x01c0:0x01e0] = storage[keccak256(memory[0xc0:0x0100])];\n            \n                if (!(memory[0x01a0:0x01c0] | memory[0x01c0:0x01e0])) { revert(memory[0x00:0x00]); }\n            \n                var temp35 = memory[0x0140:0x0160];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x07;\n                storage[keccak256(memory[0xc0:0x0100])] = temp35;\n                log(memory[0x00:0x00], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, memory[0x0180:0x01a0], memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n                stop();\n            } else if (memory[0x00:0x20] == 0xa22cb465) {\n                memory[0x0140:0x0180] = msg.data[0x04:0x44];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x24:0x44];\n            \n                if (var0 >= 0x02) { revert(memory[0x00:0x00]); }\n            \n                if (memory[0x0140:0x0160] == msg.sender) { revert(memory[0x00:0x00]); }\n            \n                var temp32 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = msg.sender;\n                memory[0xc0:0xe0] = 0x08;\n                var temp33 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = temp33;\n                storage[keccak256(memory[0xc0:0x0100])] = temp32;\n                memory[0x0180:0x01a0] = memory[0x0160:0x0180];\n                log(memory[0x0180:0x01a0], [0x17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31, msg.sender, memory[0x0140:0x0160]]);\n                stop();\n            } else if (memory[0x00:0x20] == 0x6a627842) {\n                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                if (!((msg.sender == storage[0x03]) & (memory[0x0140:0x0160] != 0x00))) { revert(memory[0x00:0x00]); }\n            \n                memory[0x0160:0x0180] = storage[0x02];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n                memory[0x0180:0x01a0] = storage[keccak256(memory[0xc0:0x0100])];\n                var temp25 = memory[0x0140:0x0160];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x05;\n                storage[keccak256(memory[0xc0:0x0100])] = temp25;\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x06;\n                var temp26 = keccak256(memory[0xc0:0x0100]);\n                var0 = temp26;\n            \n                if (storage[var0] + 0x01 < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp27 = var0;\n                storage[temp27] = storage[temp27] + 0x01;\n                var temp28 = memory[0x0160:0x0180];\n                memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                memory[0xc0:0xe0] = 0x0a;\n                var temp29 = keccak256(memory[0xc0:0x0100]);\n                memory[0xe0:0x0100] = memory[0x0180:0x01a0];\n                memory[0xc0:0xe0] = temp29;\n                storage[keccak256(memory[0xc0:0x0100])] = temp28;\n                var temp30 = memory[0x0180:0x01a0];\n                memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                memory[0xc0:0xe0] = 0x0b;\n                storage[keccak256(memory[0xc0:0x0100])] = temp30;\n                var0 = 0x02;\n            \n                if (storage[var0] + 0x01 < storage[var0]) { revert(memory[0x00:0x00]); }\n            \n                var temp31 = var0;\n                storage[temp31] = storage[temp31] + 0x01;\n                log(memory[0x00:0x00], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, memory[0x0140:0x0160], memory[0x0160:0x0180]]);\n                memory[0x00:0x20] = 0x01;\n                return memory[0x00:0x20];\n            } else if (memory[0x00:0x20] == 0x2c4d4d18) {\n                memory[0x0140:0x0160] = msg.data[0x04:0x24];\n            \n                if (msg.value) { revert(memory[0x00:0x00]); }\n            \n                var0 = msg.data[0x04:0x24];\n            \n                if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n            \n                if (msg.sender != storage[0x03]) { revert(memory[0x00:0x00]); }\n            \n                storage[0x03] = memory[0x0140:0x0160];\n                stop();\n            } else if (memory[0x00:0x20] != 0x06fdde03) {\n                if (memory[0x00:0x20] != 0x95d89b41) {\n                    if (memory[0x00:0x20] != 0x18160ddd) {\n                        if (memory[0x00:0x20] != 0x07546172) {\n                            if (memory[0x00:0x20] != 0x4e73a241) {\n                                if (memory[0x00:0x20] == 0x6352211e) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x05;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0x70a08231) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x06;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0x081812fc) {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x07;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] == 0xe985e9c5) {\n                                    memory[0x0140:0x0180] = msg.data[0x04:0x44];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    var var0 = msg.data[0x04:0x24];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    var0 = msg.data[0x24:0x44];\n                                \n                                    if (var0 >= memory[0x20:0x40]) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x08;\n                                    var temp0 = keccak256(memory[0xc0:0x0100]);\n                                    memory[0xe0:0x0100] = memory[0x0160:0x0180];\n                                    memory[0xc0:0xe0] = temp0;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                } else if (memory[0x00:0x20] != 0xf1753550) { revert(memory[0x00:0x00]); }\n                                else {\n                                    memory[0x0140:0x0160] = msg.data[0x04:0x24];\n                                \n                                    if (msg.value) { revert(memory[0x00:0x00]); }\n                                \n                                    memory[0xe0:0x0100] = memory[0x0140:0x0160];\n                                    memory[0xc0:0xe0] = 0x09;\n                                    memory[0x00:0x20] = storage[keccak256(memory[0xc0:0x0100])];\n                                    return memory[0x00:0x20];\n                                }\n                            } else if (!msg.value) {\n                                var0 = 0x04;\n                                memory[0xc0:0xe0] = var0;\n                                var var1 = keccak256(memory[0xc0:0xe0]);\n                                var var2 = 0x0180;\n                                var temp1 = storage[var1] + 0x20;\n                                var var3 = temp1;\n                                var var4 = 0x0120;\n                                memory[var4:var4 + 0x20] = 0x00;\n                                var var5 = 0x05;\n                            \n                                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0EC2; }\n                            \n                            label_0EC6:\n                                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                                var temp2 = var4;\n                                var temp3 = memory[temp2:temp2 + 0x20] + 0x01;\n                                memory[temp2:temp2 + 0x20] = temp3;\n                            \n                                if (var5 == temp3) { goto label_0EE8; }\n                            \n                                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0EC6; }\n                            \n                            label_0EC2:\n                            \n                            label_0EE8:\n                                var temp4 = memory[0x0180:0x01a0];\n                                var0 = (temp4 + 0x1f) - temp4 - 0x01 % 0x20;\n                                var1 = 0x0240;\n                                var temp5 = memory[0x0180:0x01a0];\n                                memory[var1:var1 + 0x20] = temp5;\n                                var2 = temp5 + 0x80;\n                            \n                                if (memory[0x0240:0x0260] > var0) { goto label_0F1A; }\n                            \n                            label_0F1E:\n                                memory[memory[0x0240:0x0260] + 0x01a0:memory[0x0240:0x0260] + 0x01a0 + 0x01] = 0x00;\n                                var temp6 = var1;\n                                var temp7 = memory[temp6:temp6 + 0x20] + 0x01;\n                                memory[temp6:temp6 + 0x20] = temp7;\n                            \n                                if (var2 == temp7) { goto label_0F3A; }\n                            \n                                if (memory[0x0240:0x0260] <= var0) { goto label_0F1E; }\n                            \n                            label_0F1A:\n                            \n                            label_0F3A:\n                                memory[0x0160:0x0180] = 0x20;\n                                var temp8 = memory[0x0180:0x01a0] + 0x40;\n                                return memory[0x0160:0x0160 + (temp8 + 0x1f) - temp8 - 0x01 % 0x20];\n                            } else { revert(memory[0x00:0x00]); }\n                        } else if (!msg.value) {\n                            memory[0x00:0x20] = storage[0x03];\n                            return memory[0x00:0x20];\n                        } else { revert(memory[0x00:0x00]); }\n                    } else if (!msg.value) {\n                        memory[0x00:0x20] = storage[0x02];\n                        return memory[0x00:0x20];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (!msg.value) {\n                    var0 = 0x01;\n                    memory[0xc0:0xe0] = var0;\n                    var1 = keccak256(memory[0xc0:0xe0]);\n                    var2 = 0x0180;\n                    var temp9 = storage[var1] + 0x20;\n                    var3 = temp9;\n                    var4 = 0x0120;\n                    memory[var4:var4 + 0x20] = 0x00;\n                    var5 = 0x02;\n                \n                    if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0D93; }\n                \n                label_0D97:\n                    memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                    var temp10 = var4;\n                    var temp11 = memory[temp10:temp10 + 0x20] + 0x01;\n                    memory[temp10:temp10 + 0x20] = temp11;\n                \n                    if (var5 == temp11) { goto label_0DB9; }\n                \n                    if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0D97; }\n                \n                label_0D93:\n                \n                label_0DB9:\n                    var temp12 = memory[0x0180:0x01a0];\n                    var0 = (temp12 + 0x1f) - temp12 - 0x01 % 0x20;\n                    var1 = 0x01e0;\n                    var temp13 = memory[0x0180:0x01a0];\n                    memory[var1:var1 + 0x20] = temp13;\n                    var2 = temp13 + 0x20;\n                \n                    if (memory[0x01e0:0x0200] > var0) { goto label_0DEB; }\n                \n                label_0DEF:\n                    memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                    var temp14 = var1;\n                    var temp15 = memory[temp14:temp14 + 0x20] + 0x01;\n                    memory[temp14:temp14 + 0x20] = temp15;\n                \n                    if (var2 == temp15) { goto label_0E0B; }\n                \n                    if (memory[0x01e0:0x0200] <= var0) { goto label_0DEF; }\n                \n                label_0DEB:\n                \n                label_0E0B:\n                    memory[0x0160:0x0180] = 0x20;\n                    var temp16 = memory[0x0180:0x01a0] + 0x40;\n                    return memory[0x0160:0x0160 + (temp16 + 0x1f) - temp16 - 0x01 % 0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (!msg.value) {\n                var0 = 0x00;\n                memory[0xc0:0xe0] = var0;\n                var1 = keccak256(memory[0xc0:0xe0]);\n                var2 = 0x0180;\n                var temp17 = storage[var1] + 0x20;\n                var3 = temp17;\n                var4 = 0x0120;\n                memory[var4:var4 + 0x20] = 0x00;\n                var5 = 0x02;\n            \n                if (memory[0x0120:0x0140] * 0x20 > var3) { goto label_0CB0; }\n            \n            label_0CB4:\n                memory[var2 + memory[0x0120:0x0140] * 0x20:var2 + memory[0x0120:0x0140] * 0x20 + 0x20] = storage[var1 + memory[0x0120:0x0140]];\n                var temp18 = var4;\n                var temp19 = memory[temp18:temp18 + 0x20] + 0x01;\n                memory[temp18:temp18 + 0x20] = temp19;\n            \n                if (var5 == temp19) { goto label_0CD6; }\n            \n                if (memory[0x0120:0x0140] * 0x20 <= var3) { goto label_0CB4; }\n            \n            label_0CB0:\n            \n            label_0CD6:\n                var temp20 = memory[0x0180:0x01a0];\n                var0 = (temp20 + 0x1f) - temp20 - 0x01 % 0x20;\n                var1 = 0x01e0;\n                var temp21 = memory[0x0180:0x01a0];\n                memory[var1:var1 + 0x20] = temp21;\n                var2 = temp21 + 0x20;\n            \n                if (memory[0x01e0:0x0200] > var0) { goto label_0D08; }\n            \n            label_0D0C:\n                memory[memory[0x01e0:0x0200] + 0x01a0:memory[0x01e0:0x0200] + 0x01a0 + 0x01] = 0x00;\n                var temp22 = var1;\n                var temp23 = memory[temp22:temp22 + 0x20] + 0x01;\n                memory[temp22:temp22 + 0x20] = temp23;\n            \n                if (var2 == temp23) { goto label_0D28; }\n            \n                if (memory[0x01e0:0x0200] <= var0) { goto label_0D0C; }\n            \n            label_0D08:\n            \n            label_0D28:\n                memory[0x0160:0x0180] = 0x20;\n                var temp24 = memory[0x0180:0x01a0] + 0x40;\n                return memory[0x0160:0x0160 + (temp24 + 0x1f) - temp24 - 0x01 % 0x20];\n            } else { revert(memory[0x00:0x00]); }\n        } else if (!msg.value) { selfdestruct(msg.sender); }\n        else { revert(memory[0x00:0x00]); }\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 22.236490488052368,
	"usage": {
		"completion_tokens": 347,
		"prompt_tokens": 12349,
		"total_tokens": 12696
	}
}