{
	"address": "0x7463c891a2b5b832f4a60dde07c8a3511a72d1b9",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is the Solidity equivalent of the given decompiled code:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Contract {\n    \n    mapping (address => uint) public balances;\n    mapping (address => mapping (address => uint)) public allowed;\n    uint public totalSupply;\n    \n    function transfer(address _to, uint _value) public returns (bool success) {\n        require(balances[msg.sender] >= _value);\n        balances[msg.sender] -= _value;\n        balances[_to] += _value;\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {\n        require(allowed[_from][msg.sender] >= _value);\n        require(balances[_from] >= _value);\n        balances[_from] -= _value;\n        balances[_to] += _value;\n        allowed[_from][msg.sender] -= _value;\n        return true;\n    }\n    \n    function approve(address _spender, uint _value) public returns (bool success) {\n        allowed[msg.sender][_spender] = _value;\n        return true;\n    }\n    \n    function allowance(address _owner, address _spender) public view returns (uint remaining) {\n        return allowed[_owner][_spender];\n    }\n}\n```\n\nPlease note that this is a very basic token contract in Solidity. The original bytecode might include additional features that are not covered in this high-level representation.",
				"role": "assistant"
			}
		}
	],
	"created": 1700631681,
	"id": "chatcmpl-8NaHB0fkSX1vwAv0Pxw0HHOzWPM2F",
	"input_format": "DecompiledCode",
	"ir": "contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x6a627842 > var0) {\n            if (0x23b872dd > var0) {\n                if (0x095ea7b3 > var0) {\n                    if (var0 == 0x022c0d9f) {\n                        // Dispatch table entry for swap(uint256,uint256,address,bytes)\n                        var var1 = 0x0257;\n                        var var2 = 0x04;\n                        var var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n                    \n                        swap(var2, var3);\n                        stop();\n                    } else if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                        var1 = 0x0261;\n                        var2 = name();\n                    \n                    label_0261:\n                        var temp0 = memory[0x40:0x60];\n                        memory[temp0:temp0 + 0x20] = 0x20;\n                        var temp1 = var2;\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                        var3 = temp0;\n                        var var4 = var3;\n                        var var5 = var4 + 0x40;\n                        var var6 = temp1 + 0x20;\n                        var var7 = memory[temp1:temp1 + 0x20];\n                        var var8 = var7;\n                        var var9 = var5;\n                        var var10 = var6;\n                        var var11 = 0x00;\n                    \n                        if (var11 >= var8) {\n                        label_029B:\n                            var temp2 = var7;\n                            var5 = temp2 + var5;\n                            var6 = temp2 & 0x1f;\n                        \n                            if (!var6) {\n                                var temp3 = memory[0x40:0x60];\n                                return memory[temp3:temp3 + var5 - temp3];\n                            } else {\n                                var temp4 = var6;\n                                var temp5 = var5 - temp4;\n                                memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                                var temp6 = memory[0x40:0x60];\n                                return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                            }\n                        } else {\n                        label_028C:\n                            var temp7 = var11;\n                            memory[temp7 + var9:temp7 + var9 + 0x20] = memory[temp7 + var10:temp7 + var10 + 0x20];\n                            var11 = temp7 + 0x20;\n                        \n                            if (var11 >= var8) { goto label_029B; }\n                            else { goto label_028C; }\n                        }\n                    } else if (var0 == 0x0902f1ac) {\n                        // Dispatch table entry for getReserves()\n                        var1 = 0x02de;\n                        var1, var2, var3 = getReserves();\n                        var temp8 = memory[0x40:0x60];\n                        memory[temp8:temp8 + 0x20] = var1 & 0xffffffffffffffffffffffffffff;\n                        memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = var2 & 0xffffffffffffffffffffffffffff;\n                        memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = var3 & 0xffffffff;\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + temp8 - temp9 + 0x60];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = 0x034e;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = approve(var2, var3);\n                \n                label_034E:\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = !!var1;\n                    var temp11 = memory[0x40:0x60];\n                    return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n                } else if (var0 == 0x0dfe1681) {\n                    // Dispatch table entry for token0()\n                    var1 = 0x036a;\n                    var2 = token0();\n                \n                label_036A:\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp13 = memory[0x40:0x60];\n                    return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = 0x039b;\n                    var2 = totalSupply();\n                \n                label_039B:\n                    var temp14 = memory[0x40:0x60];\n                    memory[temp14:temp14 + 0x20] = var2;\n                    var temp15 = memory[0x40:0x60];\n                    return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0x3644e515 > var0) {\n                if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = 0x034e;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var1 = transferFrom(var2, var3);\n                    goto label_034E;\n                } else if (var0 == 0x30adf81f) {\n                    // Dispatch table entry for PERMIT_TYPEHASH()\n                    var1 = 0x039b;\n                    var2 = PERMIT_TYPEHASH();\n                    goto label_039B;\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = 0x0400;\n                    var2 = decimals();\n                    var temp16 = memory[0x40:0x60];\n                    memory[temp16:temp16 + 0x20] = var2 & 0xff;\n                    var temp17 = memory[0x40:0x60];\n                    return memory[temp17:temp17 + temp16 - temp17 + 0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x3644e515) {\n                // Dispatch table entry for DOMAIN_SEPARATOR()\n                var1 = 0x039b;\n                var2 = DOMAIN_SEPARATOR();\n                goto label_039B;\n            } else if (var0 == 0x485cc955) {\n                // Dispatch table entry for initialize(address,address)\n                var1 = 0x0257;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                initialize(var2, var3);\n                stop();\n            } else if (var0 == 0x5909c0d5) {\n                // Dispatch table entry for price0CumulativeLast()\n                var1 = 0x039b;\n                var2 = price0CumulativeLast();\n                goto label_039B;\n            } else if (var0 == 0x5a3d5493) {\n                // Dispatch table entry for price1CumulativeLast()\n                var1 = 0x039b;\n                var2 = price1CumulativeLast();\n                goto label_039B;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xba9a7a56 > var0) {\n            if (0x7ecebe00 > var0) {\n                if (var0 == 0x6a627842) {\n                    // Dispatch table entry for mint(address)\n                    var1 = 0x039b;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = mint(var2, var3);\n                    goto label_039B;\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = 0x039b;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = balanceOf(var2, var3);\n                    goto label_039B;\n                } else if (var0 == 0x7464fc3d) {\n                    // Dispatch table entry for kLast()\n                    var1 = 0x039b;\n                    var2 = kLast();\n                    goto label_039B;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x7ecebe00) {\n                // Dispatch table entry for nonces(address)\n                var1 = 0x039b;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = nonces(var2, var3);\n                goto label_039B;\n            } else if (var0 == 0x89afcb44) {\n                // Dispatch table entry for burn(address)\n                var1 = 0x053d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1, var2 = burn(var2, var3);\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var1;\n                memory[temp18 + 0x20:temp18 + 0x20 + 0x20] = var2;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + temp18 - temp19 + 0x40];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x0261;\n                var2 = symbol();\n                goto label_0261;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = 0x034e;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var temp20 = var2;\n                var2 = msg.data[temp20:temp20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[temp20 + 0x20:temp20 + 0x20 + 0x20];\n                var4 = 0x00;\n                var5 = 0x0df2;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = var3;\n                transfer(var6, var7, var8);\n                var4 = 0x01;\n                var1 = var4;\n                // Error: Could not resolve jump destination!\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xd21220a7 > var0) {\n            if (var0 == 0xba9a7a56) {\n                // Dispatch table entry for MINIMUM_LIQUIDITY()\n                var1 = 0x039b;\n                var2 = MINIMUM_LIQUIDITY();\n                goto label_039B;\n            } else if (var0 == 0xbc25cf77) {\n                // Dispatch table entry for skim(address)\n                var1 = 0x0257;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                skim(var2, var3);\n                stop();\n            } else if (var0 == 0xc45a0155) {\n                // Dispatch table entry for factory()\n                var1 = 0x036a;\n                var2 = factory();\n                goto label_036A;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xd21220a7) {\n            // Dispatch table entry for token1()\n            var1 = 0x036a;\n            var2 = token1();\n            goto label_036A;\n        } else if (var0 == 0xd505accf) {\n            // Dispatch table entry for permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\n            var1 = 0x0257;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0xe0) { revert(memory[0x00:0x00]); }\n        \n            permit(var2, var3);\n            stop();\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x039b;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var2 = allowance(var2, var3);\n            goto label_039B;\n        } else if (var0 == 0xfff6cae9) {\n            // Dispatch table entry for sync()\n            var1 = 0x0257;\n            sync();\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function swap(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = temp0 + temp1;\n        var var2 = temp0;\n        var var3 = var2 + 0x80;\n        var var4 = msg.data[var2 + 0x60:var2 + 0x60 + 0x20];\n    \n        if (var4 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var2 + var4;\n        var4 = temp2;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var4;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var4 = temp4;\n        var var5 = var3;\n        var3 = temp3 + 0x20;\n    \n        if ((var4 > 0x0100000000) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var1 = var3;\n        var2 = var4;\n    \n        if (storage[0x0c] == 0x01) {\n            storage[0x0c] = 0x00;\n            var3 = !!arg0;\n        \n            if (var3) {\n                if (var3) {\n                label_075C:\n                    var3 = 0x00;\n                    var4 = var3;\n                    var5 = 0x0767;\n                    var var6;\n                    var var7;\n                    var5, var6, var7 = getReserves();\n                    var4 = var6;\n                    var3 = var5;\n                    var temp5 = arg0 < var3 & 0xffffffffffffffffffffffffffff;\n                    var5 = temp5;\n                \n                    if (!var5) {\n                        if (var5) {\n                        label_07EF:\n                            var5 = 0x00;\n                            var6 = var5;\n                            var7 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var var8 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var var9 = var7 != var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        \n                            if (var7 != var0 & 0xffffffffffffffffffffffffffffffffffffffff) {\n                                if (var9) {\n                                label_08BF:\n                                \n                                    if (!arg0) {\n                                    label_08D0:\n                                    \n                                        if (!arg1) {\n                                        label_08E1:\n                                        \n                                            if (!var2) {\n                                            label_09C3:\n                                                var temp6 = memory[0x40:0x60];\n                                                memory[temp6:temp6 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                                memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = address(this);\n                                                var9 = var7 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                var var10 = 0x70a08231;\n                                                var var11 = temp6 + 0x24;\n                                                var var12 = 0x20;\n                                                var var13 = memory[0x40:0x60];\n                                                var var14 = temp6 - var13 + 0x24;\n                                                var var15 = var13;\n                                                var var16 = var9;\n                                                var var17 = !address(var16).code.length;\n                                            \n                                                if (var17) { revert(memory[0x00:0x00]); }\n                                            \n                                                var temp7;\n                                                temp7, memory[var13:var13 + var12] = address(var16).staticcall.gas(msg.gas)(memory[var15:var15 + var14]);\n                                                var12 = !temp7;\n                                            \n                                                if (!var12) {\n                                                    var9 = memory[0x40:0x60];\n                                                    var10 = returndata.length;\n                                                \n                                                    if (var10 < 0x20) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp8 = memory[var9:var9 + 0x20];\n                                                    var temp9 = memory[0x40:0x60];\n                                                    memory[temp9:temp9 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                                    memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = address(this);\n                                                    var5 = temp8;\n                                                    var9 = var8 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                    var10 = 0x70a08231;\n                                                    var11 = temp9 + 0x24;\n                                                    var12 = 0x20;\n                                                    var13 = memory[0x40:0x60];\n                                                    var14 = temp9 - var13 + 0x24;\n                                                    var15 = var13;\n                                                    var16 = var9;\n                                                    var17 = !address(var16).code.length;\n                                                \n                                                    if (var17) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp10;\n                                                    temp10, memory[var13:var13 + var12] = address(var16).staticcall.gas(msg.gas)(memory[var15:var15 + var14]);\n                                                    var12 = !temp10;\n                                                \n                                                    if (!var12) {\n                                                        var9 = memory[0x40:0x60];\n                                                        var10 = returndata.length;\n                                                    \n                                                        if (var10 < 0x20) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var6 = memory[var9:var9 + 0x20];\n                                                        var7 = 0x00;\n                                                    \n                                                        if (var5 > (var3 & 0xffffffffffffffffffffffffffff) - arg0) {\n                                                            var7 = var5 - ((var3 & 0xffffffffffffffffffffffffffff) - arg0);\n                                                            var8 = 0x00;\n                                                        \n                                                            if (var6 > (var4 & 0xffffffffffffffffffffffffffff) - arg1) {\n                                                            label_0B59:\n                                                                var8 = var6 - ((var4 & 0xffffffffffffffffffffffffffff) - arg1);\n                                                                var9 = var7 > 0x00;\n                                                            \n                                                                if (var9) {\n                                                                label_0B80:\n                                                                \n                                                                    if (var9) {\n                                                                    label_0BD5:\n                                                                        var9 = 0x00;\n                                                                        var10 = 0x0c09;\n                                                                        var11 = 0x0beb;\n                                                                        var12 = var7;\n                                                                        var13 = 0x03;\n                                                                        var11 = func_21E8(var12, var13);\n                                                                        var10 = func_0BEB(var5, var11);\n                                                                        var9 = var10;\n                                                                        var10 = 0x00;\n                                                                        var11 = 0x0c21;\n                                                                        var12 = 0x0beb;\n                                                                        var13 = var8;\n                                                                        var14 = 0x03;\n                                                                        var12 = func_21E8(var13, var14);\n                                                                        var11 = func_0BEB(var6, var12);\n                                                                        var10 = var11;\n                                                                        var11 = 0x0c59;\n                                                                        var12 = 0x0f4240;\n                                                                        var13 = 0x0c4d;\n                                                                        var14 = var3 & 0xffffffffffffffffffffffffffff;\n                                                                        var15 = var4 & 0xffffffffffffffffffffffffffff;\n                                                                        var13 = func_21E8(var14, var15);\n                                                                        var11 = func_0C4D(var12, var13);\n                                                                        var12 = 0x0c69;\n                                                                        var13 = var9;\n                                                                        var14 = var10;\n                                                                        var12 = func_21E8(var13, var14);\n                                                                    \n                                                                        if (var12 >= var11) {\n                                                                            var9 = 0x0ce4;\n                                                                            var10 = var5;\n                                                                            var11 = var6;\n                                                                            var12 = var3;\n                                                                            var13 = var4;\n                                                                            func_22E0(var10, var11, var12, var13);\n                                                                            var temp11 = memory[0x40:0x60];\n                                                                            memory[temp11:temp11 + 0x20] = var7;\n                                                                            memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = var8;\n                                                                            memory[temp11 + 0x40:temp11 + 0x40 + 0x20] = arg0;\n                                                                            memory[temp11 + 0x60:temp11 + 0x60 + 0x20] = arg1;\n                                                                            var temp12 = memory[0x40:0x60];\n                                                                            log(memory[temp12:temp12 + temp11 - temp12 + 0x80], [0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822, msg.sender, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                                                            storage[0x0c] = 0x01;\n                                                                            return;\n                                                                        } else {\n                                                                            var temp13 = memory[0x40:0x60];\n                                                                            memory[temp13:temp13 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                                                                            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n                                                                            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x0c;\n                                                                            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x556e697377617056323a204b0000000000000000000000000000000000000000;\n                                                                            var temp14 = memory[0x40:0x60];\n                                                                            revert(memory[temp14:temp14 + temp13 - temp14 + 0x64]);\n                                                                        }\n                                                                    } else {\n                                                                    label_0B85:\n                                                                        var temp15 = memory[0x40:0x60];\n                                                                        memory[temp15:temp15 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                                                                        var temp16 = temp15 + 0x04;\n                                                                        var temp17 = temp16 + 0x20;\n                                                                        memory[temp16:temp16 + 0x20] = temp17 - temp16;\n                                                                        memory[temp17:temp17 + 0x20] = 0x24;\n                                                                        var temp18 = temp17 + 0x20;\n                                                                        memory[temp18:temp18 + 0x24] = code[0x2b54:0x2b78];\n                                                                        var temp19 = memory[0x40:0x60];\n                                                                        revert(memory[temp19:temp19 + (temp18 + 0x40) - temp19]);\n                                                                    }\n                                                                } else {\n                                                                label_0B7B:\n                                                                \n                                                                    if (var8 > 0x00) { goto label_0BD5; }\n                                                                    else { goto label_0B85; }\n                                                                }\n                                                            } else {\n                                                            label_0B53:\n                                                                var9 = 0x00;\n                                                                var8 = var9;\n                                                                var9 = var7 > 0x00;\n                                                            \n                                                                if (var9) { goto label_0B80; }\n                                                                else { goto label_0B7B; }\n                                                            }\n                                                        } else {\n                                                            var8 = 0x00;\n                                                            var7 = var8;\n                                                            var8 = 0x00;\n                                                        \n                                                            if (var6 > (var4 & 0xffffffffffffffffffffffffffff) - arg1) { goto label_0B59; }\n                                                            else { goto label_0B53; }\n                                                        }\n                                                    } else {\n                                                        var temp20 = returndata.length;\n                                                        memory[0x00:0x00 + temp20] = returndata[0x00:0x00 + temp20];\n                                                        revert(memory[0x00:0x00 + returndata.length]);\n                                                    }\n                                                } else {\n                                                    var temp21 = returndata.length;\n                                                    memory[0x00:0x00 + temp21] = returndata[0x00:0x00 + temp21];\n                                                    revert(memory[0x00:0x00 + returndata.length]);\n                                                }\n                                            } else {\n                                                var9 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                var10 = 0x10d1e85c;\n                                                var temp22 = var2;\n                                                var temp23 = memory[0x40:0x60];\n                                                memory[temp23:temp23 + 0x20] = (var10 & 0xffffffff) << 0xe0;\n                                                var temp24 = temp23 + 0x04;\n                                                memory[temp24:temp24 + 0x20] = msg.sender;\n                                                var temp25 = temp24 + 0x20;\n                                                memory[temp25:temp25 + 0x20] = arg0;\n                                                var temp26 = temp25 + 0x20;\n                                                memory[temp26:temp26 + 0x20] = arg1;\n                                                var temp27 = temp26 + 0x20;\n                                                var temp28 = temp27 + 0x20;\n                                                memory[temp27:temp27 + 0x20] = temp28 - temp24;\n                                                memory[temp28:temp28 + 0x20] = temp22;\n                                                var temp29 = temp28 + 0x20;\n                                                memory[temp29:temp29 + temp22] = msg.data[var1:var1 + temp22];\n                                                memory[temp29 + temp22:temp29 + temp22 + 0x20] = 0x00;\n                                                var11 = temp29 + (temp22 + 0x1f & ~0x1f);\n                                                var12 = 0x00;\n                                                var13 = memory[0x40:0x60];\n                                                var14 = var11 - var13;\n                                                var15 = var13;\n                                                var16 = 0x00;\n                                                var17 = var9;\n                                                var var18 = !address(var17).code.length;\n                                            \n                                                if (var18) { revert(memory[0x00:0x00]); }\n                                            \n                                                var temp30;\n                                                temp30, memory[var13:var13 + var12] = address(var17).call.gas(msg.gas).value(var16)(memory[var15:var15 + var14]);\n                                                var12 = !temp30;\n                                            \n                                                if (!var12) { goto label_09C3; }\n                                            \n                                                var temp31 = returndata.length;\n                                                memory[0x00:0x00 + temp31] = returndata[0x00:0x00 + temp31];\n                                                revert(memory[0x00:0x00 + returndata.length]);\n                                            }\n                                        } else {\n                                            var9 = 0x08e1;\n                                            var10 = var8;\n                                            var11 = var0;\n                                            var12 = arg1;\n                                            func_1FDB(var10, var11, var12);\n                                            goto label_08E1;\n                                        }\n                                    } else {\n                                        var9 = 0x08d0;\n                                        var10 = var7;\n                                        var11 = var0;\n                                        var12 = arg0;\n                                        func_1FDB(var10, var11, var12);\n                                        goto label_08D0;\n                                    }\n                                } else {\n                                label_0859:\n                                    var temp32 = memory[0x40:0x60];\n                                    memory[temp32:temp32 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                                    memory[temp32 + 0x04:temp32 + 0x04 + 0x20] = 0x20;\n                                    memory[temp32 + 0x24:temp32 + 0x24 + 0x20] = 0x15;\n                                    memory[temp32 + 0x44:temp32 + 0x44 + 0x20] = 0x556e697377617056323a20494e56414c49445f544f0000000000000000000000;\n                                    var temp33 = memory[0x40:0x60];\n                                    revert(memory[temp33:temp33 + temp32 - temp33 + 0x64]);\n                                }\n                            } else if (var0 & 0xffffffffffffffffffffffffffffffffffffffff != var8 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_08BF; }\n                            else { goto label_0859; }\n                        } else {\n                        label_079F:\n                            var temp34 = memory[0x40:0x60];\n                            memory[temp34:temp34 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp35 = temp34 + 0x04;\n                            var temp36 = temp35 + 0x20;\n                            memory[temp35:temp35 + 0x20] = temp36 - temp35;\n                            memory[temp36:temp36 + 0x20] = 0x21;\n                            var temp37 = temp36 + 0x20;\n                            memory[temp37:temp37 + 0x21] = code[0x2b78:0x2b99];\n                            var temp38 = memory[0x40:0x60];\n                            revert(memory[temp38:temp38 + (temp37 + 0x40) - temp38]);\n                        }\n                    } else if (arg1 < var4 & 0xffffffffffffffffffffffffffff) { goto label_07EF; }\n                    else { goto label_079F; }\n                } else {\n                label_070C:\n                    var temp39 = memory[0x40:0x60];\n                    memory[temp39:temp39 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp40 = temp39 + 0x04;\n                    var temp41 = temp40 + 0x20;\n                    memory[temp40:temp40 + 0x20] = temp41 - temp40;\n                    memory[temp41:temp41 + 0x20] = 0x25;\n                    var temp42 = temp41 + 0x20;\n                    memory[temp42:temp42 + 0x25] = code[0x2b2f:0x2b54];\n                    var temp43 = memory[0x40:0x60];\n                    revert(memory[temp43:temp43 + (temp42 + 0x40) - temp43]);\n                }\n            } else if (arg1 > 0x00) { goto label_075C; }\n            else { goto label_070C; }\n        } else {\n            var temp44 = memory[0x40:0x60];\n            memory[temp44:temp44 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp44 + 0x04:temp44 + 0x04 + 0x20] = 0x20;\n            memory[temp44 + 0x24:temp44 + 0x24 + 0x20] = 0x11;\n            memory[temp44 + 0x44:temp44 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp45 = memory[0x40:0x60];\n            revert(memory[temp45:temp45 + temp44 - temp45 + 0x64]);\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0df2;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_259C(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        var var1 = 0x00;\n        memory[var1:var1 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[var1:var1 + 0x40]);\n        memory[var1:var1 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        label_0EE8:\n            var var2 = 0x0ef3;\n            var var3 = arg0;\n            var var4 = arg1;\n            var var5 = var0;\n            transfer(var3, var4, var5);\n            return 0x01;\n        } else {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp2;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n            var2 = 0x0eb6;\n            var4 = var0;\n            var2 = func_226E(var3, var4);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp3;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n            goto label_0EE8;\n        }\n    }\n    \n    function initialize(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender == storage[0x05] & 0xffffffffffffffffffffffffffffffffffffffff) {\n            storage[0x06] = (storage[0x06] & 0xffffffffffffffffffffffff0000000000000000000000000000000000000000) | (arg0 & 0xffffffffffffffffffffffffffffffffffffffff);\n            storage[0x07] = (storage[0x07] & 0xffffffffffffffffffffffff0000000000000000000000000000000000000000) | (arg1 & 0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x14;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x556e697377617056323a20464f5242494444454e000000000000000000000000;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function mint(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x00;\n    \n        if (storage[0x0c] == 0x01) {\n            var var0 = 0x00;\n            storage[0x0c] = var0;\n            var var1 = var0;\n            var var2 = 0x1094;\n            var var3;\n            var var4;\n            var2, var3, var4 = getReserves();\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            var0 = var2;\n            var1 = var3;\n            var2 = 0x00;\n            var3 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = 0x70a08231;\n            var var5 = temp0 + 0x24;\n            var var6 = 0x20;\n            var var7 = memory[0x40:0x60];\n            var var8 = temp0 - var7 + 0x24;\n            var var9 = var7;\n            var var10 = var3;\n            var var11 = !address(var10).code.length;\n        \n            if (var11) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var7:var7 + var6] = address(var10).staticcall.gas(msg.gas)(memory[var9:var9 + var8]);\n            var6 = !temp1;\n        \n            if (!var6) {\n                var3 = memory[0x40:0x60];\n                var4 = returndata.length;\n            \n                if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp2 = memory[var3:var3 + 0x20];\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = address(this);\n                var2 = temp2;\n                var3 = 0x00;\n                var4 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var5 = 0x70a08231;\n                var6 = temp3 + 0x24;\n                var7 = 0x20;\n                var8 = memory[0x40:0x60];\n                var9 = temp3 - var8 + 0x24;\n                var10 = var8;\n                var11 = var4;\n                var var12 = !address(var11).code.length;\n            \n                if (var12) { revert(memory[0x00:0x00]); }\n            \n                var temp4;\n                temp4, memory[var8:var8 + var7] = address(var11).staticcall.gas(msg.gas)(memory[var10:var10 + var9]);\n                var7 = !temp4;\n            \n                if (!var7) {\n                    var4 = memory[0x40:0x60];\n                    var5 = returndata.length;\n                \n                    if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var3 = memory[var4:var4 + 0x20];\n                    var4 = 0x00;\n                    var5 = 0x1201;\n                    var6 = var2;\n                    var7 = var0 & 0xffffffffffffffffffffffffffff;\n                    var5 = func_226E(var6, var7);\n                    var4 = var5;\n                    var5 = 0x00;\n                    var6 = 0x1225;\n                    var7 = var3;\n                    var8 = var1 & 0xffffffffffffffffffffffffffff;\n                    var6 = func_226E(var7, var8);\n                    var5 = var6;\n                    var6 = 0x00;\n                    var7 = 0x1233;\n                    var8 = var0;\n                    var9 = var1;\n                    var7 = func_26EC(var8, var9);\n                    var temp5 = var7;\n                    var7 = storage[0x00];\n                    var6 = temp5;\n                \n                    if (var7) {\n                        var8 = 0x12ca;\n                        var9 = var0 & 0xffffffffffffffffffffffffffff;\n                        var10 = 0x1294;\n                        var11 = var4;\n                        var12 = var7;\n                        var10 = func_21E8(var11, var12);\n                        var8 = func_1294(var1, var5, var7, var9, var10);\n                        arg1 = var8;\n                    \n                        if (arg1 > 0x00) {\n                            var8 = 0x1330;\n                            var9 = arg0;\n                            var10 = arg1;\n                            func_28CA(var9, var10);\n                            var8 = 0x133c;\n                            var9 = var2;\n                            var10 = var3;\n                            var11 = var0;\n                            var12 = var1;\n                            func_22E0(var9, var10, var11, var12);\n                        \n                            if (!var6) {\n                            label_137E:\n                                var temp6 = memory[0x40:0x60];\n                                memory[temp6:temp6 + 0x20] = var4;\n                                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var5;\n                                var temp7 = memory[0x40:0x60];\n                                log(memory[temp7:temp7 + temp6 - temp7 + 0x40], [0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f, msg.sender]);\n                                storage[0x0c] = 0x01;\n                                return arg1;\n                            } else {\n                                var temp8 = storage[0x08];\n                                var8 = 0x137a;\n                                var9 = temp8 & 0xffffffffffffffffffffffffffff;\n                                var10 = temp8 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n                                var8 = func_21E8(var9, var10);\n                                storage[0x0b] = var8;\n                                goto label_137E;\n                            }\n                        } else {\n                            var temp9 = memory[0x40:0x60];\n                            memory[temp9:temp9 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp10 = temp9 + 0x04;\n                            var temp11 = temp10 + 0x20;\n                            memory[temp10:temp10 + 0x20] = temp11 - temp10;\n                            memory[temp11:temp11 + 0x20] = 0x28;\n                            var temp12 = temp11 + 0x20;\n                            memory[temp12:temp12 + 0x28] = code[0x2bc1:0x2be9];\n                            var temp13 = memory[0x40:0x60];\n                            revert(memory[temp13:temp13 + (temp12 + 0x40) - temp13]);\n                        }\n                    } else {\n                        var8 = 0x125c;\n                        var9 = 0x03e8;\n                        var10 = 0x0bfd;\n                        var11 = 0x1257;\n                        var12 = var4;\n                        var var13 = var5;\n                        var11 = func_21E8(var12, var13);\n                        var10 = func_1257(var11);\n                        var temp14 = var9;\n                        var9 = var10;\n                        var10 = temp14;\n                        var8 = func_226E(var9, var10);\n                        // Error: Could not resolve method call return address!\n                    }\n                } else {\n                    var temp15 = returndata.length;\n                    memory[0x00:0x00 + temp15] = returndata[0x00:0x00 + temp15];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp16 = returndata.length;\n                memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x11;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp18 = memory[0x40:0x60];\n            revert(memory[temp18:temp18 + temp17 - temp18 + 0x64]);\n        }\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function nonces(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function burn(var arg0, var arg1) returns (var r0, var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x00;\n        var var0 = arg1;\n    \n        if (storage[0x0c] == 0x01) {\n            var var1 = 0x00;\n            storage[0x0c] = var1;\n            var var2 = var1;\n            var var3 = 0x1479;\n            var var4;\n            var var5;\n            var3, var4, var5 = getReserves();\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            var1 = var3;\n            var2 = var4;\n            var3 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var5 = 0x00;\n            var var6 = var3;\n            var var7 = 0x70a08231;\n            var var8 = temp0 + 0x24;\n            var var9 = 0x20;\n            var var10 = memory[0x40:0x60];\n            var var11 = temp0 - var10 + 0x24;\n            var var12 = var10;\n            var var13 = var6;\n            var var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n            var9 = !temp1;\n        \n            if (!var9) {\n                var6 = memory[0x40:0x60];\n                var7 = returndata.length;\n            \n                if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp2 = memory[var6:var6 + 0x20];\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = address(this);\n                var5 = temp2;\n                var6 = 0x00;\n                var7 = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var8 = 0x70a08231;\n                var9 = temp3 + 0x24;\n                var10 = 0x20;\n                var11 = memory[0x40:0x60];\n                var12 = temp3 - var11 + 0x24;\n                var13 = var11;\n                var14 = var7;\n                var var15 = !address(var14).code.length;\n            \n                if (var15) { revert(memory[0x00:0x00]); }\n            \n                var temp4;\n                temp4, memory[var11:var11 + var10] = address(var14).staticcall.gas(msg.gas)(memory[var13:var13 + var12]);\n                var10 = !temp4;\n            \n                if (!var10) {\n                    var7 = memory[0x40:0x60];\n                    var8 = returndata.length;\n                \n                    if (var8 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp5 = memory[var7:var7 + 0x20];\n                    var8 = 0x00;\n                    memory[var8:var8 + 0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    var7 = storage[keccak256(memory[var8:var8 + 0x40])];\n                    var6 = temp5;\n                    var9 = 0x15e2;\n                    var10 = var1;\n                    var11 = var2;\n                    var9 = func_26EC(var10, var11);\n                    var temp6 = var9;\n                    var9 = storage[0x00];\n                    var8 = temp6;\n                    var10 = var9;\n                    var11 = 0x15f9;\n                    var12 = var7;\n                    var13 = var5;\n                    var11 = func_21E8(var12, var13);\n                \n                    if (!var10) { assert(); }\n                \n                    arg1 = var11 / var10;\n                    var10 = var9;\n                    var11 = 0x1614;\n                    var12 = var7;\n                    var13 = var6;\n                    var11 = func_21E8(var12, var13);\n                \n                    if (!var10) { assert(); }\n                \n                    var0 = var11 / var10;\n                    var10 = arg1 > 0x00;\n                \n                    if (!var10) {\n                        if (var10) {\n                        label_1683:\n                            var10 = 0x168d;\n                            var11 = address(this);\n                            var12 = var7;\n                            func_2992(var11, var12);\n                            var10 = 0x1698;\n                            var11 = var3;\n                            var12 = arg0;\n                            var13 = arg1;\n                            func_1FDB(var11, var12, var13);\n                            var10 = 0x16a3;\n                            var11 = var4;\n                            var12 = arg0;\n                            var13 = var0;\n                            func_1FDB(var11, var12, var13);\n                            var temp7 = memory[0x40:0x60];\n                            memory[temp7:temp7 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = address(this);\n                            var10 = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var11 = 0x70a08231;\n                            var12 = temp7 + 0x24;\n                            var13 = 0x20;\n                            var14 = memory[0x40:0x60];\n                            var15 = temp7 - var14 + 0x24;\n                            var var16 = var14;\n                            var var17 = var10;\n                            var var18 = !address(var17).code.length;\n                        \n                            if (var18) { revert(memory[0x00:0x00]); }\n                        \n                            var temp8;\n                            temp8, memory[var14:var14 + var13] = address(var17).staticcall.gas(msg.gas)(memory[var16:var16 + var15]);\n                            var13 = !temp8;\n                        \n                            if (!var13) {\n                                var10 = memory[0x40:0x60];\n                                var11 = returndata.length;\n                            \n                                if (var11 < 0x20) { revert(memory[0x00:0x00]); }\n                            \n                                var temp9 = memory[var10:var10 + 0x20];\n                                var temp10 = memory[0x40:0x60];\n                                memory[temp10:temp10 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = address(this);\n                                var5 = temp9;\n                                var10 = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                var11 = 0x70a08231;\n                                var12 = temp10 + 0x24;\n                                var13 = 0x20;\n                                var14 = memory[0x40:0x60];\n                                var15 = temp10 - var14 + 0x24;\n                                var16 = var14;\n                                var17 = var10;\n                                var18 = !address(var17).code.length;\n                            \n                                if (var18) { revert(memory[0x00:0x00]); }\n                            \n                                var temp11;\n                                temp11, memory[var14:var14 + var13] = address(var17).staticcall.gas(msg.gas)(memory[var16:var16 + var15]);\n                                var13 = !temp11;\n                            \n                                if (!var13) {\n                                    var10 = memory[0x40:0x60];\n                                    var11 = returndata.length;\n                                \n                                    if (var11 < 0x20) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp12 = memory[var10:var10 + 0x20];\n                                    var6 = temp12;\n                                    var10 = 0x17e5;\n                                    var11 = var5;\n                                    var12 = var6;\n                                    var13 = var1;\n                                    var14 = var2;\n                                    func_22E0(var11, var12, var13, var14);\n                                \n                                    if (!var8) {\n                                    label_1827:\n                                        var temp13 = memory[0x40:0x60];\n                                        memory[temp13:temp13 + 0x20] = arg1;\n                                        memory[temp13 + 0x20:temp13 + 0x20 + 0x20] = var0;\n                                        var temp14 = memory[0x40:0x60];\n                                        log(memory[temp14:temp14 + temp13 - temp14 + 0x40], [0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496, msg.sender, stack[-12] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                        storage[0x0c] = 0x01;\n                                        arg0 = var0;\n                                        r0 = arg1;\n                                        return r0, arg0;\n                                    } else {\n                                        var temp15 = storage[0x08];\n                                        var10 = 0x1823;\n                                        var11 = temp15 & 0xffffffffffffffffffffffffffff;\n                                        var12 = temp15 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n                                        var10 = func_21E8(var11, var12);\n                                        storage[0x0b] = var10;\n                                        goto label_1827;\n                                    }\n                                } else {\n                                    var temp16 = returndata.length;\n                                    memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                                    revert(memory[0x00:0x00 + returndata.length]);\n                                }\n                            } else {\n                                var temp17 = returndata.length;\n                                memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                        label_1633:\n                            var temp18 = memory[0x40:0x60];\n                            memory[temp18:temp18 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp19 = temp18 + 0x04;\n                            var temp20 = temp19 + 0x20;\n                            memory[temp19:temp19 + 0x20] = temp20 - temp19;\n                            memory[temp20:temp20 + 0x20] = 0x28;\n                            var temp21 = temp20 + 0x20;\n                            memory[temp21:temp21 + 0x28] = code[0x2b99:0x2bc1];\n                            var temp22 = memory[0x40:0x60];\n                            revert(memory[temp22:temp22 + (temp21 + 0x40) - temp22]);\n                        }\n                    } else if (var0 > 0x00) { goto label_1683; }\n                    else { goto label_1633; }\n                } else {\n                    var temp23 = returndata.length;\n                    memory[0x00:0x00 + temp23] = returndata[0x00:0x00 + temp23];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp24 = returndata.length;\n                memory[0x00:0x00 + temp24] = returndata[0x00:0x00 + temp24];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n            memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x11;\n            memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp26 = memory[0x40:0x60];\n            revert(memory[temp26:temp26 + temp25 - temp26 + 0x64]);\n        }\n    }\n    \n    function skim(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (storage[0x0c] == 0x01) {\n            storage[0x0c] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            arg1 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var0 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x1a2b;\n            var var2 = arg1;\n            var var3 = arg0;\n            var var4 = 0x1a26;\n            var var5 = storage[0x08] & 0xffffffffffffffffffffffffffff;\n            var var6 = var2;\n            var var7 = 0x70a08231;\n            var var8 = temp0 + 0x24;\n            var var9 = 0x20;\n            var var10 = memory[0x40:0x60];\n            var var11 = temp0 - var10 + 0x24;\n            var var12 = var10;\n            var var13 = var6;\n            var var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var4 = func_19EE(var5, var6, var7, var8, var9, var10, var11, var12, var13, var14);\n            func_1A26(var2, var3, var4);\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = address(this);\n            var1 = 0x1aca;\n            var2 = var0;\n            var3 = arg0;\n            var4 = 0x1a26;\n            var5 = storage[0x08] / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n            var6 = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var7 = 0x70a08231;\n            var8 = temp1 + 0x24;\n            var9 = 0x20;\n            var10 = memory[0x40:0x60];\n            var11 = temp1 - var10 + 0x24;\n            var12 = var10;\n            var13 = var6;\n            var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var4 = func_19EE(var5, var6, var7, var8, var9, var10, var11, var12, var13, var14);\n            func_1A26(var2, var3, var4);\n            storage[0x0c] = 0x01;\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x11;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        }\n    }\n    \n    function permit(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        var var1 = msg.data[temp0 + 0x60:temp0 + 0x60 + 0x20];\n        var var2 = msg.data[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0xff;\n        var var3 = msg.data[temp0 + 0xa0:temp0 + 0xa0 + 0x20];\n        var var4 = msg.data[temp0 + 0xc0:temp0 + 0xc0 + 0x20];\n    \n        if (var1 >= block.timestamp) {\n            var temp1 = storage[0x03];\n            var temp2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x04;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = storage[temp3];\n            storage[temp3] = temp4 + 0x01;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n            memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = temp2;\n            memory[temp5 + 0x60:temp5 + 0x60 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[temp5 + 0x80:temp5 + 0x80 + 0x20] = var0;\n            memory[temp5 + 0xa0:temp5 + 0xa0 + 0x20] = temp4;\n            memory[temp5 + 0xc0:temp5 + 0xc0 + 0x20] = var1;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp5 - temp6 + 0xc0;\n            memory[0x40:0x60] = temp5 + 0xe0;\n            var temp7 = keccak256(memory[temp6 + 0x20:temp6 + 0x20 + memory[temp6:temp6 + 0x20]]);\n            memory[temp5 + 0x0100:temp5 + 0x0100 + 0x20] = 0x1901000000000000000000000000000000000000000000000000000000000000;\n            memory[temp5 + 0x0102:temp5 + 0x0102 + 0x20] = temp1;\n            memory[temp5 + 0x0122:temp5 + 0x0122 + 0x20] = temp7;\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = temp5 - temp8 + 0x0122;\n            var temp9 = temp5 + 0x0142;\n            memory[0x40:0x60] = temp9;\n            var temp10 = keccak256(memory[temp8 + 0x20:temp8 + 0x20 + memory[temp8:temp8 + 0x20]]);\n            var var5 = temp10;\n            memory[temp9:temp9 + 0x20] = 0x00;\n            var temp11 = temp5 + 0x0162;\n            memory[0x40:0x60] = temp11;\n            memory[temp11:temp11 + 0x20] = var5;\n            memory[temp5 + 0x0182:temp5 + 0x0182 + 0x20] = var2 & 0xff;\n            memory[temp5 + 0x01a2:temp5 + 0x01a2 + 0x20] = var3;\n            memory[temp5 + 0x01c2:temp5 + 0x01c2 + 0x20] = var4;\n            var temp12 = memory[0x40:0x60];\n            var var6 = 0x00;\n            var var7 = 0x01;\n            var var8 = temp5 + 0x01e2;\n            var temp13;\n            temp13, memory[temp12 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0:temp12 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0 + 0x20] = address(var7).staticcall.gas(msg.gas)(memory[temp12:temp12 + temp5 - temp12 + 0x01e2]);\n            var var9 = !temp13;\n        \n            if (!var9) {\n                var6 = memory[memory[0x40:0x60] + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0:memory[0x40:0x60] + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0 + 0x20];\n                var7 = !!(var6 & 0xffffffffffffffffffffffffffffffffffffffff);\n            \n                if (!(var6 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n                    if (var7) {\n                    label_1DC2:\n                        var7 = 0x1dcd;\n                        var8 = arg0;\n                        var9 = arg1;\n                        var var10 = var0;\n                        func_259C(var8, var9, var10);\n                        return;\n                    } else {\n                    label_1D5C:\n                        var temp14 = memory[0x40:0x60];\n                        memory[temp14:temp14 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                        memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n                        memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x1c;\n                        memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = 0x556e697377617056323a20494e56414c49445f5349474e415455524500000000;\n                        var temp15 = memory[0x40:0x60];\n                        revert(memory[temp15:temp15 + temp14 - temp15 + 0x64]);\n                    }\n                } else if (var6 & 0xffffffffffffffffffffffffffffffffffffffff == arg0 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1DC2; }\n                else { goto label_1D5C; }\n            } else {\n                var temp16 = returndata.length;\n                memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x12;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x556e697377617056323a20455850495245440000000000000000000000000000;\n            var temp18 = memory[0x40:0x60];\n            revert(memory[temp18:temp18 + temp17 - temp18 + 0x64]);\n        }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0BEB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x0bfd;\n        var var1 = arg0;\n        var var2 = 0x03e8;\n        var0 = func_21E8(var1, var2);\n        var temp0 = arg1;\n        arg1 = var0;\n        var0 = temp0;\n        r0 = func_226E(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0C4D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_21E8(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0a;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x556e697377617020563200000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function getReserves() returns (var r0, var r1, var r2) {\n        var temp0 = storage[0x08];\n        r0 = temp0 & 0xffffffffffffffffffffffffffff;\n        r1 = temp0 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n        r2 = temp0 / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        return r0, r1, r2;\n    }\n    \n    function token0() returns (var r0) { return storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function PERMIT_TYPEHASH() returns (var r0) { return 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function DOMAIN_SEPARATOR() returns (var r0) { return storage[0x03]; }\n    \n    function price0CumulativeLast() returns (var r0) { return storage[0x09]; }\n    \n    function price1CumulativeLast() returns (var r0) { return storage[0x0a]; }\n    \n    function func_1257(var arg0) returns (var r0) {\n        r0 = func_2878(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1294(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        if (!arg3) { assert(); }\n    \n        arg3 = arg4 / arg3;\n        arg4 = arg0 & 0xffffffffffffffffffffffffffff;\n        var var0 = 0x12bd;\n        var var1 = arg1;\n        var var2 = arg2;\n        var0 = func_21E8(var1, var2);\n    \n        if (!arg4) { assert(); }\n    \n        arg4 = var0 / arg4;\n        var0 = 0x00;\n    \n        if (arg3 < arg4) { return arg3; }\n        else { return arg4; }\n    }\n    \n    function kLast() returns (var r0) { return storage[0x0b]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x06;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x554e492d56320000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function MINIMUM_LIQUIDITY() returns (var r0) { return 0x03e8; }\n    \n    function func_19EE(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) returns (var r0) {\n        var temp0;\n        temp0, memory[arg5:arg5 + arg4] = address(arg8).staticcall.gas(msg.gas)(memory[arg7:arg7 + arg6]);\n        arg4 = !temp0;\n    \n        if (!arg4) {\n            arg1 = memory[0x40:0x60];\n            arg2 = returndata.length;\n        \n            if (arg2 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp1 = arg0;\n            arg0 = memory[arg1:arg1 + 0x20];\n            arg1 = temp1;\n            r0 = func_226E(arg0, arg1);\n            // Error: Could not resolve method call return address!\n        } else {\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_1A26(var arg0, var arg1, var arg2) {\n        func_1FDB(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function factory() returns (var r0) { return storage[0x05] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function token1() returns (var r0) { return storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function sync() {\n        if (storage[0x0c] == 0x01) {\n            storage[0x0c] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            var var0 = 0x1fd4;\n            var var1 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x70a08231;\n            var var3 = temp0 + 0x24;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = temp0 - var5 + 0x24;\n            var var7 = var5;\n            var var8 = var1;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            func_1EDD(var1, var2, var3, var4, var5, var6, var7, var8, var9);\n            storage[0x0c] = 0x01;\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x11;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function func_1EDD(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        var temp0;\n        temp0, memory[arg4:arg4 + arg3] = address(arg7).staticcall.gas(msg.gas)(memory[arg6:arg6 + arg5]);\n        arg3 = !temp0;\n    \n        if (!arg3) {\n            arg0 = memory[0x40:0x60];\n            arg1 = returndata.length;\n        \n            if (arg1 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            arg0 = memory[arg0:arg0 + 0x20];\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = address(this);\n            arg1 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n            arg2 = 0x70a08231;\n            arg3 = temp1 + 0x24;\n            arg4 = 0x20;\n            arg5 = memory[0x40:0x60];\n            arg6 = temp1 - arg5 + 0x24;\n            arg7 = arg5;\n            arg8 = arg1;\n            var var0 = !address(arg8).code.length;\n        \n            if (var0) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[arg5:arg5 + arg4] = address(arg8).staticcall.gas(msg.gas)(memory[arg7:arg7 + arg6]);\n            arg4 = !temp2;\n        \n            if (!arg4) {\n                arg1 = memory[0x40:0x60];\n                arg2 = returndata.length;\n            \n                if (arg2 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                arg1 = memory[arg1:arg1 + 0x20];\n                var temp3 = storage[0x08];\n                arg2 = temp3 & 0xffffffffffffffffffffffffffff;\n                arg3 = temp3 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n                func_22E0(arg0, arg1, arg2, arg3);\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp4 = returndata.length;\n                memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp5 = returndata.length;\n            memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_1FDB(var arg0, var arg1, var arg2) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x20] = 0x19;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7472616e7366657228616464726573732c75696e743235362900000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = arg2;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 - temp2 + 0x44;\n        memory[0x40:0x60] = temp1 + 0x64;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = (memory[temp3:temp3 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) | 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        var var0 = 0x00;\n        var var1 = 0x60;\n        var var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = temp2;\n        var var4 = memory[0x40:0x60];\n        var var5 = var4;\n        var var6 = temp3;\n        var var7 = memory[var3:var3 + 0x20];\n        var var8 = var7;\n        var var9 = var5;\n        var var10 = var6;\n    \n        if (var8 < 0x20) {\n        label_20E1:\n            var temp4 = 0x0100 ** (0x20 - var8) - 0x01;\n            var temp5 = var9;\n            memory[temp5:temp5 + 0x20] = (memory[var10:var10 + 0x20] & ~temp4) | (memory[temp5:temp5 + 0x20] & temp4);\n            var temp6 = memory[0x40:0x60];\n            var temp7;\n            temp7, memory[temp6:temp6 + 0x00] = address(var2).call.gas(msg.gas)(memory[temp6:temp6 + (var7 + var5) - temp6]);\n            var3 = returndata.length;\n            var4 = var3;\n        \n            if (var4 == 0x00) {\n                var1 = 0x60;\n                var temp8 = var2;\n                var0 = temp8;\n                var2 = var0;\n            \n                if (!var2) {\n                label_2176:\n                \n                    if (var2) { return; }\n                \n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                    memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x1a;\n                    memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x556e697377617056323a205452414e534645525f4641494c4544000000000000;\n                    var temp10 = memory[0x40:0x60];\n                    revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n                } else {\n                label_2155:\n                    var2 = !memory[var1:var1 + 0x20];\n                \n                    if (var2) { goto label_2176; }\n                \n                    var temp11 = var1;\n                    var2 = temp11 + 0x20;\n                    var3 = memory[temp11:temp11 + 0x20];\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = memory[var2:var2 + 0x20];\n                    goto label_2176;\n                }\n            } else {\n                var temp12 = memory[0x40:0x60];\n                var3 = temp12;\n                memory[0x40:0x60] = var3 + (returndata.length + 0x3f & ~0x1f);\n                memory[var3:var3 + 0x20] = returndata.length;\n                var temp13 = returndata.length;\n                memory[var3 + 0x20:var3 + 0x20 + temp13] = returndata[0x00:0x00 + temp13];\n                var1 = var3;\n                var temp14 = var2;\n                var0 = temp14;\n                var2 = var0;\n            \n                if (!var2) { goto label_2176; }\n                else { goto label_2155; }\n            }\n        } else {\n        label_20AD:\n            var temp15 = var10;\n            var temp16 = var9;\n            memory[temp16:temp16 + 0x20] = memory[temp15:temp15 + 0x20];\n            var8 = var8 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0;\n            var9 = temp16 + 0x20;\n            var10 = temp15 + 0x20;\n        \n            if (var8 < 0x20) { goto label_20E1; }\n            else { goto label_20AD; }\n        }\n    }\n    \n    function func_21E8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (var1) {\n        label_2203:\n        \n            if (var1) { return var0; }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x14;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        } else {\n            var0 = arg0 * arg1;\n            var1 = arg0;\n            var var2 = arg1;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2 == var1;\n            goto label_2203;\n        }\n    }\n    \n    function func_226E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 - arg1;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x15;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x64732d6d6174682d7375622d756e646572666c6f770000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_22E0(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = arg0 <= 0xffffffffffffffffffffffffffff;\n    \n        if (arg0 <= 0xffffffffffffffffffffffffffff) {\n            if (var0) {\n            label_2377:\n                var0 = block.timestamp & 0xffffffff;\n                var var1 = var0 - (storage[0x08] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff);\n                var var2 = !!(var1 & 0xffffffff);\n            \n                if (var1 & 0xffffffff) {\n                    var2 = !!(arg2 & 0xffffffffffffffffffffffffffff);\n                \n                    if (!var2) { goto label_23E2; }\n                    else { goto label_23CE; }\n                } else if (!var2) {\n                label_23E2:\n                \n                    if (!var2) {\n                    label_2492:\n                        var temp0 = (var0 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000 | (((arg1 & 0xffffffffffffffffffffffffffff) * 0x010000000000000000000000000000 | (((arg0 & 0xffffffffffffffffffffffffffff) | (storage[0x08] & 0xffffffffffffffffffffffffffffffffffff0000000000000000000000000000)) & 0xffffffff0000000000000000000000000000ffffffffffffffffffffffffffff)) & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n                        storage[0x08] = temp0;\n                        var temp1 = memory[0x40:0x60];\n                        memory[temp1:temp1 + 0x20] = temp0 & 0xffffffffffffffffffffffffffff;\n                        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n                        var temp2 = memory[0x40:0x60];\n                        log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1]);\n                        return;\n                    } else {\n                    label_23E8:\n                        var2 = var1 & 0xffffffff;\n                        var var3 = 0x2425;\n                        var var4 = arg2;\n                        var var5 = 0x23fb;\n                        var var6 = arg3;\n                        var5 = func_2A57(var6);\n                        var3 = func_23FB(var4, var5);\n                        storage[0x09] = (var3 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) * var2 + storage[0x09];\n                        var2 = var1 & 0xffffffff;\n                        var3 = 0x2465;\n                        var4 = arg3;\n                        var5 = 0x23fb;\n                        var6 = arg2;\n                        var5 = func_2A57(var6);\n                        var3 = func_23FB(var4, var5);\n                        storage[0x0a] = (var3 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) * var2 + storage[0x0a];\n                        goto label_2492;\n                    }\n                } else {\n                label_23CE:\n                \n                    if (!(arg3 & 0xffffffffffffffffffffffffffff)) { goto label_2492; }\n                    else { goto label_23E8; }\n                }\n            } else {\n            label_2311:\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n                memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x13;\n                memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x556e697377617056323a204f564552464c4f5700000000000000000000000000;\n                var temp4 = memory[0x40:0x60];\n                revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n            }\n        } else if (arg1 <= 0xffffffffffffffffffffffffffff) { goto label_2377; }\n        else { goto label_2311; }\n    }\n    \n    function func_23FB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = arg1 & 0xffffffffffffffffffffffffffff;\n        var var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function func_259C(var arg0, var arg1, var arg2) {\n        var temp0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = temp1;\n        var temp3 = arg2;\n        storage[keccak256(memory[0x00:0x40])] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var var0 = 0x2641;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg2;\n        var0 = func_226E(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var0 = 0x2683;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_2ABC(var1, var2);\n        var temp0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg2;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_26EC(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0x017e7e58;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n        var var4 = temp0 + 0x04;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = var2;\n        var var10 = !address(var9).code.length;\n    \n        if (var10) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var6:var6 + var5] = address(var9).staticcall.gas(msg.gas)(memory[var8:var8 + var7]);\n        var5 = !temp1;\n    \n        if (!var5) {\n            var2 = memory[0x40:0x60];\n            var3 = returndata.length;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var0 = !!(memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff);\n            var1 = memory[var2:var2 + 0x20];\n            var2 = storage[0x0b];\n        \n            if (!(memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff)) {\n                if (!var2) {\n                label_2870:\n                    return var0;\n                } else {\n                    storage[0x0b] = 0x00;\n                    return var0;\n                }\n            } else if (!var2) {\n            label_285F:\n                goto label_2870;\n            } else {\n                var3 = 0x00;\n                var4 = 0x27d8;\n                var5 = 0x1257;\n                var6 = arg0 & 0xffffffffffffffffffffffffffff;\n                var7 = arg1 & 0xffffffffffffffffffffffffffff;\n                var5 = func_21E8(var6, var7);\n                var4 = func_1257(var5);\n                var3 = var4;\n                var4 = 0x00;\n                var5 = 0x27e5;\n                var6 = var2;\n                var5 = func_2878(var6);\n                var4 = var5;\n            \n                if (var3 <= var4) {\n                label_285C:\n                    goto label_285F;\n                } else {\n                    var5 = 0x00;\n                    var6 = 0x2813;\n                    var7 = 0x2804;\n                    var8 = var3;\n                    var9 = var4;\n                    var7 = func_226E(var8, var9);\n                    var6 = func_2804(var7);\n                    var5 = var6;\n                    var6 = 0x00;\n                    var7 = 0x2838;\n                    var8 = var4;\n                    var9 = 0x282c;\n                    var10 = var3;\n                    var var11 = 0x05;\n                    var9 = func_21E8(var10, var11);\n                    var7 = func_282C(var8, var9);\n                    var temp2 = var7;\n                    var6 = temp2;\n                    var7 = 0x00;\n                    var8 = var6;\n                    var9 = var5;\n                \n                    if (!var8) { assert(); }\n                \n                    var7 = var9 / var8;\n                \n                    if (!var7) {\n                    label_2858:\n                        goto label_285C;\n                    } else {\n                        var8 = 0x2858;\n                        var9 = var1;\n                        var10 = var7;\n                        func_28CA(var9, var10);\n                        goto label_2858;\n                    }\n                }\n            }\n        } else {\n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_2804(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x00];\n        var var0 = temp0;\n        r0 = func_21E8(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_282C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_2ABC(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2878(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 > 0x03) {\n            var temp0 = arg0;\n            var0 = temp0;\n            var var1 = var0 / 0x02 + 0x01;\n        \n            if (var1 >= var0) {\n            label_28B5:\n                goto label_28C5;\n            } else {\n            label_2896:\n                var0 = var1;\n                var var2 = 0x02;\n                var var3 = var0;\n                var var4 = var3;\n                var var5 = arg0;\n            \n                if (!var4) { assert(); }\n            \n                var3 = var5 / var4 + var3;\n            \n                if (!var2) { assert(); }\n            \n                var1 = var3 / var2;\n            \n                if (var1 >= var0) { goto label_28B5; }\n                else { goto label_2896; }\n            }\n        } else if (!arg0) {\n        label_28C5:\n            return var0;\n        } else { return 0x01; }\n    }\n    \n    function func_28CA(var arg0, var arg1) {\n        var var0 = 0x28dd;\n        var var1 = storage[0x00];\n        var var2 = arg1;\n        var0 = func_2ABC(var1, var2);\n        storage[0x00] = var0;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x2915;\n        var2 = arg1;\n        var0 = func_2ABC(var1, var2);\n        var temp0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_2992(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x29c8;\n        var var2 = arg1;\n        var0 = func_226E(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x00];\n        var0 = 0x2a02;\n        var2 = arg1;\n        var0 = func_226E(var1, var2);\n        storage[0x00] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = arg1;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, 0x00]);\n    }\n    \n    function func_2A57(var arg0) returns (var r0) { return (arg0 & 0xffffffffffffffffffffffffffff) * 0x010000000000000000000000000000; }\n    \n    function func_2ABC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x14;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n}\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x6a627842 > var0) {\n            if (0x23b872dd > var0) {\n                if (0x095ea7b3 > var0) {\n                    if (var0 == 0x022c0d9f) {\n                        // Dispatch table entry for swap(uint256,uint256,address,bytes)\n                        var var1 = 0x0257;\n                        var var2 = 0x04;\n                        var var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n                    \n                        swap(var2, var3);\n                        stop();\n                    } else if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                        var1 = 0x0261;\n                        var2 = name();\n                    \n                    label_0261:\n                        var temp0 = memory[0x40:0x60];\n                        memory[temp0:temp0 + 0x20] = 0x20;\n                        var temp1 = var2;\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                        var3 = temp0;\n                        var var4 = var3;\n                        var var5 = var4 + 0x40;\n                        var var6 = temp1 + 0x20;\n                        var var7 = memory[temp1:temp1 + 0x20];\n                        var var8 = var7;\n                        var var9 = var5;\n                        var var10 = var6;\n                        var var11 = 0x00;\n                    \n                        if (var11 >= var8) {\n                        label_029B:\n                            var temp2 = var7;\n                            var5 = temp2 + var5;\n                            var6 = temp2 & 0x1f;\n                        \n                            if (!var6) {\n                                var temp3 = memory[0x40:0x60];\n                                return memory[temp3:temp3 + var5 - temp3];\n                            } else {\n                                var temp4 = var6;\n                                var temp5 = var5 - temp4;\n                                memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                                var temp6 = memory[0x40:0x60];\n                                return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                            }\n                        } else {\n                        label_028C:\n                            var temp7 = var11;\n                            memory[temp7 + var9:temp7 + var9 + 0x20] = memory[temp7 + var10:temp7 + var10 + 0x20];\n                            var11 = temp7 + 0x20;\n                        \n                            if (var11 >= var8) { goto label_029B; }\n                            else { goto label_028C; }\n                        }\n                    } else if (var0 == 0x0902f1ac) {\n                        // Dispatch table entry for getReserves()\n                        var1 = 0x02de;\n                        var1, var2, var3 = getReserves();\n                        var temp8 = memory[0x40:0x60];\n                        memory[temp8:temp8 + 0x20] = var1 & 0xffffffffffffffffffffffffffff;\n                        memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = var2 & 0xffffffffffffffffffffffffffff;\n                        memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = var3 & 0xffffffff;\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + temp8 - temp9 + 0x60];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = 0x034e;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = approve(var2, var3);\n                \n                label_034E:\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = !!var1;\n                    var temp11 = memory[0x40:0x60];\n                    return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n                } else if (var0 == 0x0dfe1681) {\n                    // Dispatch table entry for token0()\n                    var1 = 0x036a;\n                    var2 = token0();\n                \n                label_036A:\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp13 = memory[0x40:0x60];\n                    return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = 0x039b;\n                    var2 = totalSupply();\n                \n                label_039B:\n                    var temp14 = memory[0x40:0x60];\n                    memory[temp14:temp14 + 0x20] = var2;\n                    var temp15 = memory[0x40:0x60];\n                    return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0x3644e515 > var0) {\n                if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = 0x034e;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var1 = transferFrom(var2, var3);\n                    goto label_034E;\n                } else if (var0 == 0x30adf81f) {\n                    // Dispatch table entry for PERMIT_TYPEHASH()\n                    var1 = 0x039b;\n                    var2 = PERMIT_TYPEHASH();\n                    goto label_039B;\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = 0x0400;\n                    var2 = decimals();\n                    var temp16 = memory[0x40:0x60];\n                    memory[temp16:temp16 + 0x20] = var2 & 0xff;\n                    var temp17 = memory[0x40:0x60];\n                    return memory[temp17:temp17 + temp16 - temp17 + 0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x3644e515) {\n                // Dispatch table entry for DOMAIN_SEPARATOR()\n                var1 = 0x039b;\n                var2 = DOMAIN_SEPARATOR();\n                goto label_039B;\n            } else if (var0 == 0x485cc955) {\n                // Dispatch table entry for initialize(address,address)\n                var1 = 0x0257;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                initialize(var2, var3);\n                stop();\n            } else if (var0 == 0x5909c0d5) {\n                // Dispatch table entry for price0CumulativeLast()\n                var1 = 0x039b;\n                var2 = price0CumulativeLast();\n                goto label_039B;\n            } else if (var0 == 0x5a3d5493) {\n                // Dispatch table entry for price1CumulativeLast()\n                var1 = 0x039b;\n                var2 = price1CumulativeLast();\n                goto label_039B;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xba9a7a56 > var0) {\n            if (0x7ecebe00 > var0) {\n                if (var0 == 0x6a627842) {\n                    // Dispatch table entry for mint(address)\n                    var1 = 0x039b;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = mint(var2, var3);\n                    goto label_039B;\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = 0x039b;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = balanceOf(var2, var3);\n                    goto label_039B;\n                } else if (var0 == 0x7464fc3d) {\n                    // Dispatch table entry for kLast()\n                    var1 = 0x039b;\n                    var2 = kLast();\n                    goto label_039B;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x7ecebe00) {\n                // Dispatch table entry for nonces(address)\n                var1 = 0x039b;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = nonces(var2, var3);\n                goto label_039B;\n            } else if (var0 == 0x89afcb44) {\n                // Dispatch table entry for burn(address)\n                var1 = 0x053d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1, var2 = burn(var2, var3);\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var1;\n                memory[temp18 + 0x20:temp18 + 0x20 + 0x20] = var2;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + temp18 - temp19 + 0x40];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x0261;\n                var2 = symbol();\n                goto label_0261;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = 0x034e;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var temp20 = var2;\n                var2 = msg.data[temp20:temp20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[temp20 + 0x20:temp20 + 0x20 + 0x20];\n                var4 = 0x00;\n                var5 = 0x0df2;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = var3;\n                transfer(var6, var7, var8);\n                var4 = 0x01;\n                var1 = var4;\n                // Error: Could not resolve jump destination!\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xd21220a7 > var0) {\n            if (var0 == 0xba9a7a56) {\n                // Dispatch table entry for MINIMUM_LIQUIDITY()\n                var1 = 0x039b;\n                var2 = MINIMUM_LIQUIDITY();\n                goto label_039B;\n            } else if (var0 == 0xbc25cf77) {\n                // Dispatch table entry for skim(address)\n                var1 = 0x0257;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                skim(var2, var3);\n                stop();\n            } else if (var0 == 0xc45a0155) {\n                // Dispatch table entry for factory()\n                var1 = 0x036a;\n                var2 = factory();\n                goto label_036A;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xd21220a7) {\n            // Dispatch table entry for token1()\n            var1 = 0x036a;\n            var2 = token1();\n            goto label_036A;\n        } else if (var0 == 0xd505accf) {\n            // Dispatch table entry for permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\n            var1 = 0x0257;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0xe0) { revert(memory[0x00:0x00]); }\n        \n            permit(var2, var3);\n            stop();\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x039b;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var2 = allowance(var2, var3);\n            goto label_039B;\n        } else if (var0 == 0xfff6cae9) {\n            // Dispatch table entry for sync()\n            var1 = 0x0257;\n            sync();\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function swap(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = temp0 + temp1;\n        var var2 = temp0;\n        var var3 = var2 + 0x80;\n        var var4 = msg.data[var2 + 0x60:var2 + 0x60 + 0x20];\n    \n        if (var4 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var2 + var4;\n        var4 = temp2;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var4;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var4 = temp4;\n        var var5 = var3;\n        var3 = temp3 + 0x20;\n    \n        if ((var4 > 0x0100000000) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var1 = var3;\n        var2 = var4;\n    \n        if (storage[0x0c] == 0x01) {\n            storage[0x0c] = 0x00;\n            var3 = !!arg0;\n        \n            if (var3) {\n                if (var3) {\n                label_075C:\n                    var3 = 0x00;\n                    var4 = var3;\n                    var5 = 0x0767;\n                    var var6;\n                    var var7;\n                    var5, var6, var7 = getReserves();\n                    var4 = var6;\n                    var3 = var5;\n                    var temp5 = arg0 < var3 & 0xffffffffffffffffffffffffffff;\n                    var5 = temp5;\n                \n                    if (!var5) {\n                        if (var5) {\n                        label_07EF:\n                            var5 = 0x00;\n                            var6 = var5;\n                            var7 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var var8 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var var9 = var7 != var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        \n                            if (var7 != var0 & 0xffffffffffffffffffffffffffffffffffffffff) {\n                                if (var9) {\n                                label_08BF:\n                                \n                                    if (!arg0) {\n                                    label_08D0:\n                                    \n                                        if (!arg1) {\n                                        label_08E1:\n                                        \n                                            if (!var2) {\n                                            label_09C3:\n                                                var temp6 = memory[0x40:0x60];\n                                                memory[temp6:temp6 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                                memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = address(this);\n                                                var9 = var7 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                var var10 = 0x70a08231;\n                                                var var11 = temp6 + 0x24;\n                                                var var12 = 0x20;\n                                                var var13 = memory[0x40:0x60];\n                                                var var14 = temp6 - var13 + 0x24;\n                                                var var15 = var13;\n                                                var var16 = var9;\n                                                var var17 = !address(var16).code.length;\n                                            \n                                                if (var17) { revert(memory[0x00:0x00]); }\n                                            \n                                                var temp7;\n                                                temp7, memory[var13:var13 + var12] = address(var16).staticcall.gas(msg.gas)(memory[var15:var15 + var14]);\n                                                var12 = !temp7;\n                                            \n                                                if (!var12) {\n                                                    var9 = memory[0x40:0x60];\n                                                    var10 = returndata.length;\n                                                \n                                                    if (var10 < 0x20) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp8 = memory[var9:var9 + 0x20];\n                                                    var temp9 = memory[0x40:0x60];\n                                                    memory[temp9:temp9 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                                    memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = address(this);\n                                                    var5 = temp8;\n                                                    var9 = var8 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                    var10 = 0x70a08231;\n                                                    var11 = temp9 + 0x24;\n                                                    var12 = 0x20;\n                                                    var13 = memory[0x40:0x60];\n                                                    var14 = temp9 - var13 + 0x24;\n                                                    var15 = var13;\n                                                    var16 = var9;\n                                                    var17 = !address(var16).code.length;\n                                                \n                                                    if (var17) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp10;\n                                                    temp10, memory[var13:var13 + var12] = address(var16).staticcall.gas(msg.gas)(memory[var15:var15 + var14]);\n                                                    var12 = !temp10;\n                                                \n                                                    if (!var12) {\n                                                        var9 = memory[0x40:0x60];\n                                                        var10 = returndata.length;\n                                                    \n                                                        if (var10 < 0x20) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var6 = memory[var9:var9 + 0x20];\n                                                        var7 = 0x00;\n                                                    \n                                                        if (var5 > (var3 & 0xffffffffffffffffffffffffffff) - arg0) {\n                                                            var7 = var5 - ((var3 & 0xffffffffffffffffffffffffffff) - arg0);\n                                                            var8 = 0x00;\n                                                        \n                                                            if (var6 > (var4 & 0xffffffffffffffffffffffffffff) - arg1) {\n                                                            label_0B59:\n                                                                var8 = var6 - ((var4 & 0xffffffffffffffffffffffffffff) - arg1);\n                                                                var9 = var7 > 0x00;\n                                                            \n                                                                if (var9) {\n                                                                label_0B80:\n                                                                \n                                                                    if (var9) {\n                                                                    label_0BD5:\n                                                                        var9 = 0x00;\n                                                                        var10 = 0x0c09;\n                                                                        var11 = 0x0beb;\n                                                                        var12 = var7;\n                                                                        var13 = 0x03;\n                                                                        var11 = func_21E8(var12, var13);\n                                                                        var10 = func_0BEB(var5, var11);\n                                                                        var9 = var10;\n                                                                        var10 = 0x00;\n                                                                        var11 = 0x0c21;\n                                                                        var12 = 0x0beb;\n                                                                        var13 = var8;\n                                                                        var14 = 0x03;\n                                                                        var12 = func_21E8(var13, var14);\n                                                                        var11 = func_0BEB(var6, var12);\n                                                                        var10 = var11;\n                                                                        var11 = 0x0c59;\n                                                                        var12 = 0x0f4240;\n                                                                        var13 = 0x0c4d;\n                                                                        var14 = var3 & 0xffffffffffffffffffffffffffff;\n                                                                        var15 = var4 & 0xffffffffffffffffffffffffffff;\n                                                                        var13 = func_21E8(var14, var15);\n                                                                        var11 = func_0C4D(var12, var13);\n                                                                        var12 = 0x0c69;\n                                                                        var13 = var9;\n                                                                        var14 = var10;\n                                                                        var12 = func_21E8(var13, var14);\n                                                                    \n                                                                        if (var12 >= var11) {\n                                                                            var9 = 0x0ce4;\n                                                                            var10 = var5;\n                                                                            var11 = var6;\n                                                                            var12 = var3;\n                                                                            var13 = var4;\n                                                                            func_22E0(var10, var11, var12, var13);\n                                                                            var temp11 = memory[0x40:0x60];\n                                                                            memory[temp11:temp11 + 0x20] = var7;\n                                                                            memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = var8;\n                                                                            memory[temp11 + 0x40:temp11 + 0x40 + 0x20] = arg0;\n                                                                            memory[temp11 + 0x60:temp11 + 0x60 + 0x20] = arg1;\n                                                                            var temp12 = memory[0x40:0x60];\n                                                                            log(memory[temp12:temp12 + temp11 - temp12 + 0x80], [0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822, msg.sender, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                                                            storage[0x0c] = 0x01;\n                                                                            return;\n                                                                        } else {\n                                                                            var temp13 = memory[0x40:0x60];\n                                                                            memory[temp13:temp13 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                                                                            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n                                                                            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x0c;\n                                                                            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x556e697377617056323a204b0000000000000000000000000000000000000000;\n                                                                            var temp14 = memory[0x40:0x60];\n                                                                            revert(memory[temp14:temp14 + temp13 - temp14 + 0x64]);\n                                                                        }\n                                                                    } else {\n                                                                    label_0B85:\n                                                                        var temp15 = memory[0x40:0x60];\n                                                                        memory[temp15:temp15 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                                                                        var temp16 = temp15 + 0x04;\n                                                                        var temp17 = temp16 + 0x20;\n                                                                        memory[temp16:temp16 + 0x20] = temp17 - temp16;\n                                                                        memory[temp17:temp17 + 0x20] = 0x24;\n                                                                        var temp18 = temp17 + 0x20;\n                                                                        memory[temp18:temp18 + 0x24] = code[0x2b54:0x2b78];\n                                                                        var temp19 = memory[0x40:0x60];\n                                                                        revert(memory[temp19:temp19 + (temp18 + 0x40) - temp19]);\n                                                                    }\n                                                                } else {\n                                                                label_0B7B:\n                                                                \n                                                                    if (var8 > 0x00) { goto label_0BD5; }\n                                                                    else { goto label_0B85; }\n                                                                }\n                                                            } else {\n                                                            label_0B53:\n                                                                var9 = 0x00;\n                                                                var8 = var9;\n                                                                var9 = var7 > 0x00;\n                                                            \n                                                                if (var9) { goto label_0B80; }\n                                                                else { goto label_0B7B; }\n                                                            }\n                                                        } else {\n                                                            var8 = 0x00;\n                                                            var7 = var8;\n                                                            var8 = 0x00;\n                                                        \n                                                            if (var6 > (var4 & 0xffffffffffffffffffffffffffff) - arg1) { goto label_0B59; }\n                                                            else { goto label_0B53; }\n                                                        }\n                                                    } else {\n                                                        var temp20 = returndata.length;\n                                                        memory[0x00:0x00 + temp20] = returndata[0x00:0x00 + temp20];\n                                                        revert(memory[0x00:0x00 + returndata.length]);\n                                                    }\n                                                } else {\n                                                    var temp21 = returndata.length;\n                                                    memory[0x00:0x00 + temp21] = returndata[0x00:0x00 + temp21];\n                                                    revert(memory[0x00:0x00 + returndata.length]);\n                                                }\n                                            } else {\n                                                var9 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                var10 = 0x10d1e85c;\n                                                var temp22 = var2;\n                                                var temp23 = memory[0x40:0x60];\n                                                memory[temp23:temp23 + 0x20] = (var10 & 0xffffffff) << 0xe0;\n                                                var temp24 = temp23 + 0x04;\n                                                memory[temp24:temp24 + 0x20] = msg.sender;\n                                                var temp25 = temp24 + 0x20;\n                                                memory[temp25:temp25 + 0x20] = arg0;\n                                                var temp26 = temp25 + 0x20;\n                                                memory[temp26:temp26 + 0x20] = arg1;\n                                                var temp27 = temp26 + 0x20;\n                                                var temp28 = temp27 + 0x20;\n                                                memory[temp27:temp27 + 0x20] = temp28 - temp24;\n                                                memory[temp28:temp28 + 0x20] = temp22;\n                                                var temp29 = temp28 + 0x20;\n                                                memory[temp29:temp29 + temp22] = msg.data[var1:var1 + temp22];\n                                                memory[temp29 + temp22:temp29 + temp22 + 0x20] = 0x00;\n                                                var11 = temp29 + (temp22 + 0x1f & ~0x1f);\n                                                var12 = 0x00;\n                                                var13 = memory[0x40:0x60];\n                                                var14 = var11 - var13;\n                                                var15 = var13;\n                                                var16 = 0x00;\n                                                var17 = var9;\n                                                var var18 = !address(var17).code.length;\n                                            \n                                                if (var18) { revert(memory[0x00:0x00]); }\n                                            \n                                                var temp30;\n                                                temp30, memory[var13:var13 + var12] = address(var17).call.gas(msg.gas).value(var16)(memory[var15:var15 + var14]);\n                                                var12 = !temp30;\n                                            \n                                                if (!var12) { goto label_09C3; }\n                                            \n                                                var temp31 = returndata.length;\n                                                memory[0x00:0x00 + temp31] = returndata[0x00:0x00 + temp31];\n                                                revert(memory[0x00:0x00 + returndata.length]);\n                                            }\n                                        } else {\n                                            var9 = 0x08e1;\n                                            var10 = var8;\n                                            var11 = var0;\n                                            var12 = arg1;\n                                            func_1FDB(var10, var11, var12);\n                                            goto label_08E1;\n                                        }\n                                    } else {\n                                        var9 = 0x08d0;\n                                        var10 = var7;\n                                        var11 = var0;\n                                        var12 = arg0;\n                                        func_1FDB(var10, var11, var12);\n                                        goto label_08D0;\n                                    }\n                                } else {\n                                label_0859:\n                                    var temp32 = memory[0x40:0x60];\n                                    memory[temp32:temp32 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                                    memory[temp32 + 0x04:temp32 + 0x04 + 0x20] = 0x20;\n                                    memory[temp32 + 0x24:temp32 + 0x24 + 0x20] = 0x15;\n                                    memory[temp32 + 0x44:temp32 + 0x44 + 0x20] = 0x556e697377617056323a20494e56414c49445f544f0000000000000000000000;\n                                    var temp33 = memory[0x40:0x60];\n                                    revert(memory[temp33:temp33 + temp32 - temp33 + 0x64]);\n                                }\n                            } else if (var0 & 0xffffffffffffffffffffffffffffffffffffffff != var8 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_08BF; }\n                            else { goto label_0859; }\n                        } else {\n                        label_079F:\n                            var temp34 = memory[0x40:0x60];\n                            memory[temp34:temp34 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp35 = temp34 + 0x04;\n                            var temp36 = temp35 + 0x20;\n                            memory[temp35:temp35 + 0x20] = temp36 - temp35;\n                            memory[temp36:temp36 + 0x20] = 0x21;\n                            var temp37 = temp36 + 0x20;\n                            memory[temp37:temp37 + 0x21] = code[0x2b78:0x2b99];\n                            var temp38 = memory[0x40:0x60];\n                            revert(memory[temp38:temp38 + (temp37 + 0x40) - temp38]);\n                        }\n                    } else if (arg1 < var4 & 0xffffffffffffffffffffffffffff) { goto label_07EF; }\n                    else { goto label_079F; }\n                } else {\n                label_070C:\n                    var temp39 = memory[0x40:0x60];\n                    memory[temp39:temp39 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp40 = temp39 + 0x04;\n                    var temp41 = temp40 + 0x20;\n                    memory[temp40:temp40 + 0x20] = temp41 - temp40;\n                    memory[temp41:temp41 + 0x20] = 0x25;\n                    var temp42 = temp41 + 0x20;\n                    memory[temp42:temp42 + 0x25] = code[0x2b2f:0x2b54];\n                    var temp43 = memory[0x40:0x60];\n                    revert(memory[temp43:temp43 + (temp42 + 0x40) - temp43]);\n                }\n            } else if (arg1 > 0x00) { goto label_075C; }\n            else { goto label_070C; }\n        } else {\n            var temp44 = memory[0x40:0x60];\n            memory[temp44:temp44 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp44 + 0x04:temp44 + 0x04 + 0x20] = 0x20;\n            memory[temp44 + 0x24:temp44 + 0x24 + 0x20] = 0x11;\n            memory[temp44 + 0x44:temp44 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp45 = memory[0x40:0x60];\n            revert(memory[temp45:temp45 + temp44 - temp45 + 0x64]);\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0df2;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_259C(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        var var1 = 0x00;\n        memory[var1:var1 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[var1:var1 + 0x40]);\n        memory[var1:var1 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        label_0EE8:\n            var var2 = 0x0ef3;\n            var var3 = arg0;\n            var var4 = arg1;\n            var var5 = var0;\n            transfer(var3, var4, var5);\n            return 0x01;\n        } else {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp2;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n            var2 = 0x0eb6;\n            var4 = var0;\n            var2 = func_226E(var3, var4);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp3;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n            goto label_0EE8;\n        }\n    }\n    \n    function initialize(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender == storage[0x05] & 0xffffffffffffffffffffffffffffffffffffffff) {\n            storage[0x06] = (storage[0x06] & 0xffffffffffffffffffffffff0000000000000000000000000000000000000000) | (arg0 & 0xffffffffffffffffffffffffffffffffffffffff);\n            storage[0x07] = (storage[0x07] & 0xffffffffffffffffffffffff0000000000000000000000000000000000000000) | (arg1 & 0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x14;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x556e697377617056323a20464f5242494444454e000000000000000000000000;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function mint(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x00;\n    \n        if (storage[0x0c] == 0x01) {\n            var var0 = 0x00;\n            storage[0x0c] = var0;\n            var var1 = var0;\n            var var2 = 0x1094;\n            var var3;\n            var var4;\n            var2, var3, var4 = getReserves();\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            var0 = var2;\n            var1 = var3;\n            var2 = 0x00;\n            var3 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = 0x70a08231;\n            var var5 = temp0 + 0x24;\n            var var6 = 0x20;\n            var var7 = memory[0x40:0x60];\n            var var8 = temp0 - var7 + 0x24;\n            var var9 = var7;\n            var var10 = var3;\n            var var11 = !address(var10).code.length;\n        \n            if (var11) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var7:var7 + var6] = address(var10).staticcall.gas(msg.gas)(memory[var9:var9 + var8]);\n            var6 = !temp1;\n        \n            if (!var6) {\n                var3 = memory[0x40:0x60];\n                var4 = returndata.length;\n            \n                if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp2 = memory[var3:var3 + 0x20];\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = address(this);\n                var2 = temp2;\n                var3 = 0x00;\n                var4 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var5 = 0x70a08231;\n                var6 = temp3 + 0x24;\n                var7 = 0x20;\n                var8 = memory[0x40:0x60];\n                var9 = temp3 - var8 + 0x24;\n                var10 = var8;\n                var11 = var4;\n                var var12 = !address(var11).code.length;\n            \n                if (var12) { revert(memory[0x00:0x00]); }\n            \n                var temp4;\n                temp4, memory[var8:var8 + var7] = address(var11).staticcall.gas(msg.gas)(memory[var10:var10 + var9]);\n                var7 = !temp4;\n            \n                if (!var7) {\n                    var4 = memory[0x40:0x60];\n                    var5 = returndata.length;\n                \n                    if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var3 = memory[var4:var4 + 0x20];\n                    var4 = 0x00;\n                    var5 = 0x1201;\n                    var6 = var2;\n                    var7 = var0 & 0xffffffffffffffffffffffffffff;\n                    var5 = func_226E(var6, var7);\n                    var4 = var5;\n                    var5 = 0x00;\n                    var6 = 0x1225;\n                    var7 = var3;\n                    var8 = var1 & 0xffffffffffffffffffffffffffff;\n                    var6 = func_226E(var7, var8);\n                    var5 = var6;\n                    var6 = 0x00;\n                    var7 = 0x1233;\n                    var8 = var0;\n                    var9 = var1;\n                    var7 = func_26EC(var8, var9);\n                    var temp5 = var7;\n                    var7 = storage[0x00];\n                    var6 = temp5;\n                \n                    if (var7) {\n                        var8 = 0x12ca;\n                        var9 = var0 & 0xffffffffffffffffffffffffffff;\n                        var10 = 0x1294;\n                        var11 = var4;\n                        var12 = var7;\n                        var10 = func_21E8(var11, var12);\n                        var8 = func_1294(var1, var5, var7, var9, var10);\n                        arg1 = var8;\n                    \n                        if (arg1 > 0x00) {\n                            var8 = 0x1330;\n                            var9 = arg0;\n                            var10 = arg1;\n                            func_28CA(var9, var10);\n                            var8 = 0x133c;\n                            var9 = var2;\n                            var10 = var3;\n                            var11 = var0;\n                            var12 = var1;\n                            func_22E0(var9, var10, var11, var12);\n                        \n                            if (!var6) {\n                            label_137E:\n                                var temp6 = memory[0x40:0x60];\n                                memory[temp6:temp6 + 0x20] = var4;\n                                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var5;\n                                var temp7 = memory[0x40:0x60];\n                                log(memory[temp7:temp7 + temp6 - temp7 + 0x40], [0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f, msg.sender]);\n                                storage[0x0c] = 0x01;\n                                return arg1;\n                            } else {\n                                var temp8 = storage[0x08];\n                                var8 = 0x137a;\n                                var9 = temp8 & 0xffffffffffffffffffffffffffff;\n                                var10 = temp8 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n                                var8 = func_21E8(var9, var10);\n                                storage[0x0b] = var8;\n                                goto label_137E;\n                            }\n                        } else {\n                            var temp9 = memory[0x40:0x60];\n                            memory[temp9:temp9 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp10 = temp9 + 0x04;\n                            var temp11 = temp10 + 0x20;\n                            memory[temp10:temp10 + 0x20] = temp11 - temp10;\n                            memory[temp11:temp11 + 0x20] = 0x28;\n                            var temp12 = temp11 + 0x20;\n                            memory[temp12:temp12 + 0x28] = code[0x2bc1:0x2be9];\n                            var temp13 = memory[0x40:0x60];\n                            revert(memory[temp13:temp13 + (temp12 + 0x40) - temp13]);\n                        }\n                    } else {\n                        var8 = 0x125c;\n                        var9 = 0x03e8;\n                        var10 = 0x0bfd;\n                        var11 = 0x1257;\n                        var12 = var4;\n                        var var13 = var5;\n                        var11 = func_21E8(var12, var13);\n                        var10 = func_1257(var11);\n                        var temp14 = var9;\n                        var9 = var10;\n                        var10 = temp14;\n                        var8 = func_226E(var9, var10);\n                        // Error: Could not resolve method call return address!\n                    }\n                } else {\n                    var temp15 = returndata.length;\n                    memory[0x00:0x00 + temp15] = returndata[0x00:0x00 + temp15];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp16 = returndata.length;\n                memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x11;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp18 = memory[0x40:0x60];\n            revert(memory[temp18:temp18 + temp17 - temp18 + 0x64]);\n        }\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function nonces(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function burn(var arg0, var arg1) returns (var r0, var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x00;\n        var var0 = arg1;\n    \n        if (storage[0x0c] == 0x01) {\n            var var1 = 0x00;\n            storage[0x0c] = var1;\n            var var2 = var1;\n            var var3 = 0x1479;\n            var var4;\n            var var5;\n            var3, var4, var5 = getReserves();\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            var1 = var3;\n            var2 = var4;\n            var3 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var5 = 0x00;\n            var var6 = var3;\n            var var7 = 0x70a08231;\n            var var8 = temp0 + 0x24;\n            var var9 = 0x20;\n            var var10 = memory[0x40:0x60];\n            var var11 = temp0 - var10 + 0x24;\n            var var12 = var10;\n            var var13 = var6;\n            var var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n            var9 = !temp1;\n        \n            if (!var9) {\n                var6 = memory[0x40:0x60];\n                var7 = returndata.length;\n            \n                if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp2 = memory[var6:var6 + 0x20];\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = address(this);\n                var5 = temp2;\n                var6 = 0x00;\n                var7 = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var8 = 0x70a08231;\n                var9 = temp3 + 0x24;\n                var10 = 0x20;\n                var11 = memory[0x40:0x60];\n                var12 = temp3 - var11 + 0x24;\n                var13 = var11;\n                var14 = var7;\n                var var15 = !address(var14).code.length;\n            \n                if (var15) { revert(memory[0x00:0x00]); }\n            \n                var temp4;\n                temp4, memory[var11:var11 + var10] = address(var14).staticcall.gas(msg.gas)(memory[var13:var13 + var12]);\n                var10 = !temp4;\n            \n                if (!var10) {\n                    var7 = memory[0x40:0x60];\n                    var8 = returndata.length;\n                \n                    if (var8 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp5 = memory[var7:var7 + 0x20];\n                    var8 = 0x00;\n                    memory[var8:var8 + 0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    var7 = storage[keccak256(memory[var8:var8 + 0x40])];\n                    var6 = temp5;\n                    var9 = 0x15e2;\n                    var10 = var1;\n                    var11 = var2;\n                    var9 = func_26EC(var10, var11);\n                    var temp6 = var9;\n                    var9 = storage[0x00];\n                    var8 = temp6;\n                    var10 = var9;\n                    var11 = 0x15f9;\n                    var12 = var7;\n                    var13 = var5;\n                    var11 = func_21E8(var12, var13);\n                \n                    if (!var10) { assert(); }\n                \n                    arg1 = var11 / var10;\n                    var10 = var9;\n                    var11 = 0x1614;\n                    var12 = var7;\n                    var13 = var6;\n                    var11 = func_21E8(var12, var13);\n                \n                    if (!var10) { assert(); }\n                \n                    var0 = var11 / var10;\n                    var10 = arg1 > 0x00;\n                \n                    if (!var10) {\n                        if (var10) {\n                        label_1683:\n                            var10 = 0x168d;\n                            var11 = address(this);\n                            var12 = var7;\n                            func_2992(var11, var12);\n                            var10 = 0x1698;\n                            var11 = var3;\n                            var12 = arg0;\n                            var13 = arg1;\n                            func_1FDB(var11, var12, var13);\n                            var10 = 0x16a3;\n                            var11 = var4;\n                            var12 = arg0;\n                            var13 = var0;\n                            func_1FDB(var11, var12, var13);\n                            var temp7 = memory[0x40:0x60];\n                            memory[temp7:temp7 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = address(this);\n                            var10 = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var11 = 0x70a08231;\n                            var12 = temp7 + 0x24;\n                            var13 = 0x20;\n                            var14 = memory[0x40:0x60];\n                            var15 = temp7 - var14 + 0x24;\n                            var var16 = var14;\n                            var var17 = var10;\n                            var var18 = !address(var17).code.length;\n                        \n                            if (var18) { revert(memory[0x00:0x00]); }\n                        \n                            var temp8;\n                            temp8, memory[var14:var14 + var13] = address(var17).staticcall.gas(msg.gas)(memory[var16:var16 + var15]);\n                            var13 = !temp8;\n                        \n                            if (!var13) {\n                                var10 = memory[0x40:0x60];\n                                var11 = returndata.length;\n                            \n                                if (var11 < 0x20) { revert(memory[0x00:0x00]); }\n                            \n                                var temp9 = memory[var10:var10 + 0x20];\n                                var temp10 = memory[0x40:0x60];\n                                memory[temp10:temp10 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = address(this);\n                                var5 = temp9;\n                                var10 = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                var11 = 0x70a08231;\n                                var12 = temp10 + 0x24;\n                                var13 = 0x20;\n                                var14 = memory[0x40:0x60];\n                                var15 = temp10 - var14 + 0x24;\n                                var16 = var14;\n                                var17 = var10;\n                                var18 = !address(var17).code.length;\n                            \n                                if (var18) { revert(memory[0x00:0x00]); }\n                            \n                                var temp11;\n                                temp11, memory[var14:var14 + var13] = address(var17).staticcall.gas(msg.gas)(memory[var16:var16 + var15]);\n                                var13 = !temp11;\n                            \n                                if (!var13) {\n                                    var10 = memory[0x40:0x60];\n                                    var11 = returndata.length;\n                                \n                                    if (var11 < 0x20) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp12 = memory[var10:var10 + 0x20];\n                                    var6 = temp12;\n                                    var10 = 0x17e5;\n                                    var11 = var5;\n                                    var12 = var6;\n                                    var13 = var1;\n                                    var14 = var2;\n                                    func_22E0(var11, var12, var13, var14);\n                                \n                                    if (!var8) {\n                                    label_1827:\n                                        var temp13 = memory[0x40:0x60];\n                                        memory[temp13:temp13 + 0x20] = arg1;\n                                        memory[temp13 + 0x20:temp13 + 0x20 + 0x20] = var0;\n                                        var temp14 = memory[0x40:0x60];\n                                        log(memory[temp14:temp14 + temp13 - temp14 + 0x40], [0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496, msg.sender, stack[-12] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                        storage[0x0c] = 0x01;\n                                        arg0 = var0;\n                                        r0 = arg1;\n                                        return r0, arg0;\n                                    } else {\n                                        var temp15 = storage[0x08];\n                                        var10 = 0x1823;\n                                        var11 = temp15 & 0xffffffffffffffffffffffffffff;\n                                        var12 = temp15 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n                                        var10 = func_21E8(var11, var12);\n                                        storage[0x0b] = var10;\n                                        goto label_1827;\n                                    }\n                                } else {\n                                    var temp16 = returndata.length;\n                                    memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                                    revert(memory[0x00:0x00 + returndata.length]);\n                                }\n                            } else {\n                                var temp17 = returndata.length;\n                                memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                        label_1633:\n                            var temp18 = memory[0x40:0x60];\n                            memory[temp18:temp18 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp19 = temp18 + 0x04;\n                            var temp20 = temp19 + 0x20;\n                            memory[temp19:temp19 + 0x20] = temp20 - temp19;\n                            memory[temp20:temp20 + 0x20] = 0x28;\n                            var temp21 = temp20 + 0x20;\n                            memory[temp21:temp21 + 0x28] = code[0x2b99:0x2bc1];\n                            var temp22 = memory[0x40:0x60];\n                            revert(memory[temp22:temp22 + (temp21 + 0x40) - temp22]);\n                        }\n                    } else if (var0 > 0x00) { goto label_1683; }\n                    else { goto label_1633; }\n                } else {\n                    var temp23 = returndata.length;\n                    memory[0x00:0x00 + temp23] = returndata[0x00:0x00 + temp23];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp24 = returndata.length;\n                memory[0x00:0x00 + temp24] = returndata[0x00:0x00 + temp24];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n            memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x11;\n            memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp26 = memory[0x40:0x60];\n            revert(memory[temp26:temp26 + temp25 - temp26 + 0x64]);\n        }\n    }\n    \n    function skim(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (storage[0x0c] == 0x01) {\n            storage[0x0c] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            arg1 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var0 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x1a2b;\n            var var2 = arg1;\n            var var3 = arg0;\n            var var4 = 0x1a26;\n            var var5 = storage[0x08] & 0xffffffffffffffffffffffffffff;\n            var var6 = var2;\n            var var7 = 0x70a08231;\n            var var8 = temp0 + 0x24;\n            var var9 = 0x20;\n            var var10 = memory[0x40:0x60];\n            var var11 = temp0 - var10 + 0x24;\n            var var12 = var10;\n            var var13 = var6;\n            var var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var4 = func_19EE(var5, var6, var7, var8, var9, var10, var11, var12, var13, var14);\n            func_1A26(var2, var3, var4);\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = address(this);\n            var1 = 0x1aca;\n            var2 = var0;\n            var3 = arg0;\n            var4 = 0x1a26;\n            var5 = storage[0x08] / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n            var6 = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var7 = 0x70a08231;\n            var8 = temp1 + 0x24;\n            var9 = 0x20;\n            var10 = memory[0x40:0x60];\n            var11 = temp1 - var10 + 0x24;\n            var12 = var10;\n            var13 = var6;\n            var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var4 = func_19EE(var5, var6, var7, var8, var9, var10, var11, var12, var13, var14);\n            func_1A26(var2, var3, var4);\n            storage[0x0c] = 0x01;\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x11;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        }\n    }\n    \n    function permit(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        var var1 = msg.data[temp0 + 0x60:temp0 + 0x60 + 0x20];\n        var var2 = msg.data[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0xff;\n        var var3 = msg.data[temp0 + 0xa0:temp0 + 0xa0 + 0x20];\n        var var4 = msg.data[temp0 + 0xc0:temp0 + 0xc0 + 0x20];\n    \n        if (var1 >= block.timestamp) {\n            var temp1 = storage[0x03];\n            var temp2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x04;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = storage[temp3];\n            storage[temp3] = temp4 + 0x01;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n            memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = temp2;\n            memory[temp5 + 0x60:temp5 + 0x60 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[temp5 + 0x80:temp5 + 0x80 + 0x20] = var0;\n            memory[temp5 + 0xa0:temp5 + 0xa0 + 0x20] = temp4;\n            memory[temp5 + 0xc0:temp5 + 0xc0 + 0x20] = var1;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp5 - temp6 + 0xc0;\n            memory[0x40:0x60] = temp5 + 0xe0;\n            var temp7 = keccak256(memory[temp6 + 0x20:temp6 + 0x20 + memory[temp6:temp6 + 0x20]]);\n            memory[temp5 + 0x0100:temp5 + 0x0100 + 0x20] = 0x1901000000000000000000000000000000000000000000000000000000000000;\n            memory[temp5 + 0x0102:temp5 + 0x0102 + 0x20] = temp1;\n            memory[temp5 + 0x0122:temp5 + 0x0122 + 0x20] = temp7;\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = temp5 - temp8 + 0x0122;\n            var temp9 = temp5 + 0x0142;\n            memory[0x40:0x60] = temp9;\n            var temp10 = keccak256(memory[temp8 + 0x20:temp8 + 0x20 + memory[temp8:temp8 + 0x20]]);\n            var var5 = temp10;\n            memory[temp9:temp9 + 0x20] = 0x00;\n            var temp11 = temp5 + 0x0162;\n            memory[0x40:0x60] = temp11;\n            memory[temp11:temp11 + 0x20] = var5;\n            memory[temp5 + 0x0182:temp5 + 0x0182 + 0x20] = var2 & 0xff;\n            memory[temp5 + 0x01a2:temp5 + 0x01a2 + 0x20] = var3;\n            memory[temp5 + 0x01c2:temp5 + 0x01c2 + 0x20] = var4;\n            var temp12 = memory[0x40:0x60];\n            var var6 = 0x00;\n            var var7 = 0x01;\n            var var8 = temp5 + 0x01e2;\n            var temp13;\n            temp13, memory[temp12 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0:temp12 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0 + 0x20] = address(var7).staticcall.gas(msg.gas)(memory[temp12:temp12 + temp5 - temp12 + 0x01e2]);\n            var var9 = !temp13;\n        \n            if (!var9) {\n                var6 = memory[memory[0x40:0x60] + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0:memory[0x40:0x60] + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0 + 0x20];\n                var7 = !!(var6 & 0xffffffffffffffffffffffffffffffffffffffff);\n            \n                if (!(var6 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n                    if (var7) {\n                    label_1DC2:\n                        var7 = 0x1dcd;\n                        var8 = arg0;\n                        var9 = arg1;\n                        var var10 = var0;\n                        func_259C(var8, var9, var10);\n                        return;\n                    } else {\n                    label_1D5C:\n                        var temp14 = memory[0x40:0x60];\n                        memory[temp14:temp14 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                        memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n                        memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x1c;\n                        memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = 0x556e697377617056323a20494e56414c49445f5349474e415455524500000000;\n                        var temp15 = memory[0x40:0x60];\n                        revert(memory[temp15:temp15 + temp14 - temp15 + 0x64]);\n                    }\n                } else if (var6 & 0xffffffffffffffffffffffffffffffffffffffff == arg0 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1DC2; }\n                else { goto label_1D5C; }\n            } else {\n                var temp16 = returndata.length;\n                memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x12;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x556e697377617056323a20455850495245440000000000000000000000000000;\n            var temp18 = memory[0x40:0x60];\n            revert(memory[temp18:temp18 + temp17 - temp18 + 0x64]);\n        }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0BEB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x0bfd;\n        var var1 = arg0;\n        var var2 = 0x03e8;\n        var0 = func_21E8(var1, var2);\n        var temp0 = arg1;\n        arg1 = var0;\n        var0 = temp0;\n        r0 = func_226E(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0C4D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_21E8(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0a;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x556e697377617020563200000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function getReserves() returns (var r0, var r1, var r2) {\n        var temp0 = storage[0x08];\n        r0 = temp0 & 0xffffffffffffffffffffffffffff;\n        r1 = temp0 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n        r2 = temp0 / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        return r0, r1, r2;\n    }\n    \n    function token0() returns (var r0) { return storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function PERMIT_TYPEHASH() returns (var r0) { return 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function DOMAIN_SEPARATOR() returns (var r0) { return storage[0x03]; }\n    \n    function price0CumulativeLast() returns (var r0) { return storage[0x09]; }\n    \n    function price1CumulativeLast() returns (var r0) { return storage[0x0a]; }\n    \n    function func_1257(var arg0) returns (var r0) {\n        r0 = func_2878(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1294(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        if (!arg3) { assert(); }\n    \n        arg3 = arg4 / arg3;\n        arg4 = arg0 & 0xffffffffffffffffffffffffffff;\n        var var0 = 0x12bd;\n        var var1 = arg1;\n        var var2 = arg2;\n        var0 = func_21E8(var1, var2);\n    \n        if (!arg4) { assert(); }\n    \n        arg4 = var0 / arg4;\n        var0 = 0x00;\n    \n        if (arg3 < arg4) { return arg3; }\n        else { return arg4; }\n    }\n    \n    function kLast() returns (var r0) { return storage[0x0b]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x06;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x554e492d56320000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function MINIMUM_LIQUIDITY() returns (var r0) { return 0x03e8; }\n    \n    function func_19EE(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) returns (var r0) {\n        var temp0;\n        temp0, memory[arg5:arg5 + arg4] = address(arg8).staticcall.gas(msg.gas)(memory[arg7:arg7 + arg6]);\n        arg4 = !temp0;\n    \n        if (!arg4) {\n            arg1 = memory[0x40:0x60];\n            arg2 = returndata.length;\n        \n            if (arg2 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp1 = arg0;\n            arg0 = memory[arg1:arg1 + 0x20];\n            arg1 = temp1;\n            r0 = func_226E(arg0, arg1);\n            // Error: Could not resolve method call return address!\n        } else {\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_1A26(var arg0, var arg1, var arg2) {\n        func_1FDB(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function factory() returns (var r0) { return storage[0x05] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function token1() returns (var r0) { return storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function sync() {\n        if (storage[0x0c] == 0x01) {\n            storage[0x0c] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            var var0 = 0x1fd4;\n            var var1 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x70a08231;\n            var var3 = temp0 + 0x24;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = temp0 - var5 + 0x24;\n            var var7 = var5;\n            var var8 = var1;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            func_1EDD(var1, var2, var3, var4, var5, var6, var7, var8, var9);\n            storage[0x0c] = 0x01;\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x11;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function func_1EDD(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        var temp0;\n        temp0, memory[arg4:arg4 + arg3] = address(arg7).staticcall.gas(msg.gas)(memory[arg6:arg6 + arg5]);\n        arg3 = !temp0;\n    \n        if (!arg3) {\n            arg0 = memory[0x40:0x60];\n            arg1 = returndata.length;\n        \n            if (arg1 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            arg0 = memory[arg0:arg0 + 0x20];\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = address(this);\n            arg1 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n            arg2 = 0x70a08231;\n            arg3 = temp1 + 0x24;\n            arg4 = 0x20;\n            arg5 = memory[0x40:0x60];\n            arg6 = temp1 - arg5 + 0x24;\n            arg7 = arg5;\n            arg8 = arg1;\n            var var0 = !address(arg8).code.length;\n        \n            if (var0) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[arg5:arg5 + arg4] = address(arg8).staticcall.gas(msg.gas)(memory[arg7:arg7 + arg6]);\n            arg4 = !temp2;\n        \n            if (!arg4) {\n                arg1 = memory[0x40:0x60];\n                arg2 = returndata.length;\n            \n                if (arg2 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                arg1 = memory[arg1:arg1 + 0x20];\n                var temp3 = storage[0x08];\n                arg2 = temp3 & 0xffffffffffffffffffffffffffff;\n                arg3 = temp3 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n                func_22E0(arg0, arg1, arg2, arg3);\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp4 = returndata.length;\n                memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp5 = returndata.length;\n            memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_1FDB(var arg0, var arg1, var arg2) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x20] = 0x19;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7472616e7366657228616464726573732c75696e743235362900000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = arg2;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 - temp2 + 0x44;\n        memory[0x40:0x60] = temp1 + 0x64;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = (memory[temp3:temp3 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) | 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        var var0 = 0x00;\n        var var1 = 0x60;\n        var var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = temp2;\n        var var4 = memory[0x40:0x60];\n        var var5 = var4;\n        var var6 = temp3;\n        var var7 = memory[var3:var3 + 0x20];\n        var var8 = var7;\n        var var9 = var5;\n        var var10 = var6;\n    \n        if (var8 < 0x20) {\n        label_20E1:\n            var temp4 = 0x0100 ** (0x20 - var8) - 0x01;\n            var temp5 = var9;\n            memory[temp5:temp5 + 0x20] = (memory[var10:var10 + 0x20] & ~temp4) | (memory[temp5:temp5 + 0x20] & temp4);\n            var temp6 = memory[0x40:0x60];\n            var temp7;\n            temp7, memory[temp6:temp6 + 0x00] = address(var2).call.gas(msg.gas)(memory[temp6:temp6 + (var7 + var5) - temp6]);\n            var3 = returndata.length;\n            var4 = var3;\n        \n            if (var4 == 0x00) {\n                var1 = 0x60;\n                var temp8 = var2;\n                var0 = temp8;\n                var2 = var0;\n            \n                if (!var2) {\n                label_2176:\n                \n                    if (var2) { return; }\n                \n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                    memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x1a;\n                    memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x556e697377617056323a205452414e534645525f4641494c4544000000000000;\n                    var temp10 = memory[0x40:0x60];\n                    revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n                } else {\n                label_2155:\n                    var2 = !memory[var1:var1 + 0x20];\n                \n                    if (var2) { goto label_2176; }\n                \n                    var temp11 = var1;\n                    var2 = temp11 + 0x20;\n                    var3 = memory[temp11:temp11 + 0x20];\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = memory[var2:var2 + 0x20];\n                    goto label_2176;\n                }\n            } else {\n                var temp12 = memory[0x40:0x60];\n                var3 = temp12;\n                memory[0x40:0x60] = var3 + (returndata.length + 0x3f & ~0x1f);\n                memory[var3:var3 + 0x20] = returndata.length;\n                var temp13 = returndata.length;\n                memory[var3 + 0x20:var3 + 0x20 + temp13] = returndata[0x00:0x00 + temp13];\n                var1 = var3;\n                var temp14 = var2;\n                var0 = temp14;\n                var2 = var0;\n            \n                if (!var2) { goto label_2176; }\n                else { goto label_2155; }\n            }\n        } else {\n        label_20AD:\n            var temp15 = var10;\n            var temp16 = var9;\n            memory[temp16:temp16 + 0x20] = memory[temp15:temp15 + 0x20];\n            var8 = var8 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0;\n            var9 = temp16 + 0x20;\n            var10 = temp15 + 0x20;\n        \n            if (var8 < 0x20) { goto label_20E1; }\n            else { goto label_20AD; }\n        }\n    }\n    \n    function func_21E8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (var1) {\n        label_2203:\n        \n            if (var1) { return var0; }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x14;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        } else {\n            var0 = arg0 * arg1;\n            var1 = arg0;\n            var var2 = arg1;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2 == var1;\n            goto label_2203;\n        }\n    }\n    \n    function func_226E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 - arg1;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x15;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x64732d6d6174682d7375622d756e646572666c6f770000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_22E0(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = arg0 <= 0xffffffffffffffffffffffffffff;\n    \n        if (arg0 <= 0xffffffffffffffffffffffffffff) {\n            if (var0) {\n            label_2377:\n                var0 = block.timestamp & 0xffffffff;\n                var var1 = var0 - (storage[0x08] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff);\n                var var2 = !!(var1 & 0xffffffff);\n            \n                if (var1 & 0xffffffff) {\n                    var2 = !!(arg2 & 0xffffffffffffffffffffffffffff);\n                \n                    if (!var2) { goto label_23E2; }\n                    else { goto label_23CE; }\n                } else if (!var2) {\n                label_23E2:\n                \n                    if (!var2) {\n                    label_2492:\n                        var temp0 = (var0 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000 | (((arg1 & 0xffffffffffffffffffffffffffff) * 0x010000000000000000000000000000 | (((arg0 & 0xffffffffffffffffffffffffffff) | (storage[0x08] & 0xffffffffffffffffffffffffffffffffffff0000000000000000000000000000)) & 0xffffffff0000000000000000000000000000ffffffffffffffffffffffffffff)) & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n                        storage[0x08] = temp0;\n                        var temp1 = memory[0x40:0x60];\n                        memory[temp1:temp1 + 0x20] = temp0 & 0xffffffffffffffffffffffffffff;\n                        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n                        var temp2 = memory[0x40:0x60];\n                        log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1]);\n                        return;\n                    } else {\n                    label_23E8:\n                        var2 = var1 & 0xffffffff;\n                        var var3 = 0x2425;\n                        var var4 = arg2;\n                        var var5 = 0x23fb;\n                        var var6 = arg3;\n                        var5 = func_2A57(var6);\n                        var3 = func_23FB(var4, var5);\n                        storage[0x09] = (var3 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) * var2 + storage[0x09];\n                        var2 = var1 & 0xffffffff;\n                        var3 = 0x2465;\n                        var4 = arg3;\n                        var5 = 0x23fb;\n                        var6 = arg2;\n                        var5 = func_2A57(var6);\n                        var3 = func_23FB(var4, var5);\n                        storage[0x0a] = (var3 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) * var2 + storage[0x0a];\n                        goto label_2492;\n                    }\n                } else {\n                label_23CE:\n                \n                    if (!(arg3 & 0xffffffffffffffffffffffffffff)) { goto label_2492; }\n                    else { goto label_23E8; }\n                }\n            } else {\n            label_2311:\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n                memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x13;\n                memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x556e697377617056323a204f564552464c4f5700000000000000000000000000;\n                var temp4 = memory[0x40:0x60];\n                revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n            }\n        } else if (arg1 <= 0xffffffffffffffffffffffffffff) { goto label_2377; }\n        else { goto label_2311; }\n    }\n    \n    function func_23FB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = arg1 & 0xffffffffffffffffffffffffffff;\n        var var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function func_259C(var arg0, var arg1, var arg2) {\n        var temp0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = temp1;\n        var temp3 = arg2;\n        storage[keccak256(memory[0x00:0x40])] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var var0 = 0x2641;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg2;\n        var0 = func_226E(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var0 = 0x2683;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_2ABC(var1, var2);\n        var temp0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg2;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_26EC(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0x017e7e58;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n        var var4 = temp0 + 0x04;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = var2;\n        var var10 = !address(var9).code.length;\n    \n        if (var10) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var6:var6 + var5] = address(var9).staticcall.gas(msg.gas)(memory[var8:var8 + var7]);\n        var5 = !temp1;\n    \n        if (!var5) {\n            var2 = memory[0x40:0x60];\n            var3 = returndata.length;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var0 = !!(memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff);\n            var1 = memory[var2:var2 + 0x20];\n            var2 = storage[0x0b];\n        \n            if (!(memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff)) {\n                if (!var2) {\n                label_2870:\n                    return var0;\n                } else {\n                    storage[0x0b] = 0x00;\n                    return var0;\n                }\n            } else if (!var2) {\n            label_285F:\n                goto label_2870;\n            } else {\n                var3 = 0x00;\n                var4 = 0x27d8;\n                var5 = 0x1257;\n                var6 = arg0 & 0xffffffffffffffffffffffffffff;\n                var7 = arg1 & 0xffffffffffffffffffffffffffff;\n                var5 = func_21E8(var6, var7);\n                var4 = func_1257(var5);\n                var3 = var4;\n                var4 = 0x00;\n                var5 = 0x27e5;\n                var6 = var2;\n                var5 = func_2878(var6);\n                var4 = var5;\n            \n                if (var3 <= var4) {\n                label_285C:\n                    goto label_285F;\n                } else {\n                    var5 = 0x00;\n                    var6 = 0x2813;\n                    var7 = 0x2804;\n                    var8 = var3;\n                    var9 = var4;\n                    var7 = func_226E(var8, var9);\n                    var6 = func_2804(var7);\n                    var5 = var6;\n                    var6 = 0x00;\n                    var7 = 0x2838;\n                    var8 = var4;\n                    var9 = 0x282c;\n                    var10 = var3;\n                    var var11 = 0x05;\n                    var9 = func_21E8(var10, var11);\n                    var7 = func_282C(var8, var9);\n                    var temp2 = var7;\n                    var6 = temp2;\n                    var7 = 0x00;\n                    var8 = var6;\n                    var9 = var5;\n                \n                    if (!var8) { assert(); }\n                \n                    var7 = var9 / var8;\n                \n                    if (!var7) {\n                    label_2858:\n                        goto label_285C;\n                    } else {\n                        var8 = 0x2858;\n                        var9 = var1;\n                        var10 = var7;\n                        func_28CA(var9, var10);\n                        goto label_2858;\n                    }\n                }\n            }\n        } else {\n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_2804(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x00];\n        var var0 = temp0;\n        r0 = func_21E8(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_282C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_2ABC(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2878(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 > 0x03) {\n            var temp0 = arg0;\n            var0 = temp0;\n            var var1 = var0 / 0x02 + 0x01;\n        \n            if (var1 >= var0) {\n            label_28B5:\n                goto label_28C5;\n            } else {\n            label_2896:\n                var0 = var1;\n                var var2 = 0x02;\n                var var3 = var0;\n                var var4 = var3;\n                var var5 = arg0;\n            \n                if (!var4) { assert(); }\n            \n                var3 = var5 / var4 + var3;\n            \n                if (!var2) { assert(); }\n            \n                var1 = var3 / var2;\n            \n                if (var1 >= var0) { goto label_28B5; }\n                else { goto label_2896; }\n            }\n        } else if (!arg0) {\n        label_28C5:\n            return var0;\n        } else { return 0x01; }\n    }\n    \n    function func_28CA(var arg0, var arg1) {\n        var var0 = 0x28dd;\n        var var1 = storage[0x00];\n        var var2 = arg1;\n        var0 = func_2ABC(var1, var2);\n        storage[0x00] = var0;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x2915;\n        var2 = arg1;\n        var0 = func_2ABC(var1, var2);\n        var temp0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_2992(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x29c8;\n        var var2 = arg1;\n        var0 = func_226E(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x00];\n        var0 = 0x2a02;\n        var2 = arg1;\n        var0 = func_226E(var1, var2);\n        storage[0x00] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = arg1;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, 0x00]);\n    }\n    \n    function func_2A57(var arg0) returns (var r0) { return (arg0 & 0xffffffffffffffffffffffffffff) * 0x010000000000000000000000000000; }\n    \n    function func_2ABC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x14;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n}\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: contract Contract {\n    function main() {\n        memory[0x40:0x60] = 0x80;\n        var var0 = msg.value;\n    \n        if (var0) { revert(memory[0x00:0x00]); }\n    \n        if (msg.data.length < 0x04) { revert(memory[0x00:0x00]); }\n    \n        var0 = msg.data[0x00:0x20] >> 0xe0;\n    \n        if (0x6a627842 > var0) {\n            if (0x23b872dd > var0) {\n                if (0x095ea7b3 > var0) {\n                    if (var0 == 0x022c0d9f) {\n                        // Dispatch table entry for swap(uint256,uint256,address,bytes)\n                        var var1 = 0x0257;\n                        var var2 = 0x04;\n                        var var3 = msg.data.length - var2;\n                    \n                        if (var3 < 0x80) { revert(memory[0x00:0x00]); }\n                    \n                        swap(var2, var3);\n                        stop();\n                    } else if (var0 == 0x06fdde03) {\n                        // Dispatch table entry for name()\n                        var1 = 0x0261;\n                        var2 = name();\n                    \n                    label_0261:\n                        var temp0 = memory[0x40:0x60];\n                        memory[temp0:temp0 + 0x20] = 0x20;\n                        var temp1 = var2;\n                        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = memory[temp1:temp1 + 0x20];\n                        var3 = temp0;\n                        var var4 = var3;\n                        var var5 = var4 + 0x40;\n                        var var6 = temp1 + 0x20;\n                        var var7 = memory[temp1:temp1 + 0x20];\n                        var var8 = var7;\n                        var var9 = var5;\n                        var var10 = var6;\n                        var var11 = 0x00;\n                    \n                        if (var11 >= var8) {\n                        label_029B:\n                            var temp2 = var7;\n                            var5 = temp2 + var5;\n                            var6 = temp2 & 0x1f;\n                        \n                            if (!var6) {\n                                var temp3 = memory[0x40:0x60];\n                                return memory[temp3:temp3 + var5 - temp3];\n                            } else {\n                                var temp4 = var6;\n                                var temp5 = var5 - temp4;\n                                memory[temp5:temp5 + 0x20] = ~(0x0100 ** (0x20 - temp4) - 0x01) & memory[temp5:temp5 + 0x20];\n                                var temp6 = memory[0x40:0x60];\n                                return memory[temp6:temp6 + (temp5 + 0x20) - temp6];\n                            }\n                        } else {\n                        label_028C:\n                            var temp7 = var11;\n                            memory[temp7 + var9:temp7 + var9 + 0x20] = memory[temp7 + var10:temp7 + var10 + 0x20];\n                            var11 = temp7 + 0x20;\n                        \n                            if (var11 >= var8) { goto label_029B; }\n                            else { goto label_028C; }\n                        }\n                    } else if (var0 == 0x0902f1ac) {\n                        // Dispatch table entry for getReserves()\n                        var1 = 0x02de;\n                        var1, var2, var3 = getReserves();\n                        var temp8 = memory[0x40:0x60];\n                        memory[temp8:temp8 + 0x20] = var1 & 0xffffffffffffffffffffffffffff;\n                        memory[temp8 + 0x20:temp8 + 0x20 + 0x20] = var2 & 0xffffffffffffffffffffffffffff;\n                        memory[temp8 + 0x40:temp8 + 0x40 + 0x20] = var3 & 0xffffffff;\n                        var temp9 = memory[0x40:0x60];\n                        return memory[temp9:temp9 + temp8 - temp9 + 0x60];\n                    } else { revert(memory[0x00:0x00]); }\n                } else if (var0 == 0x095ea7b3) {\n                    // Dispatch table entry for approve(address,uint256)\n                    var1 = 0x034e;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n                \n                    var1 = approve(var2, var3);\n                \n                label_034E:\n                    var temp10 = memory[0x40:0x60];\n                    memory[temp10:temp10 + 0x20] = !!var1;\n                    var temp11 = memory[0x40:0x60];\n                    return memory[temp11:temp11 + temp10 - temp11 + 0x20];\n                } else if (var0 == 0x0dfe1681) {\n                    // Dispatch table entry for token0()\n                    var1 = 0x036a;\n                    var2 = token0();\n                \n                label_036A:\n                    var temp12 = memory[0x40:0x60];\n                    memory[temp12:temp12 + 0x20] = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n                    var temp13 = memory[0x40:0x60];\n                    return memory[temp13:temp13 + temp12 - temp13 + 0x20];\n                } else if (var0 == 0x18160ddd) {\n                    // Dispatch table entry for totalSupply()\n                    var1 = 0x039b;\n                    var2 = totalSupply();\n                \n                label_039B:\n                    var temp14 = memory[0x40:0x60];\n                    memory[temp14:temp14 + 0x20] = var2;\n                    var temp15 = memory[0x40:0x60];\n                    return memory[temp15:temp15 + temp14 - temp15 + 0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (0x3644e515 > var0) {\n                if (var0 == 0x23b872dd) {\n                    // Dispatch table entry for transferFrom(address,address,uint256)\n                    var1 = 0x034e;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x60) { revert(memory[0x00:0x00]); }\n                \n                    var1 = transferFrom(var2, var3);\n                    goto label_034E;\n                } else if (var0 == 0x30adf81f) {\n                    // Dispatch table entry for PERMIT_TYPEHASH()\n                    var1 = 0x039b;\n                    var2 = PERMIT_TYPEHASH();\n                    goto label_039B;\n                } else if (var0 == 0x313ce567) {\n                    // Dispatch table entry for decimals()\n                    var1 = 0x0400;\n                    var2 = decimals();\n                    var temp16 = memory[0x40:0x60];\n                    memory[temp16:temp16 + 0x20] = var2 & 0xff;\n                    var temp17 = memory[0x40:0x60];\n                    return memory[temp17:temp17 + temp16 - temp17 + 0x20];\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x3644e515) {\n                // Dispatch table entry for DOMAIN_SEPARATOR()\n                var1 = 0x039b;\n                var2 = DOMAIN_SEPARATOR();\n                goto label_039B;\n            } else if (var0 == 0x485cc955) {\n                // Dispatch table entry for initialize(address,address)\n                var1 = 0x0257;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                initialize(var2, var3);\n                stop();\n            } else if (var0 == 0x5909c0d5) {\n                // Dispatch table entry for price0CumulativeLast()\n                var1 = 0x039b;\n                var2 = price0CumulativeLast();\n                goto label_039B;\n            } else if (var0 == 0x5a3d5493) {\n                // Dispatch table entry for price1CumulativeLast()\n                var1 = 0x039b;\n                var2 = price1CumulativeLast();\n                goto label_039B;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xba9a7a56 > var0) {\n            if (0x7ecebe00 > var0) {\n                if (var0 == 0x6a627842) {\n                    // Dispatch table entry for mint(address)\n                    var1 = 0x039b;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var1 = mint(var2, var3);\n                    goto label_039B;\n                } else if (var0 == 0x70a08231) {\n                    // Dispatch table entry for balanceOf(address)\n                    var1 = 0x039b;\n                    var2 = 0x04;\n                    var3 = msg.data.length - var2;\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = balanceOf(var2, var3);\n                    goto label_039B;\n                } else if (var0 == 0x7464fc3d) {\n                    // Dispatch table entry for kLast()\n                    var1 = 0x039b;\n                    var2 = kLast();\n                    goto label_039B;\n                } else { revert(memory[0x00:0x00]); }\n            } else if (var0 == 0x7ecebe00) {\n                // Dispatch table entry for nonces(address)\n                var1 = 0x039b;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var2 = nonces(var2, var3);\n                goto label_039B;\n            } else if (var0 == 0x89afcb44) {\n                // Dispatch table entry for burn(address)\n                var1 = 0x053d;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var1, var2 = burn(var2, var3);\n                var temp18 = memory[0x40:0x60];\n                memory[temp18:temp18 + 0x20] = var1;\n                memory[temp18 + 0x20:temp18 + 0x20 + 0x20] = var2;\n                var temp19 = memory[0x40:0x60];\n                return memory[temp19:temp19 + temp18 - temp19 + 0x40];\n            } else if (var0 == 0x95d89b41) {\n                // Dispatch table entry for symbol()\n                var1 = 0x0261;\n                var2 = symbol();\n                goto label_0261;\n            } else if (var0 == 0xa9059cbb) {\n                // Dispatch table entry for transfer(address,uint256)\n                var1 = 0x034e;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n            \n                var temp20 = var2;\n                var2 = msg.data[temp20:temp20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var3 = msg.data[temp20 + 0x20:temp20 + 0x20 + 0x20];\n                var4 = 0x00;\n                var5 = 0x0df2;\n                var6 = msg.sender;\n                var7 = var2;\n                var8 = var3;\n                transfer(var6, var7, var8);\n                var4 = 0x01;\n                var1 = var4;\n                // Error: Could not resolve jump destination!\n            } else { revert(memory[0x00:0x00]); }\n        } else if (0xd21220a7 > var0) {\n            if (var0 == 0xba9a7a56) {\n                // Dispatch table entry for MINIMUM_LIQUIDITY()\n                var1 = 0x039b;\n                var2 = MINIMUM_LIQUIDITY();\n                goto label_039B;\n            } else if (var0 == 0xbc25cf77) {\n                // Dispatch table entry for skim(address)\n                var1 = 0x0257;\n                var2 = 0x04;\n                var3 = msg.data.length - var2;\n            \n                if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                skim(var2, var3);\n                stop();\n            } else if (var0 == 0xc45a0155) {\n                // Dispatch table entry for factory()\n                var1 = 0x036a;\n                var2 = factory();\n                goto label_036A;\n            } else { revert(memory[0x00:0x00]); }\n        } else if (var0 == 0xd21220a7) {\n            // Dispatch table entry for token1()\n            var1 = 0x036a;\n            var2 = token1();\n            goto label_036A;\n        } else if (var0 == 0xd505accf) {\n            // Dispatch table entry for permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\n            var1 = 0x0257;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0xe0) { revert(memory[0x00:0x00]); }\n        \n            permit(var2, var3);\n            stop();\n        } else if (var0 == 0xdd62ed3e) {\n            // Dispatch table entry for allowance(address,address)\n            var1 = 0x039b;\n            var2 = 0x04;\n            var3 = msg.data.length - var2;\n        \n            if (var3 < 0x40) { revert(memory[0x00:0x00]); }\n        \n            var2 = allowance(var2, var3);\n            goto label_039B;\n        } else if (var0 == 0xfff6cae9) {\n            // Dispatch table entry for sync()\n            var1 = 0x0257;\n            sync();\n            stop();\n        } else { revert(memory[0x00:0x00]); }\n    }\n    \n    function swap(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20];\n        var temp1 = arg1;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var1 = temp0 + temp1;\n        var var2 = temp0;\n        var var3 = var2 + 0x80;\n        var var4 = msg.data[var2 + 0x60:var2 + 0x60 + 0x20];\n    \n        if (var4 > 0x0100000000) { revert(memory[0x00:0x00]); }\n    \n        var temp2 = var2 + var4;\n        var4 = temp2;\n    \n        if (var4 + 0x20 > var1) { revert(memory[0x00:0x00]); }\n    \n        var temp3 = var4;\n        var temp4 = msg.data[temp3:temp3 + 0x20];\n        var4 = temp4;\n        var var5 = var3;\n        var3 = temp3 + 0x20;\n    \n        if ((var4 > 0x0100000000) | (var3 + var4 > var1)) { revert(memory[0x00:0x00]); }\n    \n        var1 = var3;\n        var2 = var4;\n    \n        if (storage[0x0c] == 0x01) {\n            storage[0x0c] = 0x00;\n            var3 = !!arg0;\n        \n            if (var3) {\n                if (var3) {\n                label_075C:\n                    var3 = 0x00;\n                    var4 = var3;\n                    var5 = 0x0767;\n                    var var6;\n                    var var7;\n                    var5, var6, var7 = getReserves();\n                    var4 = var6;\n                    var3 = var5;\n                    var temp5 = arg0 < var3 & 0xffffffffffffffffffffffffffff;\n                    var5 = temp5;\n                \n                    if (!var5) {\n                        if (var5) {\n                        label_07EF:\n                            var5 = 0x00;\n                            var6 = var5;\n                            var7 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var var8 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var var9 = var7 != var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                        \n                            if (var7 != var0 & 0xffffffffffffffffffffffffffffffffffffffff) {\n                                if (var9) {\n                                label_08BF:\n                                \n                                    if (!arg0) {\n                                    label_08D0:\n                                    \n                                        if (!arg1) {\n                                        label_08E1:\n                                        \n                                            if (!var2) {\n                                            label_09C3:\n                                                var temp6 = memory[0x40:0x60];\n                                                memory[temp6:temp6 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                                memory[temp6 + 0x04:temp6 + 0x04 + 0x20] = address(this);\n                                                var9 = var7 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                var var10 = 0x70a08231;\n                                                var var11 = temp6 + 0x24;\n                                                var var12 = 0x20;\n                                                var var13 = memory[0x40:0x60];\n                                                var var14 = temp6 - var13 + 0x24;\n                                                var var15 = var13;\n                                                var var16 = var9;\n                                                var var17 = !address(var16).code.length;\n                                            \n                                                if (var17) { revert(memory[0x00:0x00]); }\n                                            \n                                                var temp7;\n                                                temp7, memory[var13:var13 + var12] = address(var16).staticcall.gas(msg.gas)(memory[var15:var15 + var14]);\n                                                var12 = !temp7;\n                                            \n                                                if (!var12) {\n                                                    var9 = memory[0x40:0x60];\n                                                    var10 = returndata.length;\n                                                \n                                                    if (var10 < 0x20) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp8 = memory[var9:var9 + 0x20];\n                                                    var temp9 = memory[0x40:0x60];\n                                                    memory[temp9:temp9 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                                    memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = address(this);\n                                                    var5 = temp8;\n                                                    var9 = var8 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                    var10 = 0x70a08231;\n                                                    var11 = temp9 + 0x24;\n                                                    var12 = 0x20;\n                                                    var13 = memory[0x40:0x60];\n                                                    var14 = temp9 - var13 + 0x24;\n                                                    var15 = var13;\n                                                    var16 = var9;\n                                                    var17 = !address(var16).code.length;\n                                                \n                                                    if (var17) { revert(memory[0x00:0x00]); }\n                                                \n                                                    var temp10;\n                                                    temp10, memory[var13:var13 + var12] = address(var16).staticcall.gas(msg.gas)(memory[var15:var15 + var14]);\n                                                    var12 = !temp10;\n                                                \n                                                    if (!var12) {\n                                                        var9 = memory[0x40:0x60];\n                                                        var10 = returndata.length;\n                                                    \n                                                        if (var10 < 0x20) { revert(memory[0x00:0x00]); }\n                                                    \n                                                        var6 = memory[var9:var9 + 0x20];\n                                                        var7 = 0x00;\n                                                    \n                                                        if (var5 > (var3 & 0xffffffffffffffffffffffffffff) - arg0) {\n                                                            var7 = var5 - ((var3 & 0xffffffffffffffffffffffffffff) - arg0);\n                                                            var8 = 0x00;\n                                                        \n                                                            if (var6 > (var4 & 0xffffffffffffffffffffffffffff) - arg1) {\n                                                            label_0B59:\n                                                                var8 = var6 - ((var4 & 0xffffffffffffffffffffffffffff) - arg1);\n                                                                var9 = var7 > 0x00;\n                                                            \n                                                                if (var9) {\n                                                                label_0B80:\n                                                                \n                                                                    if (var9) {\n                                                                    label_0BD5:\n                                                                        var9 = 0x00;\n                                                                        var10 = 0x0c09;\n                                                                        var11 = 0x0beb;\n                                                                        var12 = var7;\n                                                                        var13 = 0x03;\n                                                                        var11 = func_21E8(var12, var13);\n                                                                        var10 = func_0BEB(var5, var11);\n                                                                        var9 = var10;\n                                                                        var10 = 0x00;\n                                                                        var11 = 0x0c21;\n                                                                        var12 = 0x0beb;\n                                                                        var13 = var8;\n                                                                        var14 = 0x03;\n                                                                        var12 = func_21E8(var13, var14);\n                                                                        var11 = func_0BEB(var6, var12);\n                                                                        var10 = var11;\n                                                                        var11 = 0x0c59;\n                                                                        var12 = 0x0f4240;\n                                                                        var13 = 0x0c4d;\n                                                                        var14 = var3 & 0xffffffffffffffffffffffffffff;\n                                                                        var15 = var4 & 0xffffffffffffffffffffffffffff;\n                                                                        var13 = func_21E8(var14, var15);\n                                                                        var11 = func_0C4D(var12, var13);\n                                                                        var12 = 0x0c69;\n                                                                        var13 = var9;\n                                                                        var14 = var10;\n                                                                        var12 = func_21E8(var13, var14);\n                                                                    \n                                                                        if (var12 >= var11) {\n                                                                            var9 = 0x0ce4;\n                                                                            var10 = var5;\n                                                                            var11 = var6;\n                                                                            var12 = var3;\n                                                                            var13 = var4;\n                                                                            func_22E0(var10, var11, var12, var13);\n                                                                            var temp11 = memory[0x40:0x60];\n                                                                            memory[temp11:temp11 + 0x20] = var7;\n                                                                            memory[temp11 + 0x20:temp11 + 0x20 + 0x20] = var8;\n                                                                            memory[temp11 + 0x40:temp11 + 0x40 + 0x20] = arg0;\n                                                                            memory[temp11 + 0x60:temp11 + 0x60 + 0x20] = arg1;\n                                                                            var temp12 = memory[0x40:0x60];\n                                                                            log(memory[temp12:temp12 + temp11 - temp12 + 0x80], [0xd78ad95fa46c994b6551d0da85fc275fe613ce37657fb8d5e3d130840159d822, msg.sender, stack[-9] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                                                            storage[0x0c] = 0x01;\n                                                                            return;\n                                                                        } else {\n                                                                            var temp13 = memory[0x40:0x60];\n                                                                            memory[temp13:temp13 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                                                                            memory[temp13 + 0x04:temp13 + 0x04 + 0x20] = 0x20;\n                                                                            memory[temp13 + 0x24:temp13 + 0x24 + 0x20] = 0x0c;\n                                                                            memory[temp13 + 0x44:temp13 + 0x44 + 0x20] = 0x556e697377617056323a204b0000000000000000000000000000000000000000;\n                                                                            var temp14 = memory[0x40:0x60];\n                                                                            revert(memory[temp14:temp14 + temp13 - temp14 + 0x64]);\n                                                                        }\n                                                                    } else {\n                                                                    label_0B85:\n                                                                        var temp15 = memory[0x40:0x60];\n                                                                        memory[temp15:temp15 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                                                                        var temp16 = temp15 + 0x04;\n                                                                        var temp17 = temp16 + 0x20;\n                                                                        memory[temp16:temp16 + 0x20] = temp17 - temp16;\n                                                                        memory[temp17:temp17 + 0x20] = 0x24;\n                                                                        var temp18 = temp17 + 0x20;\n                                                                        memory[temp18:temp18 + 0x24] = code[0x2b54:0x2b78];\n                                                                        var temp19 = memory[0x40:0x60];\n                                                                        revert(memory[temp19:temp19 + (temp18 + 0x40) - temp19]);\n                                                                    }\n                                                                } else {\n                                                                label_0B7B:\n                                                                \n                                                                    if (var8 > 0x00) { goto label_0BD5; }\n                                                                    else { goto label_0B85; }\n                                                                }\n                                                            } else {\n                                                            label_0B53:\n                                                                var9 = 0x00;\n                                                                var8 = var9;\n                                                                var9 = var7 > 0x00;\n                                                            \n                                                                if (var9) { goto label_0B80; }\n                                                                else { goto label_0B7B; }\n                                                            }\n                                                        } else {\n                                                            var8 = 0x00;\n                                                            var7 = var8;\n                                                            var8 = 0x00;\n                                                        \n                                                            if (var6 > (var4 & 0xffffffffffffffffffffffffffff) - arg1) { goto label_0B59; }\n                                                            else { goto label_0B53; }\n                                                        }\n                                                    } else {\n                                                        var temp20 = returndata.length;\n                                                        memory[0x00:0x00 + temp20] = returndata[0x00:0x00 + temp20];\n                                                        revert(memory[0x00:0x00 + returndata.length]);\n                                                    }\n                                                } else {\n                                                    var temp21 = returndata.length;\n                                                    memory[0x00:0x00 + temp21] = returndata[0x00:0x00 + temp21];\n                                                    revert(memory[0x00:0x00 + returndata.length]);\n                                                }\n                                            } else {\n                                                var9 = var0 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                                var10 = 0x10d1e85c;\n                                                var temp22 = var2;\n                                                var temp23 = memory[0x40:0x60];\n                                                memory[temp23:temp23 + 0x20] = (var10 & 0xffffffff) << 0xe0;\n                                                var temp24 = temp23 + 0x04;\n                                                memory[temp24:temp24 + 0x20] = msg.sender;\n                                                var temp25 = temp24 + 0x20;\n                                                memory[temp25:temp25 + 0x20] = arg0;\n                                                var temp26 = temp25 + 0x20;\n                                                memory[temp26:temp26 + 0x20] = arg1;\n                                                var temp27 = temp26 + 0x20;\n                                                var temp28 = temp27 + 0x20;\n                                                memory[temp27:temp27 + 0x20] = temp28 - temp24;\n                                                memory[temp28:temp28 + 0x20] = temp22;\n                                                var temp29 = temp28 + 0x20;\n                                                memory[temp29:temp29 + temp22] = msg.data[var1:var1 + temp22];\n                                                memory[temp29 + temp22:temp29 + temp22 + 0x20] = 0x00;\n                                                var11 = temp29 + (temp22 + 0x1f & ~0x1f);\n                                                var12 = 0x00;\n                                                var13 = memory[0x40:0x60];\n                                                var14 = var11 - var13;\n                                                var15 = var13;\n                                                var16 = 0x00;\n                                                var17 = var9;\n                                                var var18 = !address(var17).code.length;\n                                            \n                                                if (var18) { revert(memory[0x00:0x00]); }\n                                            \n                                                var temp30;\n                                                temp30, memory[var13:var13 + var12] = address(var17).call.gas(msg.gas).value(var16)(memory[var15:var15 + var14]);\n                                                var12 = !temp30;\n                                            \n                                                if (!var12) { goto label_09C3; }\n                                            \n                                                var temp31 = returndata.length;\n                                                memory[0x00:0x00 + temp31] = returndata[0x00:0x00 + temp31];\n                                                revert(memory[0x00:0x00 + returndata.length]);\n                                            }\n                                        } else {\n                                            var9 = 0x08e1;\n                                            var10 = var8;\n                                            var11 = var0;\n                                            var12 = arg1;\n                                            func_1FDB(var10, var11, var12);\n                                            goto label_08E1;\n                                        }\n                                    } else {\n                                        var9 = 0x08d0;\n                                        var10 = var7;\n                                        var11 = var0;\n                                        var12 = arg0;\n                                        func_1FDB(var10, var11, var12);\n                                        goto label_08D0;\n                                    }\n                                } else {\n                                label_0859:\n                                    var temp32 = memory[0x40:0x60];\n                                    memory[temp32:temp32 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                                    memory[temp32 + 0x04:temp32 + 0x04 + 0x20] = 0x20;\n                                    memory[temp32 + 0x24:temp32 + 0x24 + 0x20] = 0x15;\n                                    memory[temp32 + 0x44:temp32 + 0x44 + 0x20] = 0x556e697377617056323a20494e56414c49445f544f0000000000000000000000;\n                                    var temp33 = memory[0x40:0x60];\n                                    revert(memory[temp33:temp33 + temp32 - temp33 + 0x64]);\n                                }\n                            } else if (var0 & 0xffffffffffffffffffffffffffffffffffffffff != var8 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_08BF; }\n                            else { goto label_0859; }\n                        } else {\n                        label_079F:\n                            var temp34 = memory[0x40:0x60];\n                            memory[temp34:temp34 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp35 = temp34 + 0x04;\n                            var temp36 = temp35 + 0x20;\n                            memory[temp35:temp35 + 0x20] = temp36 - temp35;\n                            memory[temp36:temp36 + 0x20] = 0x21;\n                            var temp37 = temp36 + 0x20;\n                            memory[temp37:temp37 + 0x21] = code[0x2b78:0x2b99];\n                            var temp38 = memory[0x40:0x60];\n                            revert(memory[temp38:temp38 + (temp37 + 0x40) - temp38]);\n                        }\n                    } else if (arg1 < var4 & 0xffffffffffffffffffffffffffff) { goto label_07EF; }\n                    else { goto label_079F; }\n                } else {\n                label_070C:\n                    var temp39 = memory[0x40:0x60];\n                    memory[temp39:temp39 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    var temp40 = temp39 + 0x04;\n                    var temp41 = temp40 + 0x20;\n                    memory[temp40:temp40 + 0x20] = temp41 - temp40;\n                    memory[temp41:temp41 + 0x20] = 0x25;\n                    var temp42 = temp41 + 0x20;\n                    memory[temp42:temp42 + 0x25] = code[0x2b2f:0x2b54];\n                    var temp43 = memory[0x40:0x60];\n                    revert(memory[temp43:temp43 + (temp42 + 0x40) - temp43]);\n                }\n            } else if (arg1 > 0x00) { goto label_075C; }\n            else { goto label_070C; }\n        } else {\n            var temp44 = memory[0x40:0x60];\n            memory[temp44:temp44 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp44 + 0x04:temp44 + 0x04 + 0x20] = 0x20;\n            memory[temp44 + 0x24:temp44 + 0x24 + 0x20] = 0x11;\n            memory[temp44 + 0x44:temp44 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp45 = memory[0x40:0x60];\n            revert(memory[temp45:temp45 + temp44 - temp45 + 0x64]);\n        }\n    }\n    \n    function approve(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20];\n        var var0 = 0x00;\n        var var1 = 0x0df2;\n        var var2 = msg.sender;\n        var var3 = arg0;\n        var var4 = arg1;\n        func_259C(var2, var3, var4);\n        return 0x01;\n    }\n    \n    function transferFrom(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        var var1 = 0x00;\n        memory[var1:var1 + 0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[var1:var1 + 0x40]);\n        memory[var1:var1 + 0x20] = msg.sender;\n        memory[0x20:0x40] = temp1;\n    \n        if (storage[keccak256(memory[var1:var1 + 0x40])] == 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) {\n        label_0EE8:\n            var var2 = 0x0ef3;\n            var var3 = arg0;\n            var var4 = arg1;\n            var var5 = var0;\n            transfer(var3, var4, var5);\n            return 0x01;\n        } else {\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp2 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp2;\n            var3 = storage[keccak256(memory[0x00:0x40])];\n            var2 = 0x0eb6;\n            var4 = var0;\n            var2 = func_226E(var3, var4);\n            memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x20:0x40] = 0x02;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            memory[0x00:0x20] = msg.sender;\n            memory[0x20:0x40] = temp3;\n            storage[keccak256(memory[0x00:0x40])] = var2;\n            goto label_0EE8;\n        }\n    }\n    \n    function initialize(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (msg.sender == storage[0x05] & 0xffffffffffffffffffffffffffffffffffffffff) {\n            storage[0x06] = (storage[0x06] & 0xffffffffffffffffffffffff0000000000000000000000000000000000000000) | (arg0 & 0xffffffffffffffffffffffffffffffffffffffff);\n            storage[0x07] = (storage[0x07] & 0xffffffffffffffffffffffff0000000000000000000000000000000000000000) | (arg1 & 0xffffffffffffffffffffffffffffffffffffffff);\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x14;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x556e697377617056323a20464f5242494444454e000000000000000000000000;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function mint(var arg0, var arg1) returns (var r0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x00;\n    \n        if (storage[0x0c] == 0x01) {\n            var var0 = 0x00;\n            storage[0x0c] = var0;\n            var var1 = var0;\n            var var2 = 0x1094;\n            var var3;\n            var var4;\n            var2, var3, var4 = getReserves();\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            var0 = var2;\n            var1 = var3;\n            var2 = 0x00;\n            var3 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = 0x70a08231;\n            var var5 = temp0 + 0x24;\n            var var6 = 0x20;\n            var var7 = memory[0x40:0x60];\n            var var8 = temp0 - var7 + 0x24;\n            var var9 = var7;\n            var var10 = var3;\n            var var11 = !address(var10).code.length;\n        \n            if (var11) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var7:var7 + var6] = address(var10).staticcall.gas(msg.gas)(memory[var9:var9 + var8]);\n            var6 = !temp1;\n        \n            if (!var6) {\n                var3 = memory[0x40:0x60];\n                var4 = returndata.length;\n            \n                if (var4 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp2 = memory[var3:var3 + 0x20];\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = address(this);\n                var2 = temp2;\n                var3 = 0x00;\n                var4 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n                var5 = 0x70a08231;\n                var6 = temp3 + 0x24;\n                var7 = 0x20;\n                var8 = memory[0x40:0x60];\n                var9 = temp3 - var8 + 0x24;\n                var10 = var8;\n                var11 = var4;\n                var var12 = !address(var11).code.length;\n            \n                if (var12) { revert(memory[0x00:0x00]); }\n            \n                var temp4;\n                temp4, memory[var8:var8 + var7] = address(var11).staticcall.gas(msg.gas)(memory[var10:var10 + var9]);\n                var7 = !temp4;\n            \n                if (!var7) {\n                    var4 = memory[0x40:0x60];\n                    var5 = returndata.length;\n                \n                    if (var5 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var3 = memory[var4:var4 + 0x20];\n                    var4 = 0x00;\n                    var5 = 0x1201;\n                    var6 = var2;\n                    var7 = var0 & 0xffffffffffffffffffffffffffff;\n                    var5 = func_226E(var6, var7);\n                    var4 = var5;\n                    var5 = 0x00;\n                    var6 = 0x1225;\n                    var7 = var3;\n                    var8 = var1 & 0xffffffffffffffffffffffffffff;\n                    var6 = func_226E(var7, var8);\n                    var5 = var6;\n                    var6 = 0x00;\n                    var7 = 0x1233;\n                    var8 = var0;\n                    var9 = var1;\n                    var7 = func_26EC(var8, var9);\n                    var temp5 = var7;\n                    var7 = storage[0x00];\n                    var6 = temp5;\n                \n                    if (var7) {\n                        var8 = 0x12ca;\n                        var9 = var0 & 0xffffffffffffffffffffffffffff;\n                        var10 = 0x1294;\n                        var11 = var4;\n                        var12 = var7;\n                        var10 = func_21E8(var11, var12);\n                        var8 = func_1294(var1, var5, var7, var9, var10);\n                        arg1 = var8;\n                    \n                        if (arg1 > 0x00) {\n                            var8 = 0x1330;\n                            var9 = arg0;\n                            var10 = arg1;\n                            func_28CA(var9, var10);\n                            var8 = 0x133c;\n                            var9 = var2;\n                            var10 = var3;\n                            var11 = var0;\n                            var12 = var1;\n                            func_22E0(var9, var10, var11, var12);\n                        \n                            if (!var6) {\n                            label_137E:\n                                var temp6 = memory[0x40:0x60];\n                                memory[temp6:temp6 + 0x20] = var4;\n                                memory[temp6 + 0x20:temp6 + 0x20 + 0x20] = var5;\n                                var temp7 = memory[0x40:0x60];\n                                log(memory[temp7:temp7 + temp6 - temp7 + 0x40], [0x4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f, msg.sender]);\n                                storage[0x0c] = 0x01;\n                                return arg1;\n                            } else {\n                                var temp8 = storage[0x08];\n                                var8 = 0x137a;\n                                var9 = temp8 & 0xffffffffffffffffffffffffffff;\n                                var10 = temp8 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n                                var8 = func_21E8(var9, var10);\n                                storage[0x0b] = var8;\n                                goto label_137E;\n                            }\n                        } else {\n                            var temp9 = memory[0x40:0x60];\n                            memory[temp9:temp9 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp10 = temp9 + 0x04;\n                            var temp11 = temp10 + 0x20;\n                            memory[temp10:temp10 + 0x20] = temp11 - temp10;\n                            memory[temp11:temp11 + 0x20] = 0x28;\n                            var temp12 = temp11 + 0x20;\n                            memory[temp12:temp12 + 0x28] = code[0x2bc1:0x2be9];\n                            var temp13 = memory[0x40:0x60];\n                            revert(memory[temp13:temp13 + (temp12 + 0x40) - temp13]);\n                        }\n                    } else {\n                        var8 = 0x125c;\n                        var9 = 0x03e8;\n                        var10 = 0x0bfd;\n                        var11 = 0x1257;\n                        var12 = var4;\n                        var var13 = var5;\n                        var11 = func_21E8(var12, var13);\n                        var10 = func_1257(var11);\n                        var temp14 = var9;\n                        var9 = var10;\n                        var10 = temp14;\n                        var8 = func_226E(var9, var10);\n                        // Error: Could not resolve method call return address!\n                    }\n                } else {\n                    var temp15 = returndata.length;\n                    memory[0x00:0x00 + temp15] = returndata[0x00:0x00 + temp15];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp16 = returndata.length;\n                memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x11;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp18 = memory[0x40:0x60];\n            revert(memory[temp18:temp18 + temp17 - temp18 + 0x64]);\n        }\n    }\n    \n    function balanceOf(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function nonces(var arg0, var arg1) returns (var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x04;\n        memory[0x00:0x20] = arg0;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function burn(var arg0, var arg1) returns (var r0, var arg0) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = 0x00;\n        var var0 = arg1;\n    \n        if (storage[0x0c] == 0x01) {\n            var var1 = 0x00;\n            storage[0x0c] = var1;\n            var var2 = var1;\n            var var3 = 0x1479;\n            var var4;\n            var var5;\n            var3, var4, var5 = getReserves();\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            var1 = var3;\n            var2 = var4;\n            var3 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var4 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var5 = 0x00;\n            var var6 = var3;\n            var var7 = 0x70a08231;\n            var var8 = temp0 + 0x24;\n            var var9 = 0x20;\n            var var10 = memory[0x40:0x60];\n            var var11 = temp0 - var10 + 0x24;\n            var var12 = var10;\n            var var13 = var6;\n            var var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var temp1;\n            temp1, memory[var10:var10 + var9] = address(var13).staticcall.gas(msg.gas)(memory[var12:var12 + var11]);\n            var9 = !temp1;\n        \n            if (!var9) {\n                var6 = memory[0x40:0x60];\n                var7 = returndata.length;\n            \n                if (var7 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                var temp2 = memory[var6:var6 + 0x20];\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = address(this);\n                var5 = temp2;\n                var6 = 0x00;\n                var7 = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                var8 = 0x70a08231;\n                var9 = temp3 + 0x24;\n                var10 = 0x20;\n                var11 = memory[0x40:0x60];\n                var12 = temp3 - var11 + 0x24;\n                var13 = var11;\n                var14 = var7;\n                var var15 = !address(var14).code.length;\n            \n                if (var15) { revert(memory[0x00:0x00]); }\n            \n                var temp4;\n                temp4, memory[var11:var11 + var10] = address(var14).staticcall.gas(msg.gas)(memory[var13:var13 + var12]);\n                var10 = !temp4;\n            \n                if (!var10) {\n                    var7 = memory[0x40:0x60];\n                    var8 = returndata.length;\n                \n                    if (var8 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var temp5 = memory[var7:var7 + 0x20];\n                    var8 = 0x00;\n                    memory[var8:var8 + 0x20] = address(this);\n                    memory[0x20:0x40] = 0x01;\n                    var7 = storage[keccak256(memory[var8:var8 + 0x40])];\n                    var6 = temp5;\n                    var9 = 0x15e2;\n                    var10 = var1;\n                    var11 = var2;\n                    var9 = func_26EC(var10, var11);\n                    var temp6 = var9;\n                    var9 = storage[0x00];\n                    var8 = temp6;\n                    var10 = var9;\n                    var11 = 0x15f9;\n                    var12 = var7;\n                    var13 = var5;\n                    var11 = func_21E8(var12, var13);\n                \n                    if (!var10) { assert(); }\n                \n                    arg1 = var11 / var10;\n                    var10 = var9;\n                    var11 = 0x1614;\n                    var12 = var7;\n                    var13 = var6;\n                    var11 = func_21E8(var12, var13);\n                \n                    if (!var10) { assert(); }\n                \n                    var0 = var11 / var10;\n                    var10 = arg1 > 0x00;\n                \n                    if (!var10) {\n                        if (var10) {\n                        label_1683:\n                            var10 = 0x168d;\n                            var11 = address(this);\n                            var12 = var7;\n                            func_2992(var11, var12);\n                            var10 = 0x1698;\n                            var11 = var3;\n                            var12 = arg0;\n                            var13 = arg1;\n                            func_1FDB(var11, var12, var13);\n                            var10 = 0x16a3;\n                            var11 = var4;\n                            var12 = arg0;\n                            var13 = var0;\n                            func_1FDB(var11, var12, var13);\n                            var temp7 = memory[0x40:0x60];\n                            memory[temp7:temp7 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                            memory[temp7 + 0x04:temp7 + 0x04 + 0x20] = address(this);\n                            var10 = var3 & 0xffffffffffffffffffffffffffffffffffffffff;\n                            var11 = 0x70a08231;\n                            var12 = temp7 + 0x24;\n                            var13 = 0x20;\n                            var14 = memory[0x40:0x60];\n                            var15 = temp7 - var14 + 0x24;\n                            var var16 = var14;\n                            var var17 = var10;\n                            var var18 = !address(var17).code.length;\n                        \n                            if (var18) { revert(memory[0x00:0x00]); }\n                        \n                            var temp8;\n                            temp8, memory[var14:var14 + var13] = address(var17).staticcall.gas(msg.gas)(memory[var16:var16 + var15]);\n                            var13 = !temp8;\n                        \n                            if (!var13) {\n                                var10 = memory[0x40:0x60];\n                                var11 = returndata.length;\n                            \n                                if (var11 < 0x20) { revert(memory[0x00:0x00]); }\n                            \n                                var temp9 = memory[var10:var10 + 0x20];\n                                var temp10 = memory[0x40:0x60];\n                                memory[temp10:temp10 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n                                memory[temp10 + 0x04:temp10 + 0x04 + 0x20] = address(this);\n                                var5 = temp9;\n                                var10 = var4 & 0xffffffffffffffffffffffffffffffffffffffff;\n                                var11 = 0x70a08231;\n                                var12 = temp10 + 0x24;\n                                var13 = 0x20;\n                                var14 = memory[0x40:0x60];\n                                var15 = temp10 - var14 + 0x24;\n                                var16 = var14;\n                                var17 = var10;\n                                var18 = !address(var17).code.length;\n                            \n                                if (var18) { revert(memory[0x00:0x00]); }\n                            \n                                var temp11;\n                                temp11, memory[var14:var14 + var13] = address(var17).staticcall.gas(msg.gas)(memory[var16:var16 + var15]);\n                                var13 = !temp11;\n                            \n                                if (!var13) {\n                                    var10 = memory[0x40:0x60];\n                                    var11 = returndata.length;\n                                \n                                    if (var11 < 0x20) { revert(memory[0x00:0x00]); }\n                                \n                                    var temp12 = memory[var10:var10 + 0x20];\n                                    var6 = temp12;\n                                    var10 = 0x17e5;\n                                    var11 = var5;\n                                    var12 = var6;\n                                    var13 = var1;\n                                    var14 = var2;\n                                    func_22E0(var11, var12, var13, var14);\n                                \n                                    if (!var8) {\n                                    label_1827:\n                                        var temp13 = memory[0x40:0x60];\n                                        memory[temp13:temp13 + 0x20] = arg1;\n                                        memory[temp13 + 0x20:temp13 + 0x20 + 0x20] = var0;\n                                        var temp14 = memory[0x40:0x60];\n                                        log(memory[temp14:temp14 + temp13 - temp14 + 0x40], [0xdccd412f0b1252819cb1fd330b93224ca42612892bb3f4f789976e6d81936496, msg.sender, stack[-12] & 0xffffffffffffffffffffffffffffffffffffffff]);\n                                        storage[0x0c] = 0x01;\n                                        arg0 = var0;\n                                        r0 = arg1;\n                                        return r0, arg0;\n                                    } else {\n                                        var temp15 = storage[0x08];\n                                        var10 = 0x1823;\n                                        var11 = temp15 & 0xffffffffffffffffffffffffffff;\n                                        var12 = temp15 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n                                        var10 = func_21E8(var11, var12);\n                                        storage[0x0b] = var10;\n                                        goto label_1827;\n                                    }\n                                } else {\n                                    var temp16 = returndata.length;\n                                    memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                                    revert(memory[0x00:0x00 + returndata.length]);\n                                }\n                            } else {\n                                var temp17 = returndata.length;\n                                memory[0x00:0x00 + temp17] = returndata[0x00:0x00 + temp17];\n                                revert(memory[0x00:0x00 + returndata.length]);\n                            }\n                        } else {\n                        label_1633:\n                            var temp18 = memory[0x40:0x60];\n                            memory[temp18:temp18 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                            var temp19 = temp18 + 0x04;\n                            var temp20 = temp19 + 0x20;\n                            memory[temp19:temp19 + 0x20] = temp20 - temp19;\n                            memory[temp20:temp20 + 0x20] = 0x28;\n                            var temp21 = temp20 + 0x20;\n                            memory[temp21:temp21 + 0x28] = code[0x2b99:0x2bc1];\n                            var temp22 = memory[0x40:0x60];\n                            revert(memory[temp22:temp22 + (temp21 + 0x40) - temp22]);\n                        }\n                    } else if (var0 > 0x00) { goto label_1683; }\n                    else { goto label_1633; }\n                } else {\n                    var temp23 = returndata.length;\n                    memory[0x00:0x00 + temp23] = returndata[0x00:0x00 + temp23];\n                    revert(memory[0x00:0x00 + returndata.length]);\n                }\n            } else {\n                var temp24 = returndata.length;\n                memory[0x00:0x00 + temp24] = returndata[0x00:0x00 + temp24];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp25 = memory[0x40:0x60];\n            memory[temp25:temp25 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp25 + 0x04:temp25 + 0x04 + 0x20] = 0x20;\n            memory[temp25 + 0x24:temp25 + 0x24 + 0x20] = 0x11;\n            memory[temp25 + 0x44:temp25 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp26 = memory[0x40:0x60];\n            revert(memory[temp26:temp26 + temp25 - temp26 + 0x64]);\n        }\n    }\n    \n    function skim(var arg0, var arg1) {\n        arg0 = msg.data[arg0:arg0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n    \n        if (storage[0x0c] == 0x01) {\n            storage[0x0c] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            arg1 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var0 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var1 = 0x1a2b;\n            var var2 = arg1;\n            var var3 = arg0;\n            var var4 = 0x1a26;\n            var var5 = storage[0x08] & 0xffffffffffffffffffffffffffff;\n            var var6 = var2;\n            var var7 = 0x70a08231;\n            var var8 = temp0 + 0x24;\n            var var9 = 0x20;\n            var var10 = memory[0x40:0x60];\n            var var11 = temp0 - var10 + 0x24;\n            var var12 = var10;\n            var var13 = var6;\n            var var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var4 = func_19EE(var5, var6, var7, var8, var9, var10, var11, var12, var13, var14);\n            func_1A26(var2, var3, var4);\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = address(this);\n            var1 = 0x1aca;\n            var2 = var0;\n            var3 = arg0;\n            var4 = 0x1a26;\n            var5 = storage[0x08] / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n            var6 = var2 & 0xffffffffffffffffffffffffffffffffffffffff;\n            var7 = 0x70a08231;\n            var8 = temp1 + 0x24;\n            var9 = 0x20;\n            var10 = memory[0x40:0x60];\n            var11 = temp1 - var10 + 0x24;\n            var12 = var10;\n            var13 = var6;\n            var14 = !address(var13).code.length;\n        \n            if (var14) { revert(memory[0x00:0x00]); }\n        \n            var4 = func_19EE(var5, var6, var7, var8, var9, var10, var11, var12, var13, var14);\n            func_1A26(var2, var3, var4);\n            storage[0x0c] = 0x01;\n            return;\n        } else {\n            var temp2 = memory[0x40:0x60];\n            memory[temp2:temp2 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp2 + 0x04:temp2 + 0x04 + 0x20] = 0x20;\n            memory[temp2 + 0x24:temp2 + 0x24 + 0x20] = 0x11;\n            memory[temp2 + 0x44:temp2 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp3 = memory[0x40:0x60];\n            revert(memory[temp3:temp3 + temp2 - temp3 + 0x64]);\n        }\n    }\n    \n    function permit(var arg0, var arg1) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var0 = msg.data[temp0 + 0x40:temp0 + 0x40 + 0x20];\n        var var1 = msg.data[temp0 + 0x60:temp0 + 0x60 + 0x20];\n        var var2 = msg.data[temp0 + 0x80:temp0 + 0x80 + 0x20] & 0xff;\n        var var3 = msg.data[temp0 + 0xa0:temp0 + 0xa0 + 0x20];\n        var var4 = msg.data[temp0 + 0xc0:temp0 + 0xc0 + 0x20];\n    \n        if (var1 >= block.timestamp) {\n            var temp1 = storage[0x03];\n            var temp2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[0x00:0x20] = temp2;\n            memory[0x20:0x40] = 0x04;\n            var temp3 = keccak256(memory[0x00:0x40]);\n            var temp4 = storage[temp3];\n            storage[temp3] = temp4 + 0x01;\n            var temp5 = memory[0x40:0x60];\n            memory[temp5 + 0x20:temp5 + 0x20 + 0x20] = 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9;\n            memory[temp5 + 0x40:temp5 + 0x40 + 0x20] = temp2;\n            memory[temp5 + 0x60:temp5 + 0x60 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n            memory[temp5 + 0x80:temp5 + 0x80 + 0x20] = var0;\n            memory[temp5 + 0xa0:temp5 + 0xa0 + 0x20] = temp4;\n            memory[temp5 + 0xc0:temp5 + 0xc0 + 0x20] = var1;\n            var temp6 = memory[0x40:0x60];\n            memory[temp6:temp6 + 0x20] = temp5 - temp6 + 0xc0;\n            memory[0x40:0x60] = temp5 + 0xe0;\n            var temp7 = keccak256(memory[temp6 + 0x20:temp6 + 0x20 + memory[temp6:temp6 + 0x20]]);\n            memory[temp5 + 0x0100:temp5 + 0x0100 + 0x20] = 0x1901000000000000000000000000000000000000000000000000000000000000;\n            memory[temp5 + 0x0102:temp5 + 0x0102 + 0x20] = temp1;\n            memory[temp5 + 0x0122:temp5 + 0x0122 + 0x20] = temp7;\n            var temp8 = memory[0x40:0x60];\n            memory[temp8:temp8 + 0x20] = temp5 - temp8 + 0x0122;\n            var temp9 = temp5 + 0x0142;\n            memory[0x40:0x60] = temp9;\n            var temp10 = keccak256(memory[temp8 + 0x20:temp8 + 0x20 + memory[temp8:temp8 + 0x20]]);\n            var var5 = temp10;\n            memory[temp9:temp9 + 0x20] = 0x00;\n            var temp11 = temp5 + 0x0162;\n            memory[0x40:0x60] = temp11;\n            memory[temp11:temp11 + 0x20] = var5;\n            memory[temp5 + 0x0182:temp5 + 0x0182 + 0x20] = var2 & 0xff;\n            memory[temp5 + 0x01a2:temp5 + 0x01a2 + 0x20] = var3;\n            memory[temp5 + 0x01c2:temp5 + 0x01c2 + 0x20] = var4;\n            var temp12 = memory[0x40:0x60];\n            var var6 = 0x00;\n            var var7 = 0x01;\n            var var8 = temp5 + 0x01e2;\n            var temp13;\n            temp13, memory[temp12 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0:temp12 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0 + 0x20] = address(var7).staticcall.gas(msg.gas)(memory[temp12:temp12 + temp5 - temp12 + 0x01e2]);\n            var var9 = !temp13;\n        \n            if (!var9) {\n                var6 = memory[memory[0x40:0x60] + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0:memory[0x40:0x60] + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0 + 0x20];\n                var7 = !!(var6 & 0xffffffffffffffffffffffffffffffffffffffff);\n            \n                if (!(var6 & 0xffffffffffffffffffffffffffffffffffffffff)) {\n                    if (var7) {\n                    label_1DC2:\n                        var7 = 0x1dcd;\n                        var8 = arg0;\n                        var9 = arg1;\n                        var var10 = var0;\n                        func_259C(var8, var9, var10);\n                        return;\n                    } else {\n                    label_1D5C:\n                        var temp14 = memory[0x40:0x60];\n                        memory[temp14:temp14 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                        memory[temp14 + 0x04:temp14 + 0x04 + 0x20] = 0x20;\n                        memory[temp14 + 0x24:temp14 + 0x24 + 0x20] = 0x1c;\n                        memory[temp14 + 0x44:temp14 + 0x44 + 0x20] = 0x556e697377617056323a20494e56414c49445f5349474e415455524500000000;\n                        var temp15 = memory[0x40:0x60];\n                        revert(memory[temp15:temp15 + temp14 - temp15 + 0x64]);\n                    }\n                } else if (var6 & 0xffffffffffffffffffffffffffffffffffffffff == arg0 & 0xffffffffffffffffffffffffffffffffffffffff) { goto label_1DC2; }\n                else { goto label_1D5C; }\n            } else {\n                var temp16 = returndata.length;\n                memory[0x00:0x00 + temp16] = returndata[0x00:0x00 + temp16];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp17 = memory[0x40:0x60];\n            memory[temp17:temp17 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp17 + 0x04:temp17 + 0x04 + 0x20] = 0x20;\n            memory[temp17 + 0x24:temp17 + 0x24 + 0x20] = 0x12;\n            memory[temp17 + 0x44:temp17 + 0x44 + 0x20] = 0x556e697377617056323a20455850495245440000000000000000000000000000;\n            var temp18 = memory[0x40:0x60];\n            revert(memory[temp18:temp18 + temp17 - temp18 + 0x64]);\n        }\n    }\n    \n    function allowance(var arg0, var arg1) returns (var arg0) {\n        var temp0 = arg0;\n        arg0 = msg.data[temp0:temp0 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        arg1 = msg.data[temp0 + 0x20:temp0 + 0x20 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x02;\n        memory[0x00:0x20] = arg0;\n        memory[0x20:0x40] = keccak256(memory[0x00:0x40]);\n        memory[0x00:0x20] = arg1;\n        return storage[keccak256(memory[0x00:0x40])];\n    }\n    \n    function func_0BEB(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x0bfd;\n        var var1 = arg0;\n        var var2 = 0x03e8;\n        var0 = func_21E8(var1, var2);\n        var temp0 = arg1;\n        arg1 = var0;\n        var0 = temp0;\n        r0 = func_226E(arg1, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_0C4D(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_21E8(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function name() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x0a;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x556e697377617020563200000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function getReserves() returns (var r0, var r1, var r2) {\n        var temp0 = storage[0x08];\n        r0 = temp0 & 0xffffffffffffffffffffffffffff;\n        r1 = temp0 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n        r2 = temp0 / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff;\n        return r0, r1, r2;\n    }\n    \n    function token0() returns (var r0) { return storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function totalSupply() returns (var r0) { return storage[0x00]; }\n    \n    function PERMIT_TYPEHASH() returns (var r0) { return 0x6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c9; }\n    \n    function decimals() returns (var r0) { return 0x12; }\n    \n    function DOMAIN_SEPARATOR() returns (var r0) { return storage[0x03]; }\n    \n    function price0CumulativeLast() returns (var r0) { return storage[0x09]; }\n    \n    function price1CumulativeLast() returns (var r0) { return storage[0x0a]; }\n    \n    function func_1257(var arg0) returns (var r0) {\n        r0 = func_2878(arg0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_1294(var arg0, var arg1, var arg2, var arg3, var arg4) returns (var r0) {\n        if (!arg3) { assert(); }\n    \n        arg3 = arg4 / arg3;\n        arg4 = arg0 & 0xffffffffffffffffffffffffffff;\n        var var0 = 0x12bd;\n        var var1 = arg1;\n        var var2 = arg2;\n        var0 = func_21E8(var1, var2);\n    \n        if (!arg4) { assert(); }\n    \n        arg4 = var0 / arg4;\n        var0 = 0x00;\n    \n        if (arg3 < arg4) { return arg3; }\n        else { return arg4; }\n    }\n    \n    function kLast() returns (var r0) { return storage[0x0b]; }\n    \n    function symbol() returns (var r0) {\n        var temp0 = memory[0x40:0x60];\n        r0 = temp0;\n        memory[0x40:0x60] = r0 + 0x40;\n        memory[r0:r0 + 0x20] = 0x06;\n        memory[r0 + 0x20:r0 + 0x20 + 0x20] = 0x554e492d56320000000000000000000000000000000000000000000000000000;\n        return r0;\n    }\n    \n    function MINIMUM_LIQUIDITY() returns (var r0) { return 0x03e8; }\n    \n    function func_19EE(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8, var arg9) returns (var r0) {\n        var temp0;\n        temp0, memory[arg5:arg5 + arg4] = address(arg8).staticcall.gas(msg.gas)(memory[arg7:arg7 + arg6]);\n        arg4 = !temp0;\n    \n        if (!arg4) {\n            arg1 = memory[0x40:0x60];\n            arg2 = returndata.length;\n        \n            if (arg2 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var temp1 = arg0;\n            arg0 = memory[arg1:arg1 + 0x20];\n            arg1 = temp1;\n            r0 = func_226E(arg0, arg1);\n            // Error: Could not resolve method call return address!\n        } else {\n            var temp2 = returndata.length;\n            memory[0x00:0x00 + temp2] = returndata[0x00:0x00 + temp2];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_1A26(var arg0, var arg1, var arg2) {\n        func_1FDB(arg0, arg1, arg2);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function factory() returns (var r0) { return storage[0x05] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function token1() returns (var r0) { return storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff; }\n    \n    function sync() {\n        if (storage[0x0c] == 0x01) {\n            storage[0x0c] = 0x00;\n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = address(this);\n            var var0 = 0x1fd4;\n            var var1 = storage[0x06] & 0xffffffffffffffffffffffffffffffffffffffff;\n            var var2 = 0x70a08231;\n            var var3 = temp0 + 0x24;\n            var var4 = 0x20;\n            var var5 = memory[0x40:0x60];\n            var var6 = temp0 - var5 + 0x24;\n            var var7 = var5;\n            var var8 = var1;\n            var var9 = !address(var8).code.length;\n        \n            if (var9) { revert(memory[0x00:0x00]); }\n        \n            func_1EDD(var1, var2, var3, var4, var5, var6, var7, var8, var9);\n            storage[0x0c] = 0x01;\n            return;\n        } else {\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n            memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x11;\n            memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x556e697377617056323a204c4f434b4544000000000000000000000000000000;\n            var temp2 = memory[0x40:0x60];\n            revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n        }\n    }\n    \n    function func_1EDD(var arg0, var arg1, var arg2, var arg3, var arg4, var arg5, var arg6, var arg7, var arg8) {\n        var temp0;\n        temp0, memory[arg4:arg4 + arg3] = address(arg7).staticcall.gas(msg.gas)(memory[arg6:arg6 + arg5]);\n        arg3 = !temp0;\n    \n        if (!arg3) {\n            arg0 = memory[0x40:0x60];\n            arg1 = returndata.length;\n        \n            if (arg1 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            arg0 = memory[arg0:arg0 + 0x20];\n            var temp1 = memory[0x40:0x60];\n            memory[temp1:temp1 + 0x20] = 0x70a0823100000000000000000000000000000000000000000000000000000000;\n            memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = address(this);\n            arg1 = storage[0x07] & 0xffffffffffffffffffffffffffffffffffffffff;\n            arg2 = 0x70a08231;\n            arg3 = temp1 + 0x24;\n            arg4 = 0x20;\n            arg5 = memory[0x40:0x60];\n            arg6 = temp1 - arg5 + 0x24;\n            arg7 = arg5;\n            arg8 = arg1;\n            var var0 = !address(arg8).code.length;\n        \n            if (var0) { revert(memory[0x00:0x00]); }\n        \n            var temp2;\n            temp2, memory[arg5:arg5 + arg4] = address(arg8).staticcall.gas(msg.gas)(memory[arg7:arg7 + arg6]);\n            arg4 = !temp2;\n        \n            if (!arg4) {\n                arg1 = memory[0x40:0x60];\n                arg2 = returndata.length;\n            \n                if (arg2 < 0x20) { revert(memory[0x00:0x00]); }\n            \n                arg1 = memory[arg1:arg1 + 0x20];\n                var temp3 = storage[0x08];\n                arg2 = temp3 & 0xffffffffffffffffffffffffffff;\n                arg3 = temp3 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n                func_22E0(arg0, arg1, arg2, arg3);\n                // Error: Could not resolve method call return address!\n            } else {\n                var temp4 = returndata.length;\n                memory[0x00:0x00 + temp4] = returndata[0x00:0x00 + temp4];\n                revert(memory[0x00:0x00 + returndata.length]);\n            }\n        } else {\n            var temp5 = returndata.length;\n            memory[0x00:0x00 + temp5] = returndata[0x00:0x00 + temp5];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_1FDB(var arg0, var arg1, var arg2) {\n        var temp0 = memory[0x40:0x60];\n        memory[0x40:0x60] = temp0 + 0x40;\n        memory[temp0:temp0 + 0x20] = 0x19;\n        memory[temp0 + 0x20:temp0 + 0x20 + 0x20] = 0x7472616e7366657228616464726573732c75696e743235362900000000000000;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = arg2;\n        var temp2 = memory[0x40:0x60];\n        memory[temp2:temp2 + 0x20] = temp1 - temp2 + 0x44;\n        memory[0x40:0x60] = temp1 + 0x64;\n        var temp3 = temp2 + 0x20;\n        memory[temp3:temp3 + 0x20] = (memory[temp3:temp3 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) | 0xa9059cbb00000000000000000000000000000000000000000000000000000000;\n        var var0 = 0x00;\n        var var1 = 0x60;\n        var var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = temp2;\n        var var4 = memory[0x40:0x60];\n        var var5 = var4;\n        var var6 = temp3;\n        var var7 = memory[var3:var3 + 0x20];\n        var var8 = var7;\n        var var9 = var5;\n        var var10 = var6;\n    \n        if (var8 < 0x20) {\n        label_20E1:\n            var temp4 = 0x0100 ** (0x20 - var8) - 0x01;\n            var temp5 = var9;\n            memory[temp5:temp5 + 0x20] = (memory[var10:var10 + 0x20] & ~temp4) | (memory[temp5:temp5 + 0x20] & temp4);\n            var temp6 = memory[0x40:0x60];\n            var temp7;\n            temp7, memory[temp6:temp6 + 0x00] = address(var2).call.gas(msg.gas)(memory[temp6:temp6 + (var7 + var5) - temp6]);\n            var3 = returndata.length;\n            var4 = var3;\n        \n            if (var4 == 0x00) {\n                var1 = 0x60;\n                var temp8 = var2;\n                var0 = temp8;\n                var2 = var0;\n            \n                if (!var2) {\n                label_2176:\n                \n                    if (var2) { return; }\n                \n                    var temp9 = memory[0x40:0x60];\n                    memory[temp9:temp9 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                    memory[temp9 + 0x04:temp9 + 0x04 + 0x20] = 0x20;\n                    memory[temp9 + 0x24:temp9 + 0x24 + 0x20] = 0x1a;\n                    memory[temp9 + 0x44:temp9 + 0x44 + 0x20] = 0x556e697377617056323a205452414e534645525f4641494c4544000000000000;\n                    var temp10 = memory[0x40:0x60];\n                    revert(memory[temp10:temp10 + temp9 - temp10 + 0x64]);\n                } else {\n                label_2155:\n                    var2 = !memory[var1:var1 + 0x20];\n                \n                    if (var2) { goto label_2176; }\n                \n                    var temp11 = var1;\n                    var2 = temp11 + 0x20;\n                    var3 = memory[temp11:temp11 + 0x20];\n                \n                    if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n                \n                    var2 = memory[var2:var2 + 0x20];\n                    goto label_2176;\n                }\n            } else {\n                var temp12 = memory[0x40:0x60];\n                var3 = temp12;\n                memory[0x40:0x60] = var3 + (returndata.length + 0x3f & ~0x1f);\n                memory[var3:var3 + 0x20] = returndata.length;\n                var temp13 = returndata.length;\n                memory[var3 + 0x20:var3 + 0x20 + temp13] = returndata[0x00:0x00 + temp13];\n                var1 = var3;\n                var temp14 = var2;\n                var0 = temp14;\n                var2 = var0;\n            \n                if (!var2) { goto label_2176; }\n                else { goto label_2155; }\n            }\n        } else {\n        label_20AD:\n            var temp15 = var10;\n            var temp16 = var9;\n            memory[temp16:temp16 + 0x20] = memory[temp15:temp15 + 0x20];\n            var8 = var8 + 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0;\n            var9 = temp16 + 0x20;\n            var10 = temp15 + 0x20;\n        \n            if (var8 < 0x20) { goto label_20E1; }\n            else { goto label_20AD; }\n        }\n    }\n    \n    function func_21E8(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = !arg1;\n    \n        if (var1) {\n        label_2203:\n        \n            if (var1) { return var0; }\n        \n            var temp0 = memory[0x40:0x60];\n            memory[temp0:temp0 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n            memory[temp0 + 0x04:temp0 + 0x04 + 0x20] = 0x20;\n            memory[temp0 + 0x24:temp0 + 0x24 + 0x20] = 0x14;\n            memory[temp0 + 0x44:temp0 + 0x44 + 0x20] = 0x64732d6d6174682d6d756c2d6f766572666c6f77000000000000000000000000;\n            var temp1 = memory[0x40:0x60];\n            revert(memory[temp1:temp1 + temp0 - temp1 + 0x64]);\n        } else {\n            var0 = arg0 * arg1;\n            var1 = arg0;\n            var var2 = arg1;\n            var var3 = var0;\n        \n            if (!var2) { assert(); }\n        \n            var1 = var3 / var2 == var1;\n            goto label_2203;\n        }\n    }\n    \n    function func_226E(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 - arg1;\n    \n        if (var0 <= temp0) { return var0; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x15;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x64732d6d6174682d7375622d756e646572666c6f770000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n    \n    function func_22E0(var arg0, var arg1, var arg2, var arg3) {\n        var var0 = arg0 <= 0xffffffffffffffffffffffffffff;\n    \n        if (arg0 <= 0xffffffffffffffffffffffffffff) {\n            if (var0) {\n            label_2377:\n                var0 = block.timestamp & 0xffffffff;\n                var var1 = var0 - (storage[0x08] / 0x0100000000000000000000000000000000000000000000000000000000 & 0xffffffff);\n                var var2 = !!(var1 & 0xffffffff);\n            \n                if (var1 & 0xffffffff) {\n                    var2 = !!(arg2 & 0xffffffffffffffffffffffffffff);\n                \n                    if (!var2) { goto label_23E2; }\n                    else { goto label_23CE; }\n                } else if (!var2) {\n                label_23E2:\n                \n                    if (!var2) {\n                    label_2492:\n                        var temp0 = (var0 & 0xffffffff) * 0x0100000000000000000000000000000000000000000000000000000000 | (((arg1 & 0xffffffffffffffffffffffffffff) * 0x010000000000000000000000000000 | (((arg0 & 0xffffffffffffffffffffffffffff) | (storage[0x08] & 0xffffffffffffffffffffffffffffffffffff0000000000000000000000000000)) & 0xffffffff0000000000000000000000000000ffffffffffffffffffffffffffff)) & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n                        storage[0x08] = temp0;\n                        var temp1 = memory[0x40:0x60];\n                        memory[temp1:temp1 + 0x20] = temp0 & 0xffffffffffffffffffffffffffff;\n                        memory[temp1 + 0x20:temp1 + 0x20 + 0x20] = temp0 / 0x010000000000000000000000000000 & 0xffffffffffffffffffffffffffff;\n                        var temp2 = memory[0x40:0x60];\n                        log(memory[temp2:temp2 + temp1 - temp2 + 0x40], [0x1c411e9a96e071241c2f21f7726b17ae89e3cab4c78be50e062b03a9fffbbad1]);\n                        return;\n                    } else {\n                    label_23E8:\n                        var2 = var1 & 0xffffffff;\n                        var var3 = 0x2425;\n                        var var4 = arg2;\n                        var var5 = 0x23fb;\n                        var var6 = arg3;\n                        var5 = func_2A57(var6);\n                        var3 = func_23FB(var4, var5);\n                        storage[0x09] = (var3 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) * var2 + storage[0x09];\n                        var2 = var1 & 0xffffffff;\n                        var3 = 0x2465;\n                        var4 = arg3;\n                        var5 = 0x23fb;\n                        var6 = arg2;\n                        var5 = func_2A57(var6);\n                        var3 = func_23FB(var4, var5);\n                        storage[0x0a] = (var3 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff) * var2 + storage[0x0a];\n                        goto label_2492;\n                    }\n                } else {\n                label_23CE:\n                \n                    if (!(arg3 & 0xffffffffffffffffffffffffffff)) { goto label_2492; }\n                    else { goto label_23E8; }\n                }\n            } else {\n            label_2311:\n                var temp3 = memory[0x40:0x60];\n                memory[temp3:temp3 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n                memory[temp3 + 0x04:temp3 + 0x04 + 0x20] = 0x20;\n                memory[temp3 + 0x24:temp3 + 0x24 + 0x20] = 0x13;\n                memory[temp3 + 0x44:temp3 + 0x44 + 0x20] = 0x556e697377617056323a204f564552464c4f5700000000000000000000000000;\n                var temp4 = memory[0x40:0x60];\n                revert(memory[temp4:temp4 + temp3 - temp4 + 0x64]);\n            }\n        } else if (arg1 <= 0xffffffffffffffffffffffffffff) { goto label_2377; }\n        else { goto label_2311; }\n    }\n    \n    function func_23FB(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n        arg1 = temp0;\n        var var0 = 0x00;\n        var var1 = arg1 & 0xffffffffffffffffffffffffffff;\n        var var2 = arg0 & 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\n    \n        if (var1) { return var2 / var1; }\n        else { assert(); }\n    }\n    \n    function func_259C(var arg0, var arg1, var arg2) {\n        var temp0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x02;\n        var temp1 = keccak256(memory[0x00:0x40]);\n        var temp2 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp2;\n        memory[0x20:0x40] = temp1;\n        var temp3 = arg2;\n        storage[keccak256(memory[0x00:0x40])] = temp3;\n        var temp4 = memory[0x40:0x60];\n        memory[temp4:temp4 + 0x20] = temp3;\n        var temp5 = memory[0x40:0x60];\n        log(memory[temp5:temp5 + temp4 - temp5 + 0x20], [0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-2] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function transfer(var arg0, var arg1, var arg2) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var var0 = 0x2641;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var2 = arg2;\n        var0 = func_226E(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        memory[0x00:0x20] = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        var0 = 0x2683;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var2 = arg2;\n        var0 = func_2ABC(var1, var2);\n        var temp0 = arg1 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg2;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-4] & 0xffffffffffffffffffffffffffffffffffffffff, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_26EC(var arg0, var arg1) returns (var r0) {\n        var var0 = 0x00;\n        var var1 = var0;\n        var var2 = storage[0x05] & 0xffffffffffffffffffffffffffffffffffffffff;\n        var var3 = 0x017e7e58;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = (var3 & 0xffffffff) << 0xe0;\n        var var4 = temp0 + 0x04;\n        var var5 = 0x20;\n        var var6 = memory[0x40:0x60];\n        var var7 = var4 - var6;\n        var var8 = var6;\n        var var9 = var2;\n        var var10 = !address(var9).code.length;\n    \n        if (var10) { revert(memory[0x00:0x00]); }\n    \n        var temp1;\n        temp1, memory[var6:var6 + var5] = address(var9).staticcall.gas(msg.gas)(memory[var8:var8 + var7]);\n        var5 = !temp1;\n    \n        if (!var5) {\n            var2 = memory[0x40:0x60];\n            var3 = returndata.length;\n        \n            if (var3 < 0x20) { revert(memory[0x00:0x00]); }\n        \n            var0 = !!(memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff);\n            var1 = memory[var2:var2 + 0x20];\n            var2 = storage[0x0b];\n        \n            if (!(memory[var2:var2 + 0x20] & 0xffffffffffffffffffffffffffffffffffffffff)) {\n                if (!var2) {\n                label_2870:\n                    return var0;\n                } else {\n                    storage[0x0b] = 0x00;\n                    return var0;\n                }\n            } else if (!var2) {\n            label_285F:\n                goto label_2870;\n            } else {\n                var3 = 0x00;\n                var4 = 0x27d8;\n                var5 = 0x1257;\n                var6 = arg0 & 0xffffffffffffffffffffffffffff;\n                var7 = arg1 & 0xffffffffffffffffffffffffffff;\n                var5 = func_21E8(var6, var7);\n                var4 = func_1257(var5);\n                var3 = var4;\n                var4 = 0x00;\n                var5 = 0x27e5;\n                var6 = var2;\n                var5 = func_2878(var6);\n                var4 = var5;\n            \n                if (var3 <= var4) {\n                label_285C:\n                    goto label_285F;\n                } else {\n                    var5 = 0x00;\n                    var6 = 0x2813;\n                    var7 = 0x2804;\n                    var8 = var3;\n                    var9 = var4;\n                    var7 = func_226E(var8, var9);\n                    var6 = func_2804(var7);\n                    var5 = var6;\n                    var6 = 0x00;\n                    var7 = 0x2838;\n                    var8 = var4;\n                    var9 = 0x282c;\n                    var10 = var3;\n                    var var11 = 0x05;\n                    var9 = func_21E8(var10, var11);\n                    var7 = func_282C(var8, var9);\n                    var temp2 = var7;\n                    var6 = temp2;\n                    var7 = 0x00;\n                    var8 = var6;\n                    var9 = var5;\n                \n                    if (!var8) { assert(); }\n                \n                    var7 = var9 / var8;\n                \n                    if (!var7) {\n                    label_2858:\n                        goto label_285C;\n                    } else {\n                        var8 = 0x2858;\n                        var9 = var1;\n                        var10 = var7;\n                        func_28CA(var9, var10);\n                        goto label_2858;\n                    }\n                }\n            }\n        } else {\n            var temp3 = returndata.length;\n            memory[0x00:0x00 + temp3] = returndata[0x00:0x00 + temp3];\n            revert(memory[0x00:0x00 + returndata.length]);\n        }\n    }\n    \n    function func_2804(var arg0) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = storage[0x00];\n        var var0 = temp0;\n        r0 = func_21E8(arg0, var0);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_282C(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        arg0 = arg1;\n        arg1 = temp0;\n        r0 = func_2ABC(arg0, arg1);\n        // Error: Could not resolve method call return address!\n    }\n    \n    function func_2878(var arg0) returns (var r0) {\n        var var0 = 0x00;\n    \n        if (arg0 > 0x03) {\n            var temp0 = arg0;\n            var0 = temp0;\n            var var1 = var0 / 0x02 + 0x01;\n        \n            if (var1 >= var0) {\n            label_28B5:\n                goto label_28C5;\n            } else {\n            label_2896:\n                var0 = var1;\n                var var2 = 0x02;\n                var var3 = var0;\n                var var4 = var3;\n                var var5 = arg0;\n            \n                if (!var4) { assert(); }\n            \n                var3 = var5 / var4 + var3;\n            \n                if (!var2) { assert(); }\n            \n                var1 = var3 / var2;\n            \n                if (var1 >= var0) { goto label_28B5; }\n                else { goto label_2896; }\n            }\n        } else if (!arg0) {\n        label_28C5:\n            return var0;\n        } else { return 0x01; }\n    }\n    \n    function func_28CA(var arg0, var arg1) {\n        var var0 = 0x28dd;\n        var var1 = storage[0x00];\n        var var2 = arg1;\n        var0 = func_2ABC(var1, var2);\n        storage[0x00] = var0;\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var1 = storage[keccak256(memory[0x00:0x40])];\n        var0 = 0x2915;\n        var2 = arg1;\n        var0 = func_2ABC(var1, var2);\n        var temp0 = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x00:0x20] = temp0;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = arg1;\n        var temp2 = memory[0x40:0x60];\n        log(memory[temp2:temp2 + temp1 - temp2 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, 0x00, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff]);\n    }\n    \n    function func_2992(var arg0, var arg1) {\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        var var1 = storage[keccak256(memory[0x00:0x40])];\n        var var0 = 0x29c8;\n        var var2 = arg1;\n        var0 = func_226E(var1, var2);\n        memory[0x00:0x20] = arg0 & 0xffffffffffffffffffffffffffffffffffffffff;\n        memory[0x20:0x40] = 0x01;\n        storage[keccak256(memory[0x00:0x40])] = var0;\n        var1 = storage[0x00];\n        var0 = 0x2a02;\n        var2 = arg1;\n        var0 = func_226E(var1, var2);\n        storage[0x00] = var0;\n        var temp0 = memory[0x40:0x60];\n        memory[temp0:temp0 + 0x20] = arg1;\n        var temp1 = memory[0x40:0x60];\n        log(memory[temp1:temp1 + temp0 - temp1 + 0x20], [0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef, stack[-3] & 0xffffffffffffffffffffffffffffffffffffffff, 0x00]);\n    }\n    \n    function func_2A57(var arg0) returns (var r0) { return (arg0 & 0xffffffffffffffffffffffffffff) * 0x010000000000000000000000000000; }\n    \n    function func_2ABC(var arg0, var arg1) returns (var r0) {\n        var temp0 = arg0;\n        var var0 = temp0 + arg1;\n    \n        if (var0 >= temp0) { return var0; }\n    \n        var temp1 = memory[0x40:0x60];\n        memory[temp1:temp1 + 0x20] = 0x08c379a000000000000000000000000000000000000000000000000000000000;\n        memory[temp1 + 0x04:temp1 + 0x04 + 0x20] = 0x20;\n        memory[temp1 + 0x24:temp1 + 0x24 + 0x20] = 0x14;\n        memory[temp1 + 0x44:temp1 + 0x44 + 0x20] = 0x64732d6d6174682d6164642d6f766572666c6f77000000000000000000000000;\n        var temp2 = memory[0x40:0x60];\n        revert(memory[temp2:temp2 + temp1 - temp2 + 0x64]);\n    }\n}\n\n.",
	"status": "1",
	"time_cost": 26.264942169189453,
	"usage": {
		"completion_tokens": 301,
		"prompt_tokens": 26577,
		"total_tokens": 26878
	}
}