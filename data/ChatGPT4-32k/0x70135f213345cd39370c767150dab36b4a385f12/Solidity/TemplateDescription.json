{
	"address": "0x70135f213345cd39370c767150dab36b4a385f12",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's a contract that meets your specifications:\n\n```solidity\npragma solidity 0.6.12;\n\ncontract CustomToken {\n    using SafeMath for uint256;\n\n    uint256 public totalsupply;\n    uint256 private deadline;\n    address public owner;\n    mapping(address => uint256) public balanceof;\n    mapping(address => mapping(address => uint256)) public allowance;\n\n    constructor() public payable {\n        totalsupply = 1;\n        if (msg.value == 0) {\n            owner = msg.sender;\n            balanceof[msg.sender] = totalsupply;\n            deadline = block.timestamp.add(0x127500);\n        }\n    }\n\n    function fallback() external payable {\n        require(block.timestamp < deadline, \"Deadline has passed\");\n        uint256 received = msg.value.div(0x38d7ea4c68000);\n        totalsupply = totalsupply.add(received);\n        balanceof[msg.sender] = balanceof[msg.sender].add(received);\n    }\n\n    function approve(address _spender, uint256 _value) public {\n        allowance[msg.sender][_spender] = _value;\n    }\n\n    function disable() public {\n        require(msg.sender == owner, \"Only owner can disable\");\n        deadline = block.timestamp;\n    }\n\n    function withdraw() public {\n        require(msg.sender == owner, \"Only owner can withdraw\");\n        payable(owner).transfer(address(this).balance);\n    }\n\n    function enable() public {\n        require(msg.sender == owner, \"Only owner can enable\");\n        deadline = block.timestamp.add(0x93a80);\n    }\n\n    function transferFrom(address _from, address _to, uint256 _value) public {\n        require(balanceof[_to].add(_value) > balanceof[_to], \"Overflow error\");\n        require(balanceof[_from] >= _value, \"Insufficient balance\");\n        require(allowance[_from][msg.sender] >= _value, \"Insufficient allowance\");\n        require(_value > 0, \"Value must be greater than 0\");\n        balanceof[_from] = balanceof[_from].sub(_value);\n        allowance[_from][msg.sender] = allowance[_from][msg.sender].sub(_value);\n        balanceof[_to] = balanceof[_to].add(_value);\n    }\n\n    function transfer(address _to, uint256 _value) public {\n        require(balanceof[_to].add(_value) > balanceof[_to], \"Overflow error\");\n        require(balanceof[msg.sender] >= _value, \"Insufficient balance\");\n        require(_value > 0, \"Value must be greater than 0\");\n        balanceof[msg.sender] = balanceof[msg.sender].sub(_value);\n        balanceof[_to] = balanceof[_to].add(_value);\n    }\n\n}\n\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n}\n```\nThis contract allows users to interact with a custom token. It includes the SafeMath library for safe mathematical operations, and provides functions for approving, transferring, enabling, disabling, withdrawing and a fallback function for receiving funds.",
				"role": "assistant"
			}
		}
	],
	"created": 1701722539,
	"id": "chatcmpl-8SA3fVJ6haS8pzdoGXdKIy3Ca8028",
	"input_format": "TemplateDescription",
	"ir": "For the payable constructor function.\n- the state variable totalsupply will be updated to 1.\n- When the ether just received (i.e., msg.value) is 0:\n  - the state variable owner will be updated to caller.\n  - the balance of caller or s_2_20_32 will be updated to totalsupply.\n  - the state variable deadline will be updated to (0x127500+current time).\n\nFor the payable fallback function.\n- Before deadline:\n  - the state variable totalsupply will be updated to ((the ether just received (i.e., msg.value)/0x38d7ea4c68000)+totalsupply).\n  - the balance of caller will be updated to ((the ether just received (i.e., msg.value)/0x38d7ea4c68000)+the balance of caller).\n\nFor the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the allowance from caller to the first argument will be updated to the second argument.\n\nFor the disable function.\n- For owner:\n  - the state variable deadline will be updated to current time.\n\nFor the withdraw function.\n- For owner:\n  - it transfers ether valued the balance of the address of this contract to caller.\n\nFor the enable function.\n- For owner:\n  - the state variable deadline will be updated to (current time+0x93a80).\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When (the balance of the second argument+the third argument) is greater than the balance of the second argument, and the balance of the first argument is not smaller than the third argument, and the allowance from the first argument to caller is not smaller than the third argument, and the third argument is greater than 0:\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n  - the balance of the second argument will be updated to (the third argument+the balance of the second argument).\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When (the balance of the first argument+the second argument) is greater than the balance of the first argument, and the balance of caller is not smaller than the second argument, and the second argument is greater than 0:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables and programming specifications are provided to help you develop. ",
			"role": "system"
		},
		{
			"content": "The following is the description of the contract logic: For the payable constructor function.\n- the state variable totalsupply will be updated to 1.\n- When the ether just received (i.e., msg.value) is 0:\n  - the state variable owner will be updated to caller.\n  - the balance of caller or s_2_20_32 will be updated to totalsupply.\n  - the state variable deadline will be updated to (0x127500+current time).\n\nFor the payable fallback function.\n- Before deadline:\n  - the state variable totalsupply will be updated to ((the ether just received (i.e., msg.value)/0x38d7ea4c68000)+totalsupply).\n  - the balance of caller will be updated to ((the ether just received (i.e., msg.value)/0x38d7ea4c68000)+the balance of caller).\n\nFor the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the allowance from caller to the first argument will be updated to the second argument.\n\nFor the disable function.\n- For owner:\n  - the state variable deadline will be updated to current time.\n\nFor the withdraw function.\n- For owner:\n  - it transfers ether valued the balance of the address of this contract to caller.\n\nFor the enable function.\n- For owner:\n  - the state variable deadline will be updated to (current time+0x93a80).\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When (the balance of the second argument+the third argument) is greater than the balance of the second argument, and the balance of the first argument is not smaller than the third argument, and the allowance from the first argument to caller is not smaller than the third argument, and the third argument is greater than 0:\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n  - the balance of the second argument will be updated to (the third argument+the balance of the second argument).\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When (the balance of the first argument+the second argument) is greater than the balance of the first argument, and the balance of caller is not smaller than the second argument, and the second argument is greater than 0:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\n.\n Here are some state variables with their corresponding types: public state variable `totalsupply` is typed uint256,private state variable `deadline` is typed uint256,public state variable `owner` is typed address,public state variable `balanceof` is typed mapping,public state variable `allowance` is typed mapping.\n Here are some programming specifications: - You must declare a variable before you can use it, but the same variable cannot be declared twice\n- You must lock the pragma and use a stable version (e.g., pragma solidity `0.6.12`).\n- For exteranal calls, you must use `.call()` instead of `.transfer()` and `.send()`.\n- The target address who receives ether must be `payable address` type.\n- You must make the function `payable` if `msg.value` is used in the public functions.\n- From security perspectives, you must check whether an overflow or underflow is possible before an arithmetic operation (e.g., safemath operations), and you should determine whether the user's address is empty before transferring ether to the him.\n- You cannot import external resources because you are a separate contract.\n- You must use the following methods in new versions rather than old methods\n  - For some built-in functions, \n    - `abi.encodePacked(...) returns (bytes memory)` performs packed encoding of arguments to bytes.\n    - `keccak256(bytes memory) returns (bytes32)` computes the Keccak-256 hash of the input.\n    - `sha256(bytes memory) returns (bytes32)` computes the SHA-256 hash of the input.\n    - `ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)` recovers the address associated with the public key from elliptic curve signature or return zero on error. \n  - For some properties,\n    - `block.number (uint)` returns the current block number.\n    - `block.timestamp (uint)` returns the current block timestamp as seconds since unix epoch.\n    - `blockhash(uint blockNumber) returns (bytes32)` returns the hash of the given block.\n- `0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` means `-1`, so `+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` indeed means `-1`.\n",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following contract descriptions. Some state variables and programming specifications are provided to help you develop. The following is the description of the contract logic: For the payable constructor function.\n- the state variable totalsupply will be updated to 1.\n- When the ether just received (i.e., msg.value) is 0:\n  - the state variable owner will be updated to caller.\n  - the balance of caller or s_2_20_32 will be updated to totalsupply.\n  - the state variable deadline will be updated to (0x127500+current time).\n\nFor the payable fallback function.\n- Before deadline:\n  - the state variable totalsupply will be updated to ((the ether just received (i.e., msg.value)/0x38d7ea4c68000)+totalsupply).\n  - the balance of caller will be updated to ((the ether just received (i.e., msg.value)/0x38d7ea4c68000)+the balance of caller).\n\nFor the approve function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- the allowance from caller to the first argument will be updated to the second argument.\n\nFor the disable function.\n- For owner:\n  - the state variable deadline will be updated to current time.\n\nFor the withdraw function.\n- For owner:\n  - it transfers ether valued the balance of the address of this contract to caller.\n\nFor the enable function.\n- For owner:\n  - the state variable deadline will be updated to (current time+0x93a80).\n\nFor the transferFrom function, it has 3 arguments and the type of each argument is as follows: address, address, uint256.\n- When (the balance of the second argument+the third argument) is greater than the balance of the second argument, and the balance of the first argument is not smaller than the third argument, and the allowance from the first argument to caller is not smaller than the third argument, and the third argument is greater than 0:\n  - the balance of the first argument will be updated to (the balance of the first argument-the third argument).\n  - the allowance from the first argument to caller will be updated to (the allowance from the first argument to caller-the third argument).\n  - the balance of the second argument will be updated to (the third argument+the balance of the second argument).\n\nFor the transfer function, it has 2 arguments and the type of each argument is as follows: address, uint256.\n- When (the balance of the first argument+the second argument) is greater than the balance of the first argument, and the balance of caller is not smaller than the second argument, and the second argument is greater than 0:\n  - the balance of caller will be updated to (the balance of caller-the second argument).\n  - the balance of the first argument will be updated to (the second argument+the balance of the first argument).\n\n.\n Here are some state variables with their corresponding types: public state variable `totalsupply` is typed uint256,private state variable `deadline` is typed uint256,public state variable `owner` is typed address,public state variable `balanceof` is typed mapping,public state variable `allowance` is typed mapping.\n Here are some programming specifications: - You must declare a variable before you can use it, but the same variable cannot be declared twice\n- You must lock the pragma and use a stable version (e.g., pragma solidity `0.6.12`).\n- For exteranal calls, you must use `.call()` instead of `.transfer()` and `.send()`.\n- The target address who receives ether must be `payable address` type.\n- You must make the function `payable` if `msg.value` is used in the public functions.\n- From security perspectives, you must check whether an overflow or underflow is possible before an arithmetic operation (e.g., safemath operations), and you should determine whether the user's address is empty before transferring ether to the him.\n- You cannot import external resources because you are a separate contract.\n- You must use the following methods in new versions rather than old methods\n  - For some built-in functions, \n    - `abi.encodePacked(...) returns (bytes memory)` performs packed encoding of arguments to bytes.\n    - `keccak256(bytes memory) returns (bytes32)` computes the Keccak-256 hash of the input.\n    - `sha256(bytes memory) returns (bytes32)` computes the SHA-256 hash of the input.\n    - `ecrecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) returns (address)` recovers the address associated with the public key from elliptic curve signature or return zero on error. \n  - For some properties,\n    - `block.number (uint)` returns the current block number.\n    - `block.timestamp (uint)` returns the current block timestamp as seconds since unix epoch.\n    - `blockhash(uint blockNumber) returns (bytes32)` returns the hash of the given block.\n- `0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` means `-1`, so `+0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff` indeed means `-1`.\n",
	"status": "1",
	"time_cost": 58.0930061340332,
	"usage": {
		"completion_tokens": 746,
		"prompt_tokens": 1108,
		"total_tokens": 1854
	}
}