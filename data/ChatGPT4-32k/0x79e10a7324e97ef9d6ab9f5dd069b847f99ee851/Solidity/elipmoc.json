{
	"address": "0x79e10a7324e97ef9d6ab9f5dd069b847f99ee851",
	"choices": {
		"finish_reason": "stop",
		"index": 0,
		"logprobs": null,
		"message": {
			"content": "Here is the Solidity contract code based on the decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract Crowdfunding {\n    uint256 public _softCap;\n    uint256 public _hardCap;\n    uint256 public _amountRaised;\n    uint256 public _deadline;\n    uint256 public _price;\n    mapping (address => uint256) public _balanceOf;\n    address payable public _beneficiary;\n    bool public _safeWithdrawal;\n    bool public _fallback;\n    address public _tokenReward;\n\n    event FundTransfer(address backer, uint256 amount, bool isContribution);\n    event GoalReached(address recipient, uint256 totalAmountRaised);\n\n    function checkGoalReached() public {\n        if (now >= _deadline) {\n            if (_amountRaised >= _softCap) {\n                _safeWithdrawal = true;\n                emit GoalReached(_beneficiary, _amountRaised);\n            }\n            _fallback = true;\n        }\n    }\n\n    function safeWithdrawal() public {\n       if (now >= _deadline && !_safeWithdrawal) {\n            uint256 amount = _balanceOf[msg.sender];\n            _balanceOf[msg.sender] = 0;\n            if (amount > 0) {\n                if (!msg.sender.send(amount)) {\n                    _balanceOf[msg.sender] = amount;\n                } else {\n                    emit FundTransfer(msg.sender, amount, false);\n                }\n            }\n        }\n\n        if (_safeWithdrawal && _beneficiary == msg.sender) {\n            if (_beneficiary.send(_amountRaised)) {\n                emit FundTransfer(_beneficiary, _amountRaised, false);\n            } else {\n                _safeWithdrawal = false;\n            }\n        }\n    }\n\n    function () external payable {\n        require(!_fallback && _hardCap >= _amountRaised);\n        _balanceOf[msg.sender] += msg.value;\n        _amountRaised += msg.value;\n        emit FundTransfer(msg.sender, msg.value, true);\n    }\n}\n```\n\nPlease note that this code is based on the decompiled bytecode. It may not be 100% accurate, but it should provide a good starting point. The `_tokenReward` functionality is not replicated in this code as it was not clear from the decompiled code. Also, the `__function_selector__` function is not present because function selectors are handled automatically in Solidity.",
			"function_call": null,
			"role": "assistant",
			"tool_calls": null
		}
	},
	"created": 1711535568,
	"id": "chatcmpl-97KsKPLviuvOhONpnsqfhdE9rI5F8",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled by library.dedaub.com\n// 2022.11.25 06:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _softCap; // STORAGE[0x1]\nuint256 _hardCap; // STORAGE[0x2]\nuint256 _amountRaised; // STORAGE[0x3]\nuint256 _deadline; // STORAGE[0x4]\nuint256 _price; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x7]\nuint256 stor_c; // STORAGE[0xc]\nuint256 _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint256 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\nuint256 _safeWithdrawal; // STORAGE[0x8] bytes 0 to 0\nuint256 _fallback; // STORAGE[0x8] bytes 1 to 1\nuint256 _tokenReward; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _softCap) {\n            _safeWithdrawal = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _fallback = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction softCap() public nonPayable { \n    return _softCap;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction hardCap() public nonPayable { \n    return _hardCap;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (!_safeWithdrawal) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(!_balanceOf[msg.sender] * 2300);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = _safeWithdrawal;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v3) {\n                _safeWithdrawal = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction () public payable { \n    require(!_fallback);\n    require(_hardCap >= _amountRaised);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    assert(stor_5_0_0);\n    require(_tokenReward.code.size);\n    v0, v1 = _tokenReward.transfer(msg.sender, msg.value * 10 ** stor_c / _price).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == uint32(function_selector >> 224)) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == uint32(function_selector >> 224)) {\n            deadline();\n        } else if (0x38af3eed == uint32(function_selector >> 224)) {\n            beneficiary();\n        } else if (0x6e66f6e9 == uint32(function_selector >> 224)) {\n            tokenReward();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x7b3e5e7b == uint32(function_selector >> 224)) {\n            amountRaised();\n        } else if (0x906a26e0 == uint32(function_selector >> 224)) {\n            softCap();\n        } else if (0xa035b1fe == uint32(function_selector >> 224)) {\n            price();\n        } else if (0xfb86a404 == uint32(function_selector >> 224)) {\n            hardCap();\n        } else if (0xfd6b7ef8 == uint32(function_selector >> 224)) {\n            safeWithdrawal();\n        }\n    }\n    ();\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.11.25 06:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _softCap; // STORAGE[0x1]\nuint256 _hardCap; // STORAGE[0x2]\nuint256 _amountRaised; // STORAGE[0x3]\nuint256 _deadline; // STORAGE[0x4]\nuint256 _price; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x7]\nuint256 stor_c; // STORAGE[0xc]\nuint256 _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint256 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\nuint256 _safeWithdrawal; // STORAGE[0x8] bytes 0 to 0\nuint256 _fallback; // STORAGE[0x8] bytes 1 to 1\nuint256 _tokenReward; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _softCap) {\n            _safeWithdrawal = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _fallback = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction softCap() public nonPayable { \n    return _softCap;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction hardCap() public nonPayable { \n    return _hardCap;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (!_safeWithdrawal) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(!_balanceOf[msg.sender] * 2300);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = _safeWithdrawal;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v3) {\n                _safeWithdrawal = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction () public payable { \n    require(!_fallback);\n    require(_hardCap >= _amountRaised);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    assert(stor_5_0_0);\n    require(_tokenReward.code.size);\n    v0, v1 = _tokenReward.transfer(msg.sender, msg.value * 10 ** stor_c / _price).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == uint32(function_selector >> 224)) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == uint32(function_selector >> 224)) {\n            deadline();\n        } else if (0x38af3eed == uint32(function_selector >> 224)) {\n            beneficiary();\n        } else if (0x6e66f6e9 == uint32(function_selector >> 224)) {\n            tokenReward();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x7b3e5e7b == uint32(function_selector >> 224)) {\n            amountRaised();\n        } else if (0x906a26e0 == uint32(function_selector >> 224)) {\n            softCap();\n        } else if (0xa035b1fe == uint32(function_selector >> 224)) {\n            price();\n        } else if (0xfb86a404 == uint32(function_selector >> 224)) {\n            hardCap();\n        } else if (0xfd6b7ef8 == uint32(function_selector >> 224)) {\n            safeWithdrawal();\n        }\n    }\n    ();\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled by library.dedaub.com\n// 2022.11.25 06:56 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nuint256 _softCap; // STORAGE[0x1]\nuint256 _hardCap; // STORAGE[0x2]\nuint256 _amountRaised; // STORAGE[0x3]\nuint256 _deadline; // STORAGE[0x4]\nuint256 _price; // STORAGE[0x5]\nmapping (uint256 => [uint256]) _balanceOf; // STORAGE[0x7]\nuint256 stor_c; // STORAGE[0xc]\nuint256 _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint256 stor_5_0_0; // STORAGE[0x5] bytes 0 to 0\nuint256 _safeWithdrawal; // STORAGE[0x8] bytes 0 to 0\nuint256 _fallback; // STORAGE[0x8] bytes 1 to 1\nuint256 _tokenReward; // STORAGE[0x6] bytes 0 to 19\n\n// Events\nFundTransfer(address, uint256, bool);\nGoalReached(address, uint256);\n\nfunction checkGoalReached() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (_amountRaised >= _softCap) {\n            _safeWithdrawal = 1;\n            emit GoalReached(_beneficiary, _amountRaised);\n        }\n        _fallback = 1;\n    }\n}\n\nfunction deadline() public nonPayable { \n    return _deadline;\n}\n\nfunction beneficiary() public nonPayable { \n    return _beneficiary;\n}\n\nfunction tokenReward() public nonPayable { \n    return _tokenReward;\n}\n\nfunction balanceOf(address varg0) public nonPayable { \n    return _balanceOf[varg0];\n}\n\nfunction amountRaised() public nonPayable { \n    return _amountRaised;\n}\n\nfunction softCap() public nonPayable { \n    return _softCap;\n}\n\nfunction price() public nonPayable { \n    return _price;\n}\n\nfunction hardCap() public nonPayable { \n    return _hardCap;\n}\n\nfunction safeWithdrawal() public nonPayable { \n    if (block.timestamp >= _deadline) {\n        if (!_safeWithdrawal) {\n            _balanceOf[msg.sender] = 0;\n            if (_balanceOf[msg.sender] > 0) {\n                v0 = msg.sender.call().value(_balanceOf[msg.sender]).gas(!_balanceOf[msg.sender] * 2300);\n                if (!v0) {\n                    _balanceOf[msg.sender] = _balanceOf[msg.sender];\n                } else {\n                    emit FundTransfer(msg.sender, _balanceOf[msg.sender], 0);\n                }\n            }\n        }\n        v1 = v2 = _safeWithdrawal;\n        if (v2) {\n            v1 = _beneficiary == msg.sender;\n        }\n        if (v1) {\n            v3 = _beneficiary.call().value(_amountRaised).gas(!_amountRaised * 2300);\n            if (!v3) {\n                _safeWithdrawal = 0;\n            } else {\n                emit FundTransfer(_beneficiary, _amountRaised, 0);\n            }\n        }\n    }\n}\n\nfunction () public payable { \n    require(!_fallback);\n    require(_hardCap >= _amountRaised);\n    _balanceOf[msg.sender] = _balanceOf[msg.sender] + msg.value;\n    _amountRaised = _amountRaised + msg.value;\n    assert(stor_5_0_0);\n    require(_tokenReward.code.size);\n    v0, v1 = _tokenReward.transfer(msg.sender, msg.value * 10 ** stor_c / _price).gas(msg.gas);\n    require(v0); // checks call status, propagates error data on error\n    require(RETURNDATASIZE() >= 32);\n    emit FundTransfer(msg.sender, msg.value, 1);\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(bytes4 function_selector) public payable { \n    MEM[64] = 128;\n    if (msg.data.length >= 4) {\n        if (0x1cb3b20 == uint32(function_selector >> 224)) {\n            checkGoalReached();\n        } else if (0x29dcb0cf == uint32(function_selector >> 224)) {\n            deadline();\n        } else if (0x38af3eed == uint32(function_selector >> 224)) {\n            beneficiary();\n        } else if (0x6e66f6e9 == uint32(function_selector >> 224)) {\n            tokenReward();\n        } else if (0x70a08231 == uint32(function_selector >> 224)) {\n            balanceOf(address);\n        } else if (0x7b3e5e7b == uint32(function_selector >> 224)) {\n            amountRaised();\n        } else if (0x906a26e0 == uint32(function_selector >> 224)) {\n            softCap();\n        } else if (0xa035b1fe == uint32(function_selector >> 224)) {\n            price();\n        } else if (0xfb86a404 == uint32(function_selector >> 224)) {\n            hardCap();\n        } else if (0xfd6b7ef8 == uint32(function_selector >> 224)) {\n            safeWithdrawal();\n        }\n    }\n    ();\n}\n.",
	"status": "1",
	"time_cost": 157.57041335105896,
	"usage": {
		"completion_tokens": 486,
		"prompt_tokens": 1213,
		"total_tokens": 1699
	}
}