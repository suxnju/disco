{
	"address": "0xb3775fb83f7d12a36e0475abdd1fca35c091efbe",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here is a Solidity version of the provided decompiled EVM bytecode:\n\n```solidity\npragma solidity ^0.5.0;\n\ncontract MyContract {\n    uint256 public totalSupply;\n    address public owner;\n    mapping(address => uint256) public balanceOf;\n    mapping(address => mapping(address => uint256)) public allowance;\n    \n    constructor(uint256 _totalSupply) public {\n        totalSupply = _totalSupply;\n        owner = msg.sender;\n        balanceOf[msg.sender] = _totalSupply;\n    }\n    \n    function transfer(address _to, uint256 _value) public returns (bool success) {\n        require(balanceOf[msg.sender] >= _value);\n        balanceOf[msg.sender] -= _value;\n        balanceOf[_to] += _value;\n        return true;\n    }\n    \n    function approve(address _spender, uint256 _value) public returns (bool success) {\n        allowance[msg.sender][_spender] = _value;\n        return true;\n    }\n    \n    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {\n        require(_value <= balanceOf[_from]);\n        require(_value <= allowance[_from][msg.sender]);\n        balanceOf[_from] -= _value;\n        balanceOf[_to] += _value;\n        allowance[_from][msg.sender] -= _value;\n        return true;\n    }\n}\n```\n\nPlease note that this is a simple ERC20 token contract written in Solidity. It has basic functionalities of a token such as transferring tokens from one account to another, approving an address to spend tokens on behalf of the account owner, and transferring tokens from one account to another on behalf of the account owner. It does not include the more complex functions found in the decompiled code because without the original high level language code, it is difficult to determine what some of the complex calculations and logic in the EVM bytecode are intended to accomplish.",
				"role": "assistant"
			}
		}
	],
	"created": 1700470853,
	"id": "chatcmpl-8MuRB2Hlcl1M0iJxi2fUUuusZ0Ogc",
	"input_format": "DecompiledCode",
	"ir": "# Palkeoramix decompiler. \n\nconst decimals = 18\nconst totalEthereumBalance = eth.balance(this.address)\n\ndef storage:\n  name is array of uint256 at storage 0\n  symbol is array of uint256 at storage 1\n  stakingRequirement is uint256 at storage 2\n  stor3 is mapping of uint8 at storage 3\n  balanceOf is mapping of uint256 at storage 4\n  stor5 is mapping of uint256 at storage 5\n  stor6 is mapping of uint256 at storage 6\n  stor7 is mapping of uint256 at storage 7\n  totalSupply is uint256 at storage 8\n  stor9 is uint256 at storage 9\n  stor10 is mapping of uint8 at storage 10\n  onlyAmbassadors is uint8 at storage 11\n\ndef name(): # not payable\n  return name[0 len name.length]\n\ndef totalSupply(): # not payable\n  return totalSupply\n\ndef onlyAmbassadors(): # not payable\n  return bool(onlyAmbassadors)\n\ndef administrators(bytes32 _param1): # not payable\n  return bool(stor10[_param1])\n\ndef stakingRequirement(): # not payable\n  return stakingRequirement\n\ndef balanceOf(address account): # not payable\n  return balanceOf[address(account)]\n\ndef myTokens(): # not payable\n  return balanceOf[caller]\n\ndef symbol(): # not payable\n  return symbol[0 len symbol.length]\n\n#\n#  Regular functions\n#\n\ndef disableInitialStage(): # not payable\n  require stor10[caller]\n  onlyAmbassadors = 0\n\ndef setStakingRequirement(uint256 _amountOfTokens): # not payable\n  require stor10[caller]\n  stakingRequirement = _amountOfTokens\n\ndef setName(string _name): # not payable\n  require stor10[caller]\n  name[] = Array(len=_name.length, data=_name[all])\n\ndef setAdministrator(bytes32 _identifier, bool _status): # not payable\n  require stor10[caller]\n  stor10[_identifier] = uint8(_status)\n\ndef setSymbol(string _symbol): # not payable\n  require stor10[caller]\n  symbol[] = Array(len=_symbol.length, data=_symbol[all])\n\ndef dividendsOf(address _customerAddress): # not payable\n  return (Mask(192, 64, (balanceOf[address(_customerAddress)] * stor9) - stor6[address(_customerAddress)]) >> 64)\n\ndef myDividends(bool _includeReferralBonus): # not payable\n  if _includeReferralBonus:\n      return ((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller])\n  return (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64)\n\ndef sellPrice(): # not payable\n  if not totalSupply:\n      return (25 * 10^6 * 3600)\n  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n  return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) - ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 10))\n\ndef buyPrice(): # not payable\n  if not totalSupply:\n      return 11 * 10^10\n  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n  require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 10) + ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n  return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 10) + ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18))\n\ndef withdraw(): # not payable\n  require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller])\n  stor5[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef calculateTokensReceived(uint256 _ethereumToSpend): # not payable\n  require _ethereumToSpend / 10 <= _ethereumToSpend\n  s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n  t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n  while s < t:\n      require s\n      s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n      t = s\n      continue \n  if 100000000000 * 10^18 <= t:\n      return ((t - 100000000000 * 10^18 / 10^10) - totalSupply)\n  revert\n\ndef calculateEthereumReceived(uint256 _tokensToSell): # not payable\n  require _tokensToSell <= totalSupply\n  require 10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell)\n  require (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 10 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18\n  return (((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 10))\n\ndef sell(uint256 amount): # not payable\n  require balanceOf[caller] > 0\n  require amount <= balanceOf[caller]\n  require 10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount)\n  require (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10 <= (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18\n  require amount <= totalSupply\n  totalSupply -= amount\n  require amount <= balanceOf[caller]\n  balanceOf[caller] -= amount\n  stor6[caller] = stor6[caller] - (((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10) << 64) - (amount * stor9)\n  if totalSupply > 0:\n      require totalSupply\n      require ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10 << 64 / totalSupply) + stor9 >= stor9\n      stor9 += (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10 << 64 / totalSupply\n  log onTokenSell(\n        address customerAddress=amount,\n        uint256 tokensBurned=((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10),\n        uint256 ethereumEarned=caller)\n\ndef transfer(address recipient, uint256 amount): # not payable\n  require balanceOf[caller] > 0\n  require not onlyAmbassadors\n  require amount <= balanceOf[caller]\n  if (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0:\n      require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0\n      stor6[caller] += Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller])\n      stor5[caller] = 0\n      call caller with:\n         value (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n      log onWithdraw(\n            address customerAddress=((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]),\n            uint256 ethereumWithdrawn=caller)\n  require amount / 10 <= amount\n  require 10^10 * ((amount / 10) + 10^18)^2 + -(amount / 10) - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * amount / 10) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 10)\n  require amount / 10 <= totalSupply\n  totalSupply -= amount / 10\n  require amount <= balanceOf[caller]\n  balanceOf[caller] -= amount\n  require amount - (amount / 10) + balanceOf[recipient] >= balanceOf[recipient]\n  balanceOf[address(recipient)] = amount - (amount / 10) + balanceOf[recipient]\n  stor6[caller] += -1 * amount * stor9\n  stor6[recipient] = stor6[recipient] + (amount * stor9) - (amount / 10 * stor9)\n  require totalSupply\n  require ((25 * 10^6 * 3600 * amount / 10) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 10) - (10^10 * ((amount / 10) + 10^18)^2 + -(amount / 10) - 10^18 / 10^18 / 2) / 10^18 << 64 / totalSupply) + stor9 >= stor9\n  stor9 += (25 * 10^6 * 3600 * amount / 10) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 10) - (10^10 * ((amount / 10) + 10^18)^2 + -(amount / 10) - 10^18 / 10^18 / 2) / 10^18 << 64 / totalSupply\n  log Transfer(\n        address from=(amount - (amount / 10)),\n        address to=caller,\n        uint256 value=recipient)\n  return 1\n\ndef exit(): # not payable\n  if balanceOf[caller] > 0:\n      require balanceOf[caller] > 0\n      require balanceOf[caller] <= balanceOf[caller]\n      require 10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller])\n      require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n      require balanceOf[caller] <= totalSupply\n      totalSupply -= balanceOf[caller]\n      require balanceOf[caller] <= balanceOf[caller]\n      balanceOf[caller] = 0\n      stor6[caller] = stor6[caller] - (((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10) << 64) - (balanceOf[caller] * stor9)\n      if totalSupply > 0:\n          require totalSupply\n          require ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10 << 64 / totalSupply) + stor9 >= stor9\n          stor9 += (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10 << 64 / totalSupply\n      log onTokenSell(\n            address customerAddress=balanceOf[caller],\n            uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10),\n            uint256 ethereumEarned=caller)\n  require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller])\n  stor5[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef _fallback(?) payable: # default function\n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require call.value / 10 / 3 <= call.value / 10\n      require call.value / 10 <= call.value\n      s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - call.value > 20 * 10^18:\n          onlyAmbassadors = 0\n          require call.value / 10 / 3 <= call.value / 10\n          require call.value / 10 <= call.value\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require 1 == bool(stor3[caller])\n          require call.value + stor7[caller] <= 10^18\n          require call.value + stor7[caller] >= stor7[caller]\n          stor7[caller] += call.value\n          require call.value / 10 / 3 <= call.value / 10\n          require call.value / 10 <= call.value\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  require call.value / 10 >= (call.value / 10) - (call.value / 10 / 3)\n  if totalSupply <= 0:\n      totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n      balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 10 << 64)\n  else:\n      require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n      totalSupply = t - 100000000000 * 10^18 / 10^10\n      require t - 100000000000 * 10^18 / 10^10\n      stor9 += call.value / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n      require totalSupply\n      require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n      balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 10 << 64 / totalSupply) + (totalSupply * call.value / 10 << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=call.value,\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=0)\n\ndef buy(address _referredBy) payable: \n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require call.value / 10 / 3 <= call.value / 10\n      require call.value / 10 <= call.value\n      s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - call.value > 20 * 10^18:\n          onlyAmbassadors = 0\n          require call.value / 10 / 3 <= call.value / 10\n          require call.value / 10 <= call.value\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require 1 == bool(stor3[caller])\n          require call.value + stor7[caller] <= 10^18\n          require call.value + stor7[caller] >= stor7[caller]\n          stor7[caller] += call.value\n          require call.value / 10 / 3 <= call.value / 10\n          require call.value / 10 <= call.value\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  if not _referredBy:\n      require call.value / 10 >= (call.value / 10) - (call.value / 10 / 3)\n      if totalSupply <= 0:\n          totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n          balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n          stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 10 << 64)\n      else:\n          require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n          totalSupply = t - 100000000000 * 10^18 / 10^10\n          require t - 100000000000 * 10^18 / 10^10\n          stor9 += call.value / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n          require totalSupply\n          require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n          balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n          stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 10 << 64 / totalSupply) + (totalSupply * call.value / 10 << 64 / totalSupply)\n  else:\n      if _referredBy == caller:\n          require call.value / 10 >= (call.value / 10) - (call.value / 10 / 3)\n          if totalSupply <= 0:\n              totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n              balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n              stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 10 << 64)\n          else:\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              totalSupply = t - 100000000000 * 10^18 / 10^10\n              require t - 100000000000 * 10^18 / 10^10\n              stor9 += call.value / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n              require totalSupply\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n              balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n              stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 10 << 64 / totalSupply) + (totalSupply * call.value / 10 << 64 / totalSupply)\n      else:\n          if balanceOf[address(_referredBy)] < stakingRequirement:\n              require call.value / 10 >= (call.value / 10) - (call.value / 10 / 3)\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 10 << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require t - 100000000000 * 10^18 / 10^10\n                  stor9 += call.value / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 10 << 64 / totalSupply) + (totalSupply * call.value / 10 << 64 / totalSupply)\n          else:\n              require (call.value / 10 / 3) + stor5[address(_referredBy)] >= stor5[address(_referredBy)]\n              stor5[address(_referredBy)] += call.value / 10 / 3\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((call.value / 10) - (call.value / 10 / 3) << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require t - 100000000000 * 10^18 / 10^10\n                  stor9 += (call.value / 10) - (call.value / 10 / 3) << 64 / t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (call.value / 10) - (call.value / 10 / 3) << 64 / totalSupply) + (totalSupply * (call.value / 10) - (call.value / 10 / 3) << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=call.value,\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=_referredBy)\n  return 0\n\ndef reinvest(): # not payable\n  require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller])\n  stor5[caller] = 0\n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 / 3 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10\n      require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]\n      s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) - stor5[caller] > 20 * 10^18:\n          onlyAmbassadors = 0\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 / 3 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require 1 == bool(stor3[caller])\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] + stor7[caller] <= 10^18\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] + stor7[caller] >= stor7[caller]\n          stor7[caller] = (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] + stor7[caller]\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 / 3 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 >= ((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) - ((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 / 3)\n  if totalSupply <= 0:\n      totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n      balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 << 64)\n  else:\n      require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n      totalSupply = t - 100000000000 * 10^18 / 10^10\n      require t - 100000000000 * 10^18 / 10^10\n      stor9 += (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n      require totalSupply\n      require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n      balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 << 64 / totalSupply) + (totalSupply * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=(Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller],\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=0)\n  log onReinvestment(\n        address customerAddress=(Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller],\n        uint256 ethereumReinvested=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller)\n\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: # Palkeoramix decompiler. \n\nconst decimals = 18\nconst totalEthereumBalance = eth.balance(this.address)\n\ndef storage:\n  name is array of uint256 at storage 0\n  symbol is array of uint256 at storage 1\n  stakingRequirement is uint256 at storage 2\n  stor3 is mapping of uint8 at storage 3\n  balanceOf is mapping of uint256 at storage 4\n  stor5 is mapping of uint256 at storage 5\n  stor6 is mapping of uint256 at storage 6\n  stor7 is mapping of uint256 at storage 7\n  totalSupply is uint256 at storage 8\n  stor9 is uint256 at storage 9\n  stor10 is mapping of uint8 at storage 10\n  onlyAmbassadors is uint8 at storage 11\n\ndef name(): # not payable\n  return name[0 len name.length]\n\ndef totalSupply(): # not payable\n  return totalSupply\n\ndef onlyAmbassadors(): # not payable\n  return bool(onlyAmbassadors)\n\ndef administrators(bytes32 _param1): # not payable\n  return bool(stor10[_param1])\n\ndef stakingRequirement(): # not payable\n  return stakingRequirement\n\ndef balanceOf(address account): # not payable\n  return balanceOf[address(account)]\n\ndef myTokens(): # not payable\n  return balanceOf[caller]\n\ndef symbol(): # not payable\n  return symbol[0 len symbol.length]\n\n#\n#  Regular functions\n#\n\ndef disableInitialStage(): # not payable\n  require stor10[caller]\n  onlyAmbassadors = 0\n\ndef setStakingRequirement(uint256 _amountOfTokens): # not payable\n  require stor10[caller]\n  stakingRequirement = _amountOfTokens\n\ndef setName(string _name): # not payable\n  require stor10[caller]\n  name[] = Array(len=_name.length, data=_name[all])\n\ndef setAdministrator(bytes32 _identifier, bool _status): # not payable\n  require stor10[caller]\n  stor10[_identifier] = uint8(_status)\n\ndef setSymbol(string _symbol): # not payable\n  require stor10[caller]\n  symbol[] = Array(len=_symbol.length, data=_symbol[all])\n\ndef dividendsOf(address _customerAddress): # not payable\n  return (Mask(192, 64, (balanceOf[address(_customerAddress)] * stor9) - stor6[address(_customerAddress)]) >> 64)\n\ndef myDividends(bool _includeReferralBonus): # not payable\n  if _includeReferralBonus:\n      return ((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller])\n  return (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64)\n\ndef sellPrice(): # not payable\n  if not totalSupply:\n      return (25 * 10^6 * 3600)\n  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n  return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) - ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 10))\n\ndef buyPrice(): # not payable\n  if not totalSupply:\n      return 11 * 10^10\n  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n  require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 10) + ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n  return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 10) + ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18))\n\ndef withdraw(): # not payable\n  require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller])\n  stor5[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef calculateTokensReceived(uint256 _ethereumToSpend): # not payable\n  require _ethereumToSpend / 10 <= _ethereumToSpend\n  s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n  t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n  while s < t:\n      require s\n      s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n      t = s\n      continue \n  if 100000000000 * 10^18 <= t:\n      return ((t - 100000000000 * 10^18 / 10^10) - totalSupply)\n  revert\n\ndef calculateEthereumReceived(uint256 _tokensToSell): # not payable\n  require _tokensToSell <= totalSupply\n  require 10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell)\n  require (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 10 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18\n  return (((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 10))\n\ndef sell(uint256 amount): # not payable\n  require balanceOf[caller] > 0\n  require amount <= balanceOf[caller]\n  require 10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount)\n  require (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10 <= (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18\n  require amount <= totalSupply\n  totalSupply -= amount\n  require amount <= balanceOf[caller]\n  balanceOf[caller] -= amount\n  stor6[caller] = stor6[caller] - (((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10) << 64) - (amount * stor9)\n  if totalSupply > 0:\n      require totalSupply\n      require ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10 << 64 / totalSupply) + stor9 >= stor9\n      stor9 += (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10 << 64 / totalSupply\n  log onTokenSell(\n        address customerAddress=amount,\n        uint256 tokensBurned=((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10),\n        uint256 ethereumEarned=caller)\n\ndef transfer(address recipient, uint256 amount): # not payable\n  require balanceOf[caller] > 0\n  require not onlyAmbassadors\n  require amount <= balanceOf[caller]\n  if (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0:\n      require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0\n      stor6[caller] += Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller])\n      stor5[caller] = 0\n      call caller with:\n         value (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n      log onWithdraw(\n            address customerAddress=((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]),\n            uint256 ethereumWithdrawn=caller)\n  require amount / 10 <= amount\n  require 10^10 * ((amount / 10) + 10^18)^2 + -(amount / 10) - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * amount / 10) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 10)\n  require amount / 10 <= totalSupply\n  totalSupply -= amount / 10\n  require amount <= balanceOf[caller]\n  balanceOf[caller] -= amount\n  require amount - (amount / 10) + balanceOf[recipient] >= balanceOf[recipient]\n  balanceOf[address(recipient)] = amount - (amount / 10) + balanceOf[recipient]\n  stor6[caller] += -1 * amount * stor9\n  stor6[recipient] = stor6[recipient] + (amount * stor9) - (amount / 10 * stor9)\n  require totalSupply\n  require ((25 * 10^6 * 3600 * amount / 10) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 10) - (10^10 * ((amount / 10) + 10^18)^2 + -(amount / 10) - 10^18 / 10^18 / 2) / 10^18 << 64 / totalSupply) + stor9 >= stor9\n  stor9 += (25 * 10^6 * 3600 * amount / 10) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 10) - (10^10 * ((amount / 10) + 10^18)^2 + -(amount / 10) - 10^18 / 10^18 / 2) / 10^18 << 64 / totalSupply\n  log Transfer(\n        address from=(amount - (amount / 10)),\n        address to=caller,\n        uint256 value=recipient)\n  return 1\n\ndef exit(): # not payable\n  if balanceOf[caller] > 0:\n      require balanceOf[caller] > 0\n      require balanceOf[caller] <= balanceOf[caller]\n      require 10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller])\n      require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n      require balanceOf[caller] <= totalSupply\n      totalSupply -= balanceOf[caller]\n      require balanceOf[caller] <= balanceOf[caller]\n      balanceOf[caller] = 0\n      stor6[caller] = stor6[caller] - (((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10) << 64) - (balanceOf[caller] * stor9)\n      if totalSupply > 0:\n          require totalSupply\n          require ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10 << 64 / totalSupply) + stor9 >= stor9\n          stor9 += (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10 << 64 / totalSupply\n      log onTokenSell(\n            address customerAddress=balanceOf[caller],\n            uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10),\n            uint256 ethereumEarned=caller)\n  require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller])\n  stor5[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef _fallback(?) payable: # default function\n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require call.value / 10 / 3 <= call.value / 10\n      require call.value / 10 <= call.value\n      s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - call.value > 20 * 10^18:\n          onlyAmbassadors = 0\n          require call.value / 10 / 3 <= call.value / 10\n          require call.value / 10 <= call.value\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require 1 == bool(stor3[caller])\n          require call.value + stor7[caller] <= 10^18\n          require call.value + stor7[caller] >= stor7[caller]\n          stor7[caller] += call.value\n          require call.value / 10 / 3 <= call.value / 10\n          require call.value / 10 <= call.value\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  require call.value / 10 >= (call.value / 10) - (call.value / 10 / 3)\n  if totalSupply <= 0:\n      totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n      balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 10 << 64)\n  else:\n      require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n      totalSupply = t - 100000000000 * 10^18 / 10^10\n      require t - 100000000000 * 10^18 / 10^10\n      stor9 += call.value / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n      require totalSupply\n      require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n      balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 10 << 64 / totalSupply) + (totalSupply * call.value / 10 << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=call.value,\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=0)\n\ndef buy(address _referredBy) payable: \n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require call.value / 10 / 3 <= call.value / 10\n      require call.value / 10 <= call.value\n      s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - call.value > 20 * 10^18:\n          onlyAmbassadors = 0\n          require call.value / 10 / 3 <= call.value / 10\n          require call.value / 10 <= call.value\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require 1 == bool(stor3[caller])\n          require call.value + stor7[caller] <= 10^18\n          require call.value + stor7[caller] >= stor7[caller]\n          stor7[caller] += call.value\n          require call.value / 10 / 3 <= call.value / 10\n          require call.value / 10 <= call.value\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  if not _referredBy:\n      require call.value / 10 >= (call.value / 10) - (call.value / 10 / 3)\n      if totalSupply <= 0:\n          totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n          balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n          stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 10 << 64)\n      else:\n          require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n          totalSupply = t - 100000000000 * 10^18 / 10^10\n          require t - 100000000000 * 10^18 / 10^10\n          stor9 += call.value / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n          require totalSupply\n          require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n          balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n          stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 10 << 64 / totalSupply) + (totalSupply * call.value / 10 << 64 / totalSupply)\n  else:\n      if _referredBy == caller:\n          require call.value / 10 >= (call.value / 10) - (call.value / 10 / 3)\n          if totalSupply <= 0:\n              totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n              balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n              stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 10 << 64)\n          else:\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              totalSupply = t - 100000000000 * 10^18 / 10^10\n              require t - 100000000000 * 10^18 / 10^10\n              stor9 += call.value / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n              require totalSupply\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n              balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n              stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 10 << 64 / totalSupply) + (totalSupply * call.value / 10 << 64 / totalSupply)\n      else:\n          if balanceOf[address(_referredBy)] < stakingRequirement:\n              require call.value / 10 >= (call.value / 10) - (call.value / 10 / 3)\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 10 << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require t - 100000000000 * 10^18 / 10^10\n                  stor9 += call.value / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 10 << 64 / totalSupply) + (totalSupply * call.value / 10 << 64 / totalSupply)\n          else:\n              require (call.value / 10 / 3) + stor5[address(_referredBy)] >= stor5[address(_referredBy)]\n              stor5[address(_referredBy)] += call.value / 10 / 3\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((call.value / 10) - (call.value / 10 / 3) << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require t - 100000000000 * 10^18 / 10^10\n                  stor9 += (call.value / 10) - (call.value / 10 / 3) << 64 / t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (call.value / 10) - (call.value / 10 / 3) << 64 / totalSupply) + (totalSupply * (call.value / 10) - (call.value / 10 / 3) << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=call.value,\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=_referredBy)\n  return 0\n\ndef reinvest(): # not payable\n  require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller])\n  stor5[caller] = 0\n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 / 3 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10\n      require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]\n      s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) - stor5[caller] > 20 * 10^18:\n          onlyAmbassadors = 0\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 / 3 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require 1 == bool(stor3[caller])\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] + stor7[caller] <= 10^18\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] + stor7[caller] >= stor7[caller]\n          stor7[caller] = (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] + stor7[caller]\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 / 3 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 >= ((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) - ((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 / 3)\n  if totalSupply <= 0:\n      totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n      balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 << 64)\n  else:\n      require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n      totalSupply = t - 100000000000 * 10^18 / 10^10\n      require t - 100000000000 * 10^18 / 10^10\n      stor9 += (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n      require totalSupply\n      require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n      balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 << 64 / totalSupply) + (totalSupply * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=(Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller],\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=0)\n  log onReinvestment(\n        address customerAddress=(Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller],\n        uint256 ethereumReinvested=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller)\n\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: # Palkeoramix decompiler. \n\nconst decimals = 18\nconst totalEthereumBalance = eth.balance(this.address)\n\ndef storage:\n  name is array of uint256 at storage 0\n  symbol is array of uint256 at storage 1\n  stakingRequirement is uint256 at storage 2\n  stor3 is mapping of uint8 at storage 3\n  balanceOf is mapping of uint256 at storage 4\n  stor5 is mapping of uint256 at storage 5\n  stor6 is mapping of uint256 at storage 6\n  stor7 is mapping of uint256 at storage 7\n  totalSupply is uint256 at storage 8\n  stor9 is uint256 at storage 9\n  stor10 is mapping of uint8 at storage 10\n  onlyAmbassadors is uint8 at storage 11\n\ndef name(): # not payable\n  return name[0 len name.length]\n\ndef totalSupply(): # not payable\n  return totalSupply\n\ndef onlyAmbassadors(): # not payable\n  return bool(onlyAmbassadors)\n\ndef administrators(bytes32 _param1): # not payable\n  return bool(stor10[_param1])\n\ndef stakingRequirement(): # not payable\n  return stakingRequirement\n\ndef balanceOf(address account): # not payable\n  return balanceOf[address(account)]\n\ndef myTokens(): # not payable\n  return balanceOf[caller]\n\ndef symbol(): # not payable\n  return symbol[0 len symbol.length]\n\n#\n#  Regular functions\n#\n\ndef disableInitialStage(): # not payable\n  require stor10[caller]\n  onlyAmbassadors = 0\n\ndef setStakingRequirement(uint256 _amountOfTokens): # not payable\n  require stor10[caller]\n  stakingRequirement = _amountOfTokens\n\ndef setName(string _name): # not payable\n  require stor10[caller]\n  name[] = Array(len=_name.length, data=_name[all])\n\ndef setAdministrator(bytes32 _identifier, bool _status): # not payable\n  require stor10[caller]\n  stor10[_identifier] = uint8(_status)\n\ndef setSymbol(string _symbol): # not payable\n  require stor10[caller]\n  symbol[] = Array(len=_symbol.length, data=_symbol[all])\n\ndef dividendsOf(address _customerAddress): # not payable\n  return (Mask(192, 64, (balanceOf[address(_customerAddress)] * stor9) - stor6[address(_customerAddress)]) >> 64)\n\ndef myDividends(bool _includeReferralBonus): # not payable\n  if _includeReferralBonus:\n      return ((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller])\n  return (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64)\n\ndef sellPrice(): # not payable\n  if not totalSupply:\n      return (25 * 10^6 * 3600)\n  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n  require (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n  return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) - ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 10))\n\ndef buyPrice(): # not payable\n  if not totalSupply:\n      return 11 * 10^10\n  require 1999999999999999999 * 10^10 <= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + (25000000 * 10^18 * 3600)\n  require ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 10) + ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18) >= (10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18\n  return (((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18 / 10) + ((10000000000 * 10^18 * totalSupply + 10^18 / 10^18) + 7000000000000000001 * 10^10 / 10^18))\n\ndef withdraw(): # not payable\n  require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller])\n  stor5[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef calculateTokensReceived(uint256 _ethereumToSpend): # not payable\n  require _ethereumToSpend / 10 <= _ethereumToSpend\n  s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n  t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n  while s < t:\n      require s\n      s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * _ethereumToSpend) + (-20000000000000000000000000000 * 10^18 * _ethereumToSpend / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n      t = s\n      continue \n  if 100000000000 * 10^18 <= t:\n      return ((t - 100000000000 * 10^18 / 10^10) - totalSupply)\n  revert\n\ndef calculateEthereumReceived(uint256 _tokensToSell): # not payable\n  require _tokensToSell <= totalSupply\n  require 10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell)\n  require (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 10 <= (25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18\n  return (((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * _tokensToSell) + (10^10 * totalSupply + 10^18 / 10^18 * _tokensToSell) - (10^10 * (_tokensToSell + 10^18)^2 + -_tokensToSell - 10^18 / 10^18 / 2) / 10^18 / 10))\n\ndef sell(uint256 amount): # not payable\n  require balanceOf[caller] > 0\n  require amount <= balanceOf[caller]\n  require 10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount)\n  require (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10 <= (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18\n  require amount <= totalSupply\n  totalSupply -= amount\n  require amount <= balanceOf[caller]\n  balanceOf[caller] -= amount\n  stor6[caller] = stor6[caller] - (((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10) << 64) - (amount * stor9)\n  if totalSupply > 0:\n      require totalSupply\n      require ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10 << 64 / totalSupply) + stor9 >= stor9\n      stor9 += (25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10 << 64 / totalSupply\n  log onTokenSell(\n        address customerAddress=amount,\n        uint256 tokensBurned=((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * amount) + (10^10 * totalSupply + 10^18 / 10^18 * amount) - (10^10 * (amount + 10^18)^2 + -amount - 10^18 / 10^18 / 2) / 10^18 / 10),\n        uint256 ethereumEarned=caller)\n\ndef transfer(address recipient, uint256 amount): # not payable\n  require balanceOf[caller] > 0\n  require not onlyAmbassadors\n  require amount <= balanceOf[caller]\n  if (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0:\n      require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0\n      stor6[caller] += Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller])\n      stor5[caller] = 0\n      call caller with:\n         value (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] wei\n           gas 2300 * is_zero(value) wei\n      require ext_call.success\n      log onWithdraw(\n            address customerAddress=((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]),\n            uint256 ethereumWithdrawn=caller)\n  require amount / 10 <= amount\n  require 10^10 * ((amount / 10) + 10^18)^2 + -(amount / 10) - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * amount / 10) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 10)\n  require amount / 10 <= totalSupply\n  totalSupply -= amount / 10\n  require amount <= balanceOf[caller]\n  balanceOf[caller] -= amount\n  require amount - (amount / 10) + balanceOf[recipient] >= balanceOf[recipient]\n  balanceOf[address(recipient)] = amount - (amount / 10) + balanceOf[recipient]\n  stor6[caller] += -1 * amount * stor9\n  stor6[recipient] = stor6[recipient] + (amount * stor9) - (amount / 10 * stor9)\n  require totalSupply\n  require ((25 * 10^6 * 3600 * amount / 10) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 10) - (10^10 * ((amount / 10) + 10^18)^2 + -(amount / 10) - 10^18 / 10^18 / 2) / 10^18 << 64 / totalSupply) + stor9 >= stor9\n  stor9 += (25 * 10^6 * 3600 * amount / 10) + (10^10 * totalSupply + 10^18 / 10^18 * amount / 10) - (10^10 * ((amount / 10) + 10^18)^2 + -(amount / 10) - 10^18 / 10^18 / 2) / 10^18 << 64 / totalSupply\n  log Transfer(\n        address from=(amount - (amount / 10)),\n        address to=caller,\n        uint256 value=recipient)\n  return 1\n\ndef exit(): # not payable\n  if balanceOf[caller] > 0:\n      require balanceOf[caller] > 0\n      require balanceOf[caller] <= balanceOf[caller]\n      require 10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller])\n      require (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10 <= (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18\n      require balanceOf[caller] <= totalSupply\n      totalSupply -= balanceOf[caller]\n      require balanceOf[caller] <= balanceOf[caller]\n      balanceOf[caller] = 0\n      stor6[caller] = stor6[caller] - (((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10) << 64) - (balanceOf[caller] * stor9)\n      if totalSupply > 0:\n          require totalSupply\n          require ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10 << 64 / totalSupply) + stor9 >= stor9\n          stor9 += (25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10 << 64 / totalSupply\n      log onTokenSell(\n            address customerAddress=balanceOf[caller],\n            uint256 tokensBurned=((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18) - ((25 * 10^6 * 3600 * balanceOf[caller]) + (10^10 * totalSupply + 10^18 / 10^18 * balanceOf[caller]) - (10^10 * (balanceOf[caller] + 10^18)^2 + -balanceOf[caller] - 10^18 / 10^18 / 2) / 10^18 / 10),\n            uint256 ethereumEarned=caller)\n  require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller])\n  stor5[caller] = 0\n  call caller with:\n     value (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] wei\n       gas 2300 * is_zero(value) wei\n  require ext_call.success\n  log onWithdraw(\n        address customerAddress=((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]),\n        uint256 ethereumWithdrawn=caller)\n\ndef _fallback(?) payable: # default function\n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require call.value / 10 / 3 <= call.value / 10\n      require call.value / 10 <= call.value\n      s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - call.value > 20 * 10^18:\n          onlyAmbassadors = 0\n          require call.value / 10 / 3 <= call.value / 10\n          require call.value / 10 <= call.value\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require 1 == bool(stor3[caller])\n          require call.value + stor7[caller] <= 10^18\n          require call.value + stor7[caller] >= stor7[caller]\n          stor7[caller] += call.value\n          require call.value / 10 / 3 <= call.value / 10\n          require call.value / 10 <= call.value\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  require call.value / 10 >= (call.value / 10) - (call.value / 10 / 3)\n  if totalSupply <= 0:\n      totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n      balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 10 << 64)\n  else:\n      require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n      totalSupply = t - 100000000000 * 10^18 / 10^10\n      require t - 100000000000 * 10^18 / 10^10\n      stor9 += call.value / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n      require totalSupply\n      require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n      balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 10 << 64 / totalSupply) + (totalSupply * call.value / 10 << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=call.value,\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=0)\n\ndef buy(address _referredBy) payable: \n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require call.value / 10 / 3 <= call.value / 10\n      require call.value / 10 <= call.value\n      s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - call.value > 20 * 10^18:\n          onlyAmbassadors = 0\n          require call.value / 10 / 3 <= call.value / 10\n          require call.value / 10 <= call.value\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require 1 == bool(stor3[caller])\n          require call.value + stor7[caller] <= 10^18\n          require call.value + stor7[caller] >= stor7[caller]\n          stor7[caller] += call.value\n          require call.value / 10 / 3 <= call.value / 10\n          require call.value / 10 <= call.value\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * call.value) + (-20000000000000000000000000000 * 10^18 * call.value / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  if not _referredBy:\n      require call.value / 10 >= (call.value / 10) - (call.value / 10 / 3)\n      if totalSupply <= 0:\n          totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n          require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n          balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n          stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 10 << 64)\n      else:\n          require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n          totalSupply = t - 100000000000 * 10^18 / 10^10\n          require t - 100000000000 * 10^18 / 10^10\n          stor9 += call.value / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n          require totalSupply\n          require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n          balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n          stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 10 << 64 / totalSupply) + (totalSupply * call.value / 10 << 64 / totalSupply)\n  else:\n      if _referredBy == caller:\n          require call.value / 10 >= (call.value / 10) - (call.value / 10 / 3)\n          if totalSupply <= 0:\n              totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n              balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n              stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 10 << 64)\n          else:\n              require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n              totalSupply = t - 100000000000 * 10^18 / 10^10\n              require t - 100000000000 * 10^18 / 10^10\n              stor9 += call.value / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n              require totalSupply\n              require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n              balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n              stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 10 << 64 / totalSupply) + (totalSupply * call.value / 10 << 64 / totalSupply)\n      else:\n          if balanceOf[address(_referredBy)] < stakingRequirement:\n              require call.value / 10 >= (call.value / 10) - (call.value / 10 / 3)\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (call.value / 10 << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require t - 100000000000 * 10^18 / 10^10\n                  stor9 += call.value / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * call.value / 10 << 64 / totalSupply) + (totalSupply * call.value / 10 << 64 / totalSupply)\n          else:\n              require (call.value / 10 / 3) + stor5[address(_referredBy)] >= stor5[address(_referredBy)]\n              stor5[address(_referredBy)] += call.value / 10 / 3\n              if totalSupply <= 0:\n                  totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n                  require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((call.value / 10) - (call.value / 10 / 3) << 64)\n              else:\n                  require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n                  totalSupply = t - 100000000000 * 10^18 / 10^10\n                  require t - 100000000000 * 10^18 / 10^10\n                  stor9 += (call.value / 10) - (call.value / 10 / 3) << 64 / t - 100000000000 * 10^18 / 10^10\n                  require totalSupply\n                  require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n                  balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n                  stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (call.value / 10) - (call.value / 10 / 3) << 64 / totalSupply) + (totalSupply * (call.value / 10) - (call.value / 10 / 3) << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=call.value,\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=_referredBy)\n  return 0\n\ndef reinvest(): # not payable\n  require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] > 0\n  stor6[caller] += Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller])\n  stor5[caller] = 0\n  if not onlyAmbassadors:\n      onlyAmbassadors = 0\n      require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 / 3 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10\n      require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]\n      s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n      t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n      while s < t:\n          require s\n          s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n          t = s\n          continue \n  else:\n      if eth.balance(this.address) - (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) - stor5[caller] > 20 * 10^18:\n          onlyAmbassadors = 0\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 / 3 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n      else:\n          require 1 == bool(stor3[caller])\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] + stor7[caller] <= 10^18\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] + stor7[caller] >= stor7[caller]\n          stor7[caller] = (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] + stor7[caller]\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 / 3 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10\n          require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 <= (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller]\n          s = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000001 / 2\n          t = (2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000\n          while s < t:\n              require s\n              s = ((2000000000000000000000 * 10^18 * totalSupply) + (100 * 10^18 * totalSupply^2) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + (0x380d4bd8a8678c1bb542c80deb4800000000000 * stor5[caller]) + (-20000000000000000000000000000 * 10^18 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) + 0x197d4df19d605767337e9f14d3eec8920e400000000000000 / s) + s / 2\n              t = s\n              continue \n  require 100000000000 * 10^18 <= t\n  require (t - 100000000000 * 10^18 / 10^10) - totalSupply > 0\n  require t - 100000000000 * 10^18 / 10^10 >= (t - 100000000000 * 10^18 / 10^10) - totalSupply\n  require t - 100000000000 * 10^18 / 10^10 > totalSupply\n  require (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 >= ((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10) - ((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 / 3)\n  if totalSupply <= 0:\n      totalSupply = (t - 100000000000 * 10^18 / 10^10) - totalSupply\n      require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n      balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - ((Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 << 64)\n  else:\n      require t - 100000000000 * 10^18 / 10^10 >= totalSupply\n      totalSupply = t - 100000000000 * 10^18 / 10^10\n      require t - 100000000000 * 10^18 / 10^10\n      stor9 += (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 << 64 / t - 100000000000 * 10^18 / 10^10\n      require totalSupply\n      require (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller] >= balanceOf[caller]\n      balanceOf[caller] = (t - 100000000000 * 10^18 / 10^10) - totalSupply + balanceOf[caller]\n      stor6[caller] = stor6[caller] + (t - 100000000000 * 10^18 / 10^10 * stor9) - (totalSupply * stor9) - (t - 100000000000 * 10^18 / 10^10 * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 << 64 / totalSupply) + (totalSupply * (Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller] / 10 << 64 / totalSupply)\n  log onTokenPurchase(\n        address customerAddress=(Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller],\n        uint256 incomingEthereum=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller,\n        address referredBy=0)\n  log onReinvestment(\n        address customerAddress=(Mask(192, 64, (balanceOf[caller] * stor9) - stor6[caller]) >> 64) + stor5[caller],\n        uint256 ethereumReinvested=(t - 100000000000 * 10^18 / 10^10) - totalSupply,\n        uint256 tokensMinted=caller)\n\n.",
	"status": "1",
	"time_cost": 30.09287405014038,
	"usage": {
		"completion_tokens": 395,
		"prompt_tokens": 14134,
		"total_tokens": 14529
	}
}