{
	"address": "0x6ce8b8eed077f9b49c1fa684008ebb7562bb41ad",
	"choices": [
		{
			"finish_reason": "stop",
			"index": 0,
			"message": {
				"content": "Here's the Solidity contract code inferred from the decompiled code:\n\n```solidity\npragma solidity ^0.7.6;\n\ncontract Crowdfunding {\n    mapping (address => uint256) public contributionsETH;\n    mapping (address => uint256) public payoutsETH;\n    uint256 public fundingGoal;\n    uint256 public payoutETH;\n    uint256 public amountRaised;\n    uint256 public fee;\n    uint256 public feeWithdrawn;\n    uint256 public creationTime;\n    uint256 public deadlineBlockNumber;\n    address payable public beneficiary;\n    bool public open;\n    address payable public owner;\n\n    constructor(uint256 _fundingGoal, address payable _beneficiary, uint256 _deadlineBlockNumber) {\n        require(_deadlineBlockNumber >= block.number + 40);\n        beneficiary = _beneficiary;\n        payoutETH = 0;\n        amountRaised = 0;\n        fee = 0;\n        feeWithdrawn = 0;\n        fundingGoal = _fundingGoal;\n        deadlineBlockNumber = _deadlineBlockNumber;\n        open = true;\n        owner = msg.sender;\n    }\n\n    function safeKill() public {\n        require(block.number >= deadlineBlockNumber && open);\n        require(msg.sender == owner && address(this).balance > amountRaised);\n        owner.transfer(address(this).balance - amountRaised);\n        open = false;\n    }\n\n    function safeWithdrawal() public {\n        require(block.number >= deadlineBlockNumber && open);\n        if (amountRaised < fundingGoal) {\n            if (payoutsETH[msg.sender] == 0) {\n                payoutsETH[msg.sender] += contributionsETH[msg.sender];\n                payoutsETH[msg.sender] = 0;\n                msg.sender.transfer(contributionsETH[msg.sender]);\n            }\n        } else {\n            if (payoutETH != 0) {\n                if (msg.sender == owner && feeWithdrawn == 0) {\n                    feeWithdrawn += fee;\n                    selfdestruct(owner);\n                }\n            } else {\n                fee = amountRaised * 563 / 10000;\n                payoutETH += amountRaised - fee;\n                beneficiary.transfer(amountRaised - fee);\n            }\n        }\n    }\n\n    function contribute() public payable {\n        require(block.number < deadlineBlockNumber && open);\n        require(msg.value == 1 ether);\n        if (payoutsETH[msg.sender] == 0) {\n            contributionsETH[msg.sender] += msg.value;\n            amountRaised += msg.value;\n        }\n    }\n}\n```\nPlease note that the original decompiled code does not have a function to accept contributions. I have added a `contribute()` function for completeness. The function accepts contributions of 1 ether and updates the `contributionsETH` and `amountRaised` variables. Additionally, it checks whether the crowdfunding campaign is still open and whether the current block number is less than the `deadlineBlockNumber`.\n\nPlease check and revise the code to suit your needs, especially the logic in `safeWithdrawal()` and `safeKill()` functions, to ensure the correct rules for your use case. Also, be aware that the use of `selfdestruct` is discouraged in newer versions of Solidity due to security concerns.",
				"role": "assistant"
			}
		}
	],
	"created": 1701458586,
	"id": "chatcmpl-8R3OMhMFzMP81sl1iOBRrvD5Jprjx",
	"input_format": "DecompiledCode",
	"ir": "// Decompiled at www.contract-library.com\n// 2021.09.14 14:17 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _contributionsETH; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _payoutsETH; // STORAGE[0x2]\nuint256 _fundingGoal; // STORAGE[0x3]\nuint256 _payoutETH; // STORAGE[0x4]\nuint256 _amountRaised; // STORAGE[0x5]\nuint256 _fee; // STORAGE[0x7]\nuint256 _feeWithdrawn; // STORAGE[0x8]\nuint256 _creationTime; // STORAGE[0x9]\nuint256 _deadlineBlockNumber; // STORAGE[0xa]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 _open; // STORAGE[0xb] bytes 0 to 0\naddress _owner; // STORAGE[0x6] bytes 0 to 19\n\n\nfunction safeKill() public payable { \n    assert(!msg.value);\n    v0 = v1 = block.number >= _deadlineBlockNumber;\n    if (v1) {\n        v0 = _open;\n    }\n    require(v0);\n    v2 = v3 = msg.sender == _owner;\n    if (v3) {\n        v2 = (address(this)).balance > _amountRaised;\n    }\n    if (v2) {\n        v4 = _owner.call().value((address(this)).balance - _amountRaised).gas(!((address(this)).balance - _amountRaised) * 2300);\n        if (v4) {\n            _open = 0;\n        }\n    }\n}\n\nfunction payoutsETH(address varg0) public payable { \n    assert(!msg.value);\n    return _payoutsETH[varg0];\n}\n\nfunction beneficiary() public payable { \n    assert(!msg.value);\n    return _beneficiary;\n}\n\nfunction contributionsETH(address varg0) public payable { \n    assert(!msg.value);\n    return _contributionsETH[varg0];\n}\n\nfunction version() public payable { \n    assert(!msg.value);\n    return 2;\n}\n\nfunction payoutETH() public payable { \n    assert(!msg.value);\n    return _payoutETH;\n}\n\nfunction fundingGoal() public payable { \n    assert(!msg.value);\n    return _fundingGoal;\n}\n\nfunction amountRaised() public payable { \n    assert(!msg.value);\n    return _amountRaised;\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction deadlineBlockNumber() public payable { \n    assert(!msg.value);\n    return _deadlineBlockNumber;\n}\n\nfunction creationTime() public payable { \n    assert(!msg.value);\n    return _creationTime;\n}\n\nfunction fee() public payable { \n    assert(!msg.value);\n    return _fee;\n}\n\nfunction getContribution() public payable { \n    assert(!msg.value);\n    return _contributionsETH[msg.sender];\n}\n\nfunction feeWithdrawn() public payable { \n    assert(!msg.value);\n    return _feeWithdrawn;\n}\n\nfunction open() public payable { \n    assert(!msg.value);\n    return _open;\n}\n\nfunction safeWithdrawal() public payable { \n    assert(!msg.value);\n    v0 = v1 = block.number >= _deadlineBlockNumber;\n    if (v1) {\n        v0 = _open;\n    }\n    require(v0);\n    v2 = v3 = _amountRaised < _fundingGoal;\n    if (v3) {\n        v2 = _payoutsETH[msg.sender] == 0;\n    }\n    if (!v2) {\n        if (_payoutETH != 0) {\n            v4 = v5 = msg.sender == _owner;\n            if (v5) {\n                v4 = _feeWithdrawn == 0;\n            }\n            if (v4) {\n                _feeWithdrawn = _feeWithdrawn + _fee;\n                selfdestruct(_owner);\n            }\n        } else {\n            _fee = _amountRaised * 563 / 10000;\n            _payoutETH = _payoutETH + (_amountRaised - _fee);\n            v6 = _beneficiary.call().value(_amountRaised - _fee).gas(!(_amountRaised - _fee) * 2300);\n            if (!v6) {\n                _payoutETH = 0;\n            }\n        }\n    } else {\n        _payoutsETH[msg.sender] = _payoutsETH[msg.sender] + _contributionsETH[msg.sender];\n        _payoutsETH[msg.sender] = 0;\n        v7 = msg.sender.call().value(_contributionsETH[msg.sender]).gas(!_contributionsETH[msg.sender] * 2300);\n        if (!v7) {\n            _payoutsETH[msg.sender] = 0;\n            _payoutsETH[msg.sender] = _contributionsETH[msg.sender];\n        }\n    }\n    goto 0x4c3;\n}\n\nfunction initialize(uint256 varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    v0 = v1 = _open;\n    if (!v1) {\n        v0 = msg.sender != _owner;\n    }\n    require(!v0);\n    require(varg2 >= block.number + 40);\n    _beneficiary = varg1;\n    _payoutETH = 0;\n    _amountRaised = 0;\n    _fee = 0;\n    _feeWithdrawn = 0;\n    _fundingGoal = varg0;\n    _deadlineBlockNumber = varg2;\n    _open = 1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x58c5103 == function_selector) {\n            safeKill();\n        } else if (0x13222d0a == function_selector) {\n            payoutsETH(address);\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x3c6d2e19 == function_selector) {\n            contributionsETH(address);\n        } else if (0x54fd4d50 == function_selector) {\n            version();\n        } else if (0x659382fb == function_selector) {\n            payoutETH();\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xbe8db3cf == function_selector) {\n            deadlineBlockNumber();\n        } else if (0xd8270dce == function_selector) {\n            creationTime();\n        } else if (0xddca3f43 == function_selector) {\n            fee();\n        } else if (0xf10fdf5c == function_selector) {\n            getContribution();\n        } else if (0xf2ec602c == function_selector) {\n            feeWithdrawn();\n        } else if (0xfcfff16f == function_selector) {\n            open();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        } else if (0xfffb5183 == function_selector) {\n            initialize(uint256,address,uint256);\n        }\n    }\n    v0 = v1 = block.number < _deadlineBlockNumber;\n    if (v1) {\n        v0 = v2 = _open;\n    }\n    require(v0);\n    require(msg.value == 0xde0b6b3a7640000);\n    if (_payoutsETH[msg.sender] == 0) {\n        _contributionsETH[msg.sender] = _contributionsETH[msg.sender] + msg.value;\n        _amountRaised = _amountRaised + msg.value;\n    }\n}\n",
	"language": "Solidity",
	"messages": [
		{
			"content": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.",
			"role": "system"
		},
		{
			"content": "The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 14:17 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _contributionsETH; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _payoutsETH; // STORAGE[0x2]\nuint256 _fundingGoal; // STORAGE[0x3]\nuint256 _payoutETH; // STORAGE[0x4]\nuint256 _amountRaised; // STORAGE[0x5]\nuint256 _fee; // STORAGE[0x7]\nuint256 _feeWithdrawn; // STORAGE[0x8]\nuint256 _creationTime; // STORAGE[0x9]\nuint256 _deadlineBlockNumber; // STORAGE[0xa]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 _open; // STORAGE[0xb] bytes 0 to 0\naddress _owner; // STORAGE[0x6] bytes 0 to 19\n\n\nfunction safeKill() public payable { \n    assert(!msg.value);\n    v0 = v1 = block.number >= _deadlineBlockNumber;\n    if (v1) {\n        v0 = _open;\n    }\n    require(v0);\n    v2 = v3 = msg.sender == _owner;\n    if (v3) {\n        v2 = (address(this)).balance > _amountRaised;\n    }\n    if (v2) {\n        v4 = _owner.call().value((address(this)).balance - _amountRaised).gas(!((address(this)).balance - _amountRaised) * 2300);\n        if (v4) {\n            _open = 0;\n        }\n    }\n}\n\nfunction payoutsETH(address varg0) public payable { \n    assert(!msg.value);\n    return _payoutsETH[varg0];\n}\n\nfunction beneficiary() public payable { \n    assert(!msg.value);\n    return _beneficiary;\n}\n\nfunction contributionsETH(address varg0) public payable { \n    assert(!msg.value);\n    return _contributionsETH[varg0];\n}\n\nfunction version() public payable { \n    assert(!msg.value);\n    return 2;\n}\n\nfunction payoutETH() public payable { \n    assert(!msg.value);\n    return _payoutETH;\n}\n\nfunction fundingGoal() public payable { \n    assert(!msg.value);\n    return _fundingGoal;\n}\n\nfunction amountRaised() public payable { \n    assert(!msg.value);\n    return _amountRaised;\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction deadlineBlockNumber() public payable { \n    assert(!msg.value);\n    return _deadlineBlockNumber;\n}\n\nfunction creationTime() public payable { \n    assert(!msg.value);\n    return _creationTime;\n}\n\nfunction fee() public payable { \n    assert(!msg.value);\n    return _fee;\n}\n\nfunction getContribution() public payable { \n    assert(!msg.value);\n    return _contributionsETH[msg.sender];\n}\n\nfunction feeWithdrawn() public payable { \n    assert(!msg.value);\n    return _feeWithdrawn;\n}\n\nfunction open() public payable { \n    assert(!msg.value);\n    return _open;\n}\n\nfunction safeWithdrawal() public payable { \n    assert(!msg.value);\n    v0 = v1 = block.number >= _deadlineBlockNumber;\n    if (v1) {\n        v0 = _open;\n    }\n    require(v0);\n    v2 = v3 = _amountRaised < _fundingGoal;\n    if (v3) {\n        v2 = _payoutsETH[msg.sender] == 0;\n    }\n    if (!v2) {\n        if (_payoutETH != 0) {\n            v4 = v5 = msg.sender == _owner;\n            if (v5) {\n                v4 = _feeWithdrawn == 0;\n            }\n            if (v4) {\n                _feeWithdrawn = _feeWithdrawn + _fee;\n                selfdestruct(_owner);\n            }\n        } else {\n            _fee = _amountRaised * 563 / 10000;\n            _payoutETH = _payoutETH + (_amountRaised - _fee);\n            v6 = _beneficiary.call().value(_amountRaised - _fee).gas(!(_amountRaised - _fee) * 2300);\n            if (!v6) {\n                _payoutETH = 0;\n            }\n        }\n    } else {\n        _payoutsETH[msg.sender] = _payoutsETH[msg.sender] + _contributionsETH[msg.sender];\n        _payoutsETH[msg.sender] = 0;\n        v7 = msg.sender.call().value(_contributionsETH[msg.sender]).gas(!_contributionsETH[msg.sender] * 2300);\n        if (!v7) {\n            _payoutsETH[msg.sender] = 0;\n            _payoutsETH[msg.sender] = _contributionsETH[msg.sender];\n        }\n    }\n    goto 0x4c3;\n}\n\nfunction initialize(uint256 varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    v0 = v1 = _open;\n    if (!v1) {\n        v0 = msg.sender != _owner;\n    }\n    require(!v0);\n    require(varg2 >= block.number + 40);\n    _beneficiary = varg1;\n    _payoutETH = 0;\n    _amountRaised = 0;\n    _fee = 0;\n    _feeWithdrawn = 0;\n    _fundingGoal = varg0;\n    _deadlineBlockNumber = varg2;\n    _open = 1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x58c5103 == function_selector) {\n            safeKill();\n        } else if (0x13222d0a == function_selector) {\n            payoutsETH(address);\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x3c6d2e19 == function_selector) {\n            contributionsETH(address);\n        } else if (0x54fd4d50 == function_selector) {\n            version();\n        } else if (0x659382fb == function_selector) {\n            payoutETH();\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xbe8db3cf == function_selector) {\n            deadlineBlockNumber();\n        } else if (0xd8270dce == function_selector) {\n            creationTime();\n        } else if (0xddca3f43 == function_selector) {\n            fee();\n        } else if (0xf10fdf5c == function_selector) {\n            getContribution();\n        } else if (0xf2ec602c == function_selector) {\n            feeWithdrawn();\n        } else if (0xfcfff16f == function_selector) {\n            open();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        } else if (0xfffb5183 == function_selector) {\n            initialize(uint256,address,uint256);\n        }\n    }\n    v0 = v1 = block.number < _deadlineBlockNumber;\n    if (v1) {\n        v0 = v2 = _open;\n    }\n    require(v0);\n    require(msg.value == 0xde0b6b3a7640000);\n    if (_payoutsETH[msg.sender] == 0) {\n        _contributionsETH[msg.sender] = _contributionsETH[msg.sender] + msg.value;\n        _amountRaised = _amountRaised + msg.value;\n    }\n}\n.",
			"role": "user"
		}
	],
	"model": "gpt-4-32k",
	"object": "chat.completion",
	"prompts": "You are an experienced smart contract developer that excels at Solidity program languages. Please write a contract code by the following decompiled code lifted from EVM Bytecode.The following is the decompiled code: // Decompiled at www.contract-library.com\n// 2021.09.14 14:17 UTC\n\n// Data structures and variables inferred from the use of storage instructions\nmapping (uint256 => [uint256]) _contributionsETH; // STORAGE[0x1]\nmapping (uint256 => [uint256]) _payoutsETH; // STORAGE[0x2]\nuint256 _fundingGoal; // STORAGE[0x3]\nuint256 _payoutETH; // STORAGE[0x4]\nuint256 _amountRaised; // STORAGE[0x5]\nuint256 _fee; // STORAGE[0x7]\nuint256 _feeWithdrawn; // STORAGE[0x8]\nuint256 _creationTime; // STORAGE[0x9]\nuint256 _deadlineBlockNumber; // STORAGE[0xa]\naddress _beneficiary; // STORAGE[0x0] bytes 0 to 19\nuint8 _open; // STORAGE[0xb] bytes 0 to 0\naddress _owner; // STORAGE[0x6] bytes 0 to 19\n\n\nfunction safeKill() public payable { \n    assert(!msg.value);\n    v0 = v1 = block.number >= _deadlineBlockNumber;\n    if (v1) {\n        v0 = _open;\n    }\n    require(v0);\n    v2 = v3 = msg.sender == _owner;\n    if (v3) {\n        v2 = (address(this)).balance > _amountRaised;\n    }\n    if (v2) {\n        v4 = _owner.call().value((address(this)).balance - _amountRaised).gas(!((address(this)).balance - _amountRaised) * 2300);\n        if (v4) {\n            _open = 0;\n        }\n    }\n}\n\nfunction payoutsETH(address varg0) public payable { \n    assert(!msg.value);\n    return _payoutsETH[varg0];\n}\n\nfunction beneficiary() public payable { \n    assert(!msg.value);\n    return _beneficiary;\n}\n\nfunction contributionsETH(address varg0) public payable { \n    assert(!msg.value);\n    return _contributionsETH[varg0];\n}\n\nfunction version() public payable { \n    assert(!msg.value);\n    return 2;\n}\n\nfunction payoutETH() public payable { \n    assert(!msg.value);\n    return _payoutETH;\n}\n\nfunction fundingGoal() public payable { \n    assert(!msg.value);\n    return _fundingGoal;\n}\n\nfunction amountRaised() public payable { \n    assert(!msg.value);\n    return _amountRaised;\n}\n\nfunction owner() public payable { \n    assert(!msg.value);\n    return _owner;\n}\n\nfunction deadlineBlockNumber() public payable { \n    assert(!msg.value);\n    return _deadlineBlockNumber;\n}\n\nfunction creationTime() public payable { \n    assert(!msg.value);\n    return _creationTime;\n}\n\nfunction fee() public payable { \n    assert(!msg.value);\n    return _fee;\n}\n\nfunction getContribution() public payable { \n    assert(!msg.value);\n    return _contributionsETH[msg.sender];\n}\n\nfunction feeWithdrawn() public payable { \n    assert(!msg.value);\n    return _feeWithdrawn;\n}\n\nfunction open() public payable { \n    assert(!msg.value);\n    return _open;\n}\n\nfunction safeWithdrawal() public payable { \n    assert(!msg.value);\n    v0 = v1 = block.number >= _deadlineBlockNumber;\n    if (v1) {\n        v0 = _open;\n    }\n    require(v0);\n    v2 = v3 = _amountRaised < _fundingGoal;\n    if (v3) {\n        v2 = _payoutsETH[msg.sender] == 0;\n    }\n    if (!v2) {\n        if (_payoutETH != 0) {\n            v4 = v5 = msg.sender == _owner;\n            if (v5) {\n                v4 = _feeWithdrawn == 0;\n            }\n            if (v4) {\n                _feeWithdrawn = _feeWithdrawn + _fee;\n                selfdestruct(_owner);\n            }\n        } else {\n            _fee = _amountRaised * 563 / 10000;\n            _payoutETH = _payoutETH + (_amountRaised - _fee);\n            v6 = _beneficiary.call().value(_amountRaised - _fee).gas(!(_amountRaised - _fee) * 2300);\n            if (!v6) {\n                _payoutETH = 0;\n            }\n        }\n    } else {\n        _payoutsETH[msg.sender] = _payoutsETH[msg.sender] + _contributionsETH[msg.sender];\n        _payoutsETH[msg.sender] = 0;\n        v7 = msg.sender.call().value(_contributionsETH[msg.sender]).gas(!_contributionsETH[msg.sender] * 2300);\n        if (!v7) {\n            _payoutsETH[msg.sender] = 0;\n            _payoutsETH[msg.sender] = _contributionsETH[msg.sender];\n        }\n    }\n    goto 0x4c3;\n}\n\nfunction initialize(uint256 varg0, address varg1, uint256 varg2) public payable { \n    assert(!msg.value);\n    v0 = v1 = _open;\n    if (!v1) {\n        v0 = msg.sender != _owner;\n    }\n    require(!v0);\n    require(varg2 >= block.number + 40);\n    _beneficiary = varg1;\n    _payoutETH = 0;\n    _amountRaised = 0;\n    _fee = 0;\n    _feeWithdrawn = 0;\n    _fundingGoal = varg0;\n    _deadlineBlockNumber = varg2;\n    _open = 1;\n}\n\n// Note: The function selector is not present in the original solidity code.\n// However, we display it for the sake of completeness.\n\nfunction __function_selector__(uint32 function_selector) public payable { \n    MEM[64] = 96;\n    if (msg.data.length) {\n        if (0x58c5103 == function_selector) {\n            safeKill();\n        } else if (0x13222d0a == function_selector) {\n            payoutsETH(address);\n        } else if (0x38af3eed == function_selector) {\n            beneficiary();\n        } else if (0x3c6d2e19 == function_selector) {\n            contributionsETH(address);\n        } else if (0x54fd4d50 == function_selector) {\n            version();\n        } else if (0x659382fb == function_selector) {\n            payoutETH();\n        } else if (0x7a3a0e84 == function_selector) {\n            fundingGoal();\n        } else if (0x7b3e5e7b == function_selector) {\n            amountRaised();\n        } else if (0x8da5cb5b == function_selector) {\n            owner();\n        } else if (0xbe8db3cf == function_selector) {\n            deadlineBlockNumber();\n        } else if (0xd8270dce == function_selector) {\n            creationTime();\n        } else if (0xddca3f43 == function_selector) {\n            fee();\n        } else if (0xf10fdf5c == function_selector) {\n            getContribution();\n        } else if (0xf2ec602c == function_selector) {\n            feeWithdrawn();\n        } else if (0xfcfff16f == function_selector) {\n            open();\n        } else if (0xfd6b7ef8 == function_selector) {\n            safeWithdrawal();\n        } else if (0xfffb5183 == function_selector) {\n            initialize(uint256,address,uint256);\n        }\n    }\n    v0 = v1 = block.number < _deadlineBlockNumber;\n    if (v1) {\n        v0 = v2 = _open;\n    }\n    require(v0);\n    require(msg.value == 0xde0b6b3a7640000);\n    if (_payoutsETH[msg.sender] == 0) {\n        _contributionsETH[msg.sender] = _contributionsETH[msg.sender] + msg.value;\n        _amountRaised = _amountRaised + msg.value;\n    }\n}\n.",
	"status": "1",
	"time_cost": 30.569759130477905,
	"usage": {
		"completion_tokens": 646,
		"prompt_tokens": 1794,
		"total_tokens": 2440
	}
}